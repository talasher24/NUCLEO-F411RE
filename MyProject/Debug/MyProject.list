
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc8  08004dc8  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dd0  08004dd0  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08004dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000023c  08005014  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08005014  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa73  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024a9  00000000  00000000  0002fcdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00032188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  000330b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000176ee  00000000  00000000  00033eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2f4  00000000  00000000  0004b59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000931ef  00000000  00000000  00057892  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eaa81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e8  00000000  00000000  000eaafc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000023c 	.word	0x2000023c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004c30 	.word	0x08004c30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000240 	.word	0x20000240
 80001d4:	08004c30 	.word	0x08004c30

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_Init+0x40>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <HAL_Init+0x40>)
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_Init+0x40>)
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f8fa 	bl	800070a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	2000      	movs	r0, #0
 8000518:	f004 f85a 	bl	80045d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f003 ff46 	bl	80043ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x20>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x24>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_IncTick+0x24>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000004 	.word	0x20000004
 8000550:	2000026c 	.word	0x2000026c

08000554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return uwTick;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_GetTick+0x14>)
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	2000026c 	.word	0x2000026c

0800056c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000574:	f7ff ffee 	bl	8000554 <HAL_GetTick>
 8000578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000584:	d005      	beq.n	8000592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_Delay+0x40>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4413      	add	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000592:	bf00      	nop
 8000594:	f7ff ffde 	bl	8000554 <HAL_GetTick>
 8000598:	4602      	mov	r2, r0
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d8f7      	bhi.n	8000594 <HAL_Delay+0x28>
  {
  }
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000004 	.word	0x20000004

080005b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005cc:	4013      	ands	r3, r2
 80005ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	60d3      	str	r3, [r2, #12]
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <__NVIC_GetPriorityGrouping+0x18>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	0a1b      	lsrs	r3, r3, #8
 8000602:	f003 0307 	and.w	r3, r3, #7
}
 8000606:	4618      	mov	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db0b      	blt.n	800063e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 021f 	and.w	r2, r3, #31
 800062c:	4907      	ldr	r1, [pc, #28]	; (800064c <__NVIC_EnableIRQ+0x38>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	095b      	lsrs	r3, r3, #5
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e100 	.word	0xe000e100

08000650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	; (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	; (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f1c3 0307 	rsb	r3, r3, #7
 80006be:	2b04      	cmp	r3, #4
 80006c0:	bf28      	it	cs
 80006c2:	2304      	movcs	r3, #4
 80006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d902      	bls.n	80006d4 <NVIC_EncodePriority+0x30>
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3b03      	subs	r3, #3
 80006d2:	e000      	b.n	80006d6 <NVIC_EncodePriority+0x32>
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 32ff 	mov.w	r2, #4294967295
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	401a      	ands	r2, r3
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ec:	f04f 31ff 	mov.w	r1, #4294967295
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43d9      	mvns	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	4313      	orrs	r3, r2
         );
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3724      	adds	r7, #36	; 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff4c 	bl	80005b0 <__NVIC_SetPriorityGrouping>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000732:	f7ff ff61 	bl	80005f8 <__NVIC_GetPriorityGrouping>
 8000736:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	6978      	ldr	r0, [r7, #20]
 800073e:	f7ff ffb1 	bl	80006a4 <NVIC_EncodePriority>
 8000742:	4602      	mov	r2, r0
 8000744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff80 	bl	8000650 <__NVIC_SetPriority>
}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff54 	bl	8000614 <__NVIC_EnableIRQ>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e00e      	b.n	80007a4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	795b      	ldrb	r3, [r3, #5]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d105      	bne.n	800079c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f003 fe30 	bl	80043fc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2202      	movs	r2, #2
 80007c0:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00a      	b.n	80007de <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	441a      	add	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d3f0      	bcc.n	80007c8 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2201      	movs	r2, #1
 80007f2:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80007f4:	693b      	ldr	r3, [r7, #16]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	371c      	adds	r7, #28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b02      	cmp	r3, #2
 8000814:	d004      	beq.n	8000820 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	e00c      	b.n	800083a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2205      	movs	r2, #5
 8000824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f022 0201 	bic.w	r2, r2, #1
 8000836:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	e159      	b.n	8000b18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	429a      	cmp	r2, r3
 800087e:	f040 8148 	bne.w	8000b12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d00b      	beq.n	80008a2 <HAL_GPIO_Init+0x5a>
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d007      	beq.n	80008a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000896:	2b11      	cmp	r3, #17
 8000898:	d003      	beq.n	80008a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d130      	bne.n	8000904 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4013      	ands	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008d8:	2201      	movs	r2, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	091b      	lsrs	r3, r3, #4
 80008ee:	f003 0201 	and.w	r2, r3, #1
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d003      	beq.n	8000944 <HAL_GPIO_Init+0xfc>
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b12      	cmp	r3, #18
 8000942:	d123      	bne.n	800098c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	08da      	lsrs	r2, r3, #3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3208      	adds	r2, #8
 800094c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	f003 0307 	and.w	r3, r3, #7
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	220f      	movs	r2, #15
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	691a      	ldr	r2, [r3, #16]
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	08da      	lsrs	r2, r3, #3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3208      	adds	r2, #8
 8000986:	69b9      	ldr	r1, [r7, #24]
 8000988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2203      	movs	r2, #3
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	4013      	ands	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0203 	and.w	r2, r3, #3
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 80a2 	beq.w	8000b12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b56      	ldr	r3, [pc, #344]	; (8000b2c <HAL_GPIO_Init+0x2e4>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a55      	ldr	r2, [pc, #340]	; (8000b2c <HAL_GPIO_Init+0x2e4>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b53      	ldr	r3, [pc, #332]	; (8000b2c <HAL_GPIO_Init+0x2e4>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ea:	4a51      	ldr	r2, [pc, #324]	; (8000b30 <HAL_GPIO_Init+0x2e8>)
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	220f      	movs	r2, #15
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a48      	ldr	r2, [pc, #288]	; (8000b34 <HAL_GPIO_Init+0x2ec>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d019      	beq.n	8000a4a <HAL_GPIO_Init+0x202>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a47      	ldr	r2, [pc, #284]	; (8000b38 <HAL_GPIO_Init+0x2f0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d013      	beq.n	8000a46 <HAL_GPIO_Init+0x1fe>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a46      	ldr	r2, [pc, #280]	; (8000b3c <HAL_GPIO_Init+0x2f4>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d00d      	beq.n	8000a42 <HAL_GPIO_Init+0x1fa>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a45      	ldr	r2, [pc, #276]	; (8000b40 <HAL_GPIO_Init+0x2f8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_Init+0x1f6>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a44      	ldr	r2, [pc, #272]	; (8000b44 <HAL_GPIO_Init+0x2fc>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_Init+0x1f2>
 8000a36:	2304      	movs	r3, #4
 8000a38:	e008      	b.n	8000a4c <HAL_GPIO_Init+0x204>
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x204>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e004      	b.n	8000a4c <HAL_GPIO_Init+0x204>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <HAL_GPIO_Init+0x204>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x204>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	f002 0203 	and.w	r2, r2, #3
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	4093      	lsls	r3, r2
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a5c:	4934      	ldr	r1, [pc, #208]	; (8000b30 <HAL_GPIO_Init+0x2e8>)
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a6a:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <HAL_GPIO_Init+0x300>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <HAL_GPIO_Init+0x300>)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <HAL_GPIO_Init+0x300>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ab8:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <HAL_GPIO_Init+0x300>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_GPIO_Init+0x300>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4013      	ands	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ae2:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_GPIO_Init+0x300>)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_GPIO_Init+0x300>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_GPIO_Init+0x300>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3301      	adds	r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	f67f aea2 	bls.w	8000864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b20:	bf00      	nop
 8000b22:	3724      	adds	r7, #36	; 0x24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40013800 	.word	0x40013800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40013c00 	.word	0x40013c00

08000b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b5c:	787b      	ldrb	r3, [r7, #1]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b62:	887a      	ldrh	r2, [r7, #2]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b68:	e003      	b.n	8000b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	041a      	lsls	r2, r3, #16
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	619a      	str	r2, [r3, #24]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695a      	ldr	r2, [r3, #20]
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	401a      	ands	r2, r3
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d104      	bne.n	8000ba2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	041a      	lsls	r2, r3, #16
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ba0:	e002      	b.n	8000ba8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	619a      	str	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e25b      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d075      	beq.n	8000cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bd2:	4ba3      	ldr	r3, [pc, #652]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d00c      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bde:	4ba0      	ldr	r3, [pc, #640]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d112      	bne.n	8000c10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bea:	4b9d      	ldr	r3, [pc, #628]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bf6:	d10b      	bne.n	8000c10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf8:	4b99      	ldr	r3, [pc, #612]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d05b      	beq.n	8000cbc <HAL_RCC_OscConfig+0x108>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d157      	bne.n	8000cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e236      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c18:	d106      	bne.n	8000c28 <HAL_RCC_OscConfig+0x74>
 8000c1a:	4b91      	ldr	r3, [pc, #580]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a90      	ldr	r2, [pc, #576]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e01d      	b.n	8000c64 <HAL_RCC_OscConfig+0xb0>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c30:	d10c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x98>
 8000c32:	4b8b      	ldr	r3, [pc, #556]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a8a      	ldr	r2, [pc, #552]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b88      	ldr	r3, [pc, #544]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a87      	ldr	r2, [pc, #540]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e00b      	b.n	8000c64 <HAL_RCC_OscConfig+0xb0>
 8000c4c:	4b84      	ldr	r3, [pc, #528]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a83      	ldr	r2, [pc, #524]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b81      	ldr	r3, [pc, #516]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a80      	ldr	r2, [pc, #512]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fc72 	bl	8000554 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fc6e 	bl	8000554 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	; 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e1fb      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c86:	4b76      	ldr	r3, [pc, #472]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f0      	beq.n	8000c74 <HAL_RCC_OscConfig+0xc0>
 8000c92:	e014      	b.n	8000cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fc5e 	bl	8000554 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fc5a 	bl	8000554 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e1e7      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cae:	4b6c      	ldr	r3, [pc, #432]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f0      	bne.n	8000c9c <HAL_RCC_OscConfig+0xe8>
 8000cba:	e000      	b.n	8000cbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d063      	beq.n	8000d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cca:	4b65      	ldr	r3, [pc, #404]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00b      	beq.n	8000cee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cd6:	4b62      	ldr	r3, [pc, #392]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d11c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ce2:	4b5f      	ldr	r3, [pc, #380]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d116      	bne.n	8000d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cee:	4b5c      	ldr	r3, [pc, #368]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <HAL_RCC_OscConfig+0x152>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d001      	beq.n	8000d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e1bb      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d06:	4b56      	ldr	r3, [pc, #344]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4952      	ldr	r1, [pc, #328]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	e03a      	b.n	8000d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d020      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d24:	4b4f      	ldr	r3, [pc, #316]	; (8000e64 <HAL_RCC_OscConfig+0x2b0>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fc13 	bl	8000554 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fc0f 	bl	8000554 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e19c      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	4b46      	ldr	r3, [pc, #280]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d50:	4b43      	ldr	r3, [pc, #268]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4940      	ldr	r1, [pc, #256]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e015      	b.n	8000d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d66:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <HAL_RCC_OscConfig+0x2b0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fbf2 	bl	8000554 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d74:	f7ff fbee 	bl	8000554 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e17b      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d030      	beq.n	8000e00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d016      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_RCC_OscConfig+0x2b4>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dac:	f7ff fbd2 	bl	8000554 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fbce 	bl	8000554 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e15b      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0x200>
 8000dd2:	e015      	b.n	8000e00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_RCC_OscConfig+0x2b4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dda:	f7ff fbbb 	bl	8000554 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de2:	f7ff fbb7 	bl	8000554 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e144      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1f0      	bne.n	8000de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80a0 	beq.w	8000f4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10f      	bne.n	8000e3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_RCC_OscConfig+0x2ac>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_RCC_OscConfig+0x2b8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d121      	bne.n	8000e8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_RCC_OscConfig+0x2b8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_RCC_OscConfig+0x2b8>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e56:	f7ff fb7d 	bl	8000554 <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5c:	e011      	b.n	8000e82 <HAL_RCC_OscConfig+0x2ce>
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	42470000 	.word	0x42470000
 8000e68:	42470e80 	.word	0x42470e80
 8000e6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e70:	f7ff fb70 	bl	8000554 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e0fd      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e82:	4b81      	ldr	r3, [pc, #516]	; (8001088 <HAL_RCC_OscConfig+0x4d4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f0      	beq.n	8000e70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x2f0>
 8000e96:	4b7d      	ldr	r3, [pc, #500]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9a:	4a7c      	ldr	r2, [pc, #496]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea2:	e01c      	b.n	8000ede <HAL_RCC_OscConfig+0x32a>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d10c      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x312>
 8000eac:	4b77      	ldr	r3, [pc, #476]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb0:	4a76      	ldr	r2, [pc, #472]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb8:	4b74      	ldr	r3, [pc, #464]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ebc:	4a73      	ldr	r2, [pc, #460]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ec4:	e00b      	b.n	8000ede <HAL_RCC_OscConfig+0x32a>
 8000ec6:	4b71      	ldr	r3, [pc, #452]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eca:	4a70      	ldr	r2, [pc, #448]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed2:	4b6e      	ldr	r3, [pc, #440]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed6:	4a6d      	ldr	r2, [pc, #436]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000ed8:	f023 0304 	bic.w	r3, r3, #4
 8000edc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d015      	beq.n	8000f12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fb35 	bl	8000554 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eec:	e00a      	b.n	8000f04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eee:	f7ff fb31 	bl	8000554 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e0bc      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f04:	4b61      	ldr	r3, [pc, #388]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0ee      	beq.n	8000eee <HAL_RCC_OscConfig+0x33a>
 8000f10:	e014      	b.n	8000f3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fb1f 	bl	8000554 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f18:	e00a      	b.n	8000f30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f1a:	f7ff fb1b 	bl	8000554 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e0a6      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f30:	4b56      	ldr	r3, [pc, #344]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1ee      	bne.n	8000f1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d105      	bne.n	8000f4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f42:	4b52      	ldr	r3, [pc, #328]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a51      	ldr	r2, [pc, #324]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8092 	beq.w	800107c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 030c 	and.w	r3, r3, #12
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d05c      	beq.n	800101e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d141      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f6c:	4b48      	ldr	r3, [pc, #288]	; (8001090 <HAL_RCC_OscConfig+0x4dc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f72:	f7ff faef 	bl	8000554 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7a:	f7ff faeb 	bl	8000554 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e078      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8c:	4b3f      	ldr	r3, [pc, #252]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f0      	bne.n	8000f7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69da      	ldr	r2, [r3, #28]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	019b      	lsls	r3, r3, #6
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	041b      	lsls	r3, r3, #16
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fba:	061b      	lsls	r3, r3, #24
 8000fbc:	4933      	ldr	r1, [pc, #204]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_RCC_OscConfig+0x4dc>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fac4 	bl	8000554 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd0:	f7ff fac0 	bl	8000554 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e04d      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x41c>
 8000fee:	e045      	b.n	800107c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_RCC_OscConfig+0x4dc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff faad 	bl	8000554 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff faa9 	bl	8000554 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e036      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f0      	bne.n	8000ffe <HAL_RCC_OscConfig+0x44a>
 800101c:	e02e      	b.n	800107c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d101      	bne.n	800102a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e029      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_RCC_OscConfig+0x4d8>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	429a      	cmp	r2, r3
 800103c:	d11c      	bne.n	8001078 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001048:	429a      	cmp	r2, r3
 800104a:	d115      	bne.n	8001078 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001052:	4013      	ands	r3, r2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001058:	4293      	cmp	r3, r2
 800105a:	d10d      	bne.n	8001078 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001066:	429a      	cmp	r2, r3
 8001068:	d106      	bne.n	8001078 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001074:	429a      	cmp	r2, r3
 8001076:	d001      	beq.n	800107c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40007000 	.word	0x40007000
 800108c:	40023800 	.word	0x40023800
 8001090:	42470060 	.word	0x42470060

08001094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0cc      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d90c      	bls.n	80010d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b6:	4b65      	ldr	r3, [pc, #404]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	4b63      	ldr	r3, [pc, #396]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0b8      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a58      	ldr	r2, [pc, #352]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001100:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800110a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	494d      	ldr	r1, [pc, #308]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	4313      	orrs	r3, r2
 800111c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d044      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d107      	bne.n	8001142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d119      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e07f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d003      	beq.n	8001152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800114e:	2b03      	cmp	r3, #3
 8001150:	d107      	bne.n	8001162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d109      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e06f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e067      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f023 0203 	bic.w	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4934      	ldr	r1, [pc, #208]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	4313      	orrs	r3, r2
 8001182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001184:	f7ff f9e6 	bl	8000554 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	e00a      	b.n	80011a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118c:	f7ff f9e2 	bl	8000554 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f241 3288 	movw	r2, #5000	; 0x1388
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e04f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 020c 	and.w	r2, r3, #12
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d1eb      	bne.n	800118c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d20c      	bcs.n	80011dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e032      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4916      	ldr	r1, [pc, #88]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	490e      	ldr	r1, [pc, #56]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	4313      	orrs	r3, r2
 8001218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800121a:	f000 f821 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 800121e:	4601      	mov	r1, r0
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	fa21 f303 	lsr.w	r3, r1, r3
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_RCC_ClockConfig+0x1c8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f003 f9c8 	bl	80045d0 <HAL_InitTick>

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00
 8001250:	40023800 	.word	0x40023800
 8001254:	08004c80 	.word	0x08004c80
 8001258:	20000068 	.word	0x20000068
 800125c:	20000000 	.word	0x20000000

08001260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001276:	4b63      	ldr	r3, [pc, #396]	; (8001404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b04      	cmp	r3, #4
 8001280:	d007      	beq.n	8001292 <HAL_RCC_GetSysClockFreq+0x32>
 8001282:	2b08      	cmp	r3, #8
 8001284:	d008      	beq.n	8001298 <HAL_RCC_GetSysClockFreq+0x38>
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 80b4 	bne.w	80013f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800128c:	4b5e      	ldr	r3, [pc, #376]	; (8001408 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800128e:	60bb      	str	r3, [r7, #8]
       break;
 8001290:	e0b3      	b.n	80013fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001292:	4b5e      	ldr	r3, [pc, #376]	; (800140c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001294:	60bb      	str	r3, [r7, #8]
      break;
 8001296:	e0b0      	b.n	80013fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001298:	4b5a      	ldr	r3, [pc, #360]	; (8001404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012a2:	4b58      	ldr	r3, [pc, #352]	; (8001404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d04a      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	099b      	lsrs	r3, r3, #6
 80012b4:	f04f 0400 	mov.w	r4, #0
 80012b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	ea03 0501 	and.w	r5, r3, r1
 80012c4:	ea04 0602 	and.w	r6, r4, r2
 80012c8:	4629      	mov	r1, r5
 80012ca:	4632      	mov	r2, r6
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	f04f 0400 	mov.w	r4, #0
 80012d4:	0154      	lsls	r4, r2, #5
 80012d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012da:	014b      	lsls	r3, r1, #5
 80012dc:	4619      	mov	r1, r3
 80012de:	4622      	mov	r2, r4
 80012e0:	1b49      	subs	r1, r1, r5
 80012e2:	eb62 0206 	sbc.w	r2, r2, r6
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	f04f 0400 	mov.w	r4, #0
 80012ee:	0194      	lsls	r4, r2, #6
 80012f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012f4:	018b      	lsls	r3, r1, #6
 80012f6:	1a5b      	subs	r3, r3, r1
 80012f8:	eb64 0402 	sbc.w	r4, r4, r2
 80012fc:	f04f 0100 	mov.w	r1, #0
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	00e2      	lsls	r2, r4, #3
 8001306:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800130a:	00d9      	lsls	r1, r3, #3
 800130c:	460b      	mov	r3, r1
 800130e:	4614      	mov	r4, r2
 8001310:	195b      	adds	r3, r3, r5
 8001312:	eb44 0406 	adc.w	r4, r4, r6
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	0262      	lsls	r2, r4, #9
 8001320:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001324:	0259      	lsls	r1, r3, #9
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	4618      	mov	r0, r3
 800132c:	4621      	mov	r1, r4
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f04f 0400 	mov.w	r4, #0
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	f7fe ff56 	bl	80001e8 <__aeabi_uldivmod>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	e049      	b.n	80013d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001344:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	099b      	lsrs	r3, r3, #6
 800134a:	f04f 0400 	mov.w	r4, #0
 800134e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	ea03 0501 	and.w	r5, r3, r1
 800135a:	ea04 0602 	and.w	r6, r4, r2
 800135e:	4629      	mov	r1, r5
 8001360:	4632      	mov	r2, r6
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	f04f 0400 	mov.w	r4, #0
 800136a:	0154      	lsls	r4, r2, #5
 800136c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001370:	014b      	lsls	r3, r1, #5
 8001372:	4619      	mov	r1, r3
 8001374:	4622      	mov	r2, r4
 8001376:	1b49      	subs	r1, r1, r5
 8001378:	eb62 0206 	sbc.w	r2, r2, r6
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	f04f 0400 	mov.w	r4, #0
 8001384:	0194      	lsls	r4, r2, #6
 8001386:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800138a:	018b      	lsls	r3, r1, #6
 800138c:	1a5b      	subs	r3, r3, r1
 800138e:	eb64 0402 	sbc.w	r4, r4, r2
 8001392:	f04f 0100 	mov.w	r1, #0
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	00e2      	lsls	r2, r4, #3
 800139c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013a0:	00d9      	lsls	r1, r3, #3
 80013a2:	460b      	mov	r3, r1
 80013a4:	4614      	mov	r4, r2
 80013a6:	195b      	adds	r3, r3, r5
 80013a8:	eb44 0406 	adc.w	r4, r4, r6
 80013ac:	f04f 0100 	mov.w	r1, #0
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	02a2      	lsls	r2, r4, #10
 80013b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013ba:	0299      	lsls	r1, r3, #10
 80013bc:	460b      	mov	r3, r1
 80013be:	4614      	mov	r4, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	4621      	mov	r1, r4
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4623      	mov	r3, r4
 80013ce:	f7fe ff0b 	bl	80001e8 <__aeabi_uldivmod>
 80013d2:	4603      	mov	r3, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	0c1b      	lsrs	r3, r3, #16
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	3301      	adds	r3, #1
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f0:	60bb      	str	r3, [r7, #8]
      break;
 80013f2:	e002      	b.n	80013fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013f6:	60bb      	str	r3, [r7, #8]
      break;
 80013f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013fa:	68bb      	ldr	r3, [r7, #8]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	00f42400 	.word	0x00f42400
 800140c:	007a1200 	.word	0x007a1200

08001410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_RCC_GetHCLKFreq+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000068 	.word	0x20000068

08001428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800142c:	f7ff fff0 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 8001430:	4601      	mov	r1, r0
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	0a9b      	lsrs	r3, r3, #10
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_RCC_GetPCLK1Freq+0x24>)
 800143e:	5cd3      	ldrb	r3, [r2, r3]
 8001440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001444:	4618      	mov	r0, r3
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	08004c90 	.word	0x08004c90

08001450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001454:	f7ff ffdc 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 8001458:	4601      	mov	r1, r0
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	0b5b      	lsrs	r3, r3, #13
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	08004c90 	.word	0x08004c90

08001478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	220f      	movs	r2, #15
 8001486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_GetClockConfig+0x5c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0203 	and.w	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_RCC_GetClockConfig+0x5c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_RCC_GetClockConfig+0x5c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_RCC_GetClockConfig+0x60>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 020f 	and.w	r2, r3, #15
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	601a      	str	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40023c00 	.word	0x40023c00

080014dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d105      	bne.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001500:	2b00      	cmp	r3, #0
 8001502:	d038      	beq.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800150a:	f7ff f823 	bl	8000554 <HAL_GetTick>
 800150e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001512:	f7ff f81f 	bl	8000554 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0bd      	b.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001524:	4b61      	ldr	r3, [pc, #388]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	019b      	lsls	r3, r3, #6
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	071b      	lsls	r3, r3, #28
 8001542:	495a      	ldr	r1, [pc, #360]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001544:	4313      	orrs	r3, r2
 8001546:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800154a:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001550:	f7ff f800 	bl	8000554 <HAL_GetTick>
 8001554:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001558:	f7fe fffc 	bl	8000554 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e09a      	b.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800156a:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8083 	beq.w	800168a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b48      	ldr	r3, [pc, #288]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a47      	ldr	r2, [pc, #284]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
 8001594:	4b45      	ldr	r3, [pc, #276]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a42      	ldr	r2, [pc, #264]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015ac:	f7fe ffd2 	bl	8000554 <HAL_GetTick>
 80015b0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015b4:	f7fe ffce 	bl	8000554 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e06c      	b.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015c6:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015da:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d02f      	beq.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d028      	beq.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015fa:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001600:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001606:	4a29      	ldr	r2, [pc, #164]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	d114      	bne.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001618:	f7fe ff9c 	bl	8000554 <HAL_GetTick>
 800161c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7fe ff98 	bl	8000554 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e034      	b.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0ee      	beq.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800164a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800164e:	d10d      	bne.n	800166c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001664:	4911      	ldr	r1, [pc, #68]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
 800166a:	e005      	b.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001672:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001676:	6093      	str	r3, [r2, #8]
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800167a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001684:	4909      	ldr	r1, [pc, #36]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001686:	4313      	orrs	r3, r2
 8001688:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7d1a      	ldrb	r2, [r3, #20]
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800169c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	42470068 	.word	0x42470068
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42470e40 	.word	0x42470e40
 80016b8:	424711e0 	.word	0x424711e0

080016bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e083      	b.n	80017d6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7f5b      	ldrb	r3, [r3, #29]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f002 feae 	bl	8004440 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	22ca      	movs	r2, #202	; 0xca
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2253      	movs	r2, #83	; 0x53
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fb7a 	bl	8001df4 <RTC_EnterInitMode>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	22ff      	movs	r2, #255	; 0xff
 800170c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2204      	movs	r2, #4
 8001712:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e05e      	b.n	80017d6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800172a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6899      	ldr	r1, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68d2      	ldr	r2, [r2, #12]
 8001752:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	041a      	lsls	r2, r3, #16
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001776:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10e      	bne.n	80017a4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fb0c 	bl	8001da4 <HAL_RTC_WaitForSynchro>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2204      	movs	r2, #4
 800179e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e018      	b.n	80017d6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699a      	ldr	r2, [r3, #24]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	22ff      	movs	r2, #255	; 0xff
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
  }
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80017de:	b590      	push	{r4, r7, lr}
 80017e0:	b087      	sub	sp, #28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	7f1b      	ldrb	r3, [r3, #28]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_RTC_SetTime+0x1c>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e0aa      	b.n	8001950 <HAL_RTC_SetTime+0x172>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2202      	movs	r2, #2
 8001804:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d126      	bne.n	800185a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2200      	movs	r2, #0
 800181e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fb11 	bl	8001e4c <RTC_ByteToBcd2>
 800182a:	4603      	mov	r3, r0
 800182c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	785b      	ldrb	r3, [r3, #1]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fb0a 	bl	8001e4c <RTC_ByteToBcd2>
 8001838:	4603      	mov	r3, r0
 800183a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800183c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	789b      	ldrb	r3, [r3, #2]
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fb02 	bl	8001e4c <RTC_ByteToBcd2>
 8001848:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800184a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e018      	b.n	800188c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2200      	movs	r2, #0
 800186c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	785b      	ldrb	r3, [r3, #1]
 8001878:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800187a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001880:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	78db      	ldrb	r3, [r3, #3]
 8001886:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	22ca      	movs	r2, #202	; 0xca
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2253      	movs	r2, #83	; 0x53
 800189a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 faa9 	bl	8001df4 <RTC_EnterInitMode>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	22ff      	movs	r2, #255	; 0xff
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2204      	movs	r2, #4
 80018b4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e047      	b.n	8001950 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80018ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80018ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6899      	ldr	r1, [r3, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001906:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d111      	bne.n	800193a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fa44 	bl	8001da4 <HAL_RTC_WaitForSynchro>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	22ff      	movs	r2, #255	; 0xff
 8001928:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2204      	movs	r2, #4
 800192e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00a      	b.n	8001950 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	22ff      	movs	r2, #255	; 0xff
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800194e:	2300      	movs	r3, #0
  }
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}

08001958 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	7f1b      	ldrb	r3, [r3, #28]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_RTC_SetDate+0x1c>
 8001970:	2302      	movs	r3, #2
 8001972:	e094      	b.n	8001a9e <HAL_RTC_SetDate+0x146>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2202      	movs	r2, #2
 800197e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10e      	bne.n	80019a4 <HAL_RTC_SetDate+0x4c>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	785b      	ldrb	r3, [r3, #1]
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	2b00      	cmp	r3, #0
 8001990:	d008      	beq.n	80019a4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	f023 0310 	bic.w	r3, r3, #16
 800199a:	b2db      	uxtb	r3, r3
 800199c:	330a      	adds	r3, #10
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11c      	bne.n	80019e4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	78db      	ldrb	r3, [r3, #3]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fa4c 	bl	8001e4c <RTC_ByteToBcd2>
 80019b4:	4603      	mov	r3, r0
 80019b6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	785b      	ldrb	r3, [r3, #1]
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fa45 	bl	8001e4c <RTC_ByteToBcd2>
 80019c2:	4603      	mov	r3, r0
 80019c4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80019c6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	789b      	ldrb	r3, [r3, #2]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fa3d 	bl	8001e4c <RTC_ByteToBcd2>
 80019d2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80019d4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80019de:	4313      	orrs	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e00e      	b.n	8001a02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	78db      	ldrb	r3, [r3, #3]
 80019e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80019f0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80019f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80019fe:	4313      	orrs	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	22ca      	movs	r2, #202	; 0xca
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2253      	movs	r2, #83	; 0x53
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f9ee 	bl	8001df4 <RTC_EnterInitMode>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	22ff      	movs	r2, #255	; 0xff
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e033      	b.n	8001a9e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a44:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a54:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0320 	and.w	r3, r3, #32
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f99d 	bl	8001da4 <HAL_RTC_WaitForSynchro>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00b      	beq.n	8001a88 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	22ff      	movs	r2, #255	; 0xff
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e00a      	b.n	8001a9e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	22ff      	movs	r2, #255	; 0xff
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd90      	pop	{r4, r7, pc}
	...

08001aa8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8001abc:	4b93      	ldr	r3, [pc, #588]	; (8001d0c <HAL_RTC_SetAlarm_IT+0x264>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a93      	ldr	r2, [pc, #588]	; (8001d10 <HAL_RTC_SetAlarm_IT+0x268>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0adb      	lsrs	r3, r3, #11
 8001ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	7f1b      	ldrb	r3, [r3, #28]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_RTC_SetAlarm_IT+0x36>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e111      	b.n	8001d02 <HAL_RTC_SetAlarm_IT+0x25a>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d137      	bne.n	8001b60 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2200      	movs	r2, #0
 8001b02:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f99f 	bl	8001e4c <RTC_ByteToBcd2>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	785b      	ldrb	r3, [r3, #1]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f998 	bl	8001e4c <RTC_ByteToBcd2>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b20:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	789b      	ldrb	r3, [r3, #2]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f990 	bl	8001e4c <RTC_ByteToBcd2>
 8001b2c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001b2e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	78db      	ldrb	r3, [r3, #3]
 8001b36:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001b38:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f982 	bl	8001e4c <RTC_ByteToBcd2>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001b4c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001b54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e023      	b.n	8001ba8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2200      	movs	r2, #0
 8001b72:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001b80:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001b86:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	78db      	ldrb	r3, [r3, #3]
 8001b8c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001b8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b96:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001b98:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001b9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	22ca      	movs	r2, #202	; 0xca
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2253      	movs	r2, #83	; 0x53
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bcc:	d141      	bne.n	8001c52 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bdc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001bee:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	1e5a      	subs	r2, r3, #1
 8001bf4:	617a      	str	r2, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	22ff      	movs	r2, #255	; 0xff
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2203      	movs	r2, #3
 8001c06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e077      	b.n	8001d02 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0e7      	beq.n	8001bf0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	e040      	b.n	8001cd4 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c60:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001c72:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	617a      	str	r2, [r7, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10b      	bne.n	8001c96 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	22ff      	movs	r2, #255	; 0xff
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e035      	b.n	8001d02 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0e7      	beq.n	8001c74 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_RTC_SetAlarm_IT+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_RTC_SetAlarm_IT+0x26c>)
 8001cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cde:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_RTC_SetAlarm_IT+0x26c>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_RTC_SetAlarm_IT+0x26c>)
 8001ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cea:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	22ff      	movs	r2, #255	; 0xff
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000068 	.word	0x20000068
 8001d10:	10624dd3 	.word	0x10624dd3
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d012      	beq.n	8001d54 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f002 fb09 	bl	8004354 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001d52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d012      	beq.n	8001d88 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00b      	beq.n	8001d88 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f889 	bl	8001e88 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001d86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8001d8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d8e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	775a      	strb	r2, [r3, #29]
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dbe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc0:	f7fe fbc8 	bl	8000554 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001dc6:	e009      	b.n	8001ddc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001dc8:	f7fe fbc4 	bl	8000554 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dd6:	d901      	bls.n	8001ddc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e007      	b.n	8001dec <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0ee      	beq.n	8001dc8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d119      	bne.n	8001e42 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295
 8001e16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e18:	f7fe fb9c 	bl	8000554 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001e1e:	e009      	b.n	8001e34 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e20:	f7fe fb98 	bl	8000554 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e2e:	d901      	bls.n	8001e34 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e007      	b.n	8001e44 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ee      	beq.n	8001e20 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8001e5a:	e005      	b.n	8001e68 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	3b0a      	subs	r3, #10
 8001e66:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	2b09      	cmp	r3, #9
 8001e6c:	d8f6      	bhi.n	8001e5c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b2db      	uxtb	r3, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e01d      	b.n	8001eea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f002 fad8 	bl	8004478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f000 fb8e 	bl	80025fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d007      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e01d      	b.n	8001f88 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f815 	bl	8001f90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f000 fb3f 	bl	80025fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fdc6 	bl	8002b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_TIM_PWM_Start+0x60>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d107      	bne.n	8001fd6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b06      	cmp	r3, #6
 8001fe6:	d007      	beq.n	8001ff8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40010000 	.word	0x40010000

08002008 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	6839      	ldr	r1, [r7, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fd94 	bl	8002b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_TIM_PWM_Stop+0x94>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d117      	bne.n	800205a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	f241 1311 	movw	r3, #4369	; 0x1111
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10f      	bne.n	800205a <HAL_TIM_PWM_Stop+0x52>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	f240 4344 	movw	r3, #1092	; 0x444
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_TIM_PWM_Stop+0x52>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a1a      	ldr	r2, [r3, #32]
 8002060:	f241 1311 	movw	r3, #4369	; 0x1111
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10f      	bne.n	800208a <HAL_TIM_PWM_Stop+0x82>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6a1a      	ldr	r2, [r3, #32]
 8002070:	f240 4344 	movw	r3, #1092	; 0x444
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d107      	bne.n	800208a <HAL_TIM_PWM_Stop+0x82>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40010000 	.word	0x40010000

080020a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0202 	mvn.w	r2, #2
 80020cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fa6b 	bl	80025be <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa5d 	bl	80025aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fa6e 	bl	80025d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b04      	cmp	r3, #4
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b04      	cmp	r3, #4
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0204 	mvn.w	r2, #4
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2202      	movs	r2, #2
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa41 	bl	80025be <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fa33 	bl	80025aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fa44 	bl	80025d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b08      	cmp	r3, #8
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b08      	cmp	r3, #8
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0208 	mvn.w	r2, #8
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2204      	movs	r2, #4
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa17 	bl	80025be <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fa09 	bl	80025aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fa1a 	bl	80025d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d122      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d11b      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0210 	mvn.w	r2, #16
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2208      	movs	r2, #8
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f9ed 	bl	80025be <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f9df 	bl	80025aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f9f0 	bl	80025d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0201 	mvn.w	r2, #1
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f002 f8aa 	bl	8004378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b80      	cmp	r3, #128	; 0x80
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fd1a 	bl	8002c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d10e      	bne.n	800227c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d107      	bne.n	800227c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f9b5 	bl	80025e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b20      	cmp	r3, #32
 8002288:	d10e      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b20      	cmp	r3, #32
 8002296:	d107      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0220 	mvn.w	r2, #32
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fce4 	bl	8002c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e0b4      	b.n	8002434 <HAL_TIM_PWM_ConfigChannel+0x184>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	f200 809f 	bhi.w	8002420 <HAL_TIM_PWM_ConfigChannel+0x170>
 80022e2:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	0800231d 	.word	0x0800231d
 80022ec:	08002421 	.word	0x08002421
 80022f0:	08002421 	.word	0x08002421
 80022f4:	08002421 	.word	0x08002421
 80022f8:	0800235d 	.word	0x0800235d
 80022fc:	08002421 	.word	0x08002421
 8002300:	08002421 	.word	0x08002421
 8002304:	08002421 	.word	0x08002421
 8002308:	0800239f 	.word	0x0800239f
 800230c:	08002421 	.word	0x08002421
 8002310:	08002421 	.word	0x08002421
 8002314:	08002421 	.word	0x08002421
 8002318:	080023df 	.word	0x080023df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f9ea 	bl	80026fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0208 	orr.w	r2, r2, #8
 8002336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0204 	bic.w	r2, r2, #4
 8002346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6999      	ldr	r1, [r3, #24]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	619a      	str	r2, [r3, #24]
      break;
 800235a:	e062      	b.n	8002422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fa30 	bl	80027c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6999      	ldr	r1, [r3, #24]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	021a      	lsls	r2, r3, #8
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	619a      	str	r2, [r3, #24]
      break;
 800239c:	e041      	b.n	8002422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fa7b 	bl	80028a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0208 	orr.w	r2, r2, #8
 80023b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0204 	bic.w	r2, r2, #4
 80023c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69d9      	ldr	r1, [r3, #28]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	61da      	str	r2, [r3, #28]
      break;
 80023dc:	e021      	b.n	8002422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fac5 	bl	8002974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69da      	ldr	r2, [r3, #28]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69d9      	ldr	r1, [r3, #28]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	021a      	lsls	r2, r3, #8
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	61da      	str	r2, [r3, #28]
      break;
 800241e:	e000      	b.n	8002422 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002420:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_TIM_ConfigClockSource+0x18>
 8002450:	2302      	movs	r3, #2
 8002452:	e0a6      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x166>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002472:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800247a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b40      	cmp	r3, #64	; 0x40
 800248a:	d067      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x120>
 800248c:	2b40      	cmp	r3, #64	; 0x40
 800248e:	d80b      	bhi.n	80024a8 <HAL_TIM_ConfigClockSource+0x6c>
 8002490:	2b10      	cmp	r3, #16
 8002492:	d073      	beq.n	800257c <HAL_TIM_ConfigClockSource+0x140>
 8002494:	2b10      	cmp	r3, #16
 8002496:	d802      	bhi.n	800249e <HAL_TIM_ConfigClockSource+0x62>
 8002498:	2b00      	cmp	r3, #0
 800249a:	d06f      	beq.n	800257c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800249c:	e078      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d06c      	beq.n	800257c <HAL_TIM_ConfigClockSource+0x140>
 80024a2:	2b30      	cmp	r3, #48	; 0x30
 80024a4:	d06a      	beq.n	800257c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024a6:	e073      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024a8:	2b70      	cmp	r3, #112	; 0x70
 80024aa:	d00d      	beq.n	80024c8 <HAL_TIM_ConfigClockSource+0x8c>
 80024ac:	2b70      	cmp	r3, #112	; 0x70
 80024ae:	d804      	bhi.n	80024ba <HAL_TIM_ConfigClockSource+0x7e>
 80024b0:	2b50      	cmp	r3, #80	; 0x50
 80024b2:	d033      	beq.n	800251c <HAL_TIM_ConfigClockSource+0xe0>
 80024b4:	2b60      	cmp	r3, #96	; 0x60
 80024b6:	d041      	beq.n	800253c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80024b8:	e06a      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	d066      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x152>
 80024c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c4:	d017      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80024c6:	e063      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6899      	ldr	r1, [r3, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f000 fb16 	bl	8002b08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	609a      	str	r2, [r3, #8]
      break;
 80024f4:	e04c      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f000 faff 	bl	8002b08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002518:	609a      	str	r2, [r3, #8]
      break;
 800251a:	e039      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	461a      	mov	r2, r3
 800252a:	f000 fa73 	bl	8002a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2150      	movs	r1, #80	; 0x50
 8002534:	4618      	mov	r0, r3
 8002536:	f000 facc 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 800253a:	e029      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	461a      	mov	r2, r3
 800254a:	f000 fa92 	bl	8002a72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2160      	movs	r1, #96	; 0x60
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fabc 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 800255a:	e019      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	461a      	mov	r2, r3
 800256a:	f000 fa53 	bl	8002a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	4618      	mov	r0, r3
 8002576:	f000 faac 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 800257a:	e009      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f000 faa3 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 800258c:	e000      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800258e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a34      	ldr	r2, [pc, #208]	; (80026e0 <TIM_Base_SetConfig+0xe4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00f      	beq.n	8002634 <TIM_Base_SetConfig+0x38>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261a:	d00b      	beq.n	8002634 <TIM_Base_SetConfig+0x38>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <TIM_Base_SetConfig+0xe8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <TIM_Base_SetConfig+0x38>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <TIM_Base_SetConfig+0xec>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d003      	beq.n	8002634 <TIM_Base_SetConfig+0x38>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a2f      	ldr	r2, [pc, #188]	; (80026ec <TIM_Base_SetConfig+0xf0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d108      	bne.n	8002646 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <TIM_Base_SetConfig+0xe4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01b      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002654:	d017      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <TIM_Base_SetConfig+0xe8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <TIM_Base_SetConfig+0xec>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00f      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a20      	ldr	r2, [pc, #128]	; (80026ec <TIM_Base_SetConfig+0xf0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00b      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <TIM_Base_SetConfig+0xf4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <TIM_Base_SetConfig+0xf8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d003      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <TIM_Base_SetConfig+0xfc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d108      	bne.n	8002698 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <TIM_Base_SetConfig+0xe4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d103      	bne.n	80026cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	615a      	str	r2, [r3, #20]
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800
 80026ec:	40000c00 	.word	0x40000c00
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800

080026fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f023 0201 	bic.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f023 0302 	bic.w	r3, r3, #2
 8002744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <TIM_OC1_SetConfig+0xc8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d10c      	bne.n	8002772 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0308 	bic.w	r3, r3, #8
 800275e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <TIM_OC1_SetConfig+0xc8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d111      	bne.n	800279e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	621a      	str	r2, [r3, #32]
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40010000 	.word	0x40010000

080027c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f023 0210 	bic.w	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0320 	bic.w	r3, r3, #32
 8002812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a1e      	ldr	r2, [pc, #120]	; (800289c <TIM_OC2_SetConfig+0xd4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10d      	bne.n	8002844 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800282e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002842:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a15      	ldr	r2, [pc, #84]	; (800289c <TIM_OC2_SetConfig+0xd4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d113      	bne.n	8002874 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002852:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800285a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40010000 	.word	0x40010000

080028a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <TIM_OC3_SetConfig+0xd0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10d      	bne.n	800291a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <TIM_OC3_SetConfig+0xd0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d113      	bne.n	800294a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	621a      	str	r2, [r3, #32]
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40010000 	.word	0x40010000

08002974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	031b      	lsls	r3, r3, #12
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <TIM_OC4_SetConfig+0x9c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d109      	bne.n	80029e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000

08002a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f023 0201 	bic.w	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f023 030a 	bic.w	r3, r3, #10
 8002a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b087      	sub	sp, #28
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0210 	bic.w	r2, r3, #16
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	031b      	lsls	r3, r3, #12
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f043 0307 	orr.w	r3, r3, #7
 8002af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1a      	ldr	r2, [r3, #32]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	431a      	orrs	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e050      	b.n	8002c4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d018      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d013      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d009      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10c      	bne.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800
 8002c68:	40000c00 	.word	0x40000c00
 8002c6c:	40014000 	.word	0x40014000

08002c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e03f      	b.n	8002d2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f001 fc36 	bl	8004530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2224      	movs	r2, #36	; 0x24
 8002cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fb97 	bl	8003410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b088      	sub	sp, #32
 8002d36:	af02      	add	r7, sp, #8
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	f040 8083 	bne.w	8002e5a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_UART_Transmit+0x2e>
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e07b      	b.n	8002e5c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Transmit+0x40>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e074      	b.n	8002e5c <HAL_UART_Transmit+0x12a>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2221      	movs	r2, #33	; 0x21
 8002d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d88:	f7fd fbe4 	bl	8000554 <HAL_GetTick>
 8002d8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	88fa      	ldrh	r2, [r7, #6]
 8002d92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	88fa      	ldrh	r2, [r7, #6]
 8002d98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002da2:	e042      	b.n	8002e2a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	d122      	bne.n	8002e02 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f9b6 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e042      	b.n	8002e5c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3302      	adds	r3, #2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	e017      	b.n	8002e2a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	e013      	b.n	8002e2a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f993 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e01f      	b.n	8002e5c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	60ba      	str	r2, [r7, #8]
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1b7      	bne.n	8002da4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2140      	movs	r1, #64	; 0x40
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f97a 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e006      	b.n	8002e5c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d140      	bne.n	8002f00 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_UART_Receive_IT+0x26>
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e039      	b.n	8002f02 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_UART_Receive_IT+0x38>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e032      	b.n	8002f02 <HAL_UART_Receive_IT+0x9e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2222      	movs	r2, #34	; 0x22
 8002ec0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eda:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0220 	orr.w	r2, r2, #32
 8002efa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_UART_IRQHandler+0x52>
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f9d6 	bl	800330c <UART_Receive_IT>
      return;
 8002f60:	e0d1      	b.n	8003106 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80b0 	beq.w	80030ca <HAL_UART_IRQHandler+0x1ba>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_UART_IRQHandler+0x70>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80a5 	beq.w	80030ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_UART_IRQHandler+0x90>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xb0>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	f043 0202 	orr.w	r2, r3, #2
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_UART_IRQHandler+0xd0>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00f      	beq.n	800300a <HAL_UART_IRQHandler+0xfa>
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_UART_IRQHandler+0xee>
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	f043 0208 	orr.w	r2, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d078      	beq.n	8003104 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_UART_IRQHandler+0x11c>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f970 	bl	800330c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_UART_IRQHandler+0x144>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d031      	beq.n	80030b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f8b9 	bl	80031cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d123      	bne.n	80030b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003076:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	4a21      	ldr	r2, [pc, #132]	; (800310c <HAL_UART_IRQHandler+0x1fc>)
 8003086:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fbb8 	bl	8000802 <HAL_DMA_Abort_IT>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030a2:	4610      	mov	r0, r2
 80030a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a6:	e00e      	b.n	80030c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f83b 	bl	8003124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ae:	e00a      	b.n	80030c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f837 	bl	8003124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b6:	e006      	b.n	80030c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f833 	bl	8003124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80030c4:	e01e      	b.n	8003104 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c6:	bf00      	nop
    return;
 80030c8:	e01c      	b.n	8003104 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_UART_IRQHandler+0x1d6>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8a6 	bl	8003230 <UART_Transmit_IT>
    return;
 80030e4:	e00f      	b.n	8003106 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <HAL_UART_IRQHandler+0x1f6>
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8ee 	bl	80032dc <UART_EndTransmit_IT>
    return;
 8003100:	bf00      	nop
 8003102:	e000      	b.n	8003106 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003104:	bf00      	nop
  }
}
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	08003209 	.word	0x08003209

08003110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003148:	e02c      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d028      	beq.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <UART_WaitOnFlagUntilTimeout+0x30>
 8003158:	f7fd f9fc 	bl	8000554 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	429a      	cmp	r2, r3
 8003166:	d21d      	bcs.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003176:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e00f      	b.n	80031c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d0c3      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff ff7e 	bl	8003124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b21      	cmp	r3, #33	; 0x21
 8003242:	d144      	bne.n	80032ce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	d11a      	bne.n	8003284 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003262:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	1c9a      	adds	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	621a      	str	r2, [r3, #32]
 8003276:	e00e      	b.n	8003296 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	621a      	str	r2, [r3, #32]
 8003282:	e008      	b.n	8003296 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6211      	str	r1, [r2, #32]
 800328e:	781a      	ldrb	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29b      	uxth	r3, r3
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4619      	mov	r1, r3
 80032a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff07 	bl	8003110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b22      	cmp	r3, #34	; 0x22
 800331e:	d171      	bne.n	8003404 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003328:	d123      	bne.n	8003372 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10e      	bne.n	8003356 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b29b      	uxth	r3, r3
 8003340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	1c9a      	adds	r2, r3, #2
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
 8003354:	e029      	b.n	80033aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	b29b      	uxth	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
 8003370:	e01b      	b.n	80033aa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6858      	ldr	r0, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	1c59      	adds	r1, r3, #1
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6291      	str	r1, [r2, #40]	; 0x28
 800338a:	b2c2      	uxtb	r2, r0
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e00c      	b.n	80033aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	1c58      	adds	r0, r3, #1
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	6288      	str	r0, [r1, #40]	; 0x28
 80033a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4619      	mov	r1, r3
 80033b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d120      	bne.n	8003400 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0220 	bic.w	r2, r2, #32
 80033cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fe34 	bl	8004064 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e002      	b.n	8003406 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003452:	f023 030c 	bic.w	r3, r3, #12
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	430b      	orrs	r3, r1
 800345e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347e:	f040 818b 	bne.w	8003798 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4ac1      	ldr	r2, [pc, #772]	; (800378c <UART_SetConfig+0x37c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d005      	beq.n	8003498 <UART_SetConfig+0x88>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4abf      	ldr	r2, [pc, #764]	; (8003790 <UART_SetConfig+0x380>)
 8003492:	4293      	cmp	r3, r2
 8003494:	f040 80bd 	bne.w	8003612 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003498:	f7fd ffda 	bl	8001450 <HAL_RCC_GetPCLK2Freq>
 800349c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	461d      	mov	r5, r3
 80034a2:	f04f 0600 	mov.w	r6, #0
 80034a6:	46a8      	mov	r8, r5
 80034a8:	46b1      	mov	r9, r6
 80034aa:	eb18 0308 	adds.w	r3, r8, r8
 80034ae:	eb49 0409 	adc.w	r4, r9, r9
 80034b2:	4698      	mov	r8, r3
 80034b4:	46a1      	mov	r9, r4
 80034b6:	eb18 0805 	adds.w	r8, r8, r5
 80034ba:	eb49 0906 	adc.w	r9, r9, r6
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034d2:	4688      	mov	r8, r1
 80034d4:	4691      	mov	r9, r2
 80034d6:	eb18 0005 	adds.w	r0, r8, r5
 80034da:	eb49 0106 	adc.w	r1, r9, r6
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	461d      	mov	r5, r3
 80034e4:	f04f 0600 	mov.w	r6, #0
 80034e8:	196b      	adds	r3, r5, r5
 80034ea:	eb46 0406 	adc.w	r4, r6, r6
 80034ee:	461a      	mov	r2, r3
 80034f0:	4623      	mov	r3, r4
 80034f2:	f7fc fe79 	bl	80001e8 <__aeabi_uldivmod>
 80034f6:	4603      	mov	r3, r0
 80034f8:	460c      	mov	r4, r1
 80034fa:	461a      	mov	r2, r3
 80034fc:	4ba5      	ldr	r3, [pc, #660]	; (8003794 <UART_SetConfig+0x384>)
 80034fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	461d      	mov	r5, r3
 800350c:	f04f 0600 	mov.w	r6, #0
 8003510:	46a9      	mov	r9, r5
 8003512:	46b2      	mov	sl, r6
 8003514:	eb19 0309 	adds.w	r3, r9, r9
 8003518:	eb4a 040a 	adc.w	r4, sl, sl
 800351c:	4699      	mov	r9, r3
 800351e:	46a2      	mov	sl, r4
 8003520:	eb19 0905 	adds.w	r9, r9, r5
 8003524:	eb4a 0a06 	adc.w	sl, sl, r6
 8003528:	f04f 0100 	mov.w	r1, #0
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003534:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003538:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800353c:	4689      	mov	r9, r1
 800353e:	4692      	mov	sl, r2
 8003540:	eb19 0005 	adds.w	r0, r9, r5
 8003544:	eb4a 0106 	adc.w	r1, sl, r6
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	461d      	mov	r5, r3
 800354e:	f04f 0600 	mov.w	r6, #0
 8003552:	196b      	adds	r3, r5, r5
 8003554:	eb46 0406 	adc.w	r4, r6, r6
 8003558:	461a      	mov	r2, r3
 800355a:	4623      	mov	r3, r4
 800355c:	f7fc fe44 	bl	80001e8 <__aeabi_uldivmod>
 8003560:	4603      	mov	r3, r0
 8003562:	460c      	mov	r4, r1
 8003564:	461a      	mov	r2, r3
 8003566:	4b8b      	ldr	r3, [pc, #556]	; (8003794 <UART_SetConfig+0x384>)
 8003568:	fba3 1302 	umull	r1, r3, r3, r2
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	2164      	movs	r1, #100	; 0x64
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3332      	adds	r3, #50	; 0x32
 800357a:	4a86      	ldr	r2, [pc, #536]	; (8003794 <UART_SetConfig+0x384>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003588:	4498      	add	r8, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	461d      	mov	r5, r3
 800358e:	f04f 0600 	mov.w	r6, #0
 8003592:	46a9      	mov	r9, r5
 8003594:	46b2      	mov	sl, r6
 8003596:	eb19 0309 	adds.w	r3, r9, r9
 800359a:	eb4a 040a 	adc.w	r4, sl, sl
 800359e:	4699      	mov	r9, r3
 80035a0:	46a2      	mov	sl, r4
 80035a2:	eb19 0905 	adds.w	r9, r9, r5
 80035a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035be:	4689      	mov	r9, r1
 80035c0:	4692      	mov	sl, r2
 80035c2:	eb19 0005 	adds.w	r0, r9, r5
 80035c6:	eb4a 0106 	adc.w	r1, sl, r6
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	461d      	mov	r5, r3
 80035d0:	f04f 0600 	mov.w	r6, #0
 80035d4:	196b      	adds	r3, r5, r5
 80035d6:	eb46 0406 	adc.w	r4, r6, r6
 80035da:	461a      	mov	r2, r3
 80035dc:	4623      	mov	r3, r4
 80035de:	f7fc fe03 	bl	80001e8 <__aeabi_uldivmod>
 80035e2:	4603      	mov	r3, r0
 80035e4:	460c      	mov	r4, r1
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <UART_SetConfig+0x384>)
 80035ea:	fba3 1302 	umull	r1, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2164      	movs	r1, #100	; 0x64
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	3332      	adds	r3, #50	; 0x32
 80035fc:	4a65      	ldr	r2, [pc, #404]	; (8003794 <UART_SetConfig+0x384>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	f003 0207 	and.w	r2, r3, #7
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4442      	add	r2, r8
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	e26f      	b.n	8003af2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003612:	f7fd ff09 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
 8003616:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	461d      	mov	r5, r3
 800361c:	f04f 0600 	mov.w	r6, #0
 8003620:	46a8      	mov	r8, r5
 8003622:	46b1      	mov	r9, r6
 8003624:	eb18 0308 	adds.w	r3, r8, r8
 8003628:	eb49 0409 	adc.w	r4, r9, r9
 800362c:	4698      	mov	r8, r3
 800362e:	46a1      	mov	r9, r4
 8003630:	eb18 0805 	adds.w	r8, r8, r5
 8003634:	eb49 0906 	adc.w	r9, r9, r6
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003644:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003648:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800364c:	4688      	mov	r8, r1
 800364e:	4691      	mov	r9, r2
 8003650:	eb18 0005 	adds.w	r0, r8, r5
 8003654:	eb49 0106 	adc.w	r1, r9, r6
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	461d      	mov	r5, r3
 800365e:	f04f 0600 	mov.w	r6, #0
 8003662:	196b      	adds	r3, r5, r5
 8003664:	eb46 0406 	adc.w	r4, r6, r6
 8003668:	461a      	mov	r2, r3
 800366a:	4623      	mov	r3, r4
 800366c:	f7fc fdbc 	bl	80001e8 <__aeabi_uldivmod>
 8003670:	4603      	mov	r3, r0
 8003672:	460c      	mov	r4, r1
 8003674:	461a      	mov	r2, r3
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <UART_SetConfig+0x384>)
 8003678:	fba3 2302 	umull	r2, r3, r3, r2
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	461d      	mov	r5, r3
 8003686:	f04f 0600 	mov.w	r6, #0
 800368a:	46a9      	mov	r9, r5
 800368c:	46b2      	mov	sl, r6
 800368e:	eb19 0309 	adds.w	r3, r9, r9
 8003692:	eb4a 040a 	adc.w	r4, sl, sl
 8003696:	4699      	mov	r9, r3
 8003698:	46a2      	mov	sl, r4
 800369a:	eb19 0905 	adds.w	r9, r9, r5
 800369e:	eb4a 0a06 	adc.w	sl, sl, r6
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036b6:	4689      	mov	r9, r1
 80036b8:	4692      	mov	sl, r2
 80036ba:	eb19 0005 	adds.w	r0, r9, r5
 80036be:	eb4a 0106 	adc.w	r1, sl, r6
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	461d      	mov	r5, r3
 80036c8:	f04f 0600 	mov.w	r6, #0
 80036cc:	196b      	adds	r3, r5, r5
 80036ce:	eb46 0406 	adc.w	r4, r6, r6
 80036d2:	461a      	mov	r2, r3
 80036d4:	4623      	mov	r3, r4
 80036d6:	f7fc fd87 	bl	80001e8 <__aeabi_uldivmod>
 80036da:	4603      	mov	r3, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	461a      	mov	r2, r3
 80036e0:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <UART_SetConfig+0x384>)
 80036e2:	fba3 1302 	umull	r1, r3, r3, r2
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2164      	movs	r1, #100	; 0x64
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	3332      	adds	r3, #50	; 0x32
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <UART_SetConfig+0x384>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003702:	4498      	add	r8, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	461d      	mov	r5, r3
 8003708:	f04f 0600 	mov.w	r6, #0
 800370c:	46a9      	mov	r9, r5
 800370e:	46b2      	mov	sl, r6
 8003710:	eb19 0309 	adds.w	r3, r9, r9
 8003714:	eb4a 040a 	adc.w	r4, sl, sl
 8003718:	4699      	mov	r9, r3
 800371a:	46a2      	mov	sl, r4
 800371c:	eb19 0905 	adds.w	r9, r9, r5
 8003720:	eb4a 0a06 	adc.w	sl, sl, r6
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003730:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003734:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003738:	4689      	mov	r9, r1
 800373a:	4692      	mov	sl, r2
 800373c:	eb19 0005 	adds.w	r0, r9, r5
 8003740:	eb4a 0106 	adc.w	r1, sl, r6
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	461d      	mov	r5, r3
 800374a:	f04f 0600 	mov.w	r6, #0
 800374e:	196b      	adds	r3, r5, r5
 8003750:	eb46 0406 	adc.w	r4, r6, r6
 8003754:	461a      	mov	r2, r3
 8003756:	4623      	mov	r3, r4
 8003758:	f7fc fd46 	bl	80001e8 <__aeabi_uldivmod>
 800375c:	4603      	mov	r3, r0
 800375e:	460c      	mov	r4, r1
 8003760:	461a      	mov	r2, r3
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <UART_SetConfig+0x384>)
 8003764:	fba3 1302 	umull	r1, r3, r3, r2
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	2164      	movs	r1, #100	; 0x64
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	3332      	adds	r3, #50	; 0x32
 8003776:	4a07      	ldr	r2, [pc, #28]	; (8003794 <UART_SetConfig+0x384>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	f003 0207 	and.w	r2, r3, #7
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4442      	add	r2, r8
 8003788:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800378a:	e1b2      	b.n	8003af2 <UART_SetConfig+0x6e2>
 800378c:	40011000 	.word	0x40011000
 8003790:	40011400 	.word	0x40011400
 8003794:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4ad7      	ldr	r2, [pc, #860]	; (8003afc <UART_SetConfig+0x6ec>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d005      	beq.n	80037ae <UART_SetConfig+0x39e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4ad6      	ldr	r2, [pc, #856]	; (8003b00 <UART_SetConfig+0x6f0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	f040 80d1 	bne.w	8003950 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80037ae:	f7fd fe4f 	bl	8001450 <HAL_RCC_GetPCLK2Freq>
 80037b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	469a      	mov	sl, r3
 80037b8:	f04f 0b00 	mov.w	fp, #0
 80037bc:	46d0      	mov	r8, sl
 80037be:	46d9      	mov	r9, fp
 80037c0:	eb18 0308 	adds.w	r3, r8, r8
 80037c4:	eb49 0409 	adc.w	r4, r9, r9
 80037c8:	4698      	mov	r8, r3
 80037ca:	46a1      	mov	r9, r4
 80037cc:	eb18 080a 	adds.w	r8, r8, sl
 80037d0:	eb49 090b 	adc.w	r9, r9, fp
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037e8:	4688      	mov	r8, r1
 80037ea:	4691      	mov	r9, r2
 80037ec:	eb1a 0508 	adds.w	r5, sl, r8
 80037f0:	eb4b 0609 	adc.w	r6, fp, r9
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	f04f 0400 	mov.w	r4, #0
 8003806:	0094      	lsls	r4, r2, #2
 8003808:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800380c:	008b      	lsls	r3, r1, #2
 800380e:	461a      	mov	r2, r3
 8003810:	4623      	mov	r3, r4
 8003812:	4628      	mov	r0, r5
 8003814:	4631      	mov	r1, r6
 8003816:	f7fc fce7 	bl	80001e8 <__aeabi_uldivmod>
 800381a:	4603      	mov	r3, r0
 800381c:	460c      	mov	r4, r1
 800381e:	461a      	mov	r2, r3
 8003820:	4bb8      	ldr	r3, [pc, #736]	; (8003b04 <UART_SetConfig+0x6f4>)
 8003822:	fba3 2302 	umull	r2, r3, r3, r2
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	469b      	mov	fp, r3
 8003830:	f04f 0c00 	mov.w	ip, #0
 8003834:	46d9      	mov	r9, fp
 8003836:	46e2      	mov	sl, ip
 8003838:	eb19 0309 	adds.w	r3, r9, r9
 800383c:	eb4a 040a 	adc.w	r4, sl, sl
 8003840:	4699      	mov	r9, r3
 8003842:	46a2      	mov	sl, r4
 8003844:	eb19 090b 	adds.w	r9, r9, fp
 8003848:	eb4a 0a0c 	adc.w	sl, sl, ip
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003858:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800385c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003860:	4689      	mov	r9, r1
 8003862:	4692      	mov	sl, r2
 8003864:	eb1b 0509 	adds.w	r5, fp, r9
 8003868:	eb4c 060a 	adc.w	r6, ip, sl
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4619      	mov	r1, r3
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	f04f 0400 	mov.w	r4, #0
 800387e:	0094      	lsls	r4, r2, #2
 8003880:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003884:	008b      	lsls	r3, r1, #2
 8003886:	461a      	mov	r2, r3
 8003888:	4623      	mov	r3, r4
 800388a:	4628      	mov	r0, r5
 800388c:	4631      	mov	r1, r6
 800388e:	f7fc fcab 	bl	80001e8 <__aeabi_uldivmod>
 8003892:	4603      	mov	r3, r0
 8003894:	460c      	mov	r4, r1
 8003896:	461a      	mov	r2, r3
 8003898:	4b9a      	ldr	r3, [pc, #616]	; (8003b04 <UART_SetConfig+0x6f4>)
 800389a:	fba3 1302 	umull	r1, r3, r3, r2
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2164      	movs	r1, #100	; 0x64
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	3332      	adds	r3, #50	; 0x32
 80038ac:	4a95      	ldr	r2, [pc, #596]	; (8003b04 <UART_SetConfig+0x6f4>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b8:	4498      	add	r8, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	469b      	mov	fp, r3
 80038be:	f04f 0c00 	mov.w	ip, #0
 80038c2:	46d9      	mov	r9, fp
 80038c4:	46e2      	mov	sl, ip
 80038c6:	eb19 0309 	adds.w	r3, r9, r9
 80038ca:	eb4a 040a 	adc.w	r4, sl, sl
 80038ce:	4699      	mov	r9, r3
 80038d0:	46a2      	mov	sl, r4
 80038d2:	eb19 090b 	adds.w	r9, r9, fp
 80038d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ee:	4689      	mov	r9, r1
 80038f0:	4692      	mov	sl, r2
 80038f2:	eb1b 0509 	adds.w	r5, fp, r9
 80038f6:	eb4c 060a 	adc.w	r6, ip, sl
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4619      	mov	r1, r3
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	f04f 0400 	mov.w	r4, #0
 800390c:	0094      	lsls	r4, r2, #2
 800390e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003912:	008b      	lsls	r3, r1, #2
 8003914:	461a      	mov	r2, r3
 8003916:	4623      	mov	r3, r4
 8003918:	4628      	mov	r0, r5
 800391a:	4631      	mov	r1, r6
 800391c:	f7fc fc64 	bl	80001e8 <__aeabi_uldivmod>
 8003920:	4603      	mov	r3, r0
 8003922:	460c      	mov	r4, r1
 8003924:	461a      	mov	r2, r3
 8003926:	4b77      	ldr	r3, [pc, #476]	; (8003b04 <UART_SetConfig+0x6f4>)
 8003928:	fba3 1302 	umull	r1, r3, r3, r2
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	2164      	movs	r1, #100	; 0x64
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	3332      	adds	r3, #50	; 0x32
 800393a:	4a72      	ldr	r2, [pc, #456]	; (8003b04 <UART_SetConfig+0x6f4>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	f003 020f 	and.w	r2, r3, #15
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4442      	add	r2, r8
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	e0d0      	b.n	8003af2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003950:	f7fd fd6a 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
 8003954:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	469a      	mov	sl, r3
 800395a:	f04f 0b00 	mov.w	fp, #0
 800395e:	46d0      	mov	r8, sl
 8003960:	46d9      	mov	r9, fp
 8003962:	eb18 0308 	adds.w	r3, r8, r8
 8003966:	eb49 0409 	adc.w	r4, r9, r9
 800396a:	4698      	mov	r8, r3
 800396c:	46a1      	mov	r9, r4
 800396e:	eb18 080a 	adds.w	r8, r8, sl
 8003972:	eb49 090b 	adc.w	r9, r9, fp
 8003976:	f04f 0100 	mov.w	r1, #0
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003982:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003986:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800398a:	4688      	mov	r8, r1
 800398c:	4691      	mov	r9, r2
 800398e:	eb1a 0508 	adds.w	r5, sl, r8
 8003992:	eb4b 0609 	adc.w	r6, fp, r9
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4619      	mov	r1, r3
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	f04f 0400 	mov.w	r4, #0
 80039a8:	0094      	lsls	r4, r2, #2
 80039aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039ae:	008b      	lsls	r3, r1, #2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4623      	mov	r3, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	4631      	mov	r1, r6
 80039b8:	f7fc fc16 	bl	80001e8 <__aeabi_uldivmod>
 80039bc:	4603      	mov	r3, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b50      	ldr	r3, [pc, #320]	; (8003b04 <UART_SetConfig+0x6f4>)
 80039c4:	fba3 2302 	umull	r2, r3, r3, r2
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	469b      	mov	fp, r3
 80039d2:	f04f 0c00 	mov.w	ip, #0
 80039d6:	46d9      	mov	r9, fp
 80039d8:	46e2      	mov	sl, ip
 80039da:	eb19 0309 	adds.w	r3, r9, r9
 80039de:	eb4a 040a 	adc.w	r4, sl, sl
 80039e2:	4699      	mov	r9, r3
 80039e4:	46a2      	mov	sl, r4
 80039e6:	eb19 090b 	adds.w	r9, r9, fp
 80039ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a02:	4689      	mov	r9, r1
 8003a04:	4692      	mov	sl, r2
 8003a06:	eb1b 0509 	adds.w	r5, fp, r9
 8003a0a:	eb4c 060a 	adc.w	r6, ip, sl
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4619      	mov	r1, r3
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	0094      	lsls	r4, r2, #2
 8003a22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a26:	008b      	lsls	r3, r1, #2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	4631      	mov	r1, r6
 8003a30:	f7fc fbda 	bl	80001e8 <__aeabi_uldivmod>
 8003a34:	4603      	mov	r3, r0
 8003a36:	460c      	mov	r4, r1
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <UART_SetConfig+0x6f4>)
 8003a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	4a2d      	ldr	r2, [pc, #180]	; (8003b04 <UART_SetConfig+0x6f4>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a5a:	4498      	add	r8, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	469b      	mov	fp, r3
 8003a60:	f04f 0c00 	mov.w	ip, #0
 8003a64:	46d9      	mov	r9, fp
 8003a66:	46e2      	mov	sl, ip
 8003a68:	eb19 0309 	adds.w	r3, r9, r9
 8003a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003a70:	4699      	mov	r9, r3
 8003a72:	46a2      	mov	sl, r4
 8003a74:	eb19 090b 	adds.w	r9, r9, fp
 8003a78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a90:	4689      	mov	r9, r1
 8003a92:	4692      	mov	sl, r2
 8003a94:	eb1b 0509 	adds.w	r5, fp, r9
 8003a98:	eb4c 060a 	adc.w	r6, ip, sl
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	f04f 0400 	mov.w	r4, #0
 8003aae:	0094      	lsls	r4, r2, #2
 8003ab0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ab4:	008b      	lsls	r3, r1, #2
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4623      	mov	r3, r4
 8003aba:	4628      	mov	r0, r5
 8003abc:	4631      	mov	r1, r6
 8003abe:	f7fc fb93 	bl	80001e8 <__aeabi_uldivmod>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <UART_SetConfig+0x6f4>)
 8003aca:	fba3 1302 	umull	r1, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2164      	movs	r1, #100	; 0x64
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	3332      	adds	r3, #50	; 0x32
 8003adc:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <UART_SetConfig+0x6f4>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	f003 020f 	and.w	r2, r3, #15
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4442      	add	r2, r8
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	e7ff      	b.n	8003af2 <UART_SetConfig+0x6e2>
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003afc:	40011000 	.word	0x40011000
 8003b00:	40011400 	.word	0x40011400
 8003b04:	51eb851f 	.word	0x51eb851f

08003b08 <MY_FLASH_SetSectorAddrs>:
	HAL_FLASH_Lock();
}

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8003b14:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <MY_FLASH_SetSectorAddrs+0x24>)
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <MY_FLASH_SetSectorAddrs+0x28>)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	2000025c 	.word	0x2000025c
 8003b30:	20000258 	.word	0x20000258

08003b34 <MY_FLASH_ReadN>:
	//Lock the Flash space
	HAL_FLASH_Lock();
}
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8003b42:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <MY_FLASH_ReadN+0xb0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d018      	beq.n	8003b84 <MY_FLASH_ReadN+0x50>
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d02b      	beq.n	8003bae <MY_FLASH_ReadN+0x7a>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d000      	beq.n	8003b5c <MY_FLASH_ReadN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8003b5a:	e03d      	b.n	8003bd8 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e00b      	b.n	8003b7a <MY_FLASH_ReadN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	440b      	add	r3, r1
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3301      	adds	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d3ef      	bcc.n	8003b62 <MY_FLASH_ReadN+0x2e>
			break;
 8003b82:	e029      	b.n	8003bd8 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e00c      	b.n	8003ba4 <MY_FLASH_ReadN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	440b      	add	r3, r1
 8003b94:	8812      	ldrh	r2, [r2, #0]
 8003b96:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d3ee      	bcc.n	8003b8a <MY_FLASH_ReadN+0x56>
			break;
 8003bac:	e014      	b.n	8003bd8 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e00c      	b.n	8003bce <MY_FLASH_ReadN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	440b      	add	r3, r1
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3ee      	bcc.n	8003bb4 <MY_FLASH_ReadN+0x80>
			break;
 8003bd6:	bf00      	nop
}
 8003bd8:	bf00      	nop
 8003bda:	3724      	adds	r7, #36	; 0x24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	20000258 	.word	0x20000258

08003be8 <bufferInit>:
	
}s_Buff;

//void bufferInit(t_Buff buffer);

void bufferInit(s_Buff *buffer){
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e007      	b.n	8003c06 <bufferInit+0x1e>
		buffer->_p_rx_buffer[i] = 0;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b13      	cmp	r3, #19
 8003c0a:	ddf4      	ble.n	8003bf6 <bufferInit+0xe>
	}
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c1c:	f7fc fc64 	bl	80004e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c20:	f000 f828 	bl	8003c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c24:	f000 f9ec 	bl	8004000 <MX_GPIO_Init>
  MX_CRC_Init();
 8003c28:	f000 f8a8 	bl	8003d7c <MX_CRC_Init>
  MX_RTC_Init();
 8003c2c:	f000 f8ba 	bl	8003da4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8003c30:	f000 f9bc 	bl	8003fac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003c34:	f000 f944 	bl	8003ec0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &s_buffer._single_char, 1);
 8003c38:	2201      	movs	r2, #1
 8003c3a:	490a      	ldr	r1, [pc, #40]	; (8003c64 <main+0x4c>)
 8003c3c:	480a      	ldr	r0, [pc, #40]	; (8003c68 <main+0x50>)
 8003c3e:	f7ff f911 	bl	8002e64 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, m_p_startup_data, m_p_startup_data_length, 10);
 8003c42:	230a      	movs	r3, #10
 8003c44:	220c      	movs	r2, #12
 8003c46:	4909      	ldr	r1, [pc, #36]	; (8003c6c <main+0x54>)
 8003c48:	4807      	ldr	r0, [pc, #28]	; (8003c68 <main+0x50>)
 8003c4a:	f7ff f872 	bl	8002d32 <HAL_UART_Transmit>

  crcWholeFlashCalc();
 8003c4e:	f000 fb09 	bl	8004264 <crcWholeFlashCalc>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003c52:	2120      	movs	r1, #32
 8003c54:	4806      	ldr	r0, [pc, #24]	; (8003c70 <main+0x58>)
 8003c56:	f7fc ff92 	bl	8000b7e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c5e:	f7fc fc85 	bl	800056c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003c62:	e7f6      	b.n	8003c52 <main+0x3a>
 8003c64:	20000285 	.word	0x20000285
 8003c68:	200002f0 	.word	0x200002f0
 8003c6c:	20000058 	.word	0x20000058
 8003c70:	40020000 	.word	0x40020000

08003c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b09a      	sub	sp, #104	; 0x68
 8003c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c7e:	2230      	movs	r2, #48	; 0x30
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fdfe 	bl	8004884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
 8003ca8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <SystemClock_Config+0x100>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a30      	ldr	r2, [pc, #192]	; (8003d74 <SystemClock_Config+0x100>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cba:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <SystemClock_Config+0x100>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <SystemClock_Config+0x104>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <SystemClock_Config+0x104>)
 8003cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <SystemClock_Config+0x104>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cea:	2310      	movs	r3, #16
 8003cec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003cfe:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003d02:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d04:	2304      	movs	r3, #4
 8003d06:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc ff4f 	bl	8000bb4 <HAL_RCC_OscConfig>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003d1c:	f000 fb3e 	bl	800439c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d20:	230f      	movs	r3, #15
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d24:	2302      	movs	r3, #2
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d32:	2300      	movs	r3, #0
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd f9a9 	bl	8001094 <HAL_RCC_ClockConfig>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8003d48:	f000 fb28 	bl	800439c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d54:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d56:	f107 030c 	add.w	r3, r7, #12
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd fbbe 	bl	80014dc <HAL_RCCEx_PeriphCLKConfig>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8003d66:	f000 fb19 	bl	800439c <Error_Handler>
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3768      	adds	r7, #104	; 0x68
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40007000 	.word	0x40007000

08003d7c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <MX_CRC_Init+0x20>)
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <MX_CRC_Init+0x24>)
 8003d84:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003d86:	4805      	ldr	r0, [pc, #20]	; (8003d9c <MX_CRC_Init+0x20>)
 8003d88:	f7fc fcf4 	bl	8000774 <HAL_CRC_Init>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003d92:	f000 fb03 	bl	800439c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000288 	.word	0x20000288
 8003da0:	40023000 	.word	0x40023000

08003da4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b090      	sub	sp, #64	; 0x40
 8003da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	609a      	str	r2, [r3, #8]
 8003db6:	60da      	str	r2, [r3, #12]
 8003db8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003dba:	2300      	movs	r3, #0
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	2228      	movs	r2, #40	; 0x28
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fd5d 	bl	8004884 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003dca:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003dcc:	4a3b      	ldr	r2, [pc, #236]	; (8003ebc <MX_RTC_Init+0x118>)
 8003dce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003dd0:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003dd6:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003dd8:	227f      	movs	r2, #127	; 0x7f
 8003dda:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003ddc:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003dde:	22ff      	movs	r2, #255	; 0xff
 8003de0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003de2:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003de8:	4b33      	ldr	r3, [pc, #204]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003dee:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003df4:	4830      	ldr	r0, [pc, #192]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003df6:	f7fd fc61 	bl	80016bc <HAL_RTC_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003e00:	f000 facc 	bl	800439c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e22:	2200      	movs	r2, #0
 8003e24:	4619      	mov	r1, r3
 8003e26:	4824      	ldr	r0, [pc, #144]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003e28:	f7fd fcd9 	bl	80017de <HAL_RTC_SetTime>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003e32:	f000 fab3 	bl	800439c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e52:	2200      	movs	r2, #0
 8003e54:	4619      	mov	r1, r3
 8003e56:	4818      	ldr	r0, [pc, #96]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003e58:	f7fd fd7e 	bl	8001958 <HAL_RTC_SetDate>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003e62:	f000 fa9b 	bl	800439c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8003e7e:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8003e82:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003e98:	463b      	mov	r3, r7
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4806      	ldr	r0, [pc, #24]	; (8003eb8 <MX_RTC_Init+0x114>)
 8003ea0:	f7fd fe02 	bl	8001aa8 <HAL_RTC_SetAlarm_IT>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8003eaa:	f000 fa77 	bl	800439c <Error_Handler>
		0x1FFU) != HAL_OK) {
    		Error_Handler();
      	}*/
  /* USER CODE END RTC_Init 2 */

}
 8003eae:	bf00      	nop
 8003eb0:	3740      	adds	r7, #64	; 0x40
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200002d0 	.word	0x200002d0
 8003ebc:	40002800 	.word	0x40002800

08003ec0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08e      	sub	sp, #56	; 0x38
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	609a      	str	r2, [r3, #8]
 8003ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed4:	f107 0320 	add.w	r3, r7, #32
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
 8003eec:	615a      	str	r2, [r3, #20]
 8003eee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ef0:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003ef2:	4a2d      	ldr	r2, [pc, #180]	; (8003fa8 <MX_TIM3_Init+0xe8>)
 8003ef4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003ef8:	2253      	movs	r2, #83	; 0x53
 8003efa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003f04:	2263      	movs	r2, #99	; 0x63
 8003f06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f08:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0e:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f14:	4823      	ldr	r0, [pc, #140]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003f16:	f7fd ffc1 	bl	8001e9c <HAL_TIM_Base_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003f20:	f000 fa3c 	bl	800439c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f2e:	4619      	mov	r1, r3
 8003f30:	481c      	ldr	r0, [pc, #112]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003f32:	f7fe fa83 	bl	800243c <HAL_TIM_ConfigClockSource>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003f3c:	f000 fa2e 	bl	800439c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f40:	4818      	ldr	r0, [pc, #96]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003f42:	f7fd fffa 	bl	8001f3a <HAL_TIM_PWM_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003f4c:	f000 fa26 	bl	800439c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f58:	f107 0320 	add.w	r3, r7, #32
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4811      	ldr	r0, [pc, #68]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003f60:	f7fe fe18 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003f6a:	f000 fa17 	bl	800439c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f6e:	2360      	movs	r3, #96	; 0x60
 8003f70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	2200      	movs	r2, #0
 8003f82:	4619      	mov	r1, r3
 8003f84:	4807      	ldr	r0, [pc, #28]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003f86:	f7fe f993 	bl	80022b0 <HAL_TIM_PWM_ConfigChannel>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003f90:	f000 fa04 	bl	800439c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003f94:	4803      	ldr	r0, [pc, #12]	; (8003fa4 <MX_TIM3_Init+0xe4>)
 8003f96:	f000 fa91 	bl	80044bc <HAL_TIM_MspPostInit>

}
 8003f9a:	bf00      	nop
 8003f9c:	3738      	adds	r7, #56	; 0x38
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000290 	.word	0x20000290
 8003fa8:	40000400 	.word	0x40000400

08003fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <MX_USART2_UART_Init+0x50>)
 8003fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fe2:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fe4:	f7fe fe58 	bl	8002c98 <HAL_UART_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003fee:	f000 f9d5 	bl	800439c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200002f0 	.word	0x200002f0
 8003ffc:	40004400 	.word	0x40004400

08004000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004014:	2300      	movs	r3, #0
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4b10      	ldr	r3, [pc, #64]	; (800405c <MX_GPIO_Init+0x5c>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	4a0f      	ldr	r2, [pc, #60]	; (800405c <MX_GPIO_Init+0x5c>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6313      	str	r3, [r2, #48]	; 0x30
 8004024:	4b0d      	ldr	r3, [pc, #52]	; (800405c <MX_GPIO_Init+0x5c>)
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004030:	2200      	movs	r2, #0
 8004032:	2120      	movs	r1, #32
 8004034:	480a      	ldr	r0, [pc, #40]	; (8004060 <MX_GPIO_Init+0x60>)
 8004036:	f7fc fd89 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800403a:	2320      	movs	r3, #32
 800403c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800403e:	2301      	movs	r3, #1
 8004040:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	4619      	mov	r1, r3
 800404e:	4804      	ldr	r0, [pc, #16]	; (8004060 <MX_GPIO_Init+0x60>)
 8004050:	f7fc fbfa 	bl	8000848 <HAL_GPIO_Init>

}
 8004054:	bf00      	nop
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40023800 	.word	0x40023800
 8004060:	40020000 	.word	0x40020000

08004064 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	if (s_buffer._single_char != '\n')
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 800406e:	7d5b      	ldrb	r3, [r3, #21]
 8004070:	2b0a      	cmp	r3, #10
 8004072:	d011      	beq.n	8004098 <HAL_UART_RxCpltCallback+0x34>
	{
		if(s_buffer._rx_index < BUFFER_SIZE)
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 8004076:	7d1b      	ldrb	r3, [r3, #20]
 8004078:	2b13      	cmp	r3, #19
 800407a:	d815      	bhi.n	80040a8 <HAL_UART_RxCpltCallback+0x44>
		{
			s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._single_char;
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 800407e:	7d1b      	ldrb	r3, [r3, #20]
 8004080:	461a      	mov	r2, r3
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 8004084:	7d59      	ldrb	r1, [r3, #21]
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 8004088:	5499      	strb	r1, [r3, r2]
			s_buffer._rx_index++;
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 800408c:	7d1b      	ldrb	r3, [r3, #20]
 800408e:	3301      	adds	r3, #1
 8004090:	b2da      	uxtb	r2, r3
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 8004094:	751a      	strb	r2, [r3, #20]
 8004096:	e007      	b.n	80040a8 <HAL_UART_RxCpltCallback+0x44>
		}
	}
	else{
		whichCommand();
 8004098:	f000 f816 	bl	80040c8 <whichCommand>
		bufferInit(&s_buffer);
 800409c:	4807      	ldr	r0, [pc, #28]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 800409e:	f7ff fda3 	bl	8003be8 <bufferInit>
		s_buffer._rx_index = 0;
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	751a      	strb	r2, [r3, #20]
	}

	HAL_UART_Receive_IT(&huart2, &s_buffer._single_char, 1);
 80040a8:	2201      	movs	r2, #1
 80040aa:	4905      	ldr	r1, [pc, #20]	; (80040c0 <HAL_UART_RxCpltCallback+0x5c>)
 80040ac:	4805      	ldr	r0, [pc, #20]	; (80040c4 <HAL_UART_RxCpltCallback+0x60>)
 80040ae:	f7fe fed9 	bl	8002e64 <HAL_UART_Receive_IT>

}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000270 	.word	0x20000270
 80040c0:	20000285 	.word	0x20000285
 80040c4:	200002f0 	.word	0x200002f0

080040c8 <whichCommand>:

void whichCommand (void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
	char* token = strtok((char*)s_buffer._p_rx_buffer, " ");
 80040ce:	491b      	ldr	r1, [pc, #108]	; (800413c <whichCommand+0x74>)
 80040d0:	481b      	ldr	r0, [pc, #108]	; (8004140 <whichCommand+0x78>)
 80040d2:	f000 fbf1 	bl	80048b8 <strtok>
 80040d6:	6038      	str	r0, [r7, #0]

	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 80040d8:	2300      	movs	r3, #0
 80040da:	71fb      	strb	r3, [r7, #7]
 80040dc:	e026      	b.n	800412c <whichCommand+0x64>
	{
		if (strncmp(token, commands[i]._name, commands[i]._size)==0)
 80040de:	79fa      	ldrb	r2, [r7, #7]
 80040e0:	4918      	ldr	r1, [pc, #96]	; (8004144 <whichCommand+0x7c>)
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	79fa      	ldrb	r2, [r7, #7]
 80040f0:	4914      	ldr	r1, [pc, #80]	; (8004144 <whichCommand+0x7c>)
 80040f2:	4613      	mov	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3304      	adds	r3, #4
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	4601      	mov	r1, r0
 8004104:	6838      	ldr	r0, [r7, #0]
 8004106:	f000 fbc5 	bl	8004894 <strncmp>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <whichCommand+0x5e>
		{
			commands[i].func_ptr(token);
 8004110:	79fa      	ldrb	r2, [r7, #7]
 8004112:	490c      	ldr	r1, [pc, #48]	; (8004144 <whichCommand+0x7c>)
 8004114:	4613      	mov	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	3308      	adds	r3, #8
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6838      	ldr	r0, [r7, #0]
 8004124:	4798      	blx	r3
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	3301      	adds	r3, #1
 800412a:	71fb      	strb	r3, [r7, #7]
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	2b04      	cmp	r3, #4
 8004130:	d9d5      	bls.n	80040de <whichCommand+0x16>
		}
	}
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	08004c7c 	.word	0x08004c7c
 8004140:	20000270 	.word	0x20000270
 8004144:	2000001c 	.word	0x2000001c

08004148 <ping_callBack>:

void ping_callBack(char* token)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)token, strlen(token), 10);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fc f841 	bl	80001d8 <strlen>
 8004156:	4603      	mov	r3, r0
 8004158:	b29a      	uxth	r2, r3
 800415a:	230a      	movs	r3, #10
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4807      	ldr	r0, [pc, #28]	; (800417c <ping_callBack+0x34>)
 8004160:	f7fe fde7 	bl	8002d32 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)newline, 1, 10);
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <ping_callBack+0x38>)
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	230a      	movs	r3, #10
 800416a:	2201      	movs	r2, #1
 800416c:	4803      	ldr	r0, [pc, #12]	; (800417c <ping_callBack+0x34>)
 800416e:	f7fe fde0 	bl	8002d32 <HAL_UART_Transmit>
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	200002f0 	.word	0x200002f0
 8004180:	20000064 	.word	0x20000064

08004184 <version_callback>:

void version_callback(char* token)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, m_p_version, sizeof(m_p_version), 10);
 800418c:	230a      	movs	r3, #10
 800418e:	2206      	movs	r2, #6
 8004190:	4903      	ldr	r1, [pc, #12]	; (80041a0 <version_callback+0x1c>)
 8004192:	4804      	ldr	r0, [pc, #16]	; (80041a4 <version_callback+0x20>)
 8004194:	f7fe fdcd 	bl	8002d32 <HAL_UART_Transmit>
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000008 	.word	0x20000008
 80041a4:	200002f0 	.word	0x200002f0

080041a8 <pwm_start_callback>:

void pwm_start_callback(char* token)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80041b0:	2100      	movs	r1, #0
 80041b2:	4806      	ldr	r0, [pc, #24]	; (80041cc <pwm_start_callback+0x24>)
 80041b4:	f7fd fef6 	bl	8001fa4 <HAL_TIM_PWM_Start>
	HAL_UART_Transmit(&huart2, m_p_ok, sizeof(m_p_ok), 10);
 80041b8:	230a      	movs	r3, #10
 80041ba:	2203      	movs	r2, #3
 80041bc:	4904      	ldr	r1, [pc, #16]	; (80041d0 <pwm_start_callback+0x28>)
 80041be:	4805      	ldr	r0, [pc, #20]	; (80041d4 <pwm_start_callback+0x2c>)
 80041c0:	f7fe fdb7 	bl	8002d32 <HAL_UART_Transmit>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000290 	.word	0x20000290
 80041d0:	20000010 	.word	0x20000010
 80041d4:	200002f0 	.word	0x200002f0

080041d8 <pwm_stop_callback>:

void pwm_stop_callback(char* token)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80041e0:	2100      	movs	r1, #0
 80041e2:	4806      	ldr	r0, [pc, #24]	; (80041fc <pwm_stop_callback+0x24>)
 80041e4:	f7fd ff10 	bl	8002008 <HAL_TIM_PWM_Stop>
	HAL_UART_Transmit(&huart2, m_p_ok, sizeof(m_p_ok), 10);
 80041e8:	230a      	movs	r3, #10
 80041ea:	2203      	movs	r2, #3
 80041ec:	4904      	ldr	r1, [pc, #16]	; (8004200 <pwm_stop_callback+0x28>)
 80041ee:	4805      	ldr	r0, [pc, #20]	; (8004204 <pwm_stop_callback+0x2c>)
 80041f0:	f7fe fd9f 	bl	8002d32 <HAL_UART_Transmit>
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000290 	.word	0x20000290
 8004200:	20000010 	.word	0x20000010
 8004204:	200002f0 	.word	0x200002f0

08004208 <pwm_dc_callback>:

void pwm_dc_callback(char* token)
{
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	uint8_t dc;
	token = strtok(NULL, " ");
 8004210:	4911      	ldr	r1, [pc, #68]	; (8004258 <pwm_dc_callback+0x50>)
 8004212:	2000      	movs	r0, #0
 8004214:	f000 fb50 	bl	80048b8 <strtok>
 8004218:	6078      	str	r0, [r7, #4]

	if(strlen(token) > 0)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d011      	beq.n	8004246 <pwm_dc_callback+0x3e>
	{
		s_buffer._rx_index =  s_buffer._rx_index - strlen(token) - 1;
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <pwm_dc_callback+0x54>)
 8004224:	7d1c      	ldrb	r4, [r3, #20]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fb ffd6 	bl	80001d8 <strlen>
 800422c:	4603      	mov	r3, r0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	1ae3      	subs	r3, r4, r3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <pwm_dc_callback+0x54>)
 800423a:	751a      	strb	r2, [r3, #20]
		dc = atoi(token);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fad8 	bl	80047f2 <atoi>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
	}
	htim3.Instance->CCR1 = dc;
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <pwm_dc_callback+0x58>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	7bfa      	ldrb	r2, [r7, #15]
 800424c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	bf00      	nop
 8004258:	08004c7c 	.word	0x08004c7c
 800425c:	20000270 	.word	0x20000270
 8004260:	20000290 	.word	0x20000290

08004264 <crcWholeFlashCalc>:

void crcWholeFlashCalc(void)
{
 8004264:	b5b0      	push	{r4, r5, r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	466b      	mov	r3, sp
 800426c:	461d      	mov	r5, r3
	char CrcBytes [4];
	itoa(crcFlashResult, CrcBytes, 16);
	HAL_UART_Transmit(&huart2, (uint8_t*)CrcBytes, strlen(CrcBytes), 10);
	HAL_UART_Transmit(&huart2, (uint8_t*)newline, 1, 10);*/

	uint16_t sector_0_Size = 4096; 				//16KB
 800426e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004272:	827b      	strh	r3, [r7, #18]
	//uint16_t sector_4_Size = 4096 * 4; 		//64KB
	//uint16_t sector_5_Size = 4096 * 8;   		//128KB
	//uint16_t sector_6_Size = 4096 * 8; 		//128KB
	//uint16_t sector_7_Size = 4096 * 8; 		//128KB

	uint32_t sector_0_addr = 0x08000000;
 8004274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004278:	60fb      	str	r3, [r7, #12]
	//uint32_t sector_4_addr = 0x08010000;
	//uint32_t sector_5_addr = 0x08020000;
	//uint32_t sector_6_addr = 0x08040000;
	//uint32_t sector_7_addr = 0x08060000;

	uint32_t crcFlash[sector_0_Size];
 800427a:	8a78      	ldrh	r0, [r7, #18]
 800427c:	4603      	mov	r3, r0
 800427e:	3b01      	subs	r3, #1
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	b281      	uxth	r1, r0
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	f04f 0400 	mov.w	r4, #0
 8004290:	0154      	lsls	r4, r2, #5
 8004292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004296:	014b      	lsls	r3, r1, #5
 8004298:	b281      	uxth	r1, r0
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	0154      	lsls	r4, r2, #5
 80042a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042ac:	014b      	lsls	r3, r1, #5
 80042ae:	4603      	mov	r3, r0
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	3303      	adds	r3, #3
 80042b4:	3307      	adds	r3, #7
 80042b6:	08db      	lsrs	r3, r3, #3
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	ebad 0d03 	sub.w	sp, sp, r3
 80042be:	466b      	mov	r3, sp
 80042c0:	3303      	adds	r3, #3
 80042c2:	089b      	lsrs	r3, r3, #2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	607b      	str	r3, [r7, #4]
	//DEBUG
	/*MY_FLASH_SetSectorAddrs(7, sector_7_addr);
	uint32_t myTestWrite2[1] = {0xFFFFFFFF};
	MY_FLASH_WriteN(131072-4, myTestWrite2, 1, DATA_TYPE_32);*/

	offsetAddr = 0x0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < 32; i++)
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	e01a      	b.n	8004308 <crcWholeFlashCalc+0xa4>
	{
		MY_FLASH_SetSectorAddrs(0, sector_0_addr + offsetAddr);
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	4413      	add	r3, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	2000      	movs	r0, #0
 80042dc:	f7ff fc14 	bl	8003b08 <MY_FLASH_SetSectorAddrs>
		MY_FLASH_ReadN(0, crcFlash, sector_0_Size, DATA_TYPE_32);
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	8a7a      	ldrh	r2, [r7, #18]
 80042e4:	2302      	movs	r3, #2
 80042e6:	2000      	movs	r0, #0
 80042e8:	f7ff fc24 	bl	8003b34 <MY_FLASH_ReadN>
		crcFlashResult = HAL_CRC_Accumulate(&hcrc, crcFlash, sector_0_Size);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8a7a      	ldrh	r2, [r7, #18]
 80042f0:	4619      	mov	r1, r3
 80042f2:	4815      	ldr	r0, [pc, #84]	; (8004348 <crcWholeFlashCalc+0xe4>)
 80042f4:	f7fc fa5a 	bl	80007ac <HAL_CRC_Accumulate>
 80042f8:	6178      	str	r0, [r7, #20]
		offsetAddr += 0x4000;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8004300:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < 32; i++)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3301      	adds	r3, #1
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	2b1f      	cmp	r3, #31
 800430c:	dde1      	ble.n	80042d2 <crcWholeFlashCalc+0x6e>
		crcFlashResult = HAL_CRC_Accumulate(&hcrc, crcFlash, sector_0_Size);
		offsetAddr += 0x4000;
	}*/

	char CrcBytes [4];
	itoa(crcFlashResult, CrcBytes, 16);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	4639      	mov	r1, r7
 8004312:	2210      	movs	r2, #16
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fab3 	bl	8004880 <itoa>
	HAL_UART_Transmit(&huart2, (uint8_t*)CrcBytes, strlen(CrcBytes), 10);
 800431a:	463b      	mov	r3, r7
 800431c:	4618      	mov	r0, r3
 800431e:	f7fb ff5b 	bl	80001d8 <strlen>
 8004322:	4603      	mov	r3, r0
 8004324:	b29a      	uxth	r2, r3
 8004326:	4639      	mov	r1, r7
 8004328:	230a      	movs	r3, #10
 800432a:	4808      	ldr	r0, [pc, #32]	; (800434c <crcWholeFlashCalc+0xe8>)
 800432c:	f7fe fd01 	bl	8002d32 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)newline, 1, 10);
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <crcWholeFlashCalc+0xec>)
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	230a      	movs	r3, #10
 8004336:	2201      	movs	r2, #1
 8004338:	4804      	ldr	r0, [pc, #16]	; (800434c <crcWholeFlashCalc+0xe8>)
 800433a:	f7fe fcfa 	bl	8002d32 <HAL_UART_Transmit>
 800433e:	46ad      	mov	sp, r5
}
 8004340:	bf00      	nop
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bdb0      	pop	{r4, r5, r7, pc}
 8004348:	20000288 	.word	0x20000288
 800434c:	200002f0 	.word	0x200002f0
 8004350:	20000064 	.word	0x20000064

08004354 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  HAL_UART_Transmit(&huart2, m_p_tick, TICK_SIZE, 10);
 800435c:	230a      	movs	r3, #10
 800435e:	2205      	movs	r2, #5
 8004360:	4903      	ldr	r1, [pc, #12]	; (8004370 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8004362:	4804      	ldr	r0, [pc, #16]	; (8004374 <HAL_RTC_AlarmAEventCallback+0x20>)
 8004364:	f7fe fce5 	bl	8002d32 <HAL_UART_Transmit>
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000014 	.word	0x20000014
 8004374:	200002f0 	.word	0x200002f0

08004378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a04      	ldr	r2, [pc, #16]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800438a:	f7fc f8cf 	bl	800052c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000

0800439c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_MspInit+0x4c>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	4a0f      	ldr	r2, [pc, #60]	; (80043f8 <HAL_MspInit+0x4c>)
 80043bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c0:	6453      	str	r3, [r2, #68]	; 0x44
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <HAL_MspInit+0x4c>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_MspInit+0x4c>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <HAL_MspInit+0x4c>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_MspInit+0x4c>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80043ea:	2007      	movs	r0, #7
 80043ec:	f7fc f98d 	bl	800070a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40023800 	.word	0x40023800

080043fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a0b      	ldr	r2, [pc, #44]	; (8004438 <HAL_CRC_MspInit+0x3c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10d      	bne.n	800442a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_CRC_MspInit+0x40>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <HAL_CRC_MspInit+0x40>)
 8004418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800441c:	6313      	str	r3, [r2, #48]	; 0x30
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <HAL_CRC_MspInit+0x40>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40023000 	.word	0x40023000
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a08      	ldr	r2, [pc, #32]	; (8004470 <HAL_RTC_MspInit+0x30>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10a      	bne.n	8004468 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <HAL_RTC_MspInit+0x34>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004458:	2200      	movs	r2, #0
 800445a:	2100      	movs	r1, #0
 800445c:	2029      	movs	r0, #41	; 0x29
 800445e:	f7fc f95f 	bl	8000720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004462:	2029      	movs	r0, #41	; 0x29
 8004464:	f7fc f978 	bl	8000758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40002800 	.word	0x40002800
 8004474:	42470e3c 	.word	0x42470e3c

08004478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0b      	ldr	r2, [pc, #44]	; (80044b4 <HAL_TIM_Base_MspInit+0x3c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10d      	bne.n	80044a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_TIM_Base_MspInit+0x40>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <HAL_TIM_Base_MspInit+0x40>)
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	6413      	str	r3, [r2, #64]	; 0x40
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <HAL_TIM_Base_MspInit+0x40>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40023800 	.word	0x40023800

080044bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c4:	f107 030c 	add.w	r3, r7, #12
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a12      	ldr	r2, [pc, #72]	; (8004524 <HAL_TIM_MspPostInit+0x68>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d11d      	bne.n	800451a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <HAL_TIM_MspPostInit+0x6c>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a10      	ldr	r2, [pc, #64]	; (8004528 <HAL_TIM_MspPostInit+0x6c>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <HAL_TIM_MspPostInit+0x6c>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80044fa:	2340      	movs	r3, #64	; 0x40
 80044fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fe:	2302      	movs	r3, #2
 8004500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004506:	2300      	movs	r3, #0
 8004508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800450a:	2302      	movs	r3, #2
 800450c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450e:	f107 030c 	add.w	r3, r7, #12
 8004512:	4619      	mov	r1, r3
 8004514:	4805      	ldr	r0, [pc, #20]	; (800452c <HAL_TIM_MspPostInit+0x70>)
 8004516:	f7fc f997 	bl	8000848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800451a:	bf00      	nop
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40000400 	.word	0x40000400
 8004528:	40023800 	.word	0x40023800
 800452c:	40020000 	.word	0x40020000

08004530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004538:	f107 0314 	add.w	r3, r7, #20
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1d      	ldr	r2, [pc, #116]	; (80045c4 <HAL_UART_MspInit+0x94>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d133      	bne.n	80045ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <HAL_UART_MspInit+0x98>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <HAL_UART_MspInit+0x98>)
 800455c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004560:	6413      	str	r3, [r2, #64]	; 0x40
 8004562:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <HAL_UART_MspInit+0x98>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <HAL_UART_MspInit+0x98>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <HAL_UART_MspInit+0x98>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6313      	str	r3, [r2, #48]	; 0x30
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_UART_MspInit+0x98>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800458a:	230c      	movs	r3, #12
 800458c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	2302      	movs	r3, #2
 8004590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004596:	2303      	movs	r3, #3
 8004598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800459a:	2307      	movs	r3, #7
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459e:	f107 0314 	add.w	r3, r7, #20
 80045a2:	4619      	mov	r1, r3
 80045a4:	4809      	ldr	r0, [pc, #36]	; (80045cc <HAL_UART_MspInit+0x9c>)
 80045a6:	f7fc f94f 	bl	8000848 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2100      	movs	r1, #0
 80045ae:	2026      	movs	r0, #38	; 0x26
 80045b0:	f7fc f8b6 	bl	8000720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045b4:	2026      	movs	r0, #38	; 0x26
 80045b6:	f7fc f8cf 	bl	8000758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80045ba:	bf00      	nop
 80045bc:	3728      	adds	r7, #40	; 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40004400 	.word	0x40004400
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40020000 	.word	0x40020000

080045d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	; 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80045e0:	2200      	movs	r2, #0
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	2019      	movs	r0, #25
 80045e6:	f7fc f89b 	bl	8000720 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80045ea:	2019      	movs	r0, #25
 80045ec:	f7fc f8b4 	bl	8000758 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_InitTick+0xa0>)
 80045f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <HAL_InitTick+0xa0>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	6453      	str	r3, [r2, #68]	; 0x44
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_InitTick+0xa0>)
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800460c:	f107 0210 	add.w	r2, r7, #16
 8004610:	f107 0314 	add.w	r3, r7, #20
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f7fc ff2e 	bl	8001478 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800461c:	f7fc ff18 	bl	8001450 <HAL_RCC_GetPCLK2Freq>
 8004620:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	4a13      	ldr	r2, [pc, #76]	; (8004674 <HAL_InitTick+0xa4>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	0c9b      	lsrs	r3, r3, #18
 800462c:	3b01      	subs	r3, #1
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_InitTick+0xa8>)
 8004632:	4a12      	ldr	r2, [pc, #72]	; (800467c <HAL_InitTick+0xac>)
 8004634:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <HAL_InitTick+0xa8>)
 8004638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800463c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <HAL_InitTick+0xa8>)
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <HAL_InitTick+0xa8>)
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_InitTick+0xa8>)
 800464c:	2200      	movs	r2, #0
 800464e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004650:	4809      	ldr	r0, [pc, #36]	; (8004678 <HAL_InitTick+0xa8>)
 8004652:	f7fd fc23 	bl	8001e9c <HAL_TIM_Base_Init>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800465c:	4806      	ldr	r0, [pc, #24]	; (8004678 <HAL_InitTick+0xa8>)
 800465e:	f7fd fc48 	bl	8001ef2 <HAL_TIM_Base_Start_IT>
 8004662:	4603      	mov	r3, r0
 8004664:	e000      	b.n	8004668 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
}
 8004668:	4618      	mov	r0, r3
 800466a:	3730      	adds	r7, #48	; 0x30
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	431bde83 	.word	0x431bde83
 8004678:	20000330 	.word	0x20000330
 800467c:	40010000 	.word	0x40010000

08004680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004692:	e7fe      	b.n	8004692 <HardFault_Handler+0x4>

08004694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004698:	e7fe      	b.n	8004698 <MemManage_Handler+0x4>

0800469a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800469e:	e7fe      	b.n	800469e <BusFault_Handler+0x4>

080046a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046a4:	e7fe      	b.n	80046a4 <UsageFault_Handler+0x4>

080046a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046a6:	b480      	push	{r7}
 80046a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80046e6:	f7fd fcdb 	bl	80020a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000330 	.word	0x20000330

080046f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046f8:	4802      	ldr	r0, [pc, #8]	; (8004704 <USART2_IRQHandler+0x10>)
 80046fa:	f7fe fc09 	bl	8002f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200002f0 	.word	0x200002f0

08004708 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800470c:	4802      	ldr	r0, [pc, #8]	; (8004718 <RTC_Alarm_IRQHandler+0x10>)
 800470e:	f7fd fb03 	bl	8001d18 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200002d0 	.word	0x200002d0

0800471c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <_sbrk+0x50>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <_sbrk+0x16>
		heap_end = &end;
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <_sbrk+0x50>)
 800472e:	4a10      	ldr	r2, [pc, #64]	; (8004770 <_sbrk+0x54>)
 8004730:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004732:	4b0e      	ldr	r3, [pc, #56]	; (800476c <_sbrk+0x50>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <_sbrk+0x50>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4413      	add	r3, r2
 8004740:	466a      	mov	r2, sp
 8004742:	4293      	cmp	r3, r2
 8004744:	d907      	bls.n	8004756 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004746:	f000 f859 	bl	80047fc <__errno>
 800474a:	4602      	mov	r2, r0
 800474c:	230c      	movs	r3, #12
 800474e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004750:	f04f 33ff 	mov.w	r3, #4294967295
 8004754:	e006      	b.n	8004764 <_sbrk+0x48>
	}

	heap_end += incr;
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <_sbrk+0x50>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	4a03      	ldr	r2, [pc, #12]	; (800476c <_sbrk+0x50>)
 8004760:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000260 	.word	0x20000260
 8004770:	20000378 	.word	0x20000378

08004774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004778:	4b08      	ldr	r3, [pc, #32]	; (800479c <SystemInit+0x28>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	4a07      	ldr	r2, [pc, #28]	; (800479c <SystemInit+0x28>)
 8004780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <SystemInit+0x28>)
 800478a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800478e:	609a      	str	r2, [r3, #8]
#endif
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80047a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80047a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80047a6:	e003      	b.n	80047b0 <LoopCopyDataInit>

080047a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80047aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80047ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80047ae:	3104      	adds	r1, #4

080047b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80047b0:	480b      	ldr	r0, [pc, #44]	; (80047e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80047b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80047b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80047b8:	d3f6      	bcc.n	80047a8 <CopyDataInit>
  ldr  r2, =_sbss
 80047ba:	4a0b      	ldr	r2, [pc, #44]	; (80047e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80047bc:	e002      	b.n	80047c4 <LoopFillZerobss>

080047be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80047be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80047c0:	f842 3b04 	str.w	r3, [r2], #4

080047c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80047c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80047c8:	d3f9      	bcc.n	80047be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80047ca:	f7ff ffd3 	bl	8004774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047ce:	f000 f81b 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047d2:	f7ff fa21 	bl	8003c18 <main>
  bx  lr    
 80047d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80047d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80047dc:	08004dd8 	.word	0x08004dd8
  ldr  r0, =_sdata
 80047e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80047e4:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 80047e8:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 80047ec:	20000374 	.word	0x20000374

080047f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047f0:	e7fe      	b.n	80047f0 <ADC_IRQHandler>

080047f2 <atoi>:
 80047f2:	220a      	movs	r2, #10
 80047f4:	2100      	movs	r1, #0
 80047f6:	f000 b92f 	b.w	8004a58 <strtol>
	...

080047fc <__errno>:
 80047fc:	4b01      	ldr	r3, [pc, #4]	; (8004804 <__errno+0x8>)
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	2000006c 	.word	0x2000006c

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4e0d      	ldr	r6, [pc, #52]	; (8004840 <__libc_init_array+0x38>)
 800480c:	4c0d      	ldr	r4, [pc, #52]	; (8004844 <__libc_init_array+0x3c>)
 800480e:	1ba4      	subs	r4, r4, r6
 8004810:	10a4      	asrs	r4, r4, #2
 8004812:	2500      	movs	r5, #0
 8004814:	42a5      	cmp	r5, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	4e0b      	ldr	r6, [pc, #44]	; (8004848 <__libc_init_array+0x40>)
 800481a:	4c0c      	ldr	r4, [pc, #48]	; (800484c <__libc_init_array+0x44>)
 800481c:	f000 fa08 	bl	8004c30 <_init>
 8004820:	1ba4      	subs	r4, r4, r6
 8004822:	10a4      	asrs	r4, r4, #2
 8004824:	2500      	movs	r5, #0
 8004826:	42a5      	cmp	r5, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004830:	4798      	blx	r3
 8004832:	3501      	adds	r5, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800483a:	4798      	blx	r3
 800483c:	3501      	adds	r5, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	08004dd0 	.word	0x08004dd0
 8004844:	08004dd0 	.word	0x08004dd0
 8004848:	08004dd0 	.word	0x08004dd0
 800484c:	08004dd4 	.word	0x08004dd4

08004850 <__itoa>:
 8004850:	1e93      	subs	r3, r2, #2
 8004852:	2b22      	cmp	r3, #34	; 0x22
 8004854:	b510      	push	{r4, lr}
 8004856:	460c      	mov	r4, r1
 8004858:	d904      	bls.n	8004864 <__itoa+0x14>
 800485a:	2300      	movs	r3, #0
 800485c:	700b      	strb	r3, [r1, #0]
 800485e:	461c      	mov	r4, r3
 8004860:	4620      	mov	r0, r4
 8004862:	bd10      	pop	{r4, pc}
 8004864:	2a0a      	cmp	r2, #10
 8004866:	d109      	bne.n	800487c <__itoa+0x2c>
 8004868:	2800      	cmp	r0, #0
 800486a:	da07      	bge.n	800487c <__itoa+0x2c>
 800486c:	232d      	movs	r3, #45	; 0x2d
 800486e:	700b      	strb	r3, [r1, #0]
 8004870:	4240      	negs	r0, r0
 8004872:	2101      	movs	r1, #1
 8004874:	4421      	add	r1, r4
 8004876:	f000 f905 	bl	8004a84 <__utoa>
 800487a:	e7f1      	b.n	8004860 <__itoa+0x10>
 800487c:	2100      	movs	r1, #0
 800487e:	e7f9      	b.n	8004874 <__itoa+0x24>

08004880 <itoa>:
 8004880:	f7ff bfe6 	b.w	8004850 <__itoa>

08004884 <memset>:
 8004884:	4402      	add	r2, r0
 8004886:	4603      	mov	r3, r0
 8004888:	4293      	cmp	r3, r2
 800488a:	d100      	bne.n	800488e <memset+0xa>
 800488c:	4770      	bx	lr
 800488e:	f803 1b01 	strb.w	r1, [r3], #1
 8004892:	e7f9      	b.n	8004888 <memset+0x4>

08004894 <strncmp>:
 8004894:	b510      	push	{r4, lr}
 8004896:	b16a      	cbz	r2, 80048b4 <strncmp+0x20>
 8004898:	3901      	subs	r1, #1
 800489a:	1884      	adds	r4, r0, r2
 800489c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80048a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d103      	bne.n	80048b0 <strncmp+0x1c>
 80048a8:	42a0      	cmp	r0, r4
 80048aa:	d001      	beq.n	80048b0 <strncmp+0x1c>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f5      	bne.n	800489c <strncmp+0x8>
 80048b0:	1a98      	subs	r0, r3, r2
 80048b2:	bd10      	pop	{r4, pc}
 80048b4:	4610      	mov	r0, r2
 80048b6:	e7fc      	b.n	80048b2 <strncmp+0x1e>

080048b8 <strtok>:
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <strtok+0x50>)
 80048ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	681d      	ldr	r5, [r3, #0]
 80048c0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80048c2:	4606      	mov	r6, r0
 80048c4:	460f      	mov	r7, r1
 80048c6:	b9b4      	cbnz	r4, 80048f6 <strtok+0x3e>
 80048c8:	2050      	movs	r0, #80	; 0x50
 80048ca:	f000 f91d 	bl	8004b08 <malloc>
 80048ce:	65a8      	str	r0, [r5, #88]	; 0x58
 80048d0:	e9c0 4400 	strd	r4, r4, [r0]
 80048d4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80048d8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80048dc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80048e0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80048e4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80048e8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80048ec:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80048f0:	6184      	str	r4, [r0, #24]
 80048f2:	7704      	strb	r4, [r0, #28]
 80048f4:	6244      	str	r4, [r0, #36]	; 0x24
 80048f6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80048f8:	4639      	mov	r1, r7
 80048fa:	4630      	mov	r0, r6
 80048fc:	2301      	movs	r3, #1
 80048fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004902:	f000 b803 	b.w	800490c <__strtok_r>
 8004906:	bf00      	nop
 8004908:	2000006c 	.word	0x2000006c

0800490c <__strtok_r>:
 800490c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490e:	b918      	cbnz	r0, 8004918 <__strtok_r+0xc>
 8004910:	6810      	ldr	r0, [r2, #0]
 8004912:	b908      	cbnz	r0, 8004918 <__strtok_r+0xc>
 8004914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004916:	4620      	mov	r0, r4
 8004918:	4604      	mov	r4, r0
 800491a:	460f      	mov	r7, r1
 800491c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004920:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004924:	b91e      	cbnz	r6, 800492e <__strtok_r+0x22>
 8004926:	b96d      	cbnz	r5, 8004944 <__strtok_r+0x38>
 8004928:	6015      	str	r5, [r2, #0]
 800492a:	4628      	mov	r0, r5
 800492c:	e7f2      	b.n	8004914 <__strtok_r+0x8>
 800492e:	42b5      	cmp	r5, r6
 8004930:	d1f6      	bne.n	8004920 <__strtok_r+0x14>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ef      	bne.n	8004916 <__strtok_r+0xa>
 8004936:	6014      	str	r4, [r2, #0]
 8004938:	7003      	strb	r3, [r0, #0]
 800493a:	e7eb      	b.n	8004914 <__strtok_r+0x8>
 800493c:	462b      	mov	r3, r5
 800493e:	e00d      	b.n	800495c <__strtok_r+0x50>
 8004940:	b926      	cbnz	r6, 800494c <__strtok_r+0x40>
 8004942:	461c      	mov	r4, r3
 8004944:	4623      	mov	r3, r4
 8004946:	460f      	mov	r7, r1
 8004948:	f813 5b01 	ldrb.w	r5, [r3], #1
 800494c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004950:	42b5      	cmp	r5, r6
 8004952:	d1f5      	bne.n	8004940 <__strtok_r+0x34>
 8004954:	2d00      	cmp	r5, #0
 8004956:	d0f1      	beq.n	800493c <__strtok_r+0x30>
 8004958:	2100      	movs	r1, #0
 800495a:	7021      	strb	r1, [r4, #0]
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e7d9      	b.n	8004914 <__strtok_r+0x8>

08004960 <_strtol_l.isra.0>:
 8004960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	4680      	mov	r8, r0
 8004966:	4689      	mov	r9, r1
 8004968:	4692      	mov	sl, r2
 800496a:	461e      	mov	r6, r3
 800496c:	460f      	mov	r7, r1
 800496e:	463d      	mov	r5, r7
 8004970:	9808      	ldr	r0, [sp, #32]
 8004972:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004976:	f000 f8c3 	bl	8004b00 <__locale_ctype_ptr_l>
 800497a:	4420      	add	r0, r4
 800497c:	7843      	ldrb	r3, [r0, #1]
 800497e:	f013 0308 	ands.w	r3, r3, #8
 8004982:	d132      	bne.n	80049ea <_strtol_l.isra.0+0x8a>
 8004984:	2c2d      	cmp	r4, #45	; 0x2d
 8004986:	d132      	bne.n	80049ee <_strtol_l.isra.0+0x8e>
 8004988:	787c      	ldrb	r4, [r7, #1]
 800498a:	1cbd      	adds	r5, r7, #2
 800498c:	2201      	movs	r2, #1
 800498e:	2e00      	cmp	r6, #0
 8004990:	d05d      	beq.n	8004a4e <_strtol_l.isra.0+0xee>
 8004992:	2e10      	cmp	r6, #16
 8004994:	d109      	bne.n	80049aa <_strtol_l.isra.0+0x4a>
 8004996:	2c30      	cmp	r4, #48	; 0x30
 8004998:	d107      	bne.n	80049aa <_strtol_l.isra.0+0x4a>
 800499a:	782b      	ldrb	r3, [r5, #0]
 800499c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80049a0:	2b58      	cmp	r3, #88	; 0x58
 80049a2:	d14f      	bne.n	8004a44 <_strtol_l.isra.0+0xe4>
 80049a4:	786c      	ldrb	r4, [r5, #1]
 80049a6:	2610      	movs	r6, #16
 80049a8:	3502      	adds	r5, #2
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	bf14      	ite	ne
 80049ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80049b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80049b6:	2700      	movs	r7, #0
 80049b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80049bc:	4638      	mov	r0, r7
 80049be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80049c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	d817      	bhi.n	80049fa <_strtol_l.isra.0+0x9a>
 80049ca:	461c      	mov	r4, r3
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	dd23      	ble.n	8004a18 <_strtol_l.isra.0+0xb8>
 80049d0:	1c7b      	adds	r3, r7, #1
 80049d2:	d007      	beq.n	80049e4 <_strtol_l.isra.0+0x84>
 80049d4:	4584      	cmp	ip, r0
 80049d6:	d31c      	bcc.n	8004a12 <_strtol_l.isra.0+0xb2>
 80049d8:	d101      	bne.n	80049de <_strtol_l.isra.0+0x7e>
 80049da:	45a6      	cmp	lr, r4
 80049dc:	db19      	blt.n	8004a12 <_strtol_l.isra.0+0xb2>
 80049de:	fb00 4006 	mla	r0, r0, r6, r4
 80049e2:	2701      	movs	r7, #1
 80049e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049e8:	e7eb      	b.n	80049c2 <_strtol_l.isra.0+0x62>
 80049ea:	462f      	mov	r7, r5
 80049ec:	e7bf      	b.n	800496e <_strtol_l.isra.0+0xe>
 80049ee:	2c2b      	cmp	r4, #43	; 0x2b
 80049f0:	bf04      	itt	eq
 80049f2:	1cbd      	addeq	r5, r7, #2
 80049f4:	787c      	ldrbeq	r4, [r7, #1]
 80049f6:	461a      	mov	r2, r3
 80049f8:	e7c9      	b.n	800498e <_strtol_l.isra.0+0x2e>
 80049fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80049fe:	2b19      	cmp	r3, #25
 8004a00:	d801      	bhi.n	8004a06 <_strtol_l.isra.0+0xa6>
 8004a02:	3c37      	subs	r4, #55	; 0x37
 8004a04:	e7e2      	b.n	80049cc <_strtol_l.isra.0+0x6c>
 8004a06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004a0a:	2b19      	cmp	r3, #25
 8004a0c:	d804      	bhi.n	8004a18 <_strtol_l.isra.0+0xb8>
 8004a0e:	3c57      	subs	r4, #87	; 0x57
 8004a10:	e7dc      	b.n	80049cc <_strtol_l.isra.0+0x6c>
 8004a12:	f04f 37ff 	mov.w	r7, #4294967295
 8004a16:	e7e5      	b.n	80049e4 <_strtol_l.isra.0+0x84>
 8004a18:	1c7b      	adds	r3, r7, #1
 8004a1a:	d108      	bne.n	8004a2e <_strtol_l.isra.0+0xce>
 8004a1c:	2322      	movs	r3, #34	; 0x22
 8004a1e:	f8c8 3000 	str.w	r3, [r8]
 8004a22:	4608      	mov	r0, r1
 8004a24:	f1ba 0f00 	cmp.w	sl, #0
 8004a28:	d107      	bne.n	8004a3a <_strtol_l.isra.0+0xda>
 8004a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2e:	b102      	cbz	r2, 8004a32 <_strtol_l.isra.0+0xd2>
 8004a30:	4240      	negs	r0, r0
 8004a32:	f1ba 0f00 	cmp.w	sl, #0
 8004a36:	d0f8      	beq.n	8004a2a <_strtol_l.isra.0+0xca>
 8004a38:	b10f      	cbz	r7, 8004a3e <_strtol_l.isra.0+0xde>
 8004a3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8004a3e:	f8ca 9000 	str.w	r9, [sl]
 8004a42:	e7f2      	b.n	8004a2a <_strtol_l.isra.0+0xca>
 8004a44:	2430      	movs	r4, #48	; 0x30
 8004a46:	2e00      	cmp	r6, #0
 8004a48:	d1af      	bne.n	80049aa <_strtol_l.isra.0+0x4a>
 8004a4a:	2608      	movs	r6, #8
 8004a4c:	e7ad      	b.n	80049aa <_strtol_l.isra.0+0x4a>
 8004a4e:	2c30      	cmp	r4, #48	; 0x30
 8004a50:	d0a3      	beq.n	800499a <_strtol_l.isra.0+0x3a>
 8004a52:	260a      	movs	r6, #10
 8004a54:	e7a9      	b.n	80049aa <_strtol_l.isra.0+0x4a>
	...

08004a58 <strtol>:
 8004a58:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <strtol+0x24>)
 8004a5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a5c:	681c      	ldr	r4, [r3, #0]
 8004a5e:	4d08      	ldr	r5, [pc, #32]	; (8004a80 <strtol+0x28>)
 8004a60:	6a23      	ldr	r3, [r4, #32]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf08      	it	eq
 8004a66:	462b      	moveq	r3, r5
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	460a      	mov	r2, r1
 8004a6e:	4601      	mov	r1, r0
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7ff ff75 	bl	8004960 <_strtol_l.isra.0>
 8004a76:	b003      	add	sp, #12
 8004a78:	bd30      	pop	{r4, r5, pc}
 8004a7a:	bf00      	nop
 8004a7c:	2000006c 	.word	0x2000006c
 8004a80:	200000d0 	.word	0x200000d0

08004a84 <__utoa>:
 8004a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <__utoa+0x78>)
 8004a88:	b08b      	sub	sp, #44	; 0x2c
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	466e      	mov	r6, sp
 8004a90:	f103 0c20 	add.w	ip, r3, #32
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	4637      	mov	r7, r6
 8004a9a:	c703      	stmia	r7!, {r0, r1}
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	4563      	cmp	r3, ip
 8004aa0:	463e      	mov	r6, r7
 8004aa2:	d1f7      	bne.n	8004a94 <__utoa+0x10>
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	791b      	ldrb	r3, [r3, #4]
 8004aa8:	713b      	strb	r3, [r7, #4]
 8004aaa:	1e93      	subs	r3, r2, #2
 8004aac:	2b22      	cmp	r3, #34	; 0x22
 8004aae:	6038      	str	r0, [r7, #0]
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	d904      	bls.n	8004ac0 <__utoa+0x3c>
 8004ab6:	7023      	strb	r3, [r4, #0]
 8004ab8:	461c      	mov	r4, r3
 8004aba:	4620      	mov	r0, r4
 8004abc:	b00b      	add	sp, #44	; 0x2c
 8004abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac0:	1e66      	subs	r6, r4, #1
 8004ac2:	fbb5 f0f2 	udiv	r0, r5, r2
 8004ac6:	af0a      	add	r7, sp, #40	; 0x28
 8004ac8:	fb02 5510 	mls	r5, r2, r0, r5
 8004acc:	443d      	add	r5, r7
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8004ad4:	f806 5f01 	strb.w	r5, [r6, #1]!
 8004ad8:	4605      	mov	r5, r0
 8004ada:	b968      	cbnz	r0, 8004af8 <__utoa+0x74>
 8004adc:	5460      	strb	r0, [r4, r1]
 8004ade:	4423      	add	r3, r4
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	1b19      	subs	r1, r3, r4
 8004ae4:	1b10      	subs	r0, r2, r4
 8004ae6:	4281      	cmp	r1, r0
 8004ae8:	dde7      	ble.n	8004aba <__utoa+0x36>
 8004aea:	7811      	ldrb	r1, [r2, #0]
 8004aec:	7818      	ldrb	r0, [r3, #0]
 8004aee:	f802 0b01 	strb.w	r0, [r2], #1
 8004af2:	f803 1901 	strb.w	r1, [r3], #-1
 8004af6:	e7f4      	b.n	8004ae2 <__utoa+0x5e>
 8004af8:	460b      	mov	r3, r1
 8004afa:	e7e2      	b.n	8004ac2 <__utoa+0x3e>
 8004afc:	08004c98 	.word	0x08004c98

08004b00 <__locale_ctype_ptr_l>:
 8004b00:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004b04:	4770      	bx	lr
	...

08004b08 <malloc>:
 8004b08:	4b02      	ldr	r3, [pc, #8]	; (8004b14 <malloc+0xc>)
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f000 b815 	b.w	8004b3c <_malloc_r>
 8004b12:	bf00      	nop
 8004b14:	2000006c 	.word	0x2000006c

08004b18 <__ascii_mbtowc>:
 8004b18:	b082      	sub	sp, #8
 8004b1a:	b901      	cbnz	r1, 8004b1e <__ascii_mbtowc+0x6>
 8004b1c:	a901      	add	r1, sp, #4
 8004b1e:	b142      	cbz	r2, 8004b32 <__ascii_mbtowc+0x1a>
 8004b20:	b14b      	cbz	r3, 8004b36 <__ascii_mbtowc+0x1e>
 8004b22:	7813      	ldrb	r3, [r2, #0]
 8004b24:	600b      	str	r3, [r1, #0]
 8004b26:	7812      	ldrb	r2, [r2, #0]
 8004b28:	1c10      	adds	r0, r2, #0
 8004b2a:	bf18      	it	ne
 8004b2c:	2001      	movne	r0, #1
 8004b2e:	b002      	add	sp, #8
 8004b30:	4770      	bx	lr
 8004b32:	4610      	mov	r0, r2
 8004b34:	e7fb      	b.n	8004b2e <__ascii_mbtowc+0x16>
 8004b36:	f06f 0001 	mvn.w	r0, #1
 8004b3a:	e7f8      	b.n	8004b2e <__ascii_mbtowc+0x16>

08004b3c <_malloc_r>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	1ccd      	adds	r5, r1, #3
 8004b40:	f025 0503 	bic.w	r5, r5, #3
 8004b44:	3508      	adds	r5, #8
 8004b46:	2d0c      	cmp	r5, #12
 8004b48:	bf38      	it	cc
 8004b4a:	250c      	movcc	r5, #12
 8004b4c:	2d00      	cmp	r5, #0
 8004b4e:	4606      	mov	r6, r0
 8004b50:	db01      	blt.n	8004b56 <_malloc_r+0x1a>
 8004b52:	42a9      	cmp	r1, r5
 8004b54:	d903      	bls.n	8004b5e <_malloc_r+0x22>
 8004b56:	230c      	movs	r3, #12
 8004b58:	6033      	str	r3, [r6, #0]
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
 8004b5e:	f000 f864 	bl	8004c2a <__malloc_lock>
 8004b62:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <_malloc_r+0xac>)
 8004b64:	6814      	ldr	r4, [r2, #0]
 8004b66:	4621      	mov	r1, r4
 8004b68:	b991      	cbnz	r1, 8004b90 <_malloc_r+0x54>
 8004b6a:	4c20      	ldr	r4, [pc, #128]	; (8004bec <_malloc_r+0xb0>)
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	b91b      	cbnz	r3, 8004b78 <_malloc_r+0x3c>
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 f83d 	bl	8004bf0 <_sbrk_r>
 8004b76:	6020      	str	r0, [r4, #0]
 8004b78:	4629      	mov	r1, r5
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f000 f838 	bl	8004bf0 <_sbrk_r>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d124      	bne.n	8004bce <_malloc_r+0x92>
 8004b84:	230c      	movs	r3, #12
 8004b86:	6033      	str	r3, [r6, #0]
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 f84f 	bl	8004c2c <__malloc_unlock>
 8004b8e:	e7e4      	b.n	8004b5a <_malloc_r+0x1e>
 8004b90:	680b      	ldr	r3, [r1, #0]
 8004b92:	1b5b      	subs	r3, r3, r5
 8004b94:	d418      	bmi.n	8004bc8 <_malloc_r+0x8c>
 8004b96:	2b0b      	cmp	r3, #11
 8004b98:	d90f      	bls.n	8004bba <_malloc_r+0x7e>
 8004b9a:	600b      	str	r3, [r1, #0]
 8004b9c:	50cd      	str	r5, [r1, r3]
 8004b9e:	18cc      	adds	r4, r1, r3
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f000 f843 	bl	8004c2c <__malloc_unlock>
 8004ba6:	f104 000b 	add.w	r0, r4, #11
 8004baa:	1d23      	adds	r3, r4, #4
 8004bac:	f020 0007 	bic.w	r0, r0, #7
 8004bb0:	1ac3      	subs	r3, r0, r3
 8004bb2:	d0d3      	beq.n	8004b5c <_malloc_r+0x20>
 8004bb4:	425a      	negs	r2, r3
 8004bb6:	50e2      	str	r2, [r4, r3]
 8004bb8:	e7d0      	b.n	8004b5c <_malloc_r+0x20>
 8004bba:	428c      	cmp	r4, r1
 8004bbc:	684b      	ldr	r3, [r1, #4]
 8004bbe:	bf16      	itet	ne
 8004bc0:	6063      	strne	r3, [r4, #4]
 8004bc2:	6013      	streq	r3, [r2, #0]
 8004bc4:	460c      	movne	r4, r1
 8004bc6:	e7eb      	b.n	8004ba0 <_malloc_r+0x64>
 8004bc8:	460c      	mov	r4, r1
 8004bca:	6849      	ldr	r1, [r1, #4]
 8004bcc:	e7cc      	b.n	8004b68 <_malloc_r+0x2c>
 8004bce:	1cc4      	adds	r4, r0, #3
 8004bd0:	f024 0403 	bic.w	r4, r4, #3
 8004bd4:	42a0      	cmp	r0, r4
 8004bd6:	d005      	beq.n	8004be4 <_malloc_r+0xa8>
 8004bd8:	1a21      	subs	r1, r4, r0
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f000 f808 	bl	8004bf0 <_sbrk_r>
 8004be0:	3001      	adds	r0, #1
 8004be2:	d0cf      	beq.n	8004b84 <_malloc_r+0x48>
 8004be4:	6025      	str	r5, [r4, #0]
 8004be6:	e7db      	b.n	8004ba0 <_malloc_r+0x64>
 8004be8:	20000264 	.word	0x20000264
 8004bec:	20000268 	.word	0x20000268

08004bf0 <_sbrk_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4c06      	ldr	r4, [pc, #24]	; (8004c0c <_sbrk_r+0x1c>)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	6023      	str	r3, [r4, #0]
 8004bfc:	f7ff fd8e 	bl	800471c <_sbrk>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_sbrk_r+0x1a>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_sbrk_r+0x1a>
 8004c08:	602b      	str	r3, [r5, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	20000370 	.word	0x20000370

08004c10 <__ascii_wctomb>:
 8004c10:	b149      	cbz	r1, 8004c26 <__ascii_wctomb+0x16>
 8004c12:	2aff      	cmp	r2, #255	; 0xff
 8004c14:	bf85      	ittet	hi
 8004c16:	238a      	movhi	r3, #138	; 0x8a
 8004c18:	6003      	strhi	r3, [r0, #0]
 8004c1a:	700a      	strbls	r2, [r1, #0]
 8004c1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004c20:	bf98      	it	ls
 8004c22:	2001      	movls	r0, #1
 8004c24:	4770      	bx	lr
 8004c26:	4608      	mov	r0, r1
 8004c28:	4770      	bx	lr

08004c2a <__malloc_lock>:
 8004c2a:	4770      	bx	lr

08004c2c <__malloc_unlock>:
 8004c2c:	4770      	bx	lr
	...

08004c30 <_init>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	bf00      	nop
 8004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c36:	bc08      	pop	{r3}
 8004c38:	469e      	mov	lr, r3
 8004c3a:	4770      	bx	lr

08004c3c <_fini>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr
