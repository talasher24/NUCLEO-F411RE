
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006008  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a0  080063a0  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063a8  080063a8  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  080063b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000023c  080065ec  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080065ec  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109d2  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002846  00000000  00000000  00030c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a8  00000000  00000000  00033488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00034530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ee9  00000000  00000000  00035490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d0c0  00000000  00000000  0004d379  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093dbf  00000000  00000000  0005a439  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee1f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad0  00000000  00000000  000ee274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000023c 	.word	0x2000023c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006190 	.word	0x08006190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000240 	.word	0x20000240
 80001dc:	08006190 	.word	0x08006190

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f8d8 	bl	800076e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f004 ff60 	bl	8005484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f004 fde8 	bl	8005198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000004 	.word	0x20000004
 80005f8:	20000264 	.word	0x20000264

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000264 	.word	0x20000264

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db0b      	blt.n	80006a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 021f 	and.w	r2, r3, #31
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <__NVIC_EnableIRQ+0x38>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	095b      	lsrs	r3, r3, #5
 8000698:	2001      	movs	r0, #1
 800069a:	fa00 f202 	lsl.w	r2, r0, r2
 800069e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db0a      	blt.n	80006de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	490c      	ldr	r1, [pc, #48]	; (8000700 <__NVIC_SetPriority+0x4c>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	0112      	lsls	r2, r2, #4
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	440b      	add	r3, r1
 80006d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006dc:	e00a      	b.n	80006f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4908      	ldr	r1, [pc, #32]	; (8000704 <__NVIC_SetPriority+0x50>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 030f 	and.w	r3, r3, #15
 80006ea:	3b04      	subs	r3, #4
 80006ec:	0112      	lsls	r2, r2, #4
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	440b      	add	r3, r1
 80006f2:	761a      	strb	r2, [r3, #24]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000e100 	.word	0xe000e100
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	f1c3 0307 	rsb	r3, r3, #7
 8000722:	2b04      	cmp	r3, #4
 8000724:	bf28      	it	cs
 8000726:	2304      	movcs	r3, #4
 8000728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3304      	adds	r3, #4
 800072e:	2b06      	cmp	r3, #6
 8000730:	d902      	bls.n	8000738 <NVIC_EncodePriority+0x30>
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3b03      	subs	r3, #3
 8000736:	e000      	b.n	800073a <NVIC_EncodePriority+0x32>
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	f04f 32ff 	mov.w	r2, #4294967295
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	43da      	mvns	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	401a      	ands	r2, r3
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000750:	f04f 31ff 	mov.w	r1, #4294967295
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43d9      	mvns	r1, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	4313      	orrs	r3, r2
         );
}
 8000762:	4618      	mov	r0, r3
 8000764:	3724      	adds	r7, #36	; 0x24
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff4c 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000796:	f7ff ff61 	bl	800065c <__NVIC_GetPriorityGrouping>
 800079a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	68b9      	ldr	r1, [r7, #8]
 80007a0:	6978      	ldr	r0, [r7, #20]
 80007a2:	f7ff ffb1 	bl	8000708 <NVIC_EncodePriority>
 80007a6:	4602      	mov	r2, r0
 80007a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff80 	bl	80006b4 <__NVIC_SetPriority>
}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff54 	bl	8000678 <__NVIC_EnableIRQ>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00e      	b.n	8000808 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	795b      	ldrb	r3, [r3, #5]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d105      	bne.n	8000800 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f004 fcf4 	bl	80051e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2202      	movs	r2, #2
 8000824:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f042 0201 	orr.w	r2, r2, #1
 8000834:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	e00a      	b.n	8000852 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	441a      	add	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d3f0      	bcc.n	800083c <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2201      	movs	r2, #1
 8000866:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000868:	693b      	ldr	r3, [r7, #16]
}
 800086a:	4618      	mov	r0, r3
 800086c:	371c      	adds	r7, #28
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000884:	f7ff feba 	bl	80005fc <HAL_GetTick>
 8000888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	e099      	b.n	80009c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2202      	movs	r2, #2
 80008a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 0201 	bic.w	r2, r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008b4:	e00f      	b.n	80008d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008b6:	f7ff fea1 	bl	80005fc <HAL_GetTick>
 80008ba:	4602      	mov	r2, r0
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d908      	bls.n	80008d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2220      	movs	r2, #32
 80008c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2203      	movs	r2, #3
 80008ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008d2:	2303      	movs	r3, #3
 80008d4:	e078      	b.n	80009c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1e8      	bne.n	80008b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_DMA_Init+0x158>)
 80008f0:	4013      	ands	r3, r2
 80008f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000902:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800090e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800091a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a1b      	ldr	r3, [r3, #32]
 8000920:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	4313      	orrs	r3, r2
 8000926:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092c:	2b04      	cmp	r3, #4
 800092e:	d107      	bne.n	8000940 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4313      	orrs	r3, r2
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4313      	orrs	r3, r2
 800093e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	f023 0307 	bic.w	r3, r3, #7
 8000956:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	4313      	orrs	r3, r2
 8000960:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	2b04      	cmp	r3, #4
 8000968:	d117      	bne.n	800099a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	4313      	orrs	r3, r2
 8000972:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00e      	beq.n	800099a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 fa91 	bl	8000ea4 <DMA_CheckFifoParam>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d008      	beq.n	800099a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2240      	movs	r2, #64	; 0x40
 800098c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000996:	2301      	movs	r3, #1
 8000998:	e016      	b.n	80009c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 fa48 	bl	8000e38 <DMA_CalcBaseAndBitshift>
 80009a8:	4603      	mov	r3, r0
 80009aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b0:	223f      	movs	r2, #63	; 0x3f
 80009b2:	409a      	lsls	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2201      	movs	r2, #1
 80009c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	f010803f 	.word	0xf010803f

080009d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d101      	bne.n	80009fa <HAL_DMA_Start_IT+0x26>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e040      	b.n	8000a7c <HAL_DMA_Start_IT+0xa8>
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d12f      	bne.n	8000a6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2202      	movs	r2, #2
 8000a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f9da 	bl	8000ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a2c:	223f      	movs	r2, #63	; 0x3f
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0216 	orr.w	r2, r2, #22
 8000a42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d007      	beq.n	8000a5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0208 	orr.w	r2, r2, #8
 8000a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f042 0201 	orr.w	r2, r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e005      	b.n	8000a7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a76:	2302      	movs	r3, #2
 8000a78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d004      	beq.n	8000aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00c      	b.n	8000abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2205      	movs	r2, #5
 8000aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f022 0201 	bic.w	r2, r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ad4:	4b92      	ldr	r3, [pc, #584]	; (8000d20 <HAL_DMA_IRQHandler+0x258>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a92      	ldr	r2, [pc, #584]	; (8000d24 <HAL_DMA_IRQHandler+0x25c>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	0a9b      	lsrs	r3, r3, #10
 8000ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af2:	2208      	movs	r2, #8
 8000af4:	409a      	lsls	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d01a      	beq.n	8000b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d013      	beq.n	8000b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f022 0204 	bic.w	r2, r2, #4
 8000b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b20:	2208      	movs	r2, #8
 8000b22:	409a      	lsls	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b2c:	f043 0201 	orr.w	r2, r3, #1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b38:	2201      	movs	r2, #1
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d012      	beq.n	8000b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00b      	beq.n	8000b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b56:	2201      	movs	r2, #1
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b62:	f043 0202 	orr.w	r2, r3, #2
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6e:	2204      	movs	r2, #4
 8000b70:	409a      	lsls	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d012      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00b      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b98:	f043 0204 	orr.w	r2, r3, #4
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d043      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d03c      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d018      	beq.n	8000c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d108      	bne.n	8000bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d024      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	4798      	blx	r3
 8000bf6:	e01f      	b.n	8000c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01b      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	4798      	blx	r3
 8000c08:	e016      	b.n	8000c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d107      	bne.n	8000c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0208 	bic.w	r2, r2, #8
 8000c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 808e 	beq.w	8000d66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 8086 	beq.w	8000d66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5e:	2220      	movs	r2, #32
 8000c60:	409a      	lsls	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b05      	cmp	r3, #5
 8000c70:	d136      	bne.n	8000ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0216 	bic.w	r2, r2, #22
 8000c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	695a      	ldr	r2, [r3, #20]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <HAL_DMA_IRQHandler+0x1da>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d007      	beq.n	8000cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 0208 	bic.w	r2, r2, #8
 8000cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb6:	223f      	movs	r2, #63	; 0x3f
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d07d      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	4798      	blx	r3
        }
        return;
 8000cde:	e078      	b.n	8000dd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01c      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d108      	bne.n	8000d0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d030      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	4798      	blx	r3
 8000d0c:	e02b      	b.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d027      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	4798      	blx	r3
 8000d1e:	e022      	b.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
 8000d20:	20000068 	.word	0x20000068
 8000d24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10f      	bne.n	8000d56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0210 	bic.w	r2, r2, #16
 8000d44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d032      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d022      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d307      	bcc.n	8000dae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1f2      	bne.n	8000d92 <HAL_DMA_IRQHandler+0x2ca>
 8000dac:	e000      	b.n	8000db0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000dae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4798      	blx	r3
 8000dd0:	e000      	b.n	8000dd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000dd2:	bf00      	nop
    }
  }
}
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop

08000ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b40      	cmp	r3, #64	; 0x40
 8000e08:	d108      	bne.n	8000e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e1a:	e007      	b.n	8000e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3b10      	subs	r3, #16
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <DMA_CalcBaseAndBitshift+0x64>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d909      	bls.n	8000e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e6e:	f023 0303 	bic.w	r3, r3, #3
 8000e72:	1d1a      	adds	r2, r3, #4
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	659a      	str	r2, [r3, #88]	; 0x58
 8000e78:	e007      	b.n	8000e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e82:	f023 0303 	bic.w	r3, r3, #3
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	aaaaaaab 	.word	0xaaaaaaab
 8000ea0:	08006240 	.word	0x08006240

08000ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d11f      	bne.n	8000efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d855      	bhi.n	8000f70 <DMA_CheckFifoParam+0xcc>
 8000ec4:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <DMA_CheckFifoParam+0x28>)
 8000ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000edd 	.word	0x08000edd
 8000ed0:	08000eef 	.word	0x08000eef
 8000ed4:	08000edd 	.word	0x08000edd
 8000ed8:	08000f71 	.word	0x08000f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d045      	beq.n	8000f74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eec:	e042      	b.n	8000f74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ef6:	d13f      	bne.n	8000f78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000efc:	e03c      	b.n	8000f78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f06:	d121      	bne.n	8000f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d836      	bhi.n	8000f7c <DMA_CheckFifoParam+0xd8>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <DMA_CheckFifoParam+0x70>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f2b 	.word	0x08000f2b
 8000f1c:	08000f25 	.word	0x08000f25
 8000f20:	08000f3d 	.word	0x08000f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
      break;
 8000f28:	e02f      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d024      	beq.n	8000f80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f3a:	e021      	b.n	8000f80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f44:	d11e      	bne.n	8000f84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f4a:	e01b      	b.n	8000f84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d902      	bls.n	8000f58 <DMA_CheckFifoParam+0xb4>
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d003      	beq.n	8000f5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f56:	e018      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f5c:	e015      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00e      	beq.n	8000f88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8000f6e:	e00b      	b.n	8000f88 <DMA_CheckFifoParam+0xe4>
      break;
 8000f70:	bf00      	nop
 8000f72:	e00a      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f74:	bf00      	nop
 8000f76:	e008      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e006      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e004      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f80:	bf00      	nop
 8000f82:	e002      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;   
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f88:	bf00      	nop
    }
  } 
  
  return status; 
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_FLASH_Unlock+0x38>)
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da0b      	bge.n	8000fc2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_FLASH_Unlock+0x38>)
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_FLASH_Unlock+0x3c>)
 8000fae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_FLASH_Unlock+0x38>)
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <HAL_FLASH_Unlock+0x40>)
 8000fb4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_FLASH_Unlock+0x38>)
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da01      	bge.n	8000fc2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40023c00 	.word	0x40023c00
 8000fd4:	45670123 	.word	0x45670123
 8000fd8:	cdef89ab 	.word	0xcdef89ab

08000fdc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_FLASH_Lock+0x1c>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_FLASH_Lock+0x1c>)
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_FLASH_OB_Unlock+0x2c>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_FLASH_OB_Unlock+0x2c>)
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_FLASH_OB_Unlock+0x30>)
 8001010:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_FLASH_OB_Unlock+0x2c>)
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_FLASH_OB_Unlock+0x34>)
 8001016:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001018:	2300      	movs	r3, #0
 800101a:	e000      	b.n	800101e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40023c00 	.word	0x40023c00
 800102c:	08192a3b 	.word	0x08192a3b
 8001030:	4c5d6e7f 	.word	0x4c5d6e7f

08001034 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_FLASH_OB_Lock+0x1c>)
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_FLASH_OB_Lock+0x1c>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <HAL_FLASH_OB_Launch+0x24>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_FLASH_OB_Launch+0x24>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	b2db      	uxtb	r3, r3
 8001066:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8001068:	f24c 3050 	movw	r0, #50000	; 0xc350
 800106c:	f000 f806 	bl	800107c <FLASH_WaitForLastOperation>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c14 	.word	0x40023c14

0800107c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <FLASH_WaitForLastOperation+0x78>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800108e:	f7ff fab5 	bl	80005fc <HAL_GetTick>
 8001092:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001094:	e010      	b.n	80010b8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d00c      	beq.n	80010b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <FLASH_WaitForLastOperation+0x38>
 80010a4:	f7ff faaa 	bl	80005fc <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d201      	bcs.n	80010b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e019      	b.n	80010ec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <FLASH_WaitForLastOperation+0x7c>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1e8      	bne.n	8001096 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <FLASH_WaitForLastOperation+0x7c>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <FLASH_WaitForLastOperation+0x7c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <FLASH_WaitForLastOperation+0x7c>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010e2:	f000 f80b 	bl	80010fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
  
}  
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000268 	.word	0x20000268
 80010f8:	40023c00 	.word	0x40023c00

080010fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 8001116:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 800111a:	2210      	movs	r2, #16
 800111c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	2b00      	cmp	r3, #0
 8001128:	d008      	beq.n	800113c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 8001134:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 8001138:	2220      	movs	r2, #32
 800113a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 8001152:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 8001156:	2240      	movs	r2, #64	; 0x40
 8001158:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	2b00      	cmp	r3, #0
 8001164:	d008      	beq.n	8001178 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 8001170:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 800118e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 8001192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001196:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <FLASH_SetErrorCode+0xc8>)
 80011ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <FLASH_SetErrorCode+0xc4>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	60da      	str	r2, [r3, #12]
  }
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40023c00 	.word	0x40023c00
 80011c4:	20000268 	.word	0x20000268

080011c8 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_FLASHEx_OBProgram+0xd8>)
 80011d6:	7e1b      	ldrb	r3, [r3, #24]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_FLASHEx_OBProgram+0x18>
 80011dc:	2302      	movs	r3, #2
 80011de:	e05b      	b.n	8001298 <HAL_FLASHEx_OBProgram+0xd0>
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_FLASHEx_OBProgram+0xd8>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d018      	beq.n	8001224 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d10a      	bne.n	8001210 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	4619      	mov	r1, r3
 8001204:	4610      	mov	r0, r2
 8001206:	f000 f871 	bl	80012ec <FLASH_OB_EnableWRP>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e009      	b.n	8001224 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4619      	mov	r1, r3
 800121a:	4610      	mov	r0, r2
 800121c:	f000 f888 	bl	8001330 <FLASH_OB_DisableWRP>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f89a 	bl	8001370 <FLASH_OB_RDP_LevelConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7e1b      	ldrb	r3, [r3, #24]
 8001250:	f003 0320 	and.w	r3, r3, #32
 8001254:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125e:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001264:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	f000 f89a 	bl	80013a4 <FLASH_OB_UserConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f8bc 	bl	8001404 <FLASH_OB_BOR_LevelConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_FLASHEx_OBProgram+0xd8>)
 8001292:	2200      	movs	r2, #0
 8001294:	761a      	strb	r2, [r3, #24]

  return status;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000268 	.word	0x20000268

080012a4 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	220f      	movs	r2, #15
 80012b0:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80012b2:	f000 f8d5 	bl	8001460 <FLASH_OB_GetWRP>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80012be:	f000 f8db 	bl	8001478 <FLASH_OB_GetRDP>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80012ca:	f000 f8b9 	bl	8001440 <FLASH_OB_GetUser>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80012d6:	f000 f8ef 	bl	80014b8 <FLASH_OB_GetBOR>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	615a      	str	r2, [r3, #20]
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012fe:	f7ff febd 	bl	800107c <FLASH_WaitForLastOperation>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10a      	bne.n	8001322 <FLASH_OB_EnableWRP+0x36>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <FLASH_OB_EnableWRP+0x40>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	b29a      	uxth	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	b29b      	uxth	r3, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	b29b      	uxth	r3, r3
 800131a:	4904      	ldr	r1, [pc, #16]	; (800132c <FLASH_OB_EnableWRP+0x40>)
 800131c:	4013      	ands	r3, r2
 800131e:	b29b      	uxth	r3, r3
 8001320:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023c16 	.word	0x40023c16

08001330 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800133e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001342:	f7ff fe9b 	bl	800107c <FLASH_WaitForLastOperation>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d108      	bne.n	8001362 <FLASH_OB_DisableWRP+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <FLASH_OB_DisableWRP+0x3c>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4904      	ldr	r1, [pc, #16]	; (800136c <FLASH_OB_DisableWRP+0x3c>)
 800135c:	4313      	orrs	r3, r2
 800135e:	b29b      	uxth	r3, r3
 8001360:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023c16 	.word	0x40023c16

08001370 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800137e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001382:	f7ff fe7b 	bl	800107c <FLASH_WaitForLastOperation>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8001390:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <FLASH_OB_RDP_LevelConfig+0x30>)
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023c15 	.word	0x40023c15

080013a4 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	460b      	mov	r3, r1
 80013b0:	71bb      	strb	r3, [r7, #6]
 80013b2:	4613      	mov	r3, r2
 80013b4:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80013b6:	23ff      	movs	r3, #255	; 0xff
 80013b8:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013c2:	f7ff fe5b 	bl	800107c <FLASH_WaitForLastOperation>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d111      	bne.n	80013f4 <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <FLASH_OB_UserConfig+0x5c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 80013dc:	79ba      	ldrb	r2, [r7, #6]
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	797b      	ldrb	r3, [r7, #5]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4905      	ldr	r1, [pc, #20]	; (8001400 <FLASH_OB_UserConfig+0x5c>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023c14 	.word	0x40023c14

08001404 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <FLASH_OB_BOR_LevelConfig+0x38>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4a09      	ldr	r2, [pc, #36]	; (800143c <FLASH_OB_BOR_LevelConfig+0x38>)
 8001416:	f023 030c 	bic.w	r3, r3, #12
 800141a:	b2db      	uxtb	r3, r3
 800141c:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <FLASH_OB_BOR_LevelConfig+0x38>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4905      	ldr	r1, [pc, #20]	; (800143c <FLASH_OB_BOR_LevelConfig+0x38>)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	4313      	orrs	r3, r2
 800142a:	b2db      	uxtb	r3, r3
 800142c:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
  
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40023c14 	.word	0x40023c14

08001440 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <FLASH_OB_GetUser+0x1c>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f023 031f 	bic.w	r3, r3, #31
 800144e:	b2db      	uxtb	r3, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023c00 	.word	0x40023c00

08001460 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <FLASH_OB_GetWRP+0x14>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40023c16 	.word	0x40023c16

08001478 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800147e:	23aa      	movs	r3, #170	; 0xaa
 8001480:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <FLASH_OB_GetRDP+0x3c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2bcc      	cmp	r3, #204	; 0xcc
 800148a:	d102      	bne.n	8001492 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800148c:	23cc      	movs	r3, #204	; 0xcc
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	e009      	b.n	80014a6 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <FLASH_OB_GetRDP+0x3c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2baa      	cmp	r3, #170	; 0xaa
 800149a:	d102      	bne.n	80014a2 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800149c:	23aa      	movs	r3, #170	; 0xaa
 800149e:	71fb      	strb	r3, [r7, #7]
 80014a0:	e001      	b.n	80014a6 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 80014a2:	2355      	movs	r3, #85	; 0x55
 80014a4:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40023c15 	.word	0x40023c15

080014b8 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <FLASH_OB_GetBOR+0x1c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	b2db      	uxtb	r3, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023c14 	.word	0x40023c14

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	e159      	b.n	80017a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 8148 	bne.w	80017a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d00b      	beq.n	8001532 <HAL_GPIO_Init+0x5a>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001526:	2b11      	cmp	r3, #17
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b12      	cmp	r3, #18
 8001530:	d130      	bne.n	8001594 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0xfc>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b12      	cmp	r3, #18
 80015d2:	d123      	bne.n	800161c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	69b9      	ldr	r1, [r7, #24]
 8001618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0203 	and.w	r2, r3, #3
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a2 	beq.w	80017a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_GPIO_Init+0x2e4>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a55      	ldr	r2, [pc, #340]	; (80017bc <HAL_GPIO_Init+0x2e4>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_GPIO_Init+0x2e4>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800167a:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a48      	ldr	r2, [pc, #288]	; (80017c4 <HAL_GPIO_Init+0x2ec>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x202>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a47      	ldr	r2, [pc, #284]	; (80017c8 <HAL_GPIO_Init+0x2f0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x1fe>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a46      	ldr	r2, [pc, #280]	; (80017cc <HAL_GPIO_Init+0x2f4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x1fa>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a45      	ldr	r2, [pc, #276]	; (80017d0 <HAL_GPIO_Init+0x2f8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x1f6>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a44      	ldr	r2, [pc, #272]	; (80017d4 <HAL_GPIO_Init+0x2fc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x1f2>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016ca:	2307      	movs	r3, #7
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x204>
 80016da:	2300      	movs	r3, #0
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ec:	4934      	ldr	r1, [pc, #208]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HAL_GPIO_Init+0x300>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171e:	4a2e      	ldr	r2, [pc, #184]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_GPIO_Init+0x300>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_GPIO_Init+0x300>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_GPIO_Init+0x300>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_GPIO_Init+0x300>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	f67f aea2 	bls.w	80014f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b0:	bf00      	nop
 80017b2:	3724      	adds	r7, #36	; 0x24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40013c00 	.word	0x40013c00

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f8:	e003      	b.n	8001802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	619a      	str	r2, [r3, #24]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e25b      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d075      	beq.n	800191a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800182e:	4ba3      	ldr	r3, [pc, #652]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d00c      	beq.n	8001854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183a:	4ba0      	ldr	r3, [pc, #640]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001842:	2b08      	cmp	r3, #8
 8001844:	d112      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001852:	d10b      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4b99      	ldr	r3, [pc, #612]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d05b      	beq.n	8001918 <HAL_RCC_OscConfig+0x108>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d157      	bne.n	8001918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e236      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x74>
 8001876:	4b91      	ldr	r3, [pc, #580]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a90      	ldr	r2, [pc, #576]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xb0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x98>
 800188e:	4b8b      	ldr	r3, [pc, #556]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a8a      	ldr	r2, [pc, #552]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a87      	ldr	r2, [pc, #540]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xb0>
 80018a8:	4b84      	ldr	r3, [pc, #528]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a83      	ldr	r2, [pc, #524]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b81      	ldr	r3, [pc, #516]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a80      	ldr	r2, [pc, #512]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7fe fe98 	bl	80005fc <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d0:	f7fe fe94 	bl	80005fc <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1fb      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xc0>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7fe fe84 	bl	80005fc <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7fe fe80 	bl	80005fc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1e7      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b6c      	ldr	r3, [pc, #432]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0xe8>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d063      	beq.n	80019ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001926:	4b65      	ldr	r3, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800193a:	2b08      	cmp	r3, #8
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x152>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1bb      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4952      	ldr	r1, [pc, #328]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e03a      	b.n	80019ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <HAL_RCC_OscConfig+0x2b0>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7fe fe39 	bl	80005fc <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198e:	f7fe fe35 	bl	80005fc <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e19c      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	4b46      	ldr	r3, [pc, #280]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4940      	ldr	r1, [pc, #256]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_RCC_OscConfig+0x2b0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7fe fe18 	bl	80005fc <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d0:	f7fe fe14 	bl	80005fc <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e17b      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	4b36      	ldr	r3, [pc, #216]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d030      	beq.n	8001a5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d016      	beq.n	8001a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_RCC_OscConfig+0x2b4>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7fe fdf8 	bl	80005fc <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a10:	f7fe fdf4 	bl	80005fc <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e15b      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x200>
 8001a2e:	e015      	b.n	8001a5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_RCC_OscConfig+0x2b4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7fe fde1 	bl	80005fc <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7fe fddd 	bl	80005fc <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e144      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80a0 	beq.w	8001baa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_OscConfig+0x2b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d121      	bne.n	8001aea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_RCC_OscConfig+0x2b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_RCC_OscConfig+0x2b8>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab2:	f7fe fda3 	bl	80005fc <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e011      	b.n	8001ade <HAL_RCC_OscConfig+0x2ce>
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	42470000 	.word	0x42470000
 8001ac4:	42470e80 	.word	0x42470e80
 8001ac8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7fe fd96 	bl	80005fc <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0fd      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <HAL_RCC_OscConfig+0x4d4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
 8001af2:	4b7d      	ldr	r3, [pc, #500]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	4a7c      	ldr	r2, [pc, #496]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6713      	str	r3, [r2, #112]	; 0x70
 8001afe:	e01c      	b.n	8001b3a <HAL_RCC_OscConfig+0x32a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x312>
 8001b08:	4b77      	ldr	r3, [pc, #476]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a76      	ldr	r2, [pc, #472]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	4b74      	ldr	r3, [pc, #464]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a73      	ldr	r2, [pc, #460]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0x32a>
 8001b22:	4b71      	ldr	r3, [pc, #452]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	4a70      	ldr	r2, [pc, #448]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a6d      	ldr	r2, [pc, #436]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d015      	beq.n	8001b6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7fe fd5b 	bl	80005fc <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7fe fd57 	bl	80005fc <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0bc      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b60:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ee      	beq.n	8001b4a <HAL_RCC_OscConfig+0x33a>
 8001b6c:	e014      	b.n	8001b98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7fe fd45 	bl	80005fc <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7fe fd41 	bl	80005fc <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0a6      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8c:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ee      	bne.n	8001b76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d105      	bne.n	8001baa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8092 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d05c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d141      	bne.n	8001c4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b48      	ldr	r3, [pc, #288]	; (8001cec <HAL_RCC_OscConfig+0x4dc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7fe fd15 	bl	80005fc <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7fe fd11 	bl	80005fc <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e078      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be8:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69da      	ldr	r2, [r3, #28]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	019b      	lsls	r3, r3, #6
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	085b      	lsrs	r3, r3, #1
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	041b      	lsls	r3, r3, #16
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	061b      	lsls	r3, r3, #24
 8001c18:	4933      	ldr	r1, [pc, #204]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_RCC_OscConfig+0x4dc>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7fe fcea 	bl	80005fc <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7fe fce6 	bl	80005fc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e04d      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x41c>
 8001c4a:	e045      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x4dc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe fcd3 	bl	80005fc <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe fccf 	bl	80005fc <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e036      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x44a>
 8001c78:	e02e      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e029      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_RCC_OscConfig+0x4d8>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d11c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d115      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cae:	4013      	ands	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40007000 	.word	0x40007000
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	42470060 	.word	0x42470060

08001cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0cc      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d90c      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b65      	ldr	r3, [pc, #404]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0b8      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d44:	4b59      	ldr	r3, [pc, #356]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a58      	ldr	r2, [pc, #352]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d5c:	4b53      	ldr	r3, [pc, #332]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a52      	ldr	r2, [pc, #328]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b50      	ldr	r3, [pc, #320]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	494d      	ldr	r1, [pc, #308]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d044      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b47      	ldr	r3, [pc, #284]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e07f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e06f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e067      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4934      	ldr	r1, [pc, #208]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de0:	f7fe fc0c 	bl	80005fc <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7fe fc08 	bl	80005fc <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e04f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 020c 	and.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1eb      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d20c      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e032      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4916      	ldr	r1, [pc, #88]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	490e      	ldr	r1, [pc, #56]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e76:	f000 f821 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 faf4 	bl	8005484 <HAL_InitTick>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08006248 	.word	0x08006248
 8001eb4:	20000068 	.word	0x20000068
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d007      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x32>
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d008      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x38>
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 80b4 	bne.w	8002050 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001eea:	60bb      	str	r3, [r7, #8]
       break;
 8001eec:	e0b3      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eee:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ef0:	60bb      	str	r3, [r7, #8]
      break;
 8001ef2:	e0b0      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef4:	4b5a      	ldr	r3, [pc, #360]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001efc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d04a      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0a:	4b55      	ldr	r3, [pc, #340]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	099b      	lsrs	r3, r3, #6
 8001f10:	f04f 0400 	mov.w	r4, #0
 8001f14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	ea03 0501 	and.w	r5, r3, r1
 8001f20:	ea04 0602 	and.w	r6, r4, r2
 8001f24:	4629      	mov	r1, r5
 8001f26:	4632      	mov	r2, r6
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	f04f 0400 	mov.w	r4, #0
 8001f30:	0154      	lsls	r4, r2, #5
 8001f32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f36:	014b      	lsls	r3, r1, #5
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	1b49      	subs	r1, r1, r5
 8001f3e:	eb62 0206 	sbc.w	r2, r2, r6
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	f04f 0400 	mov.w	r4, #0
 8001f4a:	0194      	lsls	r4, r2, #6
 8001f4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f50:	018b      	lsls	r3, r1, #6
 8001f52:	1a5b      	subs	r3, r3, r1
 8001f54:	eb64 0402 	sbc.w	r4, r4, r2
 8001f58:	f04f 0100 	mov.w	r1, #0
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	00e2      	lsls	r2, r4, #3
 8001f62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f66:	00d9      	lsls	r1, r3, #3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4614      	mov	r4, r2
 8001f6c:	195b      	adds	r3, r3, r5
 8001f6e:	eb44 0406 	adc.w	r4, r4, r6
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	0262      	lsls	r2, r4, #9
 8001f7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f80:	0259      	lsls	r1, r3, #9
 8001f82:	460b      	mov	r3, r1
 8001f84:	4614      	mov	r4, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	4621      	mov	r1, r4
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f04f 0400 	mov.w	r4, #0
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	f7fe f97c 	bl	8000290 <__aeabi_uldivmod>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	e049      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	ea03 0501 	and.w	r5, r3, r1
 8001fb6:	ea04 0602 	and.w	r6, r4, r2
 8001fba:	4629      	mov	r1, r5
 8001fbc:	4632      	mov	r2, r6
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	f04f 0400 	mov.w	r4, #0
 8001fc6:	0154      	lsls	r4, r2, #5
 8001fc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fcc:	014b      	lsls	r3, r1, #5
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	1b49      	subs	r1, r1, r5
 8001fd4:	eb62 0206 	sbc.w	r2, r2, r6
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	0194      	lsls	r4, r2, #6
 8001fe2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fe6:	018b      	lsls	r3, r1, #6
 8001fe8:	1a5b      	subs	r3, r3, r1
 8001fea:	eb64 0402 	sbc.w	r4, r4, r2
 8001fee:	f04f 0100 	mov.w	r1, #0
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	00e2      	lsls	r2, r4, #3
 8001ff8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ffc:	00d9      	lsls	r1, r3, #3
 8001ffe:	460b      	mov	r3, r1
 8002000:	4614      	mov	r4, r2
 8002002:	195b      	adds	r3, r3, r5
 8002004:	eb44 0406 	adc.w	r4, r4, r6
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	02a2      	lsls	r2, r4, #10
 8002012:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002016:	0299      	lsls	r1, r3, #10
 8002018:	460b      	mov	r3, r1
 800201a:	4614      	mov	r4, r2
 800201c:	4618      	mov	r0, r3
 800201e:	4621      	mov	r1, r4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f04f 0400 	mov.w	r4, #0
 8002026:	461a      	mov	r2, r3
 8002028:	4623      	mov	r3, r4
 800202a:	f7fe f931 	bl	8000290 <__aeabi_uldivmod>
 800202e:	4603      	mov	r3, r0
 8002030:	460c      	mov	r4, r1
 8002032:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	3301      	adds	r3, #1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	60bb      	str	r3, [r7, #8]
      break;
 800204e:	e002      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002052:	60bb      	str	r3, [r7, #8]
      break;
 8002054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002056:	68bb      	ldr	r3, [r7, #8]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	00f42400 	.word	0x00f42400
 8002068:	007a1200 	.word	0x007a1200

0800206c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_RCC_GetHCLKFreq+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000068 	.word	0x20000068

08002084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002088:	f7ff fff0 	bl	800206c <HAL_RCC_GetHCLKFreq>
 800208c:	4601      	mov	r1, r0
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	0a9b      	lsrs	r3, r3, #10
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	08006258 	.word	0x08006258

080020ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020b0:	f7ff ffdc 	bl	800206c <HAL_RCC_GetHCLKFreq>
 80020b4:	4601      	mov	r1, r0
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0b5b      	lsrs	r3, r3, #13
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	08006258 	.word	0x08006258

080020d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	220f      	movs	r2, #15
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0203 	and.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCC_GetClockConfig+0x60>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 020f 	and.w	r2, r3, #15
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40023c00 	.word	0x40023c00

08002138 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800215c:	2b00      	cmp	r3, #0
 800215e:	d038      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002160:	4b68      	ldr	r3, [pc, #416]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002166:	f7fe fa49 	bl	80005fc <HAL_GetTick>
 800216a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800216e:	f7fe fa45 	bl	80005fc <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0bd      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002180:	4b61      	ldr	r3, [pc, #388]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	071b      	lsls	r3, r3, #28
 800219e:	495a      	ldr	r1, [pc, #360]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021a6:	4b57      	ldr	r3, [pc, #348]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fa26 	bl	80005fc <HAL_GetTick>
 80021b0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021b4:	f7fe fa22 	bl	80005fc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e09a      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021c6:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8083 	beq.w	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	4b48      	ldr	r3, [pc, #288]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4a47      	ldr	r2, [pc, #284]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
 80021f0:	4b45      	ldr	r3, [pc, #276]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021fc:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a42      	ldr	r2, [pc, #264]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002206:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002208:	f7fe f9f8 	bl	80005fc <HAL_GetTick>
 800220c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002210:	f7fe f9f4 	bl	80005fc <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e06c      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002222:	4b3a      	ldr	r3, [pc, #232]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800222e:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d02f      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	429a      	cmp	r2, r3
 800224a:	d028      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002254:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800225c:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002262:	4a29      	ldr	r2, [pc, #164]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d114      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002274:	f7fe f9c2 	bl	80005fc <HAL_GetTick>
 8002278:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227a:	e00a      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227c:	f7fe f9be 	bl	80005fc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e034      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ee      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022aa:	d10d      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	4911      	ldr	r1, [pc, #68]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
 80022c6:	e005      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022d2:	6093      	str	r3, [r2, #8]
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	4909      	ldr	r1, [pc, #36]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7d1a      	ldrb	r2, [r3, #20]
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80022f8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	42470068 	.word	0x42470068
 8002308:	40023800 	.word	0x40023800
 800230c:	40007000 	.word	0x40007000
 8002310:	42470e40 	.word	0x42470e40
 8002314:	424711e0 	.word	0x424711e0

08002318 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e083      	b.n	8002432 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7f5b      	ldrb	r3, [r3, #29]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f002 ff76 	bl	800522c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	22ca      	movs	r2, #202	; 0xca
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2253      	movs	r2, #83	; 0x53
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fb7a 	bl	8002a50 <RTC_EnterInitMode>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	22ff      	movs	r2, #255	; 0xff
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2204      	movs	r2, #4
 800236e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e05e      	b.n	8002432 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002386:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6899      	ldr	r1, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68d2      	ldr	r2, [r2, #12]
 80023ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6919      	ldr	r1, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	041a      	lsls	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10e      	bne.n	8002400 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fb0c 	bl	8002a00 <HAL_RTC_WaitForSynchro>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	22ff      	movs	r2, #255	; 0xff
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2204      	movs	r2, #4
 80023fa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e018      	b.n	8002432 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	22ff      	movs	r2, #255	; 0xff
 8002428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800243a:	b590      	push	{r4, r7, lr}
 800243c:	b087      	sub	sp, #28
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	7f1b      	ldrb	r3, [r3, #28]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_RTC_SetTime+0x1c>
 8002452:	2302      	movs	r3, #2
 8002454:	e0aa      	b.n	80025ac <HAL_RTC_SetTime+0x172>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2202      	movs	r2, #2
 8002460:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d126      	bne.n	80024b6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fb11 	bl	8002aa8 <RTC_ByteToBcd2>
 8002486:	4603      	mov	r3, r0
 8002488:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	785b      	ldrb	r3, [r3, #1]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fb0a 	bl	8002aa8 <RTC_ByteToBcd2>
 8002494:	4603      	mov	r3, r0
 8002496:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002498:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	789b      	ldrb	r3, [r3, #2]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fb02 	bl	8002aa8 <RTC_ByteToBcd2>
 80024a4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80024a6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	78db      	ldrb	r3, [r3, #3]
 80024ae:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e018      	b.n	80024e8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80024d6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80024dc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	22ca      	movs	r2, #202	; 0xca
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2253      	movs	r2, #83	; 0x53
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 faa9 	bl	8002a50 <RTC_EnterInitMode>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	22ff      	movs	r2, #255	; 0xff
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2204      	movs	r2, #4
 8002510:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e047      	b.n	80025ac <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002526:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800252a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800253a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6899      	ldr	r1, [r3, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	431a      	orrs	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002562:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d111      	bne.n	8002596 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fa44 	bl	8002a00 <HAL_RTC_WaitForSynchro>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2204      	movs	r2, #4
 800258a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e00a      	b.n	80025ac <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	22ff      	movs	r2, #255	; 0xff
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80025aa:	2300      	movs	r3, #0
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}

080025b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	7f1b      	ldrb	r3, [r3, #28]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_RTC_SetDate+0x1c>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e094      	b.n	80026fa <HAL_RTC_SetDate+0x146>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2202      	movs	r2, #2
 80025da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10e      	bne.n	8002600 <HAL_RTC_SetDate+0x4c>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	f023 0310 	bic.w	r3, r3, #16
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	330a      	adds	r3, #10
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11c      	bne.n	8002640 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	78db      	ldrb	r3, [r3, #3]
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fa4c 	bl	8002aa8 <RTC_ByteToBcd2>
 8002610:	4603      	mov	r3, r0
 8002612:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	785b      	ldrb	r3, [r3, #1]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fa45 	bl	8002aa8 <RTC_ByteToBcd2>
 800261e:	4603      	mov	r3, r0
 8002620:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002622:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	789b      	ldrb	r3, [r3, #2]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fa3d 	bl	8002aa8 <RTC_ByteToBcd2>
 800262e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002630:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e00e      	b.n	800265e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	78db      	ldrb	r3, [r3, #3]
 8002644:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	785b      	ldrb	r3, [r3, #1]
 800264a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800264c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002652:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	22ca      	movs	r2, #202	; 0xca
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2253      	movs	r2, #83	; 0x53
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f9ee 	bl	8002a50 <RTC_EnterInitMode>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	22ff      	movs	r2, #255	; 0xff
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2204      	movs	r2, #4
 8002686:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e033      	b.n	80026fa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800269c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80026a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d111      	bne.n	80026e4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f99d 	bl	8002a00 <HAL_RTC_WaitForSynchro>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	22ff      	movs	r2, #255	; 0xff
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2204      	movs	r2, #4
 80026d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e00a      	b.n	80026fa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	22ff      	movs	r2, #255	; 0xff
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
  }
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
	...

08002704 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002718:	4b93      	ldr	r3, [pc, #588]	; (8002968 <HAL_RTC_SetAlarm_IT+0x264>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a93      	ldr	r2, [pc, #588]	; (800296c <HAL_RTC_SetAlarm_IT+0x268>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	0adb      	lsrs	r3, r3, #11
 8002724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	7f1b      	ldrb	r3, [r3, #28]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_RTC_SetAlarm_IT+0x36>
 8002736:	2302      	movs	r3, #2
 8002738:	e111      	b.n	800295e <HAL_RTC_SetAlarm_IT+0x25a>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2202      	movs	r2, #2
 8002744:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d137      	bne.n	80027bc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f99f 	bl	8002aa8 <RTC_ByteToBcd2>
 800276a:	4603      	mov	r3, r0
 800276c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f998 	bl	8002aa8 <RTC_ByteToBcd2>
 8002778:	4603      	mov	r3, r0
 800277a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800277c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	789b      	ldrb	r3, [r3, #2]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f990 	bl	8002aa8 <RTC_ByteToBcd2>
 8002788:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800278a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	78db      	ldrb	r3, [r3, #3]
 8002792:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002794:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f982 	bl	8002aa8 <RTC_ByteToBcd2>
 80027a4:	4603      	mov	r3, r0
 80027a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027a8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e023      	b.n	8002804 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	785b      	ldrb	r3, [r3, #1]
 80027da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80027dc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80027e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	78db      	ldrb	r3, [r3, #3]
 80027e8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80027ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002800:	4313      	orrs	r3, r2
 8002802:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	22ca      	movs	r2, #202	; 0xca
 8002816:	625a      	str	r2, [r3, #36]	; 0x24
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2253      	movs	r2, #83	; 0x53
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002828:	d141      	bne.n	80028ae <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002838:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800284a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	1e5a      	subs	r2, r3, #1
 8002850:	617a      	str	r2, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10b      	bne.n	800286e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	22ff      	movs	r2, #255	; 0xff
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2203      	movs	r2, #3
 8002862:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e077      	b.n	800295e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0e7      	beq.n	800284c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	e040      	b.n	8002930 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028bc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 80028ce:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	1e5a      	subs	r2, r3, #1
 80028d4:	617a      	str	r2, [r7, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10b      	bne.n	80028f2 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	22ff      	movs	r2, #255	; 0xff
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2203      	movs	r2, #3
 80028e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e035      	b.n	800295e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0e7      	beq.n	80028d0 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800292e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_RTC_SetAlarm_IT+0x26c>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002946:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	bf00      	nop
 8002968:	20000068 	.word	0x20000068
 800296c:	10624dd3 	.word	0x10624dd3
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f002 fbb5 	bl	8005108 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80029ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d012      	beq.n	80029e4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8e4 	bl	8002b9a <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f462 7220 	orn	r2, r2, #640	; 0x280
 80029e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RTC_AlarmIRQHandler+0x88>)
 80029e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ea:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	775a      	strb	r2, [r3, #29]
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7fd fdee 	bl	80005fc <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a22:	e009      	b.n	8002a38 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a24:	f7fd fdea 	bl	80005fc <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a32:	d901      	bls.n	8002a38 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e007      	b.n	8002a48 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0ee      	beq.n	8002a24 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d119      	bne.n	8002a9e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fd fdc2 	bl	80005fc <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a7a:	e009      	b.n	8002a90 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a7c:	f7fd fdbe 	bl	80005fc <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a8a:	d901      	bls.n	8002a90 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e007      	b.n	8002aa0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0ee      	beq.n	8002a7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002ab6:	e005      	b.n	8002ac4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3301      	adds	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	3b0a      	subs	r3, #10
 8002ac2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	2b09      	cmp	r3, #9
 8002ac8:	d8f6      	bhi.n	8002ab8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b2db      	uxtb	r3, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmouthCalibMinusPulsesValue must be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmouthCalibMinusPulsesValue)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmouthCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	7f1b      	ldrb	r3, [r3, #28]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_RTCEx_SetSmoothCalib+0x1e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e047      	b.n	8002b92 <HAL_RTCEx_SetSmoothCalib+0xae>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	22ca      	movs	r2, #202	; 0xca
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2253      	movs	r2, #83	; 0x53
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01e      	beq.n	8002b6a <HAL_RTCEx_SetSmoothCalib+0x86>
  {
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7fd fd66 	bl	80005fc <HAL_GetTick>
 8002b30:	6178      	str	r0, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8002b32:	e013      	b.n	8002b5c <HAL_RTCEx_SetSmoothCalib+0x78>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b34:	f7fd fd62 	bl	80005fc <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b42:	d90b      	bls.n	8002b5c <HAL_RTCEx_SetSmoothCalib+0x78>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e01a      	b.n	8002b92 <HAL_RTCEx_SetSmoothCalib+0xae>
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e4      	bne.n	8002b34 <HAL_RTCEx_SetSmoothCalib+0x50>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmouthCalibMinusPulsesValue);
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	ea42 0103 	orr.w	r1, r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	22ff      	movs	r2, #255	; 0xff
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e01d      	b.n	8002bfc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f002 fb45 	bl	8005264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3304      	adds	r3, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4610      	mov	r0, r2
 8002bee:	f000 fb8f 	bl	8003310 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d007      	beq.n	8002c3e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e01d      	b.n	8002c9a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f815 	bl	8002ca2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f000 fb40 	bl	8003310 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fdc6 	bl	800385c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <HAL_TIM_PWM_Start+0x60>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d107      	bne.n	8002cea <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b06      	cmp	r3, #6
 8002cfa:	d007      	beq.n	8002d0c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40010000 	.word	0x40010000

08002d1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	6839      	ldr	r1, [r7, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fd94 	bl	800385c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <HAL_TIM_PWM_Stop+0x94>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d117      	bne.n	8002d6e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_TIM_PWM_Stop+0x52>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	f240 4344 	movw	r3, #1092	; 0x444
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <HAL_TIM_PWM_Stop+0x52>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <HAL_TIM_PWM_Stop+0x82>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a1a      	ldr	r2, [r3, #32]
 8002d84:	f240 4344 	movw	r3, #1092	; 0x444
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d107      	bne.n	8002d9e <HAL_TIM_PWM_Stop+0x82>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40010000 	.word	0x40010000

08002db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d122      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0202 	mvn.w	r2, #2
 8002de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa6b 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa5d 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fa6e 	bl	80032e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0204 	mvn.w	r2, #4
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa41 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa33 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fa44 	bl	80032e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d122      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0208 	mvn.w	r2, #8
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa17 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa09 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fa1a 	bl	80032e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d122      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d11b      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0210 	mvn.w	r2, #16
 8002edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9ed 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002ef8:	e005      	b.n	8002f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f9df 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f9f0 	bl	80032e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0201 	mvn.w	r2, #1
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f002 f916 	bl	8005164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b80      	cmp	r3, #128	; 0x80
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d107      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fd1a 	bl	8003998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d107      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f9b5 	bl	80032fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d107      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0220 	mvn.w	r2, #32
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fce4 	bl	8003984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0b4      	b.n	8003148 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	f200 809f 	bhi.w	8003134 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003031 	.word	0x08003031
 8003000:	08003135 	.word	0x08003135
 8003004:	08003135 	.word	0x08003135
 8003008:	08003135 	.word	0x08003135
 800300c:	08003071 	.word	0x08003071
 8003010:	08003135 	.word	0x08003135
 8003014:	08003135 	.word	0x08003135
 8003018:	08003135 	.word	0x08003135
 800301c:	080030b3 	.word	0x080030b3
 8003020:	08003135 	.word	0x08003135
 8003024:	08003135 	.word	0x08003135
 8003028:	08003135 	.word	0x08003135
 800302c:	080030f3 	.word	0x080030f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f9ea 	bl	8003410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0208 	orr.w	r2, r2, #8
 800304a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0204 	bic.w	r2, r2, #4
 800305a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6999      	ldr	r1, [r3, #24]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	619a      	str	r2, [r3, #24]
      break;
 800306e:	e062      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fa30 	bl	80034dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800308a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	021a      	lsls	r2, r3, #8
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	619a      	str	r2, [r3, #24]
      break;
 80030b0:	e041      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fa7b 	bl	80035b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0208 	orr.w	r2, r2, #8
 80030cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69da      	ldr	r2, [r3, #28]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0204 	bic.w	r2, r2, #4
 80030dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69d9      	ldr	r1, [r3, #28]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	61da      	str	r2, [r3, #28]
      break;
 80030f0:	e021      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fac5 	bl	8003688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800310c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69d9      	ldr	r1, [r3, #28]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	021a      	lsls	r2, r3, #8
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	61da      	str	r2, [r3, #28]
      break;
 8003132:	e000      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003134:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_TIM_ConfigClockSource+0x18>
 8003164:	2302      	movs	r3, #2
 8003166:	e0a6      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x166>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800318e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d067      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x120>
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d80b      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x6c>
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d073      	beq.n	8003290 <HAL_TIM_ConfigClockSource+0x140>
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d802      	bhi.n	80031b2 <HAL_TIM_ConfigClockSource+0x62>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d06f      	beq.n	8003290 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80031b0:	e078      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d06c      	beq.n	8003290 <HAL_TIM_ConfigClockSource+0x140>
 80031b6:	2b30      	cmp	r3, #48	; 0x30
 80031b8:	d06a      	beq.n	8003290 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80031ba:	e073      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031bc:	2b70      	cmp	r3, #112	; 0x70
 80031be:	d00d      	beq.n	80031dc <HAL_TIM_ConfigClockSource+0x8c>
 80031c0:	2b70      	cmp	r3, #112	; 0x70
 80031c2:	d804      	bhi.n	80031ce <HAL_TIM_ConfigClockSource+0x7e>
 80031c4:	2b50      	cmp	r3, #80	; 0x50
 80031c6:	d033      	beq.n	8003230 <HAL_TIM_ConfigClockSource+0xe0>
 80031c8:	2b60      	cmp	r3, #96	; 0x60
 80031ca:	d041      	beq.n	8003250 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031cc:	e06a      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d2:	d066      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x152>
 80031d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d8:	d017      	beq.n	800320a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80031da:	e063      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6899      	ldr	r1, [r3, #8]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f000 fb16 	bl	800381c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	609a      	str	r2, [r3, #8]
      break;
 8003208:	e04c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6899      	ldr	r1, [r3, #8]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f000 faff 	bl	800381c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800322c:	609a      	str	r2, [r3, #8]
      break;
 800322e:	e039      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	461a      	mov	r2, r3
 800323e:	f000 fa73 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2150      	movs	r1, #80	; 0x50
 8003248:	4618      	mov	r0, r3
 800324a:	f000 facc 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 800324e:	e029      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	461a      	mov	r2, r3
 800325e:	f000 fa92 	bl	8003786 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2160      	movs	r1, #96	; 0x60
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fabc 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 800326e:	e019      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	461a      	mov	r2, r3
 800327e:	f000 fa53 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2140      	movs	r1, #64	; 0x40
 8003288:	4618      	mov	r0, r3
 800328a:	f000 faac 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 800328e:	e009      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f000 faa3 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 80032a0:	e000      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80032a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a34      	ldr	r2, [pc, #208]	; (80033f4 <TIM_Base_SetConfig+0xe4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <TIM_Base_SetConfig+0xe8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a30      	ldr	r2, [pc, #192]	; (80033fc <TIM_Base_SetConfig+0xec>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <TIM_Base_SetConfig+0xf0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d108      	bne.n	800335a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <TIM_Base_SetConfig+0xe4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01b      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d017      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <TIM_Base_SetConfig+0xe8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a21      	ldr	r2, [pc, #132]	; (80033fc <TIM_Base_SetConfig+0xec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00f      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a20      	ldr	r2, [pc, #128]	; (8003400 <TIM_Base_SetConfig+0xf0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <TIM_Base_SetConfig+0xf4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <TIM_Base_SetConfig+0xf8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1d      	ldr	r2, [pc, #116]	; (800340c <TIM_Base_SetConfig+0xfc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <TIM_Base_SetConfig+0xe4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800
 8003400:	40000c00 	.word	0x40000c00
 8003404:	40014000 	.word	0x40014000
 8003408:	40014400 	.word	0x40014400
 800340c:	40014800 	.word	0x40014800

08003410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f023 0302 	bic.w	r3, r3, #2
 8003458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <TIM_OC1_SetConfig+0xc8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10c      	bne.n	8003486 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0308 	bic.w	r3, r3, #8
 8003472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <TIM_OC1_SetConfig+0xc8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d111      	bne.n	80034b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	621a      	str	r2, [r3, #32]
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40010000 	.word	0x40010000

080034dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f023 0210 	bic.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 0320 	bic.w	r3, r3, #32
 8003526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <TIM_OC2_SetConfig+0xd4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d10d      	bne.n	8003558 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a15      	ldr	r2, [pc, #84]	; (80035b0 <TIM_OC2_SetConfig+0xd4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d113      	bne.n	8003588 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800356e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40010000 	.word	0x40010000

080035b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <TIM_OC3_SetConfig+0xd0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10d      	bne.n	800362e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800362c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <TIM_OC3_SetConfig+0xd0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d113      	bne.n	800365e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800363c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40010000 	.word	0x40010000

08003688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	031b      	lsls	r3, r3, #12
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a10      	ldr	r2, [pc, #64]	; (8003724 <TIM_OC4_SetConfig+0x9c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d109      	bne.n	80036fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40010000 	.word	0x40010000

08003728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0201 	bic.w	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 030a 	bic.w	r3, r3, #10
 8003764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003786:	b480      	push	{r7}
 8003788:	b087      	sub	sp, #28
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f023 0210 	bic.w	r2, r3, #16
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	031b      	lsls	r3, r3, #12
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	621a      	str	r2, [r3, #32]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	f043 0307 	orr.w	r3, r3, #7
 8003808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	431a      	orrs	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	2201      	movs	r2, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a1a      	ldr	r2, [r3, #32]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	43db      	mvns	r3, r3
 800387e:	401a      	ands	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038bc:	2302      	movs	r3, #2
 80038be:	e050      	b.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390c:	d013      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a16      	ldr	r2, [pc, #88]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a15      	ldr	r2, [pc, #84]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a13      	ldr	r2, [pc, #76]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10c      	bne.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4313      	orrs	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40010000 	.word	0x40010000
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	40014000 	.word	0x40014000

08003984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e03f      	b.n	8003a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f001 fca2 	bl	800531c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2224      	movs	r2, #36	; 0x24
 80039dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fc2d 	bl	8004250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d153      	bne.n	8003b0a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_UART_Transmit_DMA+0x26>
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e04c      	b.n	8003b0c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Transmit_DMA+0x38>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e045      	b.n	8003b0c <HAL_UART_Transmit_DMA+0xc4>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	88fa      	ldrh	r2, [r7, #6]
 8003a92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2221      	movs	r2, #33	; 0x21
 8003aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_UART_Transmit_DMA+0xcc>)
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_UART_Transmit_DMA+0xd0>)
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_UART_Transmit_DMA+0xd4>)
 8003abe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003ac8:	f107 0308 	add.w	r3, r7, #8
 8003acc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3304      	adds	r3, #4
 8003adc:	461a      	mov	r2, r3
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	f7fc ff78 	bl	80009d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b04:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e000      	b.n	8003b0c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
  }
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	08003e5d 	.word	0x08003e5d
 8003b18:	08003eaf 	.word	0x08003eaf
 8003b1c:	08003f4f 	.word	0x08003f4f

08003b20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d166      	bne.n	8003c08 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_UART_Receive_DMA+0x26>
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e05f      	b.n	8003c0a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Receive_DMA+0x38>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e058      	b.n	8003c0a <HAL_UART_Receive_DMA+0xea>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2222      	movs	r2, #34	; 0x22
 8003b76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <HAL_UART_Receive_DMA+0xf4>)
 8003b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <HAL_UART_Receive_DMA+0xf8>)
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <HAL_UART_Receive_DMA+0xfc>)
 8003b90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	2200      	movs	r2, #0
 8003b98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	f7fc ff0f 	bl	80009d4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c02:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	08003ecb 	.word	0x08003ecb
 8003c18:	08003f33 	.word	0x08003f33
 8003c1c:	08003f4f 	.word	0x08003f4f

08003c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_UART_IRQHandler+0x52>
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa6f 	bl	800414e <UART_Receive_IT>
      return;
 8003c70:	e0d1      	b.n	8003e16 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80b0 	beq.w	8003dda <HAL_UART_IRQHandler+0x1ba>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_UART_IRQHandler+0x70>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80a5 	beq.w	8003dda <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x90>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca8:	f043 0201 	orr.w	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_UART_IRQHandler+0xb0>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	f043 0202 	orr.w	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xd0>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	f043 0204 	orr.w	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00f      	beq.n	8003d1a <HAL_UART_IRQHandler+0xfa>
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <HAL_UART_IRQHandler+0xee>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	f043 0208 	orr.w	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d078      	beq.n	8003e14 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <HAL_UART_IRQHandler+0x11c>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa09 	bl	800414e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b40      	cmp	r3, #64	; 0x40
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <HAL_UART_IRQHandler+0x144>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d031      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f952 	bl	800400e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d123      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d86:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <HAL_UART_IRQHandler+0x1fc>)
 8003d96:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fe71 	bl	8000a84 <HAL_DMA_Abort_IT>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003db2:	4610      	mov	r0, r2
 8003db4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db6:	e00e      	b.n	8003dd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f845 	bl	8003e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f841 	bl	8003e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc6:	e006      	b.n	8003dd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f83d 	bl	8003e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003dd4:	e01e      	b.n	8003e14 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd6:	bf00      	nop
    return;
 8003dd8:	e01c      	b.n	8003e14 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_UART_IRQHandler+0x1d6>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f93f 	bl	8004072 <UART_Transmit_IT>
    return;
 8003df4:	e00f      	b.n	8003e16 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_UART_IRQHandler+0x1f6>
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f987 	bl	800411e <UART_EndTransmit_IT>
    return;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003e14:	bf00      	nop
  }
}
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	0800404b 	.word	0x0800404b

08003e20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d113      	bne.n	8003ea0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e8c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e9c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e9e:	e002      	b.n	8003ea6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 ffc7 	bl	8004e34 <HAL_UART_TxCpltCallback>
}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff ffaf 	bl	8003e20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11e      	bne.n	8003f24 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003efa:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 ff8f 	bl	8004e48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff ff77 	bl	8003e34 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b80      	cmp	r3, #128	; 0x80
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b21      	cmp	r3, #33	; 0x21
 8003f80:	d108      	bne.n	8003f94 <UART_DMAError+0x46>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f8e:	68b8      	ldr	r0, [r7, #8]
 8003f90:	f000 f827 	bl	8003fe2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9e:	2b40      	cmp	r3, #64	; 0x40
 8003fa0:	bf0c      	ite	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	2300      	movne	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b22      	cmp	r3, #34	; 0x22
 8003fb4:	d108      	bne.n	8003fc8 <UART_DMAError+0x7a>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003fc2:	68b8      	ldr	r0, [r7, #8]
 8003fc4:	f000 f823 	bl	800400e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	f043 0210 	orr.w	r2, r3, #16
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	f7ff ff37 	bl	8003e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ff8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004024:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7ff feef 	bl	8003e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b21      	cmp	r3, #33	; 0x21
 8004084:	d144      	bne.n	8004110 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	d11a      	bne.n	80040c6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	1c9a      	adds	r2, r3, #2
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	621a      	str	r2, [r3, #32]
 80040b8:	e00e      	b.n	80040d8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	621a      	str	r2, [r3, #32]
 80040c4:	e008      	b.n	80040d8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	1c59      	adds	r1, r3, #1
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6211      	str	r1, [r2, #32]
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4619      	mov	r1, r3
 80040e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10f      	bne.n	800410c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004134:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fe78 	bl	8004e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b22      	cmp	r3, #34	; 0x22
 8004160:	d171      	bne.n	8004246 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	d123      	bne.n	80041b4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10e      	bne.n	8004198 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	629a      	str	r2, [r3, #40]	; 0x28
 8004196:	e029      	b.n	80041ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28
 80041b2:	e01b      	b.n	80041ec <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6858      	ldr	r0, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	1c59      	adds	r1, r3, #1
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6291      	str	r1, [r2, #40]	; 0x28
 80041cc:	b2c2      	uxtb	r2, r0
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e00c      	b.n	80041ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	1c58      	adds	r0, r3, #1
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	6288      	str	r0, [r1, #40]	; 0x28
 80041e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4619      	mov	r1, r3
 80041fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d120      	bne.n	8004242 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0220 	bic.w	r2, r2, #32
 800420e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800421e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fe05 	bl	8004e48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e002      	b.n	8004248 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
  }
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004292:	f023 030c 	bic.w	r3, r3, #12
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	430b      	orrs	r3, r1
 800429e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042be:	f040 818b 	bne.w	80045d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4ac1      	ldr	r2, [pc, #772]	; (80045cc <UART_SetConfig+0x37c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d005      	beq.n	80042d8 <UART_SetConfig+0x88>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4abf      	ldr	r2, [pc, #764]	; (80045d0 <UART_SetConfig+0x380>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f040 80bd 	bne.w	8004452 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042d8:	f7fd fee8 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 80042dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	461d      	mov	r5, r3
 80042e2:	f04f 0600 	mov.w	r6, #0
 80042e6:	46a8      	mov	r8, r5
 80042e8:	46b1      	mov	r9, r6
 80042ea:	eb18 0308 	adds.w	r3, r8, r8
 80042ee:	eb49 0409 	adc.w	r4, r9, r9
 80042f2:	4698      	mov	r8, r3
 80042f4:	46a1      	mov	r9, r4
 80042f6:	eb18 0805 	adds.w	r8, r8, r5
 80042fa:	eb49 0906 	adc.w	r9, r9, r6
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800430a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800430e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004312:	4688      	mov	r8, r1
 8004314:	4691      	mov	r9, r2
 8004316:	eb18 0005 	adds.w	r0, r8, r5
 800431a:	eb49 0106 	adc.w	r1, r9, r6
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	461d      	mov	r5, r3
 8004324:	f04f 0600 	mov.w	r6, #0
 8004328:	196b      	adds	r3, r5, r5
 800432a:	eb46 0406 	adc.w	r4, r6, r6
 800432e:	461a      	mov	r2, r3
 8004330:	4623      	mov	r3, r4
 8004332:	f7fb ffad 	bl	8000290 <__aeabi_uldivmod>
 8004336:	4603      	mov	r3, r0
 8004338:	460c      	mov	r4, r1
 800433a:	461a      	mov	r2, r3
 800433c:	4ba5      	ldr	r3, [pc, #660]	; (80045d4 <UART_SetConfig+0x384>)
 800433e:	fba3 2302 	umull	r2, r3, r3, r2
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	461d      	mov	r5, r3
 800434c:	f04f 0600 	mov.w	r6, #0
 8004350:	46a9      	mov	r9, r5
 8004352:	46b2      	mov	sl, r6
 8004354:	eb19 0309 	adds.w	r3, r9, r9
 8004358:	eb4a 040a 	adc.w	r4, sl, sl
 800435c:	4699      	mov	r9, r3
 800435e:	46a2      	mov	sl, r4
 8004360:	eb19 0905 	adds.w	r9, r9, r5
 8004364:	eb4a 0a06 	adc.w	sl, sl, r6
 8004368:	f04f 0100 	mov.w	r1, #0
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004374:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004378:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800437c:	4689      	mov	r9, r1
 800437e:	4692      	mov	sl, r2
 8004380:	eb19 0005 	adds.w	r0, r9, r5
 8004384:	eb4a 0106 	adc.w	r1, sl, r6
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	461d      	mov	r5, r3
 800438e:	f04f 0600 	mov.w	r6, #0
 8004392:	196b      	adds	r3, r5, r5
 8004394:	eb46 0406 	adc.w	r4, r6, r6
 8004398:	461a      	mov	r2, r3
 800439a:	4623      	mov	r3, r4
 800439c:	f7fb ff78 	bl	8000290 <__aeabi_uldivmod>
 80043a0:	4603      	mov	r3, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	461a      	mov	r2, r3
 80043a6:	4b8b      	ldr	r3, [pc, #556]	; (80045d4 <UART_SetConfig+0x384>)
 80043a8:	fba3 1302 	umull	r1, r3, r3, r2
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	2164      	movs	r1, #100	; 0x64
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	3332      	adds	r3, #50	; 0x32
 80043ba:	4a86      	ldr	r2, [pc, #536]	; (80045d4 <UART_SetConfig+0x384>)
 80043bc:	fba2 2303 	umull	r2, r3, r2, r3
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043c8:	4498      	add	r8, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	461d      	mov	r5, r3
 80043ce:	f04f 0600 	mov.w	r6, #0
 80043d2:	46a9      	mov	r9, r5
 80043d4:	46b2      	mov	sl, r6
 80043d6:	eb19 0309 	adds.w	r3, r9, r9
 80043da:	eb4a 040a 	adc.w	r4, sl, sl
 80043de:	4699      	mov	r9, r3
 80043e0:	46a2      	mov	sl, r4
 80043e2:	eb19 0905 	adds.w	r9, r9, r5
 80043e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043fe:	4689      	mov	r9, r1
 8004400:	4692      	mov	sl, r2
 8004402:	eb19 0005 	adds.w	r0, r9, r5
 8004406:	eb4a 0106 	adc.w	r1, sl, r6
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	461d      	mov	r5, r3
 8004410:	f04f 0600 	mov.w	r6, #0
 8004414:	196b      	adds	r3, r5, r5
 8004416:	eb46 0406 	adc.w	r4, r6, r6
 800441a:	461a      	mov	r2, r3
 800441c:	4623      	mov	r3, r4
 800441e:	f7fb ff37 	bl	8000290 <__aeabi_uldivmod>
 8004422:	4603      	mov	r3, r0
 8004424:	460c      	mov	r4, r1
 8004426:	461a      	mov	r2, r3
 8004428:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <UART_SetConfig+0x384>)
 800442a:	fba3 1302 	umull	r1, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	2164      	movs	r1, #100	; 0x64
 8004432:	fb01 f303 	mul.w	r3, r1, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	3332      	adds	r3, #50	; 0x32
 800443c:	4a65      	ldr	r2, [pc, #404]	; (80045d4 <UART_SetConfig+0x384>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	f003 0207 	and.w	r2, r3, #7
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4442      	add	r2, r8
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	e26f      	b.n	8004932 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004452:	f7fd fe17 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 8004456:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	461d      	mov	r5, r3
 800445c:	f04f 0600 	mov.w	r6, #0
 8004460:	46a8      	mov	r8, r5
 8004462:	46b1      	mov	r9, r6
 8004464:	eb18 0308 	adds.w	r3, r8, r8
 8004468:	eb49 0409 	adc.w	r4, r9, r9
 800446c:	4698      	mov	r8, r3
 800446e:	46a1      	mov	r9, r4
 8004470:	eb18 0805 	adds.w	r8, r8, r5
 8004474:	eb49 0906 	adc.w	r9, r9, r6
 8004478:	f04f 0100 	mov.w	r1, #0
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004484:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004488:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800448c:	4688      	mov	r8, r1
 800448e:	4691      	mov	r9, r2
 8004490:	eb18 0005 	adds.w	r0, r8, r5
 8004494:	eb49 0106 	adc.w	r1, r9, r6
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	461d      	mov	r5, r3
 800449e:	f04f 0600 	mov.w	r6, #0
 80044a2:	196b      	adds	r3, r5, r5
 80044a4:	eb46 0406 	adc.w	r4, r6, r6
 80044a8:	461a      	mov	r2, r3
 80044aa:	4623      	mov	r3, r4
 80044ac:	f7fb fef0 	bl	8000290 <__aeabi_uldivmod>
 80044b0:	4603      	mov	r3, r0
 80044b2:	460c      	mov	r4, r1
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <UART_SetConfig+0x384>)
 80044b8:	fba3 2302 	umull	r2, r3, r3, r2
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	461d      	mov	r5, r3
 80044c6:	f04f 0600 	mov.w	r6, #0
 80044ca:	46a9      	mov	r9, r5
 80044cc:	46b2      	mov	sl, r6
 80044ce:	eb19 0309 	adds.w	r3, r9, r9
 80044d2:	eb4a 040a 	adc.w	r4, sl, sl
 80044d6:	4699      	mov	r9, r3
 80044d8:	46a2      	mov	sl, r4
 80044da:	eb19 0905 	adds.w	r9, r9, r5
 80044de:	eb4a 0a06 	adc.w	sl, sl, r6
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044f6:	4689      	mov	r9, r1
 80044f8:	4692      	mov	sl, r2
 80044fa:	eb19 0005 	adds.w	r0, r9, r5
 80044fe:	eb4a 0106 	adc.w	r1, sl, r6
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	461d      	mov	r5, r3
 8004508:	f04f 0600 	mov.w	r6, #0
 800450c:	196b      	adds	r3, r5, r5
 800450e:	eb46 0406 	adc.w	r4, r6, r6
 8004512:	461a      	mov	r2, r3
 8004514:	4623      	mov	r3, r4
 8004516:	f7fb febb 	bl	8000290 <__aeabi_uldivmod>
 800451a:	4603      	mov	r3, r0
 800451c:	460c      	mov	r4, r1
 800451e:	461a      	mov	r2, r3
 8004520:	4b2c      	ldr	r3, [pc, #176]	; (80045d4 <UART_SetConfig+0x384>)
 8004522:	fba3 1302 	umull	r1, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2164      	movs	r1, #100	; 0x64
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	3332      	adds	r3, #50	; 0x32
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <UART_SetConfig+0x384>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004542:	4498      	add	r8, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	461d      	mov	r5, r3
 8004548:	f04f 0600 	mov.w	r6, #0
 800454c:	46a9      	mov	r9, r5
 800454e:	46b2      	mov	sl, r6
 8004550:	eb19 0309 	adds.w	r3, r9, r9
 8004554:	eb4a 040a 	adc.w	r4, sl, sl
 8004558:	4699      	mov	r9, r3
 800455a:	46a2      	mov	sl, r4
 800455c:	eb19 0905 	adds.w	r9, r9, r5
 8004560:	eb4a 0a06 	adc.w	sl, sl, r6
 8004564:	f04f 0100 	mov.w	r1, #0
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004578:	4689      	mov	r9, r1
 800457a:	4692      	mov	sl, r2
 800457c:	eb19 0005 	adds.w	r0, r9, r5
 8004580:	eb4a 0106 	adc.w	r1, sl, r6
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	461d      	mov	r5, r3
 800458a:	f04f 0600 	mov.w	r6, #0
 800458e:	196b      	adds	r3, r5, r5
 8004590:	eb46 0406 	adc.w	r4, r6, r6
 8004594:	461a      	mov	r2, r3
 8004596:	4623      	mov	r3, r4
 8004598:	f7fb fe7a 	bl	8000290 <__aeabi_uldivmod>
 800459c:	4603      	mov	r3, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	461a      	mov	r2, r3
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <UART_SetConfig+0x384>)
 80045a4:	fba3 1302 	umull	r1, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	2164      	movs	r1, #100	; 0x64
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	3332      	adds	r3, #50	; 0x32
 80045b6:	4a07      	ldr	r2, [pc, #28]	; (80045d4 <UART_SetConfig+0x384>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	f003 0207 	and.w	r2, r3, #7
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4442      	add	r2, r8
 80045c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80045ca:	e1b2      	b.n	8004932 <UART_SetConfig+0x6e2>
 80045cc:	40011000 	.word	0x40011000
 80045d0:	40011400 	.word	0x40011400
 80045d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4ad7      	ldr	r2, [pc, #860]	; (800493c <UART_SetConfig+0x6ec>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d005      	beq.n	80045ee <UART_SetConfig+0x39e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4ad6      	ldr	r2, [pc, #856]	; (8004940 <UART_SetConfig+0x6f0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	f040 80d1 	bne.w	8004790 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80045ee:	f7fd fd5d 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 80045f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	469a      	mov	sl, r3
 80045f8:	f04f 0b00 	mov.w	fp, #0
 80045fc:	46d0      	mov	r8, sl
 80045fe:	46d9      	mov	r9, fp
 8004600:	eb18 0308 	adds.w	r3, r8, r8
 8004604:	eb49 0409 	adc.w	r4, r9, r9
 8004608:	4698      	mov	r8, r3
 800460a:	46a1      	mov	r9, r4
 800460c:	eb18 080a 	adds.w	r8, r8, sl
 8004610:	eb49 090b 	adc.w	r9, r9, fp
 8004614:	f04f 0100 	mov.w	r1, #0
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004620:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004624:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004628:	4688      	mov	r8, r1
 800462a:	4691      	mov	r9, r2
 800462c:	eb1a 0508 	adds.w	r5, sl, r8
 8004630:	eb4b 0609 	adc.w	r6, fp, r9
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4619      	mov	r1, r3
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	f04f 0400 	mov.w	r4, #0
 8004646:	0094      	lsls	r4, r2, #2
 8004648:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800464c:	008b      	lsls	r3, r1, #2
 800464e:	461a      	mov	r2, r3
 8004650:	4623      	mov	r3, r4
 8004652:	4628      	mov	r0, r5
 8004654:	4631      	mov	r1, r6
 8004656:	f7fb fe1b 	bl	8000290 <__aeabi_uldivmod>
 800465a:	4603      	mov	r3, r0
 800465c:	460c      	mov	r4, r1
 800465e:	461a      	mov	r2, r3
 8004660:	4bb8      	ldr	r3, [pc, #736]	; (8004944 <UART_SetConfig+0x6f4>)
 8004662:	fba3 2302 	umull	r2, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	469b      	mov	fp, r3
 8004670:	f04f 0c00 	mov.w	ip, #0
 8004674:	46d9      	mov	r9, fp
 8004676:	46e2      	mov	sl, ip
 8004678:	eb19 0309 	adds.w	r3, r9, r9
 800467c:	eb4a 040a 	adc.w	r4, sl, sl
 8004680:	4699      	mov	r9, r3
 8004682:	46a2      	mov	sl, r4
 8004684:	eb19 090b 	adds.w	r9, r9, fp
 8004688:	eb4a 0a0c 	adc.w	sl, sl, ip
 800468c:	f04f 0100 	mov.w	r1, #0
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004698:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800469c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046a0:	4689      	mov	r9, r1
 80046a2:	4692      	mov	sl, r2
 80046a4:	eb1b 0509 	adds.w	r5, fp, r9
 80046a8:	eb4c 060a 	adc.w	r6, ip, sl
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	4619      	mov	r1, r3
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	f04f 0400 	mov.w	r4, #0
 80046be:	0094      	lsls	r4, r2, #2
 80046c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046c4:	008b      	lsls	r3, r1, #2
 80046c6:	461a      	mov	r2, r3
 80046c8:	4623      	mov	r3, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	4631      	mov	r1, r6
 80046ce:	f7fb fddf 	bl	8000290 <__aeabi_uldivmod>
 80046d2:	4603      	mov	r3, r0
 80046d4:	460c      	mov	r4, r1
 80046d6:	461a      	mov	r2, r3
 80046d8:	4b9a      	ldr	r3, [pc, #616]	; (8004944 <UART_SetConfig+0x6f4>)
 80046da:	fba3 1302 	umull	r1, r3, r3, r2
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	2164      	movs	r1, #100	; 0x64
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	3332      	adds	r3, #50	; 0x32
 80046ec:	4a95      	ldr	r2, [pc, #596]	; (8004944 <UART_SetConfig+0x6f4>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f8:	4498      	add	r8, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	469b      	mov	fp, r3
 80046fe:	f04f 0c00 	mov.w	ip, #0
 8004702:	46d9      	mov	r9, fp
 8004704:	46e2      	mov	sl, ip
 8004706:	eb19 0309 	adds.w	r3, r9, r9
 800470a:	eb4a 040a 	adc.w	r4, sl, sl
 800470e:	4699      	mov	r9, r3
 8004710:	46a2      	mov	sl, r4
 8004712:	eb19 090b 	adds.w	r9, r9, fp
 8004716:	eb4a 0a0c 	adc.w	sl, sl, ip
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004726:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800472a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800472e:	4689      	mov	r9, r1
 8004730:	4692      	mov	sl, r2
 8004732:	eb1b 0509 	adds.w	r5, fp, r9
 8004736:	eb4c 060a 	adc.w	r6, ip, sl
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4619      	mov	r1, r3
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	0094      	lsls	r4, r2, #2
 800474e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004752:	008b      	lsls	r3, r1, #2
 8004754:	461a      	mov	r2, r3
 8004756:	4623      	mov	r3, r4
 8004758:	4628      	mov	r0, r5
 800475a:	4631      	mov	r1, r6
 800475c:	f7fb fd98 	bl	8000290 <__aeabi_uldivmod>
 8004760:	4603      	mov	r3, r0
 8004762:	460c      	mov	r4, r1
 8004764:	461a      	mov	r2, r3
 8004766:	4b77      	ldr	r3, [pc, #476]	; (8004944 <UART_SetConfig+0x6f4>)
 8004768:	fba3 1302 	umull	r1, r3, r3, r2
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	2164      	movs	r1, #100	; 0x64
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	3332      	adds	r3, #50	; 0x32
 800477a:	4a72      	ldr	r2, [pc, #456]	; (8004944 <UART_SetConfig+0x6f4>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	f003 020f 	and.w	r2, r3, #15
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4442      	add	r2, r8
 800478c:	609a      	str	r2, [r3, #8]
 800478e:	e0d0      	b.n	8004932 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004790:	f7fd fc78 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 8004794:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	469a      	mov	sl, r3
 800479a:	f04f 0b00 	mov.w	fp, #0
 800479e:	46d0      	mov	r8, sl
 80047a0:	46d9      	mov	r9, fp
 80047a2:	eb18 0308 	adds.w	r3, r8, r8
 80047a6:	eb49 0409 	adc.w	r4, r9, r9
 80047aa:	4698      	mov	r8, r3
 80047ac:	46a1      	mov	r9, r4
 80047ae:	eb18 080a 	adds.w	r8, r8, sl
 80047b2:	eb49 090b 	adc.w	r9, r9, fp
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047ca:	4688      	mov	r8, r1
 80047cc:	4691      	mov	r9, r2
 80047ce:	eb1a 0508 	adds.w	r5, sl, r8
 80047d2:	eb4b 0609 	adc.w	r6, fp, r9
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4619      	mov	r1, r3
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	f04f 0400 	mov.w	r4, #0
 80047e8:	0094      	lsls	r4, r2, #2
 80047ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047ee:	008b      	lsls	r3, r1, #2
 80047f0:	461a      	mov	r2, r3
 80047f2:	4623      	mov	r3, r4
 80047f4:	4628      	mov	r0, r5
 80047f6:	4631      	mov	r1, r6
 80047f8:	f7fb fd4a 	bl	8000290 <__aeabi_uldivmod>
 80047fc:	4603      	mov	r3, r0
 80047fe:	460c      	mov	r4, r1
 8004800:	461a      	mov	r2, r3
 8004802:	4b50      	ldr	r3, [pc, #320]	; (8004944 <UART_SetConfig+0x6f4>)
 8004804:	fba3 2302 	umull	r2, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	469b      	mov	fp, r3
 8004812:	f04f 0c00 	mov.w	ip, #0
 8004816:	46d9      	mov	r9, fp
 8004818:	46e2      	mov	sl, ip
 800481a:	eb19 0309 	adds.w	r3, r9, r9
 800481e:	eb4a 040a 	adc.w	r4, sl, sl
 8004822:	4699      	mov	r9, r3
 8004824:	46a2      	mov	sl, r4
 8004826:	eb19 090b 	adds.w	r9, r9, fp
 800482a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800483a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800483e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004842:	4689      	mov	r9, r1
 8004844:	4692      	mov	sl, r2
 8004846:	eb1b 0509 	adds.w	r5, fp, r9
 800484a:	eb4c 060a 	adc.w	r6, ip, sl
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4619      	mov	r1, r3
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	f04f 0400 	mov.w	r4, #0
 8004860:	0094      	lsls	r4, r2, #2
 8004862:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004866:	008b      	lsls	r3, r1, #2
 8004868:	461a      	mov	r2, r3
 800486a:	4623      	mov	r3, r4
 800486c:	4628      	mov	r0, r5
 800486e:	4631      	mov	r1, r6
 8004870:	f7fb fd0e 	bl	8000290 <__aeabi_uldivmod>
 8004874:	4603      	mov	r3, r0
 8004876:	460c      	mov	r4, r1
 8004878:	461a      	mov	r2, r3
 800487a:	4b32      	ldr	r3, [pc, #200]	; (8004944 <UART_SetConfig+0x6f4>)
 800487c:	fba3 1302 	umull	r1, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	2164      	movs	r1, #100	; 0x64
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	3332      	adds	r3, #50	; 0x32
 800488e:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <UART_SetConfig+0x6f4>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800489a:	4498      	add	r8, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	469b      	mov	fp, r3
 80048a0:	f04f 0c00 	mov.w	ip, #0
 80048a4:	46d9      	mov	r9, fp
 80048a6:	46e2      	mov	sl, ip
 80048a8:	eb19 0309 	adds.w	r3, r9, r9
 80048ac:	eb4a 040a 	adc.w	r4, sl, sl
 80048b0:	4699      	mov	r9, r3
 80048b2:	46a2      	mov	sl, r4
 80048b4:	eb19 090b 	adds.w	r9, r9, fp
 80048b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048d0:	4689      	mov	r9, r1
 80048d2:	4692      	mov	sl, r2
 80048d4:	eb1b 0509 	adds.w	r5, fp, r9
 80048d8:	eb4c 060a 	adc.w	r6, ip, sl
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4619      	mov	r1, r3
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	f04f 0400 	mov.w	r4, #0
 80048ee:	0094      	lsls	r4, r2, #2
 80048f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048f4:	008b      	lsls	r3, r1, #2
 80048f6:	461a      	mov	r2, r3
 80048f8:	4623      	mov	r3, r4
 80048fa:	4628      	mov	r0, r5
 80048fc:	4631      	mov	r1, r6
 80048fe:	f7fb fcc7 	bl	8000290 <__aeabi_uldivmod>
 8004902:	4603      	mov	r3, r0
 8004904:	460c      	mov	r4, r1
 8004906:	461a      	mov	r2, r3
 8004908:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <UART_SetConfig+0x6f4>)
 800490a:	fba3 1302 	umull	r1, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2164      	movs	r1, #100	; 0x64
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	3332      	adds	r3, #50	; 0x32
 800491c:	4a09      	ldr	r2, [pc, #36]	; (8004944 <UART_SetConfig+0x6f4>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	f003 020f 	and.w	r2, r3, #15
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4442      	add	r2, r8
 800492e:	609a      	str	r2, [r3, #8]
}
 8004930:	e7ff      	b.n	8004932 <UART_SetConfig+0x6e2>
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493c:	40011000 	.word	0x40011000
 8004940:	40011400 	.word	0x40011400
 8004944:	51eb851f 	.word	0x51eb851f

08004948 <bufferInit>:
	uint8_t _p_tx_buffer[BUFFER_SIZE];
}s_Buff;

//void bufferInit(t_Buff buffer);

void bufferInit(s_Buff *buffer){
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e007      	b.n	8004966 <bufferInit+0x1e>
		buffer->_p_rx_buffer[i] = 0;
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b18      	cmp	r3, #24
 800496a:	ddf4      	ble.n	8004956 <bufferInit+0xe>
	}
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800497c:	f7fb fe08 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004980:	f000 f81c 	bl	80049bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004984:	f000 fa14 	bl	8004db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004988:	f000 f9ea 	bl	8004d60 <MX_DMA_Init>
  MX_CRC_Init();
 800498c:	f000 f89a 	bl	8004ac4 <MX_CRC_Init>
  MX_RTC_Init();
 8004990:	f000 f8ac 	bl	8004aec <MX_RTC_Init>
  MX_USART2_UART_Init();
 8004994:	f000 f9ba 	bl	8004d0c <MX_USART2_UART_Init>
  MX_TIM3_Init(); //PWM
 8004998:	f000 f942 	bl	8004c20 <MX_TIM3_Init>
#ifdef WWDG_ENABLE
  MX_WWDG_Init();
#endif
  /* USER CODE BEGIN 2 */
#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 800499c:	2201      	movs	r2, #1
 800499e:	4904      	ldr	r1, [pc, #16]	; (80049b0 <main+0x38>)
 80049a0:	4804      	ldr	r0, [pc, #16]	; (80049b4 <main+0x3c>)
 80049a2:	f7ff f8bd 	bl	8003b20 <HAL_UART_Receive_DMA>
  MY_FLASH_ReadN(0, myTestRead, 1, DATA_TYPE_32);
  sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)myTestRead[0]);
  uart_print((char*)s_buffer._p_tx_buffer);*/


  uart_print(HELLO_WORLD);
 80049a6:	4804      	ldr	r0, [pc, #16]	; (80049b8 <main+0x40>)
 80049a8:	f000 fbbc 	bl	8005124 <uart_print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80049ac:	e7fe      	b.n	80049ac <main+0x34>
 80049ae:	bf00      	nop
 80049b0:	20000302 	.word	0x20000302
 80049b4:	200003f8 	.word	0x200003f8
 80049b8:	0800620c 	.word	0x0800620c

080049bc <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b09a      	sub	sp, #104	; 0x68
 80049c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049c6:	2230      	movs	r2, #48	; 0x30
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 feb9 	bl	8005742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049e0:	f107 030c 	add.w	r3, r7, #12
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	611a      	str	r2, [r3, #16]
 80049f0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b31      	ldr	r3, [pc, #196]	; (8004abc <SystemClock_Config+0x100>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a30      	ldr	r2, [pc, #192]	; (8004abc <SystemClock_Config+0x100>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b2e      	ldr	r3, [pc, #184]	; (8004abc <SystemClock_Config+0x100>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <SystemClock_Config+0x104>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2a      	ldr	r2, [pc, #168]	; (8004ac0 <SystemClock_Config+0x104>)
 8004a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <SystemClock_Config+0x104>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a32:	2301      	movs	r3, #1
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a36:	2310      	movs	r3, #16
 8004a38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004a42:	2310      	movs	r3, #16
 8004a44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004a46:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004a50:	2304      	movs	r3, #4
 8004a52:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fc fed9 	bl	8001810 <HAL_RCC_OscConfig>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004a64:	f000 fb90 	bl	8005188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a68:	230f      	movs	r3, #15
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a70:	2300      	movs	r3, #0
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a82:	2102      	movs	r1, #2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fd f933 	bl	8001cf0 <HAL_RCC_ClockConfig>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004a90:	f000 fb7a 	bl	8005188 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a94:	2302      	movs	r3, #2
 8004a96:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a9c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a9e:	f107 030c 	add.w	r3, r7, #12
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd fb48 	bl	8002138 <HAL_RCCEx_PeriphCLKConfig>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8004aae:	f000 fb6b 	bl	8005188 <Error_Handler>
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	3768      	adds	r7, #104	; 0x68
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40007000 	.word	0x40007000

08004ac4 <MX_CRC_Init>:

static void MX_CRC_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <MX_CRC_Init+0x20>)
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <MX_CRC_Init+0x24>)
 8004acc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004ace:	4805      	ldr	r0, [pc, #20]	; (8004ae4 <MX_CRC_Init+0x20>)
 8004ad0:	f7fb fe82 	bl	80007d8 <HAL_CRC_Init>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8004ada:	f000 fb55 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000031c 	.word	0x2000031c
 8004ae8:	40023000 	.word	0x40023000

08004aec <MX_RTC_Init>:

static void MX_RTC_Init(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b090      	sub	sp, #64	; 0x40
 8004af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004b02:	2300      	movs	r3, #0
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004b06:	463b      	mov	r3, r7
 8004b08:	2228      	movs	r2, #40	; 0x28
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fe18 	bl	8005742 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004b14:	4a41      	ldr	r2, [pc, #260]	; (8004c1c <MX_RTC_Init+0x130>)
 8004b16:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004b18:	4b3f      	ldr	r3, [pc, #252]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004b1e:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004b20:	227f      	movs	r2, #127	; 0x7f
 8004b22:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004b24:	4b3c      	ldr	r3, [pc, #240]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004b26:	22ff      	movs	r2, #255	; 0xff
 8004b28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004b2a:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004b30:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004b36:	4b38      	ldr	r3, [pc, #224]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004b3c:	4836      	ldr	r0, [pc, #216]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004b3e:	f7fd fbeb 	bl	8002318 <HAL_RTC_Init>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8004b48:	f000 fb1e 	bl	8005188 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	482a      	ldr	r0, [pc, #168]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004b70:	f7fd fc63 	bl	800243a <HAL_RTC_SetTime>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8004b7a:	f000 fb05 	bl	8005188 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	481e      	ldr	r0, [pc, #120]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004ba0:	f7fd fd08 	bl	80025b4 <HAL_RTC_SetDate>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8004baa:	f000 faed 	bl	8005188 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8004bc6:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8004bca:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004be0:	463b      	mov	r3, r7
 8004be2:	2200      	movs	r2, #0
 8004be4:	4619      	mov	r1, r3
 8004be6:	480c      	ldr	r0, [pc, #48]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004be8:	f7fd fd8c 	bl	8002704 <HAL_RTC_SetAlarm_IT>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8004bf2:	f000 fac9 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
    if (HAL_RTCEx_SetSmoothCalib(
 8004bf6:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4806      	ldr	r0, [pc, #24]	; (8004c18 <MX_RTC_Init+0x12c>)
 8004c00:	f7fd ff70 	bl	8002ae4 <HAL_RTCEx_SetSmoothCalib>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <MX_RTC_Init+0x122>
		&hrtc,
		RTC_SMOOTHCALIB_PERIOD_32SEC,
		RTC_SMOOTHCALIB_PLUSPULSES_RESET,
		0x1FFU) != HAL_OK) {
    		Error_Handler();
 8004c0a:	f000 fabd 	bl	8005188 <Error_Handler>
      	}
  /* USER CODE END RTC_Init 2 */

}
 8004c0e:	bf00      	nop
 8004c10:	3740      	adds	r7, #64	; 0x40
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200003c4 	.word	0x200003c4
 8004c1c:	40002800 	.word	0x40002800

08004c20 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08e      	sub	sp, #56	; 0x38
 8004c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c34:	f107 0320 	add.w	r3, r7, #32
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
 8004c4c:	615a      	str	r2, [r3, #20]
 8004c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c50:	4b2c      	ldr	r3, [pc, #176]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004c52:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <MX_TIM3_Init+0xe8>)
 8004c54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8004c56:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004c58:	2253      	movs	r2, #83	; 0x53
 8004c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c5c:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8004c62:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004c64:	2263      	movs	r2, #99	; 0x63
 8004c66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c68:	4b26      	ldr	r3, [pc, #152]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c6e:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c74:	4823      	ldr	r0, [pc, #140]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004c76:	f7fd ff9a 	bl	8002bae <HAL_TIM_Base_Init>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8004c80:	f000 fa82 	bl	8005188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c8e:	4619      	mov	r1, r3
 8004c90:	481c      	ldr	r0, [pc, #112]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004c92:	f7fe fa5d 	bl	8003150 <HAL_TIM_ConfigClockSource>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8004c9c:	f000 fa74 	bl	8005188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004ca0:	4818      	ldr	r0, [pc, #96]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004ca2:	f7fd ffd3 	bl	8002c4c <HAL_TIM_PWM_Init>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004cac:	f000 fa6c 	bl	8005188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004cb8:	f107 0320 	add.w	r3, r7, #32
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4811      	ldr	r0, [pc, #68]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004cc0:	f7fe fdf2 	bl	80038a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8004cca:	f000 fa5d 	bl	8005188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cce:	2360      	movs	r3, #96	; 0x60
 8004cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cde:	1d3b      	adds	r3, r7, #4
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4807      	ldr	r0, [pc, #28]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004ce6:	f7fe f96d 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8004cf0:	f000 fa4a 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004cf4:	4803      	ldr	r0, [pc, #12]	; (8004d04 <MX_TIM3_Init+0xe4>)
 8004cf6:	f000 fad7 	bl	80052a8 <HAL_TIM_MspPostInit>

}
 8004cfa:	bf00      	nop
 8004cfc:	3738      	adds	r7, #56	; 0x38
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000324 	.word	0x20000324
 8004d08:	40000400 	.word	0x40000400

08004d0c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <MX_USART2_UART_Init+0x4c>)
 8004d12:	4a12      	ldr	r2, [pc, #72]	; (8004d5c <MX_USART2_UART_Init+0x50>)
 8004d14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <MX_USART2_UART_Init+0x4c>)
 8004d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d1e:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <MX_USART2_UART_Init+0x4c>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <MX_USART2_UART_Init+0x4c>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <MX_USART2_UART_Init+0x4c>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <MX_USART2_UART_Init+0x4c>)
 8004d32:	220c      	movs	r2, #12
 8004d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <MX_USART2_UART_Init+0x4c>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d3c:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <MX_USART2_UART_Init+0x4c>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d42:	4805      	ldr	r0, [pc, #20]	; (8004d58 <MX_USART2_UART_Init+0x4c>)
 8004d44:	f7fe fe32 	bl	80039ac <HAL_UART_Init>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d4e:	f000 fa1b 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200003f8 	.word	0x200003f8
 8004d5c:	40004400 	.word	0x40004400

08004d60 <MX_DMA_Init>:

}
#endif

static void MX_DMA_Init(void) 
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <MX_DMA_Init+0x4c>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	4a0f      	ldr	r2, [pc, #60]	; (8004dac <MX_DMA_Init+0x4c>)
 8004d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d74:	6313      	str	r3, [r2, #48]	; 0x30
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <MX_DMA_Init+0x4c>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004d82:	2200      	movs	r2, #0
 8004d84:	2100      	movs	r1, #0
 8004d86:	2010      	movs	r0, #16
 8004d88:	f7fb fcfc 	bl	8000784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004d8c:	2010      	movs	r0, #16
 8004d8e:	f7fb fd15 	bl	80007bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004d92:	2200      	movs	r2, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	2011      	movs	r0, #17
 8004d98:	f7fb fcf4 	bl	8000784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004d9c:	2011      	movs	r0, #17
 8004d9e:	f7fb fd0d 	bl	80007bc <HAL_NVIC_EnableIRQ>
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800

08004db0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db6:	f107 030c 	add.w	r3, r7, #12
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	605a      	str	r2, [r3, #4]
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	60da      	str	r2, [r3, #12]
 8004dc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <MX_GPIO_Init+0x7c>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <MX_GPIO_Init+0x7c>)
 8004dd0:	f043 0304 	orr.w	r3, r3, #4
 8004dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd6:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <MX_GPIO_Init+0x7c>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <MX_GPIO_Init+0x7c>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <MX_GPIO_Init+0x7c>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6313      	str	r3, [r2, #48]	; 0x30
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <MX_GPIO_Init+0x7c>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2120      	movs	r1, #32
 8004e02:	480b      	ldr	r0, [pc, #44]	; (8004e30 <MX_GPIO_Init+0x80>)
 8004e04:	f7fc fcea 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004e08:	2320      	movs	r3, #32
 8004e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e18:	f107 030c 	add.w	r3, r7, #12
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4804      	ldr	r0, [pc, #16]	; (8004e30 <MX_GPIO_Init+0x80>)
 8004e20:	f7fc fb5a 	bl	80014d8 <HAL_GPIO_Init>
}
 8004e24:	bf00      	nop
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	40020000 	.word	0x40020000

08004e34 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	if (s_buffer._rx_single_char != '\n')
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e52:	7e9b      	ldrb	r3, [r3, #26]
 8004e54:	2b0a      	cmp	r3, #10
 8004e56:	d011      	beq.n	8004e7c <HAL_UART_RxCpltCallback+0x34>
	{
		if(s_buffer._rx_index < BUFFER_SIZE)
 8004e58:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e5a:	7e5b      	ldrb	r3, [r3, #25]
 8004e5c:	2b18      	cmp	r3, #24
 8004e5e:	d822      	bhi.n	8004ea6 <HAL_UART_RxCpltCallback+0x5e>
		{
			s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 8004e60:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e62:	7e5b      	ldrb	r3, [r3, #25]
 8004e64:	461a      	mov	r2, r3
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e68:	7e99      	ldrb	r1, [r3, #26]
 8004e6a:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e6c:	5499      	strb	r1, [r3, r2]
			s_buffer._rx_index++;
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e70:	7e5b      	ldrb	r3, [r3, #25]
 8004e72:	3301      	adds	r3, #1
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e78:	765a      	strb	r2, [r3, #25]
 8004e7a:	e014      	b.n	8004ea6 <HAL_UART_RxCpltCallback+0x5e>
		}
	}
	else
	{
		s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e7e:	7e5b      	ldrb	r3, [r3, #25]
 8004e80:	461a      	mov	r2, r3
 8004e82:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e84:	7e99      	ldrb	r1, [r3, #26]
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e88:	5499      	strb	r1, [r3, r2]
		s_buffer._rx_index++;
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e8c:	7e5b      	ldrb	r3, [r3, #25]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e94:	765a      	strb	r2, [r3, #25]
		whichCommand();
 8004e96:	f000 f815 	bl	8004ec4 <whichCommand>
		bufferInit(&s_buffer);
 8004e9a:	4807      	ldr	r0, [pc, #28]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004e9c:	f7ff fd54 	bl	8004948 <bufferInit>
		s_buffer._rx_index = 0;
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_UART_RxCpltCallback+0x70>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	765a      	strb	r2, [r3, #25]
	}

#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	4904      	ldr	r1, [pc, #16]	; (8004ebc <HAL_UART_RxCpltCallback+0x74>)
 8004eaa:	4805      	ldr	r0, [pc, #20]	; (8004ec0 <HAL_UART_RxCpltCallback+0x78>)
 8004eac:	f7fe fe38 	bl	8003b20 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
#endif

	//HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
	//HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	200002e8 	.word	0x200002e8
 8004ebc:	20000302 	.word	0x20000302
 8004ec0:	200003f8 	.word	0x200003f8

08004ec4 <whichCommand>:

void whichCommand (void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
	char* token = strtok((char*)s_buffer._p_rx_buffer, " ");
 8004eca:	491b      	ldr	r1, [pc, #108]	; (8004f38 <whichCommand+0x74>)
 8004ecc:	481b      	ldr	r0, [pc, #108]	; (8004f3c <whichCommand+0x78>)
 8004ece:	f000 fc73 	bl	80057b8 <strtok>
 8004ed2:	6038      	str	r0, [r7, #0]

	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	71fb      	strb	r3, [r7, #7]
 8004ed8:	e027      	b.n	8004f2a <whichCommand+0x66>
	{
		if (strncmp(token, commands[i]._name, commands[i]._size)==0)
 8004eda:	79fa      	ldrb	r2, [r7, #7]
 8004edc:	4918      	ldr	r1, [pc, #96]	; (8004f40 <whichCommand+0x7c>)
 8004ede:	4613      	mov	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	79fa      	ldrb	r2, [r7, #7]
 8004eec:	4914      	ldr	r1, [pc, #80]	; (8004f40 <whichCommand+0x7c>)
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3304      	adds	r3, #4
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	4601      	mov	r1, r0
 8004f00:	6838      	ldr	r0, [r7, #0]
 8004f02:	f000 fc47 	bl	8005794 <strncmp>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <whichCommand+0x60>
		{
			commands[i].func_ptr(token);
 8004f0c:	79fa      	ldrb	r2, [r7, #7]
 8004f0e:	490c      	ldr	r1, [pc, #48]	; (8004f40 <whichCommand+0x7c>)
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6838      	ldr	r0, [r7, #0]
 8004f20:	4798      	blx	r3
			return;
 8004f22:	e005      	b.n	8004f30 <whichCommand+0x6c>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	3301      	adds	r3, #1
 8004f28:	71fb      	strb	r3, [r7, #7]
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	2b07      	cmp	r3, #7
 8004f2e:	d9d4      	bls.n	8004eda <whichCommand+0x16>
		}
	}
}
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	0800621c 	.word	0x0800621c
 8004f3c:	200002e8 	.word	0x200002e8
 8004f40:	20000008 	.word	0x20000008

08004f44 <ping_callBack>:

void ping_callBack(char* token)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	uart_print(token);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f8e9 	bl	8005124 <uart_print>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <version_callback>:

void version_callback(char* token)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uart_print(VERSION);
 8004f64:	4803      	ldr	r0, [pc, #12]	; (8004f74 <version_callback+0x18>)
 8004f66:	f000 f8dd 	bl	8005124 <uart_print>
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	08006220 	.word	0x08006220

08004f78 <pwm_start_callback>:

void pwm_start_callback(char* token)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004f80:	2100      	movs	r1, #0
 8004f82:	4805      	ldr	r0, [pc, #20]	; (8004f98 <pwm_start_callback+0x20>)
 8004f84:	f7fd fe98 	bl	8002cb8 <HAL_TIM_PWM_Start>
	uart_print(OK);
 8004f88:	4804      	ldr	r0, [pc, #16]	; (8004f9c <pwm_start_callback+0x24>)
 8004f8a:	f000 f8cb 	bl	8005124 <uart_print>
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000324 	.word	0x20000324
 8004f9c:	08006228 	.word	0x08006228

08004fa0 <pwm_stop_callback>:

void pwm_stop_callback(char* token)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <pwm_stop_callback+0x20>)
 8004fac:	f7fd feb6 	bl	8002d1c <HAL_TIM_PWM_Stop>
	uart_print(OK);
 8004fb0:	4804      	ldr	r0, [pc, #16]	; (8004fc4 <pwm_stop_callback+0x24>)
 8004fb2:	f000 f8b7 	bl	8005124 <uart_print>
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000324 	.word	0x20000324
 8004fc4:	08006228 	.word	0x08006228

08004fc8 <pwm_dc_callback>:

void pwm_dc_callback(char* token)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8004fd0:	4911      	ldr	r1, [pc, #68]	; (8005018 <pwm_dc_callback+0x50>)
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f000 fbf0 	bl	80057b8 <strtok>
 8004fd8:	6078      	str	r0, [r7, #4]
	if(strlen(token) <= 0)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d015      	beq.n	800500e <pwm_dc_callback+0x46>
	{
		return;
	}
	int32_t dc = atoi(token);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fb73 	bl	80056ce <atoi>
 8004fe8:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b64      	cmp	r3, #100	; 0x64
 8004fee:	dd01      	ble.n	8004ff4 <pwm_dc_callback+0x2c>
 8004ff0:	2364      	movs	r3, #100	; 0x64
 8004ff2:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da01      	bge.n	8004ffe <pwm_dc_callback+0x36>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 8004ffe:	4b07      	ldr	r3, [pc, #28]	; (800501c <pwm_dc_callback+0x54>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	635a      	str	r2, [r3, #52]	; 0x34
	uart_print(OK);
 8005006:	4806      	ldr	r0, [pc, #24]	; (8005020 <pwm_dc_callback+0x58>)
 8005008:	f000 f88c 	bl	8005124 <uart_print>
 800500c:	e000      	b.n	8005010 <pwm_dc_callback+0x48>
		return;
 800500e:	bf00      	nop
}
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	0800621c 	.word	0x0800621c
 800501c:	20000324 	.word	0x20000324
 8005020:	08006228 	.word	0x08006228

08005024 <crc_whole_flash_calc_callback>:

void crc_whole_flash_calc_callback(char* token)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
		crcFlashResult = HAL_CRC_Accumulate(&hcrc, flashDataBuffer, sector_0_Size);
		offsetAddr += 0x4000;
	}*/

	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 800502c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005030:	617b      	str	r3, [r7, #20]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 8005032:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005036:	613b      	str	r3, [r7, #16]
	//FeedDog(1);
	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	6939      	ldr	r1, [r7, #16]
 800503c:	4807      	ldr	r0, [pc, #28]	; (800505c <crc_whole_flash_calc_callback+0x38>)
 800503e:	f7fb fbe7 	bl	8000810 <HAL_CRC_Calculate>
 8005042:	60f8      	str	r0, [r7, #12]
	//FeedDog(1);
	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)crcFlashResult);
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4906      	ldr	r1, [pc, #24]	; (8005060 <crc_whole_flash_calc_callback+0x3c>)
 8005048:	4806      	ldr	r0, [pc, #24]	; (8005064 <crc_whole_flash_calc_callback+0x40>)
 800504a:	f000 fb83 	bl	8005754 <siprintf>
	uart_print((char*)s_buffer._p_tx_buffer);
 800504e:	4805      	ldr	r0, [pc, #20]	; (8005064 <crc_whole_flash_calc_callback+0x40>)
 8005050:	f000 f868 	bl	8005124 <uart_print>
}
 8005054:	bf00      	nop
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	2000031c 	.word	0x2000031c
 8005060:	0800622c 	.word	0x0800622c
 8005064:	20000303 	.word	0x20000303

08005068 <wwdg_test_callback>:

void wwdg_test_callback(char* token)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	uart_print(OK);
 8005070:	4801      	ldr	r0, [pc, #4]	; (8005078 <wwdg_test_callback+0x10>)
 8005072:	f000 f857 	bl	8005124 <uart_print>
	while(1);
 8005076:	e7fe      	b.n	8005076 <wwdg_test_callback+0xe>
 8005078:	08006228 	.word	0x08006228

0800507c <flash_lock_callback>:
}

void flash_lock_callback(char* token)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	4618      	mov	r0, r3
 800508a:	f7fc f90b 	bl	80012a4 <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0) {
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	2baa      	cmp	r3, #170	; 0xaa
 8005092:	d133      	bne.n	80050fc <flash_lock_callback+0x80>
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 8005094:	2355      	movs	r3, #85	; 0x55
 8005096:	61fb      	str	r3, [r7, #28]
		obConfig.OptionType = OPTIONBYTE_RDP;
 8005098:	2302      	movs	r3, #2
 800509a:	60fb      	str	r3, [r7, #12]

		if (HAL_FLASH_Unlock() != HAL_OK)
 800509c:	f7fb ff7c 	bl	8000f98 <HAL_FLASH_Unlock>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <flash_lock_callback+0x2e>
		{
			Error_Handler();
 80050a6:	f000 f86f 	bl	8005188 <Error_Handler>
		}
		/* Clear All pending flags */ //if wwdg and kickDog are enabled - uncomment __HAL_FLASH_CLEAR_FLAG
		//__HAL_FLASH_CLEAR_FLAG (FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 80050aa:	f7fb ffa7 	bl	8000ffc <HAL_FLASH_OB_Unlock>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <flash_lock_callback+0x3c>
		{
			Error_Handler();
 80050b4:	f000 f868 	bl	8005188 <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fc f883 	bl	80011c8 <HAL_FLASHEx_OBProgram>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <flash_lock_callback+0x50>
		{
			Error_Handler();
 80050c8:	f000 f85e 	bl	8005188 <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 80050cc:	f7fb ffc2 	bl	8001054 <HAL_FLASH_OB_Launch>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <flash_lock_callback+0x5e>
		{
			Error_Handler();
 80050d6:	f000 f857 	bl	8005188 <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 80050da:	f7fb ffab 	bl	8001034 <HAL_FLASH_OB_Lock>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <flash_lock_callback+0x6c>
		{
			Error_Handler();
 80050e4:	f000 f850 	bl	8005188 <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 80050e8:	f7fb ff78 	bl	8000fdc <HAL_FLASH_Lock>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <flash_lock_callback+0x7a>
		{
			Error_Handler();
 80050f2:	f000 f849 	bl	8005188 <Error_Handler>
		}
		uart_print(OK);
 80050f6:	4803      	ldr	r0, [pc, #12]	; (8005104 <flash_lock_callback+0x88>)
 80050f8:	f000 f814 	bl	8005124 <uart_print>
	    if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
	        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
	}*/


}
 80050fc:	bf00      	nop
 80050fe:	3728      	adds	r7, #40	; 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	08006228 	.word	0x08006228

08005108 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  uart_print(TICK);
 8005110:	4803      	ldr	r0, [pc, #12]	; (8005120 <HAL_RTC_AlarmAEventCallback+0x18>)
 8005112:	f000 f807 	bl	8005124 <uart_print>
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	08006230 	.word	0x08006230

08005124 <uart_print>:

void uart_print(char* token)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	memcpy((char*)s_buffer._p_tx_buffer, token, strlen(token));
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7fb f857 	bl	80001e0 <strlen>
 8005132:	4603      	mov	r3, r0
 8005134:	461a      	mov	r2, r3
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4808      	ldr	r0, [pc, #32]	; (800515c <uart_print+0x38>)
 800513a:	f000 faf7 	bl	800572c <memcpy>
#ifdef UART_TX_DMA
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(token));
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb f84e 	bl	80001e0 <strlen>
 8005144:	4603      	mov	r3, r0
 8005146:	b29b      	uxth	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	4904      	ldr	r1, [pc, #16]	; (800515c <uart_print+0x38>)
 800514c:	4804      	ldr	r0, [pc, #16]	; (8005160 <uart_print+0x3c>)
 800514e:	f7fe fc7b 	bl	8003a48 <HAL_UART_Transmit_DMA>
#else
	HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(token), 10);
#endif
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000303 	.word	0x20000303
 8005160:	200003f8 	.word	0x200003f8

08005164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d101      	bne.n	800517a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005176:	f7fb fa2d 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000

08005188 <Error_Handler>:

void Error_Handler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uart_print("Error");
 800518c:	4801      	ldr	r0, [pc, #4]	; (8005194 <Error_Handler+0xc>)
 800518e:	f7ff ffc9 	bl	8005124 <uart_print>
	while(1);
 8005192:	e7fe      	b.n	8005192 <Error_Handler+0xa>
 8005194:	08006238 	.word	0x08006238

08005198 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	607b      	str	r3, [r7, #4]
 80051a2:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <HAL_MspInit+0x4c>)
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	4a0f      	ldr	r2, [pc, #60]	; (80051e4 <HAL_MspInit+0x4c>)
 80051a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051ac:	6453      	str	r3, [r2, #68]	; 0x44
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <HAL_MspInit+0x4c>)
 80051b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <HAL_MspInit+0x4c>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <HAL_MspInit+0x4c>)
 80051c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <HAL_MspInit+0x4c>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80051d6:	2007      	movs	r0, #7
 80051d8:	f7fb fac9 	bl	800076e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40023800 	.word	0x40023800

080051e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <HAL_CRC_MspInit+0x3c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10d      	bne.n	8005216 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <HAL_CRC_MspInit+0x40>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <HAL_CRC_MspInit+0x40>)
 8005204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005208:	6313      	str	r3, [r2, #48]	; 0x30
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <HAL_CRC_MspInit+0x40>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40023000 	.word	0x40023000
 8005228:	40023800 	.word	0x40023800

0800522c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a08      	ldr	r2, [pc, #32]	; (800525c <HAL_RTC_MspInit+0x30>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d10a      	bne.n	8005254 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <HAL_RTC_MspInit+0x34>)
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8005244:	2200      	movs	r2, #0
 8005246:	2100      	movs	r1, #0
 8005248:	2029      	movs	r0, #41	; 0x29
 800524a:	f7fb fa9b 	bl	8000784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800524e:	2029      	movs	r0, #41	; 0x29
 8005250:	f7fb fab4 	bl	80007bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40002800 	.word	0x40002800
 8005260:	42470e3c 	.word	0x42470e3c

08005264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <HAL_TIM_Base_MspInit+0x3c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10d      	bne.n	8005292 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_TIM_Base_MspInit+0x40>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a09      	ldr	r2, [pc, #36]	; (80052a4 <HAL_TIM_Base_MspInit+0x40>)
 8005280:	f043 0302 	orr.w	r3, r3, #2
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b07      	ldr	r3, [pc, #28]	; (80052a4 <HAL_TIM_Base_MspInit+0x40>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40023800 	.word	0x40023800

080052a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b0:	f107 030c 	add.w	r3, r7, #12
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a12      	ldr	r2, [pc, #72]	; (8005310 <HAL_TIM_MspPostInit+0x68>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d11d      	bne.n	8005306 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <HAL_TIM_MspPostInit+0x6c>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	4a10      	ldr	r2, [pc, #64]	; (8005314 <HAL_TIM_MspPostInit+0x6c>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	6313      	str	r3, [r2, #48]	; 0x30
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <HAL_TIM_MspPostInit+0x6c>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80052e6:	2340      	movs	r3, #64	; 0x40
 80052e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ea:	2302      	movs	r3, #2
 80052ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052f6:	2302      	movs	r3, #2
 80052f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	4619      	mov	r1, r3
 8005300:	4805      	ldr	r0, [pc, #20]	; (8005318 <HAL_TIM_MspPostInit+0x70>)
 8005302:	f7fc f8e9 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005306:	bf00      	nop
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40000400 	.word	0x40000400
 8005314:	40023800 	.word	0x40023800
 8005318:	40020000 	.word	0x40020000

0800531c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	60da      	str	r2, [r3, #12]
 8005332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a4b      	ldr	r2, [pc, #300]	; (8005468 <HAL_UART_MspInit+0x14c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	f040 8090 	bne.w	8005460 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	4b49      	ldr	r3, [pc, #292]	; (800546c <HAL_UART_MspInit+0x150>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4a48      	ldr	r2, [pc, #288]	; (800546c <HAL_UART_MspInit+0x150>)
 800534a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534e:	6413      	str	r3, [r2, #64]	; 0x40
 8005350:	4b46      	ldr	r3, [pc, #280]	; (800546c <HAL_UART_MspInit+0x150>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	4b42      	ldr	r3, [pc, #264]	; (800546c <HAL_UART_MspInit+0x150>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	4a41      	ldr	r2, [pc, #260]	; (800546c <HAL_UART_MspInit+0x150>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6313      	str	r3, [r2, #48]	; 0x30
 800536c:	4b3f      	ldr	r3, [pc, #252]	; (800546c <HAL_UART_MspInit+0x150>)
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005378:	230c      	movs	r3, #12
 800537a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537c:	2302      	movs	r3, #2
 800537e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005384:	2303      	movs	r3, #3
 8005386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005388:	2307      	movs	r3, #7
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538c:	f107 0314 	add.w	r3, r7, #20
 8005390:	4619      	mov	r1, r3
 8005392:	4837      	ldr	r0, [pc, #220]	; (8005470 <HAL_UART_MspInit+0x154>)
 8005394:	f7fc f8a0 	bl	80014d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005398:	4b36      	ldr	r3, [pc, #216]	; (8005474 <HAL_UART_MspInit+0x158>)
 800539a:	4a37      	ldr	r2, [pc, #220]	; (8005478 <HAL_UART_MspInit+0x15c>)
 800539c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800539e:	4b35      	ldr	r3, [pc, #212]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053a6:	4b33      	ldr	r3, [pc, #204]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053ac:	4b31      	ldr	r3, [pc, #196]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053b2:	4b30      	ldr	r3, [pc, #192]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053ba:	4b2e      	ldr	r3, [pc, #184]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053bc:	2200      	movs	r2, #0
 80053be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053c0:	4b2c      	ldr	r3, [pc, #176]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80053c6:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053cc:	4b29      	ldr	r3, [pc, #164]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053d2:	4b28      	ldr	r3, [pc, #160]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80053d8:	4826      	ldr	r0, [pc, #152]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053da:	f7fb fa4d 	bl	8000878 <HAL_DMA_Init>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80053e4:	f7ff fed0 	bl	8005188 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a22      	ldr	r2, [pc, #136]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053ec:	635a      	str	r2, [r3, #52]	; 0x34
 80053ee:	4a21      	ldr	r2, [pc, #132]	; (8005474 <HAL_UART_MspInit+0x158>)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80053f4:	4b21      	ldr	r3, [pc, #132]	; (800547c <HAL_UART_MspInit+0x160>)
 80053f6:	4a22      	ldr	r2, [pc, #136]	; (8005480 <HAL_UART_MspInit+0x164>)
 80053f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_UART_MspInit+0x160>)
 80053fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005400:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <HAL_UART_MspInit+0x160>)
 8005404:	2240      	movs	r2, #64	; 0x40
 8005406:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005408:	4b1c      	ldr	r3, [pc, #112]	; (800547c <HAL_UART_MspInit+0x160>)
 800540a:	2200      	movs	r2, #0
 800540c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <HAL_UART_MspInit+0x160>)
 8005410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005414:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005416:	4b19      	ldr	r3, [pc, #100]	; (800547c <HAL_UART_MspInit+0x160>)
 8005418:	2200      	movs	r2, #0
 800541a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800541c:	4b17      	ldr	r3, [pc, #92]	; (800547c <HAL_UART_MspInit+0x160>)
 800541e:	2200      	movs	r2, #0
 8005420:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005422:	4b16      	ldr	r3, [pc, #88]	; (800547c <HAL_UART_MspInit+0x160>)
 8005424:	2200      	movs	r2, #0
 8005426:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005428:	4b14      	ldr	r3, [pc, #80]	; (800547c <HAL_UART_MspInit+0x160>)
 800542a:	2200      	movs	r2, #0
 800542c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800542e:	4b13      	ldr	r3, [pc, #76]	; (800547c <HAL_UART_MspInit+0x160>)
 8005430:	2200      	movs	r2, #0
 8005432:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005434:	4811      	ldr	r0, [pc, #68]	; (800547c <HAL_UART_MspInit+0x160>)
 8005436:	f7fb fa1f 	bl	8000878 <HAL_DMA_Init>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005440:	f7ff fea2 	bl	8005188 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a0d      	ldr	r2, [pc, #52]	; (800547c <HAL_UART_MspInit+0x160>)
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
 800544a:	4a0c      	ldr	r2, [pc, #48]	; (800547c <HAL_UART_MspInit+0x160>)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005450:	2200      	movs	r2, #0
 8005452:	2100      	movs	r1, #0
 8005454:	2026      	movs	r0, #38	; 0x26
 8005456:	f7fb f995 	bl	8000784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800545a:	2026      	movs	r0, #38	; 0x26
 800545c:	f7fb f9ae 	bl	80007bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005460:	bf00      	nop
 8005462:	3728      	adds	r7, #40	; 0x28
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40004400 	.word	0x40004400
 800546c:	40023800 	.word	0x40023800
 8005470:	40020000 	.word	0x40020000
 8005474:	20000288 	.word	0x20000288
 8005478:	40026088 	.word	0x40026088
 800547c:	20000364 	.word	0x20000364
 8005480:	400260a0 	.word	0x400260a0

08005484 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08c      	sub	sp, #48	; 0x30
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005494:	2200      	movs	r2, #0
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	2019      	movs	r0, #25
 800549a:	f7fb f973 	bl	8000784 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800549e:	2019      	movs	r0, #25
 80054a0:	f7fb f98c 	bl	80007bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <HAL_InitTick+0xa0>)
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <HAL_InitTick+0xa0>)
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	6453      	str	r3, [r2, #68]	; 0x44
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <HAL_InitTick+0xa0>)
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80054c0:	f107 0210 	add.w	r2, r7, #16
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fc fe02 	bl	80020d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7fc fdec 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 80054d4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	4a13      	ldr	r2, [pc, #76]	; (8005528 <HAL_InitTick+0xa4>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	0c9b      	lsrs	r3, r3, #18
 80054e0:	3b01      	subs	r3, #1
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80054e4:	4b11      	ldr	r3, [pc, #68]	; (800552c <HAL_InitTick+0xa8>)
 80054e6:	4a12      	ldr	r2, [pc, #72]	; (8005530 <HAL_InitTick+0xac>)
 80054e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80054ea:	4b10      	ldr	r3, [pc, #64]	; (800552c <HAL_InitTick+0xa8>)
 80054ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80054f2:	4a0e      	ldr	r2, [pc, #56]	; (800552c <HAL_InitTick+0xa8>)
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <HAL_InitTick+0xa8>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054fe:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_InitTick+0xa8>)
 8005500:	2200      	movs	r2, #0
 8005502:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005504:	4809      	ldr	r0, [pc, #36]	; (800552c <HAL_InitTick+0xa8>)
 8005506:	f7fd fb52 	bl	8002bae <HAL_TIM_Base_Init>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005510:	4806      	ldr	r0, [pc, #24]	; (800552c <HAL_InitTick+0xa8>)
 8005512:	f7fd fb77 	bl	8002c04 <HAL_TIM_Base_Start_IT>
 8005516:	4603      	mov	r3, r0
 8005518:	e000      	b.n	800551c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
}
 800551c:	4618      	mov	r0, r3
 800551e:	3730      	adds	r7, #48	; 0x30
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40023800 	.word	0x40023800
 8005528:	431bde83 	.word	0x431bde83
 800552c:	20000438 	.word	0x20000438
 8005530:	40010000 	.word	0x40010000

08005534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005546:	e7fe      	b.n	8005546 <HardFault_Handler+0x4>

08005548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800554c:	e7fe      	b.n	800554c <MemManage_Handler+0x4>

0800554e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800554e:	b480      	push	{r7}
 8005550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005552:	e7fe      	b.n	8005552 <BusFault_Handler+0x4>

08005554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005558:	e7fe      	b.n	8005558 <UsageFault_Handler+0x4>

0800555a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800555a:	b480      	push	{r7}
 800555c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800555e:	bf00      	nop
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005598:	4802      	ldr	r0, [pc, #8]	; (80055a4 <DMA1_Stream5_IRQHandler+0x10>)
 800559a:	f7fb fa95 	bl	8000ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800559e:	bf00      	nop
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000288 	.word	0x20000288

080055a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80055ac:	4802      	ldr	r0, [pc, #8]	; (80055b8 <DMA1_Stream6_IRQHandler+0x10>)
 80055ae:	f7fb fa8b 	bl	8000ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000364 	.word	0x20000364

080055bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80055c0:	4802      	ldr	r0, [pc, #8]	; (80055cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80055c2:	f7fd fbf7 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000438 	.word	0x20000438

080055d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055d4:	4802      	ldr	r0, [pc, #8]	; (80055e0 <USART2_IRQHandler+0x10>)
 80055d6:	f7fe fb23 	bl	8003c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	200003f8 	.word	0x200003f8

080055e4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80055e8:	4802      	ldr	r0, [pc, #8]	; (80055f4 <RTC_Alarm_IRQHandler+0x10>)
 80055ea:	f7fd f9c3 	bl	8002974 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	200003c4 	.word	0x200003c4

080055f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005600:	4b11      	ldr	r3, [pc, #68]	; (8005648 <_sbrk+0x50>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <_sbrk+0x16>
		heap_end = &end;
 8005608:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <_sbrk+0x50>)
 800560a:	4a10      	ldr	r2, [pc, #64]	; (800564c <_sbrk+0x54>)
 800560c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <_sbrk+0x50>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <_sbrk+0x50>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4413      	add	r3, r2
 800561c:	466a      	mov	r2, sp
 800561e:	4293      	cmp	r3, r2
 8005620:	d907      	bls.n	8005632 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005622:	f000 f859 	bl	80056d8 <__errno>
 8005626:	4602      	mov	r2, r0
 8005628:	230c      	movs	r3, #12
 800562a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800562c:	f04f 33ff 	mov.w	r3, #4294967295
 8005630:	e006      	b.n	8005640 <_sbrk+0x48>
	}

	heap_end += incr;
 8005632:	4b05      	ldr	r3, [pc, #20]	; (8005648 <_sbrk+0x50>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4413      	add	r3, r2
 800563a:	4a03      	ldr	r2, [pc, #12]	; (8005648 <_sbrk+0x50>)
 800563c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800563e:	68fb      	ldr	r3, [r7, #12]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20000258 	.word	0x20000258
 800564c:	20000480 	.word	0x20000480

08005650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005654:	4b08      	ldr	r3, [pc, #32]	; (8005678 <SystemInit+0x28>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	4a07      	ldr	r2, [pc, #28]	; (8005678 <SystemInit+0x28>)
 800565c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <SystemInit+0x28>)
 8005666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800566a:	609a      	str	r2, [r3, #8]
#endif
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	e000ed00 	.word	0xe000ed00

0800567c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800567c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005680:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005682:	e003      	b.n	800568c <LoopCopyDataInit>

08005684 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005686:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005688:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800568a:	3104      	adds	r1, #4

0800568c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800568c:	480b      	ldr	r0, [pc, #44]	; (80056bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800568e:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005690:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005692:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005694:	d3f6      	bcc.n	8005684 <CopyDataInit>
  ldr  r2, =_sbss
 8005696:	4a0b      	ldr	r2, [pc, #44]	; (80056c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005698:	e002      	b.n	80056a0 <LoopFillZerobss>

0800569a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800569a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800569c:	f842 3b04 	str.w	r3, [r2], #4

080056a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056a4:	d3f9      	bcc.n	800569a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056a6:	f7ff ffd3 	bl	8005650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056aa:	f000 f81b 	bl	80056e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ae:	f7ff f963 	bl	8004978 <main>
  bx  lr    
 80056b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80056b8:	080063b0 	.word	0x080063b0
  ldr  r0, =_sdata
 80056bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80056c0:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 80056c4:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 80056c8:	2000047c 	.word	0x2000047c

080056cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056cc:	e7fe      	b.n	80056cc <ADC_IRQHandler>

080056ce <atoi>:
 80056ce:	220a      	movs	r2, #10
 80056d0:	2100      	movs	r1, #0
 80056d2:	f000 b941 	b.w	8005958 <strtol>
	...

080056d8 <__errno>:
 80056d8:	4b01      	ldr	r3, [pc, #4]	; (80056e0 <__errno+0x8>)
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	2000006c 	.word	0x2000006c

080056e4 <__libc_init_array>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4e0d      	ldr	r6, [pc, #52]	; (800571c <__libc_init_array+0x38>)
 80056e8:	4c0d      	ldr	r4, [pc, #52]	; (8005720 <__libc_init_array+0x3c>)
 80056ea:	1ba4      	subs	r4, r4, r6
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	2500      	movs	r5, #0
 80056f0:	42a5      	cmp	r5, r4
 80056f2:	d109      	bne.n	8005708 <__libc_init_array+0x24>
 80056f4:	4e0b      	ldr	r6, [pc, #44]	; (8005724 <__libc_init_array+0x40>)
 80056f6:	4c0c      	ldr	r4, [pc, #48]	; (8005728 <__libc_init_array+0x44>)
 80056f8:	f000 fd4a 	bl	8006190 <_init>
 80056fc:	1ba4      	subs	r4, r4, r6
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	2500      	movs	r5, #0
 8005702:	42a5      	cmp	r5, r4
 8005704:	d105      	bne.n	8005712 <__libc_init_array+0x2e>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800570c:	4798      	blx	r3
 800570e:	3501      	adds	r5, #1
 8005710:	e7ee      	b.n	80056f0 <__libc_init_array+0xc>
 8005712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005716:	4798      	blx	r3
 8005718:	3501      	adds	r5, #1
 800571a:	e7f2      	b.n	8005702 <__libc_init_array+0x1e>
 800571c:	080063a8 	.word	0x080063a8
 8005720:	080063a8 	.word	0x080063a8
 8005724:	080063a8 	.word	0x080063a8
 8005728:	080063ac 	.word	0x080063ac

0800572c <memcpy>:
 800572c:	b510      	push	{r4, lr}
 800572e:	1e43      	subs	r3, r0, #1
 8005730:	440a      	add	r2, r1
 8005732:	4291      	cmp	r1, r2
 8005734:	d100      	bne.n	8005738 <memcpy+0xc>
 8005736:	bd10      	pop	{r4, pc}
 8005738:	f811 4b01 	ldrb.w	r4, [r1], #1
 800573c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005740:	e7f7      	b.n	8005732 <memcpy+0x6>

08005742 <memset>:
 8005742:	4402      	add	r2, r0
 8005744:	4603      	mov	r3, r0
 8005746:	4293      	cmp	r3, r2
 8005748:	d100      	bne.n	800574c <memset+0xa>
 800574a:	4770      	bx	lr
 800574c:	f803 1b01 	strb.w	r1, [r3], #1
 8005750:	e7f9      	b.n	8005746 <memset+0x4>
	...

08005754 <siprintf>:
 8005754:	b40e      	push	{r1, r2, r3}
 8005756:	b500      	push	{lr}
 8005758:	b09c      	sub	sp, #112	; 0x70
 800575a:	ab1d      	add	r3, sp, #116	; 0x74
 800575c:	9002      	str	r0, [sp, #8]
 800575e:	9006      	str	r0, [sp, #24]
 8005760:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005764:	4809      	ldr	r0, [pc, #36]	; (800578c <siprintf+0x38>)
 8005766:	9107      	str	r1, [sp, #28]
 8005768:	9104      	str	r1, [sp, #16]
 800576a:	4909      	ldr	r1, [pc, #36]	; (8005790 <siprintf+0x3c>)
 800576c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005770:	9105      	str	r1, [sp, #20]
 8005772:	6800      	ldr	r0, [r0, #0]
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	a902      	add	r1, sp, #8
 8005778:	f000 fa24 	bl	8005bc4 <_svfiprintf_r>
 800577c:	9b02      	ldr	r3, [sp, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	b01c      	add	sp, #112	; 0x70
 8005784:	f85d eb04 	ldr.w	lr, [sp], #4
 8005788:	b003      	add	sp, #12
 800578a:	4770      	bx	lr
 800578c:	2000006c 	.word	0x2000006c
 8005790:	ffff0208 	.word	0xffff0208

08005794 <strncmp>:
 8005794:	b510      	push	{r4, lr}
 8005796:	b16a      	cbz	r2, 80057b4 <strncmp+0x20>
 8005798:	3901      	subs	r1, #1
 800579a:	1884      	adds	r4, r0, r2
 800579c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80057a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d103      	bne.n	80057b0 <strncmp+0x1c>
 80057a8:	42a0      	cmp	r0, r4
 80057aa:	d001      	beq.n	80057b0 <strncmp+0x1c>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1f5      	bne.n	800579c <strncmp+0x8>
 80057b0:	1a98      	subs	r0, r3, r2
 80057b2:	bd10      	pop	{r4, pc}
 80057b4:	4610      	mov	r0, r2
 80057b6:	e7fc      	b.n	80057b2 <strncmp+0x1e>

080057b8 <strtok>:
 80057b8:	4b13      	ldr	r3, [pc, #76]	; (8005808 <strtok+0x50>)
 80057ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	681d      	ldr	r5, [r3, #0]
 80057c0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80057c2:	4606      	mov	r6, r0
 80057c4:	460f      	mov	r7, r1
 80057c6:	b9b4      	cbnz	r4, 80057f6 <strtok+0x3e>
 80057c8:	2050      	movs	r0, #80	; 0x50
 80057ca:	f000 f8df 	bl	800598c <malloc>
 80057ce:	65a8      	str	r0, [r5, #88]	; 0x58
 80057d0:	e9c0 4400 	strd	r4, r4, [r0]
 80057d4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80057d8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80057dc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80057e0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80057e4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80057e8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80057ec:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80057f0:	6184      	str	r4, [r0, #24]
 80057f2:	7704      	strb	r4, [r0, #28]
 80057f4:	6244      	str	r4, [r0, #36]	; 0x24
 80057f6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80057f8:	4639      	mov	r1, r7
 80057fa:	4630      	mov	r0, r6
 80057fc:	2301      	movs	r3, #1
 80057fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005802:	f000 b803 	b.w	800580c <__strtok_r>
 8005806:	bf00      	nop
 8005808:	2000006c 	.word	0x2000006c

0800580c <__strtok_r>:
 800580c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800580e:	b918      	cbnz	r0, 8005818 <__strtok_r+0xc>
 8005810:	6810      	ldr	r0, [r2, #0]
 8005812:	b908      	cbnz	r0, 8005818 <__strtok_r+0xc>
 8005814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005816:	4620      	mov	r0, r4
 8005818:	4604      	mov	r4, r0
 800581a:	460f      	mov	r7, r1
 800581c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005820:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005824:	b91e      	cbnz	r6, 800582e <__strtok_r+0x22>
 8005826:	b96d      	cbnz	r5, 8005844 <__strtok_r+0x38>
 8005828:	6015      	str	r5, [r2, #0]
 800582a:	4628      	mov	r0, r5
 800582c:	e7f2      	b.n	8005814 <__strtok_r+0x8>
 800582e:	42b5      	cmp	r5, r6
 8005830:	d1f6      	bne.n	8005820 <__strtok_r+0x14>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1ef      	bne.n	8005816 <__strtok_r+0xa>
 8005836:	6014      	str	r4, [r2, #0]
 8005838:	7003      	strb	r3, [r0, #0]
 800583a:	e7eb      	b.n	8005814 <__strtok_r+0x8>
 800583c:	462b      	mov	r3, r5
 800583e:	e00d      	b.n	800585c <__strtok_r+0x50>
 8005840:	b926      	cbnz	r6, 800584c <__strtok_r+0x40>
 8005842:	461c      	mov	r4, r3
 8005844:	4623      	mov	r3, r4
 8005846:	460f      	mov	r7, r1
 8005848:	f813 5b01 	ldrb.w	r5, [r3], #1
 800584c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005850:	42b5      	cmp	r5, r6
 8005852:	d1f5      	bne.n	8005840 <__strtok_r+0x34>
 8005854:	2d00      	cmp	r5, #0
 8005856:	d0f1      	beq.n	800583c <__strtok_r+0x30>
 8005858:	2100      	movs	r1, #0
 800585a:	7021      	strb	r1, [r4, #0]
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e7d9      	b.n	8005814 <__strtok_r+0x8>

08005860 <_strtol_l.isra.0>:
 8005860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	4680      	mov	r8, r0
 8005866:	4689      	mov	r9, r1
 8005868:	4692      	mov	sl, r2
 800586a:	461e      	mov	r6, r3
 800586c:	460f      	mov	r7, r1
 800586e:	463d      	mov	r5, r7
 8005870:	9808      	ldr	r0, [sp, #32]
 8005872:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005876:	f000 f885 	bl	8005984 <__locale_ctype_ptr_l>
 800587a:	4420      	add	r0, r4
 800587c:	7843      	ldrb	r3, [r0, #1]
 800587e:	f013 0308 	ands.w	r3, r3, #8
 8005882:	d132      	bne.n	80058ea <_strtol_l.isra.0+0x8a>
 8005884:	2c2d      	cmp	r4, #45	; 0x2d
 8005886:	d132      	bne.n	80058ee <_strtol_l.isra.0+0x8e>
 8005888:	787c      	ldrb	r4, [r7, #1]
 800588a:	1cbd      	adds	r5, r7, #2
 800588c:	2201      	movs	r2, #1
 800588e:	2e00      	cmp	r6, #0
 8005890:	d05d      	beq.n	800594e <_strtol_l.isra.0+0xee>
 8005892:	2e10      	cmp	r6, #16
 8005894:	d109      	bne.n	80058aa <_strtol_l.isra.0+0x4a>
 8005896:	2c30      	cmp	r4, #48	; 0x30
 8005898:	d107      	bne.n	80058aa <_strtol_l.isra.0+0x4a>
 800589a:	782b      	ldrb	r3, [r5, #0]
 800589c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80058a0:	2b58      	cmp	r3, #88	; 0x58
 80058a2:	d14f      	bne.n	8005944 <_strtol_l.isra.0+0xe4>
 80058a4:	786c      	ldrb	r4, [r5, #1]
 80058a6:	2610      	movs	r6, #16
 80058a8:	3502      	adds	r5, #2
 80058aa:	2a00      	cmp	r2, #0
 80058ac:	bf14      	ite	ne
 80058ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80058b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80058b6:	2700      	movs	r7, #0
 80058b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80058bc:	4638      	mov	r0, r7
 80058be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80058c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d817      	bhi.n	80058fa <_strtol_l.isra.0+0x9a>
 80058ca:	461c      	mov	r4, r3
 80058cc:	42a6      	cmp	r6, r4
 80058ce:	dd23      	ble.n	8005918 <_strtol_l.isra.0+0xb8>
 80058d0:	1c7b      	adds	r3, r7, #1
 80058d2:	d007      	beq.n	80058e4 <_strtol_l.isra.0+0x84>
 80058d4:	4584      	cmp	ip, r0
 80058d6:	d31c      	bcc.n	8005912 <_strtol_l.isra.0+0xb2>
 80058d8:	d101      	bne.n	80058de <_strtol_l.isra.0+0x7e>
 80058da:	45a6      	cmp	lr, r4
 80058dc:	db19      	blt.n	8005912 <_strtol_l.isra.0+0xb2>
 80058de:	fb00 4006 	mla	r0, r0, r6, r4
 80058e2:	2701      	movs	r7, #1
 80058e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058e8:	e7eb      	b.n	80058c2 <_strtol_l.isra.0+0x62>
 80058ea:	462f      	mov	r7, r5
 80058ec:	e7bf      	b.n	800586e <_strtol_l.isra.0+0xe>
 80058ee:	2c2b      	cmp	r4, #43	; 0x2b
 80058f0:	bf04      	itt	eq
 80058f2:	1cbd      	addeq	r5, r7, #2
 80058f4:	787c      	ldrbeq	r4, [r7, #1]
 80058f6:	461a      	mov	r2, r3
 80058f8:	e7c9      	b.n	800588e <_strtol_l.isra.0+0x2e>
 80058fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80058fe:	2b19      	cmp	r3, #25
 8005900:	d801      	bhi.n	8005906 <_strtol_l.isra.0+0xa6>
 8005902:	3c37      	subs	r4, #55	; 0x37
 8005904:	e7e2      	b.n	80058cc <_strtol_l.isra.0+0x6c>
 8005906:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800590a:	2b19      	cmp	r3, #25
 800590c:	d804      	bhi.n	8005918 <_strtol_l.isra.0+0xb8>
 800590e:	3c57      	subs	r4, #87	; 0x57
 8005910:	e7dc      	b.n	80058cc <_strtol_l.isra.0+0x6c>
 8005912:	f04f 37ff 	mov.w	r7, #4294967295
 8005916:	e7e5      	b.n	80058e4 <_strtol_l.isra.0+0x84>
 8005918:	1c7b      	adds	r3, r7, #1
 800591a:	d108      	bne.n	800592e <_strtol_l.isra.0+0xce>
 800591c:	2322      	movs	r3, #34	; 0x22
 800591e:	f8c8 3000 	str.w	r3, [r8]
 8005922:	4608      	mov	r0, r1
 8005924:	f1ba 0f00 	cmp.w	sl, #0
 8005928:	d107      	bne.n	800593a <_strtol_l.isra.0+0xda>
 800592a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592e:	b102      	cbz	r2, 8005932 <_strtol_l.isra.0+0xd2>
 8005930:	4240      	negs	r0, r0
 8005932:	f1ba 0f00 	cmp.w	sl, #0
 8005936:	d0f8      	beq.n	800592a <_strtol_l.isra.0+0xca>
 8005938:	b10f      	cbz	r7, 800593e <_strtol_l.isra.0+0xde>
 800593a:	f105 39ff 	add.w	r9, r5, #4294967295
 800593e:	f8ca 9000 	str.w	r9, [sl]
 8005942:	e7f2      	b.n	800592a <_strtol_l.isra.0+0xca>
 8005944:	2430      	movs	r4, #48	; 0x30
 8005946:	2e00      	cmp	r6, #0
 8005948:	d1af      	bne.n	80058aa <_strtol_l.isra.0+0x4a>
 800594a:	2608      	movs	r6, #8
 800594c:	e7ad      	b.n	80058aa <_strtol_l.isra.0+0x4a>
 800594e:	2c30      	cmp	r4, #48	; 0x30
 8005950:	d0a3      	beq.n	800589a <_strtol_l.isra.0+0x3a>
 8005952:	260a      	movs	r6, #10
 8005954:	e7a9      	b.n	80058aa <_strtol_l.isra.0+0x4a>
	...

08005958 <strtol>:
 8005958:	4b08      	ldr	r3, [pc, #32]	; (800597c <strtol+0x24>)
 800595a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800595c:	681c      	ldr	r4, [r3, #0]
 800595e:	4d08      	ldr	r5, [pc, #32]	; (8005980 <strtol+0x28>)
 8005960:	6a23      	ldr	r3, [r4, #32]
 8005962:	2b00      	cmp	r3, #0
 8005964:	bf08      	it	eq
 8005966:	462b      	moveq	r3, r5
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	460a      	mov	r2, r1
 800596e:	4601      	mov	r1, r0
 8005970:	4620      	mov	r0, r4
 8005972:	f7ff ff75 	bl	8005860 <_strtol_l.isra.0>
 8005976:	b003      	add	sp, #12
 8005978:	bd30      	pop	{r4, r5, pc}
 800597a:	bf00      	nop
 800597c:	2000006c 	.word	0x2000006c
 8005980:	200000d0 	.word	0x200000d0

08005984 <__locale_ctype_ptr_l>:
 8005984:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005988:	4770      	bx	lr
	...

0800598c <malloc>:
 800598c:	4b02      	ldr	r3, [pc, #8]	; (8005998 <malloc+0xc>)
 800598e:	4601      	mov	r1, r0
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	f000 b863 	b.w	8005a5c <_malloc_r>
 8005996:	bf00      	nop
 8005998:	2000006c 	.word	0x2000006c

0800599c <__ascii_mbtowc>:
 800599c:	b082      	sub	sp, #8
 800599e:	b901      	cbnz	r1, 80059a2 <__ascii_mbtowc+0x6>
 80059a0:	a901      	add	r1, sp, #4
 80059a2:	b142      	cbz	r2, 80059b6 <__ascii_mbtowc+0x1a>
 80059a4:	b14b      	cbz	r3, 80059ba <__ascii_mbtowc+0x1e>
 80059a6:	7813      	ldrb	r3, [r2, #0]
 80059a8:	600b      	str	r3, [r1, #0]
 80059aa:	7812      	ldrb	r2, [r2, #0]
 80059ac:	1c10      	adds	r0, r2, #0
 80059ae:	bf18      	it	ne
 80059b0:	2001      	movne	r0, #1
 80059b2:	b002      	add	sp, #8
 80059b4:	4770      	bx	lr
 80059b6:	4610      	mov	r0, r2
 80059b8:	e7fb      	b.n	80059b2 <__ascii_mbtowc+0x16>
 80059ba:	f06f 0001 	mvn.w	r0, #1
 80059be:	e7f8      	b.n	80059b2 <__ascii_mbtowc+0x16>

080059c0 <_free_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4605      	mov	r5, r0
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d045      	beq.n	8005a54 <_free_r+0x94>
 80059c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059cc:	1f0c      	subs	r4, r1, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bfb8      	it	lt
 80059d2:	18e4      	addlt	r4, r4, r3
 80059d4:	f000 fbac 	bl	8006130 <__malloc_lock>
 80059d8:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <_free_r+0x98>)
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	4610      	mov	r0, r2
 80059de:	b933      	cbnz	r3, 80059ee <_free_r+0x2e>
 80059e0:	6063      	str	r3, [r4, #4]
 80059e2:	6014      	str	r4, [r2, #0]
 80059e4:	4628      	mov	r0, r5
 80059e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059ea:	f000 bba2 	b.w	8006132 <__malloc_unlock>
 80059ee:	42a3      	cmp	r3, r4
 80059f0:	d90c      	bls.n	8005a0c <_free_r+0x4c>
 80059f2:	6821      	ldr	r1, [r4, #0]
 80059f4:	1862      	adds	r2, r4, r1
 80059f6:	4293      	cmp	r3, r2
 80059f8:	bf04      	itt	eq
 80059fa:	681a      	ldreq	r2, [r3, #0]
 80059fc:	685b      	ldreq	r3, [r3, #4]
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	bf04      	itt	eq
 8005a02:	1852      	addeq	r2, r2, r1
 8005a04:	6022      	streq	r2, [r4, #0]
 8005a06:	6004      	str	r4, [r0, #0]
 8005a08:	e7ec      	b.n	80059e4 <_free_r+0x24>
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	b10a      	cbz	r2, 8005a14 <_free_r+0x54>
 8005a10:	42a2      	cmp	r2, r4
 8005a12:	d9fa      	bls.n	8005a0a <_free_r+0x4a>
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	1858      	adds	r0, r3, r1
 8005a18:	42a0      	cmp	r0, r4
 8005a1a:	d10b      	bne.n	8005a34 <_free_r+0x74>
 8005a1c:	6820      	ldr	r0, [r4, #0]
 8005a1e:	4401      	add	r1, r0
 8005a20:	1858      	adds	r0, r3, r1
 8005a22:	4282      	cmp	r2, r0
 8005a24:	6019      	str	r1, [r3, #0]
 8005a26:	d1dd      	bne.n	80059e4 <_free_r+0x24>
 8005a28:	6810      	ldr	r0, [r2, #0]
 8005a2a:	6852      	ldr	r2, [r2, #4]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	4401      	add	r1, r0
 8005a30:	6019      	str	r1, [r3, #0]
 8005a32:	e7d7      	b.n	80059e4 <_free_r+0x24>
 8005a34:	d902      	bls.n	8005a3c <_free_r+0x7c>
 8005a36:	230c      	movs	r3, #12
 8005a38:	602b      	str	r3, [r5, #0]
 8005a3a:	e7d3      	b.n	80059e4 <_free_r+0x24>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	1821      	adds	r1, r4, r0
 8005a40:	428a      	cmp	r2, r1
 8005a42:	bf04      	itt	eq
 8005a44:	6811      	ldreq	r1, [r2, #0]
 8005a46:	6852      	ldreq	r2, [r2, #4]
 8005a48:	6062      	str	r2, [r4, #4]
 8005a4a:	bf04      	itt	eq
 8005a4c:	1809      	addeq	r1, r1, r0
 8005a4e:	6021      	streq	r1, [r4, #0]
 8005a50:	605c      	str	r4, [r3, #4]
 8005a52:	e7c7      	b.n	80059e4 <_free_r+0x24>
 8005a54:	bd38      	pop	{r3, r4, r5, pc}
 8005a56:	bf00      	nop
 8005a58:	2000025c 	.word	0x2000025c

08005a5c <_malloc_r>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	1ccd      	adds	r5, r1, #3
 8005a60:	f025 0503 	bic.w	r5, r5, #3
 8005a64:	3508      	adds	r5, #8
 8005a66:	2d0c      	cmp	r5, #12
 8005a68:	bf38      	it	cc
 8005a6a:	250c      	movcc	r5, #12
 8005a6c:	2d00      	cmp	r5, #0
 8005a6e:	4606      	mov	r6, r0
 8005a70:	db01      	blt.n	8005a76 <_malloc_r+0x1a>
 8005a72:	42a9      	cmp	r1, r5
 8005a74:	d903      	bls.n	8005a7e <_malloc_r+0x22>
 8005a76:	230c      	movs	r3, #12
 8005a78:	6033      	str	r3, [r6, #0]
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	bd70      	pop	{r4, r5, r6, pc}
 8005a7e:	f000 fb57 	bl	8006130 <__malloc_lock>
 8005a82:	4a21      	ldr	r2, [pc, #132]	; (8005b08 <_malloc_r+0xac>)
 8005a84:	6814      	ldr	r4, [r2, #0]
 8005a86:	4621      	mov	r1, r4
 8005a88:	b991      	cbnz	r1, 8005ab0 <_malloc_r+0x54>
 8005a8a:	4c20      	ldr	r4, [pc, #128]	; (8005b0c <_malloc_r+0xb0>)
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	b91b      	cbnz	r3, 8005a98 <_malloc_r+0x3c>
 8005a90:	4630      	mov	r0, r6
 8005a92:	f000 fb17 	bl	80060c4 <_sbrk_r>
 8005a96:	6020      	str	r0, [r4, #0]
 8005a98:	4629      	mov	r1, r5
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f000 fb12 	bl	80060c4 <_sbrk_r>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d124      	bne.n	8005aee <_malloc_r+0x92>
 8005aa4:	230c      	movs	r3, #12
 8005aa6:	6033      	str	r3, [r6, #0]
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f000 fb42 	bl	8006132 <__malloc_unlock>
 8005aae:	e7e4      	b.n	8005a7a <_malloc_r+0x1e>
 8005ab0:	680b      	ldr	r3, [r1, #0]
 8005ab2:	1b5b      	subs	r3, r3, r5
 8005ab4:	d418      	bmi.n	8005ae8 <_malloc_r+0x8c>
 8005ab6:	2b0b      	cmp	r3, #11
 8005ab8:	d90f      	bls.n	8005ada <_malloc_r+0x7e>
 8005aba:	600b      	str	r3, [r1, #0]
 8005abc:	50cd      	str	r5, [r1, r3]
 8005abe:	18cc      	adds	r4, r1, r3
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f000 fb36 	bl	8006132 <__malloc_unlock>
 8005ac6:	f104 000b 	add.w	r0, r4, #11
 8005aca:	1d23      	adds	r3, r4, #4
 8005acc:	f020 0007 	bic.w	r0, r0, #7
 8005ad0:	1ac3      	subs	r3, r0, r3
 8005ad2:	d0d3      	beq.n	8005a7c <_malloc_r+0x20>
 8005ad4:	425a      	negs	r2, r3
 8005ad6:	50e2      	str	r2, [r4, r3]
 8005ad8:	e7d0      	b.n	8005a7c <_malloc_r+0x20>
 8005ada:	428c      	cmp	r4, r1
 8005adc:	684b      	ldr	r3, [r1, #4]
 8005ade:	bf16      	itet	ne
 8005ae0:	6063      	strne	r3, [r4, #4]
 8005ae2:	6013      	streq	r3, [r2, #0]
 8005ae4:	460c      	movne	r4, r1
 8005ae6:	e7eb      	b.n	8005ac0 <_malloc_r+0x64>
 8005ae8:	460c      	mov	r4, r1
 8005aea:	6849      	ldr	r1, [r1, #4]
 8005aec:	e7cc      	b.n	8005a88 <_malloc_r+0x2c>
 8005aee:	1cc4      	adds	r4, r0, #3
 8005af0:	f024 0403 	bic.w	r4, r4, #3
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d005      	beq.n	8005b04 <_malloc_r+0xa8>
 8005af8:	1a21      	subs	r1, r4, r0
 8005afa:	4630      	mov	r0, r6
 8005afc:	f000 fae2 	bl	80060c4 <_sbrk_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d0cf      	beq.n	8005aa4 <_malloc_r+0x48>
 8005b04:	6025      	str	r5, [r4, #0]
 8005b06:	e7db      	b.n	8005ac0 <_malloc_r+0x64>
 8005b08:	2000025c 	.word	0x2000025c
 8005b0c:	20000260 	.word	0x20000260

08005b10 <__ssputs_r>:
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	688e      	ldr	r6, [r1, #8]
 8005b16:	429e      	cmp	r6, r3
 8005b18:	4682      	mov	sl, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4690      	mov	r8, r2
 8005b1e:	4699      	mov	r9, r3
 8005b20:	d837      	bhi.n	8005b92 <__ssputs_r+0x82>
 8005b22:	898a      	ldrh	r2, [r1, #12]
 8005b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b28:	d031      	beq.n	8005b8e <__ssputs_r+0x7e>
 8005b2a:	6825      	ldr	r5, [r4, #0]
 8005b2c:	6909      	ldr	r1, [r1, #16]
 8005b2e:	1a6f      	subs	r7, r5, r1
 8005b30:	6965      	ldr	r5, [r4, #20]
 8005b32:	2302      	movs	r3, #2
 8005b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b38:	fb95 f5f3 	sdiv	r5, r5, r3
 8005b3c:	f109 0301 	add.w	r3, r9, #1
 8005b40:	443b      	add	r3, r7
 8005b42:	429d      	cmp	r5, r3
 8005b44:	bf38      	it	cc
 8005b46:	461d      	movcc	r5, r3
 8005b48:	0553      	lsls	r3, r2, #21
 8005b4a:	d530      	bpl.n	8005bae <__ssputs_r+0x9e>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	f7ff ff85 	bl	8005a5c <_malloc_r>
 8005b52:	4606      	mov	r6, r0
 8005b54:	b950      	cbnz	r0, 8005b6c <__ssputs_r+0x5c>
 8005b56:	230c      	movs	r3, #12
 8005b58:	f8ca 3000 	str.w	r3, [sl]
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6c:	463a      	mov	r2, r7
 8005b6e:	6921      	ldr	r1, [r4, #16]
 8005b70:	f7ff fddc 	bl	800572c <memcpy>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	6126      	str	r6, [r4, #16]
 8005b82:	6165      	str	r5, [r4, #20]
 8005b84:	443e      	add	r6, r7
 8005b86:	1bed      	subs	r5, r5, r7
 8005b88:	6026      	str	r6, [r4, #0]
 8005b8a:	60a5      	str	r5, [r4, #8]
 8005b8c:	464e      	mov	r6, r9
 8005b8e:	454e      	cmp	r6, r9
 8005b90:	d900      	bls.n	8005b94 <__ssputs_r+0x84>
 8005b92:	464e      	mov	r6, r9
 8005b94:	4632      	mov	r2, r6
 8005b96:	4641      	mov	r1, r8
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	f000 fab0 	bl	80060fe <memmove>
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	1b9b      	subs	r3, r3, r6
 8005ba2:	60a3      	str	r3, [r4, #8]
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	441e      	add	r6, r3
 8005ba8:	6026      	str	r6, [r4, #0]
 8005baa:	2000      	movs	r0, #0
 8005bac:	e7dc      	b.n	8005b68 <__ssputs_r+0x58>
 8005bae:	462a      	mov	r2, r5
 8005bb0:	f000 fac0 	bl	8006134 <_realloc_r>
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d1e2      	bne.n	8005b80 <__ssputs_r+0x70>
 8005bba:	6921      	ldr	r1, [r4, #16]
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	f7ff feff 	bl	80059c0 <_free_r>
 8005bc2:	e7c8      	b.n	8005b56 <__ssputs_r+0x46>

08005bc4 <_svfiprintf_r>:
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	461d      	mov	r5, r3
 8005bca:	898b      	ldrh	r3, [r1, #12]
 8005bcc:	061f      	lsls	r7, r3, #24
 8005bce:	b09d      	sub	sp, #116	; 0x74
 8005bd0:	4680      	mov	r8, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	4616      	mov	r6, r2
 8005bd6:	d50f      	bpl.n	8005bf8 <_svfiprintf_r+0x34>
 8005bd8:	690b      	ldr	r3, [r1, #16]
 8005bda:	b96b      	cbnz	r3, 8005bf8 <_svfiprintf_r+0x34>
 8005bdc:	2140      	movs	r1, #64	; 0x40
 8005bde:	f7ff ff3d 	bl	8005a5c <_malloc_r>
 8005be2:	6020      	str	r0, [r4, #0]
 8005be4:	6120      	str	r0, [r4, #16]
 8005be6:	b928      	cbnz	r0, 8005bf4 <_svfiprintf_r+0x30>
 8005be8:	230c      	movs	r3, #12
 8005bea:	f8c8 3000 	str.w	r3, [r8]
 8005bee:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf2:	e0c8      	b.n	8005d86 <_svfiprintf_r+0x1c2>
 8005bf4:	2340      	movs	r3, #64	; 0x40
 8005bf6:	6163      	str	r3, [r4, #20]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c02:	2330      	movs	r3, #48	; 0x30
 8005c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c08:	9503      	str	r5, [sp, #12]
 8005c0a:	f04f 0b01 	mov.w	fp, #1
 8005c0e:	4637      	mov	r7, r6
 8005c10:	463d      	mov	r5, r7
 8005c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c16:	b10b      	cbz	r3, 8005c1c <_svfiprintf_r+0x58>
 8005c18:	2b25      	cmp	r3, #37	; 0x25
 8005c1a:	d13e      	bne.n	8005c9a <_svfiprintf_r+0xd6>
 8005c1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005c20:	d00b      	beq.n	8005c3a <_svfiprintf_r+0x76>
 8005c22:	4653      	mov	r3, sl
 8005c24:	4632      	mov	r2, r6
 8005c26:	4621      	mov	r1, r4
 8005c28:	4640      	mov	r0, r8
 8005c2a:	f7ff ff71 	bl	8005b10 <__ssputs_r>
 8005c2e:	3001      	adds	r0, #1
 8005c30:	f000 80a4 	beq.w	8005d7c <_svfiprintf_r+0x1b8>
 8005c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c36:	4453      	add	r3, sl
 8005c38:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3a:	783b      	ldrb	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 809d 	beq.w	8005d7c <_svfiprintf_r+0x1b8>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f04f 32ff 	mov.w	r2, #4294967295
 8005c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	9307      	str	r3, [sp, #28]
 8005c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c54:	931a      	str	r3, [sp, #104]	; 0x68
 8005c56:	462f      	mov	r7, r5
 8005c58:	2205      	movs	r2, #5
 8005c5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005c5e:	4850      	ldr	r0, [pc, #320]	; (8005da0 <_svfiprintf_r+0x1dc>)
 8005c60:	f7fa fac6 	bl	80001f0 <memchr>
 8005c64:	9b04      	ldr	r3, [sp, #16]
 8005c66:	b9d0      	cbnz	r0, 8005c9e <_svfiprintf_r+0xda>
 8005c68:	06d9      	lsls	r1, r3, #27
 8005c6a:	bf44      	itt	mi
 8005c6c:	2220      	movmi	r2, #32
 8005c6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c72:	071a      	lsls	r2, r3, #28
 8005c74:	bf44      	itt	mi
 8005c76:	222b      	movmi	r2, #43	; 0x2b
 8005c78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c7c:	782a      	ldrb	r2, [r5, #0]
 8005c7e:	2a2a      	cmp	r2, #42	; 0x2a
 8005c80:	d015      	beq.n	8005cae <_svfiprintf_r+0xea>
 8005c82:	9a07      	ldr	r2, [sp, #28]
 8005c84:	462f      	mov	r7, r5
 8005c86:	2000      	movs	r0, #0
 8005c88:	250a      	movs	r5, #10
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c90:	3b30      	subs	r3, #48	; 0x30
 8005c92:	2b09      	cmp	r3, #9
 8005c94:	d94d      	bls.n	8005d32 <_svfiprintf_r+0x16e>
 8005c96:	b1b8      	cbz	r0, 8005cc8 <_svfiprintf_r+0x104>
 8005c98:	e00f      	b.n	8005cba <_svfiprintf_r+0xf6>
 8005c9a:	462f      	mov	r7, r5
 8005c9c:	e7b8      	b.n	8005c10 <_svfiprintf_r+0x4c>
 8005c9e:	4a40      	ldr	r2, [pc, #256]	; (8005da0 <_svfiprintf_r+0x1dc>)
 8005ca0:	1a80      	subs	r0, r0, r2
 8005ca2:	fa0b f000 	lsl.w	r0, fp, r0
 8005ca6:	4318      	orrs	r0, r3
 8005ca8:	9004      	str	r0, [sp, #16]
 8005caa:	463d      	mov	r5, r7
 8005cac:	e7d3      	b.n	8005c56 <_svfiprintf_r+0x92>
 8005cae:	9a03      	ldr	r2, [sp, #12]
 8005cb0:	1d11      	adds	r1, r2, #4
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	9103      	str	r1, [sp, #12]
 8005cb6:	2a00      	cmp	r2, #0
 8005cb8:	db01      	blt.n	8005cbe <_svfiprintf_r+0xfa>
 8005cba:	9207      	str	r2, [sp, #28]
 8005cbc:	e004      	b.n	8005cc8 <_svfiprintf_r+0x104>
 8005cbe:	4252      	negs	r2, r2
 8005cc0:	f043 0302 	orr.w	r3, r3, #2
 8005cc4:	9207      	str	r2, [sp, #28]
 8005cc6:	9304      	str	r3, [sp, #16]
 8005cc8:	783b      	ldrb	r3, [r7, #0]
 8005cca:	2b2e      	cmp	r3, #46	; 0x2e
 8005ccc:	d10c      	bne.n	8005ce8 <_svfiprintf_r+0x124>
 8005cce:	787b      	ldrb	r3, [r7, #1]
 8005cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cd2:	d133      	bne.n	8005d3c <_svfiprintf_r+0x178>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	1d1a      	adds	r2, r3, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	9203      	str	r2, [sp, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bfb8      	it	lt
 8005ce0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ce4:	3702      	adds	r7, #2
 8005ce6:	9305      	str	r3, [sp, #20]
 8005ce8:	4d2e      	ldr	r5, [pc, #184]	; (8005da4 <_svfiprintf_r+0x1e0>)
 8005cea:	7839      	ldrb	r1, [r7, #0]
 8005cec:	2203      	movs	r2, #3
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f7fa fa7e 	bl	80001f0 <memchr>
 8005cf4:	b138      	cbz	r0, 8005d06 <_svfiprintf_r+0x142>
 8005cf6:	2340      	movs	r3, #64	; 0x40
 8005cf8:	1b40      	subs	r0, r0, r5
 8005cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8005cfe:	9b04      	ldr	r3, [sp, #16]
 8005d00:	4303      	orrs	r3, r0
 8005d02:	3701      	adds	r7, #1
 8005d04:	9304      	str	r3, [sp, #16]
 8005d06:	7839      	ldrb	r1, [r7, #0]
 8005d08:	4827      	ldr	r0, [pc, #156]	; (8005da8 <_svfiprintf_r+0x1e4>)
 8005d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d0e:	2206      	movs	r2, #6
 8005d10:	1c7e      	adds	r6, r7, #1
 8005d12:	f7fa fa6d 	bl	80001f0 <memchr>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d038      	beq.n	8005d8c <_svfiprintf_r+0x1c8>
 8005d1a:	4b24      	ldr	r3, [pc, #144]	; (8005dac <_svfiprintf_r+0x1e8>)
 8005d1c:	bb13      	cbnz	r3, 8005d64 <_svfiprintf_r+0x1a0>
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	3307      	adds	r3, #7
 8005d22:	f023 0307 	bic.w	r3, r3, #7
 8005d26:	3308      	adds	r3, #8
 8005d28:	9303      	str	r3, [sp, #12]
 8005d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2c:	444b      	add	r3, r9
 8005d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d30:	e76d      	b.n	8005c0e <_svfiprintf_r+0x4a>
 8005d32:	fb05 3202 	mla	r2, r5, r2, r3
 8005d36:	2001      	movs	r0, #1
 8005d38:	460f      	mov	r7, r1
 8005d3a:	e7a6      	b.n	8005c8a <_svfiprintf_r+0xc6>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	3701      	adds	r7, #1
 8005d40:	9305      	str	r3, [sp, #20]
 8005d42:	4619      	mov	r1, r3
 8005d44:	250a      	movs	r5, #10
 8005d46:	4638      	mov	r0, r7
 8005d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d4c:	3a30      	subs	r2, #48	; 0x30
 8005d4e:	2a09      	cmp	r2, #9
 8005d50:	d903      	bls.n	8005d5a <_svfiprintf_r+0x196>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0c8      	beq.n	8005ce8 <_svfiprintf_r+0x124>
 8005d56:	9105      	str	r1, [sp, #20]
 8005d58:	e7c6      	b.n	8005ce8 <_svfiprintf_r+0x124>
 8005d5a:	fb05 2101 	mla	r1, r5, r1, r2
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4607      	mov	r7, r0
 8005d62:	e7f0      	b.n	8005d46 <_svfiprintf_r+0x182>
 8005d64:	ab03      	add	r3, sp, #12
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <_svfiprintf_r+0x1ec>)
 8005d6c:	a904      	add	r1, sp, #16
 8005d6e:	4640      	mov	r0, r8
 8005d70:	f3af 8000 	nop.w
 8005d74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d78:	4681      	mov	r9, r0
 8005d7a:	d1d6      	bne.n	8005d2a <_svfiprintf_r+0x166>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	065b      	lsls	r3, r3, #25
 8005d80:	f53f af35 	bmi.w	8005bee <_svfiprintf_r+0x2a>
 8005d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d86:	b01d      	add	sp, #116	; 0x74
 8005d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8c:	ab03      	add	r3, sp, #12
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	4622      	mov	r2, r4
 8005d92:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <_svfiprintf_r+0x1ec>)
 8005d94:	a904      	add	r1, sp, #16
 8005d96:	4640      	mov	r0, r8
 8005d98:	f000 f882 	bl	8005ea0 <_printf_i>
 8005d9c:	e7ea      	b.n	8005d74 <_svfiprintf_r+0x1b0>
 8005d9e:	bf00      	nop
 8005da0:	0800626a 	.word	0x0800626a
 8005da4:	08006270 	.word	0x08006270
 8005da8:	08006274 	.word	0x08006274
 8005dac:	00000000 	.word	0x00000000
 8005db0:	08005b11 	.word	0x08005b11

08005db4 <_printf_common>:
 8005db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db8:	4691      	mov	r9, r2
 8005dba:	461f      	mov	r7, r3
 8005dbc:	688a      	ldr	r2, [r1, #8]
 8005dbe:	690b      	ldr	r3, [r1, #16]
 8005dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	bfb8      	it	lt
 8005dc8:	4613      	movlt	r3, r2
 8005dca:	f8c9 3000 	str.w	r3, [r9]
 8005dce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	b112      	cbz	r2, 8005dde <_printf_common+0x2a>
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f8c9 3000 	str.w	r3, [r9]
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	0699      	lsls	r1, r3, #26
 8005de2:	bf42      	ittt	mi
 8005de4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005de8:	3302      	addmi	r3, #2
 8005dea:	f8c9 3000 	strmi.w	r3, [r9]
 8005dee:	6825      	ldr	r5, [r4, #0]
 8005df0:	f015 0506 	ands.w	r5, r5, #6
 8005df4:	d107      	bne.n	8005e06 <_printf_common+0x52>
 8005df6:	f104 0a19 	add.w	sl, r4, #25
 8005dfa:	68e3      	ldr	r3, [r4, #12]
 8005dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	42ab      	cmp	r3, r5
 8005e04:	dc28      	bgt.n	8005e58 <_printf_common+0xa4>
 8005e06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	3300      	adds	r3, #0
 8005e0e:	bf18      	it	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	0692      	lsls	r2, r2, #26
 8005e14:	d42d      	bmi.n	8005e72 <_printf_common+0xbe>
 8005e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	47c0      	blx	r8
 8005e20:	3001      	adds	r0, #1
 8005e22:	d020      	beq.n	8005e66 <_printf_common+0xb2>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	68e5      	ldr	r5, [r4, #12]
 8005e28:	f8d9 2000 	ldr.w	r2, [r9]
 8005e2c:	f003 0306 	and.w	r3, r3, #6
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	bf08      	it	eq
 8005e34:	1aad      	subeq	r5, r5, r2
 8005e36:	68a3      	ldr	r3, [r4, #8]
 8005e38:	6922      	ldr	r2, [r4, #16]
 8005e3a:	bf0c      	ite	eq
 8005e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e40:	2500      	movne	r5, #0
 8005e42:	4293      	cmp	r3, r2
 8005e44:	bfc4      	itt	gt
 8005e46:	1a9b      	subgt	r3, r3, r2
 8005e48:	18ed      	addgt	r5, r5, r3
 8005e4a:	f04f 0900 	mov.w	r9, #0
 8005e4e:	341a      	adds	r4, #26
 8005e50:	454d      	cmp	r5, r9
 8005e52:	d11a      	bne.n	8005e8a <_printf_common+0xd6>
 8005e54:	2000      	movs	r0, #0
 8005e56:	e008      	b.n	8005e6a <_printf_common+0xb6>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	4630      	mov	r0, r6
 8005e60:	47c0      	blx	r8
 8005e62:	3001      	adds	r0, #1
 8005e64:	d103      	bne.n	8005e6e <_printf_common+0xba>
 8005e66:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6e:	3501      	adds	r5, #1
 8005e70:	e7c3      	b.n	8005dfa <_printf_common+0x46>
 8005e72:	18e1      	adds	r1, r4, r3
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	2030      	movs	r0, #48	; 0x30
 8005e78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e7c:	4422      	add	r2, r4
 8005e7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e86:	3302      	adds	r3, #2
 8005e88:	e7c5      	b.n	8005e16 <_printf_common+0x62>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	4639      	mov	r1, r7
 8005e90:	4630      	mov	r0, r6
 8005e92:	47c0      	blx	r8
 8005e94:	3001      	adds	r0, #1
 8005e96:	d0e6      	beq.n	8005e66 <_printf_common+0xb2>
 8005e98:	f109 0901 	add.w	r9, r9, #1
 8005e9c:	e7d8      	b.n	8005e50 <_printf_common+0x9c>
	...

08005ea0 <_printf_i>:
 8005ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ea4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	7e09      	ldrb	r1, [r1, #24]
 8005eac:	b085      	sub	sp, #20
 8005eae:	296e      	cmp	r1, #110	; 0x6e
 8005eb0:	4617      	mov	r7, r2
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	4698      	mov	r8, r3
 8005eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005eb8:	f000 80b3 	beq.w	8006022 <_printf_i+0x182>
 8005ebc:	d822      	bhi.n	8005f04 <_printf_i+0x64>
 8005ebe:	2963      	cmp	r1, #99	; 0x63
 8005ec0:	d036      	beq.n	8005f30 <_printf_i+0x90>
 8005ec2:	d80a      	bhi.n	8005eda <_printf_i+0x3a>
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	f000 80b9 	beq.w	800603c <_printf_i+0x19c>
 8005eca:	2958      	cmp	r1, #88	; 0x58
 8005ecc:	f000 8083 	beq.w	8005fd6 <_printf_i+0x136>
 8005ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ed4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ed8:	e032      	b.n	8005f40 <_printf_i+0xa0>
 8005eda:	2964      	cmp	r1, #100	; 0x64
 8005edc:	d001      	beq.n	8005ee2 <_printf_i+0x42>
 8005ede:	2969      	cmp	r1, #105	; 0x69
 8005ee0:	d1f6      	bne.n	8005ed0 <_printf_i+0x30>
 8005ee2:	6820      	ldr	r0, [r4, #0]
 8005ee4:	6813      	ldr	r3, [r2, #0]
 8005ee6:	0605      	lsls	r5, r0, #24
 8005ee8:	f103 0104 	add.w	r1, r3, #4
 8005eec:	d52a      	bpl.n	8005f44 <_printf_i+0xa4>
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6011      	str	r1, [r2, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da03      	bge.n	8005efe <_printf_i+0x5e>
 8005ef6:	222d      	movs	r2, #45	; 0x2d
 8005ef8:	425b      	negs	r3, r3
 8005efa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005efe:	486f      	ldr	r0, [pc, #444]	; (80060bc <_printf_i+0x21c>)
 8005f00:	220a      	movs	r2, #10
 8005f02:	e039      	b.n	8005f78 <_printf_i+0xd8>
 8005f04:	2973      	cmp	r1, #115	; 0x73
 8005f06:	f000 809d 	beq.w	8006044 <_printf_i+0x1a4>
 8005f0a:	d808      	bhi.n	8005f1e <_printf_i+0x7e>
 8005f0c:	296f      	cmp	r1, #111	; 0x6f
 8005f0e:	d020      	beq.n	8005f52 <_printf_i+0xb2>
 8005f10:	2970      	cmp	r1, #112	; 0x70
 8005f12:	d1dd      	bne.n	8005ed0 <_printf_i+0x30>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	f043 0320 	orr.w	r3, r3, #32
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	e003      	b.n	8005f26 <_printf_i+0x86>
 8005f1e:	2975      	cmp	r1, #117	; 0x75
 8005f20:	d017      	beq.n	8005f52 <_printf_i+0xb2>
 8005f22:	2978      	cmp	r1, #120	; 0x78
 8005f24:	d1d4      	bne.n	8005ed0 <_printf_i+0x30>
 8005f26:	2378      	movs	r3, #120	; 0x78
 8005f28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f2c:	4864      	ldr	r0, [pc, #400]	; (80060c0 <_printf_i+0x220>)
 8005f2e:	e055      	b.n	8005fdc <_printf_i+0x13c>
 8005f30:	6813      	ldr	r3, [r2, #0]
 8005f32:	1d19      	adds	r1, r3, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6011      	str	r1, [r2, #0]
 8005f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f40:	2301      	movs	r3, #1
 8005f42:	e08c      	b.n	800605e <_printf_i+0x1be>
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6011      	str	r1, [r2, #0]
 8005f48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f4c:	bf18      	it	ne
 8005f4e:	b21b      	sxthne	r3, r3
 8005f50:	e7cf      	b.n	8005ef2 <_printf_i+0x52>
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	6825      	ldr	r5, [r4, #0]
 8005f56:	1d18      	adds	r0, r3, #4
 8005f58:	6010      	str	r0, [r2, #0]
 8005f5a:	0628      	lsls	r0, r5, #24
 8005f5c:	d501      	bpl.n	8005f62 <_printf_i+0xc2>
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	e002      	b.n	8005f68 <_printf_i+0xc8>
 8005f62:	0668      	lsls	r0, r5, #25
 8005f64:	d5fb      	bpl.n	8005f5e <_printf_i+0xbe>
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	4854      	ldr	r0, [pc, #336]	; (80060bc <_printf_i+0x21c>)
 8005f6a:	296f      	cmp	r1, #111	; 0x6f
 8005f6c:	bf14      	ite	ne
 8005f6e:	220a      	movne	r2, #10
 8005f70:	2208      	moveq	r2, #8
 8005f72:	2100      	movs	r1, #0
 8005f74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f78:	6865      	ldr	r5, [r4, #4]
 8005f7a:	60a5      	str	r5, [r4, #8]
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	f2c0 8095 	blt.w	80060ac <_printf_i+0x20c>
 8005f82:	6821      	ldr	r1, [r4, #0]
 8005f84:	f021 0104 	bic.w	r1, r1, #4
 8005f88:	6021      	str	r1, [r4, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d13d      	bne.n	800600a <_printf_i+0x16a>
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	f040 808e 	bne.w	80060b0 <_printf_i+0x210>
 8005f94:	4665      	mov	r5, ip
 8005f96:	2a08      	cmp	r2, #8
 8005f98:	d10b      	bne.n	8005fb2 <_printf_i+0x112>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	07db      	lsls	r3, r3, #31
 8005f9e:	d508      	bpl.n	8005fb2 <_printf_i+0x112>
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	6862      	ldr	r2, [r4, #4]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	bfde      	ittt	le
 8005fa8:	2330      	movle	r3, #48	; 0x30
 8005faa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fb2:	ebac 0305 	sub.w	r3, ip, r5
 8005fb6:	6123      	str	r3, [r4, #16]
 8005fb8:	f8cd 8000 	str.w	r8, [sp]
 8005fbc:	463b      	mov	r3, r7
 8005fbe:	aa03      	add	r2, sp, #12
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f7ff fef6 	bl	8005db4 <_printf_common>
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d14d      	bne.n	8006068 <_printf_i+0x1c8>
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	b005      	add	sp, #20
 8005fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fd6:	4839      	ldr	r0, [pc, #228]	; (80060bc <_printf_i+0x21c>)
 8005fd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005fdc:	6813      	ldr	r3, [r2, #0]
 8005fde:	6821      	ldr	r1, [r4, #0]
 8005fe0:	1d1d      	adds	r5, r3, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6015      	str	r5, [r2, #0]
 8005fe6:	060a      	lsls	r2, r1, #24
 8005fe8:	d50b      	bpl.n	8006002 <_printf_i+0x162>
 8005fea:	07ca      	lsls	r2, r1, #31
 8005fec:	bf44      	itt	mi
 8005fee:	f041 0120 	orrmi.w	r1, r1, #32
 8005ff2:	6021      	strmi	r1, [r4, #0]
 8005ff4:	b91b      	cbnz	r3, 8005ffe <_printf_i+0x15e>
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	f022 0220 	bic.w	r2, r2, #32
 8005ffc:	6022      	str	r2, [r4, #0]
 8005ffe:	2210      	movs	r2, #16
 8006000:	e7b7      	b.n	8005f72 <_printf_i+0xd2>
 8006002:	064d      	lsls	r5, r1, #25
 8006004:	bf48      	it	mi
 8006006:	b29b      	uxthmi	r3, r3
 8006008:	e7ef      	b.n	8005fea <_printf_i+0x14a>
 800600a:	4665      	mov	r5, ip
 800600c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006010:	fb02 3311 	mls	r3, r2, r1, r3
 8006014:	5cc3      	ldrb	r3, [r0, r3]
 8006016:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800601a:	460b      	mov	r3, r1
 800601c:	2900      	cmp	r1, #0
 800601e:	d1f5      	bne.n	800600c <_printf_i+0x16c>
 8006020:	e7b9      	b.n	8005f96 <_printf_i+0xf6>
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	6825      	ldr	r5, [r4, #0]
 8006026:	6961      	ldr	r1, [r4, #20]
 8006028:	1d18      	adds	r0, r3, #4
 800602a:	6010      	str	r0, [r2, #0]
 800602c:	0628      	lsls	r0, r5, #24
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	d501      	bpl.n	8006036 <_printf_i+0x196>
 8006032:	6019      	str	r1, [r3, #0]
 8006034:	e002      	b.n	800603c <_printf_i+0x19c>
 8006036:	066a      	lsls	r2, r5, #25
 8006038:	d5fb      	bpl.n	8006032 <_printf_i+0x192>
 800603a:	8019      	strh	r1, [r3, #0]
 800603c:	2300      	movs	r3, #0
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	4665      	mov	r5, ip
 8006042:	e7b9      	b.n	8005fb8 <_printf_i+0x118>
 8006044:	6813      	ldr	r3, [r2, #0]
 8006046:	1d19      	adds	r1, r3, #4
 8006048:	6011      	str	r1, [r2, #0]
 800604a:	681d      	ldr	r5, [r3, #0]
 800604c:	6862      	ldr	r2, [r4, #4]
 800604e:	2100      	movs	r1, #0
 8006050:	4628      	mov	r0, r5
 8006052:	f7fa f8cd 	bl	80001f0 <memchr>
 8006056:	b108      	cbz	r0, 800605c <_printf_i+0x1bc>
 8006058:	1b40      	subs	r0, r0, r5
 800605a:	6060      	str	r0, [r4, #4]
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	6123      	str	r3, [r4, #16]
 8006060:	2300      	movs	r3, #0
 8006062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006066:	e7a7      	b.n	8005fb8 <_printf_i+0x118>
 8006068:	6923      	ldr	r3, [r4, #16]
 800606a:	462a      	mov	r2, r5
 800606c:	4639      	mov	r1, r7
 800606e:	4630      	mov	r0, r6
 8006070:	47c0      	blx	r8
 8006072:	3001      	adds	r0, #1
 8006074:	d0aa      	beq.n	8005fcc <_printf_i+0x12c>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	079b      	lsls	r3, r3, #30
 800607a:	d413      	bmi.n	80060a4 <_printf_i+0x204>
 800607c:	68e0      	ldr	r0, [r4, #12]
 800607e:	9b03      	ldr	r3, [sp, #12]
 8006080:	4298      	cmp	r0, r3
 8006082:	bfb8      	it	lt
 8006084:	4618      	movlt	r0, r3
 8006086:	e7a3      	b.n	8005fd0 <_printf_i+0x130>
 8006088:	2301      	movs	r3, #1
 800608a:	464a      	mov	r2, r9
 800608c:	4639      	mov	r1, r7
 800608e:	4630      	mov	r0, r6
 8006090:	47c0      	blx	r8
 8006092:	3001      	adds	r0, #1
 8006094:	d09a      	beq.n	8005fcc <_printf_i+0x12c>
 8006096:	3501      	adds	r5, #1
 8006098:	68e3      	ldr	r3, [r4, #12]
 800609a:	9a03      	ldr	r2, [sp, #12]
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	42ab      	cmp	r3, r5
 80060a0:	dcf2      	bgt.n	8006088 <_printf_i+0x1e8>
 80060a2:	e7eb      	b.n	800607c <_printf_i+0x1dc>
 80060a4:	2500      	movs	r5, #0
 80060a6:	f104 0919 	add.w	r9, r4, #25
 80060aa:	e7f5      	b.n	8006098 <_printf_i+0x1f8>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1ac      	bne.n	800600a <_printf_i+0x16a>
 80060b0:	7803      	ldrb	r3, [r0, #0]
 80060b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ba:	e76c      	b.n	8005f96 <_printf_i+0xf6>
 80060bc:	0800627b 	.word	0x0800627b
 80060c0:	0800628c 	.word	0x0800628c

080060c4 <_sbrk_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4c06      	ldr	r4, [pc, #24]	; (80060e0 <_sbrk_r+0x1c>)
 80060c8:	2300      	movs	r3, #0
 80060ca:	4605      	mov	r5, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	6023      	str	r3, [r4, #0]
 80060d0:	f7ff fa92 	bl	80055f8 <_sbrk>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_sbrk_r+0x1a>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	b103      	cbz	r3, 80060de <_sbrk_r+0x1a>
 80060dc:	602b      	str	r3, [r5, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20000478 	.word	0x20000478

080060e4 <__ascii_wctomb>:
 80060e4:	b149      	cbz	r1, 80060fa <__ascii_wctomb+0x16>
 80060e6:	2aff      	cmp	r2, #255	; 0xff
 80060e8:	bf85      	ittet	hi
 80060ea:	238a      	movhi	r3, #138	; 0x8a
 80060ec:	6003      	strhi	r3, [r0, #0]
 80060ee:	700a      	strbls	r2, [r1, #0]
 80060f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80060f4:	bf98      	it	ls
 80060f6:	2001      	movls	r0, #1
 80060f8:	4770      	bx	lr
 80060fa:	4608      	mov	r0, r1
 80060fc:	4770      	bx	lr

080060fe <memmove>:
 80060fe:	4288      	cmp	r0, r1
 8006100:	b510      	push	{r4, lr}
 8006102:	eb01 0302 	add.w	r3, r1, r2
 8006106:	d807      	bhi.n	8006118 <memmove+0x1a>
 8006108:	1e42      	subs	r2, r0, #1
 800610a:	4299      	cmp	r1, r3
 800610c:	d00a      	beq.n	8006124 <memmove+0x26>
 800610e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006112:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006116:	e7f8      	b.n	800610a <memmove+0xc>
 8006118:	4283      	cmp	r3, r0
 800611a:	d9f5      	bls.n	8006108 <memmove+0xa>
 800611c:	1881      	adds	r1, r0, r2
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	42d3      	cmn	r3, r2
 8006122:	d100      	bne.n	8006126 <memmove+0x28>
 8006124:	bd10      	pop	{r4, pc}
 8006126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800612a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800612e:	e7f7      	b.n	8006120 <memmove+0x22>

08006130 <__malloc_lock>:
 8006130:	4770      	bx	lr

08006132 <__malloc_unlock>:
 8006132:	4770      	bx	lr

08006134 <_realloc_r>:
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	4607      	mov	r7, r0
 8006138:	4614      	mov	r4, r2
 800613a:	460e      	mov	r6, r1
 800613c:	b921      	cbnz	r1, 8006148 <_realloc_r+0x14>
 800613e:	4611      	mov	r1, r2
 8006140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006144:	f7ff bc8a 	b.w	8005a5c <_malloc_r>
 8006148:	b922      	cbnz	r2, 8006154 <_realloc_r+0x20>
 800614a:	f7ff fc39 	bl	80059c0 <_free_r>
 800614e:	4625      	mov	r5, r4
 8006150:	4628      	mov	r0, r5
 8006152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006154:	f000 f814 	bl	8006180 <_malloc_usable_size_r>
 8006158:	42a0      	cmp	r0, r4
 800615a:	d20f      	bcs.n	800617c <_realloc_r+0x48>
 800615c:	4621      	mov	r1, r4
 800615e:	4638      	mov	r0, r7
 8006160:	f7ff fc7c 	bl	8005a5c <_malloc_r>
 8006164:	4605      	mov	r5, r0
 8006166:	2800      	cmp	r0, #0
 8006168:	d0f2      	beq.n	8006150 <_realloc_r+0x1c>
 800616a:	4631      	mov	r1, r6
 800616c:	4622      	mov	r2, r4
 800616e:	f7ff fadd 	bl	800572c <memcpy>
 8006172:	4631      	mov	r1, r6
 8006174:	4638      	mov	r0, r7
 8006176:	f7ff fc23 	bl	80059c0 <_free_r>
 800617a:	e7e9      	b.n	8006150 <_realloc_r+0x1c>
 800617c:	4635      	mov	r5, r6
 800617e:	e7e7      	b.n	8006150 <_realloc_r+0x1c>

08006180 <_malloc_usable_size_r>:
 8006180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006184:	1f18      	subs	r0, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfbc      	itt	lt
 800618a:	580b      	ldrlt	r3, [r1, r0]
 800618c:	18c0      	addlt	r0, r0, r3
 800618e:	4770      	bx	lr

08006190 <_init>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr

0800619c <_fini>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr
