
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003964  08003964  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800396c  0800396c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000020  08003994  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003994  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e760  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000216e  00000000  00000000  0002e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  000317a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017028  00000000  00000000  00032508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b456  00000000  00000000  00049530  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000917ee  00000000  00000000  00054986  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ccc  00000000  00000000  000e61f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003920 	.word	0x08003920

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08003920 	.word	0x08003920

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f8d8 	bl	80006b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f003 f8d0 	bl	80036ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f003 f818 	bl	8003540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_IncTick+0x20>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_IncTick+0x24>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <HAL_IncTick+0x24>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000004 	.word	0x20000004
 8000540:	2000003c 	.word	0x2000003c

08000544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return uwTick;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_GetTick+0x14>)
 800054a:	681b      	ldr	r3, [r3, #0]
}
 800054c:	4618      	mov	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	2000003c 	.word	0x2000003c

0800055c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	60d3      	str	r3, [r2, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <__NVIC_GetPriorityGrouping+0x18>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	0a1b      	lsrs	r3, r3, #8
 80005ae:	f003 0307 	and.w	r3, r3, #7
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db0b      	blt.n	80005ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 021f 	and.w	r2, r3, #31
 80005d8:	4907      	ldr	r1, [pc, #28]	; (80005f8 <__NVIC_EnableIRQ+0x38>)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	2001      	movs	r0, #1
 80005e2:	fa00 f202 	lsl.w	r2, r0, r2
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000e100 	.word	0xe000e100

080005fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	db0a      	blt.n	8000626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <__NVIC_SetPriority+0x4c>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	0112      	lsls	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	440b      	add	r3, r1
 8000620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000624:	e00a      	b.n	800063c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <__NVIC_SetPriority+0x50>)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f003 030f 	and.w	r3, r3, #15
 8000632:	3b04      	subs	r3, #4
 8000634:	0112      	lsls	r2, r2, #4
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	440b      	add	r3, r1
 800063a:	761a      	strb	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000650:	b480      	push	{r7}
 8000652:	b089      	sub	sp, #36	; 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f1c3 0307 	rsb	r3, r3, #7
 800066a:	2b04      	cmp	r3, #4
 800066c:	bf28      	it	cs
 800066e:	2304      	movcs	r3, #4
 8000670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3304      	adds	r3, #4
 8000676:	2b06      	cmp	r3, #6
 8000678:	d902      	bls.n	8000680 <NVIC_EncodePriority+0x30>
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3b03      	subs	r3, #3
 800067e:	e000      	b.n	8000682 <NVIC_EncodePriority+0x32>
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 32ff 	mov.w	r2, #4294967295
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43da      	mvns	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	401a      	ands	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000698:	f04f 31ff 	mov.w	r1, #4294967295
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43d9      	mvns	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	4313      	orrs	r3, r2
         );
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3724      	adds	r7, #36	; 0x24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff ff4c 	bl	800055c <__NVIC_SetPriorityGrouping>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006de:	f7ff ff61 	bl	80005a4 <__NVIC_GetPriorityGrouping>
 80006e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	68b9      	ldr	r1, [r7, #8]
 80006e8:	6978      	ldr	r0, [r7, #20]
 80006ea:	f7ff ffb1 	bl	8000650 <NVIC_EncodePriority>
 80006ee:	4602      	mov	r2, r0
 80006f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f4:	4611      	mov	r1, r2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff80 	bl	80005fc <__NVIC_SetPriority>
}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff54 	bl	80005c0 <__NVIC_EnableIRQ>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	e00e      	b.n	8000750 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	795b      	ldrb	r3, [r3, #5]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d105      	bne.n	8000748 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f002 ff24 	bl	8003590 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2201      	movs	r2, #1
 800074c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b02      	cmp	r3, #2
 800076a:	d004      	beq.n	8000776 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00c      	b.n	8000790 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2205      	movs	r2, #5
 800077a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 0201 	bic.w	r2, r2, #1
 800078c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	e159      	b.n	8000a6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007b8:	2201      	movs	r2, #1
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	f040 8148 	bne.w	8000a66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d00b      	beq.n	80007f6 <HAL_GPIO_Init+0x5a>
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d007      	beq.n	80007f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ea:	2b11      	cmp	r3, #17
 80007ec:	d003      	beq.n	80007f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b12      	cmp	r3, #18
 80007f4:	d130      	bne.n	8000858 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	2203      	movs	r2, #3
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	4013      	ands	r3, r2
 800080c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	4313      	orrs	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800082c:	2201      	movs	r2, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	4013      	ands	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	091b      	lsrs	r3, r3, #4
 8000842:	f003 0201 	and.w	r2, r3, #1
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	4313      	orrs	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4013      	ands	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4313      	orrs	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d003      	beq.n	8000898 <HAL_GPIO_Init+0xfc>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b12      	cmp	r3, #18
 8000896:	d123      	bne.n	80008e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	220f      	movs	r2, #15
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	4013      	ands	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	691a      	ldr	r2, [r3, #16]
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	08da      	lsrs	r2, r3, #3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3208      	adds	r2, #8
 80008da:	69b9      	ldr	r1, [r7, #24]
 80008dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0203 	and.w	r2, r3, #3
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4313      	orrs	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	2b00      	cmp	r3, #0
 800091e:	f000 80a2 	beq.w	8000a66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b56      	ldr	r3, [pc, #344]	; (8000a80 <HAL_GPIO_Init+0x2e4>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a55      	ldr	r2, [pc, #340]	; (8000a80 <HAL_GPIO_Init+0x2e4>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b53      	ldr	r3, [pc, #332]	; (8000a80 <HAL_GPIO_Init+0x2e4>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800093e:	4a51      	ldr	r2, [pc, #324]	; (8000a84 <HAL_GPIO_Init+0x2e8>)
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	3302      	adds	r3, #2
 8000946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	220f      	movs	r2, #15
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a48      	ldr	r2, [pc, #288]	; (8000a88 <HAL_GPIO_Init+0x2ec>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d019      	beq.n	800099e <HAL_GPIO_Init+0x202>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a47      	ldr	r2, [pc, #284]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0x1fe>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a46      	ldr	r2, [pc, #280]	; (8000a90 <HAL_GPIO_Init+0x2f4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d00d      	beq.n	8000996 <HAL_GPIO_Init+0x1fa>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a45      	ldr	r2, [pc, #276]	; (8000a94 <HAL_GPIO_Init+0x2f8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d007      	beq.n	8000992 <HAL_GPIO_Init+0x1f6>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <HAL_GPIO_Init+0x2fc>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_GPIO_Init+0x1f2>
 800098a:	2304      	movs	r3, #4
 800098c:	e008      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 800098e:	2307      	movs	r3, #7
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 8000992:	2303      	movs	r3, #3
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 8000996:	2302      	movs	r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 800099e:	2300      	movs	r3, #0
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	f002 0203 	and.w	r2, r2, #3
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	4093      	lsls	r3, r2
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b0:	4934      	ldr	r1, [pc, #208]	; (8000a84 <HAL_GPIO_Init+0x2e8>)
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <HAL_GPIO_Init+0x300>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009e2:	4a2e      	ldr	r2, [pc, #184]	; (8000a9c <HAL_GPIO_Init+0x300>)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e8:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <HAL_GPIO_Init+0x300>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a0c:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a36:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	f67f aea2 	bls.w	80007b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a74:	bf00      	nop
 8000a76:	3724      	adds	r7, #36	; 0x24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40013c00 	.word	0x40013c00

08000aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
 8000aac:	4613      	mov	r3, r2
 8000aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ab0:	787b      	ldrb	r3, [r7, #1]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ab6:	887a      	ldrh	r2, [r7, #2]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000abc:	e003      	b.n	8000ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	041a      	lsls	r2, r3, #16
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	619a      	str	r2, [r3, #24]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e25b      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d075      	beq.n	8000bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000af2:	4ba3      	ldr	r3, [pc, #652]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	f003 030c 	and.w	r3, r3, #12
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d00c      	beq.n	8000b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000afe:	4ba0      	ldr	r3, [pc, #640]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d112      	bne.n	8000b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b0a:	4b9d      	ldr	r3, [pc, #628]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b16:	d10b      	bne.n	8000b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b18:	4b99      	ldr	r3, [pc, #612]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d05b      	beq.n	8000bdc <HAL_RCC_OscConfig+0x108>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d157      	bne.n	8000bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e236      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b38:	d106      	bne.n	8000b48 <HAL_RCC_OscConfig+0x74>
 8000b3a:	4b91      	ldr	r3, [pc, #580]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a90      	ldr	r2, [pc, #576]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	e01d      	b.n	8000b84 <HAL_RCC_OscConfig+0xb0>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b50:	d10c      	bne.n	8000b6c <HAL_RCC_OscConfig+0x98>
 8000b52:	4b8b      	ldr	r3, [pc, #556]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a8a      	ldr	r2, [pc, #552]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	4b88      	ldr	r3, [pc, #544]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a87      	ldr	r2, [pc, #540]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e00b      	b.n	8000b84 <HAL_RCC_OscConfig+0xb0>
 8000b6c:	4b84      	ldr	r3, [pc, #528]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a83      	ldr	r2, [pc, #524]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b81      	ldr	r3, [pc, #516]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a80      	ldr	r2, [pc, #512]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d013      	beq.n	8000bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fcda 	bl	8000544 <HAL_GetTick>
 8000b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b92:	e008      	b.n	8000ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b94:	f7ff fcd6 	bl	8000544 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	2b64      	cmp	r3, #100	; 0x64
 8000ba0:	d901      	bls.n	8000ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e1fb      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba6:	4b76      	ldr	r3, [pc, #472]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f0      	beq.n	8000b94 <HAL_RCC_OscConfig+0xc0>
 8000bb2:	e014      	b.n	8000bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fcc6 	bl	8000544 <HAL_GetTick>
 8000bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bba:	e008      	b.n	8000bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bbc:	f7ff fcc2 	bl	8000544 <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b64      	cmp	r3, #100	; 0x64
 8000bc8:	d901      	bls.n	8000bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e1e7      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bce:	4b6c      	ldr	r3, [pc, #432]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1f0      	bne.n	8000bbc <HAL_RCC_OscConfig+0xe8>
 8000bda:	e000      	b.n	8000bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d063      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bea:	4b65      	ldr	r3, [pc, #404]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 030c 	and.w	r3, r3, #12
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00b      	beq.n	8000c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bf6:	4b62      	ldr	r3, [pc, #392]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d11c      	bne.n	8000c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c02:	4b5f      	ldr	r3, [pc, #380]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d116      	bne.n	8000c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0e:	4b5c      	ldr	r3, [pc, #368]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d005      	beq.n	8000c26 <HAL_RCC_OscConfig+0x152>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d001      	beq.n	8000c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e1bb      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c26:	4b56      	ldr	r3, [pc, #344]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	4952      	ldr	r1, [pc, #328]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000c36:	4313      	orrs	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c3a:	e03a      	b.n	8000cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d020      	beq.n	8000c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c44:	4b4f      	ldr	r3, [pc, #316]	; (8000d84 <HAL_RCC_OscConfig+0x2b0>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c4a:	f7ff fc7b 	bl	8000544 <HAL_GetTick>
 8000c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c50:	e008      	b.n	8000c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c52:	f7ff fc77 	bl	8000544 <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d901      	bls.n	8000c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e19c      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c64:	4b46      	ldr	r3, [pc, #280]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d0f0      	beq.n	8000c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c70:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4940      	ldr	r1, [pc, #256]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000c80:	4313      	orrs	r3, r2
 8000c82:	600b      	str	r3, [r1, #0]
 8000c84:	e015      	b.n	8000cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c86:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <HAL_RCC_OscConfig+0x2b0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c8c:	f7ff fc5a 	bl	8000544 <HAL_GetTick>
 8000c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c92:	e008      	b.n	8000ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c94:	f7ff fc56 	bl	8000544 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d901      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e17b      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f0      	bne.n	8000c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d030      	beq.n	8000d20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d016      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <HAL_RCC_OscConfig+0x2b4>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ccc:	f7ff fc3a 	bl	8000544 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fc36 	bl	8000544 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e15b      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f0      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x200>
 8000cf2:	e015      	b.n	8000d20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <HAL_RCC_OscConfig+0x2b4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fc23 	bl	8000544 <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d02:	f7ff fc1f 	bl	8000544 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e144      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f0      	bne.n	8000d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80a0 	beq.w	8000e6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10f      	bne.n	8000d5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_RCC_OscConfig+0x2b8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d121      	bne.n	8000dae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_RCC_OscConfig+0x2b8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_RCC_OscConfig+0x2b8>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d76:	f7ff fbe5 	bl	8000544 <HAL_GetTick>
 8000d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7c:	e011      	b.n	8000da2 <HAL_RCC_OscConfig+0x2ce>
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	42470000 	.word	0x42470000
 8000d88:	42470e80 	.word	0x42470e80
 8000d8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d90:	f7ff fbd8 	bl	8000544 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e0fd      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da2:	4b81      	ldr	r3, [pc, #516]	; (8000fa8 <HAL_RCC_OscConfig+0x4d4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f0      	beq.n	8000d90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d106      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x2f0>
 8000db6:	4b7d      	ldr	r3, [pc, #500]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dba:	4a7c      	ldr	r2, [pc, #496]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8000dc2:	e01c      	b.n	8000dfe <HAL_RCC_OscConfig+0x32a>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d10c      	bne.n	8000de6 <HAL_RCC_OscConfig+0x312>
 8000dcc:	4b77      	ldr	r3, [pc, #476]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dd0:	4a76      	ldr	r2, [pc, #472]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8000dd8:	4b74      	ldr	r3, [pc, #464]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ddc:	4a73      	ldr	r2, [pc, #460]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6713      	str	r3, [r2, #112]	; 0x70
 8000de4:	e00b      	b.n	8000dfe <HAL_RCC_OscConfig+0x32a>
 8000de6:	4b71      	ldr	r3, [pc, #452]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dea:	4a70      	ldr	r2, [pc, #448]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	6713      	str	r3, [r2, #112]	; 0x70
 8000df2:	4b6e      	ldr	r3, [pc, #440]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df6:	4a6d      	ldr	r2, [pc, #436]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000df8:	f023 0304 	bic.w	r3, r3, #4
 8000dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d015      	beq.n	8000e32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e06:	f7ff fb9d 	bl	8000544 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0c:	e00a      	b.n	8000e24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0e:	f7ff fb99 	bl	8000544 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e0bc      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e24:	4b61      	ldr	r3, [pc, #388]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0ee      	beq.n	8000e0e <HAL_RCC_OscConfig+0x33a>
 8000e30:	e014      	b.n	8000e5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e32:	f7ff fb87 	bl	8000544 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e38:	e00a      	b.n	8000e50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3a:	f7ff fb83 	bl	8000544 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e0a6      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e50:	4b56      	ldr	r3, [pc, #344]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1ee      	bne.n	8000e3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e5c:	7dfb      	ldrb	r3, [r7, #23]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d105      	bne.n	8000e6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e62:	4b52      	ldr	r3, [pc, #328]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a51      	ldr	r2, [pc, #324]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8092 	beq.w	8000f9c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e78:	4b4c      	ldr	r3, [pc, #304]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d05c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d141      	bne.n	8000f10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e8c:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <HAL_RCC_OscConfig+0x4dc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e92:	f7ff fb57 	bl	8000544 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e9a:	f7ff fb53 	bl	8000544 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e078      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eac:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1f0      	bne.n	8000e9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69da      	ldr	r2, [r3, #28]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	019b      	lsls	r3, r3, #6
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ece:	085b      	lsrs	r3, r3, #1
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	041b      	lsls	r3, r3, #16
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eda:	061b      	lsls	r3, r3, #24
 8000edc:	4933      	ldr	r1, [pc, #204]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ee2:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <HAL_RCC_OscConfig+0x4dc>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fb2c 	bl	8000544 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef0:	f7ff fb28 	bl	8000544 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e04d      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x41c>
 8000f0e:	e045      	b.n	8000f9c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_RCC_OscConfig+0x4dc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f16:	f7ff fb15 	bl	8000544 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f1e:	f7ff fb11 	bl	8000544 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e036      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1f0      	bne.n	8000f1e <HAL_RCC_OscConfig+0x44a>
 8000f3c:	e02e      	b.n	8000f9c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e029      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_RCC_OscConfig+0x4d8>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d11c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d115      	bne.n	8000f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f72:	4013      	ands	r3, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d10d      	bne.n	8000f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d106      	bne.n	8000f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d001      	beq.n	8000f9c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40007000 	.word	0x40007000
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	42470060 	.word	0x42470060

08000fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0cc      	b.n	8001162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc8:	4b68      	ldr	r3, [pc, #416]	; (800116c <HAL_RCC_ClockConfig+0x1b8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d90c      	bls.n	8000ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd6:	4b65      	ldr	r3, [pc, #404]	; (800116c <HAL_RCC_ClockConfig+0x1b8>)
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fde:	4b63      	ldr	r3, [pc, #396]	; (800116c <HAL_RCC_ClockConfig+0x1b8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d001      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e0b8      	b.n	8001162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d020      	beq.n	800103e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001008:	4b59      	ldr	r3, [pc, #356]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a58      	ldr	r2, [pc, #352]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 800100e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	4a52      	ldr	r2, [pc, #328]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800102a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800102c:	4b50      	ldr	r3, [pc, #320]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	494d      	ldr	r1, [pc, #308]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 800103a:	4313      	orrs	r3, r2
 800103c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d044      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d107      	bne.n	8001062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d119      	bne.n	8001092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e07f      	b.n	8001162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d003      	beq.n	8001072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106e:	2b03      	cmp	r3, #3
 8001070:	d107      	bne.n	8001082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001072:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e06f      	b.n	8001162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e067      	b.n	8001162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f023 0203 	bic.w	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4934      	ldr	r1, [pc, #208]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010a4:	f7ff fa4e 	bl	8000544 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010aa:	e00a      	b.n	80010c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ac:	f7ff fa4a 	bl	8000544 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e04f      	b.n	8001162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 020c 	and.w	r2, r3, #12
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d1eb      	bne.n	80010ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010d4:	4b25      	ldr	r3, [pc, #148]	; (800116c <HAL_RCC_ClockConfig+0x1b8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d20c      	bcs.n	80010fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_RCC_ClockConfig+0x1b8>)
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <HAL_RCC_ClockConfig+0x1b8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e032      	b.n	8001162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	4916      	ldr	r1, [pc, #88]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d009      	beq.n	800113a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	490e      	ldr	r1, [pc, #56]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	4313      	orrs	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800113a:	f000 f821 	bl	8001180 <HAL_RCC_GetSysClockFreq>
 800113e:	4601      	mov	r1, r0
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_RCC_ClockConfig+0x1c0>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	fa21 f303 	lsr.w	r3, r1, r3
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_RCC_ClockConfig+0x1c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f002 faa6 	bl	80036ac <HAL_InitTick>

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00
 8001170:	40023800 	.word	0x40023800
 8001174:	0800394c 	.word	0x0800394c
 8001178:	2000001c 	.word	0x2000001c
 800117c:	20000000 	.word	0x20000000

08001180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001196:	4b63      	ldr	r3, [pc, #396]	; (8001324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d007      	beq.n	80011b2 <HAL_RCC_GetSysClockFreq+0x32>
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d008      	beq.n	80011b8 <HAL_RCC_GetSysClockFreq+0x38>
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 80b4 	bne.w	8001314 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011ac:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80011ae:	60bb      	str	r3, [r7, #8]
       break;
 80011b0:	e0b3      	b.n	800131a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011b2:	4b5e      	ldr	r3, [pc, #376]	; (800132c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80011b4:	60bb      	str	r3, [r7, #8]
      break;
 80011b6:	e0b0      	b.n	800131a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011b8:	4b5a      	ldr	r3, [pc, #360]	; (8001324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011c2:	4b58      	ldr	r3, [pc, #352]	; (8001324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d04a      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ce:	4b55      	ldr	r3, [pc, #340]	; (8001324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	099b      	lsrs	r3, r3, #6
 80011d4:	f04f 0400 	mov.w	r4, #0
 80011d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	ea03 0501 	and.w	r5, r3, r1
 80011e4:	ea04 0602 	and.w	r6, r4, r2
 80011e8:	4629      	mov	r1, r5
 80011ea:	4632      	mov	r2, r6
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	f04f 0400 	mov.w	r4, #0
 80011f4:	0154      	lsls	r4, r2, #5
 80011f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011fa:	014b      	lsls	r3, r1, #5
 80011fc:	4619      	mov	r1, r3
 80011fe:	4622      	mov	r2, r4
 8001200:	1b49      	subs	r1, r1, r5
 8001202:	eb62 0206 	sbc.w	r2, r2, r6
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	f04f 0400 	mov.w	r4, #0
 800120e:	0194      	lsls	r4, r2, #6
 8001210:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001214:	018b      	lsls	r3, r1, #6
 8001216:	1a5b      	subs	r3, r3, r1
 8001218:	eb64 0402 	sbc.w	r4, r4, r2
 800121c:	f04f 0100 	mov.w	r1, #0
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	00e2      	lsls	r2, r4, #3
 8001226:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800122a:	00d9      	lsls	r1, r3, #3
 800122c:	460b      	mov	r3, r1
 800122e:	4614      	mov	r4, r2
 8001230:	195b      	adds	r3, r3, r5
 8001232:	eb44 0406 	adc.w	r4, r4, r6
 8001236:	f04f 0100 	mov.w	r1, #0
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	0262      	lsls	r2, r4, #9
 8001240:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001244:	0259      	lsls	r1, r3, #9
 8001246:	460b      	mov	r3, r1
 8001248:	4614      	mov	r4, r2
 800124a:	4618      	mov	r0, r3
 800124c:	4621      	mov	r1, r4
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f04f 0400 	mov.w	r4, #0
 8001254:	461a      	mov	r2, r3
 8001256:	4623      	mov	r3, r4
 8001258:	f7fe ffbe 	bl	80001d8 <__aeabi_uldivmod>
 800125c:	4603      	mov	r3, r0
 800125e:	460c      	mov	r4, r1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e049      	b.n	80012f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001264:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	f04f 0400 	mov.w	r4, #0
 800126e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	ea03 0501 	and.w	r5, r3, r1
 800127a:	ea04 0602 	and.w	r6, r4, r2
 800127e:	4629      	mov	r1, r5
 8001280:	4632      	mov	r2, r6
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	f04f 0400 	mov.w	r4, #0
 800128a:	0154      	lsls	r4, r2, #5
 800128c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001290:	014b      	lsls	r3, r1, #5
 8001292:	4619      	mov	r1, r3
 8001294:	4622      	mov	r2, r4
 8001296:	1b49      	subs	r1, r1, r5
 8001298:	eb62 0206 	sbc.w	r2, r2, r6
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	f04f 0400 	mov.w	r4, #0
 80012a4:	0194      	lsls	r4, r2, #6
 80012a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012aa:	018b      	lsls	r3, r1, #6
 80012ac:	1a5b      	subs	r3, r3, r1
 80012ae:	eb64 0402 	sbc.w	r4, r4, r2
 80012b2:	f04f 0100 	mov.w	r1, #0
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	00e2      	lsls	r2, r4, #3
 80012bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012c0:	00d9      	lsls	r1, r3, #3
 80012c2:	460b      	mov	r3, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	195b      	adds	r3, r3, r5
 80012c8:	eb44 0406 	adc.w	r4, r4, r6
 80012cc:	f04f 0100 	mov.w	r1, #0
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	02a2      	lsls	r2, r4, #10
 80012d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012da:	0299      	lsls	r1, r3, #10
 80012dc:	460b      	mov	r3, r1
 80012de:	4614      	mov	r4, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	4621      	mov	r1, r4
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f04f 0400 	mov.w	r4, #0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4623      	mov	r3, r4
 80012ee:	f7fe ff73 	bl	80001d8 <__aeabi_uldivmod>
 80012f2:	4603      	mov	r3, r0
 80012f4:	460c      	mov	r4, r1
 80012f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	0c1b      	lsrs	r3, r3, #16
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	3301      	adds	r3, #1
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001310:	60bb      	str	r3, [r7, #8]
      break;
 8001312:	e002      	b.n	800131a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001316:	60bb      	str	r3, [r7, #8]
      break;
 8001318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800131a:	68bb      	ldr	r3, [r7, #8]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	00f42400 	.word	0x00f42400
 800132c:	007a1200 	.word	0x007a1200

08001330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_RCC_GetHCLKFreq+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2000001c 	.word	0x2000001c

08001348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800134c:	f7ff fff0 	bl	8001330 <HAL_RCC_GetHCLKFreq>
 8001350:	4601      	mov	r1, r0
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	0a9b      	lsrs	r3, r3, #10
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	4a03      	ldr	r2, [pc, #12]	; (800136c <HAL_RCC_GetPCLK1Freq+0x24>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	0800395c 	.word	0x0800395c

08001370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001374:	f7ff ffdc 	bl	8001330 <HAL_RCC_GetHCLKFreq>
 8001378:	4601      	mov	r1, r0
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0b5b      	lsrs	r3, r3, #13
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	0800395c 	.word	0x0800395c

08001398 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	220f      	movs	r2, #15
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_RCC_GetClockConfig+0x5c>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_RCC_GetClockConfig+0x5c>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_RCC_GetClockConfig+0x5c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_RCC_GetClockConfig+0x5c>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_RCC_GetClockConfig+0x60>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 020f 	and.w	r2, r3, #15
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	601a      	str	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d105      	bne.n	8001424 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001420:	2b00      	cmp	r3, #0
 8001422:	d038      	beq.n	8001496 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001424:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800142a:	f7ff f88b 	bl	8000544 <HAL_GetTick>
 800142e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001432:	f7ff f887 	bl	8000544 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0bd      	b.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001444:	4b61      	ldr	r3, [pc, #388]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	019b      	lsls	r3, r3, #6
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	071b      	lsls	r3, r3, #28
 8001462:	495a      	ldr	r1, [pc, #360]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001464:	4313      	orrs	r3, r2
 8001466:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800146a:	4b57      	ldr	r3, [pc, #348]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff f868 	bl	8000544 <HAL_GetTick>
 8001474:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001478:	f7ff f864 	bl	8000544 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e09a      	b.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800148a:	4b50      	ldr	r3, [pc, #320]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8083 	beq.w	80015aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b48      	ldr	r3, [pc, #288]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a47      	ldr	r2, [pc, #284]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b45      	ldr	r3, [pc, #276]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80014c0:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a42      	ldr	r2, [pc, #264]	; (80015d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014cc:	f7ff f83a 	bl	8000544 <HAL_GetTick>
 80014d0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014d4:	f7ff f836 	bl	8000544 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e06c      	b.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014f2:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014fa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d02f      	beq.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d028      	beq.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001510:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001518:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001520:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001526:	4a29      	ldr	r2, [pc, #164]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b01      	cmp	r3, #1
 8001536:	d114      	bne.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff f804 	bl	8000544 <HAL_GetTick>
 800153c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff f800 	bl	8000544 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e034      	b.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0ee      	beq.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800156a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800156e:	d10d      	bne.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001584:	4911      	ldr	r1, [pc, #68]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
 800158a:	e005      	b.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001596:	6093      	str	r3, [r2, #8]
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800159a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	4909      	ldr	r1, [pc, #36]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7d1a      	ldrb	r2, [r3, #20]
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80015bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	42470068 	.word	0x42470068
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000
 80015d4:	42470e40 	.word	0x42470e40
 80015d8:	424711e0 	.word	0x424711e0

080015dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e083      	b.n	80016f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7f5b      	ldrb	r3, [r3, #29]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f001 ffe8 	bl	80035d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	22ca      	movs	r2, #202	; 0xca
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2253      	movs	r2, #83	; 0x53
 8001618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fb84 	bl	8001d28 <RTC_EnterInitMode>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d008      	beq.n	8001638 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2204      	movs	r2, #4
 8001632:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e05e      	b.n	80016f6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800164a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6899      	ldr	r1, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68d2      	ldr	r2, [r2, #12]
 8001672:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6919      	ldr	r1, [r3, #16]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	041a      	lsls	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001696:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10e      	bne.n	80016c4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fb16 	bl	8001cd8 <HAL_RTC_WaitForSynchro>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	22ff      	movs	r2, #255	; 0xff
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2204      	movs	r2, #4
 80016be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e018      	b.n	80016f6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699a      	ldr	r2, [r3, #24]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	22ff      	movs	r2, #255	; 0xff
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
  }
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80016fe:	b590      	push	{r4, r7, lr}
 8001700:	b087      	sub	sp, #28
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	7f1b      	ldrb	r3, [r3, #28]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_RTC_SetTime+0x1c>
 8001716:	2302      	movs	r3, #2
 8001718:	e0aa      	b.n	8001870 <HAL_RTC_SetTime+0x172>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2202      	movs	r2, #2
 8001724:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d126      	bne.n	800177a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2200      	movs	r2, #0
 800173e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fb1b 	bl	8001d80 <RTC_ByteToBcd2>
 800174a:	4603      	mov	r3, r0
 800174c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	785b      	ldrb	r3, [r3, #1]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fb14 	bl	8001d80 <RTC_ByteToBcd2>
 8001758:	4603      	mov	r3, r0
 800175a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800175c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	789b      	ldrb	r3, [r3, #2]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fb0c 	bl	8001d80 <RTC_ByteToBcd2>
 8001768:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800176a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	78db      	ldrb	r3, [r3, #3]
 8001772:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e018      	b.n	80017ac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2200      	movs	r2, #0
 800178c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800179a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80017a0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	78db      	ldrb	r3, [r3, #3]
 80017a6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	22ca      	movs	r2, #202	; 0xca
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2253      	movs	r2, #83	; 0x53
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fab3 	bl	8001d28 <RTC_EnterInitMode>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	22ff      	movs	r2, #255	; 0xff
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2204      	movs	r2, #4
 80017d4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e047      	b.n	8001870 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80017ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80017ee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6899      	ldr	r1, [r3, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	431a      	orrs	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001826:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d111      	bne.n	800185a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fa4e 	bl	8001cd8 <HAL_RTC_WaitForSynchro>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2204      	movs	r2, #4
 800184e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00a      	b.n	8001870 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	22ff      	movs	r2, #255	; 0xff
 8001860:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800186e:	2300      	movs	r3, #0
  }
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}

08001878 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	7f1b      	ldrb	r3, [r3, #28]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_RTC_SetDate+0x1c>
 8001890:	2302      	movs	r3, #2
 8001892:	e094      	b.n	80019be <HAL_RTC_SetDate+0x146>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2201      	movs	r2, #1
 8001898:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2202      	movs	r2, #2
 800189e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10e      	bne.n	80018c4 <HAL_RTC_SetDate+0x4c>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	f023 0310 	bic.w	r3, r3, #16
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	330a      	adds	r3, #10
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d11c      	bne.n	8001904 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	78db      	ldrb	r3, [r3, #3]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fa56 	bl	8001d80 <RTC_ByteToBcd2>
 80018d4:	4603      	mov	r3, r0
 80018d6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	785b      	ldrb	r3, [r3, #1]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fa4f 	bl	8001d80 <RTC_ByteToBcd2>
 80018e2:	4603      	mov	r3, r0
 80018e4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80018e6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	789b      	ldrb	r3, [r3, #2]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fa47 	bl	8001d80 <RTC_ByteToBcd2>
 80018f2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80018f4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80018fe:	4313      	orrs	r3, r2
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e00e      	b.n	8001922 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	78db      	ldrb	r3, [r3, #3]
 8001908:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	785b      	ldrb	r3, [r3, #1]
 800190e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001910:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001916:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800191e:	4313      	orrs	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	22ca      	movs	r2, #202	; 0xca
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2253      	movs	r2, #83	; 0x53
 8001930:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f9f8 	bl	8001d28 <RTC_EnterInitMode>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	22ff      	movs	r2, #255	; 0xff
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2204      	movs	r2, #4
 800194a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e033      	b.n	80019be <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001960:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001964:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001974:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b00      	cmp	r3, #0
 8001982:	d111      	bne.n	80019a8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f9a7 	bl	8001cd8 <HAL_RTC_WaitForSynchro>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	22ff      	movs	r2, #255	; 0xff
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2204      	movs	r2, #4
 800199c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e00a      	b.n	80019be <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2201      	movs	r2, #1
 80019b4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80019bc:	2300      	movs	r3, #0
  }
}
 80019be:	4618      	mov	r0, r3
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
	...

080019c8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80019dc:	4b93      	ldr	r3, [pc, #588]	; (8001c2c <HAL_RTC_SetAlarm_IT+0x264>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a93      	ldr	r2, [pc, #588]	; (8001c30 <HAL_RTC_SetAlarm_IT+0x268>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0adb      	lsrs	r3, r3, #11
 80019e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	7f1b      	ldrb	r3, [r3, #28]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_RTC_SetAlarm_IT+0x36>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e111      	b.n	8001c22 <HAL_RTC_SetAlarm_IT+0x25a>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2202      	movs	r2, #2
 8001a08:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d137      	bne.n	8001a80 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2200      	movs	r2, #0
 8001a22:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f9a9 	bl	8001d80 <RTC_ByteToBcd2>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f9a2 	bl	8001d80 <RTC_ByteToBcd2>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a40:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f99a 	bl	8001d80 <RTC_ByteToBcd2>
 8001a4c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001a4e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	78db      	ldrb	r3, [r3, #3]
 8001a56:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001a58:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f98c 	bl	8001d80 <RTC_ByteToBcd2>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001a6c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001a74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e023      	b.n	8001ac8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2200      	movs	r2, #0
 8001a92:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001aa0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001aa6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	78db      	ldrb	r3, [r3, #3]
 8001aac:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001aae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001ab8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001abe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	22ca      	movs	r2, #202	; 0xca
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2253      	movs	r2, #83	; 0x53
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aec:	d141      	bne.n	8001b72 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001afc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001b0e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	1e5a      	subs	r2, r3, #1
 8001b14:	617a      	str	r2, [r7, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10b      	bne.n	8001b32 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	22ff      	movs	r2, #255	; 0xff
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2203      	movs	r2, #3
 8001b26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e077      	b.n	8001c22 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0e7      	beq.n	8001b10 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b5e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	e040      	b.n	8001bf4 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b80:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001b92:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	1e5a      	subs	r2, r3, #1
 8001b98:	617a      	str	r2, [r7, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	22ff      	movs	r2, #255	; 0xff
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e035      	b.n	8001c22 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0e7      	beq.n	8001b94 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bf2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_RTC_SetAlarm_IT+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_RTC_SetAlarm_IT+0x26c>)
 8001bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfe:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_RTC_SetAlarm_IT+0x26c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_RTC_SetAlarm_IT+0x26c>)
 8001c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	22ff      	movs	r2, #255	; 0xff
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000001c 	.word	0x2000001c
 8001c30:	10624dd3 	.word	0x10624dd3
 8001c34:	40013c00 	.word	0x40013c00

08001c38 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d012      	beq.n	8001c74 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f831 	bl	8001cc4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001c72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d012      	beq.n	8001ca8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f893 	bl	8001dbc <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001ca6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8001caa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cae:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	775a      	strb	r2, [r3, #29]
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cf2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7fe fc26 	bl	8000544 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001cfa:	e009      	b.n	8001d10 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001cfc:	f7fe fc22 	bl	8000544 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d0a:	d901      	bls.n	8001d10 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e007      	b.n	8001d20 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0ee      	beq.n	8001cfc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d119      	bne.n	8001d76 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d4c:	f7fe fbfa 	bl	8000544 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001d52:	e009      	b.n	8001d68 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d54:	f7fe fbf6 	bl	8000544 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d62:	d901      	bls.n	8001d68 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e007      	b.n	8001d78 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ee      	beq.n	8001d54 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8001d8e:	e005      	b.n	8001d9c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	3b0a      	subs	r3, #10
 8001d9a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b09      	cmp	r3, #9
 8001da0:	d8f6      	bhi.n	8001d90 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b2db      	uxtb	r3, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e01d      	b.n	8001e1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f815 	bl	8001e26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f000 f968 	bl	80020e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b06      	cmp	r3, #6
 8001e62:	d007      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d122      	bne.n	8001ede <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d11b      	bne.n	8001ede <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f06f 0202 	mvn.w	r2, #2
 8001eae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8ee 	bl	80020a6 <HAL_TIM_IC_CaptureCallback>
 8001eca:	e005      	b.n	8001ed8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8e0 	bl	8002092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8f1 	bl	80020ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d122      	bne.n	8001f32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d11b      	bne.n	8001f32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f06f 0204 	mvn.w	r2, #4
 8001f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f8c4 	bl	80020a6 <HAL_TIM_IC_CaptureCallback>
 8001f1e:	e005      	b.n	8001f2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8b6 	bl	8002092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8c7 	bl	80020ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d122      	bne.n	8001f86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11b      	bne.n	8001f86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f06f 0208 	mvn.w	r2, #8
 8001f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f89a 	bl	80020a6 <HAL_TIM_IC_CaptureCallback>
 8001f72:	e005      	b.n	8001f80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f88c 	bl	8002092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f89d 	bl	80020ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d122      	bne.n	8001fda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d11b      	bne.n	8001fda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f06f 0210 	mvn.w	r2, #16
 8001faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2208      	movs	r2, #8
 8001fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f870 	bl	80020a6 <HAL_TIM_IC_CaptureCallback>
 8001fc6:	e005      	b.n	8001fd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f862 	bl	8002092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f873 	bl	80020ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d10e      	bne.n	8002006 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f06f 0201 	mvn.w	r2, #1
 8001ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f001 fa83 	bl	800350c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d10e      	bne.n	8002032 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b80      	cmp	r3, #128	; 0x80
 8002020:	d107      	bne.n	8002032 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800202a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8e3 	bl	80021f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d10e      	bne.n	800205e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d107      	bne.n	800205e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f838 	bl	80020ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b20      	cmp	r3, #32
 800206a:	d10e      	bne.n	800208a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b20      	cmp	r3, #32
 8002078:	d107      	bne.n	800208a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f06f 0220 	mvn.w	r2, #32
 8002082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f8ad 	bl	80021e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <TIM_Base_SetConfig+0xe4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00f      	beq.n	800211c <TIM_Base_SetConfig+0x38>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002102:	d00b      	beq.n	800211c <TIM_Base_SetConfig+0x38>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a31      	ldr	r2, [pc, #196]	; (80021cc <TIM_Base_SetConfig+0xe8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <TIM_Base_SetConfig+0x38>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a30      	ldr	r2, [pc, #192]	; (80021d0 <TIM_Base_SetConfig+0xec>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0x38>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <TIM_Base_SetConfig+0xf0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d108      	bne.n	800212e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <TIM_Base_SetConfig+0xe4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01b      	beq.n	800216e <TIM_Base_SetConfig+0x8a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213c:	d017      	beq.n	800216e <TIM_Base_SetConfig+0x8a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <TIM_Base_SetConfig+0xe8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <TIM_Base_SetConfig+0x8a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <TIM_Base_SetConfig+0xec>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00f      	beq.n	800216e <TIM_Base_SetConfig+0x8a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <TIM_Base_SetConfig+0xf0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00b      	beq.n	800216e <TIM_Base_SetConfig+0x8a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1f      	ldr	r2, [pc, #124]	; (80021d8 <TIM_Base_SetConfig+0xf4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <TIM_Base_SetConfig+0x8a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <TIM_Base_SetConfig+0xf8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <TIM_Base_SetConfig+0x8a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <TIM_Base_SetConfig+0xfc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <TIM_Base_SetConfig+0xe4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d103      	bne.n	80021b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	615a      	str	r2, [r3, #20]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40000400 	.word	0x40000400
 80021d0:	40000800 	.word	0x40000800
 80021d4:	40000c00 	.word	0x40000c00
 80021d8:	40014000 	.word	0x40014000
 80021dc:	40014400 	.word	0x40014400
 80021e0:	40014800 	.word	0x40014800

080021e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e03f      	b.n	800229e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f001 f9ea 	bl	800360c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fb97 	bl	8002984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b088      	sub	sp, #32
 80022aa:	af02      	add	r7, sp, #8
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	f040 8083 	bne.w	80023ce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_UART_Transmit+0x2e>
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e07b      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Transmit+0x40>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e074      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2221      	movs	r2, #33	; 0x21
 80022f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022fc:	f7fe f922 	bl	8000544 <HAL_GetTick>
 8002300:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	88fa      	ldrh	r2, [r7, #6]
 8002306:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002316:	e042      	b.n	800239e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232e:	d122      	bne.n	8002376 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2200      	movs	r2, #0
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f9b6 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e042      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3302      	adds	r3, #2
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	e017      	b.n	800239e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3301      	adds	r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	e013      	b.n	800239e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2200      	movs	r2, #0
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f993 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e01f      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1b7      	bne.n	8002318 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2200      	movs	r2, #0
 80023b0:	2140      	movs	r1, #64	; 0x40
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f97a 	bl	80026ac <UART_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e006      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d140      	bne.n	8002474 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_UART_Receive_IT+0x26>
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e039      	b.n	8002476 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_UART_Receive_IT+0x38>
 800240c:	2302      	movs	r3, #2
 800240e:	e032      	b.n	8002476 <HAL_UART_Receive_IT+0x9e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	88fa      	ldrh	r2, [r7, #6]
 8002428:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2222      	movs	r2, #34	; 0x22
 8002434:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10d      	bne.n	80024d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_UART_IRQHandler+0x52>
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f9d6 	bl	8002880 <UART_Receive_IT>
      return;
 80024d4:	e0d1      	b.n	800267a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80b0 	beq.w	800263e <HAL_UART_IRQHandler+0x1ba>
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_UART_IRQHandler+0x70>
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a5 	beq.w	800263e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_UART_IRQHandler+0x90>
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_UART_IRQHandler+0xb0>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	f043 0202 	orr.w	r2, r3, #2
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_UART_IRQHandler+0xd0>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	f043 0204 	orr.w	r2, r3, #4
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00f      	beq.n	800257e <HAL_UART_IRQHandler+0xfa>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d104      	bne.n	8002572 <HAL_UART_IRQHandler+0xee>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	f043 0208 	orr.w	r2, r3, #8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d078      	beq.n	8002678 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_UART_IRQHandler+0x11c>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f970 	bl	8002880 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <HAL_UART_IRQHandler+0x144>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d031      	beq.n	800262c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f8b9 	bl	8002740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d123      	bne.n	8002624 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	4a21      	ldr	r2, [pc, #132]	; (8002680 <HAL_UART_IRQHandler+0x1fc>)
 80025fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe f8a9 	bl	8000758 <HAL_DMA_Abort_IT>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d016      	beq.n	800263a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002616:	4610      	mov	r0, r2
 8002618:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261a:	e00e      	b.n	800263a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f83b 	bl	8002698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002622:	e00a      	b.n	800263a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f837 	bl	8002698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262a:	e006      	b.n	800263a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f833 	bl	8002698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002638:	e01e      	b.n	8002678 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263a:	bf00      	nop
    return;
 800263c:	e01c      	b.n	8002678 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_UART_IRQHandler+0x1d6>
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8a6 	bl	80027a4 <UART_Transmit_IT>
    return;
 8002658:	e00f      	b.n	800267a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_UART_IRQHandler+0x1f6>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8ee 	bl	8002850 <UART_EndTransmit_IT>
    return;
 8002674:	bf00      	nop
 8002676:	e000      	b.n	800267a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002678:	bf00      	nop
  }
}
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	0800277d 	.word	0x0800277d

08002684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026bc:	e02c      	b.n	8002718 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d028      	beq.n	8002718 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <UART_WaitOnFlagUntilTimeout+0x30>
 80026cc:	f7fd ff3a 	bl	8000544 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d21d      	bcs.n	8002718 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e00f      	b.n	8002738 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	429a      	cmp	r2, r3
 8002734:	d0c3      	beq.n	80026be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002756:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff ff7e 	bl	8002698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b21      	cmp	r3, #33	; 0x21
 80027b6:	d144      	bne.n	8002842 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d11a      	bne.n	80027f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	1c9a      	adds	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	621a      	str	r2, [r3, #32]
 80027ea:	e00e      	b.n	800280a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	621a      	str	r2, [r3, #32]
 80027f6:	e008      	b.n	800280a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	1c59      	adds	r1, r3, #1
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6211      	str	r1, [r2, #32]
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29b      	uxth	r3, r3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4619      	mov	r1, r3
 8002818:	84d1      	strh	r1, [r2, #38]	; 0x26
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10f      	bne.n	800283e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800282c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002866:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff07 	bl	8002684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b22      	cmp	r3, #34	; 0x22
 8002892:	d171      	bne.n	8002978 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289c:	d123      	bne.n	80028e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10e      	bne.n	80028ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	1c9a      	adds	r2, r3, #2
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
 80028c8:	e029      	b.n	800291e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
 80028e4:	e01b      	b.n	800291e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6858      	ldr	r0, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	1c59      	adds	r1, r3, #1
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6291      	str	r1, [r2, #40]	; 0x28
 80028fe:	b2c2      	uxtb	r2, r0
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e00c      	b.n	800291e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	1c58      	adds	r0, r3, #1
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	6288      	str	r0, [r1, #40]	; 0x28
 8002916:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29b      	uxth	r3, r3
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4619      	mov	r1, r3
 800292c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800292e:	2b00      	cmp	r3, #0
 8002930:	d120      	bne.n	8002974 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0220 	bic.w	r2, r2, #32
 8002940:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002950:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fd62 	bl	8003434 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e002      	b.n	800297a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029c6:	f023 030c 	bic.w	r3, r3, #12
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	68f9      	ldr	r1, [r7, #12]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f2:	f040 818b 	bne.w	8002d0c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4ac1      	ldr	r2, [pc, #772]	; (8002d00 <UART_SetConfig+0x37c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d005      	beq.n	8002a0c <UART_SetConfig+0x88>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4abf      	ldr	r2, [pc, #764]	; (8002d04 <UART_SetConfig+0x380>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	f040 80bd 	bne.w	8002b86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a0c:	f7fe fcb0 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 8002a10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	461d      	mov	r5, r3
 8002a16:	f04f 0600 	mov.w	r6, #0
 8002a1a:	46a8      	mov	r8, r5
 8002a1c:	46b1      	mov	r9, r6
 8002a1e:	eb18 0308 	adds.w	r3, r8, r8
 8002a22:	eb49 0409 	adc.w	r4, r9, r9
 8002a26:	4698      	mov	r8, r3
 8002a28:	46a1      	mov	r9, r4
 8002a2a:	eb18 0805 	adds.w	r8, r8, r5
 8002a2e:	eb49 0906 	adc.w	r9, r9, r6
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a46:	4688      	mov	r8, r1
 8002a48:	4691      	mov	r9, r2
 8002a4a:	eb18 0005 	adds.w	r0, r8, r5
 8002a4e:	eb49 0106 	adc.w	r1, r9, r6
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	461d      	mov	r5, r3
 8002a58:	f04f 0600 	mov.w	r6, #0
 8002a5c:	196b      	adds	r3, r5, r5
 8002a5e:	eb46 0406 	adc.w	r4, r6, r6
 8002a62:	461a      	mov	r2, r3
 8002a64:	4623      	mov	r3, r4
 8002a66:	f7fd fbb7 	bl	80001d8 <__aeabi_uldivmod>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4ba5      	ldr	r3, [pc, #660]	; (8002d08 <UART_SetConfig+0x384>)
 8002a72:	fba3 2302 	umull	r2, r3, r3, r2
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	461d      	mov	r5, r3
 8002a80:	f04f 0600 	mov.w	r6, #0
 8002a84:	46a9      	mov	r9, r5
 8002a86:	46b2      	mov	sl, r6
 8002a88:	eb19 0309 	adds.w	r3, r9, r9
 8002a8c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a90:	4699      	mov	r9, r3
 8002a92:	46a2      	mov	sl, r4
 8002a94:	eb19 0905 	adds.w	r9, r9, r5
 8002a98:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a9c:	f04f 0100 	mov.w	r1, #0
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ab0:	4689      	mov	r9, r1
 8002ab2:	4692      	mov	sl, r2
 8002ab4:	eb19 0005 	adds.w	r0, r9, r5
 8002ab8:	eb4a 0106 	adc.w	r1, sl, r6
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	f04f 0600 	mov.w	r6, #0
 8002ac6:	196b      	adds	r3, r5, r5
 8002ac8:	eb46 0406 	adc.w	r4, r6, r6
 8002acc:	461a      	mov	r2, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	f7fd fb82 	bl	80001d8 <__aeabi_uldivmod>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b8b      	ldr	r3, [pc, #556]	; (8002d08 <UART_SetConfig+0x384>)
 8002adc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	2164      	movs	r1, #100	; 0x64
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	3332      	adds	r3, #50	; 0x32
 8002aee:	4a86      	ldr	r2, [pc, #536]	; (8002d08 <UART_SetConfig+0x384>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002afc:	4498      	add	r8, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	461d      	mov	r5, r3
 8002b02:	f04f 0600 	mov.w	r6, #0
 8002b06:	46a9      	mov	r9, r5
 8002b08:	46b2      	mov	sl, r6
 8002b0a:	eb19 0309 	adds.w	r3, r9, r9
 8002b0e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b12:	4699      	mov	r9, r3
 8002b14:	46a2      	mov	sl, r4
 8002b16:	eb19 0905 	adds.w	r9, r9, r5
 8002b1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b1e:	f04f 0100 	mov.w	r1, #0
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b32:	4689      	mov	r9, r1
 8002b34:	4692      	mov	sl, r2
 8002b36:	eb19 0005 	adds.w	r0, r9, r5
 8002b3a:	eb4a 0106 	adc.w	r1, sl, r6
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	461d      	mov	r5, r3
 8002b44:	f04f 0600 	mov.w	r6, #0
 8002b48:	196b      	adds	r3, r5, r5
 8002b4a:	eb46 0406 	adc.w	r4, r6, r6
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4623      	mov	r3, r4
 8002b52:	f7fd fb41 	bl	80001d8 <__aeabi_uldivmod>
 8002b56:	4603      	mov	r3, r0
 8002b58:	460c      	mov	r4, r1
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <UART_SetConfig+0x384>)
 8002b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2164      	movs	r1, #100	; 0x64
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	3332      	adds	r3, #50	; 0x32
 8002b70:	4a65      	ldr	r2, [pc, #404]	; (8002d08 <UART_SetConfig+0x384>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	f003 0207 	and.w	r2, r3, #7
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4442      	add	r2, r8
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	e26f      	b.n	8003066 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b86:	f7fe fbdf 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 8002b8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	461d      	mov	r5, r3
 8002b90:	f04f 0600 	mov.w	r6, #0
 8002b94:	46a8      	mov	r8, r5
 8002b96:	46b1      	mov	r9, r6
 8002b98:	eb18 0308 	adds.w	r3, r8, r8
 8002b9c:	eb49 0409 	adc.w	r4, r9, r9
 8002ba0:	4698      	mov	r8, r3
 8002ba2:	46a1      	mov	r9, r4
 8002ba4:	eb18 0805 	adds.w	r8, r8, r5
 8002ba8:	eb49 0906 	adc.w	r9, r9, r6
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bbc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bc0:	4688      	mov	r8, r1
 8002bc2:	4691      	mov	r9, r2
 8002bc4:	eb18 0005 	adds.w	r0, r8, r5
 8002bc8:	eb49 0106 	adc.w	r1, r9, r6
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	461d      	mov	r5, r3
 8002bd2:	f04f 0600 	mov.w	r6, #0
 8002bd6:	196b      	adds	r3, r5, r5
 8002bd8:	eb46 0406 	adc.w	r4, r6, r6
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	f7fd fafa 	bl	80001d8 <__aeabi_uldivmod>
 8002be4:	4603      	mov	r3, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <UART_SetConfig+0x384>)
 8002bec:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	461d      	mov	r5, r3
 8002bfa:	f04f 0600 	mov.w	r6, #0
 8002bfe:	46a9      	mov	r9, r5
 8002c00:	46b2      	mov	sl, r6
 8002c02:	eb19 0309 	adds.w	r3, r9, r9
 8002c06:	eb4a 040a 	adc.w	r4, sl, sl
 8002c0a:	4699      	mov	r9, r3
 8002c0c:	46a2      	mov	sl, r4
 8002c0e:	eb19 0905 	adds.w	r9, r9, r5
 8002c12:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c2a:	4689      	mov	r9, r1
 8002c2c:	4692      	mov	sl, r2
 8002c2e:	eb19 0005 	adds.w	r0, r9, r5
 8002c32:	eb4a 0106 	adc.w	r1, sl, r6
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	f04f 0600 	mov.w	r6, #0
 8002c40:	196b      	adds	r3, r5, r5
 8002c42:	eb46 0406 	adc.w	r4, r6, r6
 8002c46:	461a      	mov	r2, r3
 8002c48:	4623      	mov	r3, r4
 8002c4a:	f7fd fac5 	bl	80001d8 <__aeabi_uldivmod>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	460c      	mov	r4, r1
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <UART_SetConfig+0x384>)
 8002c56:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2164      	movs	r1, #100	; 0x64
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	3332      	adds	r3, #50	; 0x32
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <UART_SetConfig+0x384>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c76:	4498      	add	r8, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	461d      	mov	r5, r3
 8002c7c:	f04f 0600 	mov.w	r6, #0
 8002c80:	46a9      	mov	r9, r5
 8002c82:	46b2      	mov	sl, r6
 8002c84:	eb19 0309 	adds.w	r3, r9, r9
 8002c88:	eb4a 040a 	adc.w	r4, sl, sl
 8002c8c:	4699      	mov	r9, r3
 8002c8e:	46a2      	mov	sl, r4
 8002c90:	eb19 0905 	adds.w	r9, r9, r5
 8002c94:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c98:	f04f 0100 	mov.w	r1, #0
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ca8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cac:	4689      	mov	r9, r1
 8002cae:	4692      	mov	sl, r2
 8002cb0:	eb19 0005 	adds.w	r0, r9, r5
 8002cb4:	eb4a 0106 	adc.w	r1, sl, r6
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	461d      	mov	r5, r3
 8002cbe:	f04f 0600 	mov.w	r6, #0
 8002cc2:	196b      	adds	r3, r5, r5
 8002cc4:	eb46 0406 	adc.w	r4, r6, r6
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	f7fd fa84 	bl	80001d8 <__aeabi_uldivmod>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <UART_SetConfig+0x384>)
 8002cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	2164      	movs	r1, #100	; 0x64
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	3332      	adds	r3, #50	; 0x32
 8002cea:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <UART_SetConfig+0x384>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	f003 0207 	and.w	r2, r3, #7
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4442      	add	r2, r8
 8002cfc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002cfe:	e1b2      	b.n	8003066 <UART_SetConfig+0x6e2>
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40011400 	.word	0x40011400
 8002d08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4ad7      	ldr	r2, [pc, #860]	; (8003070 <UART_SetConfig+0x6ec>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d005      	beq.n	8002d22 <UART_SetConfig+0x39e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4ad6      	ldr	r2, [pc, #856]	; (8003074 <UART_SetConfig+0x6f0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	f040 80d1 	bne.w	8002ec4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d22:	f7fe fb25 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 8002d26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	469a      	mov	sl, r3
 8002d2c:	f04f 0b00 	mov.w	fp, #0
 8002d30:	46d0      	mov	r8, sl
 8002d32:	46d9      	mov	r9, fp
 8002d34:	eb18 0308 	adds.w	r3, r8, r8
 8002d38:	eb49 0409 	adc.w	r4, r9, r9
 8002d3c:	4698      	mov	r8, r3
 8002d3e:	46a1      	mov	r9, r4
 8002d40:	eb18 080a 	adds.w	r8, r8, sl
 8002d44:	eb49 090b 	adc.w	r9, r9, fp
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d5c:	4688      	mov	r8, r1
 8002d5e:	4691      	mov	r9, r2
 8002d60:	eb1a 0508 	adds.w	r5, sl, r8
 8002d64:	eb4b 0609 	adc.w	r6, fp, r9
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	f04f 0400 	mov.w	r4, #0
 8002d7a:	0094      	lsls	r4, r2, #2
 8002d7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d80:	008b      	lsls	r3, r1, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	4623      	mov	r3, r4
 8002d86:	4628      	mov	r0, r5
 8002d88:	4631      	mov	r1, r6
 8002d8a:	f7fd fa25 	bl	80001d8 <__aeabi_uldivmod>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	461a      	mov	r2, r3
 8002d94:	4bb8      	ldr	r3, [pc, #736]	; (8003078 <UART_SetConfig+0x6f4>)
 8002d96:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	469b      	mov	fp, r3
 8002da4:	f04f 0c00 	mov.w	ip, #0
 8002da8:	46d9      	mov	r9, fp
 8002daa:	46e2      	mov	sl, ip
 8002dac:	eb19 0309 	adds.w	r3, r9, r9
 8002db0:	eb4a 040a 	adc.w	r4, sl, sl
 8002db4:	4699      	mov	r9, r3
 8002db6:	46a2      	mov	sl, r4
 8002db8:	eb19 090b 	adds.w	r9, r9, fp
 8002dbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dd4:	4689      	mov	r9, r1
 8002dd6:	4692      	mov	sl, r2
 8002dd8:	eb1b 0509 	adds.w	r5, fp, r9
 8002ddc:	eb4c 060a 	adc.w	r6, ip, sl
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4619      	mov	r1, r3
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	f04f 0400 	mov.w	r4, #0
 8002df2:	0094      	lsls	r4, r2, #2
 8002df4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002df8:	008b      	lsls	r3, r1, #2
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	4628      	mov	r0, r5
 8002e00:	4631      	mov	r1, r6
 8002e02:	f7fd f9e9 	bl	80001d8 <__aeabi_uldivmod>
 8002e06:	4603      	mov	r3, r0
 8002e08:	460c      	mov	r4, r1
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b9a      	ldr	r3, [pc, #616]	; (8003078 <UART_SetConfig+0x6f4>)
 8002e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2164      	movs	r1, #100	; 0x64
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	3332      	adds	r3, #50	; 0x32
 8002e20:	4a95      	ldr	r2, [pc, #596]	; (8003078 <UART_SetConfig+0x6f4>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2c:	4498      	add	r8, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	469b      	mov	fp, r3
 8002e32:	f04f 0c00 	mov.w	ip, #0
 8002e36:	46d9      	mov	r9, fp
 8002e38:	46e2      	mov	sl, ip
 8002e3a:	eb19 0309 	adds.w	r3, r9, r9
 8002e3e:	eb4a 040a 	adc.w	r4, sl, sl
 8002e42:	4699      	mov	r9, r3
 8002e44:	46a2      	mov	sl, r4
 8002e46:	eb19 090b 	adds.w	r9, r9, fp
 8002e4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e62:	4689      	mov	r9, r1
 8002e64:	4692      	mov	sl, r2
 8002e66:	eb1b 0509 	adds.w	r5, fp, r9
 8002e6a:	eb4c 060a 	adc.w	r6, ip, sl
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4619      	mov	r1, r3
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	f04f 0400 	mov.w	r4, #0
 8002e80:	0094      	lsls	r4, r2, #2
 8002e82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e86:	008b      	lsls	r3, r1, #2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	4631      	mov	r1, r6
 8002e90:	f7fd f9a2 	bl	80001d8 <__aeabi_uldivmod>
 8002e94:	4603      	mov	r3, r0
 8002e96:	460c      	mov	r4, r1
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b77      	ldr	r3, [pc, #476]	; (8003078 <UART_SetConfig+0x6f4>)
 8002e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	2164      	movs	r1, #100	; 0x64
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	3332      	adds	r3, #50	; 0x32
 8002eae:	4a72      	ldr	r2, [pc, #456]	; (8003078 <UART_SetConfig+0x6f4>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4442      	add	r2, r8
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	e0d0      	b.n	8003066 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f7fe fa40 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 8002ec8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	469a      	mov	sl, r3
 8002ece:	f04f 0b00 	mov.w	fp, #0
 8002ed2:	46d0      	mov	r8, sl
 8002ed4:	46d9      	mov	r9, fp
 8002ed6:	eb18 0308 	adds.w	r3, r8, r8
 8002eda:	eb49 0409 	adc.w	r4, r9, r9
 8002ede:	4698      	mov	r8, r3
 8002ee0:	46a1      	mov	r9, r4
 8002ee2:	eb18 080a 	adds.w	r8, r8, sl
 8002ee6:	eb49 090b 	adc.w	r9, r9, fp
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ef6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002efa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002efe:	4688      	mov	r8, r1
 8002f00:	4691      	mov	r9, r2
 8002f02:	eb1a 0508 	adds.w	r5, sl, r8
 8002f06:	eb4b 0609 	adc.w	r6, fp, r9
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	f04f 0400 	mov.w	r4, #0
 8002f1c:	0094      	lsls	r4, r2, #2
 8002f1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f22:	008b      	lsls	r3, r1, #2
 8002f24:	461a      	mov	r2, r3
 8002f26:	4623      	mov	r3, r4
 8002f28:	4628      	mov	r0, r5
 8002f2a:	4631      	mov	r1, r6
 8002f2c:	f7fd f954 	bl	80001d8 <__aeabi_uldivmod>
 8002f30:	4603      	mov	r3, r0
 8002f32:	460c      	mov	r4, r1
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b50      	ldr	r3, [pc, #320]	; (8003078 <UART_SetConfig+0x6f4>)
 8002f38:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	469b      	mov	fp, r3
 8002f46:	f04f 0c00 	mov.w	ip, #0
 8002f4a:	46d9      	mov	r9, fp
 8002f4c:	46e2      	mov	sl, ip
 8002f4e:	eb19 0309 	adds.w	r3, r9, r9
 8002f52:	eb4a 040a 	adc.w	r4, sl, sl
 8002f56:	4699      	mov	r9, r3
 8002f58:	46a2      	mov	sl, r4
 8002f5a:	eb19 090b 	adds.w	r9, r9, fp
 8002f5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f76:	4689      	mov	r9, r1
 8002f78:	4692      	mov	sl, r2
 8002f7a:	eb1b 0509 	adds.w	r5, fp, r9
 8002f7e:	eb4c 060a 	adc.w	r6, ip, sl
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4619      	mov	r1, r3
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	f04f 0400 	mov.w	r4, #0
 8002f94:	0094      	lsls	r4, r2, #2
 8002f96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f9a:	008b      	lsls	r3, r1, #2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	4631      	mov	r1, r6
 8002fa4:	f7fd f918 	bl	80001d8 <__aeabi_uldivmod>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b32      	ldr	r3, [pc, #200]	; (8003078 <UART_SetConfig+0x6f4>)
 8002fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	2164      	movs	r1, #100	; 0x64
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	3332      	adds	r3, #50	; 0x32
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <UART_SetConfig+0x6f4>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fce:	4498      	add	r8, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	469b      	mov	fp, r3
 8002fd4:	f04f 0c00 	mov.w	ip, #0
 8002fd8:	46d9      	mov	r9, fp
 8002fda:	46e2      	mov	sl, ip
 8002fdc:	eb19 0309 	adds.w	r3, r9, r9
 8002fe0:	eb4a 040a 	adc.w	r4, sl, sl
 8002fe4:	4699      	mov	r9, r3
 8002fe6:	46a2      	mov	sl, r4
 8002fe8:	eb19 090b 	adds.w	r9, r9, fp
 8002fec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003000:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003004:	4689      	mov	r9, r1
 8003006:	4692      	mov	sl, r2
 8003008:	eb1b 0509 	adds.w	r5, fp, r9
 800300c:	eb4c 060a 	adc.w	r6, ip, sl
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4619      	mov	r1, r3
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	0094      	lsls	r4, r2, #2
 8003024:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003028:	008b      	lsls	r3, r1, #2
 800302a:	461a      	mov	r2, r3
 800302c:	4623      	mov	r3, r4
 800302e:	4628      	mov	r0, r5
 8003030:	4631      	mov	r1, r6
 8003032:	f7fd f8d1 	bl	80001d8 <__aeabi_uldivmod>
 8003036:	4603      	mov	r3, r0
 8003038:	460c      	mov	r4, r1
 800303a:	461a      	mov	r2, r3
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <UART_SetConfig+0x6f4>)
 800303e:	fba3 1302 	umull	r1, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2164      	movs	r1, #100	; 0x64
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	3332      	adds	r3, #50	; 0x32
 8003050:	4a09      	ldr	r2, [pc, #36]	; (8003078 <UART_SetConfig+0x6f4>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4442      	add	r2, r8
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	e7ff      	b.n	8003066 <UART_SetConfig+0x6e2>
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003070:	40011000 	.word	0x40011000
 8003074:	40011400 	.word	0x40011400
 8003078:	51eb851f 	.word	0x51eb851f

0800307c <bufferInit>:
	
}s_Buff;

//void bufferInit(t_Buff buffer);

void bufferInit(s_Buff *buffer){
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e007      	b.n	800309a <bufferInit+0x1e>
		buffer->m_p_rx_buffer[i] = 0;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3301      	adds	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b13      	cmp	r3, #19
 800309e:	ddf4      	ble.n	800308a <bufferInit+0xe>
	}
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030b0:	f7fd fa12 	bl	80004d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  commands.m_ping.m_size = 4;
 80030b4:	4b17      	ldr	r3, [pc, #92]	; (8003114 <main+0x68>)
 80030b6:	2204      	movs	r2, #4
 80030b8:	73da      	strb	r2, [r3, #15]
  strncpy((char *)commands.m_ping.m_p_name, "ping\n", commands.m_ping.m_size);
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <main+0x68>)
 80030bc:	7bdb      	ldrb	r3, [r3, #15]
 80030be:	461a      	mov	r2, r3
 80030c0:	4915      	ldr	r1, [pc, #84]	; (8003118 <main+0x6c>)
 80030c2:	4814      	ldr	r0, [pc, #80]	; (8003114 <main+0x68>)
 80030c4:	f000 fc16 	bl	80038f4 <strncpy>

  commands.m_version.m_size = 5;
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <main+0x68>)
 80030ca:	2205      	movs	r2, #5
 80030cc:	77da      	strb	r2, [r3, #31]
  strncpy((char *)commands.m_version.m_p_name, (char *)m_p_version, commands.m_version.m_size);
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <main+0x68>)
 80030d0:	7fdb      	ldrb	r3, [r3, #31]
 80030d2:	461a      	mov	r2, r3
 80030d4:	4911      	ldr	r1, [pc, #68]	; (800311c <main+0x70>)
 80030d6:	4812      	ldr	r0, [pc, #72]	; (8003120 <main+0x74>)
 80030d8:	f000 fc0c 	bl	80038f4 <strncpy>

  s_Buffer.m_rx_index = 0;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <main+0x78>)
 80030de:	2200      	movs	r2, #0
 80030e0:	751a      	strb	r2, [r3, #20]
  s_Buffer.m_state = e_buff_ready;
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <main+0x78>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	759a      	strb	r2, [r3, #22]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030e8:	f000 f824 	bl	8003134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030ec:	f000 f970 	bl	80033d0 <MX_GPIO_Init>
  MX_CRC_Init();
 80030f0:	f000 f8a4 	bl	800323c <MX_CRC_Init>
  MX_RTC_Init();
 80030f4:	f000 f8b6 	bl	8003264 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80030f8:	f000 f940 	bl	800337c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &s_Buffer.m_single_char, 1);
 80030fc:	2201      	movs	r2, #1
 80030fe:	490a      	ldr	r1, [pc, #40]	; (8003128 <main+0x7c>)
 8003100:	480a      	ldr	r0, [pc, #40]	; (800312c <main+0x80>)
 8003102:	f7ff f969 	bl	80023d8 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, m_p_startup_data, m_p_startup_data_length, 10);
 8003106:	230a      	movs	r3, #10
 8003108:	220c      	movs	r2, #12
 800310a:	4909      	ldr	r1, [pc, #36]	; (8003130 <main+0x84>)
 800310c:	4807      	ldr	r0, [pc, #28]	; (800312c <main+0x80>)
 800310e:	f7ff f8ca 	bl	80022a6 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003112:	e7fe      	b.n	8003112 <main+0x66>
 8003114:	200000c0 	.word	0x200000c0
 8003118:	08003938 	.word	0x08003938
 800311c:	20000008 	.word	0x20000008
 8003120:	200000d0 	.word	0x200000d0
 8003124:	20000040 	.word	0x20000040
 8003128:	20000055 	.word	0x20000055
 800312c:	20000080 	.word	0x20000080
 8003130:	20000010 	.word	0x20000010

08003134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b09a      	sub	sp, #104	; 0x68
 8003138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800313a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800313e:	2230      	movs	r2, #48	; 0x30
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fbbc 	bl	80038c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003158:	f107 030c 	add.w	r3, r7, #12
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
 8003168:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	4b31      	ldr	r3, [pc, #196]	; (8003234 <SystemClock_Config+0x100>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a30      	ldr	r2, [pc, #192]	; (8003234 <SystemClock_Config+0x100>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <SystemClock_Config+0x100>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <SystemClock_Config+0x104>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2a      	ldr	r2, [pc, #168]	; (8003238 <SystemClock_Config+0x104>)
 8003190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <SystemClock_Config+0x104>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80031a2:	230a      	movs	r3, #10
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031a6:	2301      	movs	r3, #1
 80031a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031aa:	2310      	movs	r3, #16
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80031ae:	2301      	movs	r3, #1
 80031b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031b2:	2302      	movs	r3, #2
 80031b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031b6:	2300      	movs	r3, #0
 80031b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 80031ba:	2310      	movs	r3, #16
 80031bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 80031be:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80031c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80031c4:	2304      	movs	r3, #4
 80031c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031c8:	2304      	movs	r3, #4
 80031ca:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fc7f 	bl	8000ad4 <HAL_RCC_OscConfig>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80031dc:	f000 f9a8 	bl	8003530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031e0:	230f      	movs	r3, #15
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031e4:	2302      	movs	r3, #2
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031f2:	2300      	movs	r3, #0
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fa:	2102      	movs	r1, #2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd fed9 	bl	8000fb4 <HAL_RCC_ClockConfig>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8003208:	f000 f992 	bl	8003530 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800320c:	2302      	movs	r3, #2
 800320e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003214:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe f8ee 	bl	80013fc <HAL_RCCEx_PeriphCLKConfig>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8003226:	f000 f983 	bl	8003530 <Error_Handler>
  }
}
 800322a:	bf00      	nop
 800322c:	3768      	adds	r7, #104	; 0x68
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000

0800323c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <MX_CRC_Init+0x20>)
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <MX_CRC_Init+0x24>)
 8003244:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <MX_CRC_Init+0x20>)
 8003248:	f7fd fa6a 	bl	8000720 <HAL_CRC_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003252:	f000 f96d 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000058 	.word	0x20000058
 8003260:	40023000 	.word	0x40023000

08003264 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b090      	sub	sp, #64	; 0x40
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800326a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800327a:	2300      	movs	r3, #0
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800327e:	463b      	mov	r3, r7
 8003280:	2228      	movs	r2, #40	; 0x28
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fb1b 	bl	80038c0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800328a:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <MX_RTC_Init+0x110>)
 800328c:	4a3a      	ldr	r2, [pc, #232]	; (8003378 <MX_RTC_Init+0x114>)
 800328e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003290:	4b38      	ldr	r3, [pc, #224]	; (8003374 <MX_RTC_Init+0x110>)
 8003292:	2200      	movs	r2, #0
 8003294:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003296:	4b37      	ldr	r3, [pc, #220]	; (8003374 <MX_RTC_Init+0x110>)
 8003298:	227f      	movs	r2, #127	; 0x7f
 800329a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <MX_RTC_Init+0x110>)
 800329e:	22ff      	movs	r2, #255	; 0xff
 80032a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <MX_RTC_Init+0x110>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <MX_RTC_Init+0x110>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <MX_RTC_Init+0x110>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032b4:	482f      	ldr	r0, [pc, #188]	; (8003374 <MX_RTC_Init+0x110>)
 80032b6:	f7fe f991 	bl	80015dc <HAL_RTC_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80032c0:	f000 f936 	bl	8003530 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032da:	2300      	movs	r3, #0
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80032de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032e2:	2200      	movs	r2, #0
 80032e4:	4619      	mov	r1, r3
 80032e6:	4823      	ldr	r0, [pc, #140]	; (8003374 <MX_RTC_Init+0x110>)
 80032e8:	f7fe fa09 	bl	80016fe <HAL_RTC_SetTime>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80032f2:	f000 f91d 	bl	8003530 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80032fc:	2301      	movs	r3, #1
 80032fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800330e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003312:	2200      	movs	r2, #0
 8003314:	4619      	mov	r1, r3
 8003316:	4817      	ldr	r0, [pc, #92]	; (8003374 <MX_RTC_Init+0x110>)
 8003318:	f7fe faae 	bl	8001878 <HAL_RTC_SetDate>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003322:	f000 f905 	bl	8003530 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 800332e:	2301      	movs	r3, #1
 8003330:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003356:	463b      	mov	r3, r7
 8003358:	2200      	movs	r2, #0
 800335a:	4619      	mov	r1, r3
 800335c:	4805      	ldr	r0, [pc, #20]	; (8003374 <MX_RTC_Init+0x110>)
 800335e:	f7fe fb33 	bl	80019c8 <HAL_RTC_SetAlarm_IT>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003368:	f000 f8e2 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800336c:	bf00      	nop
 800336e:	3740      	adds	r7, #64	; 0x40
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000060 	.word	0x20000060
 8003378:	40002800 	.word	0x40002800

0800337c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <MX_USART2_UART_Init+0x50>)
 8003384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 8003388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800338c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 80033a2:	220c      	movs	r2, #12
 80033a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033b2:	4805      	ldr	r0, [pc, #20]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 80033b4:	f7fe ff2a 	bl	800220c <HAL_UART_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033be:	f000 f8b7 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000080 	.word	0x20000080
 80033cc:	40004400 	.word	0x40004400

080033d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e4:	2300      	movs	r3, #0
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <MX_GPIO_Init+0x5c>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	4a0f      	ldr	r2, [pc, #60]	; (800342c <MX_GPIO_Init+0x5c>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6313      	str	r3, [r2, #48]	; 0x30
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <MX_GPIO_Init+0x5c>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003400:	2200      	movs	r2, #0
 8003402:	2120      	movs	r1, #32
 8003404:	480a      	ldr	r0, [pc, #40]	; (8003430 <MX_GPIO_Init+0x60>)
 8003406:	f7fd fb4b 	bl	8000aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800340a:	2320      	movs	r3, #32
 800340c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340e:	2301      	movs	r3, #1
 8003410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4804      	ldr	r0, [pc, #16]	; (8003430 <MX_GPIO_Init+0x60>)
 8003420:	f7fd f9bc 	bl	800079c <HAL_GPIO_Init>

}
 8003424:	bf00      	nop
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	40020000 	.word	0x40020000

08003434 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	/*if(!s_Buffer.m_rx_index)
	{
		s_Buffer.m_state = e_buff_busy;
	}*/

	if (s_Buffer.m_single_char != '\n')
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 800343e:	7d5b      	ldrb	r3, [r3, #21]
 8003440:	2b0a      	cmp	r3, #10
 8003442:	d011      	beq.n	8003468 <HAL_UART_RxCpltCallback+0x34>
	{
		if(s_Buffer.m_rx_index <= BUFFER_SIZE)
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 8003446:	7d1b      	ldrb	r3, [r3, #20]
 8003448:	2b14      	cmp	r3, #20
 800344a:	d819      	bhi.n	8003480 <HAL_UART_RxCpltCallback+0x4c>
		{
			s_Buffer.m_p_rx_buffer[s_Buffer.m_rx_index] = s_Buffer.m_single_char;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 800344e:	7d1b      	ldrb	r3, [r3, #20]
 8003450:	461a      	mov	r2, r3
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 8003454:	7d59      	ldrb	r1, [r3, #21]
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 8003458:	5499      	strb	r1, [r3, r2]
			s_Buffer.m_rx_index++;
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 800345c:	7d1b      	ldrb	r3, [r3, #20]
 800345e:	3301      	adds	r3, #1
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 8003464:	751a      	strb	r2, [r3, #20]
 8003466:	e00b      	b.n	8003480 <HAL_UART_RxCpltCallback+0x4c>
		}
	}
	else if (s_Buffer.m_single_char == '\n'){
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 800346a:	7d5b      	ldrb	r3, [r3, #21]
 800346c:	2b0a      	cmp	r3, #10
 800346e:	d107      	bne.n	8003480 <HAL_UART_RxCpltCallback+0x4c>
		whichCommand();
 8003470:	f000 f816 	bl	80034a0 <whichCommand>
		bufferInit(&s_Buffer);
 8003474:	4807      	ldr	r0, [pc, #28]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 8003476:	f7ff fe01 	bl	800307c <bufferInit>
		s_Buffer.m_rx_index = 0;
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 800347c:	2200      	movs	r2, #0
 800347e:	751a      	strb	r2, [r3, #20]
	}

	HAL_UART_Receive_IT(&huart2, &s_Buffer.m_single_char, 1);
 8003480:	2201      	movs	r2, #1
 8003482:	4905      	ldr	r1, [pc, #20]	; (8003498 <HAL_UART_RxCpltCallback+0x64>)
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <HAL_UART_RxCpltCallback+0x68>)
 8003486:	f7fe ffa7 	bl	80023d8 <HAL_UART_Receive_IT>

}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000040 	.word	0x20000040
 8003498:	20000055 	.word	0x20000055
 800349c:	20000080 	.word	0x20000080

080034a0 <whichCommand>:

void whichCommand(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
	if(strncmp((char*)s_Buffer.m_p_rx_buffer, (char *)commands.m_ping.m_p_name, s_Buffer.m_rx_index + 1)==0){
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <whichCommand+0x58>)
 80034a6:	7d1b      	ldrb	r3, [r3, #20]
 80034a8:	3301      	adds	r3, #1
 80034aa:	461a      	mov	r2, r3
 80034ac:	4913      	ldr	r1, [pc, #76]	; (80034fc <whichCommand+0x5c>)
 80034ae:	4812      	ldr	r0, [pc, #72]	; (80034f8 <whichCommand+0x58>)
 80034b0:	f000 fa0e 	bl	80038d0 <strncmp>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <whichCommand+0x2c>
		HAL_UART_Transmit(&huart2, commands.m_ping.m_p_name, commands.m_ping.m_size, 10);
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <whichCommand+0x5c>)
 80034bc:	7bdb      	ldrb	r3, [r3, #15]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	230a      	movs	r3, #10
 80034c2:	490e      	ldr	r1, [pc, #56]	; (80034fc <whichCommand+0x5c>)
 80034c4:	480e      	ldr	r0, [pc, #56]	; (8003500 <whichCommand+0x60>)
 80034c6:	f7fe feee 	bl	80022a6 <HAL_UART_Transmit>
	}
	else if (strncmp((char*)s_Buffer.m_p_rx_buffer, "get_version", s_Buffer.m_rx_index + 1)==0){
		HAL_UART_Transmit(&huart2, commands.m_version.m_p_name, commands.m_version.m_size, 10);
	}
}
 80034ca:	e012      	b.n	80034f2 <whichCommand+0x52>
	else if (strncmp((char*)s_Buffer.m_p_rx_buffer, "get_version", s_Buffer.m_rx_index + 1)==0){
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <whichCommand+0x58>)
 80034ce:	7d1b      	ldrb	r3, [r3, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	461a      	mov	r2, r3
 80034d4:	490b      	ldr	r1, [pc, #44]	; (8003504 <whichCommand+0x64>)
 80034d6:	4808      	ldr	r0, [pc, #32]	; (80034f8 <whichCommand+0x58>)
 80034d8:	f000 f9fa 	bl	80038d0 <strncmp>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <whichCommand+0x52>
		HAL_UART_Transmit(&huart2, commands.m_version.m_p_name, commands.m_version.m_size, 10);
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <whichCommand+0x5c>)
 80034e4:	7fdb      	ldrb	r3, [r3, #31]
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	230a      	movs	r3, #10
 80034ea:	4907      	ldr	r1, [pc, #28]	; (8003508 <whichCommand+0x68>)
 80034ec:	4804      	ldr	r0, [pc, #16]	; (8003500 <whichCommand+0x60>)
 80034ee:	f7fe feda 	bl	80022a6 <HAL_UART_Transmit>
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000040 	.word	0x20000040
 80034fc:	200000c0 	.word	0x200000c0
 8003500:	20000080 	.word	0x20000080
 8003504:	08003940 	.word	0x08003940
 8003508:	200000d0 	.word	0x200000d0

0800350c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800351e:	f7fc fffd 	bl	800051c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000

08003530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_MspInit+0x4c>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	4a0f      	ldr	r2, [pc, #60]	; (800358c <HAL_MspInit+0x4c>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_MspInit+0x4c>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_MspInit+0x4c>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	4a08      	ldr	r2, [pc, #32]	; (800358c <HAL_MspInit+0x4c>)
 800356c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003570:	6413      	str	r3, [r2, #64]	; 0x40
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_MspInit+0x4c>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800357e:	2007      	movs	r0, #7
 8003580:	f7fd f899 	bl	80006b6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <HAL_CRC_MspInit+0x3c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10d      	bne.n	80035be <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_CRC_MspInit+0x40>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_CRC_MspInit+0x40>)
 80035ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_CRC_MspInit+0x40>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40023000 	.word	0x40023000
 80035d0:	40023800 	.word	0x40023800

080035d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_RTC_MspInit+0x30>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10a      	bne.n	80035fc <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_RTC_MspInit+0x34>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	2100      	movs	r1, #0
 80035f0:	2029      	movs	r0, #41	; 0x29
 80035f2:	f7fd f86b 	bl	80006cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80035f6:	2029      	movs	r0, #41	; 0x29
 80035f8:	f7fd f884 	bl	8000704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40002800 	.word	0x40002800
 8003608:	42470e3c 	.word	0x42470e3c

0800360c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_UART_MspInit+0x94>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d133      	bne.n	8003696 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <HAL_UART_MspInit+0x98>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <HAL_UART_MspInit+0x98>)
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_UART_MspInit+0x98>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_UART_MspInit+0x98>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <HAL_UART_MspInit+0x98>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_UART_MspInit+0x98>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003666:	230c      	movs	r3, #12
 8003668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003672:	2303      	movs	r3, #3
 8003674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003676:	2307      	movs	r3, #7
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	4619      	mov	r1, r3
 8003680:	4809      	ldr	r0, [pc, #36]	; (80036a8 <HAL_UART_MspInit+0x9c>)
 8003682:	f7fd f88b 	bl	800079c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	2026      	movs	r0, #38	; 0x26
 800368c:	f7fd f81e 	bl	80006cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003690:	2026      	movs	r0, #38	; 0x26
 8003692:	f7fd f837 	bl	8000704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003696:	bf00      	nop
 8003698:	3728      	adds	r7, #40	; 0x28
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40004400 	.word	0x40004400
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020000 	.word	0x40020000

080036ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80036bc:	2200      	movs	r2, #0
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	2019      	movs	r0, #25
 80036c2:	f7fd f803 	bl	80006cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80036c6:	2019      	movs	r0, #25
 80036c8:	f7fd f81c 	bl	8000704 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	4b1e      	ldr	r3, [pc, #120]	; (800374c <HAL_InitTick+0xa0>)
 80036d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d4:	4a1d      	ldr	r2, [pc, #116]	; (800374c <HAL_InitTick+0xa0>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6453      	str	r3, [r2, #68]	; 0x44
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_InitTick+0xa0>)
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036e8:	f107 0210 	add.w	r2, r7, #16
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd fe50 	bl	8001398 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80036f8:	f7fd fe3a 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 80036fc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <HAL_InitTick+0xa4>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0c9b      	lsrs	r3, r3, #18
 8003708:	3b01      	subs	r3, #1
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_InitTick+0xa8>)
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <HAL_InitTick+0xac>)
 8003710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <HAL_InitTick+0xa8>)
 8003714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003718:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800371a:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <HAL_InitTick+0xa8>)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_InitTick+0xa8>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_InitTick+0xa8>)
 8003728:	2200      	movs	r2, #0
 800372a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800372c:	4809      	ldr	r0, [pc, #36]	; (8003754 <HAL_InitTick+0xa8>)
 800372e:	f7fe fb4f 	bl	8001dd0 <HAL_TIM_Base_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003738:	4806      	ldr	r0, [pc, #24]	; (8003754 <HAL_InitTick+0xa8>)
 800373a:	f7fe fb7e 	bl	8001e3a <HAL_TIM_Base_Start_IT>
 800373e:	4603      	mov	r3, r0
 8003740:	e000      	b.n	8003744 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	3730      	adds	r7, #48	; 0x30
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	431bde83 	.word	0x431bde83
 8003754:	200000e0 	.word	0x200000e0
 8003758:	40010000 	.word	0x40010000

0800375c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <HardFault_Handler+0x4>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <MemManage_Handler+0x4>

08003776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377a:	e7fe      	b.n	800377a <BusFault_Handler+0x4>

0800377c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003780:	e7fe      	b.n	8003780 <UsageFault_Handler+0x4>

08003782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80037c2:	f7fe fb5e 	bl	8001e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200000e0 	.word	0x200000e0

080037d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <USART2_IRQHandler+0x10>)
 80037d6:	f7fe fe55 	bl	8002484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000080 	.word	0x20000080

080037e4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <RTC_Alarm_IRQHandler+0x10>)
 80037ea:	f7fe fa25 	bl	8001c38 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000060 	.word	0x20000060

080037f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <SystemInit+0x28>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	4a07      	ldr	r2, [pc, #28]	; (8003820 <SystemInit+0x28>)
 8003804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <SystemInit+0x28>)
 800380e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003812:	609a      	str	r2, [r3, #8]
#endif
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800385c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003828:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800382a:	e003      	b.n	8003834 <LoopCopyDataInit>

0800382c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800382e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003830:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003832:	3104      	adds	r1, #4

08003834 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003834:	480b      	ldr	r0, [pc, #44]	; (8003864 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003838:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800383a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800383c:	d3f6      	bcc.n	800382c <CopyDataInit>
  ldr  r2, =_sbss
 800383e:	4a0b      	ldr	r2, [pc, #44]	; (800386c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003840:	e002      	b.n	8003848 <LoopFillZerobss>

08003842 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003842:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003844:	f842 3b04 	str.w	r3, [r2], #4

08003848 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800384a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800384c:	d3f9      	bcc.n	8003842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800384e:	f7ff ffd3 	bl	80037f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003852:	f000 f811 	bl	8003878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003856:	f7ff fc29 	bl	80030ac <main>
  bx  lr    
 800385a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800385c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003860:	08003974 	.word	0x08003974
  ldr  r0, =_sdata
 8003864:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003868:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 800386c:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8003870:	20000120 	.word	0x20000120

08003874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003874:	e7fe      	b.n	8003874 <ADC_IRQHandler>
	...

08003878 <__libc_init_array>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4e0d      	ldr	r6, [pc, #52]	; (80038b0 <__libc_init_array+0x38>)
 800387c:	4c0d      	ldr	r4, [pc, #52]	; (80038b4 <__libc_init_array+0x3c>)
 800387e:	1ba4      	subs	r4, r4, r6
 8003880:	10a4      	asrs	r4, r4, #2
 8003882:	2500      	movs	r5, #0
 8003884:	42a5      	cmp	r5, r4
 8003886:	d109      	bne.n	800389c <__libc_init_array+0x24>
 8003888:	4e0b      	ldr	r6, [pc, #44]	; (80038b8 <__libc_init_array+0x40>)
 800388a:	4c0c      	ldr	r4, [pc, #48]	; (80038bc <__libc_init_array+0x44>)
 800388c:	f000 f848 	bl	8003920 <_init>
 8003890:	1ba4      	subs	r4, r4, r6
 8003892:	10a4      	asrs	r4, r4, #2
 8003894:	2500      	movs	r5, #0
 8003896:	42a5      	cmp	r5, r4
 8003898:	d105      	bne.n	80038a6 <__libc_init_array+0x2e>
 800389a:	bd70      	pop	{r4, r5, r6, pc}
 800389c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038a0:	4798      	blx	r3
 80038a2:	3501      	adds	r5, #1
 80038a4:	e7ee      	b.n	8003884 <__libc_init_array+0xc>
 80038a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038aa:	4798      	blx	r3
 80038ac:	3501      	adds	r5, #1
 80038ae:	e7f2      	b.n	8003896 <__libc_init_array+0x1e>
 80038b0:	0800396c 	.word	0x0800396c
 80038b4:	0800396c 	.word	0x0800396c
 80038b8:	0800396c 	.word	0x0800396c
 80038bc:	08003970 	.word	0x08003970

080038c0 <memset>:
 80038c0:	4402      	add	r2, r0
 80038c2:	4603      	mov	r3, r0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d100      	bne.n	80038ca <memset+0xa>
 80038c8:	4770      	bx	lr
 80038ca:	f803 1b01 	strb.w	r1, [r3], #1
 80038ce:	e7f9      	b.n	80038c4 <memset+0x4>

080038d0 <strncmp>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	b16a      	cbz	r2, 80038f0 <strncmp+0x20>
 80038d4:	3901      	subs	r1, #1
 80038d6:	1884      	adds	r4, r0, r2
 80038d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80038dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d103      	bne.n	80038ec <strncmp+0x1c>
 80038e4:	42a0      	cmp	r0, r4
 80038e6:	d001      	beq.n	80038ec <strncmp+0x1c>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f5      	bne.n	80038d8 <strncmp+0x8>
 80038ec:	1a98      	subs	r0, r3, r2
 80038ee:	bd10      	pop	{r4, pc}
 80038f0:	4610      	mov	r0, r2
 80038f2:	e7fc      	b.n	80038ee <strncmp+0x1e>

080038f4 <strncpy>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	3901      	subs	r1, #1
 80038f8:	4604      	mov	r4, r0
 80038fa:	b902      	cbnz	r2, 80038fe <strncpy+0xa>
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
 80038fe:	4623      	mov	r3, r4
 8003900:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003904:	f803 5b01 	strb.w	r5, [r3], #1
 8003908:	1e56      	subs	r6, r2, #1
 800390a:	b92d      	cbnz	r5, 8003918 <strncpy+0x24>
 800390c:	4414      	add	r4, r2
 800390e:	42a3      	cmp	r3, r4
 8003910:	d0f4      	beq.n	80038fc <strncpy+0x8>
 8003912:	f803 5b01 	strb.w	r5, [r3], #1
 8003916:	e7fa      	b.n	800390e <strncpy+0x1a>
 8003918:	461c      	mov	r4, r3
 800391a:	4632      	mov	r2, r6
 800391c:	e7ed      	b.n	80038fa <strncpy+0x6>
	...

08003920 <_init>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	bf00      	nop
 8003924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003926:	bc08      	pop	{r3}
 8003928:	469e      	mov	lr, r3
 800392a:	4770      	bx	lr

0800392c <_fini>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr
