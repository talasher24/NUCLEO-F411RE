
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e3c  08005e3c  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e44  08005e44  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08005e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000224  08006070  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08006070  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8a7  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023a4  00000000  00000000  0002fafb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00032dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017998  00000000  00000000  00033bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc4b  00000000  00000000  0004b550  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093186  00000000  00000000  0005719b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a4  00000000  00000000  000ea39c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c4c 	.word	0x08005c4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	08005c4c 	.word	0x08005c4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f8fa 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f004 fcbe 	bl	8004f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f004 fb46 	bl	8004c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000004 	.word	0x20000004
 80005f8:	2000024c 	.word	0x2000024c

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000024c 	.word	0x2000024c

08000614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800062c:	d005      	beq.n	800063a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_Delay+0x40>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800063a:	bf00      	nop
 800063c:	f7ff ffde 	bl	80005fc <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	429a      	cmp	r2, r3
 800064a:	d8f7      	bhi.n	800063c <HAL_Delay+0x28>
  {
  }
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000004 	.word	0x20000004

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff4c 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007da:	f7ff ff61 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 80007de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	6978      	ldr	r0, [r7, #20]
 80007e6:	f7ff ffb1 	bl	800074c <NVIC_EncodePriority>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff80 	bl	80006f8 <__NVIC_SetPriority>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff54 	bl	80006bc <__NVIC_EnableIRQ>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	795b      	ldrb	r3, [r3, #5]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d105      	bne.n	8000844 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f004 fa30 	bl	8004ca4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000854:	b480      	push	{r7}
 8000856:	b087      	sub	sp, #28
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2202      	movs	r2, #2
 8000868:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f042 0201 	orr.w	r2, r2, #1
 8000878:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e00a      	b.n	8000896 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	441a      	add	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	6812      	ldr	r2, [r2, #0]
 800088e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	d3f0      	bcc.n	8000880 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2201      	movs	r2, #1
 80008aa:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80008ac:	693b      	ldr	r3, [r7, #16]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	371c      	adds	r7, #28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff fe98 	bl	80005fc <HAL_GetTick>
 80008cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e099      	b.n	8000a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f022 0201 	bic.w	r2, r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008f8:	e00f      	b.n	800091a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008fa:	f7ff fe7f 	bl	80005fc <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b05      	cmp	r3, #5
 8000906:	d908      	bls.n	800091a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2220      	movs	r2, #32
 800090c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2203      	movs	r2, #3
 8000912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000916:	2303      	movs	r3, #3
 8000918:	e078      	b.n	8000a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1e8      	bne.n	80008fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <HAL_DMA_Init+0x158>)
 8000934:	4013      	ands	r3, r2
 8000936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800095e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	4313      	orrs	r3, r2
 800096a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	2b04      	cmp	r3, #4
 8000972:	d107      	bne.n	8000984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4313      	orrs	r3, r2
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4313      	orrs	r3, r2
 8000982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f023 0307 	bic.w	r3, r3, #7
 800099a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d117      	bne.n	80009de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00e      	beq.n	80009de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 fa91 	bl	8000ee8 <DMA_CheckFifoParam>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2240      	movs	r2, #64	; 0x40
 80009d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009da:	2301      	movs	r3, #1
 80009dc:	e016      	b.n	8000a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 fa48 	bl	8000e7c <DMA_CalcBaseAndBitshift>
 80009ec:	4603      	mov	r3, r0
 80009ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f4:	223f      	movs	r2, #63	; 0x3f
 80009f6:	409a      	lsls	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	f010803f 	.word	0xf010803f

08000a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d101      	bne.n	8000a3e <HAL_DMA_Start_IT+0x26>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e040      	b.n	8000ac0 <HAL_DMA_Start_IT+0xa8>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2201      	movs	r2, #1
 8000a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d12f      	bne.n	8000ab2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2202      	movs	r2, #2
 8000a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f9da 	bl	8000e20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a70:	223f      	movs	r2, #63	; 0x3f
 8000a72:	409a      	lsls	r2, r3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 0216 	orr.w	r2, r2, #22
 8000a86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0208 	orr.w	r2, r2, #8
 8000a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e005      	b.n	8000abe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000aba:	2302      	movs	r3, #2
 8000abc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d004      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00c      	b.n	8000b00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2205      	movs	r2, #5
 8000aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 0201 	bic.w	r2, r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b18:	4b92      	ldr	r3, [pc, #584]	; (8000d64 <HAL_DMA_IRQHandler+0x258>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a92      	ldr	r2, [pc, #584]	; (8000d68 <HAL_DMA_IRQHandler+0x25c>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0a9b      	lsrs	r3, r3, #10
 8000b24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b36:	2208      	movs	r2, #8
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d01a      	beq.n	8000b78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d013      	beq.n	8000b78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0204 	bic.w	r2, r2, #4
 8000b5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b64:	2208      	movs	r2, #8
 8000b66:	409a      	lsls	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b70:	f043 0201 	orr.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d012      	beq.n	8000bae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00b      	beq.n	8000bae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba6:	f043 0202 	orr.w	r2, r3, #2
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d012      	beq.n	8000be4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00b      	beq.n	8000be4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bdc:	f043 0204 	orr.w	r2, r3, #4
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be8:	2210      	movs	r2, #16
 8000bea:	409a      	lsls	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d043      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d03c      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c06:	2210      	movs	r2, #16
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d018      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d108      	bne.n	8000c3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d024      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	4798      	blx	r3
 8000c3a:	e01f      	b.n	8000c7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01b      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	4798      	blx	r3
 8000c4c:	e016      	b.n	8000c7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d107      	bne.n	8000c6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0208 	bic.w	r2, r2, #8
 8000c6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c80:	2220      	movs	r2, #32
 8000c82:	409a      	lsls	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 808e 	beq.w	8000daa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 8086 	beq.w	8000daa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b05      	cmp	r3, #5
 8000cb4:	d136      	bne.n	8000d24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0216 	bic.w	r2, r2, #22
 8000cc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d103      	bne.n	8000ce6 <HAL_DMA_IRQHandler+0x1da>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0208 	bic.w	r2, r2, #8
 8000cf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cfa:	223f      	movs	r2, #63	; 0x3f
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d07d      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	4798      	blx	r3
        }
        return;
 8000d22:	e078      	b.n	8000e16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d01c      	beq.n	8000d6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d108      	bne.n	8000d52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d030      	beq.n	8000daa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	4798      	blx	r3
 8000d50:	e02b      	b.n	8000daa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d027      	beq.n	8000daa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	4798      	blx	r3
 8000d62:	e022      	b.n	8000daa <HAL_DMA_IRQHandler+0x29e>
 8000d64:	20000050 	.word	0x20000050
 8000d68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10f      	bne.n	8000d9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0210 	bic.w	r2, r2, #16
 8000d88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d032      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d022      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0201 	bic.w	r2, r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d307      	bcc.n	8000df2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f2      	bne.n	8000dd6 <HAL_DMA_IRQHandler+0x2ca>
 8000df0:	e000      	b.n	8000df4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000df2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	4798      	blx	r3
 8000e14:	e000      	b.n	8000e18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000e16:	bf00      	nop
    }
  }
}
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop

08000e20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b40      	cmp	r3, #64	; 0x40
 8000e4c:	d108      	bne.n	8000e60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e5e:	e007      	b.n	8000e70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	3b10      	subs	r3, #16
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <DMA_CalcBaseAndBitshift+0x64>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <DMA_CalcBaseAndBitshift+0x68>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d909      	bls.n	8000ebe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000eb2:	f023 0303 	bic.w	r3, r3, #3
 8000eb6:	1d1a      	adds	r2, r3, #4
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	659a      	str	r2, [r3, #88]	; 0x58
 8000ebc:	e007      	b.n	8000ece <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	aaaaaaab 	.word	0xaaaaaaab
 8000ee4:	08005cdc 	.word	0x08005cdc

08000ee8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d11f      	bne.n	8000f42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d855      	bhi.n	8000fb4 <DMA_CheckFifoParam+0xcc>
 8000f08:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <DMA_CheckFifoParam+0x28>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f21 	.word	0x08000f21
 8000f14:	08000f33 	.word	0x08000f33
 8000f18:	08000f21 	.word	0x08000f21
 8000f1c:	08000fb5 	.word	0x08000fb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d045      	beq.n	8000fb8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f30:	e042      	b.n	8000fb8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f3a:	d13f      	bne.n	8000fbc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f40:	e03c      	b.n	8000fbc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f4a:	d121      	bne.n	8000f90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d836      	bhi.n	8000fc0 <DMA_CheckFifoParam+0xd8>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <DMA_CheckFifoParam+0x70>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f69 	.word	0x08000f69
 8000f5c:	08000f6f 	.word	0x08000f6f
 8000f60:	08000f69 	.word	0x08000f69
 8000f64:	08000f81 	.word	0x08000f81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f6c:	e02f      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d024      	beq.n	8000fc4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f7e:	e021      	b.n	8000fc4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f88:	d11e      	bne.n	8000fc8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f8e:	e01b      	b.n	8000fc8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d902      	bls.n	8000f9c <DMA_CheckFifoParam+0xb4>
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d003      	beq.n	8000fa2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f9a:	e018      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8000fa0:	e015      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00e      	beq.n	8000fcc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8000fb2:	e00b      	b.n	8000fcc <DMA_CheckFifoParam+0xe4>
      break;
 8000fb4:	bf00      	nop
 8000fb6:	e00a      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fb8:	bf00      	nop
 8000fba:	e008      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fbc:	bf00      	nop
 8000fbe:	e006      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fc0:	bf00      	nop
 8000fc2:	e004      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fc4:	bf00      	nop
 8000fc6:	e002      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;   
 8000fc8:	bf00      	nop
 8000fca:	e000      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fcc:	bf00      	nop
    }
  } 
  
  return status; 
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e159      	b.n	80012ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 8148 	bne.w	80012a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d00b      	beq.n	8001036 <HAL_GPIO_Init+0x5a>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102a:	2b11      	cmp	r3, #17
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b12      	cmp	r3, #18
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0xfc>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b12      	cmp	r3, #18
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80a2 	beq.w	80012a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a55      	ldr	r2, [pc, #340]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a51      	ldr	r2, [pc, #324]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2ec>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x202>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a47      	ldr	r2, [pc, #284]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x1fe>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <HAL_GPIO_Init+0x2f4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <HAL_GPIO_Init+0x2f8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x1f6>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a44      	ldr	r2, [pc, #272]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x1f2>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4934      	ldr	r1, [pc, #208]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fe:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001222:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_GPIO_Init+0x300>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_GPIO_Init+0x300>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_GPIO_Init+0x300>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_GPIO_Init+0x300>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f aea2 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	3724      	adds	r7, #36	; 0x24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	401a      	ands	r2, r3
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	429a      	cmp	r2, r3
 800132a:	d104      	bne.n	8001336 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	041a      	lsls	r2, r3, #16
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001334:	e002      	b.n	800133c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e25b      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d075      	beq.n	8001452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001366:	4ba3      	ldr	r3, [pc, #652]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b04      	cmp	r3, #4
 8001370:	d00c      	beq.n	800138c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	4ba0      	ldr	r3, [pc, #640]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137a:	2b08      	cmp	r3, #8
 800137c:	d112      	bne.n	80013a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137e:	4b9d      	ldr	r3, [pc, #628]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800138a:	d10b      	bne.n	80013a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	4b99      	ldr	r3, [pc, #612]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d05b      	beq.n	8001450 <HAL_RCC_OscConfig+0x108>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d157      	bne.n	8001450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e236      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ac:	d106      	bne.n	80013bc <HAL_RCC_OscConfig+0x74>
 80013ae:	4b91      	ldr	r3, [pc, #580]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a90      	ldr	r2, [pc, #576]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xb0>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x98>
 80013c6:	4b8b      	ldr	r3, [pc, #556]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a8a      	ldr	r2, [pc, #552]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b88      	ldr	r3, [pc, #544]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a87      	ldr	r2, [pc, #540]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xb0>
 80013e0:	4b84      	ldr	r3, [pc, #528]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a83      	ldr	r2, [pc, #524]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b81      	ldr	r3, [pc, #516]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a80      	ldr	r2, [pc, #512]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff f8fc 	bl	80005fc <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff f8f8 	bl	80005fc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1fb      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b76      	ldr	r3, [pc, #472]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xc0>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff f8e8 	bl	80005fc <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff f8e4 	bl	80005fc <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e1e7      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0xe8>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d063      	beq.n	8001526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145e:	4b65      	ldr	r3, [pc, #404]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b62      	ldr	r3, [pc, #392]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001472:	2b08      	cmp	r3, #8
 8001474:	d11c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001476:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b5c      	ldr	r3, [pc, #368]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x152>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1bb      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b56      	ldr	r3, [pc, #344]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4952      	ldr	r1, [pc, #328]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e03a      	b.n	8001526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <HAL_RCC_OscConfig+0x2b0>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff f89d 	bl	80005fc <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff f899 	bl	80005fc <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e19c      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	4b46      	ldr	r3, [pc, #280]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4940      	ldr	r1, [pc, #256]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <HAL_RCC_OscConfig+0x2b0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff f87c 	bl	80005fc <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff f878 	bl	80005fc <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e17b      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d030      	beq.n	8001594 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d016      	beq.n	8001568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153a:	4b30      	ldr	r3, [pc, #192]	; (80015fc <HAL_RCC_OscConfig+0x2b4>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001540:	f7ff f85c 	bl	80005fc <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff f858 	bl	80005fc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e15b      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x200>
 8001566:	e015      	b.n	8001594 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x2b4>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff f845 	bl	80005fc <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001576:	f7ff f841 	bl	80005fc <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e144      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a0 	beq.w	80016e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ce:	2301      	movs	r3, #1
 80015d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_RCC_OscConfig+0x2b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d121      	bne.n	8001622 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_RCC_OscConfig+0x2b8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_RCC_OscConfig+0x2b8>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff f807 	bl	80005fc <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	e011      	b.n	8001616 <HAL_RCC_OscConfig+0x2ce>
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	42470000 	.word	0x42470000
 80015fc:	42470e80 	.word	0x42470e80
 8001600:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001604:	f7fe fffa 	bl	80005fc <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e0fd      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b81      	ldr	r3, [pc, #516]	; (800181c <HAL_RCC_OscConfig+0x4d4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x2f0>
 800162a:	4b7d      	ldr	r3, [pc, #500]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	4a7c      	ldr	r2, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6713      	str	r3, [r2, #112]	; 0x70
 8001636:	e01c      	b.n	8001672 <HAL_RCC_OscConfig+0x32a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b05      	cmp	r3, #5
 800163e:	d10c      	bne.n	800165a <HAL_RCC_OscConfig+0x312>
 8001640:	4b77      	ldr	r3, [pc, #476]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a76      	ldr	r2, [pc, #472]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	4b74      	ldr	r3, [pc, #464]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	4a73      	ldr	r2, [pc, #460]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6713      	str	r3, [r2, #112]	; 0x70
 8001658:	e00b      	b.n	8001672 <HAL_RCC_OscConfig+0x32a>
 800165a:	4b71      	ldr	r3, [pc, #452]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a70      	ldr	r2, [pc, #448]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
 8001666:	4b6e      	ldr	r3, [pc, #440]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a6d      	ldr	r2, [pc, #436]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d015      	beq.n	80016a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167a:	f7fe ffbf 	bl	80005fc <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7fe ffbb 	bl	80005fc <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e0bc      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	4b61      	ldr	r3, [pc, #388]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ee      	beq.n	8001682 <HAL_RCC_OscConfig+0x33a>
 80016a4:	e014      	b.n	80016d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7fe ffa9 	bl	80005fc <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	e00a      	b.n	80016c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ae:	f7fe ffa5 	bl	80005fc <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016bc:	4293      	cmp	r3, r2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e0a6      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c4:	4b56      	ldr	r3, [pc, #344]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1ee      	bne.n	80016ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016d0:	7dfb      	ldrb	r3, [r7, #23]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d105      	bne.n	80016e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d6:	4b52      	ldr	r3, [pc, #328]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a51      	ldr	r2, [pc, #324]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 80016dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8092 	beq.w	8001810 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ec:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d05c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d141      	bne.n	8001784 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_RCC_OscConfig+0x4dc>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7fe ff79 	bl	80005fc <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170e:	f7fe ff75 	bl	80005fc <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e078      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f0      	bne.n	800170e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	019b      	lsls	r3, r3, #6
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	3b01      	subs	r3, #1
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	061b      	lsls	r3, r3, #24
 8001750:	4933      	ldr	r1, [pc, #204]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 8001752:	4313      	orrs	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <HAL_RCC_OscConfig+0x4dc>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7fe ff4e 	bl	80005fc <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7fe ff4a 	bl	80005fc <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e04d      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x41c>
 8001782:	e045      	b.n	8001810 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_OscConfig+0x4dc>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7fe ff37 	bl	80005fc <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001792:	f7fe ff33 	bl	80005fc <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e036      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x44a>
 80017b0:	e02e      	b.n	8001810 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e029      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_RCC_OscConfig+0x4d8>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d115      	bne.n	800180c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d10d      	bne.n	800180c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40007000 	.word	0x40007000
 8001820:	40023800 	.word	0x40023800
 8001824:	42470060 	.word	0x42470060

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0cc      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d90c      	bls.n	8001864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	494d      	ldr	r1, [pc, #308]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d044      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d119      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e06f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e067      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4934      	ldr	r1, [pc, #208]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7fe fe70 	bl	80005fc <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7fe fe6c 	bl	80005fc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e04f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d20c      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4916      	ldr	r1, [pc, #88]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	490e      	ldr	r1, [pc, #56]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ae:	f000 f821 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80019b2:	4601      	mov	r1, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	fa21 f303 	lsr.w	r3, r1, r3
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fab6 	bl	8004f40 <HAL_InitTick>

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	08005ce4 	.word	0x08005ce4
 80019ec:	20000050 	.word	0x20000050
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a0a:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d007      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x32>
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d008      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x38>
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 80b4 	bne.w	8001b88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a20:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a22:	60bb      	str	r3, [r7, #8]
       break;
 8001a24:	e0b3      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a26:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001a28:	60bb      	str	r3, [r7, #8]
      break;
 8001a2a:	e0b0      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a2c:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a36:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d04a      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a42:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	099b      	lsrs	r3, r3, #6
 8001a48:	f04f 0400 	mov.w	r4, #0
 8001a4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	ea03 0501 	and.w	r5, r3, r1
 8001a58:	ea04 0602 	and.w	r6, r4, r2
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	4632      	mov	r2, r6
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	f04f 0400 	mov.w	r4, #0
 8001a68:	0154      	lsls	r4, r2, #5
 8001a6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a6e:	014b      	lsls	r3, r1, #5
 8001a70:	4619      	mov	r1, r3
 8001a72:	4622      	mov	r2, r4
 8001a74:	1b49      	subs	r1, r1, r5
 8001a76:	eb62 0206 	sbc.w	r2, r2, r6
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	f04f 0400 	mov.w	r4, #0
 8001a82:	0194      	lsls	r4, r2, #6
 8001a84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a88:	018b      	lsls	r3, r1, #6
 8001a8a:	1a5b      	subs	r3, r3, r1
 8001a8c:	eb64 0402 	sbc.w	r4, r4, r2
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	00e2      	lsls	r2, r4, #3
 8001a9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a9e:	00d9      	lsls	r1, r3, #3
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4614      	mov	r4, r2
 8001aa4:	195b      	adds	r3, r3, r5
 8001aa6:	eb44 0406 	adc.w	r4, r4, r6
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	0262      	lsls	r2, r4, #9
 8001ab4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ab8:	0259      	lsls	r1, r3, #9
 8001aba:	460b      	mov	r3, r1
 8001abc:	4614      	mov	r4, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f04f 0400 	mov.w	r4, #0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4623      	mov	r3, r4
 8001acc:	f7fe fbe0 	bl	8000290 <__aeabi_uldivmod>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e049      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	f04f 0400 	mov.w	r4, #0
 8001ae2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	ea03 0501 	and.w	r5, r3, r1
 8001aee:	ea04 0602 	and.w	r6, r4, r2
 8001af2:	4629      	mov	r1, r5
 8001af4:	4632      	mov	r2, r6
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	f04f 0400 	mov.w	r4, #0
 8001afe:	0154      	lsls	r4, r2, #5
 8001b00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b04:	014b      	lsls	r3, r1, #5
 8001b06:	4619      	mov	r1, r3
 8001b08:	4622      	mov	r2, r4
 8001b0a:	1b49      	subs	r1, r1, r5
 8001b0c:	eb62 0206 	sbc.w	r2, r2, r6
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	f04f 0400 	mov.w	r4, #0
 8001b18:	0194      	lsls	r4, r2, #6
 8001b1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b1e:	018b      	lsls	r3, r1, #6
 8001b20:	1a5b      	subs	r3, r3, r1
 8001b22:	eb64 0402 	sbc.w	r4, r4, r2
 8001b26:	f04f 0100 	mov.w	r1, #0
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	00e2      	lsls	r2, r4, #3
 8001b30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b34:	00d9      	lsls	r1, r3, #3
 8001b36:	460b      	mov	r3, r1
 8001b38:	4614      	mov	r4, r2
 8001b3a:	195b      	adds	r3, r3, r5
 8001b3c:	eb44 0406 	adc.w	r4, r4, r6
 8001b40:	f04f 0100 	mov.w	r1, #0
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	02a2      	lsls	r2, r4, #10
 8001b4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b4e:	0299      	lsls	r1, r3, #10
 8001b50:	460b      	mov	r3, r1
 8001b52:	4614      	mov	r4, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	4621      	mov	r1, r4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f04f 0400 	mov.w	r4, #0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4623      	mov	r3, r4
 8001b62:	f7fe fb95 	bl	8000290 <__aeabi_uldivmod>
 8001b66:	4603      	mov	r3, r0
 8001b68:	460c      	mov	r4, r1
 8001b6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	3301      	adds	r3, #1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	60bb      	str	r3, [r7, #8]
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b8a:	60bb      	str	r3, [r7, #8]
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	007a1200 	.word	0x007a1200

08001ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000050 	.word	0x20000050

08001bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bc0:	f7ff fff0 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0a9b      	lsrs	r3, r3, #10
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08005cf4 	.word	0x08005cf4

08001be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be8:	f7ff ffdc 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bec:	4601      	mov	r1, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0b5b      	lsrs	r3, r3, #13
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	08005cf4 	.word	0x08005cf4

08001c0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	220f      	movs	r2, #15
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_RCC_GetClockConfig+0x60>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 020f 	and.w	r2, r3, #15
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40023c00 	.word	0x40023c00

08001c70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d038      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c9e:	f7fe fcad 	bl	80005fc <HAL_GetTick>
 8001ca2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ca6:	f7fe fca9 	bl	80005fc <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0bd      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	071b      	lsls	r3, r3, #28
 8001cd6:	495a      	ldr	r1, [pc, #360]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cde:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7fe fc8a 	bl	80005fc <HAL_GetTick>
 8001ce8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cec:	f7fe fc86 	bl	80005fc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e09a      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8083 	beq.w	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	4b48      	ldr	r3, [pc, #288]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	4a47      	ldr	r2, [pc, #284]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6413      	str	r3, [r2, #64]	; 0x40
 8001d28:	4b45      	ldr	r3, [pc, #276]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a42      	ldr	r2, [pc, #264]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d40:	f7fe fc5c 	bl	80005fc <HAL_GetTick>
 8001d44:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d48:	f7fe fc58 	bl	80005fc <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e06c      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d02f      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d028      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d94:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d9a:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d114      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe fc26 	bl	80005fc <HAL_GetTick>
 8001db0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	e00a      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7fe fc22 	bl	80005fc <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e034      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ee      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001de2:	d10d      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df8:	4911      	ldr	r1, [pc, #68]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
 8001dfe:	e005      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e0a:	6093      	str	r3, [r2, #8]
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e18:	4909      	ldr	r1, [pc, #36]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7d1a      	ldrb	r2, [r3, #20]
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001e30:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	42470068 	.word	0x42470068
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000
 8001e48:	42470e40 	.word	0x42470e40
 8001e4c:	424711e0 	.word	0x424711e0

08001e50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e083      	b.n	8001f6a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7f5b      	ldrb	r3, [r3, #29]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f002 ff38 	bl	8004ce8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	22ca      	movs	r2, #202	; 0xca
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2253      	movs	r2, #83	; 0x53
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fb7a 	bl	8002588 <RTC_EnterInitMode>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	22ff      	movs	r2, #255	; 0xff
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e05e      	b.n	8001f6a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ebe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6899      	ldr	r1, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68d2      	ldr	r2, [r2, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	041a      	lsls	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10e      	bne.n	8001f38 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fb0c 	bl	8002538 <HAL_RTC_WaitForSynchro>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	22ff      	movs	r2, #255	; 0xff
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e018      	b.n	8001f6a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f72:	b590      	push	{r4, r7, lr}
 8001f74:	b087      	sub	sp, #28
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	7f1b      	ldrb	r3, [r3, #28]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_RTC_SetTime+0x1c>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e0aa      	b.n	80020e4 <HAL_RTC_SetTime+0x172>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2202      	movs	r2, #2
 8001f98:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d126      	bne.n	8001fee <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fb11 	bl	80025e0 <RTC_ByteToBcd2>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	785b      	ldrb	r3, [r3, #1]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb0a 	bl	80025e0 <RTC_ByteToBcd2>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fd0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	789b      	ldrb	r3, [r3, #2]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fb02 	bl	80025e0 <RTC_ByteToBcd2>
 8001fdc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fde:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	78db      	ldrb	r3, [r3, #3]
 8001fe6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e018      	b.n	8002020 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800200e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002014:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	78db      	ldrb	r3, [r3, #3]
 800201a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	22ca      	movs	r2, #202	; 0xca
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2253      	movs	r2, #83	; 0x53
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 faa9 	bl	8002588 <RTC_EnterInitMode>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	22ff      	movs	r2, #255	; 0xff
 8002042:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2204      	movs	r2, #4
 8002048:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e047      	b.n	80020e4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800205e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002062:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002072:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6899      	ldr	r1, [r3, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	431a      	orrs	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800209a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d111      	bne.n	80020ce <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fa44 	bl	8002538 <HAL_RTC_WaitForSynchro>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2204      	movs	r2, #4
 80020c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00a      	b.n	80020e4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80020e2:	2300      	movs	r3, #0
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd90      	pop	{r4, r7, pc}

080020ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	7f1b      	ldrb	r3, [r3, #28]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_RTC_SetDate+0x1c>
 8002104:	2302      	movs	r3, #2
 8002106:	e094      	b.n	8002232 <HAL_RTC_SetDate+0x146>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2202      	movs	r2, #2
 8002112:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10e      	bne.n	8002138 <HAL_RTC_SetDate+0x4c>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	785b      	ldrb	r3, [r3, #1]
 800212a:	f023 0310 	bic.w	r3, r3, #16
 800212e:	b2db      	uxtb	r3, r3
 8002130:	330a      	adds	r3, #10
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11c      	bne.n	8002178 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fa4c 	bl	80025e0 <RTC_ByteToBcd2>
 8002148:	4603      	mov	r3, r0
 800214a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	785b      	ldrb	r3, [r3, #1]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fa45 	bl	80025e0 <RTC_ByteToBcd2>
 8002156:	4603      	mov	r3, r0
 8002158:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800215a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	789b      	ldrb	r3, [r3, #2]
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fa3d 	bl	80025e0 <RTC_ByteToBcd2>
 8002166:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002168:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e00e      	b.n	8002196 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	78db      	ldrb	r3, [r3, #3]
 800217c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	785b      	ldrb	r3, [r3, #1]
 8002182:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002184:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800218a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	22ca      	movs	r2, #202	; 0xca
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2253      	movs	r2, #83	; 0x53
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f9ee 	bl	8002588 <RTC_EnterInitMode>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	22ff      	movs	r2, #255	; 0xff
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2204      	movs	r2, #4
 80021be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e033      	b.n	8002232 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d111      	bne.n	800221c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f99d 	bl	8002538 <HAL_RTC_WaitForSynchro>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2204      	movs	r2, #4
 8002210:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e00a      	b.n	8002232 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	22ff      	movs	r2, #255	; 0xff
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002230:	2300      	movs	r3, #0
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
	...

0800223c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002250:	4b93      	ldr	r3, [pc, #588]	; (80024a0 <HAL_RTC_SetAlarm_IT+0x264>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a93      	ldr	r2, [pc, #588]	; (80024a4 <HAL_RTC_SetAlarm_IT+0x268>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0adb      	lsrs	r3, r3, #11
 800225c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	7f1b      	ldrb	r3, [r3, #28]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_RTC_SetAlarm_IT+0x36>
 800226e:	2302      	movs	r3, #2
 8002270:	e111      	b.n	8002496 <HAL_RTC_SetAlarm_IT+0x25a>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2202      	movs	r2, #2
 800227c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d137      	bne.n	80022f4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f99f 	bl	80025e0 <RTC_ByteToBcd2>
 80022a2:	4603      	mov	r3, r0
 80022a4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f998 	bl	80025e0 <RTC_ByteToBcd2>
 80022b0:	4603      	mov	r3, r0
 80022b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80022b4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	789b      	ldrb	r3, [r3, #2]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f990 	bl	80025e0 <RTC_ByteToBcd2>
 80022c0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022c2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	78db      	ldrb	r3, [r3, #3]
 80022ca:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80022cc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f982 	bl	80025e0 <RTC_ByteToBcd2>
 80022dc:	4603      	mov	r3, r0
 80022de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e023      	b.n	800233c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	785b      	ldrb	r3, [r3, #1]
 8002312:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002314:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800231a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	78db      	ldrb	r3, [r3, #3]
 8002320:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002322:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800232a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800232c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002332:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002338:	4313      	orrs	r3, r2
 800233a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	22ca      	movs	r2, #202	; 0xca
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2253      	movs	r2, #83	; 0x53
 8002356:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002360:	d141      	bne.n	80023e6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002370:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002382:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	617a      	str	r2, [r7, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10b      	bne.n	80023a6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	22ff      	movs	r2, #255	; 0xff
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2203      	movs	r2, #3
 800239a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e077      	b.n	8002496 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0e7      	beq.n	8002384 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	e040      	b.n	8002468 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023f4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002406:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	1e5a      	subs	r2, r3, #1
 800240c:	617a      	str	r2, [r7, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	22ff      	movs	r2, #255	; 0xff
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2203      	movs	r2, #3
 800241e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e035      	b.n	8002496 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0e7      	beq.n	8002408 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002456:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002466:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800246e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002472:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800247a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	22ff      	movs	r2, #255	; 0xff
 8002486:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000050 	.word	0x20000050
 80024a4:	10624dd3 	.word	0x10624dd3
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d012      	beq.n	80024e8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f002 fb77 	bl	8004bc4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80024e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d012      	beq.n	800251c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f8e4 	bl	80026d2 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f462 7220 	orn	r2, r2, #640	; 0x280
 800251a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RTC_AlarmIRQHandler+0x88>)
 800251e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002522:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	775a      	strb	r2, [r3, #29]
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40013c00 	.word	0x40013c00

08002538 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002552:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002554:	f7fe f852 	bl	80005fc <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800255a:	e009      	b.n	8002570 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800255c:	f7fe f84e 	bl	80005fc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800256a:	d901      	bls.n	8002570 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e007      	b.n	8002580 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ee      	beq.n	800255c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d119      	bne.n	80025d6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f04f 32ff 	mov.w	r2, #4294967295
 80025aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025ac:	f7fe f826 	bl	80005fc <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025b2:	e009      	b.n	80025c8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025b4:	f7fe f822 	bl	80005fc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025c2:	d901      	bls.n	80025c8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e007      	b.n	80025d8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ee      	beq.n	80025b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80025ee:	e005      	b.n	80025fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3301      	adds	r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	3b0a      	subs	r3, #10
 80025fa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	2b09      	cmp	r3, #9
 8002600:	d8f6      	bhi.n	80025f0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	b2da      	uxtb	r2, r3
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4313      	orrs	r3, r2
 800260e:	b2db      	uxtb	r3, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmouthCalibMinusPulsesValue must be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmouthCalibMinusPulsesValue)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmouthCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	7f1b      	ldrb	r3, [r3, #28]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_RTCEx_SetSmoothCalib+0x1e>
 8002636:	2302      	movs	r3, #2
 8002638:	e047      	b.n	80026ca <HAL_RTCEx_SetSmoothCalib+0xae>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2202      	movs	r2, #2
 8002644:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	22ca      	movs	r2, #202	; 0xca
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2253      	movs	r2, #83	; 0x53
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01e      	beq.n	80026a2 <HAL_RTCEx_SetSmoothCalib+0x86>
  {
  /* Get tick */
  tickstart = HAL_GetTick();
 8002664:	f7fd ffca 	bl	80005fc <HAL_GetTick>
 8002668:	6178      	str	r0, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 800266a:	e013      	b.n	8002694 <HAL_RTCEx_SetSmoothCalib+0x78>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800266c:	f7fd ffc6 	bl	80005fc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800267a:	d90b      	bls.n	8002694 <HAL_RTCEx_SetSmoothCalib+0x78>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	22ff      	movs	r2, #255	; 0xff
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2203      	movs	r2, #3
 8002688:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e01a      	b.n	80026ca <HAL_RTCEx_SetSmoothCalib+0xae>
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e4      	bne.n	800266c <HAL_RTCEx_SetSmoothCalib+0x50>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmouthCalibMinusPulsesValue);
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	ea42 0103 	orr.w	r1, r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	22ff      	movs	r2, #255	; 0xff
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e01d      	b.n	8002734 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f002 fb07 	bl	8004d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f000 fb8f 	bl	8002e48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b06      	cmp	r3, #6
 8002764:	d007      	beq.n	8002776 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e01d      	b.n	80027d2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f815 	bl	80027da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 fb40 	bl	8002e48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fdc6 	bl	8003394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_TIM_PWM_Start+0x60>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d107      	bne.n	8002822 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b06      	cmp	r3, #6
 8002832:	d007      	beq.n	8002844 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40010000 	.word	0x40010000

08002854 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	6839      	ldr	r1, [r7, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fd94 	bl	8003394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_TIM_PWM_Stop+0x94>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d117      	bne.n	80028a6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10f      	bne.n	80028a6 <HAL_TIM_PWM_Stop+0x52>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6a1a      	ldr	r2, [r3, #32]
 800288c:	f240 4344 	movw	r3, #1092	; 0x444
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_TIM_PWM_Stop+0x52>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6a1a      	ldr	r2, [r3, #32]
 80028ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10f      	bne.n	80028d6 <HAL_TIM_PWM_Stop+0x82>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	f240 4344 	movw	r3, #1092	; 0x444
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d107      	bne.n	80028d6 <HAL_TIM_PWM_Stop+0x82>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40010000 	.word	0x40010000

080028ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d122      	bne.n	8002948 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b02      	cmp	r3, #2
 800290e:	d11b      	bne.n	8002948 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0202 	mvn.w	r2, #2
 8002918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa6b 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa5d 	bl	8002df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fa6e 	bl	8002e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b04      	cmp	r3, #4
 8002954:	d122      	bne.n	800299c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d11b      	bne.n	800299c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0204 	mvn.w	r2, #4
 800296c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2202      	movs	r2, #2
 8002972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa41 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa33 	bl	8002df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fa44 	bl	8002e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0208 	mvn.w	r2, #8
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa17 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa09 	bl	8002df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fa1a 	bl	8002e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b10      	cmp	r3, #16
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0210 	mvn.w	r2, #16
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9ed 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9df 	bl	8002df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f9f0 	bl	8002e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0201 	mvn.w	r2, #1
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f002 f8d8 	bl	8004c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d10e      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d107      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fd1a 	bl	80034d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d107      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f9b5 	bl	8002e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d10e      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d107      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0220 	mvn.w	r2, #32
 8002aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fce4 	bl	80034bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0b4      	b.n	8002c80 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2202      	movs	r2, #2
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	f200 809f 	bhi.w	8002c6c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002b2e:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b69 	.word	0x08002b69
 8002b38:	08002c6d 	.word	0x08002c6d
 8002b3c:	08002c6d 	.word	0x08002c6d
 8002b40:	08002c6d 	.word	0x08002c6d
 8002b44:	08002ba9 	.word	0x08002ba9
 8002b48:	08002c6d 	.word	0x08002c6d
 8002b4c:	08002c6d 	.word	0x08002c6d
 8002b50:	08002c6d 	.word	0x08002c6d
 8002b54:	08002beb 	.word	0x08002beb
 8002b58:	08002c6d 	.word	0x08002c6d
 8002b5c:	08002c6d 	.word	0x08002c6d
 8002b60:	08002c6d 	.word	0x08002c6d
 8002b64:	08002c2b 	.word	0x08002c2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f9ea 	bl	8002f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0208 	orr.w	r2, r2, #8
 8002b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0204 	bic.w	r2, r2, #4
 8002b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6999      	ldr	r1, [r3, #24]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	619a      	str	r2, [r3, #24]
      break;
 8002ba6:	e062      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fa30 	bl	8003014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6999      	ldr	r1, [r3, #24]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	021a      	lsls	r2, r3, #8
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	619a      	str	r2, [r3, #24]
      break;
 8002be8:	e041      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fa7b 	bl	80030ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0208 	orr.w	r2, r2, #8
 8002c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0204 	bic.w	r2, r2, #4
 8002c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69d9      	ldr	r1, [r3, #28]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	61da      	str	r2, [r3, #28]
      break;
 8002c28:	e021      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fac5 	bl	80031c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69d9      	ldr	r1, [r3, #28]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	021a      	lsls	r2, r3, #8
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	61da      	str	r2, [r3, #28]
      break;
 8002c6a:	e000      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002c6c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_TIM_ConfigClockSource+0x18>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e0a6      	b.n	8002dee <HAL_TIM_ConfigClockSource+0x166>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d067      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x120>
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d80b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x6c>
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d073      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x140>
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d802      	bhi.n	8002cea <HAL_TIM_ConfigClockSource+0x62>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d06f      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ce8:	e078      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d06c      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x140>
 8002cee:	2b30      	cmp	r3, #48	; 0x30
 8002cf0:	d06a      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002cf2:	e073      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cf4:	2b70      	cmp	r3, #112	; 0x70
 8002cf6:	d00d      	beq.n	8002d14 <HAL_TIM_ConfigClockSource+0x8c>
 8002cf8:	2b70      	cmp	r3, #112	; 0x70
 8002cfa:	d804      	bhi.n	8002d06 <HAL_TIM_ConfigClockSource+0x7e>
 8002cfc:	2b50      	cmp	r3, #80	; 0x50
 8002cfe:	d033      	beq.n	8002d68 <HAL_TIM_ConfigClockSource+0xe0>
 8002d00:	2b60      	cmp	r3, #96	; 0x60
 8002d02:	d041      	beq.n	8002d88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d04:	e06a      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0a:	d066      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x152>
 8002d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d10:	d017      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d12:	e063      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f000 fb16 	bl	8003354 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]
      break;
 8002d40:	e04c      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f000 faff 	bl	8003354 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d64:	609a      	str	r2, [r3, #8]
      break;
 8002d66:	e039      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f000 fa73 	bl	8003260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2150      	movs	r1, #80	; 0x50
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 facc 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002d86:	e029      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	461a      	mov	r2, r3
 8002d96:	f000 fa92 	bl	80032be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2160      	movs	r1, #96	; 0x60
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fabc 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002da6:	e019      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	461a      	mov	r2, r3
 8002db6:	f000 fa53 	bl	8003260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2140      	movs	r1, #64	; 0x40
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 faac 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002dc6:	e009      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 faa3 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002dd8:	e000      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a34      	ldr	r2, [pc, #208]	; (8002f2c <TIM_Base_SetConfig+0xe4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00f      	beq.n	8002e80 <TIM_Base_SetConfig+0x38>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e66:	d00b      	beq.n	8002e80 <TIM_Base_SetConfig+0x38>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a31      	ldr	r2, [pc, #196]	; (8002f30 <TIM_Base_SetConfig+0xe8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <TIM_Base_SetConfig+0x38>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a30      	ldr	r2, [pc, #192]	; (8002f34 <TIM_Base_SetConfig+0xec>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <TIM_Base_SetConfig+0x38>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a2f      	ldr	r2, [pc, #188]	; (8002f38 <TIM_Base_SetConfig+0xf0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <TIM_Base_SetConfig+0xe4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01b      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea0:	d017      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <TIM_Base_SetConfig+0xe8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <TIM_Base_SetConfig+0xec>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00f      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <TIM_Base_SetConfig+0xf0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <TIM_Base_SetConfig+0xf4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d007      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <TIM_Base_SetConfig+0xf8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_Base_SetConfig+0x8a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <TIM_Base_SetConfig+0xfc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d108      	bne.n	8002ee4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <TIM_Base_SetConfig+0xe4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d103      	bne.n	8002f18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	615a      	str	r2, [r3, #20]
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800
 8002f38:	40000c00 	.word	0x40000c00
 8002f3c:	40014000 	.word	0x40014000
 8002f40:	40014400 	.word	0x40014400
 8002f44:	40014800 	.word	0x40014800

08002f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0201 	bic.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f023 0302 	bic.w	r3, r3, #2
 8002f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <TIM_OC1_SetConfig+0xc8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d10c      	bne.n	8002fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0308 	bic.w	r3, r3, #8
 8002faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <TIM_OC1_SetConfig+0xc8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d111      	bne.n	8002fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	621a      	str	r2, [r3, #32]
}
 8003004:	bf00      	nop
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40010000 	.word	0x40010000

08003014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0210 	bic.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0320 	bic.w	r3, r3, #32
 800305e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <TIM_OC2_SetConfig+0xd4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d10d      	bne.n	8003090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800307a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800308e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <TIM_OC2_SetConfig+0xd4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d113      	bne.n	80030c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800309e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000

080030ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <TIM_OC3_SetConfig+0xd0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10d      	bne.n	8003166 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <TIM_OC3_SetConfig+0xd0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d113      	bne.n	8003196 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800317c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	621a      	str	r2, [r3, #32]
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40010000 	.word	0x40010000

080031c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800320a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	031b      	lsls	r3, r3, #12
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <TIM_OC4_SetConfig+0x9c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d109      	bne.n	8003234 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	019b      	lsls	r3, r3, #6
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000

08003260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0201 	bic.w	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800328a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f023 030a 	bic.w	r3, r3, #10
 800329c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032be:	b480      	push	{r7}
 80032c0:	b087      	sub	sp, #28
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0210 	bic.w	r2, r3, #16
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	031b      	lsls	r3, r3, #12
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	f043 0307 	orr.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	021a      	lsls	r2, r3, #8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	431a      	orrs	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2201      	movs	r2, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1a      	ldr	r2, [r3, #32]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	401a      	ands	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	431a      	orrs	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e050      	b.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d018      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003444:	d013      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a18      	ldr	r2, [pc, #96]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00e      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10c      	bne.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4313      	orrs	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40014000 	.word	0x40014000

080034bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e03f      	b.n	8003576 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f001 fc64 	bl	8004dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	; 0x24
 8003514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fc2d 	bl	8003d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800353c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800354c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800355c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b20      	cmp	r3, #32
 8003598:	d153      	bne.n	8003642 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_UART_Transmit_DMA+0x26>
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e04c      	b.n	8003644 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_UART_Transmit_DMA+0x38>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e045      	b.n	8003644 <HAL_UART_Transmit_DMA+0xc4>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2221      	movs	r2, #33	; 0x21
 80035dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	4a19      	ldr	r2, [pc, #100]	; (800364c <HAL_UART_Transmit_DMA+0xcc>)
 80035e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	4a18      	ldr	r2, [pc, #96]	; (8003650 <HAL_UART_Transmit_DMA+0xd0>)
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	4a17      	ldr	r2, [pc, #92]	; (8003654 <HAL_UART_Transmit_DMA+0xd4>)
 80035f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	2200      	movs	r2, #0
 80035fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3304      	adds	r3, #4
 8003614:	461a      	mov	r2, r3
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	f7fd f9fe 	bl	8000a18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003624:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800363c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	08003995 	.word	0x08003995
 8003650:	080039e7 	.word	0x080039e7
 8003654:	08003a87 	.word	0x08003a87

08003658 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b20      	cmp	r3, #32
 8003670:	d166      	bne.n	8003740 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_UART_Receive_DMA+0x26>
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e05f      	b.n	8003742 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_UART_Receive_DMA+0x38>
 800368c:	2302      	movs	r3, #2
 800368e:	e058      	b.n	8003742 <HAL_UART_Receive_DMA+0xea>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2222      	movs	r2, #34	; 0x22
 80036ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b6:	4a25      	ldr	r2, [pc, #148]	; (800374c <HAL_UART_Receive_DMA+0xf4>)
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036be:	4a24      	ldr	r2, [pc, #144]	; (8003750 <HAL_UART_Receive_DMA+0xf8>)
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	4a23      	ldr	r2, [pc, #140]	; (8003754 <HAL_UART_Receive_DMA+0xfc>)
 80036c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ce:	2200      	movs	r2, #0
 80036d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80036d2:	f107 0308 	add.w	r3, r7, #8
 80036d6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3304      	adds	r3, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	f7fd f995 	bl	8000a18 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	08003a03 	.word	0x08003a03
 8003750:	08003a6b 	.word	0x08003a6b
 8003754:	08003a87 	.word	0x08003a87

08003758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_UART_IRQHandler+0x52>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa6f 	bl	8003c86 <UART_Receive_IT>
      return;
 80037a8:	e0d1      	b.n	800394e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80b0 	beq.w	8003912 <HAL_UART_IRQHandler+0x1ba>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <HAL_UART_IRQHandler+0x70>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80a5 	beq.w	8003912 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_UART_IRQHandler+0x90>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_UART_IRQHandler+0xb0>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	f043 0202 	orr.w	r2, r3, #2
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_UART_IRQHandler+0xd0>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00f      	beq.n	8003852 <HAL_UART_IRQHandler+0xfa>
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <HAL_UART_IRQHandler+0xee>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	f043 0208 	orr.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d078      	beq.n	800394c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_UART_IRQHandler+0x11c>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa09 	bl	8003c86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	bf0c      	ite	eq
 8003882:	2301      	moveq	r3, #1
 8003884:	2300      	movne	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <HAL_UART_IRQHandler+0x144>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d031      	beq.n	8003900 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f952 	bl	8003b46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d123      	bne.n	80038f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_UART_IRQHandler+0x1fc>)
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd f8f7 	bl	8000ac8 <HAL_DMA_Abort_IT>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d016      	beq.n	800390e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ea:	4610      	mov	r0, r2
 80038ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ee:	e00e      	b.n	800390e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f845 	bl	8003980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f6:	e00a      	b.n	800390e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f841 	bl	8003980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fe:	e006      	b.n	800390e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f83d 	bl	8003980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800390c:	e01e      	b.n	800394c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390e:	bf00      	nop
    return;
 8003910:	e01c      	b.n	800394c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_UART_IRQHandler+0x1d6>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f93f 	bl	8003baa <UART_Transmit_IT>
    return;
 800392c:	e00f      	b.n	800394e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_UART_IRQHandler+0x1f6>
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f987 	bl	8003c56 <UART_EndTransmit_IT>
    return;
 8003948:	bf00      	nop
 800394a:	e000      	b.n	800394e <HAL_UART_IRQHandler+0x1f6>
    return;
 800394c:	bf00      	nop
  }
}
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	08003b83 	.word	0x08003b83

08003958 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d113      	bne.n	80039d8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039d6:	e002      	b.n	80039de <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 ffd9 	bl	8004990 <HAL_UART_TxCpltCallback>
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7ff ffaf 	bl	8003958 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11e      	bne.n	8003a5c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a32:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a52:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 ffa1 	bl	80049a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7ff ff77 	bl	800396c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	bf0c      	ite	eq
 8003aa6:	2301      	moveq	r3, #1
 8003aa8:	2300      	movne	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b21      	cmp	r3, #33	; 0x21
 8003ab8:	d108      	bne.n	8003acc <UART_DMAError+0x46>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ac6:	68b8      	ldr	r0, [r7, #8]
 8003ac8:	f000 f827 	bl	8003b1a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b22      	cmp	r3, #34	; 0x22
 8003aec:	d108      	bne.n	8003b00 <UART_DMAError+0x7a>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2200      	movs	r2, #0
 8003af8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003afa:	68b8      	ldr	r0, [r7, #8]
 8003afc:	f000 f823 	bl	8003b46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	f043 0210 	orr.w	r2, r3, #16
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b0c:	68b8      	ldr	r0, [r7, #8]
 8003b0e:	f7ff ff37 	bl	8003980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b30:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff feef 	bl	8003980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b21      	cmp	r3, #33	; 0x21
 8003bbc:	d144      	bne.n	8003c48 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d11a      	bne.n	8003bfe <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bdc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	1c9a      	adds	r2, r3, #2
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]
 8003bf0:	e00e      	b.n	8003c10 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	621a      	str	r2, [r3, #32]
 8003bfc:	e008      	b.n	8003c10 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	1c59      	adds	r1, r3, #1
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6211      	str	r1, [r2, #32]
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10f      	bne.n	8003c44 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fe8a 	bl	8004990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b22      	cmp	r3, #34	; 0x22
 8003c98:	d171      	bne.n	8003d7e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	d123      	bne.n	8003cec <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10e      	bne.n	8003cd0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	1c9a      	adds	r2, r3, #2
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	629a      	str	r2, [r3, #40]	; 0x28
 8003cce:	e029      	b.n	8003d24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
 8003cea:	e01b      	b.n	8003d24 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6858      	ldr	r0, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	1c59      	adds	r1, r3, #1
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6291      	str	r1, [r2, #40]	; 0x28
 8003d04:	b2c2      	uxtb	r2, r0
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	e00c      	b.n	8003d24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	1c58      	adds	r0, r3, #1
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	6288      	str	r0, [r1, #40]	; 0x28
 8003d1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4619      	mov	r1, r3
 8003d32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d120      	bne.n	8003d7a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0220 	bic.w	r2, r2, #32
 8003d46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fe17 	bl	80049a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e002      	b.n	8003d80 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e000      	b.n	8003d80 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
  }
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003dca:	f023 030c 	bic.w	r3, r3, #12
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df6:	f040 818b 	bne.w	8004110 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4ac1      	ldr	r2, [pc, #772]	; (8004104 <UART_SetConfig+0x37c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d005      	beq.n	8003e10 <UART_SetConfig+0x88>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4abf      	ldr	r2, [pc, #764]	; (8004108 <UART_SetConfig+0x380>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f040 80bd 	bne.w	8003f8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e10:	f7fd fee8 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8003e14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	461d      	mov	r5, r3
 8003e1a:	f04f 0600 	mov.w	r6, #0
 8003e1e:	46a8      	mov	r8, r5
 8003e20:	46b1      	mov	r9, r6
 8003e22:	eb18 0308 	adds.w	r3, r8, r8
 8003e26:	eb49 0409 	adc.w	r4, r9, r9
 8003e2a:	4698      	mov	r8, r3
 8003e2c:	46a1      	mov	r9, r4
 8003e2e:	eb18 0805 	adds.w	r8, r8, r5
 8003e32:	eb49 0906 	adc.w	r9, r9, r6
 8003e36:	f04f 0100 	mov.w	r1, #0
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e4a:	4688      	mov	r8, r1
 8003e4c:	4691      	mov	r9, r2
 8003e4e:	eb18 0005 	adds.w	r0, r8, r5
 8003e52:	eb49 0106 	adc.w	r1, r9, r6
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	461d      	mov	r5, r3
 8003e5c:	f04f 0600 	mov.w	r6, #0
 8003e60:	196b      	adds	r3, r5, r5
 8003e62:	eb46 0406 	adc.w	r4, r6, r6
 8003e66:	461a      	mov	r2, r3
 8003e68:	4623      	mov	r3, r4
 8003e6a:	f7fc fa11 	bl	8000290 <__aeabi_uldivmod>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	460c      	mov	r4, r1
 8003e72:	461a      	mov	r2, r3
 8003e74:	4ba5      	ldr	r3, [pc, #660]	; (800410c <UART_SetConfig+0x384>)
 8003e76:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	461d      	mov	r5, r3
 8003e84:	f04f 0600 	mov.w	r6, #0
 8003e88:	46a9      	mov	r9, r5
 8003e8a:	46b2      	mov	sl, r6
 8003e8c:	eb19 0309 	adds.w	r3, r9, r9
 8003e90:	eb4a 040a 	adc.w	r4, sl, sl
 8003e94:	4699      	mov	r9, r3
 8003e96:	46a2      	mov	sl, r4
 8003e98:	eb19 0905 	adds.w	r9, r9, r5
 8003e9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eb4:	4689      	mov	r9, r1
 8003eb6:	4692      	mov	sl, r2
 8003eb8:	eb19 0005 	adds.w	r0, r9, r5
 8003ebc:	eb4a 0106 	adc.w	r1, sl, r6
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	461d      	mov	r5, r3
 8003ec6:	f04f 0600 	mov.w	r6, #0
 8003eca:	196b      	adds	r3, r5, r5
 8003ecc:	eb46 0406 	adc.w	r4, r6, r6
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	f7fc f9dc 	bl	8000290 <__aeabi_uldivmod>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b8b      	ldr	r3, [pc, #556]	; (800410c <UART_SetConfig+0x384>)
 8003ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	2164      	movs	r1, #100	; 0x64
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	3332      	adds	r3, #50	; 0x32
 8003ef2:	4a86      	ldr	r2, [pc, #536]	; (800410c <UART_SetConfig+0x384>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f00:	4498      	add	r8, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	461d      	mov	r5, r3
 8003f06:	f04f 0600 	mov.w	r6, #0
 8003f0a:	46a9      	mov	r9, r5
 8003f0c:	46b2      	mov	sl, r6
 8003f0e:	eb19 0309 	adds.w	r3, r9, r9
 8003f12:	eb4a 040a 	adc.w	r4, sl, sl
 8003f16:	4699      	mov	r9, r3
 8003f18:	46a2      	mov	sl, r4
 8003f1a:	eb19 0905 	adds.w	r9, r9, r5
 8003f1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f36:	4689      	mov	r9, r1
 8003f38:	4692      	mov	sl, r2
 8003f3a:	eb19 0005 	adds.w	r0, r9, r5
 8003f3e:	eb4a 0106 	adc.w	r1, sl, r6
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	461d      	mov	r5, r3
 8003f48:	f04f 0600 	mov.w	r6, #0
 8003f4c:	196b      	adds	r3, r5, r5
 8003f4e:	eb46 0406 	adc.w	r4, r6, r6
 8003f52:	461a      	mov	r2, r3
 8003f54:	4623      	mov	r3, r4
 8003f56:	f7fc f99b 	bl	8000290 <__aeabi_uldivmod>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b6a      	ldr	r3, [pc, #424]	; (800410c <UART_SetConfig+0x384>)
 8003f62:	fba3 1302 	umull	r1, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2164      	movs	r1, #100	; 0x64
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a65      	ldr	r2, [pc, #404]	; (800410c <UART_SetConfig+0x384>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	f003 0207 	and.w	r2, r3, #7
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4442      	add	r2, r8
 8003f86:	609a      	str	r2, [r3, #8]
 8003f88:	e26f      	b.n	800446a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f8a:	f7fd fe17 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8003f8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	461d      	mov	r5, r3
 8003f94:	f04f 0600 	mov.w	r6, #0
 8003f98:	46a8      	mov	r8, r5
 8003f9a:	46b1      	mov	r9, r6
 8003f9c:	eb18 0308 	adds.w	r3, r8, r8
 8003fa0:	eb49 0409 	adc.w	r4, r9, r9
 8003fa4:	4698      	mov	r8, r3
 8003fa6:	46a1      	mov	r9, r4
 8003fa8:	eb18 0805 	adds.w	r8, r8, r5
 8003fac:	eb49 0906 	adc.w	r9, r9, r6
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fbc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fc0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fc4:	4688      	mov	r8, r1
 8003fc6:	4691      	mov	r9, r2
 8003fc8:	eb18 0005 	adds.w	r0, r8, r5
 8003fcc:	eb49 0106 	adc.w	r1, r9, r6
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	461d      	mov	r5, r3
 8003fd6:	f04f 0600 	mov.w	r6, #0
 8003fda:	196b      	adds	r3, r5, r5
 8003fdc:	eb46 0406 	adc.w	r4, r6, r6
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	f7fc f954 	bl	8000290 <__aeabi_uldivmod>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	460c      	mov	r4, r1
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <UART_SetConfig+0x384>)
 8003ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	461d      	mov	r5, r3
 8003ffe:	f04f 0600 	mov.w	r6, #0
 8004002:	46a9      	mov	r9, r5
 8004004:	46b2      	mov	sl, r6
 8004006:	eb19 0309 	adds.w	r3, r9, r9
 800400a:	eb4a 040a 	adc.w	r4, sl, sl
 800400e:	4699      	mov	r9, r3
 8004010:	46a2      	mov	sl, r4
 8004012:	eb19 0905 	adds.w	r9, r9, r5
 8004016:	eb4a 0a06 	adc.w	sl, sl, r6
 800401a:	f04f 0100 	mov.w	r1, #0
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004026:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800402a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800402e:	4689      	mov	r9, r1
 8004030:	4692      	mov	sl, r2
 8004032:	eb19 0005 	adds.w	r0, r9, r5
 8004036:	eb4a 0106 	adc.w	r1, sl, r6
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	461d      	mov	r5, r3
 8004040:	f04f 0600 	mov.w	r6, #0
 8004044:	196b      	adds	r3, r5, r5
 8004046:	eb46 0406 	adc.w	r4, r6, r6
 800404a:	461a      	mov	r2, r3
 800404c:	4623      	mov	r3, r4
 800404e:	f7fc f91f 	bl	8000290 <__aeabi_uldivmod>
 8004052:	4603      	mov	r3, r0
 8004054:	460c      	mov	r4, r1
 8004056:	461a      	mov	r2, r3
 8004058:	4b2c      	ldr	r3, [pc, #176]	; (800410c <UART_SetConfig+0x384>)
 800405a:	fba3 1302 	umull	r1, r3, r3, r2
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2164      	movs	r1, #100	; 0x64
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	3332      	adds	r3, #50	; 0x32
 800406c:	4a27      	ldr	r2, [pc, #156]	; (800410c <UART_SetConfig+0x384>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800407a:	4498      	add	r8, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	461d      	mov	r5, r3
 8004080:	f04f 0600 	mov.w	r6, #0
 8004084:	46a9      	mov	r9, r5
 8004086:	46b2      	mov	sl, r6
 8004088:	eb19 0309 	adds.w	r3, r9, r9
 800408c:	eb4a 040a 	adc.w	r4, sl, sl
 8004090:	4699      	mov	r9, r3
 8004092:	46a2      	mov	sl, r4
 8004094:	eb19 0905 	adds.w	r9, r9, r5
 8004098:	eb4a 0a06 	adc.w	sl, sl, r6
 800409c:	f04f 0100 	mov.w	r1, #0
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040b0:	4689      	mov	r9, r1
 80040b2:	4692      	mov	sl, r2
 80040b4:	eb19 0005 	adds.w	r0, r9, r5
 80040b8:	eb4a 0106 	adc.w	r1, sl, r6
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	461d      	mov	r5, r3
 80040c2:	f04f 0600 	mov.w	r6, #0
 80040c6:	196b      	adds	r3, r5, r5
 80040c8:	eb46 0406 	adc.w	r4, r6, r6
 80040cc:	461a      	mov	r2, r3
 80040ce:	4623      	mov	r3, r4
 80040d0:	f7fc f8de 	bl	8000290 <__aeabi_uldivmod>
 80040d4:	4603      	mov	r3, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	461a      	mov	r2, r3
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <UART_SetConfig+0x384>)
 80040dc:	fba3 1302 	umull	r1, r3, r3, r2
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	2164      	movs	r1, #100	; 0x64
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	3332      	adds	r3, #50	; 0x32
 80040ee:	4a07      	ldr	r2, [pc, #28]	; (800410c <UART_SetConfig+0x384>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	f003 0207 	and.w	r2, r3, #7
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4442      	add	r2, r8
 8004100:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004102:	e1b2      	b.n	800446a <UART_SetConfig+0x6e2>
 8004104:	40011000 	.word	0x40011000
 8004108:	40011400 	.word	0x40011400
 800410c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4ad7      	ldr	r2, [pc, #860]	; (8004474 <UART_SetConfig+0x6ec>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d005      	beq.n	8004126 <UART_SetConfig+0x39e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4ad6      	ldr	r2, [pc, #856]	; (8004478 <UART_SetConfig+0x6f0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	f040 80d1 	bne.w	80042c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004126:	f7fd fd5d 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 800412a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	469a      	mov	sl, r3
 8004130:	f04f 0b00 	mov.w	fp, #0
 8004134:	46d0      	mov	r8, sl
 8004136:	46d9      	mov	r9, fp
 8004138:	eb18 0308 	adds.w	r3, r8, r8
 800413c:	eb49 0409 	adc.w	r4, r9, r9
 8004140:	4698      	mov	r8, r3
 8004142:	46a1      	mov	r9, r4
 8004144:	eb18 080a 	adds.w	r8, r8, sl
 8004148:	eb49 090b 	adc.w	r9, r9, fp
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004158:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800415c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004160:	4688      	mov	r8, r1
 8004162:	4691      	mov	r9, r2
 8004164:	eb1a 0508 	adds.w	r5, sl, r8
 8004168:	eb4b 0609 	adc.w	r6, fp, r9
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4619      	mov	r1, r3
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	f04f 0400 	mov.w	r4, #0
 800417e:	0094      	lsls	r4, r2, #2
 8004180:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004184:	008b      	lsls	r3, r1, #2
 8004186:	461a      	mov	r2, r3
 8004188:	4623      	mov	r3, r4
 800418a:	4628      	mov	r0, r5
 800418c:	4631      	mov	r1, r6
 800418e:	f7fc f87f 	bl	8000290 <__aeabi_uldivmod>
 8004192:	4603      	mov	r3, r0
 8004194:	460c      	mov	r4, r1
 8004196:	461a      	mov	r2, r3
 8004198:	4bb8      	ldr	r3, [pc, #736]	; (800447c <UART_SetConfig+0x6f4>)
 800419a:	fba3 2302 	umull	r2, r3, r3, r2
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	469b      	mov	fp, r3
 80041a8:	f04f 0c00 	mov.w	ip, #0
 80041ac:	46d9      	mov	r9, fp
 80041ae:	46e2      	mov	sl, ip
 80041b0:	eb19 0309 	adds.w	r3, r9, r9
 80041b4:	eb4a 040a 	adc.w	r4, sl, sl
 80041b8:	4699      	mov	r9, r3
 80041ba:	46a2      	mov	sl, r4
 80041bc:	eb19 090b 	adds.w	r9, r9, fp
 80041c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041c4:	f04f 0100 	mov.w	r1, #0
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041d8:	4689      	mov	r9, r1
 80041da:	4692      	mov	sl, r2
 80041dc:	eb1b 0509 	adds.w	r5, fp, r9
 80041e0:	eb4c 060a 	adc.w	r6, ip, sl
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4619      	mov	r1, r3
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	f04f 0400 	mov.w	r4, #0
 80041f6:	0094      	lsls	r4, r2, #2
 80041f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041fc:	008b      	lsls	r3, r1, #2
 80041fe:	461a      	mov	r2, r3
 8004200:	4623      	mov	r3, r4
 8004202:	4628      	mov	r0, r5
 8004204:	4631      	mov	r1, r6
 8004206:	f7fc f843 	bl	8000290 <__aeabi_uldivmod>
 800420a:	4603      	mov	r3, r0
 800420c:	460c      	mov	r4, r1
 800420e:	461a      	mov	r2, r3
 8004210:	4b9a      	ldr	r3, [pc, #616]	; (800447c <UART_SetConfig+0x6f4>)
 8004212:	fba3 1302 	umull	r1, r3, r3, r2
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2164      	movs	r1, #100	; 0x64
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	3332      	adds	r3, #50	; 0x32
 8004224:	4a95      	ldr	r2, [pc, #596]	; (800447c <UART_SetConfig+0x6f4>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004230:	4498      	add	r8, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	469b      	mov	fp, r3
 8004236:	f04f 0c00 	mov.w	ip, #0
 800423a:	46d9      	mov	r9, fp
 800423c:	46e2      	mov	sl, ip
 800423e:	eb19 0309 	adds.w	r3, r9, r9
 8004242:	eb4a 040a 	adc.w	r4, sl, sl
 8004246:	4699      	mov	r9, r3
 8004248:	46a2      	mov	sl, r4
 800424a:	eb19 090b 	adds.w	r9, r9, fp
 800424e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800425e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004262:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004266:	4689      	mov	r9, r1
 8004268:	4692      	mov	sl, r2
 800426a:	eb1b 0509 	adds.w	r5, fp, r9
 800426e:	eb4c 060a 	adc.w	r6, ip, sl
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4619      	mov	r1, r3
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	f04f 0400 	mov.w	r4, #0
 8004284:	0094      	lsls	r4, r2, #2
 8004286:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800428a:	008b      	lsls	r3, r1, #2
 800428c:	461a      	mov	r2, r3
 800428e:	4623      	mov	r3, r4
 8004290:	4628      	mov	r0, r5
 8004292:	4631      	mov	r1, r6
 8004294:	f7fb fffc 	bl	8000290 <__aeabi_uldivmod>
 8004298:	4603      	mov	r3, r0
 800429a:	460c      	mov	r4, r1
 800429c:	461a      	mov	r2, r3
 800429e:	4b77      	ldr	r3, [pc, #476]	; (800447c <UART_SetConfig+0x6f4>)
 80042a0:	fba3 1302 	umull	r1, r3, r3, r2
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	2164      	movs	r1, #100	; 0x64
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	3332      	adds	r3, #50	; 0x32
 80042b2:	4a72      	ldr	r2, [pc, #456]	; (800447c <UART_SetConfig+0x6f4>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	f003 020f 	and.w	r2, r3, #15
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4442      	add	r2, r8
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	e0d0      	b.n	800446a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7fd fc78 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 80042cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	469a      	mov	sl, r3
 80042d2:	f04f 0b00 	mov.w	fp, #0
 80042d6:	46d0      	mov	r8, sl
 80042d8:	46d9      	mov	r9, fp
 80042da:	eb18 0308 	adds.w	r3, r8, r8
 80042de:	eb49 0409 	adc.w	r4, r9, r9
 80042e2:	4698      	mov	r8, r3
 80042e4:	46a1      	mov	r9, r4
 80042e6:	eb18 080a 	adds.w	r8, r8, sl
 80042ea:	eb49 090b 	adc.w	r9, r9, fp
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004302:	4688      	mov	r8, r1
 8004304:	4691      	mov	r9, r2
 8004306:	eb1a 0508 	adds.w	r5, sl, r8
 800430a:	eb4b 0609 	adc.w	r6, fp, r9
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4619      	mov	r1, r3
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	f04f 0400 	mov.w	r4, #0
 8004320:	0094      	lsls	r4, r2, #2
 8004322:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004326:	008b      	lsls	r3, r1, #2
 8004328:	461a      	mov	r2, r3
 800432a:	4623      	mov	r3, r4
 800432c:	4628      	mov	r0, r5
 800432e:	4631      	mov	r1, r6
 8004330:	f7fb ffae 	bl	8000290 <__aeabi_uldivmod>
 8004334:	4603      	mov	r3, r0
 8004336:	460c      	mov	r4, r1
 8004338:	461a      	mov	r2, r3
 800433a:	4b50      	ldr	r3, [pc, #320]	; (800447c <UART_SetConfig+0x6f4>)
 800433c:	fba3 2302 	umull	r2, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	469b      	mov	fp, r3
 800434a:	f04f 0c00 	mov.w	ip, #0
 800434e:	46d9      	mov	r9, fp
 8004350:	46e2      	mov	sl, ip
 8004352:	eb19 0309 	adds.w	r3, r9, r9
 8004356:	eb4a 040a 	adc.w	r4, sl, sl
 800435a:	4699      	mov	r9, r3
 800435c:	46a2      	mov	sl, r4
 800435e:	eb19 090b 	adds.w	r9, r9, fp
 8004362:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004372:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004376:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800437a:	4689      	mov	r9, r1
 800437c:	4692      	mov	sl, r2
 800437e:	eb1b 0509 	adds.w	r5, fp, r9
 8004382:	eb4c 060a 	adc.w	r6, ip, sl
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	f04f 0400 	mov.w	r4, #0
 8004398:	0094      	lsls	r4, r2, #2
 800439a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800439e:	008b      	lsls	r3, r1, #2
 80043a0:	461a      	mov	r2, r3
 80043a2:	4623      	mov	r3, r4
 80043a4:	4628      	mov	r0, r5
 80043a6:	4631      	mov	r1, r6
 80043a8:	f7fb ff72 	bl	8000290 <__aeabi_uldivmod>
 80043ac:	4603      	mov	r3, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b32      	ldr	r3, [pc, #200]	; (800447c <UART_SetConfig+0x6f4>)
 80043b4:	fba3 1302 	umull	r1, r3, r3, r2
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	2164      	movs	r1, #100	; 0x64
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	3332      	adds	r3, #50	; 0x32
 80043c6:	4a2d      	ldr	r2, [pc, #180]	; (800447c <UART_SetConfig+0x6f4>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d2:	4498      	add	r8, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	469b      	mov	fp, r3
 80043d8:	f04f 0c00 	mov.w	ip, #0
 80043dc:	46d9      	mov	r9, fp
 80043de:	46e2      	mov	sl, ip
 80043e0:	eb19 0309 	adds.w	r3, r9, r9
 80043e4:	eb4a 040a 	adc.w	r4, sl, sl
 80043e8:	4699      	mov	r9, r3
 80043ea:	46a2      	mov	sl, r4
 80043ec:	eb19 090b 	adds.w	r9, r9, fp
 80043f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043f4:	f04f 0100 	mov.w	r1, #0
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004400:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004404:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004408:	4689      	mov	r9, r1
 800440a:	4692      	mov	sl, r2
 800440c:	eb1b 0509 	adds.w	r5, fp, r9
 8004410:	eb4c 060a 	adc.w	r6, ip, sl
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4619      	mov	r1, r3
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	f04f 0400 	mov.w	r4, #0
 8004426:	0094      	lsls	r4, r2, #2
 8004428:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800442c:	008b      	lsls	r3, r1, #2
 800442e:	461a      	mov	r2, r3
 8004430:	4623      	mov	r3, r4
 8004432:	4628      	mov	r0, r5
 8004434:	4631      	mov	r1, r6
 8004436:	f7fb ff2b 	bl	8000290 <__aeabi_uldivmod>
 800443a:	4603      	mov	r3, r0
 800443c:	460c      	mov	r4, r1
 800443e:	461a      	mov	r2, r3
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <UART_SetConfig+0x6f4>)
 8004442:	fba3 1302 	umull	r1, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2164      	movs	r1, #100	; 0x64
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	3332      	adds	r3, #50	; 0x32
 8004454:	4a09      	ldr	r2, [pc, #36]	; (800447c <UART_SetConfig+0x6f4>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 020f 	and.w	r2, r3, #15
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4442      	add	r2, r8
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	e7ff      	b.n	800446a <UART_SetConfig+0x6e2>
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004474:	40011000 	.word	0x40011000
 8004478:	40011400 	.word	0x40011400
 800447c:	51eb851f 	.word	0x51eb851f

08004480 <bufferInit>:
	uint8_t _p_tx_buffer[BUFFER_SIZE];
}s_Buff;

//void bufferInit(t_Buff buffer);

void bufferInit(s_Buff *buffer){
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e007      	b.n	800449e <bufferInit+0x1e>
		buffer->_p_rx_buffer[i] = 0;
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3301      	adds	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b18      	cmp	r3, #24
 80044a2:	ddf4      	ble.n	800448e <bufferInit+0xe>
	}
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044b4:	f7fc f86c 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044b8:	f000 f82e 	bl	8004518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044bc:	f000 fa26 	bl	800490c <MX_GPIO_Init>
  MX_DMA_Init();
 80044c0:	f000 f9fc 	bl	80048bc <MX_DMA_Init>
  MX_CRC_Init();
 80044c4:	f000 f8ac 	bl	8004620 <MX_CRC_Init>
  MX_RTC_Init();
 80044c8:	f000 f8be 	bl	8004648 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80044cc:	f000 f9cc 	bl	8004868 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80044d0:	f000 f954 	bl	800477c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 80044d4:	2201      	movs	r2, #1
 80044d6:	490b      	ldr	r1, [pc, #44]	; (8004504 <main+0x54>)
 80044d8:	480b      	ldr	r0, [pc, #44]	; (8004508 <main+0x58>)
 80044da:	f7ff f8bd 	bl	8003658 <HAL_UART_Receive_DMA>

  memcpy((char*)s_buffer._p_tx_buffer, HELLO_WORLD, strlen(HELLO_WORLD));
 80044de:	220c      	movs	r2, #12
 80044e0:	490a      	ldr	r1, [pc, #40]	; (800450c <main+0x5c>)
 80044e2:	480b      	ldr	r0, [pc, #44]	; (8004510 <main+0x60>)
 80044e4:	f000 fe80 	bl	80051e8 <memcpy>
#ifndef UART_TX_DMA
  HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(HELLO_WORLD), 10);
#else
  HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(HELLO_WORLD));
 80044e8:	220c      	movs	r2, #12
 80044ea:	4909      	ldr	r1, [pc, #36]	; (8004510 <main+0x60>)
 80044ec:	4806      	ldr	r0, [pc, #24]	; (8004508 <main+0x58>)
 80044ee:	f7ff f847 	bl	8003580 <HAL_UART_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80044f2:	2120      	movs	r1, #32
 80044f4:	4807      	ldr	r0, [pc, #28]	; (8004514 <main+0x64>)
 80044f6:	f7fc ff0c 	bl	8001312 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80044fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044fe:	f7fc f889 	bl	8000614 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004502:	e7f6      	b.n	80044f2 <main+0x42>
 8004504:	200002ca 	.word	0x200002ca
 8004508:	200003ac 	.word	0x200003ac
 800450c:	08005cb0 	.word	0x08005cb0
 8004510:	200002cb 	.word	0x200002cb
 8004514:	40020000 	.word	0x40020000

08004518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b09a      	sub	sp, #104	; 0x68
 800451c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800451e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004522:	2230      	movs	r2, #48	; 0x30
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fe69 	bl	80051fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800452c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800453c:	f107 030c 	add.w	r3, r7, #12
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	60da      	str	r2, [r3, #12]
 800454a:	611a      	str	r2, [r3, #16]
 800454c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	4b31      	ldr	r3, [pc, #196]	; (8004618 <SystemClock_Config+0x100>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4a30      	ldr	r2, [pc, #192]	; (8004618 <SystemClock_Config+0x100>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6413      	str	r3, [r2, #64]	; 0x40
 800455e:	4b2e      	ldr	r3, [pc, #184]	; (8004618 <SystemClock_Config+0x100>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <SystemClock_Config+0x104>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2a      	ldr	r2, [pc, #168]	; (800461c <SystemClock_Config+0x104>)
 8004574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b28      	ldr	r3, [pc, #160]	; (800461c <SystemClock_Config+0x104>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004586:	2306      	movs	r3, #6
 8004588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800458a:	2301      	movs	r3, #1
 800458c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800458e:	2301      	movs	r3, #1
 8004590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004592:	2310      	movs	r3, #16
 8004594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004596:	2302      	movs	r3, #2
 8004598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800459a:	2300      	movs	r3, #0
 800459c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 800459e:	2310      	movs	r3, #16
 80045a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 80045a2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80045a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80045a8:	2304      	movs	r3, #4
 80045aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80045ac:	2304      	movs	r3, #4
 80045ae:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fc fec7 	bl	8001348 <HAL_RCC_OscConfig>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80045c0:	f000 fb40 	bl	8004c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045c4:	230f      	movs	r3, #15
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045c8:	2302      	movs	r3, #2
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045cc:	2300      	movs	r3, #0
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045d6:	2300      	movs	r3, #0
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045de:	2102      	movs	r1, #2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fd f921 	bl	8001828 <HAL_RCC_ClockConfig>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80045ec:	f000 fb2a 	bl	8004c44 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80045f0:	2302      	movs	r3, #2
 80045f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80045f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045f8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd fb36 	bl	8001c70 <HAL_RCCEx_PeriphCLKConfig>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800460a:	f000 fb1b 	bl	8004c44 <Error_Handler>
  }
}
 800460e:	bf00      	nop
 8004610:	3768      	adds	r7, #104	; 0x68
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000

08004620 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <MX_CRC_Init+0x20>)
 8004626:	4a07      	ldr	r2, [pc, #28]	; (8004644 <MX_CRC_Init+0x24>)
 8004628:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800462a:	4805      	ldr	r0, [pc, #20]	; (8004640 <MX_CRC_Init+0x20>)
 800462c:	f7fc f8f6 	bl	800081c <HAL_CRC_Init>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8004636:	f000 fb05 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200002e4 	.word	0x200002e4
 8004644:	40023000 	.word	0x40023000

08004648 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b090      	sub	sp, #64	; 0x40
 800464c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800464e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	609a      	str	r2, [r3, #8]
 800465a:	60da      	str	r2, [r3, #12]
 800465c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800465e:	2300      	movs	r3, #0
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004662:	463b      	mov	r3, r7
 8004664:	2228      	movs	r2, #40	; 0x28
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fdc8 	bl	80051fe <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800466e:	4b41      	ldr	r3, [pc, #260]	; (8004774 <MX_RTC_Init+0x12c>)
 8004670:	4a41      	ldr	r2, [pc, #260]	; (8004778 <MX_RTC_Init+0x130>)
 8004672:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004674:	4b3f      	ldr	r3, [pc, #252]	; (8004774 <MX_RTC_Init+0x12c>)
 8004676:	2200      	movs	r2, #0
 8004678:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800467a:	4b3e      	ldr	r3, [pc, #248]	; (8004774 <MX_RTC_Init+0x12c>)
 800467c:	227f      	movs	r2, #127	; 0x7f
 800467e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004680:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <MX_RTC_Init+0x12c>)
 8004682:	22ff      	movs	r2, #255	; 0xff
 8004684:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004686:	4b3b      	ldr	r3, [pc, #236]	; (8004774 <MX_RTC_Init+0x12c>)
 8004688:	2200      	movs	r2, #0
 800468a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800468c:	4b39      	ldr	r3, [pc, #228]	; (8004774 <MX_RTC_Init+0x12c>)
 800468e:	2200      	movs	r2, #0
 8004690:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004692:	4b38      	ldr	r3, [pc, #224]	; (8004774 <MX_RTC_Init+0x12c>)
 8004694:	2200      	movs	r2, #0
 8004696:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004698:	4836      	ldr	r0, [pc, #216]	; (8004774 <MX_RTC_Init+0x12c>)
 800469a:	f7fd fbd9 	bl	8001e50 <HAL_RTC_Init>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80046a4:	f000 face 	bl	8004c44 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80046be:	2300      	movs	r3, #0
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80046c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046c6:	2200      	movs	r2, #0
 80046c8:	4619      	mov	r1, r3
 80046ca:	482a      	ldr	r0, [pc, #168]	; (8004774 <MX_RTC_Init+0x12c>)
 80046cc:	f7fd fc51 	bl	8001f72 <HAL_RTC_SetTime>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80046d6:	f000 fab5 	bl	8004c44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80046f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046f6:	2200      	movs	r2, #0
 80046f8:	4619      	mov	r1, r3
 80046fa:	481e      	ldr	r0, [pc, #120]	; (8004774 <MX_RTC_Init+0x12c>)
 80046fc:	f7fd fcf6 	bl	80020ec <HAL_RTC_SetDate>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8004706:	f000 fa9d 	bl	8004c44 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 8004712:	2301      	movs	r3, #1
 8004714:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8004722:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8004726:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800472c:	2300      	movs	r3, #0
 800472e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800473c:	463b      	mov	r3, r7
 800473e:	2200      	movs	r2, #0
 8004740:	4619      	mov	r1, r3
 8004742:	480c      	ldr	r0, [pc, #48]	; (8004774 <MX_RTC_Init+0x12c>)
 8004744:	f7fd fd7a 	bl	800223c <HAL_RTC_SetAlarm_IT>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800474e:	f000 fa79 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
    if (HAL_RTCEx_SetSmoothCalib(
 8004752:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004756:	2200      	movs	r2, #0
 8004758:	2100      	movs	r1, #0
 800475a:	4806      	ldr	r0, [pc, #24]	; (8004774 <MX_RTC_Init+0x12c>)
 800475c:	f7fd ff5e 	bl	800261c <HAL_RTCEx_SetSmoothCalib>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <MX_RTC_Init+0x122>
		&hrtc,
		RTC_SMOOTHCALIB_PERIOD_32SEC,
		RTC_SMOOTHCALIB_PLUSPULSES_RESET,
		0x1FFU) != HAL_OK) {
    		Error_Handler();
 8004766:	f000 fa6d 	bl	8004c44 <Error_Handler>
      	}
  /* USER CODE END RTC_Init 2 */

}
 800476a:	bf00      	nop
 800476c:	3740      	adds	r7, #64	; 0x40
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2000038c 	.word	0x2000038c
 8004778:	40002800 	.word	0x40002800

0800477c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08e      	sub	sp, #56	; 0x38
 8004780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	605a      	str	r2, [r3, #4]
 800478c:	609a      	str	r2, [r3, #8]
 800478e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004790:	f107 0320 	add.w	r3, r7, #32
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
 80047a8:	615a      	str	r2, [r3, #20]
 80047aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <MX_TIM3_Init+0xe4>)
 80047ae:	4a2d      	ldr	r2, [pc, #180]	; (8004864 <MX_TIM3_Init+0xe8>)
 80047b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80047b2:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <MX_TIM3_Init+0xe4>)
 80047b4:	2253      	movs	r2, #83	; 0x53
 80047b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047b8:	4b29      	ldr	r3, [pc, #164]	; (8004860 <MX_TIM3_Init+0xe4>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80047be:	4b28      	ldr	r3, [pc, #160]	; (8004860 <MX_TIM3_Init+0xe4>)
 80047c0:	2263      	movs	r2, #99	; 0x63
 80047c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047c4:	4b26      	ldr	r3, [pc, #152]	; (8004860 <MX_TIM3_Init+0xe4>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ca:	4b25      	ldr	r3, [pc, #148]	; (8004860 <MX_TIM3_Init+0xe4>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80047d0:	4823      	ldr	r0, [pc, #140]	; (8004860 <MX_TIM3_Init+0xe4>)
 80047d2:	f7fd ff88 	bl	80026e6 <HAL_TIM_Base_Init>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80047dc:	f000 fa32 	bl	8004c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80047e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047ea:	4619      	mov	r1, r3
 80047ec:	481c      	ldr	r0, [pc, #112]	; (8004860 <MX_TIM3_Init+0xe4>)
 80047ee:	f7fe fa4b 	bl	8002c88 <HAL_TIM_ConfigClockSource>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80047f8:	f000 fa24 	bl	8004c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80047fc:	4818      	ldr	r0, [pc, #96]	; (8004860 <MX_TIM3_Init+0xe4>)
 80047fe:	f7fd ffc1 	bl	8002784 <HAL_TIM_PWM_Init>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004808:	f000 fa1c 	bl	8004c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800480c:	2300      	movs	r3, #0
 800480e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004810:	2300      	movs	r3, #0
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004814:	f107 0320 	add.w	r3, r7, #32
 8004818:	4619      	mov	r1, r3
 800481a:	4811      	ldr	r0, [pc, #68]	; (8004860 <MX_TIM3_Init+0xe4>)
 800481c:	f7fe fde0 	bl	80033e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8004826:	f000 fa0d 	bl	8004c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800482a:	2360      	movs	r3, #96	; 0x60
 800482c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	2200      	movs	r2, #0
 800483e:	4619      	mov	r1, r3
 8004840:	4807      	ldr	r0, [pc, #28]	; (8004860 <MX_TIM3_Init+0xe4>)
 8004842:	f7fe f95b 	bl	8002afc <HAL_TIM_PWM_ConfigChannel>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800484c:	f000 f9fa 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004850:	4803      	ldr	r0, [pc, #12]	; (8004860 <MX_TIM3_Init+0xe4>)
 8004852:	f000 fa87 	bl	8004d64 <HAL_TIM_MspPostInit>

}
 8004856:	bf00      	nop
 8004858:	3738      	adds	r7, #56	; 0x38
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	200002ec 	.word	0x200002ec
 8004864:	40000400 	.word	0x40000400

08004868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <MX_USART2_UART_Init+0x4c>)
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <MX_USART2_UART_Init+0x50>)
 8004870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <MX_USART2_UART_Init+0x4c>)
 8004874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <MX_USART2_UART_Init+0x4c>)
 800487c:	2200      	movs	r2, #0
 800487e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004880:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <MX_USART2_UART_Init+0x4c>)
 8004882:	2200      	movs	r2, #0
 8004884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <MX_USART2_UART_Init+0x4c>)
 8004888:	2200      	movs	r2, #0
 800488a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <MX_USART2_UART_Init+0x4c>)
 800488e:	220c      	movs	r2, #12
 8004890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <MX_USART2_UART_Init+0x4c>)
 8004894:	2200      	movs	r2, #0
 8004896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <MX_USART2_UART_Init+0x4c>)
 800489a:	2200      	movs	r2, #0
 800489c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800489e:	4805      	ldr	r0, [pc, #20]	; (80048b4 <MX_USART2_UART_Init+0x4c>)
 80048a0:	f7fe fe20 	bl	80034e4 <HAL_UART_Init>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80048aa:	f000 f9cb 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	200003ac 	.word	0x200003ac
 80048b8:	40004400 	.word	0x40004400

080048bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	4b10      	ldr	r3, [pc, #64]	; (8004908 <MX_DMA_Init+0x4c>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a0f      	ldr	r2, [pc, #60]	; (8004908 <MX_DMA_Init+0x4c>)
 80048cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048d0:	6313      	str	r3, [r2, #48]	; 0x30
 80048d2:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <MX_DMA_Init+0x4c>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80048de:	2200      	movs	r2, #0
 80048e0:	2100      	movs	r1, #0
 80048e2:	2010      	movs	r0, #16
 80048e4:	f7fb ff70 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80048e8:	2010      	movs	r0, #16
 80048ea:	f7fb ff89 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80048ee:	2200      	movs	r2, #0
 80048f0:	2100      	movs	r1, #0
 80048f2:	2011      	movs	r0, #17
 80048f4:	f7fb ff68 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80048f8:	2011      	movs	r0, #17
 80048fa:	f7fb ff81 	bl	8000800 <HAL_NVIC_EnableIRQ>

}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800

0800490c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	609a      	str	r2, [r3, #8]
 800491e:	60da      	str	r2, [r3, #12]
 8004920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	4b18      	ldr	r3, [pc, #96]	; (8004988 <MX_GPIO_Init+0x7c>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a17      	ldr	r2, [pc, #92]	; (8004988 <MX_GPIO_Init+0x7c>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <MX_GPIO_Init+0x7c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <MX_GPIO_Init+0x7c>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	4a10      	ldr	r2, [pc, #64]	; (8004988 <MX_GPIO_Init+0x7c>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6313      	str	r3, [r2, #48]	; 0x30
 800494e:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <MX_GPIO_Init+0x7c>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800495a:	2200      	movs	r2, #0
 800495c:	2120      	movs	r1, #32
 800495e:	480b      	ldr	r0, [pc, #44]	; (800498c <MX_GPIO_Init+0x80>)
 8004960:	f7fc fcbe 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004964:	2320      	movs	r3, #32
 8004966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004968:	2301      	movs	r3, #1
 800496a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004970:	2300      	movs	r3, #0
 8004972:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	4619      	mov	r1, r3
 800497a:	4804      	ldr	r0, [pc, #16]	; (800498c <MX_GPIO_Init+0x80>)
 800497c:	f7fc fb2e 	bl	8000fdc <HAL_GPIO_Init>

}
 8004980:	bf00      	nop
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40023800 	.word	0x40023800
 800498c:	40020000 	.word	0x40020000

08004990 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */

  //HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, 20);
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	if (s_buffer._rx_single_char != '\n')
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049ae:	7e9b      	ldrb	r3, [r3, #26]
 80049b0:	2b0a      	cmp	r3, #10
 80049b2:	d011      	beq.n	80049d8 <HAL_UART_RxCpltCallback+0x34>
	{
		if(s_buffer._rx_index < BUFFER_SIZE)
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049b6:	7e5b      	ldrb	r3, [r3, #25]
 80049b8:	2b18      	cmp	r3, #24
 80049ba:	d822      	bhi.n	8004a02 <HAL_UART_RxCpltCallback+0x5e>
		{
			s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 80049bc:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049be:	7e5b      	ldrb	r3, [r3, #25]
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049c4:	7e99      	ldrb	r1, [r3, #26]
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049c8:	5499      	strb	r1, [r3, r2]
			s_buffer._rx_index++;
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049cc:	7e5b      	ldrb	r3, [r3, #25]
 80049ce:	3301      	adds	r3, #1
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049d4:	765a      	strb	r2, [r3, #25]
 80049d6:	e014      	b.n	8004a02 <HAL_UART_RxCpltCallback+0x5e>
		}
	}
	else
	{
		s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049da:	7e5b      	ldrb	r3, [r3, #25]
 80049dc:	461a      	mov	r2, r3
 80049de:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049e0:	7e99      	ldrb	r1, [r3, #26]
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049e4:	5499      	strb	r1, [r3, r2]
		s_buffer._rx_index++;
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049e8:	7e5b      	ldrb	r3, [r3, #25]
 80049ea:	3301      	adds	r3, #1
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049f0:	765a      	strb	r2, [r3, #25]
		whichCommand();
 80049f2:	f000 f815 	bl	8004a20 <whichCommand>
		bufferInit(&s_buffer);
 80049f6:	4807      	ldr	r0, [pc, #28]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049f8:	f7ff fd42 	bl	8004480 <bufferInit>
		s_buffer._rx_index = 0;
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_UART_RxCpltCallback+0x70>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	765a      	strb	r2, [r3, #25]
	}

	//HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
	HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 8004a02:	2201      	movs	r2, #1
 8004a04:	4904      	ldr	r1, [pc, #16]	; (8004a18 <HAL_UART_RxCpltCallback+0x74>)
 8004a06:	4805      	ldr	r0, [pc, #20]	; (8004a1c <HAL_UART_RxCpltCallback+0x78>)
 8004a08:	f7fe fe26 	bl	8003658 <HAL_UART_Receive_DMA>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	200002b0 	.word	0x200002b0
 8004a18:	200002ca 	.word	0x200002ca
 8004a1c:	200003ac 	.word	0x200003ac

08004a20 <whichCommand>:

void whichCommand (void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
	char* token = strtok((char*)s_buffer._p_rx_buffer, " ");
 8004a26:	491b      	ldr	r1, [pc, #108]	; (8004a94 <whichCommand+0x74>)
 8004a28:	481b      	ldr	r0, [pc, #108]	; (8004a98 <whichCommand+0x78>)
 8004a2a:	f000 fc23 	bl	8005274 <strtok>
 8004a2e:	6038      	str	r0, [r7, #0]

	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	71fb      	strb	r3, [r7, #7]
 8004a34:	e027      	b.n	8004a86 <whichCommand+0x66>
	{
		if (strncmp(token, commands[i]._name, commands[i]._size)==0)
 8004a36:	79fa      	ldrb	r2, [r7, #7]
 8004a38:	4918      	ldr	r1, [pc, #96]	; (8004a9c <whichCommand+0x7c>)
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	79fa      	ldrb	r2, [r7, #7]
 8004a48:	4914      	ldr	r1, [pc, #80]	; (8004a9c <whichCommand+0x7c>)
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3304      	adds	r3, #4
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	6838      	ldr	r0, [r7, #0]
 8004a5e:	f000 fbf7 	bl	8005250 <strncmp>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <whichCommand+0x60>
		{
			commands[i].func_ptr(token);
 8004a68:	79fa      	ldrb	r2, [r7, #7]
 8004a6a:	490c      	ldr	r1, [pc, #48]	; (8004a9c <whichCommand+0x7c>)
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	3308      	adds	r3, #8
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6838      	ldr	r0, [r7, #0]
 8004a7c:	4798      	blx	r3
			return;
 8004a7e:	e005      	b.n	8004a8c <whichCommand+0x6c>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	3301      	adds	r3, #1
 8004a84:	71fb      	strb	r3, [r7, #7]
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	2b05      	cmp	r3, #5
 8004a8a:	d9d4      	bls.n	8004a36 <whichCommand+0x16>
		}
	}
}
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	08005cc0 	.word	0x08005cc0
 8004a98:	200002b0 	.word	0x200002b0
 8004a9c:	20000008 	.word	0x20000008

08004aa0 <ping_callBack>:

void ping_callBack(char* token)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)token, strlen(token), 10);
#else
	memcpy((char*)s_buffer._p_tx_buffer, (char*)token, strlen(token) +1);
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(token));
#endif*/
	uart_print(token);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f899 	bl	8004be0 <uart_print>
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <version_callback>:

void version_callback(char* token)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
#ifndef UART_TX_DMA
  HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(VERSION), 10);
#else
  HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(VERSION));
#endif*/
  uart_print(VERSION);
 8004ac0:	4803      	ldr	r0, [pc, #12]	; (8004ad0 <version_callback+0x18>)
 8004ac2:	f000 f88d 	bl	8004be0 <uart_print>
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	08005cc4 	.word	0x08005cc4

08004ad4 <pwm_start_callback>:

void pwm_start_callback(char* token)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004adc:	2100      	movs	r1, #0
 8004ade:	4805      	ldr	r0, [pc, #20]	; (8004af4 <pwm_start_callback+0x20>)
 8004ae0:	f7fd fe86 	bl	80027f0 <HAL_TIM_PWM_Start>
#ifndef UART_TX_DMA
	HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(OK), 10);
#else
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(OK));
#endif*/
	uart_print(OK);
 8004ae4:	4804      	ldr	r0, [pc, #16]	; (8004af8 <pwm_start_callback+0x24>)
 8004ae6:	f000 f87b 	bl	8004be0 <uart_print>
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	200002ec 	.word	0x200002ec
 8004af8:	08005ccc 	.word	0x08005ccc

08004afc <pwm_stop_callback>:

void pwm_stop_callback(char* token)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8004b04:	2100      	movs	r1, #0
 8004b06:	4805      	ldr	r0, [pc, #20]	; (8004b1c <pwm_stop_callback+0x20>)
 8004b08:	f7fd fea4 	bl	8002854 <HAL_TIM_PWM_Stop>
#ifndef UART_TX_DMA
	HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(OK), 10);
#else
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(OK));
#endif*/
	uart_print(OK);
 8004b0c:	4804      	ldr	r0, [pc, #16]	; (8004b20 <pwm_stop_callback+0x24>)
 8004b0e:	f000 f867 	bl	8004be0 <uart_print>
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	200002ec 	.word	0x200002ec
 8004b20:	08005ccc 	.word	0x08005ccc

08004b24 <pwm_dc_callback>:

void pwm_dc_callback(char* token)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8004b2c:	4911      	ldr	r1, [pc, #68]	; (8004b74 <pwm_dc_callback+0x50>)
 8004b2e:	2000      	movs	r0, #0
 8004b30:	f000 fba0 	bl	8005274 <strtok>
 8004b34:	6078      	str	r0, [r7, #4]

	if(strlen(token) <= 0)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d015      	beq.n	8004b6a <pwm_dc_callback+0x46>
	{
		return;
	}

	int32_t dc = atoi(token);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fb23 	bl	800518a <atoi>
 8004b44:	60f8      	str	r0, [r7, #12]

	if (dc > 100) dc = 100;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b64      	cmp	r3, #100	; 0x64
 8004b4a:	dd01      	ble.n	8004b50 <pwm_dc_callback+0x2c>
 8004b4c:	2364      	movs	r3, #100	; 0x64
 8004b4e:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	da01      	bge.n	8004b5a <pwm_dc_callback+0x36>
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]

	htim3.Instance->CCR1 = dc;
 8004b5a:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <pwm_dc_callback+0x54>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	635a      	str	r2, [r3, #52]	; 0x34
#ifndef UART_TX_DMA
	HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(OK), 10);
#else
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(OK));
#endif*/
	uart_print(OK);
 8004b62:	4806      	ldr	r0, [pc, #24]	; (8004b7c <pwm_dc_callback+0x58>)
 8004b64:	f000 f83c 	bl	8004be0 <uart_print>
 8004b68:	e000      	b.n	8004b6c <pwm_dc_callback+0x48>
		return;
 8004b6a:	bf00      	nop
}
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08005cc0 	.word	0x08005cc0
 8004b78:	200002ec 	.word	0x200002ec
 8004b7c:	08005ccc 	.word	0x08005ccc

08004b80 <crc_whole_flash_calc_callback>:

void crc_whole_flash_calc_callback(char* token)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
		offsetAddr += 0x4000;
	}*/


	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 8004b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b8c:	617b      	str	r3, [r7, #20]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 8004b8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b92:	613b      	str	r3, [r7, #16]

	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	6939      	ldr	r1, [r7, #16]
 8004b98:	4807      	ldr	r0, [pc, #28]	; (8004bb8 <crc_whole_flash_calc_callback+0x38>)
 8004b9a:	f7fb fe5b 	bl	8000854 <HAL_CRC_Calculate>
 8004b9e:	60f8      	str	r0, [r7, #12]

	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)crcFlashResult);
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4906      	ldr	r1, [pc, #24]	; (8004bbc <crc_whole_flash_calc_callback+0x3c>)
 8004ba4:	4806      	ldr	r0, [pc, #24]	; (8004bc0 <crc_whole_flash_calc_callback+0x40>)
 8004ba6:	f000 fb33 	bl	8005210 <siprintf>
/*#ifndef UART_TX_DMA
	HAL_UART_Transmit(&huart2, (uint8_t*)s_buffer._p_tx_buffer, strlen((char*)s_buffer._p_tx_buffer), 10);
#else
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen((char*)s_buffer._p_tx_buffer));
#endif*/
	uart_print((char*)s_buffer._p_tx_buffer);
 8004baa:	4805      	ldr	r0, [pc, #20]	; (8004bc0 <crc_whole_flash_calc_callback+0x40>)
 8004bac:	f000 f818 	bl	8004be0 <uart_print>
}
 8004bb0:	bf00      	nop
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	200002e4 	.word	0x200002e4
 8004bbc:	08005cd0 	.word	0x08005cd0
 8004bc0:	200002cb 	.word	0x200002cb

08004bc4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(TICK), 10);
#else
  HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(TICK));
#endif*/

  uart_print(TICK);
 8004bcc:	4803      	ldr	r0, [pc, #12]	; (8004bdc <HAL_RTC_AlarmAEventCallback+0x18>)
 8004bce:	f000 f807 	bl	8004be0 <uart_print>

}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	08005cd4 	.word	0x08005cd4

08004be0 <uart_print>:

void uart_print(char* token)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	memcpy((char*)s_buffer._p_tx_buffer, token, strlen(token));
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fb faf9 	bl	80001e0 <strlen>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4808      	ldr	r0, [pc, #32]	; (8004c18 <uart_print+0x38>)
 8004bf6:	f000 faf7 	bl	80051e8 <memcpy>
#ifndef UART_TX_DMA
  HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(token), 10);
#else
  HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(token));
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fb faf0 	bl	80001e0 <strlen>
 8004c00:	4603      	mov	r3, r0
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	4904      	ldr	r1, [pc, #16]	; (8004c18 <uart_print+0x38>)
 8004c08:	4804      	ldr	r0, [pc, #16]	; (8004c1c <uart_print+0x3c>)
 8004c0a:	f7fe fcb9 	bl	8003580 <HAL_UART_Transmit_DMA>
#endif
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200002cb 	.word	0x200002cb
 8004c1c:	200003ac 	.word	0x200003ac

08004c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d101      	bne.n	8004c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004c32:	f7fb fccf 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000

08004c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <HAL_MspInit+0x4c>)
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	4a0f      	ldr	r2, [pc, #60]	; (8004ca0 <HAL_MspInit+0x4c>)
 8004c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c68:	6453      	str	r3, [r2, #68]	; 0x44
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <HAL_MspInit+0x4c>)
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_MspInit+0x4c>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <HAL_MspInit+0x4c>)
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c84:	6413      	str	r3, [r2, #64]	; 0x40
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_MspInit+0x4c>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004c92:	2007      	movs	r0, #7
 8004c94:	f7fb fd8d 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40023800 	.word	0x40023800

08004ca4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <HAL_CRC_MspInit+0x3c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <HAL_CRC_MspInit+0x40>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <HAL_CRC_MspInit+0x40>)
 8004cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <HAL_CRC_MspInit+0x40>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40023000 	.word	0x40023000
 8004ce4:	40023800 	.word	0x40023800

08004ce8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <HAL_RTC_MspInit+0x30>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d10a      	bne.n	8004d10 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <HAL_RTC_MspInit+0x34>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	2100      	movs	r1, #0
 8004d04:	2029      	movs	r0, #41	; 0x29
 8004d06:	f7fb fd5f 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004d0a:	2029      	movs	r0, #41	; 0x29
 8004d0c:	f7fb fd78 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40002800 	.word	0x40002800
 8004d1c:	42470e3c 	.word	0x42470e3c

08004d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <HAL_TIM_Base_MspInit+0x3c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10d      	bne.n	8004d4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_TIM_Base_MspInit+0x40>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <HAL_TIM_Base_MspInit+0x40>)
 8004d3c:	f043 0302 	orr.w	r3, r3, #2
 8004d40:	6413      	str	r3, [r2, #64]	; 0x40
 8004d42:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <HAL_TIM_Base_MspInit+0x40>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40023800 	.word	0x40023800

08004d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d6c:	f107 030c 	add.w	r3, r7, #12
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	605a      	str	r2, [r3, #4]
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <HAL_TIM_MspPostInit+0x68>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d11d      	bne.n	8004dc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <HAL_TIM_MspPostInit+0x6c>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	4a10      	ldr	r2, [pc, #64]	; (8004dd0 <HAL_TIM_MspPostInit+0x6c>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6313      	str	r3, [r2, #48]	; 0x30
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <HAL_TIM_MspPostInit+0x6c>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004da2:	2340      	movs	r3, #64	; 0x40
 8004da4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da6:	2302      	movs	r3, #2
 8004da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004db2:	2302      	movs	r3, #2
 8004db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db6:	f107 030c 	add.w	r3, r7, #12
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4805      	ldr	r0, [pc, #20]	; (8004dd4 <HAL_TIM_MspPostInit+0x70>)
 8004dbe:	f7fc f90d 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004dc2:	bf00      	nop
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	40020000 	.word	0x40020000

08004dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	609a      	str	r2, [r3, #8]
 8004dec:	60da      	str	r2, [r3, #12]
 8004dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a4b      	ldr	r2, [pc, #300]	; (8004f24 <HAL_UART_MspInit+0x14c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	f040 8090 	bne.w	8004f1c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <HAL_UART_MspInit+0x150>)
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	4a48      	ldr	r2, [pc, #288]	; (8004f28 <HAL_UART_MspInit+0x150>)
 8004e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0c:	4b46      	ldr	r3, [pc, #280]	; (8004f28 <HAL_UART_MspInit+0x150>)
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <HAL_UART_MspInit+0x150>)
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	4a41      	ldr	r2, [pc, #260]	; (8004f28 <HAL_UART_MspInit+0x150>)
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	6313      	str	r3, [r2, #48]	; 0x30
 8004e28:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <HAL_UART_MspInit+0x150>)
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004e34:	230c      	movs	r3, #12
 8004e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e40:	2303      	movs	r3, #3
 8004e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e44:	2307      	movs	r3, #7
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4837      	ldr	r0, [pc, #220]	; (8004f2c <HAL_UART_MspInit+0x154>)
 8004e50:	f7fc f8c4 	bl	8000fdc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004e54:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e56:	4a37      	ldr	r2, [pc, #220]	; (8004f34 <HAL_UART_MspInit+0x15c>)
 8004e58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004e5a:	4b35      	ldr	r3, [pc, #212]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e60:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e62:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e68:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e6e:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e76:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e7c:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004e82:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e88:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e8e:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004e94:	4826      	ldr	r0, [pc, #152]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004e96:	f7fb fd11 	bl	80008bc <HAL_DMA_Init>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004ea0:	f7ff fed0 	bl	8004c44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a22      	ldr	r2, [pc, #136]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8004eaa:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <HAL_UART_MspInit+0x158>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004eb2:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <HAL_UART_MspInit+0x164>)
 8004eb4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004eb6:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004eb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ebc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004ec0:	2240      	movs	r2, #64	; 0x40
 8004ec2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ec4:	4b1c      	ldr	r3, [pc, #112]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004eca:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ed0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ed2:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ed8:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004ede:	4b16      	ldr	r3, [pc, #88]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ee4:	4b14      	ldr	r3, [pc, #80]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004eea:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004ef0:	4811      	ldr	r0, [pc, #68]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004ef2:	f7fb fce3 	bl	80008bc <HAL_DMA_Init>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004efc:	f7ff fea2 	bl	8004c44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a0d      	ldr	r2, [pc, #52]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <HAL_UART_MspInit+0x160>)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2100      	movs	r1, #0
 8004f10:	2026      	movs	r0, #38	; 0x26
 8004f12:	f7fb fc59 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004f16:	2026      	movs	r0, #38	; 0x26
 8004f18:	f7fb fc72 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004f1c:	bf00      	nop
 8004f1e:	3728      	adds	r7, #40	; 0x28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40004400 	.word	0x40004400
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	40020000 	.word	0x40020000
 8004f30:	20000250 	.word	0x20000250
 8004f34:	40026088 	.word	0x40026088
 8004f38:	2000032c 	.word	0x2000032c
 8004f3c:	400260a0 	.word	0x400260a0

08004f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08c      	sub	sp, #48	; 0x30
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004f50:	2200      	movs	r2, #0
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	2019      	movs	r0, #25
 8004f56:	f7fb fc37 	bl	80007c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004f5a:	2019      	movs	r0, #25
 8004f5c:	f7fb fc50 	bl	8000800 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <HAL_InitTick+0xa0>)
 8004f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f68:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <HAL_InitTick+0xa0>)
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8004f70:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <HAL_InitTick+0xa0>)
 8004f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f7c:	f107 0210 	add.w	r2, r7, #16
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	4611      	mov	r1, r2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fc fe40 	bl	8001c0c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7fc fe2a 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8004f90:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <HAL_InitTick+0xa4>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	0c9b      	lsrs	r3, r3, #18
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004fa0:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <HAL_InitTick+0xa8>)
 8004fa2:	4a12      	ldr	r2, [pc, #72]	; (8004fec <HAL_InitTick+0xac>)
 8004fa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <HAL_InitTick+0xa8>)
 8004fa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004fae:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <HAL_InitTick+0xa8>)
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_InitTick+0xa8>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <HAL_InitTick+0xa8>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004fc0:	4809      	ldr	r0, [pc, #36]	; (8004fe8 <HAL_InitTick+0xa8>)
 8004fc2:	f7fd fb90 	bl	80026e6 <HAL_TIM_Base_Init>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004fcc:	4806      	ldr	r0, [pc, #24]	; (8004fe8 <HAL_InitTick+0xa8>)
 8004fce:	f7fd fbb5 	bl	800273c <HAL_TIM_Base_Start_IT>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	e000      	b.n	8004fd8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3730      	adds	r7, #48	; 0x30
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	431bde83 	.word	0x431bde83
 8004fe8:	200003ec 	.word	0x200003ec
 8004fec:	40010000 	.word	0x40010000

08004ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005002:	e7fe      	b.n	8005002 <HardFault_Handler+0x4>

08005004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005008:	e7fe      	b.n	8005008 <MemManage_Handler+0x4>

0800500a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800500a:	b480      	push	{r7}
 800500c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800500e:	e7fe      	b.n	800500e <BusFault_Handler+0x4>

08005010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005014:	e7fe      	b.n	8005014 <UsageFault_Handler+0x4>

08005016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005016:	b480      	push	{r7}
 8005018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800501a:	bf00      	nop
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005054:	4802      	ldr	r0, [pc, #8]	; (8005060 <DMA1_Stream5_IRQHandler+0x10>)
 8005056:	f7fb fd59 	bl	8000b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000250 	.word	0x20000250

08005064 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005068:	4802      	ldr	r0, [pc, #8]	; (8005074 <DMA1_Stream6_IRQHandler+0x10>)
 800506a:	f7fb fd4f 	bl	8000b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800506e:	bf00      	nop
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	2000032c 	.word	0x2000032c

08005078 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800507c:	4802      	ldr	r0, [pc, #8]	; (8005088 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800507e:	f7fd fc35 	bl	80028ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	200003ec 	.word	0x200003ec

0800508c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005090:	4802      	ldr	r0, [pc, #8]	; (800509c <USART2_IRQHandler+0x10>)
 8005092:	f7fe fb61 	bl	8003758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	200003ac 	.word	0x200003ac

080050a0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80050a4:	4802      	ldr	r0, [pc, #8]	; (80050b0 <RTC_Alarm_IRQHandler+0x10>)
 80050a6:	f7fd fa01 	bl	80024ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80050aa:	bf00      	nop
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	2000038c 	.word	0x2000038c

080050b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <_sbrk+0x50>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <_sbrk+0x16>
		heap_end = &end;
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <_sbrk+0x50>)
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <_sbrk+0x54>)
 80050c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <_sbrk+0x50>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <_sbrk+0x50>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	466a      	mov	r2, sp
 80050da:	4293      	cmp	r3, r2
 80050dc:	d907      	bls.n	80050ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80050de:	f000 f859 	bl	8005194 <__errno>
 80050e2:	4602      	mov	r2, r0
 80050e4:	230c      	movs	r3, #12
 80050e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ec:	e006      	b.n	80050fc <_sbrk+0x48>
	}

	heap_end += incr;
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <_sbrk+0x50>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	4a03      	ldr	r2, [pc, #12]	; (8005104 <_sbrk+0x50>)
 80050f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80050fa:	68fb      	ldr	r3, [r7, #12]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000240 	.word	0x20000240
 8005108:	20000430 	.word	0x20000430

0800510c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005110:	4b08      	ldr	r3, [pc, #32]	; (8005134 <SystemInit+0x28>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	4a07      	ldr	r2, [pc, #28]	; (8005134 <SystemInit+0x28>)
 8005118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800511c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005120:	4b04      	ldr	r3, [pc, #16]	; (8005134 <SystemInit+0x28>)
 8005122:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005126:	609a      	str	r2, [r3, #8]
#endif
}
 8005128:	bf00      	nop
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005170 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800513c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800513e:	e003      	b.n	8005148 <LoopCopyDataInit>

08005140 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005142:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005144:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005146:	3104      	adds	r1, #4

08005148 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005148:	480b      	ldr	r0, [pc, #44]	; (8005178 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800514c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800514e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005150:	d3f6      	bcc.n	8005140 <CopyDataInit>
  ldr  r2, =_sbss
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005154:	e002      	b.n	800515c <LoopFillZerobss>

08005156 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005156:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005158:	f842 3b04 	str.w	r3, [r2], #4

0800515c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800515c:	4b09      	ldr	r3, [pc, #36]	; (8005184 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800515e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005160:	d3f9      	bcc.n	8005156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005162:	f7ff ffd3 	bl	800510c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005166:	f000 f81b 	bl	80051a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800516a:	f7ff f9a1 	bl	80044b0 <main>
  bx  lr    
 800516e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005170:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005174:	08005e4c 	.word	0x08005e4c
  ldr  r0, =_sdata
 8005178:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800517c:	20000224 	.word	0x20000224
  ldr  r2, =_sbss
 8005180:	20000224 	.word	0x20000224
  ldr  r3, = _ebss
 8005184:	20000430 	.word	0x20000430

08005188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005188:	e7fe      	b.n	8005188 <ADC_IRQHandler>

0800518a <atoi>:
 800518a:	220a      	movs	r2, #10
 800518c:	2100      	movs	r1, #0
 800518e:	f000 b941 	b.w	8005414 <strtol>
	...

08005194 <__errno>:
 8005194:	4b01      	ldr	r3, [pc, #4]	; (800519c <__errno+0x8>)
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000054 	.word	0x20000054

080051a0 <__libc_init_array>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	4e0d      	ldr	r6, [pc, #52]	; (80051d8 <__libc_init_array+0x38>)
 80051a4:	4c0d      	ldr	r4, [pc, #52]	; (80051dc <__libc_init_array+0x3c>)
 80051a6:	1ba4      	subs	r4, r4, r6
 80051a8:	10a4      	asrs	r4, r4, #2
 80051aa:	2500      	movs	r5, #0
 80051ac:	42a5      	cmp	r5, r4
 80051ae:	d109      	bne.n	80051c4 <__libc_init_array+0x24>
 80051b0:	4e0b      	ldr	r6, [pc, #44]	; (80051e0 <__libc_init_array+0x40>)
 80051b2:	4c0c      	ldr	r4, [pc, #48]	; (80051e4 <__libc_init_array+0x44>)
 80051b4:	f000 fd4a 	bl	8005c4c <_init>
 80051b8:	1ba4      	subs	r4, r4, r6
 80051ba:	10a4      	asrs	r4, r4, #2
 80051bc:	2500      	movs	r5, #0
 80051be:	42a5      	cmp	r5, r4
 80051c0:	d105      	bne.n	80051ce <__libc_init_array+0x2e>
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051c8:	4798      	blx	r3
 80051ca:	3501      	adds	r5, #1
 80051cc:	e7ee      	b.n	80051ac <__libc_init_array+0xc>
 80051ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051d2:	4798      	blx	r3
 80051d4:	3501      	adds	r5, #1
 80051d6:	e7f2      	b.n	80051be <__libc_init_array+0x1e>
 80051d8:	08005e44 	.word	0x08005e44
 80051dc:	08005e44 	.word	0x08005e44
 80051e0:	08005e44 	.word	0x08005e44
 80051e4:	08005e48 	.word	0x08005e48

080051e8 <memcpy>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	1e43      	subs	r3, r0, #1
 80051ec:	440a      	add	r2, r1
 80051ee:	4291      	cmp	r1, r2
 80051f0:	d100      	bne.n	80051f4 <memcpy+0xc>
 80051f2:	bd10      	pop	{r4, pc}
 80051f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051fc:	e7f7      	b.n	80051ee <memcpy+0x6>

080051fe <memset>:
 80051fe:	4402      	add	r2, r0
 8005200:	4603      	mov	r3, r0
 8005202:	4293      	cmp	r3, r2
 8005204:	d100      	bne.n	8005208 <memset+0xa>
 8005206:	4770      	bx	lr
 8005208:	f803 1b01 	strb.w	r1, [r3], #1
 800520c:	e7f9      	b.n	8005202 <memset+0x4>
	...

08005210 <siprintf>:
 8005210:	b40e      	push	{r1, r2, r3}
 8005212:	b500      	push	{lr}
 8005214:	b09c      	sub	sp, #112	; 0x70
 8005216:	ab1d      	add	r3, sp, #116	; 0x74
 8005218:	9002      	str	r0, [sp, #8]
 800521a:	9006      	str	r0, [sp, #24]
 800521c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005220:	4809      	ldr	r0, [pc, #36]	; (8005248 <siprintf+0x38>)
 8005222:	9107      	str	r1, [sp, #28]
 8005224:	9104      	str	r1, [sp, #16]
 8005226:	4909      	ldr	r1, [pc, #36]	; (800524c <siprintf+0x3c>)
 8005228:	f853 2b04 	ldr.w	r2, [r3], #4
 800522c:	9105      	str	r1, [sp, #20]
 800522e:	6800      	ldr	r0, [r0, #0]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	a902      	add	r1, sp, #8
 8005234:	f000 fa24 	bl	8005680 <_svfiprintf_r>
 8005238:	9b02      	ldr	r3, [sp, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	b01c      	add	sp, #112	; 0x70
 8005240:	f85d eb04 	ldr.w	lr, [sp], #4
 8005244:	b003      	add	sp, #12
 8005246:	4770      	bx	lr
 8005248:	20000054 	.word	0x20000054
 800524c:	ffff0208 	.word	0xffff0208

08005250 <strncmp>:
 8005250:	b510      	push	{r4, lr}
 8005252:	b16a      	cbz	r2, 8005270 <strncmp+0x20>
 8005254:	3901      	subs	r1, #1
 8005256:	1884      	adds	r4, r0, r2
 8005258:	f810 3b01 	ldrb.w	r3, [r0], #1
 800525c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <strncmp+0x1c>
 8005264:	42a0      	cmp	r0, r4
 8005266:	d001      	beq.n	800526c <strncmp+0x1c>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f5      	bne.n	8005258 <strncmp+0x8>
 800526c:	1a98      	subs	r0, r3, r2
 800526e:	bd10      	pop	{r4, pc}
 8005270:	4610      	mov	r0, r2
 8005272:	e7fc      	b.n	800526e <strncmp+0x1e>

08005274 <strtok>:
 8005274:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <strtok+0x50>)
 8005276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800527a:	681d      	ldr	r5, [r3, #0]
 800527c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800527e:	4606      	mov	r6, r0
 8005280:	460f      	mov	r7, r1
 8005282:	b9b4      	cbnz	r4, 80052b2 <strtok+0x3e>
 8005284:	2050      	movs	r0, #80	; 0x50
 8005286:	f000 f8df 	bl	8005448 <malloc>
 800528a:	65a8      	str	r0, [r5, #88]	; 0x58
 800528c:	e9c0 4400 	strd	r4, r4, [r0]
 8005290:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005294:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005298:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800529c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80052a0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80052a4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80052a8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80052ac:	6184      	str	r4, [r0, #24]
 80052ae:	7704      	strb	r4, [r0, #28]
 80052b0:	6244      	str	r4, [r0, #36]	; 0x24
 80052b2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80052b4:	4639      	mov	r1, r7
 80052b6:	4630      	mov	r0, r6
 80052b8:	2301      	movs	r3, #1
 80052ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052be:	f000 b803 	b.w	80052c8 <__strtok_r>
 80052c2:	bf00      	nop
 80052c4:	20000054 	.word	0x20000054

080052c8 <__strtok_r>:
 80052c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ca:	b918      	cbnz	r0, 80052d4 <__strtok_r+0xc>
 80052cc:	6810      	ldr	r0, [r2, #0]
 80052ce:	b908      	cbnz	r0, 80052d4 <__strtok_r+0xc>
 80052d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d2:	4620      	mov	r0, r4
 80052d4:	4604      	mov	r4, r0
 80052d6:	460f      	mov	r7, r1
 80052d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80052dc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80052e0:	b91e      	cbnz	r6, 80052ea <__strtok_r+0x22>
 80052e2:	b96d      	cbnz	r5, 8005300 <__strtok_r+0x38>
 80052e4:	6015      	str	r5, [r2, #0]
 80052e6:	4628      	mov	r0, r5
 80052e8:	e7f2      	b.n	80052d0 <__strtok_r+0x8>
 80052ea:	42b5      	cmp	r5, r6
 80052ec:	d1f6      	bne.n	80052dc <__strtok_r+0x14>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ef      	bne.n	80052d2 <__strtok_r+0xa>
 80052f2:	6014      	str	r4, [r2, #0]
 80052f4:	7003      	strb	r3, [r0, #0]
 80052f6:	e7eb      	b.n	80052d0 <__strtok_r+0x8>
 80052f8:	462b      	mov	r3, r5
 80052fa:	e00d      	b.n	8005318 <__strtok_r+0x50>
 80052fc:	b926      	cbnz	r6, 8005308 <__strtok_r+0x40>
 80052fe:	461c      	mov	r4, r3
 8005300:	4623      	mov	r3, r4
 8005302:	460f      	mov	r7, r1
 8005304:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005308:	f817 6b01 	ldrb.w	r6, [r7], #1
 800530c:	42b5      	cmp	r5, r6
 800530e:	d1f5      	bne.n	80052fc <__strtok_r+0x34>
 8005310:	2d00      	cmp	r5, #0
 8005312:	d0f1      	beq.n	80052f8 <__strtok_r+0x30>
 8005314:	2100      	movs	r1, #0
 8005316:	7021      	strb	r1, [r4, #0]
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	e7d9      	b.n	80052d0 <__strtok_r+0x8>

0800531c <_strtol_l.isra.0>:
 800531c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	4680      	mov	r8, r0
 8005322:	4689      	mov	r9, r1
 8005324:	4692      	mov	sl, r2
 8005326:	461e      	mov	r6, r3
 8005328:	460f      	mov	r7, r1
 800532a:	463d      	mov	r5, r7
 800532c:	9808      	ldr	r0, [sp, #32]
 800532e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005332:	f000 f885 	bl	8005440 <__locale_ctype_ptr_l>
 8005336:	4420      	add	r0, r4
 8005338:	7843      	ldrb	r3, [r0, #1]
 800533a:	f013 0308 	ands.w	r3, r3, #8
 800533e:	d132      	bne.n	80053a6 <_strtol_l.isra.0+0x8a>
 8005340:	2c2d      	cmp	r4, #45	; 0x2d
 8005342:	d132      	bne.n	80053aa <_strtol_l.isra.0+0x8e>
 8005344:	787c      	ldrb	r4, [r7, #1]
 8005346:	1cbd      	adds	r5, r7, #2
 8005348:	2201      	movs	r2, #1
 800534a:	2e00      	cmp	r6, #0
 800534c:	d05d      	beq.n	800540a <_strtol_l.isra.0+0xee>
 800534e:	2e10      	cmp	r6, #16
 8005350:	d109      	bne.n	8005366 <_strtol_l.isra.0+0x4a>
 8005352:	2c30      	cmp	r4, #48	; 0x30
 8005354:	d107      	bne.n	8005366 <_strtol_l.isra.0+0x4a>
 8005356:	782b      	ldrb	r3, [r5, #0]
 8005358:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800535c:	2b58      	cmp	r3, #88	; 0x58
 800535e:	d14f      	bne.n	8005400 <_strtol_l.isra.0+0xe4>
 8005360:	786c      	ldrb	r4, [r5, #1]
 8005362:	2610      	movs	r6, #16
 8005364:	3502      	adds	r5, #2
 8005366:	2a00      	cmp	r2, #0
 8005368:	bf14      	ite	ne
 800536a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800536e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005372:	2700      	movs	r7, #0
 8005374:	fbb1 fcf6 	udiv	ip, r1, r6
 8005378:	4638      	mov	r0, r7
 800537a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800537e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005382:	2b09      	cmp	r3, #9
 8005384:	d817      	bhi.n	80053b6 <_strtol_l.isra.0+0x9a>
 8005386:	461c      	mov	r4, r3
 8005388:	42a6      	cmp	r6, r4
 800538a:	dd23      	ble.n	80053d4 <_strtol_l.isra.0+0xb8>
 800538c:	1c7b      	adds	r3, r7, #1
 800538e:	d007      	beq.n	80053a0 <_strtol_l.isra.0+0x84>
 8005390:	4584      	cmp	ip, r0
 8005392:	d31c      	bcc.n	80053ce <_strtol_l.isra.0+0xb2>
 8005394:	d101      	bne.n	800539a <_strtol_l.isra.0+0x7e>
 8005396:	45a6      	cmp	lr, r4
 8005398:	db19      	blt.n	80053ce <_strtol_l.isra.0+0xb2>
 800539a:	fb00 4006 	mla	r0, r0, r6, r4
 800539e:	2701      	movs	r7, #1
 80053a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053a4:	e7eb      	b.n	800537e <_strtol_l.isra.0+0x62>
 80053a6:	462f      	mov	r7, r5
 80053a8:	e7bf      	b.n	800532a <_strtol_l.isra.0+0xe>
 80053aa:	2c2b      	cmp	r4, #43	; 0x2b
 80053ac:	bf04      	itt	eq
 80053ae:	1cbd      	addeq	r5, r7, #2
 80053b0:	787c      	ldrbeq	r4, [r7, #1]
 80053b2:	461a      	mov	r2, r3
 80053b4:	e7c9      	b.n	800534a <_strtol_l.isra.0+0x2e>
 80053b6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80053ba:	2b19      	cmp	r3, #25
 80053bc:	d801      	bhi.n	80053c2 <_strtol_l.isra.0+0xa6>
 80053be:	3c37      	subs	r4, #55	; 0x37
 80053c0:	e7e2      	b.n	8005388 <_strtol_l.isra.0+0x6c>
 80053c2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80053c6:	2b19      	cmp	r3, #25
 80053c8:	d804      	bhi.n	80053d4 <_strtol_l.isra.0+0xb8>
 80053ca:	3c57      	subs	r4, #87	; 0x57
 80053cc:	e7dc      	b.n	8005388 <_strtol_l.isra.0+0x6c>
 80053ce:	f04f 37ff 	mov.w	r7, #4294967295
 80053d2:	e7e5      	b.n	80053a0 <_strtol_l.isra.0+0x84>
 80053d4:	1c7b      	adds	r3, r7, #1
 80053d6:	d108      	bne.n	80053ea <_strtol_l.isra.0+0xce>
 80053d8:	2322      	movs	r3, #34	; 0x22
 80053da:	f8c8 3000 	str.w	r3, [r8]
 80053de:	4608      	mov	r0, r1
 80053e0:	f1ba 0f00 	cmp.w	sl, #0
 80053e4:	d107      	bne.n	80053f6 <_strtol_l.isra.0+0xda>
 80053e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ea:	b102      	cbz	r2, 80053ee <_strtol_l.isra.0+0xd2>
 80053ec:	4240      	negs	r0, r0
 80053ee:	f1ba 0f00 	cmp.w	sl, #0
 80053f2:	d0f8      	beq.n	80053e6 <_strtol_l.isra.0+0xca>
 80053f4:	b10f      	cbz	r7, 80053fa <_strtol_l.isra.0+0xde>
 80053f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80053fa:	f8ca 9000 	str.w	r9, [sl]
 80053fe:	e7f2      	b.n	80053e6 <_strtol_l.isra.0+0xca>
 8005400:	2430      	movs	r4, #48	; 0x30
 8005402:	2e00      	cmp	r6, #0
 8005404:	d1af      	bne.n	8005366 <_strtol_l.isra.0+0x4a>
 8005406:	2608      	movs	r6, #8
 8005408:	e7ad      	b.n	8005366 <_strtol_l.isra.0+0x4a>
 800540a:	2c30      	cmp	r4, #48	; 0x30
 800540c:	d0a3      	beq.n	8005356 <_strtol_l.isra.0+0x3a>
 800540e:	260a      	movs	r6, #10
 8005410:	e7a9      	b.n	8005366 <_strtol_l.isra.0+0x4a>
	...

08005414 <strtol>:
 8005414:	4b08      	ldr	r3, [pc, #32]	; (8005438 <strtol+0x24>)
 8005416:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005418:	681c      	ldr	r4, [r3, #0]
 800541a:	4d08      	ldr	r5, [pc, #32]	; (800543c <strtol+0x28>)
 800541c:	6a23      	ldr	r3, [r4, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf08      	it	eq
 8005422:	462b      	moveq	r3, r5
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	4613      	mov	r3, r2
 8005428:	460a      	mov	r2, r1
 800542a:	4601      	mov	r1, r0
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff ff75 	bl	800531c <_strtol_l.isra.0>
 8005432:	b003      	add	sp, #12
 8005434:	bd30      	pop	{r4, r5, pc}
 8005436:	bf00      	nop
 8005438:	20000054 	.word	0x20000054
 800543c:	200000b8 	.word	0x200000b8

08005440 <__locale_ctype_ptr_l>:
 8005440:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005444:	4770      	bx	lr
	...

08005448 <malloc>:
 8005448:	4b02      	ldr	r3, [pc, #8]	; (8005454 <malloc+0xc>)
 800544a:	4601      	mov	r1, r0
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	f000 b863 	b.w	8005518 <_malloc_r>
 8005452:	bf00      	nop
 8005454:	20000054 	.word	0x20000054

08005458 <__ascii_mbtowc>:
 8005458:	b082      	sub	sp, #8
 800545a:	b901      	cbnz	r1, 800545e <__ascii_mbtowc+0x6>
 800545c:	a901      	add	r1, sp, #4
 800545e:	b142      	cbz	r2, 8005472 <__ascii_mbtowc+0x1a>
 8005460:	b14b      	cbz	r3, 8005476 <__ascii_mbtowc+0x1e>
 8005462:	7813      	ldrb	r3, [r2, #0]
 8005464:	600b      	str	r3, [r1, #0]
 8005466:	7812      	ldrb	r2, [r2, #0]
 8005468:	1c10      	adds	r0, r2, #0
 800546a:	bf18      	it	ne
 800546c:	2001      	movne	r0, #1
 800546e:	b002      	add	sp, #8
 8005470:	4770      	bx	lr
 8005472:	4610      	mov	r0, r2
 8005474:	e7fb      	b.n	800546e <__ascii_mbtowc+0x16>
 8005476:	f06f 0001 	mvn.w	r0, #1
 800547a:	e7f8      	b.n	800546e <__ascii_mbtowc+0x16>

0800547c <_free_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4605      	mov	r5, r0
 8005480:	2900      	cmp	r1, #0
 8005482:	d045      	beq.n	8005510 <_free_r+0x94>
 8005484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005488:	1f0c      	subs	r4, r1, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	bfb8      	it	lt
 800548e:	18e4      	addlt	r4, r4, r3
 8005490:	f000 fbac 	bl	8005bec <__malloc_lock>
 8005494:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <_free_r+0x98>)
 8005496:	6813      	ldr	r3, [r2, #0]
 8005498:	4610      	mov	r0, r2
 800549a:	b933      	cbnz	r3, 80054aa <_free_r+0x2e>
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	6014      	str	r4, [r2, #0]
 80054a0:	4628      	mov	r0, r5
 80054a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054a6:	f000 bba2 	b.w	8005bee <__malloc_unlock>
 80054aa:	42a3      	cmp	r3, r4
 80054ac:	d90c      	bls.n	80054c8 <_free_r+0x4c>
 80054ae:	6821      	ldr	r1, [r4, #0]
 80054b0:	1862      	adds	r2, r4, r1
 80054b2:	4293      	cmp	r3, r2
 80054b4:	bf04      	itt	eq
 80054b6:	681a      	ldreq	r2, [r3, #0]
 80054b8:	685b      	ldreq	r3, [r3, #4]
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	bf04      	itt	eq
 80054be:	1852      	addeq	r2, r2, r1
 80054c0:	6022      	streq	r2, [r4, #0]
 80054c2:	6004      	str	r4, [r0, #0]
 80054c4:	e7ec      	b.n	80054a0 <_free_r+0x24>
 80054c6:	4613      	mov	r3, r2
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	b10a      	cbz	r2, 80054d0 <_free_r+0x54>
 80054cc:	42a2      	cmp	r2, r4
 80054ce:	d9fa      	bls.n	80054c6 <_free_r+0x4a>
 80054d0:	6819      	ldr	r1, [r3, #0]
 80054d2:	1858      	adds	r0, r3, r1
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d10b      	bne.n	80054f0 <_free_r+0x74>
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	4401      	add	r1, r0
 80054dc:	1858      	adds	r0, r3, r1
 80054de:	4282      	cmp	r2, r0
 80054e0:	6019      	str	r1, [r3, #0]
 80054e2:	d1dd      	bne.n	80054a0 <_free_r+0x24>
 80054e4:	6810      	ldr	r0, [r2, #0]
 80054e6:	6852      	ldr	r2, [r2, #4]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	4401      	add	r1, r0
 80054ec:	6019      	str	r1, [r3, #0]
 80054ee:	e7d7      	b.n	80054a0 <_free_r+0x24>
 80054f0:	d902      	bls.n	80054f8 <_free_r+0x7c>
 80054f2:	230c      	movs	r3, #12
 80054f4:	602b      	str	r3, [r5, #0]
 80054f6:	e7d3      	b.n	80054a0 <_free_r+0x24>
 80054f8:	6820      	ldr	r0, [r4, #0]
 80054fa:	1821      	adds	r1, r4, r0
 80054fc:	428a      	cmp	r2, r1
 80054fe:	bf04      	itt	eq
 8005500:	6811      	ldreq	r1, [r2, #0]
 8005502:	6852      	ldreq	r2, [r2, #4]
 8005504:	6062      	str	r2, [r4, #4]
 8005506:	bf04      	itt	eq
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	605c      	str	r4, [r3, #4]
 800550e:	e7c7      	b.n	80054a0 <_free_r+0x24>
 8005510:	bd38      	pop	{r3, r4, r5, pc}
 8005512:	bf00      	nop
 8005514:	20000244 	.word	0x20000244

08005518 <_malloc_r>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	1ccd      	adds	r5, r1, #3
 800551c:	f025 0503 	bic.w	r5, r5, #3
 8005520:	3508      	adds	r5, #8
 8005522:	2d0c      	cmp	r5, #12
 8005524:	bf38      	it	cc
 8005526:	250c      	movcc	r5, #12
 8005528:	2d00      	cmp	r5, #0
 800552a:	4606      	mov	r6, r0
 800552c:	db01      	blt.n	8005532 <_malloc_r+0x1a>
 800552e:	42a9      	cmp	r1, r5
 8005530:	d903      	bls.n	800553a <_malloc_r+0x22>
 8005532:	230c      	movs	r3, #12
 8005534:	6033      	str	r3, [r6, #0]
 8005536:	2000      	movs	r0, #0
 8005538:	bd70      	pop	{r4, r5, r6, pc}
 800553a:	f000 fb57 	bl	8005bec <__malloc_lock>
 800553e:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <_malloc_r+0xac>)
 8005540:	6814      	ldr	r4, [r2, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	b991      	cbnz	r1, 800556c <_malloc_r+0x54>
 8005546:	4c20      	ldr	r4, [pc, #128]	; (80055c8 <_malloc_r+0xb0>)
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	b91b      	cbnz	r3, 8005554 <_malloc_r+0x3c>
 800554c:	4630      	mov	r0, r6
 800554e:	f000 fb17 	bl	8005b80 <_sbrk_r>
 8005552:	6020      	str	r0, [r4, #0]
 8005554:	4629      	mov	r1, r5
 8005556:	4630      	mov	r0, r6
 8005558:	f000 fb12 	bl	8005b80 <_sbrk_r>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d124      	bne.n	80055aa <_malloc_r+0x92>
 8005560:	230c      	movs	r3, #12
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	4630      	mov	r0, r6
 8005566:	f000 fb42 	bl	8005bee <__malloc_unlock>
 800556a:	e7e4      	b.n	8005536 <_malloc_r+0x1e>
 800556c:	680b      	ldr	r3, [r1, #0]
 800556e:	1b5b      	subs	r3, r3, r5
 8005570:	d418      	bmi.n	80055a4 <_malloc_r+0x8c>
 8005572:	2b0b      	cmp	r3, #11
 8005574:	d90f      	bls.n	8005596 <_malloc_r+0x7e>
 8005576:	600b      	str	r3, [r1, #0]
 8005578:	50cd      	str	r5, [r1, r3]
 800557a:	18cc      	adds	r4, r1, r3
 800557c:	4630      	mov	r0, r6
 800557e:	f000 fb36 	bl	8005bee <__malloc_unlock>
 8005582:	f104 000b 	add.w	r0, r4, #11
 8005586:	1d23      	adds	r3, r4, #4
 8005588:	f020 0007 	bic.w	r0, r0, #7
 800558c:	1ac3      	subs	r3, r0, r3
 800558e:	d0d3      	beq.n	8005538 <_malloc_r+0x20>
 8005590:	425a      	negs	r2, r3
 8005592:	50e2      	str	r2, [r4, r3]
 8005594:	e7d0      	b.n	8005538 <_malloc_r+0x20>
 8005596:	428c      	cmp	r4, r1
 8005598:	684b      	ldr	r3, [r1, #4]
 800559a:	bf16      	itet	ne
 800559c:	6063      	strne	r3, [r4, #4]
 800559e:	6013      	streq	r3, [r2, #0]
 80055a0:	460c      	movne	r4, r1
 80055a2:	e7eb      	b.n	800557c <_malloc_r+0x64>
 80055a4:	460c      	mov	r4, r1
 80055a6:	6849      	ldr	r1, [r1, #4]
 80055a8:	e7cc      	b.n	8005544 <_malloc_r+0x2c>
 80055aa:	1cc4      	adds	r4, r0, #3
 80055ac:	f024 0403 	bic.w	r4, r4, #3
 80055b0:	42a0      	cmp	r0, r4
 80055b2:	d005      	beq.n	80055c0 <_malloc_r+0xa8>
 80055b4:	1a21      	subs	r1, r4, r0
 80055b6:	4630      	mov	r0, r6
 80055b8:	f000 fae2 	bl	8005b80 <_sbrk_r>
 80055bc:	3001      	adds	r0, #1
 80055be:	d0cf      	beq.n	8005560 <_malloc_r+0x48>
 80055c0:	6025      	str	r5, [r4, #0]
 80055c2:	e7db      	b.n	800557c <_malloc_r+0x64>
 80055c4:	20000244 	.word	0x20000244
 80055c8:	20000248 	.word	0x20000248

080055cc <__ssputs_r>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	688e      	ldr	r6, [r1, #8]
 80055d2:	429e      	cmp	r6, r3
 80055d4:	4682      	mov	sl, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4690      	mov	r8, r2
 80055da:	4699      	mov	r9, r3
 80055dc:	d837      	bhi.n	800564e <__ssputs_r+0x82>
 80055de:	898a      	ldrh	r2, [r1, #12]
 80055e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055e4:	d031      	beq.n	800564a <__ssputs_r+0x7e>
 80055e6:	6825      	ldr	r5, [r4, #0]
 80055e8:	6909      	ldr	r1, [r1, #16]
 80055ea:	1a6f      	subs	r7, r5, r1
 80055ec:	6965      	ldr	r5, [r4, #20]
 80055ee:	2302      	movs	r3, #2
 80055f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80055f8:	f109 0301 	add.w	r3, r9, #1
 80055fc:	443b      	add	r3, r7
 80055fe:	429d      	cmp	r5, r3
 8005600:	bf38      	it	cc
 8005602:	461d      	movcc	r5, r3
 8005604:	0553      	lsls	r3, r2, #21
 8005606:	d530      	bpl.n	800566a <__ssputs_r+0x9e>
 8005608:	4629      	mov	r1, r5
 800560a:	f7ff ff85 	bl	8005518 <_malloc_r>
 800560e:	4606      	mov	r6, r0
 8005610:	b950      	cbnz	r0, 8005628 <__ssputs_r+0x5c>
 8005612:	230c      	movs	r3, #12
 8005614:	f8ca 3000 	str.w	r3, [sl]
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561e:	81a3      	strh	r3, [r4, #12]
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005628:	463a      	mov	r2, r7
 800562a:	6921      	ldr	r1, [r4, #16]
 800562c:	f7ff fddc 	bl	80051e8 <memcpy>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563a:	81a3      	strh	r3, [r4, #12]
 800563c:	6126      	str	r6, [r4, #16]
 800563e:	6165      	str	r5, [r4, #20]
 8005640:	443e      	add	r6, r7
 8005642:	1bed      	subs	r5, r5, r7
 8005644:	6026      	str	r6, [r4, #0]
 8005646:	60a5      	str	r5, [r4, #8]
 8005648:	464e      	mov	r6, r9
 800564a:	454e      	cmp	r6, r9
 800564c:	d900      	bls.n	8005650 <__ssputs_r+0x84>
 800564e:	464e      	mov	r6, r9
 8005650:	4632      	mov	r2, r6
 8005652:	4641      	mov	r1, r8
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	f000 fab0 	bl	8005bba <memmove>
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	1b9b      	subs	r3, r3, r6
 800565e:	60a3      	str	r3, [r4, #8]
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	441e      	add	r6, r3
 8005664:	6026      	str	r6, [r4, #0]
 8005666:	2000      	movs	r0, #0
 8005668:	e7dc      	b.n	8005624 <__ssputs_r+0x58>
 800566a:	462a      	mov	r2, r5
 800566c:	f000 fac0 	bl	8005bf0 <_realloc_r>
 8005670:	4606      	mov	r6, r0
 8005672:	2800      	cmp	r0, #0
 8005674:	d1e2      	bne.n	800563c <__ssputs_r+0x70>
 8005676:	6921      	ldr	r1, [r4, #16]
 8005678:	4650      	mov	r0, sl
 800567a:	f7ff feff 	bl	800547c <_free_r>
 800567e:	e7c8      	b.n	8005612 <__ssputs_r+0x46>

08005680 <_svfiprintf_r>:
 8005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	461d      	mov	r5, r3
 8005686:	898b      	ldrh	r3, [r1, #12]
 8005688:	061f      	lsls	r7, r3, #24
 800568a:	b09d      	sub	sp, #116	; 0x74
 800568c:	4680      	mov	r8, r0
 800568e:	460c      	mov	r4, r1
 8005690:	4616      	mov	r6, r2
 8005692:	d50f      	bpl.n	80056b4 <_svfiprintf_r+0x34>
 8005694:	690b      	ldr	r3, [r1, #16]
 8005696:	b96b      	cbnz	r3, 80056b4 <_svfiprintf_r+0x34>
 8005698:	2140      	movs	r1, #64	; 0x40
 800569a:	f7ff ff3d 	bl	8005518 <_malloc_r>
 800569e:	6020      	str	r0, [r4, #0]
 80056a0:	6120      	str	r0, [r4, #16]
 80056a2:	b928      	cbnz	r0, 80056b0 <_svfiprintf_r+0x30>
 80056a4:	230c      	movs	r3, #12
 80056a6:	f8c8 3000 	str.w	r3, [r8]
 80056aa:	f04f 30ff 	mov.w	r0, #4294967295
 80056ae:	e0c8      	b.n	8005842 <_svfiprintf_r+0x1c2>
 80056b0:	2340      	movs	r3, #64	; 0x40
 80056b2:	6163      	str	r3, [r4, #20]
 80056b4:	2300      	movs	r3, #0
 80056b6:	9309      	str	r3, [sp, #36]	; 0x24
 80056b8:	2320      	movs	r3, #32
 80056ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056be:	2330      	movs	r3, #48	; 0x30
 80056c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c4:	9503      	str	r5, [sp, #12]
 80056c6:	f04f 0b01 	mov.w	fp, #1
 80056ca:	4637      	mov	r7, r6
 80056cc:	463d      	mov	r5, r7
 80056ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056d2:	b10b      	cbz	r3, 80056d8 <_svfiprintf_r+0x58>
 80056d4:	2b25      	cmp	r3, #37	; 0x25
 80056d6:	d13e      	bne.n	8005756 <_svfiprintf_r+0xd6>
 80056d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80056dc:	d00b      	beq.n	80056f6 <_svfiprintf_r+0x76>
 80056de:	4653      	mov	r3, sl
 80056e0:	4632      	mov	r2, r6
 80056e2:	4621      	mov	r1, r4
 80056e4:	4640      	mov	r0, r8
 80056e6:	f7ff ff71 	bl	80055cc <__ssputs_r>
 80056ea:	3001      	adds	r0, #1
 80056ec:	f000 80a4 	beq.w	8005838 <_svfiprintf_r+0x1b8>
 80056f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f2:	4453      	add	r3, sl
 80056f4:	9309      	str	r3, [sp, #36]	; 0x24
 80056f6:	783b      	ldrb	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 809d 	beq.w	8005838 <_svfiprintf_r+0x1b8>
 80056fe:	2300      	movs	r3, #0
 8005700:	f04f 32ff 	mov.w	r2, #4294967295
 8005704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005708:	9304      	str	r3, [sp, #16]
 800570a:	9307      	str	r3, [sp, #28]
 800570c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005710:	931a      	str	r3, [sp, #104]	; 0x68
 8005712:	462f      	mov	r7, r5
 8005714:	2205      	movs	r2, #5
 8005716:	f817 1b01 	ldrb.w	r1, [r7], #1
 800571a:	4850      	ldr	r0, [pc, #320]	; (800585c <_svfiprintf_r+0x1dc>)
 800571c:	f7fa fd68 	bl	80001f0 <memchr>
 8005720:	9b04      	ldr	r3, [sp, #16]
 8005722:	b9d0      	cbnz	r0, 800575a <_svfiprintf_r+0xda>
 8005724:	06d9      	lsls	r1, r3, #27
 8005726:	bf44      	itt	mi
 8005728:	2220      	movmi	r2, #32
 800572a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800572e:	071a      	lsls	r2, r3, #28
 8005730:	bf44      	itt	mi
 8005732:	222b      	movmi	r2, #43	; 0x2b
 8005734:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005738:	782a      	ldrb	r2, [r5, #0]
 800573a:	2a2a      	cmp	r2, #42	; 0x2a
 800573c:	d015      	beq.n	800576a <_svfiprintf_r+0xea>
 800573e:	9a07      	ldr	r2, [sp, #28]
 8005740:	462f      	mov	r7, r5
 8005742:	2000      	movs	r0, #0
 8005744:	250a      	movs	r5, #10
 8005746:	4639      	mov	r1, r7
 8005748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800574c:	3b30      	subs	r3, #48	; 0x30
 800574e:	2b09      	cmp	r3, #9
 8005750:	d94d      	bls.n	80057ee <_svfiprintf_r+0x16e>
 8005752:	b1b8      	cbz	r0, 8005784 <_svfiprintf_r+0x104>
 8005754:	e00f      	b.n	8005776 <_svfiprintf_r+0xf6>
 8005756:	462f      	mov	r7, r5
 8005758:	e7b8      	b.n	80056cc <_svfiprintf_r+0x4c>
 800575a:	4a40      	ldr	r2, [pc, #256]	; (800585c <_svfiprintf_r+0x1dc>)
 800575c:	1a80      	subs	r0, r0, r2
 800575e:	fa0b f000 	lsl.w	r0, fp, r0
 8005762:	4318      	orrs	r0, r3
 8005764:	9004      	str	r0, [sp, #16]
 8005766:	463d      	mov	r5, r7
 8005768:	e7d3      	b.n	8005712 <_svfiprintf_r+0x92>
 800576a:	9a03      	ldr	r2, [sp, #12]
 800576c:	1d11      	adds	r1, r2, #4
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	9103      	str	r1, [sp, #12]
 8005772:	2a00      	cmp	r2, #0
 8005774:	db01      	blt.n	800577a <_svfiprintf_r+0xfa>
 8005776:	9207      	str	r2, [sp, #28]
 8005778:	e004      	b.n	8005784 <_svfiprintf_r+0x104>
 800577a:	4252      	negs	r2, r2
 800577c:	f043 0302 	orr.w	r3, r3, #2
 8005780:	9207      	str	r2, [sp, #28]
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	783b      	ldrb	r3, [r7, #0]
 8005786:	2b2e      	cmp	r3, #46	; 0x2e
 8005788:	d10c      	bne.n	80057a4 <_svfiprintf_r+0x124>
 800578a:	787b      	ldrb	r3, [r7, #1]
 800578c:	2b2a      	cmp	r3, #42	; 0x2a
 800578e:	d133      	bne.n	80057f8 <_svfiprintf_r+0x178>
 8005790:	9b03      	ldr	r3, [sp, #12]
 8005792:	1d1a      	adds	r2, r3, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	9203      	str	r2, [sp, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	bfb8      	it	lt
 800579c:	f04f 33ff 	movlt.w	r3, #4294967295
 80057a0:	3702      	adds	r7, #2
 80057a2:	9305      	str	r3, [sp, #20]
 80057a4:	4d2e      	ldr	r5, [pc, #184]	; (8005860 <_svfiprintf_r+0x1e0>)
 80057a6:	7839      	ldrb	r1, [r7, #0]
 80057a8:	2203      	movs	r2, #3
 80057aa:	4628      	mov	r0, r5
 80057ac:	f7fa fd20 	bl	80001f0 <memchr>
 80057b0:	b138      	cbz	r0, 80057c2 <_svfiprintf_r+0x142>
 80057b2:	2340      	movs	r3, #64	; 0x40
 80057b4:	1b40      	subs	r0, r0, r5
 80057b6:	fa03 f000 	lsl.w	r0, r3, r0
 80057ba:	9b04      	ldr	r3, [sp, #16]
 80057bc:	4303      	orrs	r3, r0
 80057be:	3701      	adds	r7, #1
 80057c0:	9304      	str	r3, [sp, #16]
 80057c2:	7839      	ldrb	r1, [r7, #0]
 80057c4:	4827      	ldr	r0, [pc, #156]	; (8005864 <_svfiprintf_r+0x1e4>)
 80057c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ca:	2206      	movs	r2, #6
 80057cc:	1c7e      	adds	r6, r7, #1
 80057ce:	f7fa fd0f 	bl	80001f0 <memchr>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d038      	beq.n	8005848 <_svfiprintf_r+0x1c8>
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <_svfiprintf_r+0x1e8>)
 80057d8:	bb13      	cbnz	r3, 8005820 <_svfiprintf_r+0x1a0>
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	3307      	adds	r3, #7
 80057de:	f023 0307 	bic.w	r3, r3, #7
 80057e2:	3308      	adds	r3, #8
 80057e4:	9303      	str	r3, [sp, #12]
 80057e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e8:	444b      	add	r3, r9
 80057ea:	9309      	str	r3, [sp, #36]	; 0x24
 80057ec:	e76d      	b.n	80056ca <_svfiprintf_r+0x4a>
 80057ee:	fb05 3202 	mla	r2, r5, r2, r3
 80057f2:	2001      	movs	r0, #1
 80057f4:	460f      	mov	r7, r1
 80057f6:	e7a6      	b.n	8005746 <_svfiprintf_r+0xc6>
 80057f8:	2300      	movs	r3, #0
 80057fa:	3701      	adds	r7, #1
 80057fc:	9305      	str	r3, [sp, #20]
 80057fe:	4619      	mov	r1, r3
 8005800:	250a      	movs	r5, #10
 8005802:	4638      	mov	r0, r7
 8005804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005808:	3a30      	subs	r2, #48	; 0x30
 800580a:	2a09      	cmp	r2, #9
 800580c:	d903      	bls.n	8005816 <_svfiprintf_r+0x196>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0c8      	beq.n	80057a4 <_svfiprintf_r+0x124>
 8005812:	9105      	str	r1, [sp, #20]
 8005814:	e7c6      	b.n	80057a4 <_svfiprintf_r+0x124>
 8005816:	fb05 2101 	mla	r1, r5, r1, r2
 800581a:	2301      	movs	r3, #1
 800581c:	4607      	mov	r7, r0
 800581e:	e7f0      	b.n	8005802 <_svfiprintf_r+0x182>
 8005820:	ab03      	add	r3, sp, #12
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	4622      	mov	r2, r4
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <_svfiprintf_r+0x1ec>)
 8005828:	a904      	add	r1, sp, #16
 800582a:	4640      	mov	r0, r8
 800582c:	f3af 8000 	nop.w
 8005830:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005834:	4681      	mov	r9, r0
 8005836:	d1d6      	bne.n	80057e6 <_svfiprintf_r+0x166>
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	065b      	lsls	r3, r3, #25
 800583c:	f53f af35 	bmi.w	80056aa <_svfiprintf_r+0x2a>
 8005840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005842:	b01d      	add	sp, #116	; 0x74
 8005844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005848:	ab03      	add	r3, sp, #12
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	4622      	mov	r2, r4
 800584e:	4b07      	ldr	r3, [pc, #28]	; (800586c <_svfiprintf_r+0x1ec>)
 8005850:	a904      	add	r1, sp, #16
 8005852:	4640      	mov	r0, r8
 8005854:	f000 f882 	bl	800595c <_printf_i>
 8005858:	e7ea      	b.n	8005830 <_svfiprintf_r+0x1b0>
 800585a:	bf00      	nop
 800585c:	08005d06 	.word	0x08005d06
 8005860:	08005d0c 	.word	0x08005d0c
 8005864:	08005d10 	.word	0x08005d10
 8005868:	00000000 	.word	0x00000000
 800586c:	080055cd 	.word	0x080055cd

08005870 <_printf_common>:
 8005870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	4691      	mov	r9, r2
 8005876:	461f      	mov	r7, r3
 8005878:	688a      	ldr	r2, [r1, #8]
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005880:	4293      	cmp	r3, r2
 8005882:	bfb8      	it	lt
 8005884:	4613      	movlt	r3, r2
 8005886:	f8c9 3000 	str.w	r3, [r9]
 800588a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800588e:	4606      	mov	r6, r0
 8005890:	460c      	mov	r4, r1
 8005892:	b112      	cbz	r2, 800589a <_printf_common+0x2a>
 8005894:	3301      	adds	r3, #1
 8005896:	f8c9 3000 	str.w	r3, [r9]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	0699      	lsls	r1, r3, #26
 800589e:	bf42      	ittt	mi
 80058a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80058a4:	3302      	addmi	r3, #2
 80058a6:	f8c9 3000 	strmi.w	r3, [r9]
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	f015 0506 	ands.w	r5, r5, #6
 80058b0:	d107      	bne.n	80058c2 <_printf_common+0x52>
 80058b2:	f104 0a19 	add.w	sl, r4, #25
 80058b6:	68e3      	ldr	r3, [r4, #12]
 80058b8:	f8d9 2000 	ldr.w	r2, [r9]
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	42ab      	cmp	r3, r5
 80058c0:	dc28      	bgt.n	8005914 <_printf_common+0xa4>
 80058c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	3300      	adds	r3, #0
 80058ca:	bf18      	it	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	0692      	lsls	r2, r2, #26
 80058d0:	d42d      	bmi.n	800592e <_printf_common+0xbe>
 80058d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d6:	4639      	mov	r1, r7
 80058d8:	4630      	mov	r0, r6
 80058da:	47c0      	blx	r8
 80058dc:	3001      	adds	r0, #1
 80058de:	d020      	beq.n	8005922 <_printf_common+0xb2>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	68e5      	ldr	r5, [r4, #12]
 80058e4:	f8d9 2000 	ldr.w	r2, [r9]
 80058e8:	f003 0306 	and.w	r3, r3, #6
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	bf08      	it	eq
 80058f0:	1aad      	subeq	r5, r5, r2
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	6922      	ldr	r2, [r4, #16]
 80058f6:	bf0c      	ite	eq
 80058f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058fc:	2500      	movne	r5, #0
 80058fe:	4293      	cmp	r3, r2
 8005900:	bfc4      	itt	gt
 8005902:	1a9b      	subgt	r3, r3, r2
 8005904:	18ed      	addgt	r5, r5, r3
 8005906:	f04f 0900 	mov.w	r9, #0
 800590a:	341a      	adds	r4, #26
 800590c:	454d      	cmp	r5, r9
 800590e:	d11a      	bne.n	8005946 <_printf_common+0xd6>
 8005910:	2000      	movs	r0, #0
 8005912:	e008      	b.n	8005926 <_printf_common+0xb6>
 8005914:	2301      	movs	r3, #1
 8005916:	4652      	mov	r2, sl
 8005918:	4639      	mov	r1, r7
 800591a:	4630      	mov	r0, r6
 800591c:	47c0      	blx	r8
 800591e:	3001      	adds	r0, #1
 8005920:	d103      	bne.n	800592a <_printf_common+0xba>
 8005922:	f04f 30ff 	mov.w	r0, #4294967295
 8005926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592a:	3501      	adds	r5, #1
 800592c:	e7c3      	b.n	80058b6 <_printf_common+0x46>
 800592e:	18e1      	adds	r1, r4, r3
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	2030      	movs	r0, #48	; 0x30
 8005934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005938:	4422      	add	r2, r4
 800593a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800593e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005942:	3302      	adds	r3, #2
 8005944:	e7c5      	b.n	80058d2 <_printf_common+0x62>
 8005946:	2301      	movs	r3, #1
 8005948:	4622      	mov	r2, r4
 800594a:	4639      	mov	r1, r7
 800594c:	4630      	mov	r0, r6
 800594e:	47c0      	blx	r8
 8005950:	3001      	adds	r0, #1
 8005952:	d0e6      	beq.n	8005922 <_printf_common+0xb2>
 8005954:	f109 0901 	add.w	r9, r9, #1
 8005958:	e7d8      	b.n	800590c <_printf_common+0x9c>
	...

0800595c <_printf_i>:
 800595c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005960:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005964:	460c      	mov	r4, r1
 8005966:	7e09      	ldrb	r1, [r1, #24]
 8005968:	b085      	sub	sp, #20
 800596a:	296e      	cmp	r1, #110	; 0x6e
 800596c:	4617      	mov	r7, r2
 800596e:	4606      	mov	r6, r0
 8005970:	4698      	mov	r8, r3
 8005972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005974:	f000 80b3 	beq.w	8005ade <_printf_i+0x182>
 8005978:	d822      	bhi.n	80059c0 <_printf_i+0x64>
 800597a:	2963      	cmp	r1, #99	; 0x63
 800597c:	d036      	beq.n	80059ec <_printf_i+0x90>
 800597e:	d80a      	bhi.n	8005996 <_printf_i+0x3a>
 8005980:	2900      	cmp	r1, #0
 8005982:	f000 80b9 	beq.w	8005af8 <_printf_i+0x19c>
 8005986:	2958      	cmp	r1, #88	; 0x58
 8005988:	f000 8083 	beq.w	8005a92 <_printf_i+0x136>
 800598c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005990:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005994:	e032      	b.n	80059fc <_printf_i+0xa0>
 8005996:	2964      	cmp	r1, #100	; 0x64
 8005998:	d001      	beq.n	800599e <_printf_i+0x42>
 800599a:	2969      	cmp	r1, #105	; 0x69
 800599c:	d1f6      	bne.n	800598c <_printf_i+0x30>
 800599e:	6820      	ldr	r0, [r4, #0]
 80059a0:	6813      	ldr	r3, [r2, #0]
 80059a2:	0605      	lsls	r5, r0, #24
 80059a4:	f103 0104 	add.w	r1, r3, #4
 80059a8:	d52a      	bpl.n	8005a00 <_printf_i+0xa4>
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6011      	str	r1, [r2, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da03      	bge.n	80059ba <_printf_i+0x5e>
 80059b2:	222d      	movs	r2, #45	; 0x2d
 80059b4:	425b      	negs	r3, r3
 80059b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80059ba:	486f      	ldr	r0, [pc, #444]	; (8005b78 <_printf_i+0x21c>)
 80059bc:	220a      	movs	r2, #10
 80059be:	e039      	b.n	8005a34 <_printf_i+0xd8>
 80059c0:	2973      	cmp	r1, #115	; 0x73
 80059c2:	f000 809d 	beq.w	8005b00 <_printf_i+0x1a4>
 80059c6:	d808      	bhi.n	80059da <_printf_i+0x7e>
 80059c8:	296f      	cmp	r1, #111	; 0x6f
 80059ca:	d020      	beq.n	8005a0e <_printf_i+0xb2>
 80059cc:	2970      	cmp	r1, #112	; 0x70
 80059ce:	d1dd      	bne.n	800598c <_printf_i+0x30>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	f043 0320 	orr.w	r3, r3, #32
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	e003      	b.n	80059e2 <_printf_i+0x86>
 80059da:	2975      	cmp	r1, #117	; 0x75
 80059dc:	d017      	beq.n	8005a0e <_printf_i+0xb2>
 80059de:	2978      	cmp	r1, #120	; 0x78
 80059e0:	d1d4      	bne.n	800598c <_printf_i+0x30>
 80059e2:	2378      	movs	r3, #120	; 0x78
 80059e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059e8:	4864      	ldr	r0, [pc, #400]	; (8005b7c <_printf_i+0x220>)
 80059ea:	e055      	b.n	8005a98 <_printf_i+0x13c>
 80059ec:	6813      	ldr	r3, [r2, #0]
 80059ee:	1d19      	adds	r1, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6011      	str	r1, [r2, #0]
 80059f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059fc:	2301      	movs	r3, #1
 80059fe:	e08c      	b.n	8005b1a <_printf_i+0x1be>
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6011      	str	r1, [r2, #0]
 8005a04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a08:	bf18      	it	ne
 8005a0a:	b21b      	sxthne	r3, r3
 8005a0c:	e7cf      	b.n	80059ae <_printf_i+0x52>
 8005a0e:	6813      	ldr	r3, [r2, #0]
 8005a10:	6825      	ldr	r5, [r4, #0]
 8005a12:	1d18      	adds	r0, r3, #4
 8005a14:	6010      	str	r0, [r2, #0]
 8005a16:	0628      	lsls	r0, r5, #24
 8005a18:	d501      	bpl.n	8005a1e <_printf_i+0xc2>
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	e002      	b.n	8005a24 <_printf_i+0xc8>
 8005a1e:	0668      	lsls	r0, r5, #25
 8005a20:	d5fb      	bpl.n	8005a1a <_printf_i+0xbe>
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	4854      	ldr	r0, [pc, #336]	; (8005b78 <_printf_i+0x21c>)
 8005a26:	296f      	cmp	r1, #111	; 0x6f
 8005a28:	bf14      	ite	ne
 8005a2a:	220a      	movne	r2, #10
 8005a2c:	2208      	moveq	r2, #8
 8005a2e:	2100      	movs	r1, #0
 8005a30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a34:	6865      	ldr	r5, [r4, #4]
 8005a36:	60a5      	str	r5, [r4, #8]
 8005a38:	2d00      	cmp	r5, #0
 8005a3a:	f2c0 8095 	blt.w	8005b68 <_printf_i+0x20c>
 8005a3e:	6821      	ldr	r1, [r4, #0]
 8005a40:	f021 0104 	bic.w	r1, r1, #4
 8005a44:	6021      	str	r1, [r4, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d13d      	bne.n	8005ac6 <_printf_i+0x16a>
 8005a4a:	2d00      	cmp	r5, #0
 8005a4c:	f040 808e 	bne.w	8005b6c <_printf_i+0x210>
 8005a50:	4665      	mov	r5, ip
 8005a52:	2a08      	cmp	r2, #8
 8005a54:	d10b      	bne.n	8005a6e <_printf_i+0x112>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	07db      	lsls	r3, r3, #31
 8005a5a:	d508      	bpl.n	8005a6e <_printf_i+0x112>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	6862      	ldr	r2, [r4, #4]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	bfde      	ittt	le
 8005a64:	2330      	movle	r3, #48	; 0x30
 8005a66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a6e:	ebac 0305 	sub.w	r3, ip, r5
 8005a72:	6123      	str	r3, [r4, #16]
 8005a74:	f8cd 8000 	str.w	r8, [sp]
 8005a78:	463b      	mov	r3, r7
 8005a7a:	aa03      	add	r2, sp, #12
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff fef6 	bl	8005870 <_printf_common>
 8005a84:	3001      	adds	r0, #1
 8005a86:	d14d      	bne.n	8005b24 <_printf_i+0x1c8>
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	b005      	add	sp, #20
 8005a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a92:	4839      	ldr	r0, [pc, #228]	; (8005b78 <_printf_i+0x21c>)
 8005a94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a98:	6813      	ldr	r3, [r2, #0]
 8005a9a:	6821      	ldr	r1, [r4, #0]
 8005a9c:	1d1d      	adds	r5, r3, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6015      	str	r5, [r2, #0]
 8005aa2:	060a      	lsls	r2, r1, #24
 8005aa4:	d50b      	bpl.n	8005abe <_printf_i+0x162>
 8005aa6:	07ca      	lsls	r2, r1, #31
 8005aa8:	bf44      	itt	mi
 8005aaa:	f041 0120 	orrmi.w	r1, r1, #32
 8005aae:	6021      	strmi	r1, [r4, #0]
 8005ab0:	b91b      	cbnz	r3, 8005aba <_printf_i+0x15e>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	f022 0220 	bic.w	r2, r2, #32
 8005ab8:	6022      	str	r2, [r4, #0]
 8005aba:	2210      	movs	r2, #16
 8005abc:	e7b7      	b.n	8005a2e <_printf_i+0xd2>
 8005abe:	064d      	lsls	r5, r1, #25
 8005ac0:	bf48      	it	mi
 8005ac2:	b29b      	uxthmi	r3, r3
 8005ac4:	e7ef      	b.n	8005aa6 <_printf_i+0x14a>
 8005ac6:	4665      	mov	r5, ip
 8005ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005acc:	fb02 3311 	mls	r3, r2, r1, r3
 8005ad0:	5cc3      	ldrb	r3, [r0, r3]
 8005ad2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	d1f5      	bne.n	8005ac8 <_printf_i+0x16c>
 8005adc:	e7b9      	b.n	8005a52 <_printf_i+0xf6>
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	6825      	ldr	r5, [r4, #0]
 8005ae2:	6961      	ldr	r1, [r4, #20]
 8005ae4:	1d18      	adds	r0, r3, #4
 8005ae6:	6010      	str	r0, [r2, #0]
 8005ae8:	0628      	lsls	r0, r5, #24
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	d501      	bpl.n	8005af2 <_printf_i+0x196>
 8005aee:	6019      	str	r1, [r3, #0]
 8005af0:	e002      	b.n	8005af8 <_printf_i+0x19c>
 8005af2:	066a      	lsls	r2, r5, #25
 8005af4:	d5fb      	bpl.n	8005aee <_printf_i+0x192>
 8005af6:	8019      	strh	r1, [r3, #0]
 8005af8:	2300      	movs	r3, #0
 8005afa:	6123      	str	r3, [r4, #16]
 8005afc:	4665      	mov	r5, ip
 8005afe:	e7b9      	b.n	8005a74 <_printf_i+0x118>
 8005b00:	6813      	ldr	r3, [r2, #0]
 8005b02:	1d19      	adds	r1, r3, #4
 8005b04:	6011      	str	r1, [r2, #0]
 8005b06:	681d      	ldr	r5, [r3, #0]
 8005b08:	6862      	ldr	r2, [r4, #4]
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f7fa fb6f 	bl	80001f0 <memchr>
 8005b12:	b108      	cbz	r0, 8005b18 <_printf_i+0x1bc>
 8005b14:	1b40      	subs	r0, r0, r5
 8005b16:	6060      	str	r0, [r4, #4]
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b22:	e7a7      	b.n	8005a74 <_printf_i+0x118>
 8005b24:	6923      	ldr	r3, [r4, #16]
 8005b26:	462a      	mov	r2, r5
 8005b28:	4639      	mov	r1, r7
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	47c0      	blx	r8
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d0aa      	beq.n	8005a88 <_printf_i+0x12c>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	079b      	lsls	r3, r3, #30
 8005b36:	d413      	bmi.n	8005b60 <_printf_i+0x204>
 8005b38:	68e0      	ldr	r0, [r4, #12]
 8005b3a:	9b03      	ldr	r3, [sp, #12]
 8005b3c:	4298      	cmp	r0, r3
 8005b3e:	bfb8      	it	lt
 8005b40:	4618      	movlt	r0, r3
 8005b42:	e7a3      	b.n	8005a8c <_printf_i+0x130>
 8005b44:	2301      	movs	r3, #1
 8005b46:	464a      	mov	r2, r9
 8005b48:	4639      	mov	r1, r7
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	47c0      	blx	r8
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d09a      	beq.n	8005a88 <_printf_i+0x12c>
 8005b52:	3501      	adds	r5, #1
 8005b54:	68e3      	ldr	r3, [r4, #12]
 8005b56:	9a03      	ldr	r2, [sp, #12]
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	42ab      	cmp	r3, r5
 8005b5c:	dcf2      	bgt.n	8005b44 <_printf_i+0x1e8>
 8005b5e:	e7eb      	b.n	8005b38 <_printf_i+0x1dc>
 8005b60:	2500      	movs	r5, #0
 8005b62:	f104 0919 	add.w	r9, r4, #25
 8005b66:	e7f5      	b.n	8005b54 <_printf_i+0x1f8>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ac      	bne.n	8005ac6 <_printf_i+0x16a>
 8005b6c:	7803      	ldrb	r3, [r0, #0]
 8005b6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b76:	e76c      	b.n	8005a52 <_printf_i+0xf6>
 8005b78:	08005d17 	.word	0x08005d17
 8005b7c:	08005d28 	.word	0x08005d28

08005b80 <_sbrk_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4c06      	ldr	r4, [pc, #24]	; (8005b9c <_sbrk_r+0x1c>)
 8005b84:	2300      	movs	r3, #0
 8005b86:	4605      	mov	r5, r0
 8005b88:	4608      	mov	r0, r1
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	f7ff fa92 	bl	80050b4 <_sbrk>
 8005b90:	1c43      	adds	r3, r0, #1
 8005b92:	d102      	bne.n	8005b9a <_sbrk_r+0x1a>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	b103      	cbz	r3, 8005b9a <_sbrk_r+0x1a>
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
 8005b9c:	2000042c 	.word	0x2000042c

08005ba0 <__ascii_wctomb>:
 8005ba0:	b149      	cbz	r1, 8005bb6 <__ascii_wctomb+0x16>
 8005ba2:	2aff      	cmp	r2, #255	; 0xff
 8005ba4:	bf85      	ittet	hi
 8005ba6:	238a      	movhi	r3, #138	; 0x8a
 8005ba8:	6003      	strhi	r3, [r0, #0]
 8005baa:	700a      	strbls	r2, [r1, #0]
 8005bac:	f04f 30ff 	movhi.w	r0, #4294967295
 8005bb0:	bf98      	it	ls
 8005bb2:	2001      	movls	r0, #1
 8005bb4:	4770      	bx	lr
 8005bb6:	4608      	mov	r0, r1
 8005bb8:	4770      	bx	lr

08005bba <memmove>:
 8005bba:	4288      	cmp	r0, r1
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	eb01 0302 	add.w	r3, r1, r2
 8005bc2:	d807      	bhi.n	8005bd4 <memmove+0x1a>
 8005bc4:	1e42      	subs	r2, r0, #1
 8005bc6:	4299      	cmp	r1, r3
 8005bc8:	d00a      	beq.n	8005be0 <memmove+0x26>
 8005bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bce:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005bd2:	e7f8      	b.n	8005bc6 <memmove+0xc>
 8005bd4:	4283      	cmp	r3, r0
 8005bd6:	d9f5      	bls.n	8005bc4 <memmove+0xa>
 8005bd8:	1881      	adds	r1, r0, r2
 8005bda:	1ad2      	subs	r2, r2, r3
 8005bdc:	42d3      	cmn	r3, r2
 8005bde:	d100      	bne.n	8005be2 <memmove+0x28>
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005be6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005bea:	e7f7      	b.n	8005bdc <memmove+0x22>

08005bec <__malloc_lock>:
 8005bec:	4770      	bx	lr

08005bee <__malloc_unlock>:
 8005bee:	4770      	bx	lr

08005bf0 <_realloc_r>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	4607      	mov	r7, r0
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	460e      	mov	r6, r1
 8005bf8:	b921      	cbnz	r1, 8005c04 <_realloc_r+0x14>
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c00:	f7ff bc8a 	b.w	8005518 <_malloc_r>
 8005c04:	b922      	cbnz	r2, 8005c10 <_realloc_r+0x20>
 8005c06:	f7ff fc39 	bl	800547c <_free_r>
 8005c0a:	4625      	mov	r5, r4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c10:	f000 f814 	bl	8005c3c <_malloc_usable_size_r>
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	d20f      	bcs.n	8005c38 <_realloc_r+0x48>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	f7ff fc7c 	bl	8005518 <_malloc_r>
 8005c20:	4605      	mov	r5, r0
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d0f2      	beq.n	8005c0c <_realloc_r+0x1c>
 8005c26:	4631      	mov	r1, r6
 8005c28:	4622      	mov	r2, r4
 8005c2a:	f7ff fadd 	bl	80051e8 <memcpy>
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4638      	mov	r0, r7
 8005c32:	f7ff fc23 	bl	800547c <_free_r>
 8005c36:	e7e9      	b.n	8005c0c <_realloc_r+0x1c>
 8005c38:	4635      	mov	r5, r6
 8005c3a:	e7e7      	b.n	8005c0c <_realloc_r+0x1c>

08005c3c <_malloc_usable_size_r>:
 8005c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c40:	1f18      	subs	r0, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bfbc      	itt	lt
 8005c46:	580b      	ldrlt	r3, [r1, r0]
 8005c48:	18c0      	addlt	r0, r0, r3
 8005c4a:	4770      	bx	lr

08005c4c <_init>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	bf00      	nop
 8005c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c52:	bc08      	pop	{r3}
 8005c54:	469e      	mov	lr, r3
 8005c56:	4770      	bx	lr

08005c58 <_fini>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	bf00      	nop
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr
