
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006720  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c28  08006c28  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c30  08006c30  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ip_code      00000000  08060000  08060000  000201dc  2**0
                  CONTENTS
 10 .bss          00000240  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000041c  2000041c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012680  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002d5d  00000000  00000000  0003288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001170  00000000  00000000  000355f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000fe8  00000000  00000000  00036760  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001884b  00000000  00000000  00037748  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f043  00000000  00000000  0004ff93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00093f35  00000000  00000000  0005efd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000f2f0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ce4  00000000  00000000  000f2f88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068a8 	.word	0x080068a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080068a8 	.word	0x080068a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f8fa 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f005 faec 	bl	8005b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f005 f95c 	bl	8005880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000004 	.word	0x20000004
 80005f8:	2000020c 	.word	0x2000020c

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000020c 	.word	0x2000020c

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db0b      	blt.n	80006a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 021f 	and.w	r2, r3, #31
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <__NVIC_EnableIRQ+0x38>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	095b      	lsrs	r3, r3, #5
 8000698:	2001      	movs	r0, #1
 800069a:	fa00 f202 	lsl.w	r2, r0, r2
 800069e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	db10      	blt.n	80006e8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f003 021f 	and.w	r2, r3, #31
 80006cc:	4909      	ldr	r1, [pc, #36]	; (80006f4 <__NVIC_DisableIRQ+0x40>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	095b      	lsrs	r3, r3, #5
 80006d4:	2001      	movs	r0, #1
 80006d6:	fa00 f202 	lsl.w	r2, r0, r2
 80006da:	3320      	adds	r3, #32
 80006dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006e4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff2a 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007da:	f7ff ff3f 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	6978      	ldr	r0, [r7, #20]
 80007e6:	f7ff ffb1 	bl	800074c <NVIC_EncodePriority>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff80 	bl	80006f8 <__NVIC_SetPriority>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff32 	bl	8000678 <__NVIC_EnableIRQ>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff42 	bl	80006b4 <__NVIC_DisableIRQ>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e00e      	b.n	8000868 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d105      	bne.n	8000860 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f005 f838 	bl	80058d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2201      	movs	r2, #1
 8000864:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2202      	movs	r2, #2
 8000884:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f042 0201 	orr.w	r2, r2, #1
 8000894:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e00a      	b.n	80008b2 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	441a      	add	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6812      	ldr	r2, [r2, #0]
 80008aa:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	3301      	adds	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3f0      	bcc.n	800089c <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2201      	movs	r2, #1
 80008c6:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80008c8:	693b      	ldr	r3, [r7, #16]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	371c      	adds	r7, #28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff fe8a 	bl	80005fc <HAL_GetTick>
 80008e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e099      	b.n	8000a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2202      	movs	r2, #2
 8000900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f022 0201 	bic.w	r2, r2, #1
 8000912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000914:	e00f      	b.n	8000936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000916:	f7ff fe71 	bl	80005fc <HAL_GetTick>
 800091a:	4602      	mov	r2, r0
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2b05      	cmp	r3, #5
 8000922:	d908      	bls.n	8000936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2220      	movs	r2, #32
 8000928:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2203      	movs	r2, #3
 800092e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e078      	b.n	8000a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1e8      	bne.n	8000916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <HAL_DMA_Init+0x158>)
 8000950:	4013      	ands	r3, r2
 8000952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800096e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800097a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a1b      	ldr	r3, [r3, #32]
 8000980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	4313      	orrs	r3, r2
 8000986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	2b04      	cmp	r3, #4
 800098e:	d107      	bne.n	80009a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4313      	orrs	r3, r2
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	4313      	orrs	r3, r2
 800099e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f023 0307 	bic.w	r3, r3, #7
 80009b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	4313      	orrs	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d117      	bne.n	80009fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00e      	beq.n	80009fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 fa91 	bl	8000f04 <DMA_CheckFifoParam>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2240      	movs	r2, #64	; 0x40
 80009ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009f6:	2301      	movs	r3, #1
 80009f8:	e016      	b.n	8000a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 fa48 	bl	8000e98 <DMA_CalcBaseAndBitshift>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a10:	223f      	movs	r2, #63	; 0x3f
 8000a12:	409a      	lsls	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2201      	movs	r2, #1
 8000a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	f010803f 	.word	0xf010803f

08000a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d101      	bne.n	8000a5a <HAL_DMA_Start_IT+0x26>
 8000a56:	2302      	movs	r3, #2
 8000a58:	e040      	b.n	8000adc <HAL_DMA_Start_IT+0xa8>
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d12f      	bne.n	8000ace <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2202      	movs	r2, #2
 8000a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f000 f9da 	bl	8000e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8c:	223f      	movs	r2, #63	; 0x3f
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f042 0216 	orr.w	r2, r2, #22
 8000aa2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d007      	beq.n	8000abc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f042 0208 	orr.w	r2, r2, #8
 8000aba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0201 	orr.w	r2, r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	e005      	b.n	8000ada <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d004      	beq.n	8000b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00c      	b.n	8000b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2205      	movs	r2, #5
 8000b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0201 	bic.w	r2, r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b34:	4b92      	ldr	r3, [pc, #584]	; (8000d80 <HAL_DMA_IRQHandler+0x258>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a92      	ldr	r2, [pc, #584]	; (8000d84 <HAL_DMA_IRQHandler+0x25c>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0a9b      	lsrs	r3, r3, #10
 8000b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b52:	2208      	movs	r2, #8
 8000b54:	409a      	lsls	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d01a      	beq.n	8000b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d013      	beq.n	8000b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 0204 	bic.w	r2, r2, #4
 8000b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b80:	2208      	movs	r2, #8
 8000b82:	409a      	lsls	r2, r3
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b8c:	f043 0201 	orr.w	r2, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b98:	2201      	movs	r2, #1
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d012      	beq.n	8000bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00b      	beq.n	8000bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc2:	f043 0202 	orr.w	r2, r3, #2
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bce:	2204      	movs	r2, #4
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d012      	beq.n	8000c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00b      	beq.n	8000c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bec:	2204      	movs	r2, #4
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf8:	f043 0204 	orr.w	r2, r3, #4
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c04:	2210      	movs	r2, #16
 8000c06:	409a      	lsls	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d043      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d03c      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c22:	2210      	movs	r2, #16
 8000c24:	409a      	lsls	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d018      	beq.n	8000c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d108      	bne.n	8000c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d024      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	4798      	blx	r3
 8000c56:	e01f      	b.n	8000c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d01b      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	4798      	blx	r3
 8000c68:	e016      	b.n	8000c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d107      	bne.n	8000c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 0208 	bic.w	r2, r2, #8
 8000c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 808e 	beq.w	8000dc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 8086 	beq.w	8000dc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	d136      	bne.n	8000d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0216 	bic.w	r2, r2, #22
 8000ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d103      	bne.n	8000d02 <HAL_DMA_IRQHandler+0x1da>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d007      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0208 	bic.w	r2, r2, #8
 8000d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d16:	223f      	movs	r2, #63	; 0x3f
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d07d      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	4798      	blx	r3
        }
        return;
 8000d3e:	e078      	b.n	8000e32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d01c      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d108      	bne.n	8000d6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d030      	beq.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	4798      	blx	r3
 8000d6c:	e02b      	b.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d027      	beq.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	4798      	blx	r3
 8000d7e:	e022      	b.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
 8000d80:	20000008 	.word	0x20000008
 8000d84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10f      	bne.n	8000db6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0210 	bic.w	r2, r2, #16
 8000da4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d032      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d022      	beq.n	8000e20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2205      	movs	r2, #5
 8000dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0201 	bic.w	r2, r2, #1
 8000df0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d307      	bcc.n	8000e0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f2      	bne.n	8000df2 <HAL_DMA_IRQHandler+0x2ca>
 8000e0c:	e000      	b.n	8000e10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000e0e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4798      	blx	r3
 8000e30:	e000      	b.n	8000e34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000e32:	bf00      	nop
    }
  }
}
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop

08000e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b40      	cmp	r3, #64	; 0x40
 8000e68:	d108      	bne.n	8000e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e7a:	e007      	b.n	8000e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68ba      	ldr	r2, [r7, #8]
 8000e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	60da      	str	r2, [r3, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	3b10      	subs	r3, #16
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <DMA_CalcBaseAndBitshift+0x64>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <DMA_CalcBaseAndBitshift+0x68>)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d909      	bls.n	8000eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ece:	f023 0303 	bic.w	r3, r3, #3
 8000ed2:	1d1a      	adds	r2, r3, #4
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8000ed8:	e007      	b.n	8000eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ee2:	f023 0303 	bic.w	r3, r3, #3
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	aaaaaaab 	.word	0xaaaaaaab
 8000f00:	08006a38 	.word	0x08006a38

08000f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d11f      	bne.n	8000f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d855      	bhi.n	8000fd0 <DMA_CheckFifoParam+0xcc>
 8000f24:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <DMA_CheckFifoParam+0x28>)
 8000f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2a:	bf00      	nop
 8000f2c:	08000f3d 	.word	0x08000f3d
 8000f30:	08000f4f 	.word	0x08000f4f
 8000f34:	08000f3d 	.word	0x08000f3d
 8000f38:	08000fd1 	.word	0x08000fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d045      	beq.n	8000fd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f4c:	e042      	b.n	8000fd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f56:	d13f      	bne.n	8000fd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f5c:	e03c      	b.n	8000fd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f66:	d121      	bne.n	8000fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d836      	bhi.n	8000fdc <DMA_CheckFifoParam+0xd8>
 8000f6e:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <DMA_CheckFifoParam+0x70>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000f85 	.word	0x08000f85
 8000f78:	08000f8b 	.word	0x08000f8b
 8000f7c:	08000f85 	.word	0x08000f85
 8000f80:	08000f9d 	.word	0x08000f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
      break;
 8000f88:	e02f      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d024      	beq.n	8000fe0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f9a:	e021      	b.n	8000fe0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000fa4:	d11e      	bne.n	8000fe4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000faa:	e01b      	b.n	8000fe4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d902      	bls.n	8000fb8 <DMA_CheckFifoParam+0xb4>
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d003      	beq.n	8000fbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000fb6:	e018      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
      break;
 8000fbc:	e015      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00e      	beq.n	8000fe8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8000fce:	e00b      	b.n	8000fe8 <DMA_CheckFifoParam+0xe4>
      break;
 8000fd0:	bf00      	nop
 8000fd2:	e00a      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fd4:	bf00      	nop
 8000fd6:	e008      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fd8:	bf00      	nop
 8000fda:	e006      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fdc:	bf00      	nop
 8000fde:	e004      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fe0:	bf00      	nop
 8000fe2:	e002      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;   
 8000fe4:	bf00      	nop
 8000fe6:	e000      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fe8:	bf00      	nop
    }
  } 
  
  return status; 
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <HAL_FLASH_Program+0xa0>)
 800100c:	7e1b      	ldrb	r3, [r3, #24]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_FLASH_Program+0x1e>
 8001012:	2302      	movs	r3, #2
 8001014:	e03b      	b.n	800108e <HAL_FLASH_Program+0x96>
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_FLASH_Program+0xa0>)
 8001018:	2201      	movs	r2, #1
 800101a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800101c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001020:	f000 f8b0 	bl	8001184 <FLASH_WaitForLastOperation>
 8001024:	4603      	mov	r3, r0
 8001026:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d12b      	bne.n	8001086 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001034:	783b      	ldrb	r3, [r7, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f000 f959 	bl	80012f0 <FLASH_Program_Byte>
 800103e:	e016      	b.n	800106e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d105      	bne.n	8001052 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001046:	883b      	ldrh	r3, [r7, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	68b8      	ldr	r0, [r7, #8]
 800104c:	f000 f92c 	bl	80012a8 <FLASH_Program_HalfWord>
 8001050:	e00d      	b.n	800106e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d105      	bne.n	8001064 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f000 f901 	bl	8001264 <FLASH_Program_Word>
 8001062:	e004      	b.n	800106e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001068:	68b8      	ldr	r0, [r7, #8]
 800106a:	f000 f8cb 	bl	8001204 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800106e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001072:	f000 f887 	bl	8001184 <FLASH_WaitForLastOperation>
 8001076:	4603      	mov	r3, r0
 8001078:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_FLASH_Program+0xa4>)
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_FLASH_Program+0xa4>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <HAL_FLASH_Program+0xa0>)
 8001088:	2200      	movs	r2, #0
 800108a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800108c:	7dfb      	ldrb	r3, [r7, #23]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000210 	.word	0x20000210
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_FLASH_Unlock+0x38>)
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da0b      	bge.n	80010ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_FLASH_Unlock+0x38>)
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_FLASH_Unlock+0x3c>)
 80010b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <HAL_FLASH_Unlock+0x38>)
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <HAL_FLASH_Unlock+0x40>)
 80010bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_FLASH_Unlock+0x38>)
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	da01      	bge.n	80010ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40023c00 	.word	0x40023c00
 80010dc:	45670123 	.word	0x45670123
 80010e0:	cdef89ab 	.word	0xcdef89ab

080010e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_FLASH_Lock+0x1c>)
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_FLASH_Lock+0x1c>)
 80010ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_FLASH_OB_Unlock+0x2c>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_FLASH_OB_Unlock+0x2c>)
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_FLASH_OB_Unlock+0x30>)
 8001118:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_FLASH_OB_Unlock+0x2c>)
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_FLASH_OB_Unlock+0x34>)
 800111e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001120:	2300      	movs	r3, #0
 8001122:	e000      	b.n	8001126 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40023c00 	.word	0x40023c00
 8001134:	08192a3b 	.word	0x08192a3b
 8001138:	4c5d6e7f 	.word	0x4c5d6e7f

0800113c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_FLASH_OB_Lock+0x1c>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_FLASH_OB_Lock+0x1c>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40023c00 	.word	0x40023c00

0800115c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_FLASH_OB_Launch+0x24>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_FLASH_OB_Launch+0x24>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001170:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001174:	f000 f806 	bl	8001184 <FLASH_WaitForLastOperation>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c14 	.word	0x40023c14

08001184 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <FLASH_WaitForLastOperation+0x78>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001196:	f7ff fa31 	bl	80005fc <HAL_GetTick>
 800119a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800119c:	e010      	b.n	80011c0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d00c      	beq.n	80011c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <FLASH_WaitForLastOperation+0x38>
 80011ac:	f7ff fa26 	bl	80005fc <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d201      	bcs.n	80011c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e019      	b.n	80011f4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <FLASH_WaitForLastOperation+0x7c>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e8      	bne.n	800119e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <FLASH_WaitForLastOperation+0x7c>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <FLASH_WaitForLastOperation+0x7c>)
 80011da:	2201      	movs	r2, #1
 80011dc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <FLASH_WaitForLastOperation+0x7c>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80011ea:	f000 f8a3 	bl	8001334 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
  
}  
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000210 	.word	0x20000210
 8001200:	40023c00 	.word	0x40023c00

08001204 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001204:	b490      	push	{r4, r7}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 8001216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800121a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 8001222:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001226:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800123e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	f04f 0400 	mov.w	r4, #0
 800124a:	0013      	movs	r3, r2
 800124c:	2400      	movs	r4, #0
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	3204      	adds	r2, #4
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bc90      	pop	{r4, r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00

08001264 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001278:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <FLASH_Program_Word+0x40>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001284:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <FLASH_Program_Word+0x40>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	4a09      	ldr	r2, [pc, #36]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	801a      	strh	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <FLASH_Program_Byte+0x40>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <FLASH_Program_Byte+0x40>)
 8001302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001306:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <FLASH_Program_Byte+0x40>)
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <FLASH_Program_Byte+0x40>)
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <FLASH_Program_Byte+0x40>)
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <FLASH_Program_Byte+0x40>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	701a      	strb	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00

08001334 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 800134e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001352:	2210      	movs	r2, #16
 8001354:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d008      	beq.n	8001374 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	4a24      	ldr	r2, [pc, #144]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 800136c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001370:	2220      	movs	r2, #32
 8001372:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 800138a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013a8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	60da      	str	r2, [r3, #12]
  }
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40023c00 	.word	0x40023c00
 80013fc:	20000210 	.word	0x20000210

08001400 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <HAL_FLASHEx_OBProgram+0xd8>)
 800140e:	7e1b      	ldrb	r3, [r3, #24]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_FLASHEx_OBProgram+0x18>
 8001414:	2302      	movs	r3, #2
 8001416:	e05b      	b.n	80014d0 <HAL_FLASHEx_OBProgram+0xd0>
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_FLASHEx_OBProgram+0xd8>)
 800141a:	2201      	movs	r2, #1
 800141c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d018      	beq.n	800145c <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d10a      	bne.n	8001448 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f000 f8b9 	bl	80015b4 <FLASH_OB_EnableWRP>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e009      	b.n	800145c <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4619      	mov	r1, r3
 8001452:	4610      	mov	r0, r2
 8001454:	f000 f8d0 	bl	80015f8 <FLASH_OB_DisableWRP>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f8e2 	bl	8001638 <FLASH_OB_RDP_LevelConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7e1b      	ldrb	r3, [r3, #24]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001496:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 800149c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	f000 f8e2 	bl	800166c <FLASH_OB_UserConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f904 	bl	80016cc <FLASH_OB_BOR_LevelConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_FLASHEx_OBProgram+0xd8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	761a      	strb	r2, [r3, #24]

  return status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000210 	.word	0x20000210

080014dc <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	220f      	movs	r2, #15
 80014e8:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80014ea:	f000 f91d 	bl	8001728 <FLASH_OB_GetWRP>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80014f6:	f000 f923 	bl	8001740 <FLASH_OB_GetRDP>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001502:	f000 f901 	bl	8001708 <FLASH_OB_GetUser>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800150e:	f000 f937 	bl	8001780 <FLASH_OB_GetBOR>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	615a      	str	r2, [r3, #20]
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e010      	b.n	8001562 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d103      	bne.n	800154e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e009      	b.n	8001562 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d103      	bne.n	800155c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e002      	b.n	8001562 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800155c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001560:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	490f      	ldr	r1, [pc, #60]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001580:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001584:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4313      	orrs	r3, r2
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6113      	str	r3, [r2, #16]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015c6:	f7ff fddd 	bl	8001184 <FLASH_WaitForLastOperation>
 80015ca:	4603      	mov	r3, r0
 80015cc:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10a      	bne.n	80015ea <FLASH_OB_EnableWRP+0x36>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <FLASH_OB_EnableWRP+0x40>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4904      	ldr	r1, [pc, #16]	; (80015f4 <FLASH_OB_EnableWRP+0x40>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023c16 	.word	0x40023c16

080015f8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001606:	f24c 3050 	movw	r0, #50000	; 0xc350
 800160a:	f7ff fdbb 	bl	8001184 <FLASH_WaitForLastOperation>
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d108      	bne.n	800162a <FLASH_OB_DisableWRP+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <FLASH_OB_DisableWRP+0x3c>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4904      	ldr	r1, [pc, #16]	; (8001634 <FLASH_OB_DisableWRP+0x3c>)
 8001624:	4313      	orrs	r3, r2
 8001626:	b29b      	uxth	r3, r3
 8001628:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023c16 	.word	0x40023c16

08001638 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001646:	f24c 3050 	movw	r0, #50000	; 0xc350
 800164a:	f7ff fd9b 	bl	8001184 <FLASH_WaitForLastOperation>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <FLASH_OB_RDP_LevelConfig+0x30>)
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023c15 	.word	0x40023c15

0800166c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	460b      	mov	r3, r1
 8001678:	71bb      	strb	r3, [r7, #6]
 800167a:	4613      	mov	r3, r2
 800167c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800167e:	23ff      	movs	r3, #255	; 0xff
 8001680:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001686:	f24c 3050 	movw	r0, #50000	; 0xc350
 800168a:	f7ff fd7b 	bl	8001184 <FLASH_WaitForLastOperation>
 800168e:	4603      	mov	r3, r0
 8001690:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d111      	bne.n	80016bc <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <FLASH_OB_UserConfig+0x5c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 80016a4:	79ba      	ldrb	r2, [r7, #6]
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4905      	ldr	r1, [pc, #20]	; (80016c8 <FLASH_OB_UserConfig+0x5c>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c14 	.word	0x40023c14

080016cc <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <FLASH_OB_BOR_LevelConfig+0x38>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4a09      	ldr	r2, [pc, #36]	; (8001704 <FLASH_OB_BOR_LevelConfig+0x38>)
 80016de:	f023 030c 	bic.w	r3, r3, #12
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <FLASH_OB_BOR_LevelConfig+0x38>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4905      	ldr	r1, [pc, #20]	; (8001704 <FLASH_OB_BOR_LevelConfig+0x38>)
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
  
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023c14 	.word	0x40023c14

08001708 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <FLASH_OB_GetUser+0x1c>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f023 031f 	bic.w	r3, r3, #31
 8001716:	b2db      	uxtb	r3, r3
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <FLASH_OB_GetWRP+0x14>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40023c16 	.word	0x40023c16

08001740 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001746:	23aa      	movs	r3, #170	; 0xaa
 8001748:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <FLASH_OB_GetRDP+0x3c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2bcc      	cmp	r3, #204	; 0xcc
 8001752:	d102      	bne.n	800175a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001754:	23cc      	movs	r3, #204	; 0xcc
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	e009      	b.n	800176e <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <FLASH_OB_GetRDP+0x3c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2baa      	cmp	r3, #170	; 0xaa
 8001762:	d102      	bne.n	800176a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001764:	23aa      	movs	r3, #170	; 0xaa
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	e001      	b.n	800176e <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800176a:	2355      	movs	r3, #85	; 0x55
 800176c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800176e:	79fb      	ldrb	r3, [r7, #7]
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40023c15 	.word	0x40023c15

08001780 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <FLASH_OB_GetBOR+0x1c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	b2db      	uxtb	r3, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023c14 	.word	0x40023c14

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e159      	b.n	8001a70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8148 	bne.w	8001a6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d00b      	beq.n	80017fa <HAL_GPIO_Init+0x5a>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ee:	2b11      	cmp	r3, #17
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0xfc>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b12      	cmp	r3, #18
 800189a:	d123      	bne.n	80018e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	69b9      	ldr	r1, [r7, #24]
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a2 	beq.w	8001a6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001942:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2ec>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x202>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x1fe>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_GPIO_Init+0x2f4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x1fa>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x1f6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a44      	ldr	r2, [pc, #272]	; (8001a9c <HAL_GPIO_Init+0x2fc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x1f2>
 800198e:	2304      	movs	r3, #4
 8001990:	e008      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 8001992:	2307      	movs	r3, #7
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 8001996:	2303      	movs	r3, #3
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 80019a2:	2300      	movs	r3, #0
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f002 0203 	and.w	r2, r2, #3
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b4:	4934      	ldr	r1, [pc, #208]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e6:	4a2e      	ldr	r2, [pc, #184]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ec:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	f67f aea2 	bls.w	80017bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3724      	adds	r7, #36	; 0x24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac0:	e003      	b.n	8001aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	619a      	str	r2, [r3, #24]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e02b      	b.n	8001b40 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001af0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f245 5255 	movw	r2, #21845	; 0x5555
 8001afa:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6852      	ldr	r2, [r2, #4]
 8001b04:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6892      	ldr	r2, [r2, #8]
 8001b0e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001b10:	f7fe fd74 	bl	80005fc <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001b16:	e008      	b.n	8001b2a <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001b18:	f7fe fd70 	bl	80005fc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b30      	cmp	r3, #48	; 0x30
 8001b24:	d901      	bls.n	8001b2a <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e00a      	b.n	8001b40 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f1      	bne.n	8001b18 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001b58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e25b      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d075      	beq.n	8001c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b86:	4ba3      	ldr	r3, [pc, #652]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d00c      	beq.n	8001bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b92:	4ba0      	ldr	r3, [pc, #640]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d112      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9e:	4b9d      	ldr	r3, [pc, #628]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001baa:	d10b      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	4b99      	ldr	r3, [pc, #612]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d05b      	beq.n	8001c70 <HAL_RCC_OscConfig+0x108>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d157      	bne.n	8001c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e236      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCC_OscConfig+0x74>
 8001bce:	4b91      	ldr	r3, [pc, #580]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a90      	ldr	r2, [pc, #576]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e01d      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x98>
 8001be6:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a8a      	ldr	r2, [pc, #552]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a87      	ldr	r2, [pc, #540]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001c00:	4b84      	ldr	r3, [pc, #528]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a83      	ldr	r2, [pc, #524]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a80      	ldr	r2, [pc, #512]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7fe fcec 	bl	80005fc <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7fe fce8 	bl	80005fc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1fb      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b76      	ldr	r3, [pc, #472]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0xc0>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7fe fcd8 	bl	80005fc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7fe fcd4 	bl	80005fc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1e7      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	4b6c      	ldr	r3, [pc, #432]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0xe8>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d063      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c7e:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b62      	ldr	r3, [pc, #392]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d11c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c96:	4b5f      	ldr	r3, [pc, #380]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	4b5c      	ldr	r3, [pc, #368]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e1bb      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4952      	ldr	r1, [pc, #328]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	e03a      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd8:	4b4f      	ldr	r3, [pc, #316]	; (8001e18 <HAL_RCC_OscConfig+0x2b0>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7fe fc8d 	bl	80005fc <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7fe fc89 	bl	80005fc <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e19c      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4940      	ldr	r1, [pc, #256]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e015      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <HAL_RCC_OscConfig+0x2b0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7fe fc6c 	bl	80005fc <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d28:	f7fe fc68 	bl	80005fc <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e17b      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d030      	beq.n	8001db4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d016      	beq.n	8001d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <HAL_RCC_OscConfig+0x2b4>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7fe fc4c 	bl	80005fc <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d68:	f7fe fc48 	bl	80005fc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e15b      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x200>
 8001d86:	e015      	b.n	8001db4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_RCC_OscConfig+0x2b4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe fc35 	bl	80005fc <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d96:	f7fe fc31 	bl	80005fc <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e144      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a0 	beq.w	8001f02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10f      	bne.n	8001df2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCC_OscConfig+0x2b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_RCC_OscConfig+0x2b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_RCC_OscConfig+0x2b8>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fbf7 	bl	80005fc <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e011      	b.n	8001e36 <HAL_RCC_OscConfig+0x2ce>
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	42470000 	.word	0x42470000
 8001e1c:	42470e80 	.word	0x42470e80
 8001e20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e24:	f7fe fbea 	bl	80005fc <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0fd      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	4b81      	ldr	r3, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x4d4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
 8001e4a:	4b7d      	ldr	r3, [pc, #500]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	4a7c      	ldr	r2, [pc, #496]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6713      	str	r3, [r2, #112]	; 0x70
 8001e56:	e01c      	b.n	8001e92 <HAL_RCC_OscConfig+0x32a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x312>
 8001e60:	4b77      	ldr	r3, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a76      	ldr	r2, [pc, #472]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6c:	4b74      	ldr	r3, [pc, #464]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a73      	ldr	r2, [pc, #460]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	e00b      	b.n	8001e92 <HAL_RCC_OscConfig+0x32a>
 8001e7a:	4b71      	ldr	r3, [pc, #452]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a70      	ldr	r2, [pc, #448]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	4b6e      	ldr	r3, [pc, #440]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a6d      	ldr	r2, [pc, #436]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d015      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7fe fbaf 	bl	80005fc <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7fe fbab 	bl	80005fc <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0bc      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	4b61      	ldr	r3, [pc, #388]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ee      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x33a>
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe fb99 	bl	80005fc <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe fb95 	bl	80005fc <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e0a6      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	4b56      	ldr	r3, [pc, #344]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef6:	4b52      	ldr	r3, [pc, #328]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a51      	ldr	r2, [pc, #324]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8092 	beq.w	8002030 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f0c:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d05c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d141      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b48      	ldr	r3, [pc, #288]	; (8002044 <HAL_RCC_OscConfig+0x4dc>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fb69 	bl	80005fc <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe fb65 	bl	80005fc <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e078      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f40:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	019b      	lsls	r3, r3, #6
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	3b01      	subs	r3, #1
 8001f66:	041b      	lsls	r3, r3, #16
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	061b      	lsls	r3, r3, #24
 8001f70:	4933      	ldr	r1, [pc, #204]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_RCC_OscConfig+0x4dc>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fb3e 	bl	80005fc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f84:	f7fe fb3a 	bl	80005fc <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e04d      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x41c>
 8001fa2:	e045      	b.n	8002030 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x4dc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7fe fb27 	bl	80005fc <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7fe fb23 	bl	80005fc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e036      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x44a>
 8001fd0:	e02e      	b.n	8002030 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e029      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fde:	4b18      	ldr	r3, [pc, #96]	; (8002040 <HAL_RCC_OscConfig+0x4d8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d11c      	bne.n	800202c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d115      	bne.n	800202c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800200c:	4293      	cmp	r3, r2
 800200e:	d10d      	bne.n	800202c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000
 8002040:	40023800 	.word	0x40023800
 8002044:	42470060 	.word	0x42470060

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0cc      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d90c      	bls.n	8002084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b65      	ldr	r3, [pc, #404]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d044      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e067      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4934      	ldr	r1, [pc, #208]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7fe fa60 	bl	80005fc <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7fe fa5c 	bl	80005fc <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d20c      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4601      	mov	r1, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	fa21 f303 	lsr.w	r3, r1, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fcd4 	bl	8005b9c <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00
 8002204:	40023800 	.word	0x40023800
 8002208:	08006ad0 	.word	0x08006ad0
 800220c:	20000008 	.word	0x20000008
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b04      	cmp	r3, #4
 8002234:	d007      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x32>
 8002236:	2b08      	cmp	r3, #8
 8002238:	d008      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x38>
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 80b4 	bne.w	80023a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002242:	60bb      	str	r3, [r7, #8]
       break;
 8002244:	e0b3      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002246:	4b5e      	ldr	r3, [pc, #376]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002248:	60bb      	str	r3, [r7, #8]
      break;
 800224a:	e0b0      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800224c:	4b5a      	ldr	r3, [pc, #360]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002254:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002256:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d04a      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002262:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	099b      	lsrs	r3, r3, #6
 8002268:	f04f 0400 	mov.w	r4, #0
 800226c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	ea03 0501 	and.w	r5, r3, r1
 8002278:	ea04 0602 	and.w	r6, r4, r2
 800227c:	4629      	mov	r1, r5
 800227e:	4632      	mov	r2, r6
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	f04f 0400 	mov.w	r4, #0
 8002288:	0154      	lsls	r4, r2, #5
 800228a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800228e:	014b      	lsls	r3, r1, #5
 8002290:	4619      	mov	r1, r3
 8002292:	4622      	mov	r2, r4
 8002294:	1b49      	subs	r1, r1, r5
 8002296:	eb62 0206 	sbc.w	r2, r2, r6
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	f04f 0400 	mov.w	r4, #0
 80022a2:	0194      	lsls	r4, r2, #6
 80022a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022a8:	018b      	lsls	r3, r1, #6
 80022aa:	1a5b      	subs	r3, r3, r1
 80022ac:	eb64 0402 	sbc.w	r4, r4, r2
 80022b0:	f04f 0100 	mov.w	r1, #0
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	00e2      	lsls	r2, r4, #3
 80022ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022be:	00d9      	lsls	r1, r3, #3
 80022c0:	460b      	mov	r3, r1
 80022c2:	4614      	mov	r4, r2
 80022c4:	195b      	adds	r3, r3, r5
 80022c6:	eb44 0406 	adc.w	r4, r4, r6
 80022ca:	f04f 0100 	mov.w	r1, #0
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	0262      	lsls	r2, r4, #9
 80022d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80022d8:	0259      	lsls	r1, r3, #9
 80022da:	460b      	mov	r3, r1
 80022dc:	4614      	mov	r4, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	4621      	mov	r1, r4
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f04f 0400 	mov.w	r4, #0
 80022e8:	461a      	mov	r2, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	f7fd ffd0 	bl	8000290 <__aeabi_uldivmod>
 80022f0:	4603      	mov	r3, r0
 80022f2:	460c      	mov	r4, r1
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e049      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f8:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	f04f 0400 	mov.w	r4, #0
 8002302:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	ea03 0501 	and.w	r5, r3, r1
 800230e:	ea04 0602 	and.w	r6, r4, r2
 8002312:	4629      	mov	r1, r5
 8002314:	4632      	mov	r2, r6
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	f04f 0400 	mov.w	r4, #0
 800231e:	0154      	lsls	r4, r2, #5
 8002320:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002324:	014b      	lsls	r3, r1, #5
 8002326:	4619      	mov	r1, r3
 8002328:	4622      	mov	r2, r4
 800232a:	1b49      	subs	r1, r1, r5
 800232c:	eb62 0206 	sbc.w	r2, r2, r6
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	f04f 0400 	mov.w	r4, #0
 8002338:	0194      	lsls	r4, r2, #6
 800233a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800233e:	018b      	lsls	r3, r1, #6
 8002340:	1a5b      	subs	r3, r3, r1
 8002342:	eb64 0402 	sbc.w	r4, r4, r2
 8002346:	f04f 0100 	mov.w	r1, #0
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	00e2      	lsls	r2, r4, #3
 8002350:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002354:	00d9      	lsls	r1, r3, #3
 8002356:	460b      	mov	r3, r1
 8002358:	4614      	mov	r4, r2
 800235a:	195b      	adds	r3, r3, r5
 800235c:	eb44 0406 	adc.w	r4, r4, r6
 8002360:	f04f 0100 	mov.w	r1, #0
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	02a2      	lsls	r2, r4, #10
 800236a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800236e:	0299      	lsls	r1, r3, #10
 8002370:	460b      	mov	r3, r1
 8002372:	4614      	mov	r4, r2
 8002374:	4618      	mov	r0, r3
 8002376:	4621      	mov	r1, r4
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f04f 0400 	mov.w	r4, #0
 800237e:	461a      	mov	r2, r3
 8002380:	4623      	mov	r3, r4
 8002382:	f7fd ff85 	bl	8000290 <__aeabi_uldivmod>
 8002386:	4603      	mov	r3, r0
 8002388:	460c      	mov	r4, r1
 800238a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	60bb      	str	r3, [r7, #8]
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023aa:	60bb      	str	r3, [r7, #8]
      break;
 80023ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ae:	68bb      	ldr	r3, [r7, #8]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	00f42400 	.word	0x00f42400
 80023c0:	007a1200 	.word	0x007a1200

080023c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000008 	.word	0x20000008

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023e4:	4601      	mov	r1, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0a9b      	lsrs	r3, r3, #10
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	08006ae0 	.word	0x08006ae0

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002408:	f7ff ffdc 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 800240c:	4601      	mov	r1, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0b5b      	lsrs	r3, r3, #13
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4a03      	ldr	r2, [pc, #12]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	08006ae0 	.word	0x08006ae0

0800242c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	220f      	movs	r2, #15
 800243a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	08db      	lsrs	r3, r3, #3
 8002466:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_RCC_GetClockConfig+0x60>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 020f 	and.w	r2, r3, #15
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d038      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024be:	f7fe f89d 	bl	80005fc <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024c6:	f7fe f899 	bl	80005fc <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0bd      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024d8:	4b61      	ldr	r3, [pc, #388]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	071b      	lsls	r3, r3, #28
 80024f6:	495a      	ldr	r1, [pc, #360]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024fe:	4b57      	ldr	r3, [pc, #348]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002504:	f7fe f87a 	bl	80005fc <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800250c:	f7fe f876 	bl	80005fc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e09a      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800251e:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8083 	beq.w	800263e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	4b48      	ldr	r3, [pc, #288]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	4a47      	ldr	r2, [pc, #284]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	6413      	str	r3, [r2, #64]	; 0x40
 8002548:	4b45      	ldr	r3, [pc, #276]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002554:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a42      	ldr	r2, [pc, #264]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002560:	f7fe f84c 	bl	80005fc <HAL_GetTick>
 8002564:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe f848 	bl	80005fc <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e06c      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800257a:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002586:	4b36      	ldr	r3, [pc, #216]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d02f      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d028      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ac:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ae:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b4:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025ba:	4a29      	ldr	r2, [pc, #164]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d114      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe f816 	bl	80005fc <HAL_GetTick>
 80025d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d2:	e00a      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7fe f812 	bl	80005fc <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e034      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0ee      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002602:	d10d      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002618:	4911      	ldr	r1, [pc, #68]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
 800261e:	e005      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800262a:	6093      	str	r3, [r2, #8]
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	4909      	ldr	r1, [pc, #36]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263a:	4313      	orrs	r3, r2
 800263c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7d1a      	ldrb	r2, [r3, #20]
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002650:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	42470068 	.word	0x42470068
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
 8002668:	42470e40 	.word	0x42470e40
 800266c:	424711e0 	.word	0x424711e0

08002670 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e083      	b.n	800278a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7f5b      	ldrb	r3, [r3, #29]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f003 f93e 	bl	8005914 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	22ca      	movs	r2, #202	; 0xca
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2253      	movs	r2, #83	; 0x53
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fc26 	bl	8002f00 <RTC_EnterInitMode>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	22ff      	movs	r2, #255	; 0xff
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2204      	movs	r2, #4
 80026c6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e05e      	b.n	800278a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80026da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6899      	ldr	r1, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6919      	ldr	r1, [r3, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	041a      	lsls	r2, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800272a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10e      	bne.n	8002758 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fbb8 	bl	8002eb0 <HAL_RTC_WaitForSynchro>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	22ff      	movs	r2, #255	; 0xff
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2204      	movs	r2, #4
 8002752:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e018      	b.n	800278a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	22ff      	movs	r2, #255	; 0xff
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_RTC_DeInit>:
  *                the configuration information for RTC.
  * @note   This function doesn't reset the RTC Backup Data registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	22ca      	movs	r2, #202	; 0xca
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2253      	movs	r2, #83	; 0x53
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fba2 	bl	8002f00 <RTC_EnterInitMode>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_RTC_DeInit+0x40>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	22ff      	movs	r2, #255	; 0xff
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2204      	movs	r2, #4
 80027ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e084      	b.n	80028de <HAL_RTC_DeInit+0x14a>
  }
  else
  {
    /* Reset TR, DR and CR registers */
    hrtc->Instance->TR = 0x00000000U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
    hrtc->Instance->DR = 0x00002101U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f242 1201 	movw	r2, #8449	; 0x2101
 80027e4:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    hrtc->Instance->CR &= 0x00000007U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f002 0207 	and.w	r2, r2, #7
 80027f4:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027f6:	f7fd ff01 	bl	80005fc <HAL_GetTick>
 80027fa:	60f8      	str	r0, [r7, #12]

    /* Wait till WUTWF flag is set and if Time out is reached exit */
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 80027fc:	e010      	b.n	8002820 <HAL_RTC_DeInit+0x8c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80027fe:	f7fd fefd 	bl	80005fc <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800280c:	d908      	bls.n	8002820 <HAL_RTC_DeInit+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	22ff      	movs	r2, #255	; 0xff
 8002814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2203      	movs	r2, #3
 800281a:	775a      	strb	r2, [r3, #29]

        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e05e      	b.n	80028de <HAL_RTC_DeInit+0x14a>
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0e7      	beq.n	80027fe <HAL_RTC_DeInit+0x6a>
      }
    }

    /* Reset all RTC CR register bits */
    hrtc->Instance->CR &= 0x00000000U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->WUTR = 0x0000FFFFU;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002844:	615a      	str	r2, [r3, #20]
    hrtc->Instance->PRER = 0x007F00FFU;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a27      	ldr	r2, [pc, #156]	; (80028e8 <HAL_RTC_DeInit+0x154>)
 800284c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->CALIBR = 0x00000000U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
    hrtc->Instance->ALRMAR = 0x00000000U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
    hrtc->Instance->ALRMBR = 0x00000000U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	621a      	str	r2, [r3, #32]
    hrtc->Instance->SHIFTR = 0x00000000U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Instance->CALR = 0x00000000U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c
    hrtc->Instance->ALRMASSR = 0x00000000U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
    hrtc->Instance->ALRMBSSR = 0x00000000U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	649a      	str	r2, [r3, #72]	; 0x48

    /* Reset ISR register and exit initialization mode */
    hrtc->Instance->ISR = 0x00000000U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]

    /* Reset Tamper and alternate functions configuration register */
    hrtc->Instance->TAFCR = 0x00000000U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2200      	movs	r2, #0
 8002894:	641a      	str	r2, [r3, #64]	; 0x40

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10e      	bne.n	80028c2 <HAL_RTC_DeInit+0x12e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fb03 	bl	8002eb0 <HAL_RTC_WaitForSynchro>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RTC_DeInit+0x12e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	22ff      	movs	r2, #255	; 0xff
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2204      	movs	r2, #4
 80028bc:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e00d      	b.n	80028de <HAL_RTC_DeInit+0x14a>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	22ff      	movs	r2, #255	; 0xff
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  hrtc->MspDeInitCallback(hrtc);

#else
  /* De-Initialize RTC MSP */
  HAL_RTC_MspDeInit(hrtc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f003 f83e 	bl	800594c <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  hrtc->State = HAL_RTC_STATE_RESET;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	775a      	strb	r2, [r3, #29]

  /* Release Lock */
  __HAL_UNLOCK(hrtc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	007f00ff 	.word	0x007f00ff

080028ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	7f1b      	ldrb	r3, [r3, #28]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_RTC_SetTime+0x1c>
 8002904:	2302      	movs	r3, #2
 8002906:	e0aa      	b.n	8002a5e <HAL_RTC_SetTime+0x172>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2202      	movs	r2, #2
 8002912:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d126      	bne.n	8002968 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fb10 	bl	8002f58 <RTC_ByteToBcd2>
 8002938:	4603      	mov	r3, r0
 800293a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	785b      	ldrb	r3, [r3, #1]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fb09 	bl	8002f58 <RTC_ByteToBcd2>
 8002946:	4603      	mov	r3, r0
 8002948:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800294a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	789b      	ldrb	r3, [r3, #2]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fb01 	bl	8002f58 <RTC_ByteToBcd2>
 8002956:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002958:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	78db      	ldrb	r3, [r3, #3]
 8002960:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e018      	b.n	800299a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2200      	movs	r2, #0
 800297a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002988:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800298e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	78db      	ldrb	r3, [r3, #3]
 8002994:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	22ca      	movs	r2, #202	; 0xca
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2253      	movs	r2, #83	; 0x53
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 faa8 	bl	8002f00 <RTC_EnterInitMode>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	22ff      	movs	r2, #255	; 0xff
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2204      	movs	r2, #4
 80029c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e047      	b.n	8002a5e <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80029d8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80029dc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a14:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d111      	bne.n	8002a48 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fa43 	bl	8002eb0 <HAL_RTC_WaitForSynchro>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00b      	beq.n	8002a48 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	22ff      	movs	r2, #255	; 0xff
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e00a      	b.n	8002a5e <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	22ff      	movs	r2, #255	; 0xff
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}

08002a66 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a66:	b590      	push	{r4, r7, lr}
 8002a68:	b087      	sub	sp, #28
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	7f1b      	ldrb	r3, [r3, #28]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_RTC_SetDate+0x1c>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e094      	b.n	8002bac <HAL_RTC_SetDate+0x146>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10e      	bne.n	8002ab2 <HAL_RTC_SetDate+0x4c>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	785b      	ldrb	r3, [r3, #1]
 8002aa4:	f023 0310 	bic.w	r3, r3, #16
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	330a      	adds	r3, #10
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11c      	bne.n	8002af2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	78db      	ldrb	r3, [r3, #3]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fa4b 	bl	8002f58 <RTC_ByteToBcd2>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fa44 	bl	8002f58 <RTC_ByteToBcd2>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ad4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	789b      	ldrb	r3, [r3, #2]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fa3c 	bl	8002f58 <RTC_ByteToBcd2>
 8002ae0:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002ae2:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e00e      	b.n	8002b10 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	78db      	ldrb	r3, [r3, #3]
 8002af6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002afe:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002b04:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	22ca      	movs	r2, #202	; 0xca
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2253      	movs	r2, #83	; 0x53
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f9ed 	bl	8002f00 <RTC_EnterInitMode>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00b      	beq.n	8002b44 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	22ff      	movs	r2, #255	; 0xff
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2204      	movs	r2, #4
 8002b38:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e033      	b.n	8002bac <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b52:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b62:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d111      	bne.n	8002b96 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f99c 	bl	8002eb0 <HAL_RTC_WaitForSynchro>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	22ff      	movs	r2, #255	; 0xff
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00a      	b.n	8002bac <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	22ff      	movs	r2, #255	; 0xff
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002baa:	2300      	movs	r3, #0
  }
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd90      	pop	{r4, r7, pc}

08002bb4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002bc8:	4b93      	ldr	r3, [pc, #588]	; (8002e18 <HAL_RTC_SetAlarm_IT+0x264>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a93      	ldr	r2, [pc, #588]	; (8002e1c <HAL_RTC_SetAlarm_IT+0x268>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	7f1b      	ldrb	r3, [r3, #28]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_RTC_SetAlarm_IT+0x36>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e111      	b.n	8002e0e <HAL_RTC_SetAlarm_IT+0x25a>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d137      	bne.n	8002c6c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 f99f 	bl	8002f58 <RTC_ByteToBcd2>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f998 	bl	8002f58 <RTC_ByteToBcd2>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c2c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	789b      	ldrb	r3, [r3, #2]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f990 	bl	8002f58 <RTC_ByteToBcd2>
 8002c38:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c3a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	78db      	ldrb	r3, [r3, #3]
 8002c42:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002c44:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f982 	bl	8002f58 <RTC_ByteToBcd2>
 8002c54:	4603      	mov	r3, r0
 8002c56:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c58:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e023      	b.n	8002cb4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	785b      	ldrb	r3, [r3, #1]
 8002c8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c8c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	78db      	ldrb	r3, [r3, #3]
 8002c98:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002c9a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002ca4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002caa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	22ca      	movs	r2, #202	; 0xca
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2253      	movs	r2, #83	; 0x53
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd8:	d141      	bne.n	8002d5e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002cfa:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	1e5a      	subs	r2, r3, #1
 8002d00:	617a      	str	r2, [r7, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10b      	bne.n	8002d1e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	22ff      	movs	r2, #255	; 0xff
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2203      	movs	r2, #3
 8002d12:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e077      	b.n	8002e0e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0e7      	beq.n	8002cfc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	e040      	b.n	8002de0 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d6c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002d7e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	1e5a      	subs	r2, r3, #1
 8002d84:	617a      	str	r2, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	22ff      	movs	r2, #255	; 0xff
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2203      	movs	r2, #3
 8002d96:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e035      	b.n	8002e0e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0e7      	beq.n	8002d80 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dde:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dea:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	22ff      	movs	r2, #255	; 0xff
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3724      	adds	r7, #36	; 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd90      	pop	{r4, r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	10624dd3 	.word	0x10624dd3
 8002e20:	40013c00 	.word	0x40013c00

08002e24 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f002 fc87 	bl	800575c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002e5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d012      	beq.n	8002e94 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f889 	bl	8002f94 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002e92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RTC_AlarmIRQHandler+0x88>)
 8002e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e9a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	775a      	strb	r2, [r3, #29]
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40013c00 	.word	0x40013c00

08002eb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ecc:	f7fd fb96 	bl	80005fc <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002ed2:	e009      	b.n	8002ee8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ed4:	f7fd fb92 	bl	80005fc <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e007      	b.n	8002ef8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0ee      	beq.n	8002ed4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d119      	bne.n	8002f4e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f22:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f24:	f7fd fb6a 	bl	80005fc <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f2a:	e009      	b.n	8002f40 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f2c:	f7fd fb66 	bl	80005fc <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f3a:	d901      	bls.n	8002f40 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e007      	b.n	8002f50 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ee      	beq.n	8002f2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002f66:	e005      	b.n	8002f74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	3b0a      	subs	r3, #10
 8002f72:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b09      	cmp	r3, #9
 8002f78:	d8f6      	bhi.n	8002f68 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	b2db      	uxtb	r3, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e01d      	b.n	8002ff6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f002 fcd4 	bl	800597c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f000 fb8e 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d007      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e01d      	b.n	8003094 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f815 	bl	800309c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f000 fb3f 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	6839      	ldr	r1, [r7, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fdc6 	bl	8003c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a10      	ldr	r2, [pc, #64]	; (8003110 <HAL_TIM_PWM_Start+0x60>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d107      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d007      	beq.n	8003104 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40010000 	.word	0x40010000

08003114 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fd94 	bl	8003c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_TIM_PWM_Stop+0x94>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d117      	bne.n	8003166 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_TIM_PWM_Stop+0x52>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	f240 4344 	movw	r3, #1092	; 0x444
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d107      	bne.n	8003166 <HAL_TIM_PWM_Stop+0x52>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a1a      	ldr	r2, [r3, #32]
 800316c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <HAL_TIM_PWM_Stop+0x82>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	f240 4344 	movw	r3, #1092	; 0x444
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <HAL_TIM_PWM_Stop+0x82>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40010000 	.word	0x40010000

080031ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0202 	mvn.w	r2, #2
 80031d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa6b 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fa5d 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fa6e 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b04      	cmp	r3, #4
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0204 	mvn.w	r2, #4
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa41 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fa33 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fa44 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b08      	cmp	r3, #8
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b08      	cmp	r3, #8
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0208 	mvn.w	r2, #8
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2204      	movs	r2, #4
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa17 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa09 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fa1a 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d122      	bne.n	8003304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d11b      	bne.n	8003304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0210 	mvn.w	r2, #16
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2208      	movs	r2, #8
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f9ed 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f9df 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f9f0 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10e      	bne.n	8003330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0201 	mvn.w	r2, #1
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f002 fa8e 	bl	800584c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b80      	cmp	r3, #128	; 0x80
 800333c:	d10e      	bne.n	800335c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003348:	2b80      	cmp	r3, #128	; 0x80
 800334a:	d107      	bne.n	800335c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fd1a 	bl	8003d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d10e      	bne.n	8003388 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d107      	bne.n	8003388 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f9b5 	bl	80036f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b20      	cmp	r3, #32
 8003394:	d10e      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d107      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0220 	mvn.w	r2, #32
 80033ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fce4 	bl	8003d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e0b4      	b.n	8003540 <HAL_TIM_PWM_ConfigChannel+0x184>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	f200 809f 	bhi.w	800352c <HAL_TIM_PWM_ConfigChannel+0x170>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003429 	.word	0x08003429
 80033f8:	0800352d 	.word	0x0800352d
 80033fc:	0800352d 	.word	0x0800352d
 8003400:	0800352d 	.word	0x0800352d
 8003404:	08003469 	.word	0x08003469
 8003408:	0800352d 	.word	0x0800352d
 800340c:	0800352d 	.word	0x0800352d
 8003410:	0800352d 	.word	0x0800352d
 8003414:	080034ab 	.word	0x080034ab
 8003418:	0800352d 	.word	0x0800352d
 800341c:	0800352d 	.word	0x0800352d
 8003420:	0800352d 	.word	0x0800352d
 8003424:	080034eb 	.word	0x080034eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f9ea 	bl	8003808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0208 	orr.w	r2, r2, #8
 8003442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6999      	ldr	r1, [r3, #24]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	619a      	str	r2, [r3, #24]
      break;
 8003466:	e062      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa30 	bl	80038d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
      break;
 80034a8:	e041      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fa7b 	bl	80039ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0208 	orr.w	r2, r2, #8
 80034c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0204 	bic.w	r2, r2, #4
 80034d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
      break;
 80034e8:	e021      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fac5 	bl	8003a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	61da      	str	r2, [r3, #28]
      break;
 800352a:	e000      	b.n	800352e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800352c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIM_ConfigClockSource+0x18>
 800355c:	2302      	movs	r3, #2
 800355e:	e0a6      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800357e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003586:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d067      	beq.n	8003668 <HAL_TIM_ConfigClockSource+0x120>
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	d80b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x6c>
 800359c:	2b10      	cmp	r3, #16
 800359e:	d073      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0x140>
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d802      	bhi.n	80035aa <HAL_TIM_ConfigClockSource+0x62>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d06f      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035a8:	e078      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d06c      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0x140>
 80035ae:	2b30      	cmp	r3, #48	; 0x30
 80035b0:	d06a      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035b2:	e073      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035b4:	2b70      	cmp	r3, #112	; 0x70
 80035b6:	d00d      	beq.n	80035d4 <HAL_TIM_ConfigClockSource+0x8c>
 80035b8:	2b70      	cmp	r3, #112	; 0x70
 80035ba:	d804      	bhi.n	80035c6 <HAL_TIM_ConfigClockSource+0x7e>
 80035bc:	2b50      	cmp	r3, #80	; 0x50
 80035be:	d033      	beq.n	8003628 <HAL_TIM_ConfigClockSource+0xe0>
 80035c0:	2b60      	cmp	r3, #96	; 0x60
 80035c2:	d041      	beq.n	8003648 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035c4:	e06a      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ca:	d066      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x152>
 80035cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d0:	d017      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035d2:	e063      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6899      	ldr	r1, [r3, #8]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f000 fb16 	bl	8003c14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	609a      	str	r2, [r3, #8]
      break;
 8003600:	e04c      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f000 faff 	bl	8003c14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003624:	609a      	str	r2, [r3, #8]
      break;
 8003626:	e039      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	461a      	mov	r2, r3
 8003636:	f000 fa73 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2150      	movs	r1, #80	; 0x50
 8003640:	4618      	mov	r0, r3
 8003642:	f000 facc 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003646:	e029      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	461a      	mov	r2, r3
 8003656:	f000 fa92 	bl	8003b7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2160      	movs	r1, #96	; 0x60
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fabc 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003666:	e019      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	461a      	mov	r2, r3
 8003676:	f000 fa53 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2140      	movs	r1, #64	; 0x40
 8003680:	4618      	mov	r0, r3
 8003682:	f000 faac 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003686:	e009      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 faa3 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003698:	e000      	b.n	800369c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800369a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a34      	ldr	r2, [pc, #208]	; (80037ec <TIM_Base_SetConfig+0xe4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00f      	beq.n	8003740 <TIM_Base_SetConfig+0x38>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d00b      	beq.n	8003740 <TIM_Base_SetConfig+0x38>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a31      	ldr	r2, [pc, #196]	; (80037f0 <TIM_Base_SetConfig+0xe8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_Base_SetConfig+0x38>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a30      	ldr	r2, [pc, #192]	; (80037f4 <TIM_Base_SetConfig+0xec>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0x38>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a2f      	ldr	r2, [pc, #188]	; (80037f8 <TIM_Base_SetConfig+0xf0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d108      	bne.n	8003752 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a25      	ldr	r2, [pc, #148]	; (80037ec <TIM_Base_SetConfig+0xe4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01b      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d017      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a22      	ldr	r2, [pc, #136]	; (80037f0 <TIM_Base_SetConfig+0xe8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <TIM_Base_SetConfig+0xec>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <TIM_Base_SetConfig+0xf0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <TIM_Base_SetConfig+0xf4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <TIM_Base_SetConfig+0xf8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <TIM_Base_SetConfig+0xfc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a08      	ldr	r2, [pc, #32]	; (80037ec <TIM_Base_SetConfig+0xe4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d103      	bne.n	80037d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	615a      	str	r2, [r3, #20]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40010000 	.word	0x40010000
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40000c00 	.word	0x40000c00
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800

08003808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f023 0201 	bic.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 0302 	bic.w	r3, r3, #2
 8003850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <TIM_OC1_SetConfig+0xc8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d10c      	bne.n	800387e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f023 0308 	bic.w	r3, r3, #8
 800386a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <TIM_OC1_SetConfig+0xc8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d111      	bne.n	80038aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800388c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	621a      	str	r2, [r3, #32]
}
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40010000 	.word	0x40010000

080038d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0210 	bic.w	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f023 0320 	bic.w	r3, r3, #32
 800391e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <TIM_OC2_SetConfig+0xd4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d10d      	bne.n	8003950 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <TIM_OC2_SetConfig+0xd4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d113      	bne.n	8003980 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40010000 	.word	0x40010000

080039ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <TIM_OC3_SetConfig+0xd0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10d      	bne.n	8003a26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <TIM_OC3_SetConfig+0xd0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d113      	bne.n	8003a56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	621a      	str	r2, [r3, #32]
}
 8003a70:	bf00      	nop
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	40010000 	.word	0x40010000

08003a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	031b      	lsls	r3, r3, #12
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <TIM_OC4_SetConfig+0x9c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d109      	bne.n	8003af4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000

08003b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f023 030a 	bic.w	r3, r3, #10
 8003b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0210 	bic.w	r2, r3, #16
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	031b      	lsls	r3, r3, #12
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f043 0307 	orr.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	021a      	lsls	r2, r3, #8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	609a      	str	r2, [r3, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	2201      	movs	r2, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	401a      	ands	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1a      	ldr	r2, [r3, #32]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	621a      	str	r2, [r3, #32]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e050      	b.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d018      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d04:	d013      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00e      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10c      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40014000 	.word	0x40014000

08003d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e03f      	b.n	8003e36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f001 fe32 	bl	8005a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	; 0x24
 8003dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fc2d 	bl	8004648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d153      	bne.n	8003f02 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_UART_Transmit_DMA+0x26>
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e04c      	b.n	8003f04 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Transmit_DMA+0x38>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e045      	b.n	8003f04 <HAL_UART_Transmit_DMA+0xc4>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2221      	movs	r2, #33	; 0x21
 8003e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_UART_Transmit_DMA+0xcc>)
 8003ea6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_UART_Transmit_DMA+0xd0>)
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_UART_Transmit_DMA+0xd4>)
 8003eb6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	f7fc fdac 	bl	8000a34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003efc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
  }
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	08004255 	.word	0x08004255
 8003f10:	080042a7 	.word	0x080042a7
 8003f14:	08004347 	.word	0x08004347

08003f18 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d166      	bne.n	8004000 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_UART_Receive_DMA+0x26>
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e05f      	b.n	8004002 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_UART_Receive_DMA+0x38>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e058      	b.n	8004002 <HAL_UART_Receive_DMA+0xea>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	88fa      	ldrh	r2, [r7, #6]
 8003f62:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2222      	movs	r2, #34	; 0x22
 8003f6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	4a25      	ldr	r2, [pc, #148]	; (800400c <HAL_UART_Receive_DMA+0xf4>)
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	4a24      	ldr	r2, [pc, #144]	; (8004010 <HAL_UART_Receive_DMA+0xf8>)
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f86:	4a23      	ldr	r2, [pc, #140]	; (8004014 <HAL_UART_Receive_DMA+0xfc>)
 8003f88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8e:	2200      	movs	r2, #0
 8003f90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003f92:	f107 0308 	add.w	r3, r7, #8
 8003f96:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	f7fc fd43 	bl	8000a34 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fda:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ffa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	080042c3 	.word	0x080042c3
 8004010:	0800432b 	.word	0x0800432b
 8004014:	08004347 	.word	0x08004347

08004018 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10d      	bne.n	800406a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_UART_IRQHandler+0x52>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa6f 	bl	8004546 <UART_Receive_IT>
      return;
 8004068:	e0d1      	b.n	800420e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80b0 	beq.w	80041d2 <HAL_UART_IRQHandler+0x1ba>
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_UART_IRQHandler+0x70>
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80a5 	beq.w	80041d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_UART_IRQHandler+0x90>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	f043 0201 	orr.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_UART_IRQHandler+0xb0>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c0:	f043 0202 	orr.w	r2, r3, #2
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_UART_IRQHandler+0xd0>
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	f043 0204 	orr.w	r2, r3, #4
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00f      	beq.n	8004112 <HAL_UART_IRQHandler+0xfa>
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <HAL_UART_IRQHandler+0xee>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	f043 0208 	orr.w	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d078      	beq.n	800420c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_UART_IRQHandler+0x11c>
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fa09 	bl	8004546 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <HAL_UART_IRQHandler+0x144>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d031      	beq.n	80041c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f952 	bl	8004406 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d123      	bne.n	80041b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800417e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418c:	4a21      	ldr	r2, [pc, #132]	; (8004214 <HAL_UART_IRQHandler+0x1fc>)
 800418e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	4618      	mov	r0, r3
 8004196:	f7fc fca5 	bl	8000ae4 <HAL_DMA_Abort_IT>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d016      	beq.n	80041ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041aa:	4610      	mov	r0, r2
 80041ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ae:	e00e      	b.n	80041ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f845 	bl	8004240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b6:	e00a      	b.n	80041ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f841 	bl	8004240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041be:	e006      	b.n	80041ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f83d 	bl	8004240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80041cc:	e01e      	b.n	800420c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ce:	bf00      	nop
    return;
 80041d0:	e01c      	b.n	800420c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_UART_IRQHandler+0x1d6>
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f93f 	bl	800446a <UART_Transmit_IT>
    return;
 80041ec:	e00f      	b.n	800420e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_UART_IRQHandler+0x1f6>
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f987 	bl	8004516 <UART_EndTransmit_IT>
    return;
 8004208:	bf00      	nop
 800420a:	e000      	b.n	800420e <HAL_UART_IRQHandler+0x1f6>
    return;
 800420c:	bf00      	nop
  }
}
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	08004443 	.word	0x08004443

08004218 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d113      	bne.n	8004298 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004284:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004294:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004296:	e002      	b.n	800429e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f001 fa17 	bl	80056cc <HAL_UART_TxCpltCallback>
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff ffaf 	bl	8004218 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11e      	bne.n	800431c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004312:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f001 f9df 	bl	80056e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff ff77 	bl	800422c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b21      	cmp	r3, #33	; 0x21
 8004378:	d108      	bne.n	800438c <UART_DMAError+0x46>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2200      	movs	r2, #0
 8004384:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004386:	68b8      	ldr	r0, [r7, #8]
 8004388:	f000 f827 	bl	80043da <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b22      	cmp	r3, #34	; 0x22
 80043ac:	d108      	bne.n	80043c0 <UART_DMAError+0x7a>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2200      	movs	r2, #0
 80043b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80043ba:	68b8      	ldr	r0, [r7, #8]
 80043bc:	f000 f823 	bl	8004406 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	f043 0210 	orr.w	r2, r3, #16
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043cc:	68b8      	ldr	r0, [r7, #8]
 80043ce:	f7ff ff37 	bl	8004240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80043f0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800441c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff feef 	bl	8004240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800446a:	b480      	push	{r7}
 800446c:	b085      	sub	sp, #20
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b21      	cmp	r3, #33	; 0x21
 800447c:	d144      	bne.n	8004508 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	d11a      	bne.n	80044be <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d105      	bne.n	80044b2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	1c9a      	adds	r2, r3, #2
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	621a      	str	r2, [r3, #32]
 80044b0:	e00e      	b.n	80044d0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	621a      	str	r2, [r3, #32]
 80044bc:	e008      	b.n	80044d0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	1c59      	adds	r1, r3, #1
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6211      	str	r1, [r2, #32]
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29b      	uxth	r3, r3
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4619      	mov	r1, r3
 80044de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10f      	bne.n	8004504 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004502:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004508:	2302      	movs	r3, #2
  }
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f001 f8c8 	bl	80056cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b22      	cmp	r3, #34	; 0x22
 8004558:	d171      	bne.n	800463e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004562:	d123      	bne.n	80045ac <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10e      	bne.n	8004590 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	1c9a      	adds	r2, r3, #2
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
 800458e:	e029      	b.n	80045e4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b29b      	uxth	r3, r3
 8004598:	b2db      	uxtb	r3, r3
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
 80045aa:	e01b      	b.n	80045e4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6858      	ldr	r0, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6291      	str	r1, [r2, #40]	; 0x28
 80045c4:	b2c2      	uxtb	r2, r0
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e00c      	b.n	80045e4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	1c58      	adds	r0, r3, #1
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	6288      	str	r0, [r1, #40]	; 0x28
 80045dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4619      	mov	r1, r3
 80045f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d120      	bne.n	800463a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0220 	bic.w	r2, r2, #32
 8004606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004616:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 f855 	bl	80056e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e002      	b.n	8004640 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e000      	b.n	8004640 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
  }
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800468a:	f023 030c 	bic.w	r3, r3, #12
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	430b      	orrs	r3, r1
 8004696:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b6:	f040 818b 	bne.w	80049d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4ac1      	ldr	r2, [pc, #772]	; (80049c4 <UART_SetConfig+0x37c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d005      	beq.n	80046d0 <UART_SetConfig+0x88>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4abf      	ldr	r2, [pc, #764]	; (80049c8 <UART_SetConfig+0x380>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	f040 80bd 	bne.w	800484a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046d0:	f7fd fe98 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 80046d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	461d      	mov	r5, r3
 80046da:	f04f 0600 	mov.w	r6, #0
 80046de:	46a8      	mov	r8, r5
 80046e0:	46b1      	mov	r9, r6
 80046e2:	eb18 0308 	adds.w	r3, r8, r8
 80046e6:	eb49 0409 	adc.w	r4, r9, r9
 80046ea:	4698      	mov	r8, r3
 80046ec:	46a1      	mov	r9, r4
 80046ee:	eb18 0805 	adds.w	r8, r8, r5
 80046f2:	eb49 0906 	adc.w	r9, r9, r6
 80046f6:	f04f 0100 	mov.w	r1, #0
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004702:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004706:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800470a:	4688      	mov	r8, r1
 800470c:	4691      	mov	r9, r2
 800470e:	eb18 0005 	adds.w	r0, r8, r5
 8004712:	eb49 0106 	adc.w	r1, r9, r6
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	461d      	mov	r5, r3
 800471c:	f04f 0600 	mov.w	r6, #0
 8004720:	196b      	adds	r3, r5, r5
 8004722:	eb46 0406 	adc.w	r4, r6, r6
 8004726:	461a      	mov	r2, r3
 8004728:	4623      	mov	r3, r4
 800472a:	f7fb fdb1 	bl	8000290 <__aeabi_uldivmod>
 800472e:	4603      	mov	r3, r0
 8004730:	460c      	mov	r4, r1
 8004732:	461a      	mov	r2, r3
 8004734:	4ba5      	ldr	r3, [pc, #660]	; (80049cc <UART_SetConfig+0x384>)
 8004736:	fba3 2302 	umull	r2, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	461d      	mov	r5, r3
 8004744:	f04f 0600 	mov.w	r6, #0
 8004748:	46a9      	mov	r9, r5
 800474a:	46b2      	mov	sl, r6
 800474c:	eb19 0309 	adds.w	r3, r9, r9
 8004750:	eb4a 040a 	adc.w	r4, sl, sl
 8004754:	4699      	mov	r9, r3
 8004756:	46a2      	mov	sl, r4
 8004758:	eb19 0905 	adds.w	r9, r9, r5
 800475c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800476c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004770:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004774:	4689      	mov	r9, r1
 8004776:	4692      	mov	sl, r2
 8004778:	eb19 0005 	adds.w	r0, r9, r5
 800477c:	eb4a 0106 	adc.w	r1, sl, r6
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	461d      	mov	r5, r3
 8004786:	f04f 0600 	mov.w	r6, #0
 800478a:	196b      	adds	r3, r5, r5
 800478c:	eb46 0406 	adc.w	r4, r6, r6
 8004790:	461a      	mov	r2, r3
 8004792:	4623      	mov	r3, r4
 8004794:	f7fb fd7c 	bl	8000290 <__aeabi_uldivmod>
 8004798:	4603      	mov	r3, r0
 800479a:	460c      	mov	r4, r1
 800479c:	461a      	mov	r2, r3
 800479e:	4b8b      	ldr	r3, [pc, #556]	; (80049cc <UART_SetConfig+0x384>)
 80047a0:	fba3 1302 	umull	r1, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	2164      	movs	r1, #100	; 0x64
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	3332      	adds	r3, #50	; 0x32
 80047b2:	4a86      	ldr	r2, [pc, #536]	; (80049cc <UART_SetConfig+0x384>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047c0:	4498      	add	r8, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	461d      	mov	r5, r3
 80047c6:	f04f 0600 	mov.w	r6, #0
 80047ca:	46a9      	mov	r9, r5
 80047cc:	46b2      	mov	sl, r6
 80047ce:	eb19 0309 	adds.w	r3, r9, r9
 80047d2:	eb4a 040a 	adc.w	r4, sl, sl
 80047d6:	4699      	mov	r9, r3
 80047d8:	46a2      	mov	sl, r4
 80047da:	eb19 0905 	adds.w	r9, r9, r5
 80047de:	eb4a 0a06 	adc.w	sl, sl, r6
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047f6:	4689      	mov	r9, r1
 80047f8:	4692      	mov	sl, r2
 80047fa:	eb19 0005 	adds.w	r0, r9, r5
 80047fe:	eb4a 0106 	adc.w	r1, sl, r6
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	461d      	mov	r5, r3
 8004808:	f04f 0600 	mov.w	r6, #0
 800480c:	196b      	adds	r3, r5, r5
 800480e:	eb46 0406 	adc.w	r4, r6, r6
 8004812:	461a      	mov	r2, r3
 8004814:	4623      	mov	r3, r4
 8004816:	f7fb fd3b 	bl	8000290 <__aeabi_uldivmod>
 800481a:	4603      	mov	r3, r0
 800481c:	460c      	mov	r4, r1
 800481e:	461a      	mov	r2, r3
 8004820:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <UART_SetConfig+0x384>)
 8004822:	fba3 1302 	umull	r1, r3, r3, r2
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	2164      	movs	r1, #100	; 0x64
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	3332      	adds	r3, #50	; 0x32
 8004834:	4a65      	ldr	r2, [pc, #404]	; (80049cc <UART_SetConfig+0x384>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	f003 0207 	and.w	r2, r3, #7
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4442      	add	r2, r8
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	e26f      	b.n	8004d2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800484a:	f7fd fdc7 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 800484e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	461d      	mov	r5, r3
 8004854:	f04f 0600 	mov.w	r6, #0
 8004858:	46a8      	mov	r8, r5
 800485a:	46b1      	mov	r9, r6
 800485c:	eb18 0308 	adds.w	r3, r8, r8
 8004860:	eb49 0409 	adc.w	r4, r9, r9
 8004864:	4698      	mov	r8, r3
 8004866:	46a1      	mov	r9, r4
 8004868:	eb18 0805 	adds.w	r8, r8, r5
 800486c:	eb49 0906 	adc.w	r9, r9, r6
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800487c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004880:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004884:	4688      	mov	r8, r1
 8004886:	4691      	mov	r9, r2
 8004888:	eb18 0005 	adds.w	r0, r8, r5
 800488c:	eb49 0106 	adc.w	r1, r9, r6
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	461d      	mov	r5, r3
 8004896:	f04f 0600 	mov.w	r6, #0
 800489a:	196b      	adds	r3, r5, r5
 800489c:	eb46 0406 	adc.w	r4, r6, r6
 80048a0:	461a      	mov	r2, r3
 80048a2:	4623      	mov	r3, r4
 80048a4:	f7fb fcf4 	bl	8000290 <__aeabi_uldivmod>
 80048a8:	4603      	mov	r3, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b47      	ldr	r3, [pc, #284]	; (80049cc <UART_SetConfig+0x384>)
 80048b0:	fba3 2302 	umull	r2, r3, r3, r2
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	461d      	mov	r5, r3
 80048be:	f04f 0600 	mov.w	r6, #0
 80048c2:	46a9      	mov	r9, r5
 80048c4:	46b2      	mov	sl, r6
 80048c6:	eb19 0309 	adds.w	r3, r9, r9
 80048ca:	eb4a 040a 	adc.w	r4, sl, sl
 80048ce:	4699      	mov	r9, r3
 80048d0:	46a2      	mov	sl, r4
 80048d2:	eb19 0905 	adds.w	r9, r9, r5
 80048d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048ee:	4689      	mov	r9, r1
 80048f0:	4692      	mov	sl, r2
 80048f2:	eb19 0005 	adds.w	r0, r9, r5
 80048f6:	eb4a 0106 	adc.w	r1, sl, r6
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	461d      	mov	r5, r3
 8004900:	f04f 0600 	mov.w	r6, #0
 8004904:	196b      	adds	r3, r5, r5
 8004906:	eb46 0406 	adc.w	r4, r6, r6
 800490a:	461a      	mov	r2, r3
 800490c:	4623      	mov	r3, r4
 800490e:	f7fb fcbf 	bl	8000290 <__aeabi_uldivmod>
 8004912:	4603      	mov	r3, r0
 8004914:	460c      	mov	r4, r1
 8004916:	461a      	mov	r2, r3
 8004918:	4b2c      	ldr	r3, [pc, #176]	; (80049cc <UART_SetConfig+0x384>)
 800491a:	fba3 1302 	umull	r1, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2164      	movs	r1, #100	; 0x64
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	3332      	adds	r3, #50	; 0x32
 800492c:	4a27      	ldr	r2, [pc, #156]	; (80049cc <UART_SetConfig+0x384>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800493a:	4498      	add	r8, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	461d      	mov	r5, r3
 8004940:	f04f 0600 	mov.w	r6, #0
 8004944:	46a9      	mov	r9, r5
 8004946:	46b2      	mov	sl, r6
 8004948:	eb19 0309 	adds.w	r3, r9, r9
 800494c:	eb4a 040a 	adc.w	r4, sl, sl
 8004950:	4699      	mov	r9, r3
 8004952:	46a2      	mov	sl, r4
 8004954:	eb19 0905 	adds.w	r9, r9, r5
 8004958:	eb4a 0a06 	adc.w	sl, sl, r6
 800495c:	f04f 0100 	mov.w	r1, #0
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004968:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800496c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004970:	4689      	mov	r9, r1
 8004972:	4692      	mov	sl, r2
 8004974:	eb19 0005 	adds.w	r0, r9, r5
 8004978:	eb4a 0106 	adc.w	r1, sl, r6
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	461d      	mov	r5, r3
 8004982:	f04f 0600 	mov.w	r6, #0
 8004986:	196b      	adds	r3, r5, r5
 8004988:	eb46 0406 	adc.w	r4, r6, r6
 800498c:	461a      	mov	r2, r3
 800498e:	4623      	mov	r3, r4
 8004990:	f7fb fc7e 	bl	8000290 <__aeabi_uldivmod>
 8004994:	4603      	mov	r3, r0
 8004996:	460c      	mov	r4, r1
 8004998:	461a      	mov	r2, r3
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <UART_SetConfig+0x384>)
 800499c:	fba3 1302 	umull	r1, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	2164      	movs	r1, #100	; 0x64
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	3332      	adds	r3, #50	; 0x32
 80049ae:	4a07      	ldr	r2, [pc, #28]	; (80049cc <UART_SetConfig+0x384>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f003 0207 	and.w	r2, r3, #7
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4442      	add	r2, r8
 80049c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80049c2:	e1b2      	b.n	8004d2a <UART_SetConfig+0x6e2>
 80049c4:	40011000 	.word	0x40011000
 80049c8:	40011400 	.word	0x40011400
 80049cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4ad7      	ldr	r2, [pc, #860]	; (8004d34 <UART_SetConfig+0x6ec>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d005      	beq.n	80049e6 <UART_SetConfig+0x39e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4ad6      	ldr	r2, [pc, #856]	; (8004d38 <UART_SetConfig+0x6f0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	f040 80d1 	bne.w	8004b88 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049e6:	f7fd fd0d 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 80049ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	469a      	mov	sl, r3
 80049f0:	f04f 0b00 	mov.w	fp, #0
 80049f4:	46d0      	mov	r8, sl
 80049f6:	46d9      	mov	r9, fp
 80049f8:	eb18 0308 	adds.w	r3, r8, r8
 80049fc:	eb49 0409 	adc.w	r4, r9, r9
 8004a00:	4698      	mov	r8, r3
 8004a02:	46a1      	mov	r9, r4
 8004a04:	eb18 080a 	adds.w	r8, r8, sl
 8004a08:	eb49 090b 	adc.w	r9, r9, fp
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a20:	4688      	mov	r8, r1
 8004a22:	4691      	mov	r9, r2
 8004a24:	eb1a 0508 	adds.w	r5, sl, r8
 8004a28:	eb4b 0609 	adc.w	r6, fp, r9
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4619      	mov	r1, r3
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	f04f 0400 	mov.w	r4, #0
 8004a3e:	0094      	lsls	r4, r2, #2
 8004a40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a44:	008b      	lsls	r3, r1, #2
 8004a46:	461a      	mov	r2, r3
 8004a48:	4623      	mov	r3, r4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	f7fb fc1f 	bl	8000290 <__aeabi_uldivmod>
 8004a52:	4603      	mov	r3, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	461a      	mov	r2, r3
 8004a58:	4bb8      	ldr	r3, [pc, #736]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	469b      	mov	fp, r3
 8004a68:	f04f 0c00 	mov.w	ip, #0
 8004a6c:	46d9      	mov	r9, fp
 8004a6e:	46e2      	mov	sl, ip
 8004a70:	eb19 0309 	adds.w	r3, r9, r9
 8004a74:	eb4a 040a 	adc.w	r4, sl, sl
 8004a78:	4699      	mov	r9, r3
 8004a7a:	46a2      	mov	sl, r4
 8004a7c:	eb19 090b 	adds.w	r9, r9, fp
 8004a80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a98:	4689      	mov	r9, r1
 8004a9a:	4692      	mov	sl, r2
 8004a9c:	eb1b 0509 	adds.w	r5, fp, r9
 8004aa0:	eb4c 060a 	adc.w	r6, ip, sl
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	f04f 0400 	mov.w	r4, #0
 8004ab6:	0094      	lsls	r4, r2, #2
 8004ab8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004abc:	008b      	lsls	r3, r1, #2
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4623      	mov	r3, r4
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	f7fb fbe3 	bl	8000290 <__aeabi_uldivmod>
 8004aca:	4603      	mov	r3, r0
 8004acc:	460c      	mov	r4, r1
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4b9a      	ldr	r3, [pc, #616]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2164      	movs	r1, #100	; 0x64
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	3332      	adds	r3, #50	; 0x32
 8004ae4:	4a95      	ldr	r2, [pc, #596]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af0:	4498      	add	r8, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	469b      	mov	fp, r3
 8004af6:	f04f 0c00 	mov.w	ip, #0
 8004afa:	46d9      	mov	r9, fp
 8004afc:	46e2      	mov	sl, ip
 8004afe:	eb19 0309 	adds.w	r3, r9, r9
 8004b02:	eb4a 040a 	adc.w	r4, sl, sl
 8004b06:	4699      	mov	r9, r3
 8004b08:	46a2      	mov	sl, r4
 8004b0a:	eb19 090b 	adds.w	r9, r9, fp
 8004b0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b26:	4689      	mov	r9, r1
 8004b28:	4692      	mov	sl, r2
 8004b2a:	eb1b 0509 	adds.w	r5, fp, r9
 8004b2e:	eb4c 060a 	adc.w	r6, ip, sl
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4619      	mov	r1, r3
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	f04f 0400 	mov.w	r4, #0
 8004b44:	0094      	lsls	r4, r2, #2
 8004b46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b4a:	008b      	lsls	r3, r1, #2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4623      	mov	r3, r4
 8004b50:	4628      	mov	r0, r5
 8004b52:	4631      	mov	r1, r6
 8004b54:	f7fb fb9c 	bl	8000290 <__aeabi_uldivmod>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004b60:	fba3 1302 	umull	r1, r3, r3, r2
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	2164      	movs	r1, #100	; 0x64
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	3332      	adds	r3, #50	; 0x32
 8004b72:	4a72      	ldr	r2, [pc, #456]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	f003 020f 	and.w	r2, r3, #15
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4442      	add	r2, r8
 8004b84:	609a      	str	r2, [r3, #8]
 8004b86:	e0d0      	b.n	8004d2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b88:	f7fd fc28 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8004b8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	469a      	mov	sl, r3
 8004b92:	f04f 0b00 	mov.w	fp, #0
 8004b96:	46d0      	mov	r8, sl
 8004b98:	46d9      	mov	r9, fp
 8004b9a:	eb18 0308 	adds.w	r3, r8, r8
 8004b9e:	eb49 0409 	adc.w	r4, r9, r9
 8004ba2:	4698      	mov	r8, r3
 8004ba4:	46a1      	mov	r9, r4
 8004ba6:	eb18 080a 	adds.w	r8, r8, sl
 8004baa:	eb49 090b 	adc.w	r9, r9, fp
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bbe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bc2:	4688      	mov	r8, r1
 8004bc4:	4691      	mov	r9, r2
 8004bc6:	eb1a 0508 	adds.w	r5, sl, r8
 8004bca:	eb4b 0609 	adc.w	r6, fp, r9
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	f04f 0400 	mov.w	r4, #0
 8004be0:	0094      	lsls	r4, r2, #2
 8004be2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004be6:	008b      	lsls	r3, r1, #2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4623      	mov	r3, r4
 8004bec:	4628      	mov	r0, r5
 8004bee:	4631      	mov	r1, r6
 8004bf0:	f7fb fb4e 	bl	8000290 <__aeabi_uldivmod>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4b50      	ldr	r3, [pc, #320]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	469b      	mov	fp, r3
 8004c0a:	f04f 0c00 	mov.w	ip, #0
 8004c0e:	46d9      	mov	r9, fp
 8004c10:	46e2      	mov	sl, ip
 8004c12:	eb19 0309 	adds.w	r3, r9, r9
 8004c16:	eb4a 040a 	adc.w	r4, sl, sl
 8004c1a:	4699      	mov	r9, r3
 8004c1c:	46a2      	mov	sl, r4
 8004c1e:	eb19 090b 	adds.w	r9, r9, fp
 8004c22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c3a:	4689      	mov	r9, r1
 8004c3c:	4692      	mov	sl, r2
 8004c3e:	eb1b 0509 	adds.w	r5, fp, r9
 8004c42:	eb4c 060a 	adc.w	r6, ip, sl
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	f04f 0400 	mov.w	r4, #0
 8004c58:	0094      	lsls	r4, r2, #2
 8004c5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c5e:	008b      	lsls	r3, r1, #2
 8004c60:	461a      	mov	r2, r3
 8004c62:	4623      	mov	r3, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	4631      	mov	r1, r6
 8004c68:	f7fb fb12 	bl	8000290 <__aeabi_uldivmod>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	461a      	mov	r2, r3
 8004c72:	4b32      	ldr	r3, [pc, #200]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004c74:	fba3 1302 	umull	r1, r3, r3, r2
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	2164      	movs	r1, #100	; 0x64
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	3332      	adds	r3, #50	; 0x32
 8004c86:	4a2d      	ldr	r2, [pc, #180]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c92:	4498      	add	r8, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	469b      	mov	fp, r3
 8004c98:	f04f 0c00 	mov.w	ip, #0
 8004c9c:	46d9      	mov	r9, fp
 8004c9e:	46e2      	mov	sl, ip
 8004ca0:	eb19 0309 	adds.w	r3, r9, r9
 8004ca4:	eb4a 040a 	adc.w	r4, sl, sl
 8004ca8:	4699      	mov	r9, r3
 8004caa:	46a2      	mov	sl, r4
 8004cac:	eb19 090b 	adds.w	r9, r9, fp
 8004cb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cc8:	4689      	mov	r9, r1
 8004cca:	4692      	mov	sl, r2
 8004ccc:	eb1b 0509 	adds.w	r5, fp, r9
 8004cd0:	eb4c 060a 	adc.w	r6, ip, sl
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	f04f 0400 	mov.w	r4, #0
 8004ce6:	0094      	lsls	r4, r2, #2
 8004ce8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cec:	008b      	lsls	r3, r1, #2
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	f7fb facb 	bl	8000290 <__aeabi_uldivmod>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004d02:	fba3 1302 	umull	r1, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2164      	movs	r1, #100	; 0x64
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	3332      	adds	r3, #50	; 0x32
 8004d14:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <UART_SetConfig+0x6f4>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	f003 020f 	and.w	r2, r3, #15
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4442      	add	r2, r8
 8004d26:	609a      	str	r2, [r3, #8]
}
 8004d28:	e7ff      	b.n	8004d2a <UART_SetConfig+0x6e2>
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d34:	40011000 	.word	0x40011000
 8004d38:	40011400 	.word	0x40011400
 8004d3c:	51eb851f 	.word	0x51eb851f

08004d40 <bufferInit>:
#include "Buffer.h"
#include "main.h"


void bufferInit(s_Buff *buffer)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e007      	b.n	8004d5e <bufferInit+0x1e>
		buffer->_p_rx_buffer[i] = 0;
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b18      	cmp	r3, #24
 8004d62:	ddf4      	ble.n	8004d4e <bufferInit+0xe>
	}
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <ping_callBack>:




void ping_callBack(char* token)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	uart_print(token);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fd3d 	bl	80057f8 <uart_print>
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <version_callback>:

void version_callback(char* token)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	uart_print(VERSION);
 8004d90:	4803      	ldr	r0, [pc, #12]	; (8004da0 <version_callback+0x18>)
 8004d92:	f000 fd31 	bl	80057f8 <uart_print>
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	0800694c 	.word	0x0800694c

08004da4 <pwm_start_callback>:

void pwm_start_callback(char* token)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004dac:	2100      	movs	r1, #0
 8004dae:	4805      	ldr	r0, [pc, #20]	; (8004dc4 <pwm_start_callback+0x20>)
 8004db0:	f7fe f97e 	bl	80030b0 <HAL_TIM_PWM_Start>
	uart_print(OK);
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <pwm_start_callback+0x24>)
 8004db6:	f000 fd1f 	bl	80057f8 <uart_print>
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200002d8 	.word	0x200002d8
 8004dc8:	08006954 	.word	0x08006954

08004dcc <pwm_stop_callback>:

void pwm_stop_callback(char* token)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4805      	ldr	r0, [pc, #20]	; (8004dec <pwm_stop_callback+0x20>)
 8004dd8:	f7fe f99c 	bl	8003114 <HAL_TIM_PWM_Stop>
	uart_print(OK);
 8004ddc:	4804      	ldr	r0, [pc, #16]	; (8004df0 <pwm_stop_callback+0x24>)
 8004dde:	f000 fd0b 	bl	80057f8 <uart_print>
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	200002d8 	.word	0x200002d8
 8004df0:	08006954 	.word	0x08006954

08004df4 <pwm_dc_callback>:

void pwm_dc_callback(char* token)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8004dfc:	4911      	ldr	r1, [pc, #68]	; (8004e44 <pwm_dc_callback+0x50>)
 8004dfe:	2000      	movs	r0, #0
 8004e00:	f001 f866 	bl	8005ed0 <strtok>
 8004e04:	6078      	str	r0, [r7, #4]
	if(strlen(token) <= 0)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d015      	beq.n	8004e3a <pwm_dc_callback+0x46>
	{
		return;
	}
	int32_t dc = atoi(token);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 ffe9 	bl	8005de6 <atoi>
 8004e14:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b64      	cmp	r3, #100	; 0x64
 8004e1a:	dd01      	ble.n	8004e20 <pwm_dc_callback+0x2c>
 8004e1c:	2364      	movs	r3, #100	; 0x64
 8004e1e:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da01      	bge.n	8004e2a <pwm_dc_callback+0x36>
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <pwm_dc_callback+0x54>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	635a      	str	r2, [r3, #52]	; 0x34
	uart_print(OK);
 8004e32:	4806      	ldr	r0, [pc, #24]	; (8004e4c <pwm_dc_callback+0x58>)
 8004e34:	f000 fce0 	bl	80057f8 <uart_print>
 8004e38:	e000      	b.n	8004e3c <pwm_dc_callback+0x48>
		return;
 8004e3a:	bf00      	nop
}
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	08006958 	.word	0x08006958
 8004e48:	200002d8 	.word	0x200002d8
 8004e4c:	08006954 	.word	0x08006954

08004e50 <crc_whole_flash_calc_callback>:

void crc_whole_flash_calc_callback(char* token)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
		crcFlashResult = HAL_CRC_Accumulate(&hcrc, flashDataBuffer, sector_0_Size);
		offsetAddr += 0x4000;
	}*/

	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 8004e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e5c:	617b      	str	r3, [r7, #20]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 8004e5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e62:	613b      	str	r3, [r7, #16]
	//FeedDog(1);
	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	6939      	ldr	r1, [r7, #16]
 8004e68:	4807      	ldr	r0, [pc, #28]	; (8004e88 <crc_whole_flash_calc_callback+0x38>)
 8004e6a:	f7fb fd01 	bl	8000870 <HAL_CRC_Calculate>
 8004e6e:	60f8      	str	r0, [r7, #12]
	//FeedDog(1);
	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)crcFlashResult);
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4906      	ldr	r1, [pc, #24]	; (8004e8c <crc_whole_flash_calc_callback+0x3c>)
 8004e74:	4806      	ldr	r0, [pc, #24]	; (8004e90 <crc_whole_flash_calc_callback+0x40>)
 8004e76:	f000 fff9 	bl	8005e6c <siprintf>
	uart_print((char*)s_buffer._p_tx_buffer);
 8004e7a:	4805      	ldr	r0, [pc, #20]	; (8004e90 <crc_whole_flash_calc_callback+0x40>)
 8004e7c:	f000 fcbc 	bl	80057f8 <uart_print>
}
 8004e80:	bf00      	nop
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200002d0 	.word	0x200002d0
 8004e8c:	0800695c 	.word	0x0800695c
 8004e90:	200002ab 	.word	0x200002ab

08004e94 <iwdg_test_callback>:

void iwdg_test_callback(char* token)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	uart_print(OK);
 8004e9c:	4801      	ldr	r0, [pc, #4]	; (8004ea4 <iwdg_test_callback+0x10>)
 8004e9e:	f000 fcab 	bl	80057f8 <uart_print>
	while(1);
 8004ea2:	e7fe      	b.n	8004ea2 <iwdg_test_callback+0xe>
 8004ea4:	08006954 	.word	0x08006954

08004ea8 <flash_lock_callback>:
}

void flash_lock_callback(char* token)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	 *It does not prevent one part of code to read another part, or even rewrite.
	 *PCROP allows you to use debugger to debug your code,
	 *but protects reading and rewriting the "secret" part.*/

	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 8004eb0:	f107 030c 	add.w	r3, r7, #12
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fc fb11 	bl	80014dc <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0) {
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2baa      	cmp	r3, #170	; 0xaa
 8004ebe:	d133      	bne.n	8004f28 <flash_lock_callback+0x80>
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 8004ec0:	2355      	movs	r3, #85	; 0x55
 8004ec2:	61fb      	str	r3, [r7, #28]
		obConfig.OptionType = OPTIONBYTE_RDP;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	60fb      	str	r3, [r7, #12]

		if (HAL_FLASH_Unlock() != HAL_OK)
 8004ec8:	f7fc f8ea 	bl	80010a0 <HAL_FLASH_Unlock>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <flash_lock_callback+0x2e>
		{
			Error_Handler();
 8004ed2:	f000 fccd 	bl	8005870 <Error_Handler>
		}
		/* Clear All pending flags */ //if wwdg and kickDog are enabled - uncomment __HAL_FLASH_CLEAR_FLAG
		//__HAL_FLASH_CLEAR_FLAG (FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 8004ed6:	f7fc f915 	bl	8001104 <HAL_FLASH_OB_Unlock>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <flash_lock_callback+0x3c>
		{
			Error_Handler();
 8004ee0:	f000 fcc6 	bl	8005870 <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 8004ee4:	f107 030c 	add.w	r3, r7, #12
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fc fa89 	bl	8001400 <HAL_FLASHEx_OBProgram>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <flash_lock_callback+0x50>
		{
			Error_Handler();
 8004ef4:	f000 fcbc 	bl	8005870 <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 8004ef8:	f7fc f930 	bl	800115c <HAL_FLASH_OB_Launch>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <flash_lock_callback+0x5e>
		{
			Error_Handler();
 8004f02:	f000 fcb5 	bl	8005870 <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 8004f06:	f7fc f919 	bl	800113c <HAL_FLASH_OB_Lock>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <flash_lock_callback+0x6c>
		{
			Error_Handler();
 8004f10:	f000 fcae 	bl	8005870 <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 8004f14:	f7fc f8e6 	bl	80010e4 <HAL_FLASH_Lock>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <flash_lock_callback+0x7a>
		{
			Error_Handler();
 8004f1e:	f000 fca7 	bl	8005870 <Error_Handler>
		}
		uart_print(OK);
 8004f22:	4803      	ldr	r0, [pc, #12]	; (8004f30 <flash_lock_callback+0x88>)
 8004f24:	f000 fc68 	bl	80057f8 <uart_print>
		MY_FLASH_SetSectorAddrs(7, sector_7_addr);
		uint32_t myTestWrite[1] = {0xDEADBEEF}; 		//0xFFFFFFFF, 0xDEADBEEF
		MY_FLASH_WriteN(131072-4, myTestWrite2, 1, DATA_TYPE_32);
		*/
	}
}
 8004f28:	bf00      	nop
 8004f2a:	3728      	adds	r7, #40	; 0x28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	08006954 	.word	0x08006954

08004f34 <set_SN_callback>:

void set_SN_callback(char* token)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	/*if (WRP_sector_disable() != HAL_OK)
	{
		Error_Handler();
	}*/
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <set_SN_callback+0x30>)
 8004f3e:	60fb      	str	r3, [r7, #12]
	MY_FLASH_SetSectorAddrs(7, sector_7_addr);
 8004f40:	68f9      	ldr	r1, [r7, #12]
 8004f42:	2007      	movs	r0, #7
 8004f44:	f000 f86e 	bl	8005024 <MY_FLASH_SetSectorAddrs>
	uint32_t myTestWrite[1] = {0xDEADBEEF}; //0xFFFFFFFF, 0xDEADBEEF
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <set_SN_callback+0x34>)
 8004f4a:	60bb      	str	r3, [r7, #8]
	MY_FLASH_WriteN(0, myTestWrite, 1, DATA_TYPE_32);
 8004f4c:	f107 0108 	add.w	r1, r7, #8
 8004f50:	2302      	movs	r3, #2
 8004f52:	2201      	movs	r2, #1
 8004f54:	2000      	movs	r0, #0
 8004f56:	f000 f87b 	bl	8005050 <MY_FLASH_WriteN>

	/*if (WRP_sector_enable() != HAL_OK)
	{
		Error_Handler();
	}*/
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	08060000 	.word	0x08060000
 8004f68:	deadbeef 	.word	0xdeadbeef

08004f6c <get_SN_callback>:

void get_SN_callback(char* token)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <get_SN_callback+0x3c>)
 8004f76:	60fb      	str	r3, [r7, #12]
	MY_FLASH_SetSectorAddrs(7, sector_7_addr);
 8004f78:	68f9      	ldr	r1, [r7, #12]
 8004f7a:	2007      	movs	r0, #7
 8004f7c:	f000 f852 	bl	8005024 <MY_FLASH_SetSectorAddrs>
	uint32_t myTestRead[1];
	MY_FLASH_ReadN(0, myTestRead, 1, DATA_TYPE_32);
 8004f80:	f107 0108 	add.w	r1, r7, #8
 8004f84:	2302      	movs	r3, #2
 8004f86:	2201      	movs	r2, #1
 8004f88:	2000      	movs	r0, #0
 8004f8a:	f000 f8d3 	bl	8005134 <MY_FLASH_ReadN>
	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)myTestRead[0]);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	461a      	mov	r2, r3
 8004f92:	4906      	ldr	r1, [pc, #24]	; (8004fac <get_SN_callback+0x40>)
 8004f94:	4806      	ldr	r0, [pc, #24]	; (8004fb0 <get_SN_callback+0x44>)
 8004f96:	f000 ff69 	bl	8005e6c <siprintf>
	uart_print((char*)s_buffer._p_tx_buffer);
 8004f9a:	4805      	ldr	r0, [pc, #20]	; (8004fb0 <get_SN_callback+0x44>)
 8004f9c:	f000 fc2c 	bl	80057f8 <uart_print>
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	08060000 	.word	0x08060000
 8004fac:	0800695c 	.word	0x0800695c
 8004fb0:	200002ab 	.word	0x200002ab

08004fb4 <start_tick_callback>:

void start_tick_callback(char* token)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	MX_RTC_Init();
 8004fbc:	f000 f9ee 	bl	800539c <MX_RTC_Init>
	uart_print(OK);
 8004fc0:	4803      	ldr	r0, [pc, #12]	; (8004fd0 <start_tick_callback+0x1c>)
 8004fc2:	f000 fc19 	bl	80057f8 <uart_print>
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	08006954 	.word	0x08006954

08004fd4 <stop_tick_callback>:

void stop_tick_callback(char* token)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	if (HAL_RTC_DeInit(&hrtc) != HAL_OK)
 8004fdc:	4807      	ldr	r0, [pc, #28]	; (8004ffc <stop_tick_callback+0x28>)
 8004fde:	f7fd fbd9 	bl	8002794 <HAL_RTC_DeInit>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <stop_tick_callback+0x18>
	{
		Error_Handler();
 8004fe8:	f000 fc42 	bl	8005870 <Error_Handler>
	}
	uart_print(OK);
 8004fec:	4804      	ldr	r0, [pc, #16]	; (8005000 <stop_tick_callback+0x2c>)
 8004fee:	f000 fc03 	bl	80057f8 <uart_print>
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000378 	.word	0x20000378
 8005000:	08006954 	.word	0x08006954

08005004 <MY_FLASH_EraseSector>:
static uint8_t MY_SectorNum;

//functions definitions
//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8005008:	f7fc f84a 	bl	80010a0 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <MY_FLASH_EraseSector+0x1c>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2102      	movs	r1, #2
 8005012:	4618      	mov	r0, r3
 8005014:	f7fc fa86 	bl	8001524 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8005018:	f7fc f864 	bl	80010e4 <HAL_FLASH_Lock>
}
 800501c:	bf00      	nop
 800501e:	bd80      	pop	{r7, pc}
 8005020:	200001fc 	.word	0x200001fc

08005024 <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	6039      	str	r1, [r7, #0]
 800502e:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8005030:	4a05      	ldr	r2, [pc, #20]	; (8005048 <MY_FLASH_SetSectorAddrs+0x24>)
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8005036:	4a05      	ldr	r2, [pc, #20]	; (800504c <MY_FLASH_SetSectorAddrs+0x28>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	6013      	str	r3, [r2, #0]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	200001fc 	.word	0x200001fc
 800504c:	200001f8 	.word	0x200001f8

08005050 <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b089      	sub	sp, #36	; 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800505e:	4b34      	ldr	r3, [pc, #208]	; (8005130 <MY_FLASH_WriteN+0xe0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	MY_FLASH_EraseSector();
 8005068:	f7ff ffcc 	bl	8005004 <MY_FLASH_EraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 800506c:	f7fc f818 	bl	80010a0 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d01e      	beq.n	80050b4 <MY_FLASH_WriteN+0x64>
 8005076:	2b02      	cmp	r3, #2
 8005078:	d038      	beq.n	80050ec <MY_FLASH_WriteN+0x9c>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d151      	bne.n	8005122 <MY_FLASH_WriteN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e012      	b.n	80050aa <MY_FLASH_WriteN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	4413      	add	r3, r2
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f04f 0400 	mov.w	r4, #0
 8005092:	461a      	mov	r2, r3
 8005094:	4623      	mov	r3, r4
 8005096:	69f9      	ldr	r1, [r7, #28]
 8005098:	2000      	movs	r0, #0
 800509a:	f7fb ffad 	bl	8000ff8 <HAL_FLASH_Program>
					flashAddress++;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3301      	adds	r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	3301      	adds	r3, #1
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d3e8      	bcc.n	8005084 <MY_FLASH_WriteN+0x34>
				}
			break;
 80050b2:	e036      	b.n	8005122 <MY_FLASH_WriteN+0xd2>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e013      	b.n	80050e2 <MY_FLASH_WriteN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f04f 0400 	mov.w	r4, #0
 80050ca:	461a      	mov	r2, r3
 80050cc:	4623      	mov	r3, r4
 80050ce:	69f9      	ldr	r1, [r7, #28]
 80050d0:	2001      	movs	r0, #1
 80050d2:	f7fb ff91 	bl	8000ff8 <HAL_FLASH_Program>
					flashAddress+=2;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3302      	adds	r3, #2
 80050da:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3301      	adds	r3, #1
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d3e7      	bcc.n	80050ba <MY_FLASH_WriteN+0x6a>
				}
			break;
 80050ea:	e01a      	b.n	8005122 <MY_FLASH_WriteN+0xd2>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 80050ec:	2300      	movs	r3, #0
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e012      	b.n	8005118 <MY_FLASH_WriteN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f04f 0400 	mov.w	r4, #0
 8005100:	461a      	mov	r2, r3
 8005102:	4623      	mov	r3, r4
 8005104:	69f9      	ldr	r1, [r7, #28]
 8005106:	2002      	movs	r0, #2
 8005108:	f7fb ff76 	bl	8000ff8 <HAL_FLASH_Program>
					flashAddress+=4;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	3304      	adds	r3, #4
 8005110:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3301      	adds	r3, #1
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d3e8      	bcc.n	80050f2 <MY_FLASH_WriteN+0xa2>
				}
			break;
 8005120:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8005122:	f7fb ffdf 	bl	80010e4 <HAL_FLASH_Lock>
}
 8005126:	bf00      	nop
 8005128:	3724      	adds	r7, #36	; 0x24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd90      	pop	{r4, r7, pc}
 800512e:	bf00      	nop
 8005130:	200001f8 	.word	0x200001f8

08005134 <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8005134:	b480      	push	{r7}
 8005136:	b089      	sub	sp, #36	; 0x24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8005142:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <MY_FLASH_ReadN+0xb0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d018      	beq.n	8005184 <MY_FLASH_ReadN+0x50>
 8005152:	2b02      	cmp	r3, #2
 8005154:	d02b      	beq.n	80051ae <MY_FLASH_ReadN+0x7a>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d000      	beq.n	800515c <MY_FLASH_ReadN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 800515a:	e03d      	b.n	80051d8 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800515c:	2300      	movs	r3, #0
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	e00b      	b.n	800517a <MY_FLASH_ReadN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	440b      	add	r3, r1
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	3301      	adds	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	3301      	adds	r3, #1
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	429a      	cmp	r2, r3
 8005180:	d3ef      	bcc.n	8005162 <MY_FLASH_ReadN+0x2e>
			break;
 8005182:	e029      	b.n	80051d8 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	e00c      	b.n	80051a4 <MY_FLASH_ReadN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	440b      	add	r3, r1
 8005194:	8812      	ldrh	r2, [r2, #0]
 8005196:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	3302      	adds	r3, #2
 800519c:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	3301      	adds	r3, #1
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d3ee      	bcc.n	800518a <MY_FLASH_ReadN+0x56>
			break;
 80051ac:	e014      	b.n	80051d8 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	e00c      	b.n	80051ce <MY_FLASH_ReadN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	440b      	add	r3, r1
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	3304      	adds	r3, #4
 80051c6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	3301      	adds	r3, #1
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d3ee      	bcc.n	80051b4 <MY_FLASH_ReadN+0x80>
			break;
 80051d6:	bf00      	nop
}
 80051d8:	bf00      	nop
 80051da:	3724      	adds	r7, #36	; 0x24
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	200001f8 	.word	0x200001f8

080051e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80051ec:	f7fb f9d0 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80051f0:	f000 f820 	bl	8005234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80051f4:	f000 fa28 	bl	8005648 <MX_GPIO_Init>
  MX_DMA_Init();
 80051f8:	f000 f9fe 	bl	80055f8 <MX_DMA_Init>
  MX_CRC_Init();
 80051fc:	f000 f8a0 	bl	8005340 <MX_CRC_Init>
  MX_RTC_Init();
 8005200:	f000 f8cc 	bl	800539c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8005204:	f000 f9ce 	bl	80055a4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8005208:	f000 f956 	bl	80054b8 <MX_TIM3_Init>
  MX_IWDG_Init();
 800520c:	f000 f8ac 	bl	8005368 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 8005210:	2201      	movs	r2, #1
 8005212:	4905      	ldr	r1, [pc, #20]	; (8005228 <main+0x40>)
 8005214:	4805      	ldr	r0, [pc, #20]	; (800522c <main+0x44>)
 8005216:	f7fe fe7f 	bl	8003f18 <HAL_UART_Receive_DMA>
  	MY_FLASH_ReadN(0, myTestRead, 1, DATA_TYPE_32);
  	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)myTestRead[0]);
  	uart_print((char*)s_buffer._p_tx_buffer);
  	*/

  uart_print(HELLO_WORLD);
 800521a:	4805      	ldr	r0, [pc, #20]	; (8005230 <main+0x48>)
 800521c:	f000 faec 	bl	80057f8 <uart_print>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

#ifdef IWDG_ENABLE
	  kickDog();
 8005220:	f000 fb0a 	bl	8005838 <kickDog>
 8005224:	e7fc      	b.n	8005220 <main+0x38>
 8005226:	bf00      	nop
 8005228:	200002aa 	.word	0x200002aa
 800522c:	20000398 	.word	0x20000398
 8005230:	080069ec 	.word	0x080069ec

08005234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b09a      	sub	sp, #104	; 0x68
 8005238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800523a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800523e:	2230      	movs	r2, #48	; 0x30
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fe09 	bl	8005e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005258:	f107 030c 	add.w	r3, r7, #12
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
 8005268:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	4b32      	ldr	r3, [pc, #200]	; (8005338 <SystemClock_Config+0x104>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	4a31      	ldr	r2, [pc, #196]	; (8005338 <SystemClock_Config+0x104>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	6413      	str	r3, [r2, #64]	; 0x40
 800527a:	4b2f      	ldr	r3, [pc, #188]	; (8005338 <SystemClock_Config+0x104>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005286:	2300      	movs	r3, #0
 8005288:	607b      	str	r3, [r7, #4]
 800528a:	4b2c      	ldr	r3, [pc, #176]	; (800533c <SystemClock_Config+0x108>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2b      	ldr	r2, [pc, #172]	; (800533c <SystemClock_Config+0x108>)
 8005290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <SystemClock_Config+0x108>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80052a2:	230e      	movs	r3, #14
 80052a4:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80052a6:	2301      	movs	r3, #1
 80052a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80052aa:	2301      	movs	r3, #1
 80052ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80052ae:	2310      	movs	r3, #16
 80052b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80052b2:	2301      	movs	r3, #1
 80052b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80052b6:	2302      	movs	r3, #2
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80052ba:	2300      	movs	r3, #0
 80052bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 80052be:	2310      	movs	r3, #16
 80052c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 80052c2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80052c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80052c8:	2304      	movs	r3, #4
 80052ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80052cc:	2304      	movs	r3, #4
 80052ce:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fc fc47 	bl	8001b68 <HAL_RCC_OscConfig>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80052e0:	f000 fac6 	bl	8005870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052e4:	230f      	movs	r3, #15
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80052e8:	2302      	movs	r3, #2
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80052ec:	2300      	movs	r3, #0
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80052f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80052f6:	2300      	movs	r3, #0
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80052fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052fe:	2102      	movs	r1, #2
 8005300:	4618      	mov	r0, r3
 8005302:	f7fc fea1 	bl	8002048 <HAL_RCC_ClockConfig>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800530c:	f000 fab0 	bl	8005870 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005310:	2302      	movs	r3, #2
 8005312:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005318:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800531a:	f107 030c 	add.w	r3, r7, #12
 800531e:	4618      	mov	r0, r3
 8005320:	f7fd f8b6 	bl	8002490 <HAL_RCCEx_PeriphCLKConfig>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800532a:	f000 faa1 	bl	8005870 <Error_Handler>
  }
}
 800532e:	bf00      	nop
 8005330:	3768      	adds	r7, #104	; 0x68
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800
 800533c:	40007000 	.word	0x40007000

08005340 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <MX_CRC_Init+0x20>)
 8005346:	4a07      	ldr	r2, [pc, #28]	; (8005364 <MX_CRC_Init+0x24>)
 8005348:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800534a:	4805      	ldr	r0, [pc, #20]	; (8005360 <MX_CRC_Init+0x20>)
 800534c:	f7fb fa74 	bl	8000838 <HAL_CRC_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005356:	f000 fa8b 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	200002d0 	.word	0x200002d0
 8005364:	40023000 	.word	0x40023000

08005368 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800536c:	4b09      	ldr	r3, [pc, #36]	; (8005394 <MX_IWDG_Init+0x2c>)
 800536e:	4a0a      	ldr	r2, [pc, #40]	; (8005398 <MX_IWDG_Init+0x30>)
 8005370:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8005372:	4b08      	ldr	r3, [pc, #32]	; (8005394 <MX_IWDG_Init+0x2c>)
 8005374:	2206      	movs	r2, #6
 8005376:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 625;
 8005378:	4b06      	ldr	r3, [pc, #24]	; (8005394 <MX_IWDG_Init+0x2c>)
 800537a:	f240 2271 	movw	r2, #625	; 0x271
 800537e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005380:	4804      	ldr	r0, [pc, #16]	; (8005394 <MX_IWDG_Init+0x2c>)
 8005382:	f7fc fba8 	bl	8001ad6 <HAL_IWDG_Init>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800538c:	f000 fa70 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8005390:	bf00      	nop
 8005392:	bd80      	pop	{r7, pc}
 8005394:	200002c4 	.word	0x200002c4
 8005398:	40003000 	.word	0x40003000

0800539c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b090      	sub	sp, #64	; 0x40
 80053a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80053a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	605a      	str	r2, [r3, #4]
 80053ac:	609a      	str	r2, [r3, #8]
 80053ae:	60da      	str	r2, [r3, #12]
 80053b0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80053b2:	2300      	movs	r3, #0
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80053b6:	463b      	mov	r3, r7
 80053b8:	2228      	movs	r2, #40	; 0x28
 80053ba:	2100      	movs	r1, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fd4c 	bl	8005e5a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80053c2:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <MX_RTC_Init+0x114>)
 80053c4:	4a3b      	ldr	r2, [pc, #236]	; (80054b4 <MX_RTC_Init+0x118>)
 80053c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80053c8:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <MX_RTC_Init+0x114>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80053ce:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <MX_RTC_Init+0x114>)
 80053d0:	227f      	movs	r2, #127	; 0x7f
 80053d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80053d4:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <MX_RTC_Init+0x114>)
 80053d6:	22ff      	movs	r2, #255	; 0xff
 80053d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80053da:	4b35      	ldr	r3, [pc, #212]	; (80054b0 <MX_RTC_Init+0x114>)
 80053dc:	2200      	movs	r2, #0
 80053de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80053e0:	4b33      	ldr	r3, [pc, #204]	; (80054b0 <MX_RTC_Init+0x114>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80053e6:	4b32      	ldr	r3, [pc, #200]	; (80054b0 <MX_RTC_Init+0x114>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80053ec:	4830      	ldr	r0, [pc, #192]	; (80054b0 <MX_RTC_Init+0x114>)
 80053ee:	f7fd f93f 	bl	8002670 <HAL_RTC_Init>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80053f8:	f000 fa3a 	bl	8005870 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800540e:	2300      	movs	r3, #0
 8005410:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005412:	2300      	movs	r3, #0
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800541a:	2200      	movs	r2, #0
 800541c:	4619      	mov	r1, r3
 800541e:	4824      	ldr	r0, [pc, #144]	; (80054b0 <MX_RTC_Init+0x114>)
 8005420:	f7fd fa64 	bl	80028ec <HAL_RTC_SetTime>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800542a:	f000 fa21 	bl	8005870 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8005434:	2301      	movs	r3, #1
 8005436:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800544a:	2200      	movs	r2, #0
 800544c:	4619      	mov	r1, r3
 800544e:	4818      	ldr	r0, [pc, #96]	; (80054b0 <MX_RTC_Init+0x114>)
 8005450:	f7fd fb09 	bl	8002a66 <HAL_RTC_SetDate>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800545a:	f000 fa09 	bl	8005870 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8005476:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800547a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800547c:	2300      	movs	r3, #0
 800547e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005480:	2300      	movs	r3, #0
 8005482:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800548a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8005490:	463b      	mov	r3, r7
 8005492:	2200      	movs	r2, #0
 8005494:	4619      	mov	r1, r3
 8005496:	4806      	ldr	r0, [pc, #24]	; (80054b0 <MX_RTC_Init+0x114>)
 8005498:	f7fd fb8c 	bl	8002bb4 <HAL_RTC_SetAlarm_IT>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80054a2:	f000 f9e5 	bl	8005870 <Error_Handler>
		0x1FFU) != HAL_OK) {
    		Error_Handler();
      	}*/
  /* USER CODE END RTC_Init 2 */

}
 80054a6:	bf00      	nop
 80054a8:	3740      	adds	r7, #64	; 0x40
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000378 	.word	0x20000378
 80054b4:	40002800 	.word	0x40002800

080054b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08e      	sub	sp, #56	; 0x38
 80054bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	605a      	str	r2, [r3, #4]
 80054c8:	609a      	str	r2, [r3, #8]
 80054ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054cc:	f107 0320 	add.w	r3, r7, #32
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	609a      	str	r2, [r3, #8]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	611a      	str	r2, [r3, #16]
 80054e4:	615a      	str	r2, [r3, #20]
 80054e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80054e8:	4b2c      	ldr	r3, [pc, #176]	; (800559c <MX_TIM3_Init+0xe4>)
 80054ea:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <MX_TIM3_Init+0xe8>)
 80054ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80054ee:	4b2b      	ldr	r3, [pc, #172]	; (800559c <MX_TIM3_Init+0xe4>)
 80054f0:	2253      	movs	r2, #83	; 0x53
 80054f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054f4:	4b29      	ldr	r3, [pc, #164]	; (800559c <MX_TIM3_Init+0xe4>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80054fa:	4b28      	ldr	r3, [pc, #160]	; (800559c <MX_TIM3_Init+0xe4>)
 80054fc:	2263      	movs	r2, #99	; 0x63
 80054fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005500:	4b26      	ldr	r3, [pc, #152]	; (800559c <MX_TIM3_Init+0xe4>)
 8005502:	2200      	movs	r2, #0
 8005504:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005506:	4b25      	ldr	r3, [pc, #148]	; (800559c <MX_TIM3_Init+0xe4>)
 8005508:	2200      	movs	r2, #0
 800550a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800550c:	4823      	ldr	r0, [pc, #140]	; (800559c <MX_TIM3_Init+0xe4>)
 800550e:	f7fd fd4b 	bl	8002fa8 <HAL_TIM_Base_Init>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8005518:	f000 f9aa 	bl	8005870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800551c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005526:	4619      	mov	r1, r3
 8005528:	481c      	ldr	r0, [pc, #112]	; (800559c <MX_TIM3_Init+0xe4>)
 800552a:	f7fe f80d 	bl	8003548 <HAL_TIM_ConfigClockSource>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8005534:	f000 f99c 	bl	8005870 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005538:	4818      	ldr	r0, [pc, #96]	; (800559c <MX_TIM3_Init+0xe4>)
 800553a:	f7fd fd84 	bl	8003046 <HAL_TIM_PWM_Init>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8005544:	f000 f994 	bl	8005870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005548:	2300      	movs	r3, #0
 800554a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800554c:	2300      	movs	r3, #0
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005550:	f107 0320 	add.w	r3, r7, #32
 8005554:	4619      	mov	r1, r3
 8005556:	4811      	ldr	r0, [pc, #68]	; (800559c <MX_TIM3_Init+0xe4>)
 8005558:	f7fe fba2 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8005562:	f000 f985 	bl	8005870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005566:	2360      	movs	r3, #96	; 0x60
 8005568:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	2200      	movs	r2, #0
 800557a:	4619      	mov	r1, r3
 800557c:	4807      	ldr	r0, [pc, #28]	; (800559c <MX_TIM3_Init+0xe4>)
 800557e:	f7fd ff1d 	bl	80033bc <HAL_TIM_PWM_ConfigChannel>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8005588:	f000 f972 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800558c:	4803      	ldr	r0, [pc, #12]	; (800559c <MX_TIM3_Init+0xe4>)
 800558e:	f000 fa17 	bl	80059c0 <HAL_TIM_MspPostInit>

}
 8005592:	bf00      	nop
 8005594:	3738      	adds	r7, #56	; 0x38
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	200002d8 	.word	0x200002d8
 80055a0:	40000400 	.word	0x40000400

080055a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055aa:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <MX_USART2_UART_Init+0x50>)
 80055ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055be:	2200      	movs	r2, #0
 80055c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80055c8:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055ca:	220c      	movs	r2, #12
 80055cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055ce:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80055da:	4805      	ldr	r0, [pc, #20]	; (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055dc:	f7fe fbe2 	bl	8003da4 <HAL_UART_Init>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80055e6:	f000 f943 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80055ea:	bf00      	nop
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000398 	.word	0x20000398
 80055f4:	40004400 	.word	0x40004400

080055f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <MX_DMA_Init+0x4c>)
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	4a0f      	ldr	r2, [pc, #60]	; (8005644 <MX_DMA_Init+0x4c>)
 8005608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800560c:	6313      	str	r3, [r2, #48]	; 0x30
 800560e:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <MX_DMA_Init+0x4c>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005616:	607b      	str	r3, [r7, #4]
 8005618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800561a:	2200      	movs	r2, #0
 800561c:	2100      	movs	r1, #0
 800561e:	2010      	movs	r0, #16
 8005620:	f7fb f8d2 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005624:	2010      	movs	r0, #16
 8005626:	f7fb f8eb 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800562a:	2200      	movs	r2, #0
 800562c:	2100      	movs	r1, #0
 800562e:	2011      	movs	r0, #17
 8005630:	f7fb f8ca 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005634:	2011      	movs	r0, #17
 8005636:	f7fb f8e3 	bl	8000800 <HAL_NVIC_EnableIRQ>

}
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40023800 	.word	0x40023800

08005648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800564e:	f107 030c 	add.w	r3, r7, #12
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	605a      	str	r2, [r3, #4]
 8005658:	609a      	str	r2, [r3, #8]
 800565a:	60da      	str	r2, [r3, #12]
 800565c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <MX_GPIO_Init+0x7c>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <MX_GPIO_Init+0x7c>)
 8005668:	f043 0304 	orr.w	r3, r3, #4
 800566c:	6313      	str	r3, [r2, #48]	; 0x30
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <MX_GPIO_Init+0x7c>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <MX_GPIO_Init+0x7c>)
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <MX_GPIO_Init+0x7c>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	6313      	str	r3, [r2, #48]	; 0x30
 800568a:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <MX_GPIO_Init+0x7c>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8005696:	2200      	movs	r2, #0
 8005698:	2120      	movs	r1, #32
 800569a:	480b      	ldr	r0, [pc, #44]	; (80056c8 <MX_GPIO_Init+0x80>)
 800569c:	f7fc fa02 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80056a0:	2320      	movs	r3, #32
 80056a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056a4:	2301      	movs	r3, #1
 80056a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b0:	f107 030c 	add.w	r3, r7, #12
 80056b4:	4619      	mov	r1, r3
 80056b6:	4804      	ldr	r0, [pc, #16]	; (80056c8 <MX_GPIO_Init+0x80>)
 80056b8:	f7fc f872 	bl	80017a0 <HAL_GPIO_Init>

}
 80056bc:	bf00      	nop
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40020000 	.word	0x40020000

080056cc <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	if (s_buffer._rx_single_char != '\n')
 80056e8:	4b19      	ldr	r3, [pc, #100]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 80056ea:	7e9b      	ldrb	r3, [r3, #26]
 80056ec:	2b0a      	cmp	r3, #10
 80056ee:	d011      	beq.n	8005714 <HAL_UART_RxCpltCallback+0x34>
	{
		if(s_buffer._rx_index < BUFFER_SIZE)
 80056f0:	4b17      	ldr	r3, [pc, #92]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 80056f2:	7e5b      	ldrb	r3, [r3, #25]
 80056f4:	2b18      	cmp	r3, #24
 80056f6:	d822      	bhi.n	800573e <HAL_UART_RxCpltCallback+0x5e>
		{
			s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 80056fa:	7e5b      	ldrb	r3, [r3, #25]
 80056fc:	461a      	mov	r2, r3
 80056fe:	4b14      	ldr	r3, [pc, #80]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 8005700:	7e99      	ldrb	r1, [r3, #26]
 8005702:	4b13      	ldr	r3, [pc, #76]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 8005704:	5499      	strb	r1, [r3, r2]
			s_buffer._rx_index++;
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 8005708:	7e5b      	ldrb	r3, [r3, #25]
 800570a:	3301      	adds	r3, #1
 800570c:	b2da      	uxtb	r2, r3
 800570e:	4b10      	ldr	r3, [pc, #64]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 8005710:	765a      	strb	r2, [r3, #25]
 8005712:	e014      	b.n	800573e <HAL_UART_RxCpltCallback+0x5e>
		}
	}
	else
	{
		s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 8005714:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 8005716:	7e5b      	ldrb	r3, [r3, #25]
 8005718:	461a      	mov	r2, r3
 800571a:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 800571c:	7e99      	ldrb	r1, [r3, #26]
 800571e:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 8005720:	5499      	strb	r1, [r3, r2]
		s_buffer._rx_index++;
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 8005724:	7e5b      	ldrb	r3, [r3, #25]
 8005726:	3301      	adds	r3, #1
 8005728:	b2da      	uxtb	r2, r3
 800572a:	4b09      	ldr	r3, [pc, #36]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 800572c:	765a      	strb	r2, [r3, #25]
		whichCommand();
 800572e:	f000 f823 	bl	8005778 <whichCommand>
		bufferInit(&s_buffer);
 8005732:	4807      	ldr	r0, [pc, #28]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 8005734:	f7ff fb04 	bl	8004d40 <bufferInit>
		s_buffer._rx_index = 0;
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_UART_RxCpltCallback+0x70>)
 800573a:	2200      	movs	r2, #0
 800573c:	765a      	strb	r2, [r3, #25]
	}

#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 800573e:	2201      	movs	r2, #1
 8005740:	4904      	ldr	r1, [pc, #16]	; (8005754 <HAL_UART_RxCpltCallback+0x74>)
 8005742:	4805      	ldr	r0, [pc, #20]	; (8005758 <HAL_UART_RxCpltCallback+0x78>)
 8005744:	f7fe fbe8 	bl	8003f18 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
#endif

	//HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
	//HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
}
 8005748:	bf00      	nop
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20000290 	.word	0x20000290
 8005754:	200002aa 	.word	0x200002aa
 8005758:	20000398 	.word	0x20000398

0800575c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  uart_print(TICK);
 8005764:	4803      	ldr	r0, [pc, #12]	; (8005774 <HAL_RTC_AlarmAEventCallback+0x18>)
 8005766:	f000 f847 	bl	80057f8 <uart_print>
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	080069fc 	.word	0x080069fc

08005778 <whichCommand>:

void whichCommand (void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
	char* token = strtok((char*)s_buffer._p_rx_buffer, " ");
 800577e:	491b      	ldr	r1, [pc, #108]	; (80057ec <whichCommand+0x74>)
 8005780:	481b      	ldr	r0, [pc, #108]	; (80057f0 <whichCommand+0x78>)
 8005782:	f000 fba5 	bl	8005ed0 <strtok>
 8005786:	6038      	str	r0, [r7, #0]

	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8005788:	2300      	movs	r3, #0
 800578a:	71fb      	strb	r3, [r7, #7]
 800578c:	e027      	b.n	80057de <whichCommand+0x66>
	{
		if (strncmp(token, commands[i]._name, commands[i]._size)==0)
 800578e:	79fa      	ldrb	r2, [r7, #7]
 8005790:	4918      	ldr	r1, [pc, #96]	; (80057f4 <whichCommand+0x7c>)
 8005792:	4613      	mov	r3, r2
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	79fa      	ldrb	r2, [r7, #7]
 80057a0:	4914      	ldr	r1, [pc, #80]	; (80057f4 <whichCommand+0x7c>)
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	3304      	adds	r3, #4
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	4601      	mov	r1, r0
 80057b4:	6838      	ldr	r0, [r7, #0]
 80057b6:	f000 fb79 	bl	8005eac <strncmp>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <whichCommand+0x60>
		{
			commands[i].func_ptr(token);
 80057c0:	79fa      	ldrb	r2, [r7, #7]
 80057c2:	490c      	ldr	r1, [pc, #48]	; (80057f4 <whichCommand+0x7c>)
 80057c4:	4613      	mov	r3, r2
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	3308      	adds	r3, #8
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6838      	ldr	r0, [r7, #0]
 80057d4:	4798      	blx	r3
			return;
 80057d6:	e005      	b.n	80057e4 <whichCommand+0x6c>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	3301      	adds	r3, #1
 80057dc:	71fb      	strb	r3, [r7, #7]
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2b0b      	cmp	r3, #11
 80057e2:	d9d4      	bls.n	800578e <whichCommand+0x16>
		}
	}
}
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	08006a04 	.word	0x08006a04
 80057f0:	20000290 	.word	0x20000290
 80057f4:	08006a40 	.word	0x08006a40

080057f8 <uart_print>:
	}
	return status;
}

void uart_print(char* token)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
	//HAL_Delay(250);
	memcpy((char*)s_buffer._p_tx_buffer, token, strlen(token));
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7fa fced 	bl	80001e0 <strlen>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4808      	ldr	r0, [pc, #32]	; (8005830 <uart_print+0x38>)
 800580e:	f000 fb19 	bl	8005e44 <memcpy>
#ifdef UART_TX_DMA
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(token));
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fa fce4 	bl	80001e0 <strlen>
 8005818:	4603      	mov	r3, r0
 800581a:	b29b      	uxth	r3, r3
 800581c:	461a      	mov	r2, r3
 800581e:	4904      	ldr	r1, [pc, #16]	; (8005830 <uart_print+0x38>)
 8005820:	4804      	ldr	r0, [pc, #16]	; (8005834 <uart_print+0x3c>)
 8005822:	f7fe fb0d 	bl	8003e40 <HAL_UART_Transmit_DMA>
#else
	HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(token), 10);
#endif
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	200002ab 	.word	0x200002ab
 8005834:	20000398 	.word	0x20000398

08005838 <kickDog>:

#ifdef IWDG_ENABLE
void kickDog(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800583c:	4802      	ldr	r0, [pc, #8]	; (8005848 <kickDog+0x10>)
 800583e:	f7fc f983 	bl	8001b48 <HAL_IWDG_Refresh>
}
 8005842:	bf00      	nop
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	200002c4 	.word	0x200002c4

0800584c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a04      	ldr	r2, [pc, #16]	; (800586c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d101      	bne.n	8005862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800585e:	f7fa feb9 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40010000 	.word	0x40010000

08005870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uart_print("Error");
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <Error_Handler+0xc>)
 8005876:	f7ff ffbf 	bl	80057f8 <uart_print>
	while(1);
 800587a:	e7fe      	b.n	800587a <Error_Handler+0xa>
 800587c:	08006a30 	.word	0x08006a30

08005880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <HAL_MspInit+0x4c>)
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	4a0f      	ldr	r2, [pc, #60]	; (80058cc <HAL_MspInit+0x4c>)
 8005890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005894:	6453      	str	r3, [r2, #68]	; 0x44
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <HAL_MspInit+0x4c>)
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058a2:	2300      	movs	r3, #0
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4b09      	ldr	r3, [pc, #36]	; (80058cc <HAL_MspInit+0x4c>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	4a08      	ldr	r2, [pc, #32]	; (80058cc <HAL_MspInit+0x4c>)
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b0:	6413      	str	r3, [r2, #64]	; 0x40
 80058b2:	4b06      	ldr	r3, [pc, #24]	; (80058cc <HAL_MspInit+0x4c>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80058be:	2007      	movs	r0, #7
 80058c0:	f7fa ff77 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40023800 	.word	0x40023800

080058d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a0b      	ldr	r2, [pc, #44]	; (800590c <HAL_CRC_MspInit+0x3c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d10d      	bne.n	80058fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <HAL_CRC_MspInit+0x40>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	4a09      	ldr	r2, [pc, #36]	; (8005910 <HAL_CRC_MspInit+0x40>)
 80058ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058f0:	6313      	str	r3, [r2, #48]	; 0x30
 80058f2:	4b07      	ldr	r3, [pc, #28]	; (8005910 <HAL_CRC_MspInit+0x40>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40023000 	.word	0x40023000
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a08      	ldr	r2, [pc, #32]	; (8005944 <HAL_RTC_MspInit+0x30>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d10a      	bne.n	800593c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005926:	4b08      	ldr	r3, [pc, #32]	; (8005948 <HAL_RTC_MspInit+0x34>)
 8005928:	2201      	movs	r2, #1
 800592a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800592c:	2200      	movs	r2, #0
 800592e:	2100      	movs	r1, #0
 8005930:	2029      	movs	r0, #41	; 0x29
 8005932:	f7fa ff49 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005936:	2029      	movs	r0, #41	; 0x29
 8005938:	f7fa ff62 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40002800 	.word	0x40002800
 8005948:	42470e3c 	.word	0x42470e3c

0800594c <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a06      	ldr	r2, [pc, #24]	; (8005974 <HAL_RTC_MspDeInit+0x28>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d105      	bne.n	800596a <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800595e:	4b06      	ldr	r3, [pc, #24]	; (8005978 <HAL_RTC_MspDeInit+0x2c>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8005964:	2029      	movs	r0, #41	; 0x29
 8005966:	f7fa ff59 	bl	800081c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	40002800 	.word	0x40002800
 8005978:	42470e3c 	.word	0x42470e3c

0800597c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0b      	ldr	r2, [pc, #44]	; (80059b8 <HAL_TIM_Base_MspInit+0x3c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d10d      	bne.n	80059aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_TIM_Base_MspInit+0x40>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	4a09      	ldr	r2, [pc, #36]	; (80059bc <HAL_TIM_Base_MspInit+0x40>)
 8005998:	f043 0302 	orr.w	r3, r3, #2
 800599c:	6413      	str	r3, [r2, #64]	; 0x40
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <HAL_TIM_Base_MspInit+0x40>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40023800 	.word	0x40023800

080059c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c8:	f107 030c 	add.w	r3, r7, #12
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a12      	ldr	r2, [pc, #72]	; (8005a28 <HAL_TIM_MspPostInit+0x68>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d11d      	bne.n	8005a1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <HAL_TIM_MspPostInit+0x6c>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	4a10      	ldr	r2, [pc, #64]	; (8005a2c <HAL_TIM_MspPostInit+0x6c>)
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	6313      	str	r3, [r2, #48]	; 0x30
 80059f2:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <HAL_TIM_MspPostInit+0x6c>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a02:	2302      	movs	r3, #2
 8005a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a12:	f107 030c 	add.w	r3, r7, #12
 8005a16:	4619      	mov	r1, r3
 8005a18:	4805      	ldr	r0, [pc, #20]	; (8005a30 <HAL_TIM_MspPostInit+0x70>)
 8005a1a:	f7fb fec1 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005a1e:	bf00      	nop
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	40020000 	.word	0x40020000

08005a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	609a      	str	r2, [r3, #8]
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a4b      	ldr	r2, [pc, #300]	; (8005b80 <HAL_UART_MspInit+0x14c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	f040 8090 	bne.w	8005b78 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a58:	2300      	movs	r3, #0
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	4b49      	ldr	r3, [pc, #292]	; (8005b84 <HAL_UART_MspInit+0x150>)
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	4a48      	ldr	r2, [pc, #288]	; (8005b84 <HAL_UART_MspInit+0x150>)
 8005a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a66:	6413      	str	r3, [r2, #64]	; 0x40
 8005a68:	4b46      	ldr	r3, [pc, #280]	; (8005b84 <HAL_UART_MspInit+0x150>)
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	4b42      	ldr	r3, [pc, #264]	; (8005b84 <HAL_UART_MspInit+0x150>)
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	4a41      	ldr	r2, [pc, #260]	; (8005b84 <HAL_UART_MspInit+0x150>)
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	6313      	str	r3, [r2, #48]	; 0x30
 8005a84:	4b3f      	ldr	r3, [pc, #252]	; (8005b84 <HAL_UART_MspInit+0x150>)
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005a90:	230c      	movs	r3, #12
 8005a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a94:	2302      	movs	r3, #2
 8005a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005aa0:	2307      	movs	r3, #7
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aa4:	f107 0314 	add.w	r3, r7, #20
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4837      	ldr	r0, [pc, #220]	; (8005b88 <HAL_UART_MspInit+0x154>)
 8005aac:	f7fb fe78 	bl	80017a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005ab0:	4b36      	ldr	r3, [pc, #216]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005ab2:	4a37      	ldr	r2, [pc, #220]	; (8005b90 <HAL_UART_MspInit+0x15c>)
 8005ab4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005ab6:	4b35      	ldr	r3, [pc, #212]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005ab8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005abc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005abe:	4b33      	ldr	r3, [pc, #204]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ac4:	4b31      	ldr	r3, [pc, #196]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005aca:	4b30      	ldr	r3, [pc, #192]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ad0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ad2:	4b2e      	ldr	r3, [pc, #184]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ad8:	4b2c      	ldr	r3, [pc, #176]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005ade:	4b2b      	ldr	r3, [pc, #172]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ae4:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005aea:	4b28      	ldr	r3, [pc, #160]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005af0:	4826      	ldr	r0, [pc, #152]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005af2:	f7fa fef1 	bl	80008d8 <HAL_DMA_Init>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005afc:	f7ff feb8 	bl	8005870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a22      	ldr	r2, [pc, #136]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005b04:	635a      	str	r2, [r3, #52]	; 0x34
 8005b06:	4a21      	ldr	r2, [pc, #132]	; (8005b8c <HAL_UART_MspInit+0x158>)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005b0c:	4b21      	ldr	r3, [pc, #132]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b0e:	4a22      	ldr	r2, [pc, #136]	; (8005b98 <HAL_UART_MspInit+0x164>)
 8005b10:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005b12:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b18:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b1a:	4b1e      	ldr	r3, [pc, #120]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b1c:	2240      	movs	r2, #64	; 0x40
 8005b1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b20:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b26:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b2e:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b34:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005b3a:	4b16      	ldr	r3, [pc, #88]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b40:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005b4c:	4811      	ldr	r0, [pc, #68]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b4e:	f7fa fec3 	bl	80008d8 <HAL_DMA_Init>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005b58:	f7ff fe8a 	bl	8005870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a0d      	ldr	r2, [pc, #52]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
 8005b62:	4a0c      	ldr	r2, [pc, #48]	; (8005b94 <HAL_UART_MspInit+0x160>)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	2026      	movs	r0, #38	; 0x26
 8005b6e:	f7fa fe2b 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b72:	2026      	movs	r0, #38	; 0x26
 8005b74:	f7fa fe44 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005b78:	bf00      	nop
 8005b7a:	3728      	adds	r7, #40	; 0x28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40004400 	.word	0x40004400
 8005b84:	40023800 	.word	0x40023800
 8005b88:	40020000 	.word	0x40020000
 8005b8c:	20000230 	.word	0x20000230
 8005b90:	40026088 	.word	0x40026088
 8005b94:	20000318 	.word	0x20000318
 8005b98:	400260a0 	.word	0x400260a0

08005b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08c      	sub	sp, #48	; 0x30
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005bac:	2200      	movs	r2, #0
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	2019      	movs	r0, #25
 8005bb2:	f7fa fe09 	bl	80007c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005bb6:	2019      	movs	r0, #25
 8005bb8:	f7fa fe22 	bl	8000800 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	4b1e      	ldr	r3, [pc, #120]	; (8005c3c <HAL_InitTick+0xa0>)
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc4:	4a1d      	ldr	r2, [pc, #116]	; (8005c3c <HAL_InitTick+0xa0>)
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	6453      	str	r3, [r2, #68]	; 0x44
 8005bcc:	4b1b      	ldr	r3, [pc, #108]	; (8005c3c <HAL_InitTick+0xa0>)
 8005bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005bd8:	f107 0210 	add.w	r2, r7, #16
 8005bdc:	f107 0314 	add.w	r3, r7, #20
 8005be0:	4611      	mov	r1, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fc fc22 	bl	800242c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fc fc0c 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8005bec:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <HAL_InitTick+0xa4>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	0c9b      	lsrs	r3, r3, #18
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005bfc:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <HAL_InitTick+0xa8>)
 8005bfe:	4a12      	ldr	r2, [pc, #72]	; (8005c48 <HAL_InitTick+0xac>)
 8005c00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005c02:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <HAL_InitTick+0xa8>)
 8005c04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005c0a:	4a0e      	ldr	r2, [pc, #56]	; (8005c44 <HAL_InitTick+0xa8>)
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <HAL_InitTick+0xa8>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_InitTick+0xa8>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005c1c:	4809      	ldr	r0, [pc, #36]	; (8005c44 <HAL_InitTick+0xa8>)
 8005c1e:	f7fd f9c3 	bl	8002fa8 <HAL_TIM_Base_Init>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005c28:	4806      	ldr	r0, [pc, #24]	; (8005c44 <HAL_InitTick+0xa8>)
 8005c2a:	f7fd f9e8 	bl	8002ffe <HAL_TIM_Base_Start_IT>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	e000      	b.n	8005c34 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3730      	adds	r7, #48	; 0x30
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	431bde83 	.word	0x431bde83
 8005c44:	200003d8 	.word	0x200003d8
 8005c48:	40010000 	.word	0x40010000

08005c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c5e:	e7fe      	b.n	8005c5e <HardFault_Handler+0x4>

08005c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c64:	e7fe      	b.n	8005c64 <MemManage_Handler+0x4>

08005c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c66:	b480      	push	{r7}
 8005c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c6a:	e7fe      	b.n	8005c6a <BusFault_Handler+0x4>

08005c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c70:	e7fe      	b.n	8005c70 <UsageFault_Handler+0x4>

08005c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c72:	b480      	push	{r7}
 8005c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c76:	bf00      	nop
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c92:	bf00      	nop
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005cb0:	4802      	ldr	r0, [pc, #8]	; (8005cbc <DMA1_Stream5_IRQHandler+0x10>)
 8005cb2:	f7fa ff39 	bl	8000b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005cb6:	bf00      	nop
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000230 	.word	0x20000230

08005cc0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005cc4:	4802      	ldr	r0, [pc, #8]	; (8005cd0 <DMA1_Stream6_IRQHandler+0x10>)
 8005cc6:	f7fa ff2f 	bl	8000b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005cca:	bf00      	nop
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000318 	.word	0x20000318

08005cd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005cd8:	4802      	ldr	r0, [pc, #8]	; (8005ce4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005cda:	f7fd fa67 	bl	80031ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005cde:	bf00      	nop
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200003d8 	.word	0x200003d8

08005ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005cec:	4802      	ldr	r0, [pc, #8]	; (8005cf8 <USART2_IRQHandler+0x10>)
 8005cee:	f7fe f993 	bl	8004018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005cf2:	bf00      	nop
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000398 	.word	0x20000398

08005cfc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005d00:	4802      	ldr	r0, [pc, #8]	; (8005d0c <RTC_Alarm_IRQHandler+0x10>)
 8005d02:	f7fd f88f 	bl	8002e24 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005d06:	bf00      	nop
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000378 	.word	0x20000378

08005d10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005d18:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <_sbrk+0x50>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <_sbrk+0x16>
		heap_end = &end;
 8005d20:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <_sbrk+0x50>)
 8005d22:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <_sbrk+0x54>)
 8005d24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005d26:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <_sbrk+0x50>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <_sbrk+0x50>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4413      	add	r3, r2
 8005d34:	466a      	mov	r2, sp
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d907      	bls.n	8005d4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005d3a:	f000 f859 	bl	8005df0 <__errno>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	230c      	movs	r3, #12
 8005d42:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005d44:	f04f 33ff 	mov.w	r3, #4294967295
 8005d48:	e006      	b.n	8005d58 <_sbrk+0x48>
	}

	heap_end += incr;
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <_sbrk+0x50>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	4a03      	ldr	r2, [pc, #12]	; (8005d60 <_sbrk+0x50>)
 8005d54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20000200 	.word	0x20000200
 8005d64:	20000420 	.word	0x20000420

08005d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d6c:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <SystemInit+0x28>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	4a07      	ldr	r2, [pc, #28]	; (8005d90 <SystemInit+0x28>)
 8005d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <SystemInit+0x28>)
 8005d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d82:	609a      	str	r2, [r3, #8]
#endif
}
 8005d84:	bf00      	nop
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005dcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d9a:	e003      	b.n	8005da4 <LoopCopyDataInit>

08005d9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005d9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005da0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005da2:	3104      	adds	r1, #4

08005da4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005da4:	480b      	ldr	r0, [pc, #44]	; (8005dd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005da8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005daa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005dac:	d3f6      	bcc.n	8005d9c <CopyDataInit>
  ldr  r2, =_sbss
 8005dae:	4a0b      	ldr	r2, [pc, #44]	; (8005ddc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005db0:	e002      	b.n	8005db8 <LoopFillZerobss>

08005db2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005db2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005db4:	f842 3b04 	str.w	r3, [r2], #4

08005db8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005db8:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005dba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005dbc:	d3f9      	bcc.n	8005db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005dbe:	f7ff ffd3 	bl	8005d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dc2:	f000 f81b 	bl	8005dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dc6:	f7ff fa0f 	bl	80051e8 <main>
  bx  lr    
 8005dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005dcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005dd0:	08006c38 	.word	0x08006c38
  ldr  r0, =_sdata
 8005dd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005dd8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005ddc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8005de0:	2000041c 	.word	0x2000041c

08005de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005de4:	e7fe      	b.n	8005de4 <ADC_IRQHandler>

08005de6 <atoi>:
 8005de6:	220a      	movs	r2, #10
 8005de8:	2100      	movs	r1, #0
 8005dea:	f000 b941 	b.w	8006070 <strtol>
	...

08005df0 <__errno>:
 8005df0:	4b01      	ldr	r3, [pc, #4]	; (8005df8 <__errno+0x8>)
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	2000000c 	.word	0x2000000c

08005dfc <__libc_init_array>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	4e0d      	ldr	r6, [pc, #52]	; (8005e34 <__libc_init_array+0x38>)
 8005e00:	4c0d      	ldr	r4, [pc, #52]	; (8005e38 <__libc_init_array+0x3c>)
 8005e02:	1ba4      	subs	r4, r4, r6
 8005e04:	10a4      	asrs	r4, r4, #2
 8005e06:	2500      	movs	r5, #0
 8005e08:	42a5      	cmp	r5, r4
 8005e0a:	d109      	bne.n	8005e20 <__libc_init_array+0x24>
 8005e0c:	4e0b      	ldr	r6, [pc, #44]	; (8005e3c <__libc_init_array+0x40>)
 8005e0e:	4c0c      	ldr	r4, [pc, #48]	; (8005e40 <__libc_init_array+0x44>)
 8005e10:	f000 fd4a 	bl	80068a8 <_init>
 8005e14:	1ba4      	subs	r4, r4, r6
 8005e16:	10a4      	asrs	r4, r4, #2
 8005e18:	2500      	movs	r5, #0
 8005e1a:	42a5      	cmp	r5, r4
 8005e1c:	d105      	bne.n	8005e2a <__libc_init_array+0x2e>
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e24:	4798      	blx	r3
 8005e26:	3501      	adds	r5, #1
 8005e28:	e7ee      	b.n	8005e08 <__libc_init_array+0xc>
 8005e2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e2e:	4798      	blx	r3
 8005e30:	3501      	adds	r5, #1
 8005e32:	e7f2      	b.n	8005e1a <__libc_init_array+0x1e>
 8005e34:	08006c30 	.word	0x08006c30
 8005e38:	08006c30 	.word	0x08006c30
 8005e3c:	08006c30 	.word	0x08006c30
 8005e40:	08006c34 	.word	0x08006c34

08005e44 <memcpy>:
 8005e44:	b510      	push	{r4, lr}
 8005e46:	1e43      	subs	r3, r0, #1
 8005e48:	440a      	add	r2, r1
 8005e4a:	4291      	cmp	r1, r2
 8005e4c:	d100      	bne.n	8005e50 <memcpy+0xc>
 8005e4e:	bd10      	pop	{r4, pc}
 8005e50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e58:	e7f7      	b.n	8005e4a <memcpy+0x6>

08005e5a <memset>:
 8005e5a:	4402      	add	r2, r0
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d100      	bne.n	8005e64 <memset+0xa>
 8005e62:	4770      	bx	lr
 8005e64:	f803 1b01 	strb.w	r1, [r3], #1
 8005e68:	e7f9      	b.n	8005e5e <memset+0x4>
	...

08005e6c <siprintf>:
 8005e6c:	b40e      	push	{r1, r2, r3}
 8005e6e:	b500      	push	{lr}
 8005e70:	b09c      	sub	sp, #112	; 0x70
 8005e72:	ab1d      	add	r3, sp, #116	; 0x74
 8005e74:	9002      	str	r0, [sp, #8]
 8005e76:	9006      	str	r0, [sp, #24]
 8005e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e7c:	4809      	ldr	r0, [pc, #36]	; (8005ea4 <siprintf+0x38>)
 8005e7e:	9107      	str	r1, [sp, #28]
 8005e80:	9104      	str	r1, [sp, #16]
 8005e82:	4909      	ldr	r1, [pc, #36]	; (8005ea8 <siprintf+0x3c>)
 8005e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e88:	9105      	str	r1, [sp, #20]
 8005e8a:	6800      	ldr	r0, [r0, #0]
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	a902      	add	r1, sp, #8
 8005e90:	f000 fa24 	bl	80062dc <_svfiprintf_r>
 8005e94:	9b02      	ldr	r3, [sp, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	b01c      	add	sp, #112	; 0x70
 8005e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ea0:	b003      	add	sp, #12
 8005ea2:	4770      	bx	lr
 8005ea4:	2000000c 	.word	0x2000000c
 8005ea8:	ffff0208 	.word	0xffff0208

08005eac <strncmp>:
 8005eac:	b510      	push	{r4, lr}
 8005eae:	b16a      	cbz	r2, 8005ecc <strncmp+0x20>
 8005eb0:	3901      	subs	r1, #1
 8005eb2:	1884      	adds	r4, r0, r2
 8005eb4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005eb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d103      	bne.n	8005ec8 <strncmp+0x1c>
 8005ec0:	42a0      	cmp	r0, r4
 8005ec2:	d001      	beq.n	8005ec8 <strncmp+0x1c>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f5      	bne.n	8005eb4 <strncmp+0x8>
 8005ec8:	1a98      	subs	r0, r3, r2
 8005eca:	bd10      	pop	{r4, pc}
 8005ecc:	4610      	mov	r0, r2
 8005ece:	e7fc      	b.n	8005eca <strncmp+0x1e>

08005ed0 <strtok>:
 8005ed0:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <strtok+0x50>)
 8005ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed6:	681d      	ldr	r5, [r3, #0]
 8005ed8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005eda:	4606      	mov	r6, r0
 8005edc:	460f      	mov	r7, r1
 8005ede:	b9b4      	cbnz	r4, 8005f0e <strtok+0x3e>
 8005ee0:	2050      	movs	r0, #80	; 0x50
 8005ee2:	f000 f8df 	bl	80060a4 <malloc>
 8005ee6:	65a8      	str	r0, [r5, #88]	; 0x58
 8005ee8:	e9c0 4400 	strd	r4, r4, [r0]
 8005eec:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005ef0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005ef4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005ef8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005efc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005f00:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005f04:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005f08:	6184      	str	r4, [r0, #24]
 8005f0a:	7704      	strb	r4, [r0, #28]
 8005f0c:	6244      	str	r4, [r0, #36]	; 0x24
 8005f0e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005f10:	4639      	mov	r1, r7
 8005f12:	4630      	mov	r0, r6
 8005f14:	2301      	movs	r3, #1
 8005f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1a:	f000 b803 	b.w	8005f24 <__strtok_r>
 8005f1e:	bf00      	nop
 8005f20:	2000000c 	.word	0x2000000c

08005f24 <__strtok_r>:
 8005f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f26:	b918      	cbnz	r0, 8005f30 <__strtok_r+0xc>
 8005f28:	6810      	ldr	r0, [r2, #0]
 8005f2a:	b908      	cbnz	r0, 8005f30 <__strtok_r+0xc>
 8005f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2e:	4620      	mov	r0, r4
 8005f30:	4604      	mov	r4, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005f38:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005f3c:	b91e      	cbnz	r6, 8005f46 <__strtok_r+0x22>
 8005f3e:	b96d      	cbnz	r5, 8005f5c <__strtok_r+0x38>
 8005f40:	6015      	str	r5, [r2, #0]
 8005f42:	4628      	mov	r0, r5
 8005f44:	e7f2      	b.n	8005f2c <__strtok_r+0x8>
 8005f46:	42b5      	cmp	r5, r6
 8005f48:	d1f6      	bne.n	8005f38 <__strtok_r+0x14>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1ef      	bne.n	8005f2e <__strtok_r+0xa>
 8005f4e:	6014      	str	r4, [r2, #0]
 8005f50:	7003      	strb	r3, [r0, #0]
 8005f52:	e7eb      	b.n	8005f2c <__strtok_r+0x8>
 8005f54:	462b      	mov	r3, r5
 8005f56:	e00d      	b.n	8005f74 <__strtok_r+0x50>
 8005f58:	b926      	cbnz	r6, 8005f64 <__strtok_r+0x40>
 8005f5a:	461c      	mov	r4, r3
 8005f5c:	4623      	mov	r3, r4
 8005f5e:	460f      	mov	r7, r1
 8005f60:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005f64:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005f68:	42b5      	cmp	r5, r6
 8005f6a:	d1f5      	bne.n	8005f58 <__strtok_r+0x34>
 8005f6c:	2d00      	cmp	r5, #0
 8005f6e:	d0f1      	beq.n	8005f54 <__strtok_r+0x30>
 8005f70:	2100      	movs	r1, #0
 8005f72:	7021      	strb	r1, [r4, #0]
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e7d9      	b.n	8005f2c <__strtok_r+0x8>

08005f78 <_strtol_l.isra.0>:
 8005f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	4689      	mov	r9, r1
 8005f80:	4692      	mov	sl, r2
 8005f82:	461e      	mov	r6, r3
 8005f84:	460f      	mov	r7, r1
 8005f86:	463d      	mov	r5, r7
 8005f88:	9808      	ldr	r0, [sp, #32]
 8005f8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f8e:	f000 f885 	bl	800609c <__locale_ctype_ptr_l>
 8005f92:	4420      	add	r0, r4
 8005f94:	7843      	ldrb	r3, [r0, #1]
 8005f96:	f013 0308 	ands.w	r3, r3, #8
 8005f9a:	d132      	bne.n	8006002 <_strtol_l.isra.0+0x8a>
 8005f9c:	2c2d      	cmp	r4, #45	; 0x2d
 8005f9e:	d132      	bne.n	8006006 <_strtol_l.isra.0+0x8e>
 8005fa0:	787c      	ldrb	r4, [r7, #1]
 8005fa2:	1cbd      	adds	r5, r7, #2
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	d05d      	beq.n	8006066 <_strtol_l.isra.0+0xee>
 8005faa:	2e10      	cmp	r6, #16
 8005fac:	d109      	bne.n	8005fc2 <_strtol_l.isra.0+0x4a>
 8005fae:	2c30      	cmp	r4, #48	; 0x30
 8005fb0:	d107      	bne.n	8005fc2 <_strtol_l.isra.0+0x4a>
 8005fb2:	782b      	ldrb	r3, [r5, #0]
 8005fb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fb8:	2b58      	cmp	r3, #88	; 0x58
 8005fba:	d14f      	bne.n	800605c <_strtol_l.isra.0+0xe4>
 8005fbc:	786c      	ldrb	r4, [r5, #1]
 8005fbe:	2610      	movs	r6, #16
 8005fc0:	3502      	adds	r5, #2
 8005fc2:	2a00      	cmp	r2, #0
 8005fc4:	bf14      	ite	ne
 8005fc6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005fca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005fce:	2700      	movs	r7, #0
 8005fd0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005fda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005fde:	2b09      	cmp	r3, #9
 8005fe0:	d817      	bhi.n	8006012 <_strtol_l.isra.0+0x9a>
 8005fe2:	461c      	mov	r4, r3
 8005fe4:	42a6      	cmp	r6, r4
 8005fe6:	dd23      	ble.n	8006030 <_strtol_l.isra.0+0xb8>
 8005fe8:	1c7b      	adds	r3, r7, #1
 8005fea:	d007      	beq.n	8005ffc <_strtol_l.isra.0+0x84>
 8005fec:	4584      	cmp	ip, r0
 8005fee:	d31c      	bcc.n	800602a <_strtol_l.isra.0+0xb2>
 8005ff0:	d101      	bne.n	8005ff6 <_strtol_l.isra.0+0x7e>
 8005ff2:	45a6      	cmp	lr, r4
 8005ff4:	db19      	blt.n	800602a <_strtol_l.isra.0+0xb2>
 8005ff6:	fb00 4006 	mla	r0, r0, r6, r4
 8005ffa:	2701      	movs	r7, #1
 8005ffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006000:	e7eb      	b.n	8005fda <_strtol_l.isra.0+0x62>
 8006002:	462f      	mov	r7, r5
 8006004:	e7bf      	b.n	8005f86 <_strtol_l.isra.0+0xe>
 8006006:	2c2b      	cmp	r4, #43	; 0x2b
 8006008:	bf04      	itt	eq
 800600a:	1cbd      	addeq	r5, r7, #2
 800600c:	787c      	ldrbeq	r4, [r7, #1]
 800600e:	461a      	mov	r2, r3
 8006010:	e7c9      	b.n	8005fa6 <_strtol_l.isra.0+0x2e>
 8006012:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006016:	2b19      	cmp	r3, #25
 8006018:	d801      	bhi.n	800601e <_strtol_l.isra.0+0xa6>
 800601a:	3c37      	subs	r4, #55	; 0x37
 800601c:	e7e2      	b.n	8005fe4 <_strtol_l.isra.0+0x6c>
 800601e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006022:	2b19      	cmp	r3, #25
 8006024:	d804      	bhi.n	8006030 <_strtol_l.isra.0+0xb8>
 8006026:	3c57      	subs	r4, #87	; 0x57
 8006028:	e7dc      	b.n	8005fe4 <_strtol_l.isra.0+0x6c>
 800602a:	f04f 37ff 	mov.w	r7, #4294967295
 800602e:	e7e5      	b.n	8005ffc <_strtol_l.isra.0+0x84>
 8006030:	1c7b      	adds	r3, r7, #1
 8006032:	d108      	bne.n	8006046 <_strtol_l.isra.0+0xce>
 8006034:	2322      	movs	r3, #34	; 0x22
 8006036:	f8c8 3000 	str.w	r3, [r8]
 800603a:	4608      	mov	r0, r1
 800603c:	f1ba 0f00 	cmp.w	sl, #0
 8006040:	d107      	bne.n	8006052 <_strtol_l.isra.0+0xda>
 8006042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006046:	b102      	cbz	r2, 800604a <_strtol_l.isra.0+0xd2>
 8006048:	4240      	negs	r0, r0
 800604a:	f1ba 0f00 	cmp.w	sl, #0
 800604e:	d0f8      	beq.n	8006042 <_strtol_l.isra.0+0xca>
 8006050:	b10f      	cbz	r7, 8006056 <_strtol_l.isra.0+0xde>
 8006052:	f105 39ff 	add.w	r9, r5, #4294967295
 8006056:	f8ca 9000 	str.w	r9, [sl]
 800605a:	e7f2      	b.n	8006042 <_strtol_l.isra.0+0xca>
 800605c:	2430      	movs	r4, #48	; 0x30
 800605e:	2e00      	cmp	r6, #0
 8006060:	d1af      	bne.n	8005fc2 <_strtol_l.isra.0+0x4a>
 8006062:	2608      	movs	r6, #8
 8006064:	e7ad      	b.n	8005fc2 <_strtol_l.isra.0+0x4a>
 8006066:	2c30      	cmp	r4, #48	; 0x30
 8006068:	d0a3      	beq.n	8005fb2 <_strtol_l.isra.0+0x3a>
 800606a:	260a      	movs	r6, #10
 800606c:	e7a9      	b.n	8005fc2 <_strtol_l.isra.0+0x4a>
	...

08006070 <strtol>:
 8006070:	4b08      	ldr	r3, [pc, #32]	; (8006094 <strtol+0x24>)
 8006072:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006074:	681c      	ldr	r4, [r3, #0]
 8006076:	4d08      	ldr	r5, [pc, #32]	; (8006098 <strtol+0x28>)
 8006078:	6a23      	ldr	r3, [r4, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	bf08      	it	eq
 800607e:	462b      	moveq	r3, r5
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4613      	mov	r3, r2
 8006084:	460a      	mov	r2, r1
 8006086:	4601      	mov	r1, r0
 8006088:	4620      	mov	r0, r4
 800608a:	f7ff ff75 	bl	8005f78 <_strtol_l.isra.0>
 800608e:	b003      	add	sp, #12
 8006090:	bd30      	pop	{r4, r5, pc}
 8006092:	bf00      	nop
 8006094:	2000000c 	.word	0x2000000c
 8006098:	20000070 	.word	0x20000070

0800609c <__locale_ctype_ptr_l>:
 800609c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80060a0:	4770      	bx	lr
	...

080060a4 <malloc>:
 80060a4:	4b02      	ldr	r3, [pc, #8]	; (80060b0 <malloc+0xc>)
 80060a6:	4601      	mov	r1, r0
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	f000 b863 	b.w	8006174 <_malloc_r>
 80060ae:	bf00      	nop
 80060b0:	2000000c 	.word	0x2000000c

080060b4 <__ascii_mbtowc>:
 80060b4:	b082      	sub	sp, #8
 80060b6:	b901      	cbnz	r1, 80060ba <__ascii_mbtowc+0x6>
 80060b8:	a901      	add	r1, sp, #4
 80060ba:	b142      	cbz	r2, 80060ce <__ascii_mbtowc+0x1a>
 80060bc:	b14b      	cbz	r3, 80060d2 <__ascii_mbtowc+0x1e>
 80060be:	7813      	ldrb	r3, [r2, #0]
 80060c0:	600b      	str	r3, [r1, #0]
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	1c10      	adds	r0, r2, #0
 80060c6:	bf18      	it	ne
 80060c8:	2001      	movne	r0, #1
 80060ca:	b002      	add	sp, #8
 80060cc:	4770      	bx	lr
 80060ce:	4610      	mov	r0, r2
 80060d0:	e7fb      	b.n	80060ca <__ascii_mbtowc+0x16>
 80060d2:	f06f 0001 	mvn.w	r0, #1
 80060d6:	e7f8      	b.n	80060ca <__ascii_mbtowc+0x16>

080060d8 <_free_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4605      	mov	r5, r0
 80060dc:	2900      	cmp	r1, #0
 80060de:	d045      	beq.n	800616c <_free_r+0x94>
 80060e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060e4:	1f0c      	subs	r4, r1, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	bfb8      	it	lt
 80060ea:	18e4      	addlt	r4, r4, r3
 80060ec:	f000 fbac 	bl	8006848 <__malloc_lock>
 80060f0:	4a1f      	ldr	r2, [pc, #124]	; (8006170 <_free_r+0x98>)
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	4610      	mov	r0, r2
 80060f6:	b933      	cbnz	r3, 8006106 <_free_r+0x2e>
 80060f8:	6063      	str	r3, [r4, #4]
 80060fa:	6014      	str	r4, [r2, #0]
 80060fc:	4628      	mov	r0, r5
 80060fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006102:	f000 bba2 	b.w	800684a <__malloc_unlock>
 8006106:	42a3      	cmp	r3, r4
 8006108:	d90c      	bls.n	8006124 <_free_r+0x4c>
 800610a:	6821      	ldr	r1, [r4, #0]
 800610c:	1862      	adds	r2, r4, r1
 800610e:	4293      	cmp	r3, r2
 8006110:	bf04      	itt	eq
 8006112:	681a      	ldreq	r2, [r3, #0]
 8006114:	685b      	ldreq	r3, [r3, #4]
 8006116:	6063      	str	r3, [r4, #4]
 8006118:	bf04      	itt	eq
 800611a:	1852      	addeq	r2, r2, r1
 800611c:	6022      	streq	r2, [r4, #0]
 800611e:	6004      	str	r4, [r0, #0]
 8006120:	e7ec      	b.n	80060fc <_free_r+0x24>
 8006122:	4613      	mov	r3, r2
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	b10a      	cbz	r2, 800612c <_free_r+0x54>
 8006128:	42a2      	cmp	r2, r4
 800612a:	d9fa      	bls.n	8006122 <_free_r+0x4a>
 800612c:	6819      	ldr	r1, [r3, #0]
 800612e:	1858      	adds	r0, r3, r1
 8006130:	42a0      	cmp	r0, r4
 8006132:	d10b      	bne.n	800614c <_free_r+0x74>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	4401      	add	r1, r0
 8006138:	1858      	adds	r0, r3, r1
 800613a:	4282      	cmp	r2, r0
 800613c:	6019      	str	r1, [r3, #0]
 800613e:	d1dd      	bne.n	80060fc <_free_r+0x24>
 8006140:	6810      	ldr	r0, [r2, #0]
 8006142:	6852      	ldr	r2, [r2, #4]
 8006144:	605a      	str	r2, [r3, #4]
 8006146:	4401      	add	r1, r0
 8006148:	6019      	str	r1, [r3, #0]
 800614a:	e7d7      	b.n	80060fc <_free_r+0x24>
 800614c:	d902      	bls.n	8006154 <_free_r+0x7c>
 800614e:	230c      	movs	r3, #12
 8006150:	602b      	str	r3, [r5, #0]
 8006152:	e7d3      	b.n	80060fc <_free_r+0x24>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	1821      	adds	r1, r4, r0
 8006158:	428a      	cmp	r2, r1
 800615a:	bf04      	itt	eq
 800615c:	6811      	ldreq	r1, [r2, #0]
 800615e:	6852      	ldreq	r2, [r2, #4]
 8006160:	6062      	str	r2, [r4, #4]
 8006162:	bf04      	itt	eq
 8006164:	1809      	addeq	r1, r1, r0
 8006166:	6021      	streq	r1, [r4, #0]
 8006168:	605c      	str	r4, [r3, #4]
 800616a:	e7c7      	b.n	80060fc <_free_r+0x24>
 800616c:	bd38      	pop	{r3, r4, r5, pc}
 800616e:	bf00      	nop
 8006170:	20000204 	.word	0x20000204

08006174 <_malloc_r>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	1ccd      	adds	r5, r1, #3
 8006178:	f025 0503 	bic.w	r5, r5, #3
 800617c:	3508      	adds	r5, #8
 800617e:	2d0c      	cmp	r5, #12
 8006180:	bf38      	it	cc
 8006182:	250c      	movcc	r5, #12
 8006184:	2d00      	cmp	r5, #0
 8006186:	4606      	mov	r6, r0
 8006188:	db01      	blt.n	800618e <_malloc_r+0x1a>
 800618a:	42a9      	cmp	r1, r5
 800618c:	d903      	bls.n	8006196 <_malloc_r+0x22>
 800618e:	230c      	movs	r3, #12
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	2000      	movs	r0, #0
 8006194:	bd70      	pop	{r4, r5, r6, pc}
 8006196:	f000 fb57 	bl	8006848 <__malloc_lock>
 800619a:	4a21      	ldr	r2, [pc, #132]	; (8006220 <_malloc_r+0xac>)
 800619c:	6814      	ldr	r4, [r2, #0]
 800619e:	4621      	mov	r1, r4
 80061a0:	b991      	cbnz	r1, 80061c8 <_malloc_r+0x54>
 80061a2:	4c20      	ldr	r4, [pc, #128]	; (8006224 <_malloc_r+0xb0>)
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	b91b      	cbnz	r3, 80061b0 <_malloc_r+0x3c>
 80061a8:	4630      	mov	r0, r6
 80061aa:	f000 fb17 	bl	80067dc <_sbrk_r>
 80061ae:	6020      	str	r0, [r4, #0]
 80061b0:	4629      	mov	r1, r5
 80061b2:	4630      	mov	r0, r6
 80061b4:	f000 fb12 	bl	80067dc <_sbrk_r>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d124      	bne.n	8006206 <_malloc_r+0x92>
 80061bc:	230c      	movs	r3, #12
 80061be:	6033      	str	r3, [r6, #0]
 80061c0:	4630      	mov	r0, r6
 80061c2:	f000 fb42 	bl	800684a <__malloc_unlock>
 80061c6:	e7e4      	b.n	8006192 <_malloc_r+0x1e>
 80061c8:	680b      	ldr	r3, [r1, #0]
 80061ca:	1b5b      	subs	r3, r3, r5
 80061cc:	d418      	bmi.n	8006200 <_malloc_r+0x8c>
 80061ce:	2b0b      	cmp	r3, #11
 80061d0:	d90f      	bls.n	80061f2 <_malloc_r+0x7e>
 80061d2:	600b      	str	r3, [r1, #0]
 80061d4:	50cd      	str	r5, [r1, r3]
 80061d6:	18cc      	adds	r4, r1, r3
 80061d8:	4630      	mov	r0, r6
 80061da:	f000 fb36 	bl	800684a <__malloc_unlock>
 80061de:	f104 000b 	add.w	r0, r4, #11
 80061e2:	1d23      	adds	r3, r4, #4
 80061e4:	f020 0007 	bic.w	r0, r0, #7
 80061e8:	1ac3      	subs	r3, r0, r3
 80061ea:	d0d3      	beq.n	8006194 <_malloc_r+0x20>
 80061ec:	425a      	negs	r2, r3
 80061ee:	50e2      	str	r2, [r4, r3]
 80061f0:	e7d0      	b.n	8006194 <_malloc_r+0x20>
 80061f2:	428c      	cmp	r4, r1
 80061f4:	684b      	ldr	r3, [r1, #4]
 80061f6:	bf16      	itet	ne
 80061f8:	6063      	strne	r3, [r4, #4]
 80061fa:	6013      	streq	r3, [r2, #0]
 80061fc:	460c      	movne	r4, r1
 80061fe:	e7eb      	b.n	80061d8 <_malloc_r+0x64>
 8006200:	460c      	mov	r4, r1
 8006202:	6849      	ldr	r1, [r1, #4]
 8006204:	e7cc      	b.n	80061a0 <_malloc_r+0x2c>
 8006206:	1cc4      	adds	r4, r0, #3
 8006208:	f024 0403 	bic.w	r4, r4, #3
 800620c:	42a0      	cmp	r0, r4
 800620e:	d005      	beq.n	800621c <_malloc_r+0xa8>
 8006210:	1a21      	subs	r1, r4, r0
 8006212:	4630      	mov	r0, r6
 8006214:	f000 fae2 	bl	80067dc <_sbrk_r>
 8006218:	3001      	adds	r0, #1
 800621a:	d0cf      	beq.n	80061bc <_malloc_r+0x48>
 800621c:	6025      	str	r5, [r4, #0]
 800621e:	e7db      	b.n	80061d8 <_malloc_r+0x64>
 8006220:	20000204 	.word	0x20000204
 8006224:	20000208 	.word	0x20000208

08006228 <__ssputs_r>:
 8006228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	688e      	ldr	r6, [r1, #8]
 800622e:	429e      	cmp	r6, r3
 8006230:	4682      	mov	sl, r0
 8006232:	460c      	mov	r4, r1
 8006234:	4690      	mov	r8, r2
 8006236:	4699      	mov	r9, r3
 8006238:	d837      	bhi.n	80062aa <__ssputs_r+0x82>
 800623a:	898a      	ldrh	r2, [r1, #12]
 800623c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006240:	d031      	beq.n	80062a6 <__ssputs_r+0x7e>
 8006242:	6825      	ldr	r5, [r4, #0]
 8006244:	6909      	ldr	r1, [r1, #16]
 8006246:	1a6f      	subs	r7, r5, r1
 8006248:	6965      	ldr	r5, [r4, #20]
 800624a:	2302      	movs	r3, #2
 800624c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006250:	fb95 f5f3 	sdiv	r5, r5, r3
 8006254:	f109 0301 	add.w	r3, r9, #1
 8006258:	443b      	add	r3, r7
 800625a:	429d      	cmp	r5, r3
 800625c:	bf38      	it	cc
 800625e:	461d      	movcc	r5, r3
 8006260:	0553      	lsls	r3, r2, #21
 8006262:	d530      	bpl.n	80062c6 <__ssputs_r+0x9e>
 8006264:	4629      	mov	r1, r5
 8006266:	f7ff ff85 	bl	8006174 <_malloc_r>
 800626a:	4606      	mov	r6, r0
 800626c:	b950      	cbnz	r0, 8006284 <__ssputs_r+0x5c>
 800626e:	230c      	movs	r3, #12
 8006270:	f8ca 3000 	str.w	r3, [sl]
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627a:	81a3      	strh	r3, [r4, #12]
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	463a      	mov	r2, r7
 8006286:	6921      	ldr	r1, [r4, #16]
 8006288:	f7ff fddc 	bl	8005e44 <memcpy>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	81a3      	strh	r3, [r4, #12]
 8006298:	6126      	str	r6, [r4, #16]
 800629a:	6165      	str	r5, [r4, #20]
 800629c:	443e      	add	r6, r7
 800629e:	1bed      	subs	r5, r5, r7
 80062a0:	6026      	str	r6, [r4, #0]
 80062a2:	60a5      	str	r5, [r4, #8]
 80062a4:	464e      	mov	r6, r9
 80062a6:	454e      	cmp	r6, r9
 80062a8:	d900      	bls.n	80062ac <__ssputs_r+0x84>
 80062aa:	464e      	mov	r6, r9
 80062ac:	4632      	mov	r2, r6
 80062ae:	4641      	mov	r1, r8
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	f000 fab0 	bl	8006816 <memmove>
 80062b6:	68a3      	ldr	r3, [r4, #8]
 80062b8:	1b9b      	subs	r3, r3, r6
 80062ba:	60a3      	str	r3, [r4, #8]
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	441e      	add	r6, r3
 80062c0:	6026      	str	r6, [r4, #0]
 80062c2:	2000      	movs	r0, #0
 80062c4:	e7dc      	b.n	8006280 <__ssputs_r+0x58>
 80062c6:	462a      	mov	r2, r5
 80062c8:	f000 fac0 	bl	800684c <_realloc_r>
 80062cc:	4606      	mov	r6, r0
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d1e2      	bne.n	8006298 <__ssputs_r+0x70>
 80062d2:	6921      	ldr	r1, [r4, #16]
 80062d4:	4650      	mov	r0, sl
 80062d6:	f7ff feff 	bl	80060d8 <_free_r>
 80062da:	e7c8      	b.n	800626e <__ssputs_r+0x46>

080062dc <_svfiprintf_r>:
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	461d      	mov	r5, r3
 80062e2:	898b      	ldrh	r3, [r1, #12]
 80062e4:	061f      	lsls	r7, r3, #24
 80062e6:	b09d      	sub	sp, #116	; 0x74
 80062e8:	4680      	mov	r8, r0
 80062ea:	460c      	mov	r4, r1
 80062ec:	4616      	mov	r6, r2
 80062ee:	d50f      	bpl.n	8006310 <_svfiprintf_r+0x34>
 80062f0:	690b      	ldr	r3, [r1, #16]
 80062f2:	b96b      	cbnz	r3, 8006310 <_svfiprintf_r+0x34>
 80062f4:	2140      	movs	r1, #64	; 0x40
 80062f6:	f7ff ff3d 	bl	8006174 <_malloc_r>
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	6120      	str	r0, [r4, #16]
 80062fe:	b928      	cbnz	r0, 800630c <_svfiprintf_r+0x30>
 8006300:	230c      	movs	r3, #12
 8006302:	f8c8 3000 	str.w	r3, [r8]
 8006306:	f04f 30ff 	mov.w	r0, #4294967295
 800630a:	e0c8      	b.n	800649e <_svfiprintf_r+0x1c2>
 800630c:	2340      	movs	r3, #64	; 0x40
 800630e:	6163      	str	r3, [r4, #20]
 8006310:	2300      	movs	r3, #0
 8006312:	9309      	str	r3, [sp, #36]	; 0x24
 8006314:	2320      	movs	r3, #32
 8006316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800631a:	2330      	movs	r3, #48	; 0x30
 800631c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006320:	9503      	str	r5, [sp, #12]
 8006322:	f04f 0b01 	mov.w	fp, #1
 8006326:	4637      	mov	r7, r6
 8006328:	463d      	mov	r5, r7
 800632a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800632e:	b10b      	cbz	r3, 8006334 <_svfiprintf_r+0x58>
 8006330:	2b25      	cmp	r3, #37	; 0x25
 8006332:	d13e      	bne.n	80063b2 <_svfiprintf_r+0xd6>
 8006334:	ebb7 0a06 	subs.w	sl, r7, r6
 8006338:	d00b      	beq.n	8006352 <_svfiprintf_r+0x76>
 800633a:	4653      	mov	r3, sl
 800633c:	4632      	mov	r2, r6
 800633e:	4621      	mov	r1, r4
 8006340:	4640      	mov	r0, r8
 8006342:	f7ff ff71 	bl	8006228 <__ssputs_r>
 8006346:	3001      	adds	r0, #1
 8006348:	f000 80a4 	beq.w	8006494 <_svfiprintf_r+0x1b8>
 800634c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634e:	4453      	add	r3, sl
 8006350:	9309      	str	r3, [sp, #36]	; 0x24
 8006352:	783b      	ldrb	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 809d 	beq.w	8006494 <_svfiprintf_r+0x1b8>
 800635a:	2300      	movs	r3, #0
 800635c:	f04f 32ff 	mov.w	r2, #4294967295
 8006360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	9307      	str	r3, [sp, #28]
 8006368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800636c:	931a      	str	r3, [sp, #104]	; 0x68
 800636e:	462f      	mov	r7, r5
 8006370:	2205      	movs	r2, #5
 8006372:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006376:	4850      	ldr	r0, [pc, #320]	; (80064b8 <_svfiprintf_r+0x1dc>)
 8006378:	f7f9 ff3a 	bl	80001f0 <memchr>
 800637c:	9b04      	ldr	r3, [sp, #16]
 800637e:	b9d0      	cbnz	r0, 80063b6 <_svfiprintf_r+0xda>
 8006380:	06d9      	lsls	r1, r3, #27
 8006382:	bf44      	itt	mi
 8006384:	2220      	movmi	r2, #32
 8006386:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800638a:	071a      	lsls	r2, r3, #28
 800638c:	bf44      	itt	mi
 800638e:	222b      	movmi	r2, #43	; 0x2b
 8006390:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006394:	782a      	ldrb	r2, [r5, #0]
 8006396:	2a2a      	cmp	r2, #42	; 0x2a
 8006398:	d015      	beq.n	80063c6 <_svfiprintf_r+0xea>
 800639a:	9a07      	ldr	r2, [sp, #28]
 800639c:	462f      	mov	r7, r5
 800639e:	2000      	movs	r0, #0
 80063a0:	250a      	movs	r5, #10
 80063a2:	4639      	mov	r1, r7
 80063a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a8:	3b30      	subs	r3, #48	; 0x30
 80063aa:	2b09      	cmp	r3, #9
 80063ac:	d94d      	bls.n	800644a <_svfiprintf_r+0x16e>
 80063ae:	b1b8      	cbz	r0, 80063e0 <_svfiprintf_r+0x104>
 80063b0:	e00f      	b.n	80063d2 <_svfiprintf_r+0xf6>
 80063b2:	462f      	mov	r7, r5
 80063b4:	e7b8      	b.n	8006328 <_svfiprintf_r+0x4c>
 80063b6:	4a40      	ldr	r2, [pc, #256]	; (80064b8 <_svfiprintf_r+0x1dc>)
 80063b8:	1a80      	subs	r0, r0, r2
 80063ba:	fa0b f000 	lsl.w	r0, fp, r0
 80063be:	4318      	orrs	r0, r3
 80063c0:	9004      	str	r0, [sp, #16]
 80063c2:	463d      	mov	r5, r7
 80063c4:	e7d3      	b.n	800636e <_svfiprintf_r+0x92>
 80063c6:	9a03      	ldr	r2, [sp, #12]
 80063c8:	1d11      	adds	r1, r2, #4
 80063ca:	6812      	ldr	r2, [r2, #0]
 80063cc:	9103      	str	r1, [sp, #12]
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	db01      	blt.n	80063d6 <_svfiprintf_r+0xfa>
 80063d2:	9207      	str	r2, [sp, #28]
 80063d4:	e004      	b.n	80063e0 <_svfiprintf_r+0x104>
 80063d6:	4252      	negs	r2, r2
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	9207      	str	r2, [sp, #28]
 80063de:	9304      	str	r3, [sp, #16]
 80063e0:	783b      	ldrb	r3, [r7, #0]
 80063e2:	2b2e      	cmp	r3, #46	; 0x2e
 80063e4:	d10c      	bne.n	8006400 <_svfiprintf_r+0x124>
 80063e6:	787b      	ldrb	r3, [r7, #1]
 80063e8:	2b2a      	cmp	r3, #42	; 0x2a
 80063ea:	d133      	bne.n	8006454 <_svfiprintf_r+0x178>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	1d1a      	adds	r2, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	9203      	str	r2, [sp, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfb8      	it	lt
 80063f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80063fc:	3702      	adds	r7, #2
 80063fe:	9305      	str	r3, [sp, #20]
 8006400:	4d2e      	ldr	r5, [pc, #184]	; (80064bc <_svfiprintf_r+0x1e0>)
 8006402:	7839      	ldrb	r1, [r7, #0]
 8006404:	2203      	movs	r2, #3
 8006406:	4628      	mov	r0, r5
 8006408:	f7f9 fef2 	bl	80001f0 <memchr>
 800640c:	b138      	cbz	r0, 800641e <_svfiprintf_r+0x142>
 800640e:	2340      	movs	r3, #64	; 0x40
 8006410:	1b40      	subs	r0, r0, r5
 8006412:	fa03 f000 	lsl.w	r0, r3, r0
 8006416:	9b04      	ldr	r3, [sp, #16]
 8006418:	4303      	orrs	r3, r0
 800641a:	3701      	adds	r7, #1
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	7839      	ldrb	r1, [r7, #0]
 8006420:	4827      	ldr	r0, [pc, #156]	; (80064c0 <_svfiprintf_r+0x1e4>)
 8006422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006426:	2206      	movs	r2, #6
 8006428:	1c7e      	adds	r6, r7, #1
 800642a:	f7f9 fee1 	bl	80001f0 <memchr>
 800642e:	2800      	cmp	r0, #0
 8006430:	d038      	beq.n	80064a4 <_svfiprintf_r+0x1c8>
 8006432:	4b24      	ldr	r3, [pc, #144]	; (80064c4 <_svfiprintf_r+0x1e8>)
 8006434:	bb13      	cbnz	r3, 800647c <_svfiprintf_r+0x1a0>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	3307      	adds	r3, #7
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	3308      	adds	r3, #8
 8006440:	9303      	str	r3, [sp, #12]
 8006442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006444:	444b      	add	r3, r9
 8006446:	9309      	str	r3, [sp, #36]	; 0x24
 8006448:	e76d      	b.n	8006326 <_svfiprintf_r+0x4a>
 800644a:	fb05 3202 	mla	r2, r5, r2, r3
 800644e:	2001      	movs	r0, #1
 8006450:	460f      	mov	r7, r1
 8006452:	e7a6      	b.n	80063a2 <_svfiprintf_r+0xc6>
 8006454:	2300      	movs	r3, #0
 8006456:	3701      	adds	r7, #1
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	4619      	mov	r1, r3
 800645c:	250a      	movs	r5, #10
 800645e:	4638      	mov	r0, r7
 8006460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006464:	3a30      	subs	r2, #48	; 0x30
 8006466:	2a09      	cmp	r2, #9
 8006468:	d903      	bls.n	8006472 <_svfiprintf_r+0x196>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0c8      	beq.n	8006400 <_svfiprintf_r+0x124>
 800646e:	9105      	str	r1, [sp, #20]
 8006470:	e7c6      	b.n	8006400 <_svfiprintf_r+0x124>
 8006472:	fb05 2101 	mla	r1, r5, r1, r2
 8006476:	2301      	movs	r3, #1
 8006478:	4607      	mov	r7, r0
 800647a:	e7f0      	b.n	800645e <_svfiprintf_r+0x182>
 800647c:	ab03      	add	r3, sp, #12
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4622      	mov	r2, r4
 8006482:	4b11      	ldr	r3, [pc, #68]	; (80064c8 <_svfiprintf_r+0x1ec>)
 8006484:	a904      	add	r1, sp, #16
 8006486:	4640      	mov	r0, r8
 8006488:	f3af 8000 	nop.w
 800648c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006490:	4681      	mov	r9, r0
 8006492:	d1d6      	bne.n	8006442 <_svfiprintf_r+0x166>
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	065b      	lsls	r3, r3, #25
 8006498:	f53f af35 	bmi.w	8006306 <_svfiprintf_r+0x2a>
 800649c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800649e:	b01d      	add	sp, #116	; 0x74
 80064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	ab03      	add	r3, sp, #12
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	4622      	mov	r2, r4
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <_svfiprintf_r+0x1ec>)
 80064ac:	a904      	add	r1, sp, #16
 80064ae:	4640      	mov	r0, r8
 80064b0:	f000 f882 	bl	80065b8 <_printf_i>
 80064b4:	e7ea      	b.n	800648c <_svfiprintf_r+0x1b0>
 80064b6:	bf00      	nop
 80064b8:	08006af2 	.word	0x08006af2
 80064bc:	08006af8 	.word	0x08006af8
 80064c0:	08006afc 	.word	0x08006afc
 80064c4:	00000000 	.word	0x00000000
 80064c8:	08006229 	.word	0x08006229

080064cc <_printf_common>:
 80064cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	4691      	mov	r9, r2
 80064d2:	461f      	mov	r7, r3
 80064d4:	688a      	ldr	r2, [r1, #8]
 80064d6:	690b      	ldr	r3, [r1, #16]
 80064d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064dc:	4293      	cmp	r3, r2
 80064de:	bfb8      	it	lt
 80064e0:	4613      	movlt	r3, r2
 80064e2:	f8c9 3000 	str.w	r3, [r9]
 80064e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ea:	4606      	mov	r6, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	b112      	cbz	r2, 80064f6 <_printf_common+0x2a>
 80064f0:	3301      	adds	r3, #1
 80064f2:	f8c9 3000 	str.w	r3, [r9]
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	0699      	lsls	r1, r3, #26
 80064fa:	bf42      	ittt	mi
 80064fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006500:	3302      	addmi	r3, #2
 8006502:	f8c9 3000 	strmi.w	r3, [r9]
 8006506:	6825      	ldr	r5, [r4, #0]
 8006508:	f015 0506 	ands.w	r5, r5, #6
 800650c:	d107      	bne.n	800651e <_printf_common+0x52>
 800650e:	f104 0a19 	add.w	sl, r4, #25
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	f8d9 2000 	ldr.w	r2, [r9]
 8006518:	1a9b      	subs	r3, r3, r2
 800651a:	42ab      	cmp	r3, r5
 800651c:	dc28      	bgt.n	8006570 <_printf_common+0xa4>
 800651e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006522:	6822      	ldr	r2, [r4, #0]
 8006524:	3300      	adds	r3, #0
 8006526:	bf18      	it	ne
 8006528:	2301      	movne	r3, #1
 800652a:	0692      	lsls	r2, r2, #26
 800652c:	d42d      	bmi.n	800658a <_printf_common+0xbe>
 800652e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006532:	4639      	mov	r1, r7
 8006534:	4630      	mov	r0, r6
 8006536:	47c0      	blx	r8
 8006538:	3001      	adds	r0, #1
 800653a:	d020      	beq.n	800657e <_printf_common+0xb2>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	68e5      	ldr	r5, [r4, #12]
 8006540:	f8d9 2000 	ldr.w	r2, [r9]
 8006544:	f003 0306 	and.w	r3, r3, #6
 8006548:	2b04      	cmp	r3, #4
 800654a:	bf08      	it	eq
 800654c:	1aad      	subeq	r5, r5, r2
 800654e:	68a3      	ldr	r3, [r4, #8]
 8006550:	6922      	ldr	r2, [r4, #16]
 8006552:	bf0c      	ite	eq
 8006554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006558:	2500      	movne	r5, #0
 800655a:	4293      	cmp	r3, r2
 800655c:	bfc4      	itt	gt
 800655e:	1a9b      	subgt	r3, r3, r2
 8006560:	18ed      	addgt	r5, r5, r3
 8006562:	f04f 0900 	mov.w	r9, #0
 8006566:	341a      	adds	r4, #26
 8006568:	454d      	cmp	r5, r9
 800656a:	d11a      	bne.n	80065a2 <_printf_common+0xd6>
 800656c:	2000      	movs	r0, #0
 800656e:	e008      	b.n	8006582 <_printf_common+0xb6>
 8006570:	2301      	movs	r3, #1
 8006572:	4652      	mov	r2, sl
 8006574:	4639      	mov	r1, r7
 8006576:	4630      	mov	r0, r6
 8006578:	47c0      	blx	r8
 800657a:	3001      	adds	r0, #1
 800657c:	d103      	bne.n	8006586 <_printf_common+0xba>
 800657e:	f04f 30ff 	mov.w	r0, #4294967295
 8006582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006586:	3501      	adds	r5, #1
 8006588:	e7c3      	b.n	8006512 <_printf_common+0x46>
 800658a:	18e1      	adds	r1, r4, r3
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	2030      	movs	r0, #48	; 0x30
 8006590:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006594:	4422      	add	r2, r4
 8006596:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800659a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800659e:	3302      	adds	r3, #2
 80065a0:	e7c5      	b.n	800652e <_printf_common+0x62>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4622      	mov	r2, r4
 80065a6:	4639      	mov	r1, r7
 80065a8:	4630      	mov	r0, r6
 80065aa:	47c0      	blx	r8
 80065ac:	3001      	adds	r0, #1
 80065ae:	d0e6      	beq.n	800657e <_printf_common+0xb2>
 80065b0:	f109 0901 	add.w	r9, r9, #1
 80065b4:	e7d8      	b.n	8006568 <_printf_common+0x9c>
	...

080065b8 <_printf_i>:
 80065b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80065c0:	460c      	mov	r4, r1
 80065c2:	7e09      	ldrb	r1, [r1, #24]
 80065c4:	b085      	sub	sp, #20
 80065c6:	296e      	cmp	r1, #110	; 0x6e
 80065c8:	4617      	mov	r7, r2
 80065ca:	4606      	mov	r6, r0
 80065cc:	4698      	mov	r8, r3
 80065ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d0:	f000 80b3 	beq.w	800673a <_printf_i+0x182>
 80065d4:	d822      	bhi.n	800661c <_printf_i+0x64>
 80065d6:	2963      	cmp	r1, #99	; 0x63
 80065d8:	d036      	beq.n	8006648 <_printf_i+0x90>
 80065da:	d80a      	bhi.n	80065f2 <_printf_i+0x3a>
 80065dc:	2900      	cmp	r1, #0
 80065de:	f000 80b9 	beq.w	8006754 <_printf_i+0x19c>
 80065e2:	2958      	cmp	r1, #88	; 0x58
 80065e4:	f000 8083 	beq.w	80066ee <_printf_i+0x136>
 80065e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065f0:	e032      	b.n	8006658 <_printf_i+0xa0>
 80065f2:	2964      	cmp	r1, #100	; 0x64
 80065f4:	d001      	beq.n	80065fa <_printf_i+0x42>
 80065f6:	2969      	cmp	r1, #105	; 0x69
 80065f8:	d1f6      	bne.n	80065e8 <_printf_i+0x30>
 80065fa:	6820      	ldr	r0, [r4, #0]
 80065fc:	6813      	ldr	r3, [r2, #0]
 80065fe:	0605      	lsls	r5, r0, #24
 8006600:	f103 0104 	add.w	r1, r3, #4
 8006604:	d52a      	bpl.n	800665c <_printf_i+0xa4>
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6011      	str	r1, [r2, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	da03      	bge.n	8006616 <_printf_i+0x5e>
 800660e:	222d      	movs	r2, #45	; 0x2d
 8006610:	425b      	negs	r3, r3
 8006612:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006616:	486f      	ldr	r0, [pc, #444]	; (80067d4 <_printf_i+0x21c>)
 8006618:	220a      	movs	r2, #10
 800661a:	e039      	b.n	8006690 <_printf_i+0xd8>
 800661c:	2973      	cmp	r1, #115	; 0x73
 800661e:	f000 809d 	beq.w	800675c <_printf_i+0x1a4>
 8006622:	d808      	bhi.n	8006636 <_printf_i+0x7e>
 8006624:	296f      	cmp	r1, #111	; 0x6f
 8006626:	d020      	beq.n	800666a <_printf_i+0xb2>
 8006628:	2970      	cmp	r1, #112	; 0x70
 800662a:	d1dd      	bne.n	80065e8 <_printf_i+0x30>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	f043 0320 	orr.w	r3, r3, #32
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	e003      	b.n	800663e <_printf_i+0x86>
 8006636:	2975      	cmp	r1, #117	; 0x75
 8006638:	d017      	beq.n	800666a <_printf_i+0xb2>
 800663a:	2978      	cmp	r1, #120	; 0x78
 800663c:	d1d4      	bne.n	80065e8 <_printf_i+0x30>
 800663e:	2378      	movs	r3, #120	; 0x78
 8006640:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006644:	4864      	ldr	r0, [pc, #400]	; (80067d8 <_printf_i+0x220>)
 8006646:	e055      	b.n	80066f4 <_printf_i+0x13c>
 8006648:	6813      	ldr	r3, [r2, #0]
 800664a:	1d19      	adds	r1, r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6011      	str	r1, [r2, #0]
 8006650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006658:	2301      	movs	r3, #1
 800665a:	e08c      	b.n	8006776 <_printf_i+0x1be>
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6011      	str	r1, [r2, #0]
 8006660:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006664:	bf18      	it	ne
 8006666:	b21b      	sxthne	r3, r3
 8006668:	e7cf      	b.n	800660a <_printf_i+0x52>
 800666a:	6813      	ldr	r3, [r2, #0]
 800666c:	6825      	ldr	r5, [r4, #0]
 800666e:	1d18      	adds	r0, r3, #4
 8006670:	6010      	str	r0, [r2, #0]
 8006672:	0628      	lsls	r0, r5, #24
 8006674:	d501      	bpl.n	800667a <_printf_i+0xc2>
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	e002      	b.n	8006680 <_printf_i+0xc8>
 800667a:	0668      	lsls	r0, r5, #25
 800667c:	d5fb      	bpl.n	8006676 <_printf_i+0xbe>
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	4854      	ldr	r0, [pc, #336]	; (80067d4 <_printf_i+0x21c>)
 8006682:	296f      	cmp	r1, #111	; 0x6f
 8006684:	bf14      	ite	ne
 8006686:	220a      	movne	r2, #10
 8006688:	2208      	moveq	r2, #8
 800668a:	2100      	movs	r1, #0
 800668c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006690:	6865      	ldr	r5, [r4, #4]
 8006692:	60a5      	str	r5, [r4, #8]
 8006694:	2d00      	cmp	r5, #0
 8006696:	f2c0 8095 	blt.w	80067c4 <_printf_i+0x20c>
 800669a:	6821      	ldr	r1, [r4, #0]
 800669c:	f021 0104 	bic.w	r1, r1, #4
 80066a0:	6021      	str	r1, [r4, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d13d      	bne.n	8006722 <_printf_i+0x16a>
 80066a6:	2d00      	cmp	r5, #0
 80066a8:	f040 808e 	bne.w	80067c8 <_printf_i+0x210>
 80066ac:	4665      	mov	r5, ip
 80066ae:	2a08      	cmp	r2, #8
 80066b0:	d10b      	bne.n	80066ca <_printf_i+0x112>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	07db      	lsls	r3, r3, #31
 80066b6:	d508      	bpl.n	80066ca <_printf_i+0x112>
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	6862      	ldr	r2, [r4, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	bfde      	ittt	le
 80066c0:	2330      	movle	r3, #48	; 0x30
 80066c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066ca:	ebac 0305 	sub.w	r3, ip, r5
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	f8cd 8000 	str.w	r8, [sp]
 80066d4:	463b      	mov	r3, r7
 80066d6:	aa03      	add	r2, sp, #12
 80066d8:	4621      	mov	r1, r4
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff fef6 	bl	80064cc <_printf_common>
 80066e0:	3001      	adds	r0, #1
 80066e2:	d14d      	bne.n	8006780 <_printf_i+0x1c8>
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	b005      	add	sp, #20
 80066ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ee:	4839      	ldr	r0, [pc, #228]	; (80067d4 <_printf_i+0x21c>)
 80066f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066f4:	6813      	ldr	r3, [r2, #0]
 80066f6:	6821      	ldr	r1, [r4, #0]
 80066f8:	1d1d      	adds	r5, r3, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6015      	str	r5, [r2, #0]
 80066fe:	060a      	lsls	r2, r1, #24
 8006700:	d50b      	bpl.n	800671a <_printf_i+0x162>
 8006702:	07ca      	lsls	r2, r1, #31
 8006704:	bf44      	itt	mi
 8006706:	f041 0120 	orrmi.w	r1, r1, #32
 800670a:	6021      	strmi	r1, [r4, #0]
 800670c:	b91b      	cbnz	r3, 8006716 <_printf_i+0x15e>
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	f022 0220 	bic.w	r2, r2, #32
 8006714:	6022      	str	r2, [r4, #0]
 8006716:	2210      	movs	r2, #16
 8006718:	e7b7      	b.n	800668a <_printf_i+0xd2>
 800671a:	064d      	lsls	r5, r1, #25
 800671c:	bf48      	it	mi
 800671e:	b29b      	uxthmi	r3, r3
 8006720:	e7ef      	b.n	8006702 <_printf_i+0x14a>
 8006722:	4665      	mov	r5, ip
 8006724:	fbb3 f1f2 	udiv	r1, r3, r2
 8006728:	fb02 3311 	mls	r3, r2, r1, r3
 800672c:	5cc3      	ldrb	r3, [r0, r3]
 800672e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006732:	460b      	mov	r3, r1
 8006734:	2900      	cmp	r1, #0
 8006736:	d1f5      	bne.n	8006724 <_printf_i+0x16c>
 8006738:	e7b9      	b.n	80066ae <_printf_i+0xf6>
 800673a:	6813      	ldr	r3, [r2, #0]
 800673c:	6825      	ldr	r5, [r4, #0]
 800673e:	6961      	ldr	r1, [r4, #20]
 8006740:	1d18      	adds	r0, r3, #4
 8006742:	6010      	str	r0, [r2, #0]
 8006744:	0628      	lsls	r0, r5, #24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	d501      	bpl.n	800674e <_printf_i+0x196>
 800674a:	6019      	str	r1, [r3, #0]
 800674c:	e002      	b.n	8006754 <_printf_i+0x19c>
 800674e:	066a      	lsls	r2, r5, #25
 8006750:	d5fb      	bpl.n	800674a <_printf_i+0x192>
 8006752:	8019      	strh	r1, [r3, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	4665      	mov	r5, ip
 800675a:	e7b9      	b.n	80066d0 <_printf_i+0x118>
 800675c:	6813      	ldr	r3, [r2, #0]
 800675e:	1d19      	adds	r1, r3, #4
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	681d      	ldr	r5, [r3, #0]
 8006764:	6862      	ldr	r2, [r4, #4]
 8006766:	2100      	movs	r1, #0
 8006768:	4628      	mov	r0, r5
 800676a:	f7f9 fd41 	bl	80001f0 <memchr>
 800676e:	b108      	cbz	r0, 8006774 <_printf_i+0x1bc>
 8006770:	1b40      	subs	r0, r0, r5
 8006772:	6060      	str	r0, [r4, #4]
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	2300      	movs	r3, #0
 800677a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800677e:	e7a7      	b.n	80066d0 <_printf_i+0x118>
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	462a      	mov	r2, r5
 8006784:	4639      	mov	r1, r7
 8006786:	4630      	mov	r0, r6
 8006788:	47c0      	blx	r8
 800678a:	3001      	adds	r0, #1
 800678c:	d0aa      	beq.n	80066e4 <_printf_i+0x12c>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	079b      	lsls	r3, r3, #30
 8006792:	d413      	bmi.n	80067bc <_printf_i+0x204>
 8006794:	68e0      	ldr	r0, [r4, #12]
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	4298      	cmp	r0, r3
 800679a:	bfb8      	it	lt
 800679c:	4618      	movlt	r0, r3
 800679e:	e7a3      	b.n	80066e8 <_printf_i+0x130>
 80067a0:	2301      	movs	r3, #1
 80067a2:	464a      	mov	r2, r9
 80067a4:	4639      	mov	r1, r7
 80067a6:	4630      	mov	r0, r6
 80067a8:	47c0      	blx	r8
 80067aa:	3001      	adds	r0, #1
 80067ac:	d09a      	beq.n	80066e4 <_printf_i+0x12c>
 80067ae:	3501      	adds	r5, #1
 80067b0:	68e3      	ldr	r3, [r4, #12]
 80067b2:	9a03      	ldr	r2, [sp, #12]
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	42ab      	cmp	r3, r5
 80067b8:	dcf2      	bgt.n	80067a0 <_printf_i+0x1e8>
 80067ba:	e7eb      	b.n	8006794 <_printf_i+0x1dc>
 80067bc:	2500      	movs	r5, #0
 80067be:	f104 0919 	add.w	r9, r4, #25
 80067c2:	e7f5      	b.n	80067b0 <_printf_i+0x1f8>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ac      	bne.n	8006722 <_printf_i+0x16a>
 80067c8:	7803      	ldrb	r3, [r0, #0]
 80067ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d2:	e76c      	b.n	80066ae <_printf_i+0xf6>
 80067d4:	08006b03 	.word	0x08006b03
 80067d8:	08006b14 	.word	0x08006b14

080067dc <_sbrk_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4c06      	ldr	r4, [pc, #24]	; (80067f8 <_sbrk_r+0x1c>)
 80067e0:	2300      	movs	r3, #0
 80067e2:	4605      	mov	r5, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	f7ff fa92 	bl	8005d10 <_sbrk>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_sbrk_r+0x1a>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_sbrk_r+0x1a>
 80067f4:	602b      	str	r3, [r5, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20000418 	.word	0x20000418

080067fc <__ascii_wctomb>:
 80067fc:	b149      	cbz	r1, 8006812 <__ascii_wctomb+0x16>
 80067fe:	2aff      	cmp	r2, #255	; 0xff
 8006800:	bf85      	ittet	hi
 8006802:	238a      	movhi	r3, #138	; 0x8a
 8006804:	6003      	strhi	r3, [r0, #0]
 8006806:	700a      	strbls	r2, [r1, #0]
 8006808:	f04f 30ff 	movhi.w	r0, #4294967295
 800680c:	bf98      	it	ls
 800680e:	2001      	movls	r0, #1
 8006810:	4770      	bx	lr
 8006812:	4608      	mov	r0, r1
 8006814:	4770      	bx	lr

08006816 <memmove>:
 8006816:	4288      	cmp	r0, r1
 8006818:	b510      	push	{r4, lr}
 800681a:	eb01 0302 	add.w	r3, r1, r2
 800681e:	d807      	bhi.n	8006830 <memmove+0x1a>
 8006820:	1e42      	subs	r2, r0, #1
 8006822:	4299      	cmp	r1, r3
 8006824:	d00a      	beq.n	800683c <memmove+0x26>
 8006826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800682a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800682e:	e7f8      	b.n	8006822 <memmove+0xc>
 8006830:	4283      	cmp	r3, r0
 8006832:	d9f5      	bls.n	8006820 <memmove+0xa>
 8006834:	1881      	adds	r1, r0, r2
 8006836:	1ad2      	subs	r2, r2, r3
 8006838:	42d3      	cmn	r3, r2
 800683a:	d100      	bne.n	800683e <memmove+0x28>
 800683c:	bd10      	pop	{r4, pc}
 800683e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006842:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006846:	e7f7      	b.n	8006838 <memmove+0x22>

08006848 <__malloc_lock>:
 8006848:	4770      	bx	lr

0800684a <__malloc_unlock>:
 800684a:	4770      	bx	lr

0800684c <_realloc_r>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	4607      	mov	r7, r0
 8006850:	4614      	mov	r4, r2
 8006852:	460e      	mov	r6, r1
 8006854:	b921      	cbnz	r1, 8006860 <_realloc_r+0x14>
 8006856:	4611      	mov	r1, r2
 8006858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800685c:	f7ff bc8a 	b.w	8006174 <_malloc_r>
 8006860:	b922      	cbnz	r2, 800686c <_realloc_r+0x20>
 8006862:	f7ff fc39 	bl	80060d8 <_free_r>
 8006866:	4625      	mov	r5, r4
 8006868:	4628      	mov	r0, r5
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800686c:	f000 f814 	bl	8006898 <_malloc_usable_size_r>
 8006870:	42a0      	cmp	r0, r4
 8006872:	d20f      	bcs.n	8006894 <_realloc_r+0x48>
 8006874:	4621      	mov	r1, r4
 8006876:	4638      	mov	r0, r7
 8006878:	f7ff fc7c 	bl	8006174 <_malloc_r>
 800687c:	4605      	mov	r5, r0
 800687e:	2800      	cmp	r0, #0
 8006880:	d0f2      	beq.n	8006868 <_realloc_r+0x1c>
 8006882:	4631      	mov	r1, r6
 8006884:	4622      	mov	r2, r4
 8006886:	f7ff fadd 	bl	8005e44 <memcpy>
 800688a:	4631      	mov	r1, r6
 800688c:	4638      	mov	r0, r7
 800688e:	f7ff fc23 	bl	80060d8 <_free_r>
 8006892:	e7e9      	b.n	8006868 <_realloc_r+0x1c>
 8006894:	4635      	mov	r5, r6
 8006896:	e7e7      	b.n	8006868 <_realloc_r+0x1c>

08006898 <_malloc_usable_size_r>:
 8006898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800689c:	1f18      	subs	r0, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bfbc      	itt	lt
 80068a2:	580b      	ldrlt	r3, [r1, r0]
 80068a4:	18c0      	addlt	r0, r0, r3
 80068a6:	4770      	bx	lr

080068a8 <_init>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	bf00      	nop
 80068ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ae:	bc08      	pop	{r3}
 80068b0:	469e      	mov	lr, r3
 80068b2:	4770      	bx	lr

080068b4 <_fini>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	bf00      	nop
 80068b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ba:	bc08      	pop	{r3}
 80068bc:	469e      	mov	lr, r3
 80068be:	4770      	bx	lr
