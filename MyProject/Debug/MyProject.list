
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006620  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b28  08006b28  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b30  08006b30  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ip_code      00000000  08060000  08060000  000201dc  2**0
                  CONTENTS
 10 .bss          00000248  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124b4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002c3f  00000000  00000000  000326c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001140  00000000  00000000  00035300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000fc8  00000000  00000000  00036440  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00018659  00000000  00000000  00037408  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000e8d8  00000000  00000000  0004fa61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00093fb2  00000000  00000000  0005e339  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000f22eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c78  00000000  00000000  000f2368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067a8 	.word	0x080067a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080067a8 	.word	0x080067a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f8fa 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f005 fa6c 	bl	8005a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f005 f8dc 	bl	8005780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000004 	.word	0x20000004
 80005f8:	2000020c 	.word	0x2000020c

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000020c 	.word	0x2000020c

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db0b      	blt.n	80006a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 021f 	and.w	r2, r3, #31
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <__NVIC_EnableIRQ+0x38>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	095b      	lsrs	r3, r3, #5
 8000698:	2001      	movs	r0, #1
 800069a:	fa00 f202 	lsl.w	r2, r0, r2
 800069e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	db10      	blt.n	80006e8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f003 021f 	and.w	r2, r3, #31
 80006cc:	4909      	ldr	r1, [pc, #36]	; (80006f4 <__NVIC_DisableIRQ+0x40>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	095b      	lsrs	r3, r3, #5
 80006d4:	2001      	movs	r0, #1
 80006d6:	fa00 f202 	lsl.w	r2, r0, r2
 80006da:	3320      	adds	r3, #32
 80006dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006e4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff2a 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007da:	f7ff ff3f 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	6978      	ldr	r0, [r7, #20]
 80007e6:	f7ff ffb1 	bl	800074c <NVIC_EncodePriority>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff80 	bl	80006f8 <__NVIC_SetPriority>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff32 	bl	8000678 <__NVIC_EnableIRQ>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff42 	bl	80006b4 <__NVIC_DisableIRQ>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e00e      	b.n	8000868 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d105      	bne.n	8000860 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f004 ffb8 	bl	80057d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2201      	movs	r2, #1
 8000864:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2202      	movs	r2, #2
 8000884:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f042 0201 	orr.w	r2, r2, #1
 8000894:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e00a      	b.n	80008b2 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	441a      	add	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6812      	ldr	r2, [r2, #0]
 80008aa:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	3301      	adds	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3f0      	bcc.n	800089c <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2201      	movs	r2, #1
 80008c6:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80008c8:	693b      	ldr	r3, [r7, #16]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	371c      	adds	r7, #28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff fe8a 	bl	80005fc <HAL_GetTick>
 80008e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e099      	b.n	8000a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2202      	movs	r2, #2
 8000900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f022 0201 	bic.w	r2, r2, #1
 8000912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000914:	e00f      	b.n	8000936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000916:	f7ff fe71 	bl	80005fc <HAL_GetTick>
 800091a:	4602      	mov	r2, r0
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2b05      	cmp	r3, #5
 8000922:	d908      	bls.n	8000936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2220      	movs	r2, #32
 8000928:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2203      	movs	r2, #3
 800092e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e078      	b.n	8000a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1e8      	bne.n	8000916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <HAL_DMA_Init+0x158>)
 8000950:	4013      	ands	r3, r2
 8000952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800096e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800097a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a1b      	ldr	r3, [r3, #32]
 8000980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	4313      	orrs	r3, r2
 8000986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	2b04      	cmp	r3, #4
 800098e:	d107      	bne.n	80009a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4313      	orrs	r3, r2
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	4313      	orrs	r3, r2
 800099e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f023 0307 	bic.w	r3, r3, #7
 80009b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	4313      	orrs	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d117      	bne.n	80009fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00e      	beq.n	80009fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 fa91 	bl	8000f04 <DMA_CheckFifoParam>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2240      	movs	r2, #64	; 0x40
 80009ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009f6:	2301      	movs	r3, #1
 80009f8:	e016      	b.n	8000a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 fa48 	bl	8000e98 <DMA_CalcBaseAndBitshift>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a10:	223f      	movs	r2, #63	; 0x3f
 8000a12:	409a      	lsls	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2201      	movs	r2, #1
 8000a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	f010803f 	.word	0xf010803f

08000a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d101      	bne.n	8000a5a <HAL_DMA_Start_IT+0x26>
 8000a56:	2302      	movs	r3, #2
 8000a58:	e040      	b.n	8000adc <HAL_DMA_Start_IT+0xa8>
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d12f      	bne.n	8000ace <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2202      	movs	r2, #2
 8000a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f000 f9da 	bl	8000e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8c:	223f      	movs	r2, #63	; 0x3f
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f042 0216 	orr.w	r2, r2, #22
 8000aa2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d007      	beq.n	8000abc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f042 0208 	orr.w	r2, r2, #8
 8000aba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0201 	orr.w	r2, r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	e005      	b.n	8000ada <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d004      	beq.n	8000b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00c      	b.n	8000b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2205      	movs	r2, #5
 8000b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0201 	bic.w	r2, r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b34:	4b92      	ldr	r3, [pc, #584]	; (8000d80 <HAL_DMA_IRQHandler+0x258>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a92      	ldr	r2, [pc, #584]	; (8000d84 <HAL_DMA_IRQHandler+0x25c>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0a9b      	lsrs	r3, r3, #10
 8000b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b52:	2208      	movs	r2, #8
 8000b54:	409a      	lsls	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d01a      	beq.n	8000b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d013      	beq.n	8000b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 0204 	bic.w	r2, r2, #4
 8000b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b80:	2208      	movs	r2, #8
 8000b82:	409a      	lsls	r2, r3
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b8c:	f043 0201 	orr.w	r2, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b98:	2201      	movs	r2, #1
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d012      	beq.n	8000bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00b      	beq.n	8000bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc2:	f043 0202 	orr.w	r2, r3, #2
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bce:	2204      	movs	r2, #4
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d012      	beq.n	8000c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00b      	beq.n	8000c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bec:	2204      	movs	r2, #4
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf8:	f043 0204 	orr.w	r2, r3, #4
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c04:	2210      	movs	r2, #16
 8000c06:	409a      	lsls	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d043      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d03c      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c22:	2210      	movs	r2, #16
 8000c24:	409a      	lsls	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d018      	beq.n	8000c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d108      	bne.n	8000c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d024      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	4798      	blx	r3
 8000c56:	e01f      	b.n	8000c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d01b      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	4798      	blx	r3
 8000c68:	e016      	b.n	8000c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d107      	bne.n	8000c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 0208 	bic.w	r2, r2, #8
 8000c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 808e 	beq.w	8000dc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 8086 	beq.w	8000dc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	d136      	bne.n	8000d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0216 	bic.w	r2, r2, #22
 8000ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d103      	bne.n	8000d02 <HAL_DMA_IRQHandler+0x1da>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d007      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0208 	bic.w	r2, r2, #8
 8000d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d16:	223f      	movs	r2, #63	; 0x3f
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d07d      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	4798      	blx	r3
        }
        return;
 8000d3e:	e078      	b.n	8000e32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d01c      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d108      	bne.n	8000d6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d030      	beq.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	4798      	blx	r3
 8000d6c:	e02b      	b.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d027      	beq.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	4798      	blx	r3
 8000d7e:	e022      	b.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
 8000d80:	20000008 	.word	0x20000008
 8000d84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10f      	bne.n	8000db6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0210 	bic.w	r2, r2, #16
 8000da4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d032      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d022      	beq.n	8000e20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2205      	movs	r2, #5
 8000dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0201 	bic.w	r2, r2, #1
 8000df0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d307      	bcc.n	8000e0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f2      	bne.n	8000df2 <HAL_DMA_IRQHandler+0x2ca>
 8000e0c:	e000      	b.n	8000e10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000e0e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4798      	blx	r3
 8000e30:	e000      	b.n	8000e34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000e32:	bf00      	nop
    }
  }
}
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop

08000e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b40      	cmp	r3, #64	; 0x40
 8000e68:	d108      	bne.n	8000e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e7a:	e007      	b.n	8000e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68ba      	ldr	r2, [r7, #8]
 8000e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	60da      	str	r2, [r3, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	3b10      	subs	r3, #16
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <DMA_CalcBaseAndBitshift+0x64>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <DMA_CalcBaseAndBitshift+0x68>)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d909      	bls.n	8000eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ece:	f023 0303 	bic.w	r3, r3, #3
 8000ed2:	1d1a      	adds	r2, r3, #4
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8000ed8:	e007      	b.n	8000eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ee2:	f023 0303 	bic.w	r3, r3, #3
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	aaaaaaab 	.word	0xaaaaaaab
 8000f00:	08006938 	.word	0x08006938

08000f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d11f      	bne.n	8000f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d855      	bhi.n	8000fd0 <DMA_CheckFifoParam+0xcc>
 8000f24:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <DMA_CheckFifoParam+0x28>)
 8000f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2a:	bf00      	nop
 8000f2c:	08000f3d 	.word	0x08000f3d
 8000f30:	08000f4f 	.word	0x08000f4f
 8000f34:	08000f3d 	.word	0x08000f3d
 8000f38:	08000fd1 	.word	0x08000fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d045      	beq.n	8000fd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f4c:	e042      	b.n	8000fd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f56:	d13f      	bne.n	8000fd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f5c:	e03c      	b.n	8000fd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f66:	d121      	bne.n	8000fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d836      	bhi.n	8000fdc <DMA_CheckFifoParam+0xd8>
 8000f6e:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <DMA_CheckFifoParam+0x70>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000f85 	.word	0x08000f85
 8000f78:	08000f8b 	.word	0x08000f8b
 8000f7c:	08000f85 	.word	0x08000f85
 8000f80:	08000f9d 	.word	0x08000f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
      break;
 8000f88:	e02f      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d024      	beq.n	8000fe0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f9a:	e021      	b.n	8000fe0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000fa4:	d11e      	bne.n	8000fe4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000faa:	e01b      	b.n	8000fe4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d902      	bls.n	8000fb8 <DMA_CheckFifoParam+0xb4>
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d003      	beq.n	8000fbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000fb6:	e018      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
      break;
 8000fbc:	e015      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00e      	beq.n	8000fe8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8000fce:	e00b      	b.n	8000fe8 <DMA_CheckFifoParam+0xe4>
      break;
 8000fd0:	bf00      	nop
 8000fd2:	e00a      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fd4:	bf00      	nop
 8000fd6:	e008      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fd8:	bf00      	nop
 8000fda:	e006      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fdc:	bf00      	nop
 8000fde:	e004      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fe0:	bf00      	nop
 8000fe2:	e002      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;   
 8000fe4:	bf00      	nop
 8000fe6:	e000      	b.n	8000fea <DMA_CheckFifoParam+0xe6>
      break;
 8000fe8:	bf00      	nop
    }
  } 
  
  return status; 
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <HAL_FLASH_Program+0xa0>)
 800100c:	7e1b      	ldrb	r3, [r3, #24]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_FLASH_Program+0x1e>
 8001012:	2302      	movs	r3, #2
 8001014:	e03b      	b.n	800108e <HAL_FLASH_Program+0x96>
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_FLASH_Program+0xa0>)
 8001018:	2201      	movs	r2, #1
 800101a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800101c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001020:	f000 f8b0 	bl	8001184 <FLASH_WaitForLastOperation>
 8001024:	4603      	mov	r3, r0
 8001026:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d12b      	bne.n	8001086 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001034:	783b      	ldrb	r3, [r7, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f000 f959 	bl	80012f0 <FLASH_Program_Byte>
 800103e:	e016      	b.n	800106e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d105      	bne.n	8001052 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001046:	883b      	ldrh	r3, [r7, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	68b8      	ldr	r0, [r7, #8]
 800104c:	f000 f92c 	bl	80012a8 <FLASH_Program_HalfWord>
 8001050:	e00d      	b.n	800106e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d105      	bne.n	8001064 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f000 f901 	bl	8001264 <FLASH_Program_Word>
 8001062:	e004      	b.n	800106e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001068:	68b8      	ldr	r0, [r7, #8]
 800106a:	f000 f8cb 	bl	8001204 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800106e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001072:	f000 f887 	bl	8001184 <FLASH_WaitForLastOperation>
 8001076:	4603      	mov	r3, r0
 8001078:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_FLASH_Program+0xa4>)
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_FLASH_Program+0xa4>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <HAL_FLASH_Program+0xa0>)
 8001088:	2200      	movs	r2, #0
 800108a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800108c:	7dfb      	ldrb	r3, [r7, #23]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000210 	.word	0x20000210
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_FLASH_Unlock+0x38>)
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da0b      	bge.n	80010ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_FLASH_Unlock+0x38>)
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_FLASH_Unlock+0x3c>)
 80010b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <HAL_FLASH_Unlock+0x38>)
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <HAL_FLASH_Unlock+0x40>)
 80010bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_FLASH_Unlock+0x38>)
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	da01      	bge.n	80010ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40023c00 	.word	0x40023c00
 80010dc:	45670123 	.word	0x45670123
 80010e0:	cdef89ab 	.word	0xcdef89ab

080010e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_FLASH_Lock+0x1c>)
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_FLASH_Lock+0x1c>)
 80010ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_FLASH_OB_Unlock+0x2c>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_FLASH_OB_Unlock+0x2c>)
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_FLASH_OB_Unlock+0x30>)
 8001118:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_FLASH_OB_Unlock+0x2c>)
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_FLASH_OB_Unlock+0x34>)
 800111e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001120:	2300      	movs	r3, #0
 8001122:	e000      	b.n	8001126 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40023c00 	.word	0x40023c00
 8001134:	08192a3b 	.word	0x08192a3b
 8001138:	4c5d6e7f 	.word	0x4c5d6e7f

0800113c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_FLASH_OB_Lock+0x1c>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_FLASH_OB_Lock+0x1c>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40023c00 	.word	0x40023c00

0800115c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_FLASH_OB_Launch+0x24>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_FLASH_OB_Launch+0x24>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8001170:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001174:	f000 f806 	bl	8001184 <FLASH_WaitForLastOperation>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c14 	.word	0x40023c14

08001184 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <FLASH_WaitForLastOperation+0x78>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001196:	f7ff fa31 	bl	80005fc <HAL_GetTick>
 800119a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800119c:	e010      	b.n	80011c0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d00c      	beq.n	80011c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <FLASH_WaitForLastOperation+0x38>
 80011ac:	f7ff fa26 	bl	80005fc <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d201      	bcs.n	80011c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e019      	b.n	80011f4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <FLASH_WaitForLastOperation+0x7c>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e8      	bne.n	800119e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <FLASH_WaitForLastOperation+0x7c>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <FLASH_WaitForLastOperation+0x7c>)
 80011da:	2201      	movs	r2, #1
 80011dc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <FLASH_WaitForLastOperation+0x7c>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80011ea:	f000 f8a3 	bl	8001334 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
  
}  
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000210 	.word	0x20000210
 8001200:	40023c00 	.word	0x40023c00

08001204 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001204:	b490      	push	{r4, r7}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 8001216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800121a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 8001222:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001226:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <FLASH_Program_DoubleWord+0x5c>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800123e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	f04f 0400 	mov.w	r4, #0
 800124a:	0013      	movs	r3, r2
 800124c:	2400      	movs	r4, #0
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	3204      	adds	r2, #4
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bc90      	pop	{r4, r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00

08001264 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001278:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <FLASH_Program_Word+0x40>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001284:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <FLASH_Program_Word+0x40>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	4a09      	ldr	r2, [pc, #36]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	801a      	strh	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <FLASH_Program_Byte+0x40>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <FLASH_Program_Byte+0x40>)
 8001302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001306:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <FLASH_Program_Byte+0x40>)
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <FLASH_Program_Byte+0x40>)
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <FLASH_Program_Byte+0x40>)
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <FLASH_Program_Byte+0x40>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	701a      	strb	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00

08001334 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 800134e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001352:	2210      	movs	r2, #16
 8001354:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d008      	beq.n	8001374 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	4a24      	ldr	r2, [pc, #144]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 800136c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001370:	2220      	movs	r2, #32
 8001372:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 800138a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013a8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	60da      	str	r2, [r3, #12]
  }
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40023c00 	.word	0x40023c00
 80013fc:	20000210 	.word	0x20000210

08001400 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <HAL_FLASHEx_OBProgram+0xd8>)
 800140e:	7e1b      	ldrb	r3, [r3, #24]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_FLASHEx_OBProgram+0x18>
 8001414:	2302      	movs	r3, #2
 8001416:	e05b      	b.n	80014d0 <HAL_FLASHEx_OBProgram+0xd0>
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_FLASHEx_OBProgram+0xd8>)
 800141a:	2201      	movs	r2, #1
 800141c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d018      	beq.n	800145c <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d10a      	bne.n	8001448 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f000 f8b9 	bl	80015b4 <FLASH_OB_EnableWRP>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e009      	b.n	800145c <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4619      	mov	r1, r3
 8001452:	4610      	mov	r0, r2
 8001454:	f000 f8d0 	bl	80015f8 <FLASH_OB_DisableWRP>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f8e2 	bl	8001638 <FLASH_OB_RDP_LevelConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7e1b      	ldrb	r3, [r3, #24]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001496:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 800149c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	f000 f8e2 	bl	800166c <FLASH_OB_UserConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f904 	bl	80016cc <FLASH_OB_BOR_LevelConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_FLASHEx_OBProgram+0xd8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	761a      	strb	r2, [r3, #24]

  return status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000210 	.word	0x20000210

080014dc <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	220f      	movs	r2, #15
 80014e8:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80014ea:	f000 f91d 	bl	8001728 <FLASH_OB_GetWRP>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80014f6:	f000 f923 	bl	8001740 <FLASH_OB_GetRDP>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001502:	f000 f901 	bl	8001708 <FLASH_OB_GetUser>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800150e:	f000 f937 	bl	8001780 <FLASH_OB_GetBOR>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	615a      	str	r2, [r3, #20]
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e010      	b.n	8001562 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d103      	bne.n	800154e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e009      	b.n	8001562 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d103      	bne.n	800155c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e002      	b.n	8001562 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800155c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001560:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	490f      	ldr	r1, [pc, #60]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001580:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001584:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4313      	orrs	r3, r2
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <FLASH_Erase_Sector+0x8c>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6113      	str	r3, [r2, #16]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015c6:	f7ff fddd 	bl	8001184 <FLASH_WaitForLastOperation>
 80015ca:	4603      	mov	r3, r0
 80015cc:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10a      	bne.n	80015ea <FLASH_OB_EnableWRP+0x36>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <FLASH_OB_EnableWRP+0x40>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4904      	ldr	r1, [pc, #16]	; (80015f4 <FLASH_OB_EnableWRP+0x40>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023c16 	.word	0x40023c16

080015f8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001606:	f24c 3050 	movw	r0, #50000	; 0xc350
 800160a:	f7ff fdbb 	bl	8001184 <FLASH_WaitForLastOperation>
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d108      	bne.n	800162a <FLASH_OB_DisableWRP+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <FLASH_OB_DisableWRP+0x3c>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4904      	ldr	r1, [pc, #16]	; (8001634 <FLASH_OB_DisableWRP+0x3c>)
 8001624:	4313      	orrs	r3, r2
 8001626:	b29b      	uxth	r3, r3
 8001628:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023c16 	.word	0x40023c16

08001638 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001646:	f24c 3050 	movw	r0, #50000	; 0xc350
 800164a:	f7ff fd9b 	bl	8001184 <FLASH_WaitForLastOperation>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <FLASH_OB_RDP_LevelConfig+0x30>)
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023c15 	.word	0x40023c15

0800166c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	460b      	mov	r3, r1
 8001678:	71bb      	strb	r3, [r7, #6]
 800167a:	4613      	mov	r3, r2
 800167c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800167e:	23ff      	movs	r3, #255	; 0xff
 8001680:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001686:	f24c 3050 	movw	r0, #50000	; 0xc350
 800168a:	f7ff fd7b 	bl	8001184 <FLASH_WaitForLastOperation>
 800168e:	4603      	mov	r3, r0
 8001690:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d111      	bne.n	80016bc <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <FLASH_OB_UserConfig+0x5c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 80016a4:	79ba      	ldrb	r2, [r7, #6]
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4905      	ldr	r1, [pc, #20]	; (80016c8 <FLASH_OB_UserConfig+0x5c>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c14 	.word	0x40023c14

080016cc <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <FLASH_OB_BOR_LevelConfig+0x38>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4a09      	ldr	r2, [pc, #36]	; (8001704 <FLASH_OB_BOR_LevelConfig+0x38>)
 80016de:	f023 030c 	bic.w	r3, r3, #12
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <FLASH_OB_BOR_LevelConfig+0x38>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4905      	ldr	r1, [pc, #20]	; (8001704 <FLASH_OB_BOR_LevelConfig+0x38>)
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
  
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023c14 	.word	0x40023c14

08001708 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <FLASH_OB_GetUser+0x1c>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f023 031f 	bic.w	r3, r3, #31
 8001716:	b2db      	uxtb	r3, r3
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <FLASH_OB_GetWRP+0x14>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40023c16 	.word	0x40023c16

08001740 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001746:	23aa      	movs	r3, #170	; 0xaa
 8001748:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <FLASH_OB_GetRDP+0x3c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2bcc      	cmp	r3, #204	; 0xcc
 8001752:	d102      	bne.n	800175a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001754:	23cc      	movs	r3, #204	; 0xcc
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	e009      	b.n	800176e <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <FLASH_OB_GetRDP+0x3c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2baa      	cmp	r3, #170	; 0xaa
 8001762:	d102      	bne.n	800176a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001764:	23aa      	movs	r3, #170	; 0xaa
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	e001      	b.n	800176e <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800176a:	2355      	movs	r3, #85	; 0x55
 800176c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800176e:	79fb      	ldrb	r3, [r7, #7]
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40023c15 	.word	0x40023c15

08001780 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <FLASH_OB_GetBOR+0x1c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	b2db      	uxtb	r3, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023c14 	.word	0x40023c14

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e159      	b.n	8001a70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8148 	bne.w	8001a6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d00b      	beq.n	80017fa <HAL_GPIO_Init+0x5a>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ee:	2b11      	cmp	r3, #17
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0xfc>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b12      	cmp	r3, #18
 800189a:	d123      	bne.n	80018e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	69b9      	ldr	r1, [r7, #24]
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a2 	beq.w	8001a6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001942:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2ec>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x202>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x1fe>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_GPIO_Init+0x2f4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x1fa>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x1f6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a44      	ldr	r2, [pc, #272]	; (8001a9c <HAL_GPIO_Init+0x2fc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x1f2>
 800198e:	2304      	movs	r3, #4
 8001990:	e008      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 8001992:	2307      	movs	r3, #7
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 8001996:	2303      	movs	r3, #3
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x204>
 80019a2:	2300      	movs	r3, #0
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f002 0203 	and.w	r2, r2, #3
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b4:	4934      	ldr	r1, [pc, #208]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e6:	4a2e      	ldr	r2, [pc, #184]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ec:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	f67f aea2 	bls.w	80017bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3724      	adds	r7, #36	; 0x24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac0:	e003      	b.n	8001aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	619a      	str	r2, [r3, #24]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e25b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d075      	beq.n	8001be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af6:	4ba3      	ldr	r3, [pc, #652]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d00c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b02:	4ba0      	ldr	r3, [pc, #640]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d112      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4b9d      	ldr	r3, [pc, #628]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1a:	d10b      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1c:	4b99      	ldr	r3, [pc, #612]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d05b      	beq.n	8001be0 <HAL_RCC_OscConfig+0x108>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d157      	bne.n	8001be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e236      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3c:	d106      	bne.n	8001b4c <HAL_RCC_OscConfig+0x74>
 8001b3e:	4b91      	ldr	r3, [pc, #580]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a90      	ldr	r2, [pc, #576]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e01d      	b.n	8001b88 <HAL_RCC_OscConfig+0xb0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x98>
 8001b56:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a8a      	ldr	r2, [pc, #552]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a87      	ldr	r2, [pc, #540]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0xb0>
 8001b70:	4b84      	ldr	r3, [pc, #528]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a83      	ldr	r2, [pc, #524]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b81      	ldr	r3, [pc, #516]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a80      	ldr	r2, [pc, #512]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe fd34 	bl	80005fc <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b98:	f7fe fd30 	bl	80005fc <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e1fb      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b76      	ldr	r3, [pc, #472]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0xc0>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7fe fd20 	bl	80005fc <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7fe fd1c 	bl	80005fc <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1e7      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b6c      	ldr	r3, [pc, #432]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xe8>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bee:	4b65      	ldr	r3, [pc, #404]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfa:	4b62      	ldr	r3, [pc, #392]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b5f      	ldr	r3, [pc, #380]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	4b5c      	ldr	r3, [pc, #368]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x152>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e1bb      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b56      	ldr	r3, [pc, #344]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4952      	ldr	r1, [pc, #328]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	e03a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <HAL_RCC_OscConfig+0x2b0>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fcd5 	bl	80005fc <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c56:	f7fe fcd1 	bl	80005fc <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e19c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4940      	ldr	r1, [pc, #256]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <HAL_RCC_OscConfig+0x2b0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7fe fcb4 	bl	80005fc <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c98:	f7fe fcb0 	bl	80005fc <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e17b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d030      	beq.n	8001d24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d016      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cca:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_RCC_OscConfig+0x2b4>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7fe fc94 	bl	80005fc <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7fe fc90 	bl	80005fc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e15b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x200>
 8001cf6:	e015      	b.n	8001d24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_OscConfig+0x2b4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7fe fc7d 	bl	80005fc <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d06:	f7fe fc79 	bl	80005fc <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e144      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80a0 	beq.w	8001e72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_OscConfig+0x2b8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d121      	bne.n	8001db2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_RCC_OscConfig+0x2b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_RCC_OscConfig+0x2b8>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7a:	f7fe fc3f 	bl	80005fc <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	e011      	b.n	8001da6 <HAL_RCC_OscConfig+0x2ce>
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	42470000 	.word	0x42470000
 8001d8c:	42470e80 	.word	0x42470e80
 8001d90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d94:	f7fe fc32 	bl	80005fc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0fd      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b81      	ldr	r3, [pc, #516]	; (8001fac <HAL_RCC_OscConfig+0x4d4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
 8001dba:	4b7d      	ldr	r3, [pc, #500]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a7c      	ldr	r2, [pc, #496]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	e01c      	b.n	8001e02 <HAL_RCC_OscConfig+0x32a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x312>
 8001dd0:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	4a76      	ldr	r2, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6713      	str	r3, [r2, #112]	; 0x70
 8001ddc:	4b74      	ldr	r3, [pc, #464]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a73      	ldr	r2, [pc, #460]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x32a>
 8001dea:	4b71      	ldr	r3, [pc, #452]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a70      	ldr	r2, [pc, #448]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
 8001df6:	4b6e      	ldr	r3, [pc, #440]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a6d      	ldr	r2, [pc, #436]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fbf7 	bl	80005fc <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7fe fbf3 	bl	80005fc <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0bc      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ee      	beq.n	8001e12 <HAL_RCC_OscConfig+0x33a>
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe fbe1 	bl	80005fc <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fbdd 	bl	80005fc <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0a6      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b52      	ldr	r3, [pc, #328]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a51      	ldr	r2, [pc, #324]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8092 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e7c:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d05c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d141      	bne.n	8001f14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <HAL_RCC_OscConfig+0x4dc>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7fe fbb1 	bl	80005fc <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe fbad 	bl	80005fc <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e078      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb0:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	019b      	lsls	r3, r3, #6
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	4933      	ldr	r1, [pc, #204]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_RCC_OscConfig+0x4dc>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7fe fb86 	bl	80005fc <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe fb82 	bl	80005fc <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e04d      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x41c>
 8001f12:	e045      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x4dc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7fe fb6f 	bl	80005fc <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7fe fb6b 	bl	80005fc <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e036      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x44a>
 8001f40:	e02e      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e029      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_RCC_OscConfig+0x4d8>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d11c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d115      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f76:	4013      	ands	r3, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10d      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	42470060 	.word	0x42470060

08001fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0cc      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d90c      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b65      	ldr	r3, [pc, #404]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0b8      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800200c:	4b59      	ldr	r3, [pc, #356]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800202e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b50      	ldr	r3, [pc, #320]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	494d      	ldr	r1, [pc, #308]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d044      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d119      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e07f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d003      	beq.n	8002076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002072:	2b03      	cmp	r3, #3
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e067      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4934      	ldr	r1, [pc, #208]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7fe faa8 	bl	80005fc <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7fe faa4 	bl	80005fc <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e04f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 020c 	and.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1eb      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d20c      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e032      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4916      	ldr	r1, [pc, #88]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	490e      	ldr	r1, [pc, #56]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800213e:	f000 f821 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002142:	4601      	mov	r1, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	fa21 f303 	lsr.w	r3, r1, r3
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fc9c 	bl	8005a9c <HAL_InitTick>

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00
 8002174:	40023800 	.word	0x40023800
 8002178:	080069d0 	.word	0x080069d0
 800217c:	20000008 	.word	0x20000008
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800219a:	4b63      	ldr	r3, [pc, #396]	; (8002328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d007      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x32>
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d008      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x38>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 80b4 	bne.w	8002318 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b5e      	ldr	r3, [pc, #376]	; (800232c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021b2:	60bb      	str	r3, [r7, #8]
       break;
 80021b4:	e0b3      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b5e      	ldr	r3, [pc, #376]	; (8002330 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021b8:	60bb      	str	r3, [r7, #8]
      break;
 80021ba:	e0b0      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021bc:	4b5a      	ldr	r3, [pc, #360]	; (8002328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c6:	4b58      	ldr	r3, [pc, #352]	; (8002328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d04a      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d2:	4b55      	ldr	r3, [pc, #340]	; (8002328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	f04f 0400 	mov.w	r4, #0
 80021dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	ea03 0501 	and.w	r5, r3, r1
 80021e8:	ea04 0602 	and.w	r6, r4, r2
 80021ec:	4629      	mov	r1, r5
 80021ee:	4632      	mov	r2, r6
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	f04f 0400 	mov.w	r4, #0
 80021f8:	0154      	lsls	r4, r2, #5
 80021fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021fe:	014b      	lsls	r3, r1, #5
 8002200:	4619      	mov	r1, r3
 8002202:	4622      	mov	r2, r4
 8002204:	1b49      	subs	r1, r1, r5
 8002206:	eb62 0206 	sbc.w	r2, r2, r6
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	f04f 0400 	mov.w	r4, #0
 8002212:	0194      	lsls	r4, r2, #6
 8002214:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002218:	018b      	lsls	r3, r1, #6
 800221a:	1a5b      	subs	r3, r3, r1
 800221c:	eb64 0402 	sbc.w	r4, r4, r2
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	00e2      	lsls	r2, r4, #3
 800222a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800222e:	00d9      	lsls	r1, r3, #3
 8002230:	460b      	mov	r3, r1
 8002232:	4614      	mov	r4, r2
 8002234:	195b      	adds	r3, r3, r5
 8002236:	eb44 0406 	adc.w	r4, r4, r6
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	0262      	lsls	r2, r4, #9
 8002244:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002248:	0259      	lsls	r1, r3, #9
 800224a:	460b      	mov	r3, r1
 800224c:	4614      	mov	r4, r2
 800224e:	4618      	mov	r0, r3
 8002250:	4621      	mov	r1, r4
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f04f 0400 	mov.w	r4, #0
 8002258:	461a      	mov	r2, r3
 800225a:	4623      	mov	r3, r4
 800225c:	f7fe f818 	bl	8000290 <__aeabi_uldivmod>
 8002260:	4603      	mov	r3, r0
 8002262:	460c      	mov	r4, r1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e049      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002268:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	ea03 0501 	and.w	r5, r3, r1
 800227e:	ea04 0602 	and.w	r6, r4, r2
 8002282:	4629      	mov	r1, r5
 8002284:	4632      	mov	r2, r6
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	f04f 0400 	mov.w	r4, #0
 800228e:	0154      	lsls	r4, r2, #5
 8002290:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002294:	014b      	lsls	r3, r1, #5
 8002296:	4619      	mov	r1, r3
 8002298:	4622      	mov	r2, r4
 800229a:	1b49      	subs	r1, r1, r5
 800229c:	eb62 0206 	sbc.w	r2, r2, r6
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	f04f 0400 	mov.w	r4, #0
 80022a8:	0194      	lsls	r4, r2, #6
 80022aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022ae:	018b      	lsls	r3, r1, #6
 80022b0:	1a5b      	subs	r3, r3, r1
 80022b2:	eb64 0402 	sbc.w	r4, r4, r2
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	00e2      	lsls	r2, r4, #3
 80022c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022c4:	00d9      	lsls	r1, r3, #3
 80022c6:	460b      	mov	r3, r1
 80022c8:	4614      	mov	r4, r2
 80022ca:	195b      	adds	r3, r3, r5
 80022cc:	eb44 0406 	adc.w	r4, r4, r6
 80022d0:	f04f 0100 	mov.w	r1, #0
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	02a2      	lsls	r2, r4, #10
 80022da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022de:	0299      	lsls	r1, r3, #10
 80022e0:	460b      	mov	r3, r1
 80022e2:	4614      	mov	r4, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	4621      	mov	r1, r4
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f04f 0400 	mov.w	r4, #0
 80022ee:	461a      	mov	r2, r3
 80022f0:	4623      	mov	r3, r4
 80022f2:	f7fd ffcd 	bl	8000290 <__aeabi_uldivmod>
 80022f6:	4603      	mov	r3, r0
 80022f8:	460c      	mov	r4, r1
 80022fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	3301      	adds	r3, #1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	60bb      	str	r3, [r7, #8]
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800231a:	60bb      	str	r3, [r7, #8]
      break;
 800231c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231e:	68bb      	ldr	r3, [r7, #8]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	00f42400 	.word	0x00f42400
 8002330:	007a1200 	.word	0x007a1200

08002334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_RCC_GetHCLKFreq+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000008 	.word	0x20000008

0800234c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002350:	f7ff fff0 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002354:	4601      	mov	r1, r0
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	0a9b      	lsrs	r3, r3, #10
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4a03      	ldr	r2, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002362:	5cd3      	ldrb	r3, [r2, r3]
 8002364:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	080069e0 	.word	0x080069e0

08002374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002378:	f7ff ffdc 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 800237c:	4601      	mov	r1, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	0b5b      	lsrs	r3, r3, #13
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40023800 	.word	0x40023800
 8002398:	080069e0 	.word	0x080069e0

0800239c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	220f      	movs	r2, #15
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_RCC_GetClockConfig+0x5c>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0203 	and.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_RCC_GetClockConfig+0x5c>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_RCC_GetClockConfig+0x5c>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_GetClockConfig+0x5c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	08db      	lsrs	r3, r3, #3
 80023d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_RCC_GetClockConfig+0x60>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 020f 	and.w	r2, r3, #15
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40023c00 	.word	0x40023c00

08002400 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002424:	2b00      	cmp	r3, #0
 8002426:	d038      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800242e:	f7fe f8e5 	bl	80005fc <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002436:	f7fe f8e1 	bl	80005fc <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0bd      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002448:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f0      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	019b      	lsls	r3, r3, #6
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	071b      	lsls	r3, r3, #28
 8002466:	495a      	ldr	r1, [pc, #360]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800246e:	4b57      	ldr	r3, [pc, #348]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002474:	f7fe f8c2 	bl	80005fc <HAL_GetTick>
 8002478:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800247c:	f7fe f8be 	bl	80005fc <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e09a      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800248e:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8083 	beq.w	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4b48      	ldr	r3, [pc, #288]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	4a47      	ldr	r2, [pc, #284]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6413      	str	r3, [r2, #64]	; 0x40
 80024b8:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a42      	ldr	r2, [pc, #264]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024d0:	f7fe f894 	bl	80005fc <HAL_GetTick>
 80024d4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024d8:	f7fe f890 	bl	80005fc <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e06c      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024ea:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d02f      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	429a      	cmp	r2, r3
 8002512:	d028      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002514:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800251e:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002524:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800252a:	4a29      	ldr	r2, [pc, #164]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d114      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe f85e 	bl	80005fc <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002542:	e00a      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fe f85a 	bl	80005fc <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e034      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0ee      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002572:	d10d      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	4911      	ldr	r1, [pc, #68]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
 800258e:	e005      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800259a:	6093      	str	r3, [r2, #8]
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	4909      	ldr	r1, [pc, #36]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7d1a      	ldrb	r2, [r3, #20]
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80025c0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	42470068 	.word	0x42470068
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40007000 	.word	0x40007000
 80025d8:	42470e40 	.word	0x42470e40
 80025dc:	424711e0 	.word	0x424711e0

080025e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e083      	b.n	80026fa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7f5b      	ldrb	r3, [r3, #29]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f003 f906 	bl	8005814 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	22ca      	movs	r2, #202	; 0xca
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2253      	movs	r2, #83	; 0x53
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fc26 	bl	8002e70 <RTC_EnterInitMode>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e05e      	b.n	80026fa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800264a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800264e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	041a      	lsls	r2, r3, #16
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800269a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10e      	bne.n	80026c8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fbb8 	bl	8002e20 <HAL_RTC_WaitForSynchro>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	22ff      	movs	r2, #255	; 0xff
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2204      	movs	r2, #4
 80026c2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e018      	b.n	80026fa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	22ff      	movs	r2, #255	; 0xff
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
  }
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_RTC_DeInit>:
  *                the configuration information for RTC.
  * @note   This function doesn't reset the RTC Backup Data registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	22ca      	movs	r2, #202	; 0xca
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2253      	movs	r2, #83	; 0x53
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fba2 	bl	8002e70 <RTC_EnterInitMode>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_RTC_DeInit+0x40>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	22ff      	movs	r2, #255	; 0xff
 8002738:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2204      	movs	r2, #4
 800273e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e084      	b.n	800284e <HAL_RTC_DeInit+0x14a>
  }
  else
  {
    /* Reset TR, DR and CR registers */
    hrtc->Instance->TR = 0x00000000U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hrtc->Instance->DR = 0x00002101U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f242 1201 	movw	r2, #8449	; 0x2101
 8002754:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    hrtc->Instance->CR &= 0x00000007U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 0207 	and.w	r2, r2, #7
 8002764:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002766:	f7fd ff49 	bl	80005fc <HAL_GetTick>
 800276a:	60f8      	str	r0, [r7, #12]

    /* Wait till WUTWF flag is set and if Time out is reached exit */
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 800276c:	e010      	b.n	8002790 <HAL_RTC_DeInit+0x8c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800276e:	f7fd ff45 	bl	80005fc <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800277c:	d908      	bls.n	8002790 <HAL_RTC_DeInit+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	22ff      	movs	r2, #255	; 0xff
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2203      	movs	r2, #3
 800278a:	775a      	strb	r2, [r3, #29]

        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e05e      	b.n	800284e <HAL_RTC_DeInit+0x14a>
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0e7      	beq.n	800276e <HAL_RTC_DeInit+0x6a>
      }
    }

    /* Reset all RTC CR register bits */
    hrtc->Instance->CR &= 0x00000000U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
    hrtc->Instance->WUTR = 0x0000FFFFU;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b4:	615a      	str	r2, [r3, #20]
    hrtc->Instance->PRER = 0x007F00FFU;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_RTC_DeInit+0x154>)
 80027bc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->CALIBR = 0x00000000U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
    hrtc->Instance->ALRMAR = 0x00000000U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
    hrtc->Instance->ALRMBR = 0x00000000U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2200      	movs	r2, #0
 80027d4:	621a      	str	r2, [r3, #32]
    hrtc->Instance->SHIFTR = 0x00000000U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2200      	movs	r2, #0
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Instance->CALR = 0x00000000U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2200      	movs	r2, #0
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c
    hrtc->Instance->ALRMASSR = 0x00000000U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
    hrtc->Instance->ALRMBSSR = 0x00000000U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	649a      	str	r2, [r3, #72]	; 0x48

    /* Reset ISR register and exit initialization mode */
    hrtc->Instance->ISR = 0x00000000U;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]

    /* Reset Tamper and alternate functions configuration register */
    hrtc->Instance->TAFCR = 0x00000000U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	; 0x40

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10e      	bne.n	8002832 <HAL_RTC_DeInit+0x12e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fb03 	bl	8002e20 <HAL_RTC_WaitForSynchro>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RTC_DeInit+0x12e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	22ff      	movs	r2, #255	; 0xff
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2204      	movs	r2, #4
 800282c:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e00d      	b.n	800284e <HAL_RTC_DeInit+0x14a>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	22ff      	movs	r2, #255	; 0xff
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  hrtc->MspDeInitCallback(hrtc);

#else
  /* De-Initialize RTC MSP */
  HAL_RTC_MspDeInit(hrtc);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f003 f806 	bl	800584c <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  hrtc->State = HAL_RTC_STATE_RESET;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	775a      	strb	r2, [r3, #29]

  /* Release Lock */
  __HAL_UNLOCK(hrtc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	007f00ff 	.word	0x007f00ff

0800285c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	7f1b      	ldrb	r3, [r3, #28]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_RTC_SetTime+0x1c>
 8002874:	2302      	movs	r3, #2
 8002876:	e0aa      	b.n	80029ce <HAL_RTC_SetTime+0x172>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2202      	movs	r2, #2
 8002882:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d126      	bne.n	80028d8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2200      	movs	r2, #0
 800289c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fb10 	bl	8002ec8 <RTC_ByteToBcd2>
 80028a8:	4603      	mov	r3, r0
 80028aa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fb09 	bl	8002ec8 <RTC_ByteToBcd2>
 80028b6:	4603      	mov	r3, r0
 80028b8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80028ba:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	789b      	ldrb	r3, [r3, #2]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fb01 	bl	8002ec8 <RTC_ByteToBcd2>
 80028c6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80028c8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	78db      	ldrb	r3, [r3, #3]
 80028d0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e018      	b.n	800290a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80028f8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80028fe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	78db      	ldrb	r3, [r3, #3]
 8002904:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	22ca      	movs	r2, #202	; 0xca
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2253      	movs	r2, #83	; 0x53
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 faa8 	bl	8002e70 <RTC_EnterInitMode>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	22ff      	movs	r2, #255	; 0xff
 800292c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2204      	movs	r2, #4
 8002932:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e047      	b.n	80029ce <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002948:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800294c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800295c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	431a      	orrs	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002984:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fa43 	bl	8002e20 <HAL_RTC_WaitForSynchro>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00b      	beq.n	80029b8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	22ff      	movs	r2, #255	; 0xff
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2204      	movs	r2, #4
 80029ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e00a      	b.n	80029ce <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	22ff      	movs	r2, #255	; 0xff
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80029cc:	2300      	movs	r3, #0
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}

080029d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	7f1b      	ldrb	r3, [r3, #28]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_RTC_SetDate+0x1c>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e094      	b.n	8002b1c <HAL_RTC_SetDate+0x146>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2202      	movs	r2, #2
 80029fc:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10e      	bne.n	8002a22 <HAL_RTC_SetDate+0x4c>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	f023 0310 	bic.w	r3, r3, #16
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	330a      	adds	r3, #10
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11c      	bne.n	8002a62 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	78db      	ldrb	r3, [r3, #3]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fa4b 	bl	8002ec8 <RTC_ByteToBcd2>
 8002a32:	4603      	mov	r3, r0
 8002a34:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	785b      	ldrb	r3, [r3, #1]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fa44 	bl	8002ec8 <RTC_ByteToBcd2>
 8002a40:	4603      	mov	r3, r0
 8002a42:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a44:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	789b      	ldrb	r3, [r3, #2]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fa3c 	bl	8002ec8 <RTC_ByteToBcd2>
 8002a50:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a52:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e00e      	b.n	8002a80 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	78db      	ldrb	r3, [r3, #3]
 8002a66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a6e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	22ca      	movs	r2, #202	; 0xca
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2253      	movs	r2, #83	; 0x53
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f9ed 	bl	8002e70 <RTC_EnterInitMode>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e033      	b.n	8002b1c <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002abe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ac2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ad2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d111      	bne.n	8002b06 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f99c 	bl	8002e20 <HAL_RTC_WaitForSynchro>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	22ff      	movs	r2, #255	; 0xff
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2204      	movs	r2, #4
 8002afa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00a      	b.n	8002b1c <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd90      	pop	{r4, r7, pc}

08002b24 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002b38:	4b93      	ldr	r3, [pc, #588]	; (8002d88 <HAL_RTC_SetAlarm_IT+0x264>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a93      	ldr	r2, [pc, #588]	; (8002d8c <HAL_RTC_SetAlarm_IT+0x268>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0adb      	lsrs	r3, r3, #11
 8002b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b48:	fb02 f303 	mul.w	r3, r2, r3
 8002b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	7f1b      	ldrb	r3, [r3, #28]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_RTC_SetAlarm_IT+0x36>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e111      	b.n	8002d7e <HAL_RTC_SetAlarm_IT+0x25a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2202      	movs	r2, #2
 8002b64:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d137      	bne.n	8002bdc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d102      	bne.n	8002b80 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 f99f 	bl	8002ec8 <RTC_ByteToBcd2>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f998 	bl	8002ec8 <RTC_ByteToBcd2>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b9c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	789b      	ldrb	r3, [r3, #2]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f990 	bl	8002ec8 <RTC_ByteToBcd2>
 8002ba8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002baa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	78db      	ldrb	r3, [r3, #3]
 8002bb2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002bb4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f982 	bl	8002ec8 <RTC_ByteToBcd2>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002bc8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002bd0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e023      	b.n	8002c24 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002bfc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c02:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	78db      	ldrb	r3, [r3, #3]
 8002c08:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002c0a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c12:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c14:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c1a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	22ca      	movs	r2, #202	; 0xca
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2253      	movs	r2, #83	; 0x53
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c48:	d141      	bne.n	8002cce <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c58:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002c6a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	617a      	str	r2, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10b      	bne.n	8002c8e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	22ff      	movs	r2, #255	; 0xff
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2203      	movs	r2, #3
 8002c82:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e077      	b.n	8002d7e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0e7      	beq.n	8002c6c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	e040      	b.n	8002d50 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cdc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002cee:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	1e5a      	subs	r2, r3, #1
 8002cf4:	617a      	str	r2, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	22ff      	movs	r2, #255	; 0xff
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2203      	movs	r2, #3
 8002d06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e035      	b.n	8002d7e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0e7      	beq.n	8002cf0 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d4e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d66:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	22ff      	movs	r2, #255	; 0xff
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3724      	adds	r7, #36	; 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	10624dd3 	.word	0x10624dd3
 8002d90:	40013c00 	.word	0x40013c00

08002d94 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d012      	beq.n	8002dd0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f002 fc59 	bl	8005670 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002dce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d012      	beq.n	8002e04 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f889 	bl	8002f04 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002e02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RTC_AlarmIRQHandler+0x88>)
 8002e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e0a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	775a      	strb	r2, [r3, #29]
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40013c00 	.word	0x40013c00

08002e20 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e3c:	f7fd fbde 	bl	80005fc <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e42:	e009      	b.n	8002e58 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e44:	f7fd fbda 	bl	80005fc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e52:	d901      	bls.n	8002e58 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e007      	b.n	8002e68 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ee      	beq.n	8002e44 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d119      	bne.n	8002ebe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e92:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e94:	f7fd fbb2 	bl	80005fc <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e9a:	e009      	b.n	8002eb0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e9c:	f7fd fbae 	bl	80005fc <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eaa:	d901      	bls.n	8002eb0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e007      	b.n	8002ec0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ee      	beq.n	8002e9c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002ed6:	e005      	b.n	8002ee4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3301      	adds	r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	3b0a      	subs	r3, #10
 8002ee2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b09      	cmp	r3, #9
 8002ee8:	d8f6      	bhi.n	8002ed8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	b2db      	uxtb	r3, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e01d      	b.n	8002f66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f002 fc9c 	bl	800587c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f000 fb8e 	bl	8003678 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d007      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e01d      	b.n	8003004 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f815 	bl	800300c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	f000 fb3f 	bl	8003678 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2201      	movs	r2, #1
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fdc6 	bl	8003bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a10      	ldr	r2, [pc, #64]	; (8003080 <HAL_TIM_PWM_Start+0x60>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d107      	bne.n	8003052 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b06      	cmp	r3, #6
 8003062:	d007      	beq.n	8003074 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40010000 	.word	0x40010000

08003084 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	6839      	ldr	r1, [r7, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fd94 	bl	8003bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <HAL_TIM_PWM_Stop+0x94>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d117      	bne.n	80030d6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_TIM_PWM_Stop+0x52>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	f240 4344 	movw	r3, #1092	; 0x444
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_TIM_PWM_Stop+0x52>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <HAL_TIM_PWM_Stop+0x82>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	f240 4344 	movw	r3, #1092	; 0x444
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d107      	bne.n	8003106 <HAL_TIM_PWM_Stop+0x82>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40010000 	.word	0x40010000

0800311c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b02      	cmp	r3, #2
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0202 	mvn.w	r2, #2
 8003148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa6b 	bl	800363a <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fa5d 	bl	8003626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fa6e 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b04      	cmp	r3, #4
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b04      	cmp	r3, #4
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0204 	mvn.w	r2, #4
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa41 	bl	800363a <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa33 	bl	8003626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa44 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0208 	mvn.w	r2, #8
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2204      	movs	r2, #4
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa17 	bl	800363a <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa09 	bl	8003626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fa1a 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b10      	cmp	r3, #16
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b10      	cmp	r3, #16
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0210 	mvn.w	r2, #16
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2208      	movs	r2, #8
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9ed 	bl	800363a <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f9df 	bl	8003626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f9f0 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0201 	mvn.w	r2, #1
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f002 fa56 	bl	800574c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b80      	cmp	r3, #128	; 0x80
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fd1a 	bl	8003d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d10e      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d107      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f9b5 	bl	8003662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b20      	cmp	r3, #32
 8003304:	d10e      	bne.n	8003324 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b20      	cmp	r3, #32
 8003312:	d107      	bne.n	8003324 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0220 	mvn.w	r2, #32
 800331c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fce4 	bl	8003cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003342:	2302      	movs	r3, #2
 8003344:	e0b4      	b.n	80034b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b0c      	cmp	r3, #12
 800335a:	f200 809f 	bhi.w	800349c <HAL_TIM_PWM_ConfigChannel+0x170>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003399 	.word	0x08003399
 8003368:	0800349d 	.word	0x0800349d
 800336c:	0800349d 	.word	0x0800349d
 8003370:	0800349d 	.word	0x0800349d
 8003374:	080033d9 	.word	0x080033d9
 8003378:	0800349d 	.word	0x0800349d
 800337c:	0800349d 	.word	0x0800349d
 8003380:	0800349d 	.word	0x0800349d
 8003384:	0800341b 	.word	0x0800341b
 8003388:	0800349d 	.word	0x0800349d
 800338c:	0800349d 	.word	0x0800349d
 8003390:	0800349d 	.word	0x0800349d
 8003394:	0800345b 	.word	0x0800345b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f9ea 	bl	8003778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0208 	orr.w	r2, r2, #8
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0204 	bic.w	r2, r2, #4
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	619a      	str	r2, [r3, #24]
      break;
 80033d6:	e062      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa30 	bl	8003844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	021a      	lsls	r2, r3, #8
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	619a      	str	r2, [r3, #24]
      break;
 8003418:	e041      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fa7b 	bl	800391c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0208 	orr.w	r2, r2, #8
 8003434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0204 	bic.w	r2, r2, #4
 8003444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	61da      	str	r2, [r3, #28]
      break;
 8003458:	e021      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fac5 	bl	80039f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	021a      	lsls	r2, r3, #8
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	61da      	str	r2, [r3, #28]
      break;
 800349a:	e000      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800349c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIM_ConfigClockSource+0x18>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0a6      	b.n	800361e <HAL_TIM_ConfigClockSource+0x166>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d067      	beq.n	80035d8 <HAL_TIM_ConfigClockSource+0x120>
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d80b      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x6c>
 800350c:	2b10      	cmp	r3, #16
 800350e:	d073      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0x140>
 8003510:	2b10      	cmp	r3, #16
 8003512:	d802      	bhi.n	800351a <HAL_TIM_ConfigClockSource+0x62>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d06f      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003518:	e078      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800351a:	2b20      	cmp	r3, #32
 800351c:	d06c      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0x140>
 800351e:	2b30      	cmp	r3, #48	; 0x30
 8003520:	d06a      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003522:	e073      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003524:	2b70      	cmp	r3, #112	; 0x70
 8003526:	d00d      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x8c>
 8003528:	2b70      	cmp	r3, #112	; 0x70
 800352a:	d804      	bhi.n	8003536 <HAL_TIM_ConfigClockSource+0x7e>
 800352c:	2b50      	cmp	r3, #80	; 0x50
 800352e:	d033      	beq.n	8003598 <HAL_TIM_ConfigClockSource+0xe0>
 8003530:	2b60      	cmp	r3, #96	; 0x60
 8003532:	d041      	beq.n	80035b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003534:	e06a      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353a:	d066      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x152>
 800353c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003540:	d017      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003542:	e063      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f000 fb16 	bl	8003b84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003566:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]
      break;
 8003570:	e04c      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f000 faff 	bl	8003b84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003594:	609a      	str	r2, [r3, #8]
      break;
 8003596:	e039      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	461a      	mov	r2, r3
 80035a6:	f000 fa73 	bl	8003a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2150      	movs	r1, #80	; 0x50
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 facc 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80035b6:	e029      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f000 fa92 	bl	8003aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2160      	movs	r1, #96	; 0x60
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fabc 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80035d6:	e019      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	461a      	mov	r2, r3
 80035e6:	f000 fa53 	bl	8003a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2140      	movs	r1, #64	; 0x40
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 faac 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80035f6:	e009      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f000 faa3 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003608:	e000      	b.n	800360c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800360a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a34      	ldr	r2, [pc, #208]	; (800375c <TIM_Base_SetConfig+0xe4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00f      	beq.n	80036b0 <TIM_Base_SetConfig+0x38>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003696:	d00b      	beq.n	80036b0 <TIM_Base_SetConfig+0x38>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a31      	ldr	r2, [pc, #196]	; (8003760 <TIM_Base_SetConfig+0xe8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <TIM_Base_SetConfig+0x38>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a30      	ldr	r2, [pc, #192]	; (8003764 <TIM_Base_SetConfig+0xec>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_Base_SetConfig+0x38>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a2f      	ldr	r2, [pc, #188]	; (8003768 <TIM_Base_SetConfig+0xf0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d108      	bne.n	80036c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a25      	ldr	r2, [pc, #148]	; (800375c <TIM_Base_SetConfig+0xe4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01b      	beq.n	8003702 <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d017      	beq.n	8003702 <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a22      	ldr	r2, [pc, #136]	; (8003760 <TIM_Base_SetConfig+0xe8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a21      	ldr	r2, [pc, #132]	; (8003764 <TIM_Base_SetConfig+0xec>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00f      	beq.n	8003702 <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a20      	ldr	r2, [pc, #128]	; (8003768 <TIM_Base_SetConfig+0xf0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1f      	ldr	r2, [pc, #124]	; (800376c <TIM_Base_SetConfig+0xf4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_Base_SetConfig+0x8a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <TIM_Base_SetConfig+0xf8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_Base_SetConfig+0x8a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <TIM_Base_SetConfig+0xfc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a08      	ldr	r2, [pc, #32]	; (800375c <TIM_Base_SetConfig+0xe4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d103      	bne.n	8003748 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	615a      	str	r2, [r3, #20]
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400
 8003774:	40014800 	.word	0x40014800

08003778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f023 0201 	bic.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f023 0302 	bic.w	r3, r3, #2
 80037c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <TIM_OC1_SetConfig+0xc8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d10c      	bne.n	80037ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0308 	bic.w	r3, r3, #8
 80037da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a13      	ldr	r2, [pc, #76]	; (8003840 <TIM_OC1_SetConfig+0xc8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d111      	bne.n	800381a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	621a      	str	r2, [r3, #32]
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40010000 	.word	0x40010000

08003844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0210 	bic.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0320 	bic.w	r3, r3, #32
 800388e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <TIM_OC2_SetConfig+0xd4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d10d      	bne.n	80038c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a15      	ldr	r2, [pc, #84]	; (8003918 <TIM_OC2_SetConfig+0xd4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d113      	bne.n	80038f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000

0800391c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <TIM_OC3_SetConfig+0xd0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d10d      	bne.n	8003996 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <TIM_OC3_SetConfig+0xd0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d113      	bne.n	80039c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	621a      	str	r2, [r3, #32]
}
 80039e0:	bf00      	nop
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	40010000 	.word	0x40010000

080039f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <TIM_OC4_SetConfig+0x9c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d109      	bne.n	8003a64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000

08003a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 030a 	bic.w	r3, r3, #10
 8003acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	031b      	lsls	r3, r3, #12
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f043 0307 	orr.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e050      	b.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1c      	ldr	r2, [pc, #112]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d018      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c74:	d013      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00e      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d009      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40014000 	.word	0x40014000

08003cec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e03f      	b.n	8003da6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 fdfa 	bl	8005934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	; 0x24
 8003d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fc2d 	bl	80045b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d153      	bne.n	8003e72 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_UART_Transmit_DMA+0x26>
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e04c      	b.n	8003e74 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Transmit_DMA+0x38>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e045      	b.n	8003e74 <HAL_UART_Transmit_DMA+0xc4>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2221      	movs	r2, #33	; 0x21
 8003e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_UART_Transmit_DMA+0xcc>)
 8003e16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <HAL_UART_Transmit_DMA+0xd0>)
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_UART_Transmit_DMA+0xd4>)
 8003e26:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003e30:	f107 0308 	add.w	r3, r7, #8
 8003e34:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	6819      	ldr	r1, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3304      	adds	r3, #4
 8003e44:	461a      	mov	r2, r3
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	f7fc fdf4 	bl	8000a34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e54:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e6c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e000      	b.n	8003e74 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
  }
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	080041c5 	.word	0x080041c5
 8003e80:	08004217 	.word	0x08004217
 8003e84:	080042b7 	.word	0x080042b7

08003e88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d166      	bne.n	8003f70 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_UART_Receive_DMA+0x26>
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e05f      	b.n	8003f72 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Receive_DMA+0x38>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e058      	b.n	8003f72 <HAL_UART_Receive_DMA+0xea>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2222      	movs	r2, #34	; 0x22
 8003ede:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <HAL_UART_Receive_DMA+0xf4>)
 8003ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	4a24      	ldr	r2, [pc, #144]	; (8003f80 <HAL_UART_Receive_DMA+0xf8>)
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <HAL_UART_Receive_DMA+0xfc>)
 8003ef8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	2200      	movs	r2, #0
 8003f00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	f7fc fd8b 	bl	8000a34 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695a      	ldr	r2, [r3, #20]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f6a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	08004233 	.word	0x08004233
 8003f80:	0800429b 	.word	0x0800429b
 8003f84:	080042b7 	.word	0x080042b7

08003f88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10d      	bne.n	8003fda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_UART_IRQHandler+0x52>
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa6f 	bl	80044b6 <UART_Receive_IT>
      return;
 8003fd8:	e0d1      	b.n	800417e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80b0 	beq.w	8004142 <HAL_UART_IRQHandler+0x1ba>
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x70>
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80a5 	beq.w	8004142 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_UART_IRQHandler+0x90>
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_UART_IRQHandler+0xb0>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	f043 0202 	orr.w	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_UART_IRQHandler+0xd0>
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	f043 0204 	orr.w	r2, r3, #4
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00f      	beq.n	8004082 <HAL_UART_IRQHandler+0xfa>
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <HAL_UART_IRQHandler+0xee>
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	f043 0208 	orr.w	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d078      	beq.n	800417c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_UART_IRQHandler+0x11c>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fa09 	bl	80044b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_UART_IRQHandler+0x144>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d031      	beq.n	8004130 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f952 	bl	8004376 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d123      	bne.n	8004128 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	4a21      	ldr	r2, [pc, #132]	; (8004184 <HAL_UART_IRQHandler+0x1fc>)
 80040fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fced 	bl	8000ae4 <HAL_DMA_Abort_IT>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d016      	beq.n	800413e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800411a:	4610      	mov	r0, r2
 800411c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411e:	e00e      	b.n	800413e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f845 	bl	80041b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004126:	e00a      	b.n	800413e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f841 	bl	80041b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412e:	e006      	b.n	800413e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f83d 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800413c:	e01e      	b.n	800417c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413e:	bf00      	nop
    return;
 8004140:	e01c      	b.n	800417c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_UART_IRQHandler+0x1d6>
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f93f 	bl	80043da <UART_Transmit_IT>
    return;
 800415c:	e00f      	b.n	800417e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_UART_IRQHandler+0x1f6>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f987 	bl	8004486 <UART_EndTransmit_IT>
    return;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_UART_IRQHandler+0x1f6>
    return;
 800417c:	bf00      	nop
  }
}
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	080043b3 	.word	0x080043b3

08004188 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d113      	bne.n	8004208 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004204:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004206:	e002      	b.n	800420e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f001 f9e9 	bl	80055e0 <HAL_UART_TxCpltCallback>
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff ffaf 	bl	8004188 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11e      	bne.n	800428c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004262:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004282:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f001 f9b1 	bl	80055f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff ff77 	bl	800419c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b21      	cmp	r3, #33	; 0x21
 80042e8:	d108      	bne.n	80042fc <UART_DMAError+0x46>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2200      	movs	r2, #0
 80042f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042f6:	68b8      	ldr	r0, [r7, #8]
 80042f8:	f000 f827 	bl	800434a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b22      	cmp	r3, #34	; 0x22
 800431c:	d108      	bne.n	8004330 <UART_DMAError+0x7a>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800432a:	68b8      	ldr	r0, [r7, #8]
 800432c:	f000 f823 	bl	8004376 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	f043 0210 	orr.w	r2, r3, #16
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800433c:	68b8      	ldr	r0, [r7, #8]
 800433e:	f7ff ff37 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004360:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800438c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff feef 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b21      	cmp	r3, #33	; 0x21
 80043ec:	d144      	bne.n	8004478 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d11a      	bne.n	800442e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800440c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d105      	bne.n	8004422 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	1c9a      	adds	r2, r3, #2
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	621a      	str	r2, [r3, #32]
 8004420:	e00e      	b.n	8004440 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	621a      	str	r2, [r3, #32]
 800442c:	e008      	b.n	8004440 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	1c59      	adds	r1, r3, #1
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6211      	str	r1, [r2, #32]
 8004438:	781a      	ldrb	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29b      	uxth	r3, r3
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4619      	mov	r1, r3
 800444e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10f      	bne.n	8004474 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004462:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004472:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f001 f89a 	bl	80055e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b22      	cmp	r3, #34	; 0x22
 80044c8:	d171      	bne.n	80045ae <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d2:	d123      	bne.n	800451c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10e      	bne.n	8004500 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	629a      	str	r2, [r3, #40]	; 0x28
 80044fe:	e029      	b.n	8004554 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b29b      	uxth	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
 800451a:	e01b      	b.n	8004554 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6858      	ldr	r0, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	1c59      	adds	r1, r3, #1
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6291      	str	r1, [r2, #40]	; 0x28
 8004534:	b2c2      	uxtb	r2, r0
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	e00c      	b.n	8004554 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	1c58      	adds	r0, r3, #1
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	6288      	str	r0, [r1, #40]	; 0x28
 800454c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4619      	mov	r1, r3
 8004562:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004564:	2b00      	cmp	r3, #0
 8004566:	d120      	bne.n	80045aa <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0220 	bic.w	r2, r2, #32
 8004576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004586:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f001 f827 	bl	80055f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e002      	b.n	80045b0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e000      	b.n	80045b0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
  }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80045fa:	f023 030c 	bic.w	r3, r3, #12
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	68f9      	ldr	r1, [r7, #12]
 8004604:	430b      	orrs	r3, r1
 8004606:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004626:	f040 818b 	bne.w	8004940 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4ac1      	ldr	r2, [pc, #772]	; (8004934 <UART_SetConfig+0x37c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d005      	beq.n	8004640 <UART_SetConfig+0x88>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4abf      	ldr	r2, [pc, #764]	; (8004938 <UART_SetConfig+0x380>)
 800463a:	4293      	cmp	r3, r2
 800463c:	f040 80bd 	bne.w	80047ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004640:	f7fd fe98 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8004644:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	461d      	mov	r5, r3
 800464a:	f04f 0600 	mov.w	r6, #0
 800464e:	46a8      	mov	r8, r5
 8004650:	46b1      	mov	r9, r6
 8004652:	eb18 0308 	adds.w	r3, r8, r8
 8004656:	eb49 0409 	adc.w	r4, r9, r9
 800465a:	4698      	mov	r8, r3
 800465c:	46a1      	mov	r9, r4
 800465e:	eb18 0805 	adds.w	r8, r8, r5
 8004662:	eb49 0906 	adc.w	r9, r9, r6
 8004666:	f04f 0100 	mov.w	r1, #0
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004672:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004676:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800467a:	4688      	mov	r8, r1
 800467c:	4691      	mov	r9, r2
 800467e:	eb18 0005 	adds.w	r0, r8, r5
 8004682:	eb49 0106 	adc.w	r1, r9, r6
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	461d      	mov	r5, r3
 800468c:	f04f 0600 	mov.w	r6, #0
 8004690:	196b      	adds	r3, r5, r5
 8004692:	eb46 0406 	adc.w	r4, r6, r6
 8004696:	461a      	mov	r2, r3
 8004698:	4623      	mov	r3, r4
 800469a:	f7fb fdf9 	bl	8000290 <__aeabi_uldivmod>
 800469e:	4603      	mov	r3, r0
 80046a0:	460c      	mov	r4, r1
 80046a2:	461a      	mov	r2, r3
 80046a4:	4ba5      	ldr	r3, [pc, #660]	; (800493c <UART_SetConfig+0x384>)
 80046a6:	fba3 2302 	umull	r2, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	461d      	mov	r5, r3
 80046b4:	f04f 0600 	mov.w	r6, #0
 80046b8:	46a9      	mov	r9, r5
 80046ba:	46b2      	mov	sl, r6
 80046bc:	eb19 0309 	adds.w	r3, r9, r9
 80046c0:	eb4a 040a 	adc.w	r4, sl, sl
 80046c4:	4699      	mov	r9, r3
 80046c6:	46a2      	mov	sl, r4
 80046c8:	eb19 0905 	adds.w	r9, r9, r5
 80046cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046e4:	4689      	mov	r9, r1
 80046e6:	4692      	mov	sl, r2
 80046e8:	eb19 0005 	adds.w	r0, r9, r5
 80046ec:	eb4a 0106 	adc.w	r1, sl, r6
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	461d      	mov	r5, r3
 80046f6:	f04f 0600 	mov.w	r6, #0
 80046fa:	196b      	adds	r3, r5, r5
 80046fc:	eb46 0406 	adc.w	r4, r6, r6
 8004700:	461a      	mov	r2, r3
 8004702:	4623      	mov	r3, r4
 8004704:	f7fb fdc4 	bl	8000290 <__aeabi_uldivmod>
 8004708:	4603      	mov	r3, r0
 800470a:	460c      	mov	r4, r1
 800470c:	461a      	mov	r2, r3
 800470e:	4b8b      	ldr	r3, [pc, #556]	; (800493c <UART_SetConfig+0x384>)
 8004710:	fba3 1302 	umull	r1, r3, r3, r2
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	2164      	movs	r1, #100	; 0x64
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	3332      	adds	r3, #50	; 0x32
 8004722:	4a86      	ldr	r2, [pc, #536]	; (800493c <UART_SetConfig+0x384>)
 8004724:	fba2 2303 	umull	r2, r3, r2, r3
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004730:	4498      	add	r8, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	461d      	mov	r5, r3
 8004736:	f04f 0600 	mov.w	r6, #0
 800473a:	46a9      	mov	r9, r5
 800473c:	46b2      	mov	sl, r6
 800473e:	eb19 0309 	adds.w	r3, r9, r9
 8004742:	eb4a 040a 	adc.w	r4, sl, sl
 8004746:	4699      	mov	r9, r3
 8004748:	46a2      	mov	sl, r4
 800474a:	eb19 0905 	adds.w	r9, r9, r5
 800474e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800475e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004762:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004766:	4689      	mov	r9, r1
 8004768:	4692      	mov	sl, r2
 800476a:	eb19 0005 	adds.w	r0, r9, r5
 800476e:	eb4a 0106 	adc.w	r1, sl, r6
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	461d      	mov	r5, r3
 8004778:	f04f 0600 	mov.w	r6, #0
 800477c:	196b      	adds	r3, r5, r5
 800477e:	eb46 0406 	adc.w	r4, r6, r6
 8004782:	461a      	mov	r2, r3
 8004784:	4623      	mov	r3, r4
 8004786:	f7fb fd83 	bl	8000290 <__aeabi_uldivmod>
 800478a:	4603      	mov	r3, r0
 800478c:	460c      	mov	r4, r1
 800478e:	461a      	mov	r2, r3
 8004790:	4b6a      	ldr	r3, [pc, #424]	; (800493c <UART_SetConfig+0x384>)
 8004792:	fba3 1302 	umull	r1, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2164      	movs	r1, #100	; 0x64
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	3332      	adds	r3, #50	; 0x32
 80047a4:	4a65      	ldr	r2, [pc, #404]	; (800493c <UART_SetConfig+0x384>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	f003 0207 	and.w	r2, r3, #7
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4442      	add	r2, r8
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	e26f      	b.n	8004c9a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ba:	f7fd fdc7 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 80047be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	461d      	mov	r5, r3
 80047c4:	f04f 0600 	mov.w	r6, #0
 80047c8:	46a8      	mov	r8, r5
 80047ca:	46b1      	mov	r9, r6
 80047cc:	eb18 0308 	adds.w	r3, r8, r8
 80047d0:	eb49 0409 	adc.w	r4, r9, r9
 80047d4:	4698      	mov	r8, r3
 80047d6:	46a1      	mov	r9, r4
 80047d8:	eb18 0805 	adds.w	r8, r8, r5
 80047dc:	eb49 0906 	adc.w	r9, r9, r6
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047f4:	4688      	mov	r8, r1
 80047f6:	4691      	mov	r9, r2
 80047f8:	eb18 0005 	adds.w	r0, r8, r5
 80047fc:	eb49 0106 	adc.w	r1, r9, r6
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	461d      	mov	r5, r3
 8004806:	f04f 0600 	mov.w	r6, #0
 800480a:	196b      	adds	r3, r5, r5
 800480c:	eb46 0406 	adc.w	r4, r6, r6
 8004810:	461a      	mov	r2, r3
 8004812:	4623      	mov	r3, r4
 8004814:	f7fb fd3c 	bl	8000290 <__aeabi_uldivmod>
 8004818:	4603      	mov	r3, r0
 800481a:	460c      	mov	r4, r1
 800481c:	461a      	mov	r2, r3
 800481e:	4b47      	ldr	r3, [pc, #284]	; (800493c <UART_SetConfig+0x384>)
 8004820:	fba3 2302 	umull	r2, r3, r3, r2
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	461d      	mov	r5, r3
 800482e:	f04f 0600 	mov.w	r6, #0
 8004832:	46a9      	mov	r9, r5
 8004834:	46b2      	mov	sl, r6
 8004836:	eb19 0309 	adds.w	r3, r9, r9
 800483a:	eb4a 040a 	adc.w	r4, sl, sl
 800483e:	4699      	mov	r9, r3
 8004840:	46a2      	mov	sl, r4
 8004842:	eb19 0905 	adds.w	r9, r9, r5
 8004846:	eb4a 0a06 	adc.w	sl, sl, r6
 800484a:	f04f 0100 	mov.w	r1, #0
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004856:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800485a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800485e:	4689      	mov	r9, r1
 8004860:	4692      	mov	sl, r2
 8004862:	eb19 0005 	adds.w	r0, r9, r5
 8004866:	eb4a 0106 	adc.w	r1, sl, r6
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	461d      	mov	r5, r3
 8004870:	f04f 0600 	mov.w	r6, #0
 8004874:	196b      	adds	r3, r5, r5
 8004876:	eb46 0406 	adc.w	r4, r6, r6
 800487a:	461a      	mov	r2, r3
 800487c:	4623      	mov	r3, r4
 800487e:	f7fb fd07 	bl	8000290 <__aeabi_uldivmod>
 8004882:	4603      	mov	r3, r0
 8004884:	460c      	mov	r4, r1
 8004886:	461a      	mov	r2, r3
 8004888:	4b2c      	ldr	r3, [pc, #176]	; (800493c <UART_SetConfig+0x384>)
 800488a:	fba3 1302 	umull	r1, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2164      	movs	r1, #100	; 0x64
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	3332      	adds	r3, #50	; 0x32
 800489c:	4a27      	ldr	r2, [pc, #156]	; (800493c <UART_SetConfig+0x384>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048aa:	4498      	add	r8, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	461d      	mov	r5, r3
 80048b0:	f04f 0600 	mov.w	r6, #0
 80048b4:	46a9      	mov	r9, r5
 80048b6:	46b2      	mov	sl, r6
 80048b8:	eb19 0309 	adds.w	r3, r9, r9
 80048bc:	eb4a 040a 	adc.w	r4, sl, sl
 80048c0:	4699      	mov	r9, r3
 80048c2:	46a2      	mov	sl, r4
 80048c4:	eb19 0905 	adds.w	r9, r9, r5
 80048c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048e0:	4689      	mov	r9, r1
 80048e2:	4692      	mov	sl, r2
 80048e4:	eb19 0005 	adds.w	r0, r9, r5
 80048e8:	eb4a 0106 	adc.w	r1, sl, r6
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	461d      	mov	r5, r3
 80048f2:	f04f 0600 	mov.w	r6, #0
 80048f6:	196b      	adds	r3, r5, r5
 80048f8:	eb46 0406 	adc.w	r4, r6, r6
 80048fc:	461a      	mov	r2, r3
 80048fe:	4623      	mov	r3, r4
 8004900:	f7fb fcc6 	bl	8000290 <__aeabi_uldivmod>
 8004904:	4603      	mov	r3, r0
 8004906:	460c      	mov	r4, r1
 8004908:	461a      	mov	r2, r3
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <UART_SetConfig+0x384>)
 800490c:	fba3 1302 	umull	r1, r3, r3, r2
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	2164      	movs	r1, #100	; 0x64
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	3332      	adds	r3, #50	; 0x32
 800491e:	4a07      	ldr	r2, [pc, #28]	; (800493c <UART_SetConfig+0x384>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	f003 0207 	and.w	r2, r3, #7
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4442      	add	r2, r8
 8004930:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004932:	e1b2      	b.n	8004c9a <UART_SetConfig+0x6e2>
 8004934:	40011000 	.word	0x40011000
 8004938:	40011400 	.word	0x40011400
 800493c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4ad7      	ldr	r2, [pc, #860]	; (8004ca4 <UART_SetConfig+0x6ec>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d005      	beq.n	8004956 <UART_SetConfig+0x39e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4ad6      	ldr	r2, [pc, #856]	; (8004ca8 <UART_SetConfig+0x6f0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	f040 80d1 	bne.w	8004af8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004956:	f7fd fd0d 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 800495a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	469a      	mov	sl, r3
 8004960:	f04f 0b00 	mov.w	fp, #0
 8004964:	46d0      	mov	r8, sl
 8004966:	46d9      	mov	r9, fp
 8004968:	eb18 0308 	adds.w	r3, r8, r8
 800496c:	eb49 0409 	adc.w	r4, r9, r9
 8004970:	4698      	mov	r8, r3
 8004972:	46a1      	mov	r9, r4
 8004974:	eb18 080a 	adds.w	r8, r8, sl
 8004978:	eb49 090b 	adc.w	r9, r9, fp
 800497c:	f04f 0100 	mov.w	r1, #0
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004988:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800498c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004990:	4688      	mov	r8, r1
 8004992:	4691      	mov	r9, r2
 8004994:	eb1a 0508 	adds.w	r5, sl, r8
 8004998:	eb4b 0609 	adc.w	r6, fp, r9
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4619      	mov	r1, r3
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	f04f 0400 	mov.w	r4, #0
 80049ae:	0094      	lsls	r4, r2, #2
 80049b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049b4:	008b      	lsls	r3, r1, #2
 80049b6:	461a      	mov	r2, r3
 80049b8:	4623      	mov	r3, r4
 80049ba:	4628      	mov	r0, r5
 80049bc:	4631      	mov	r1, r6
 80049be:	f7fb fc67 	bl	8000290 <__aeabi_uldivmod>
 80049c2:	4603      	mov	r3, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	461a      	mov	r2, r3
 80049c8:	4bb8      	ldr	r3, [pc, #736]	; (8004cac <UART_SetConfig+0x6f4>)
 80049ca:	fba3 2302 	umull	r2, r3, r3, r2
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	469b      	mov	fp, r3
 80049d8:	f04f 0c00 	mov.w	ip, #0
 80049dc:	46d9      	mov	r9, fp
 80049de:	46e2      	mov	sl, ip
 80049e0:	eb19 0309 	adds.w	r3, r9, r9
 80049e4:	eb4a 040a 	adc.w	r4, sl, sl
 80049e8:	4699      	mov	r9, r3
 80049ea:	46a2      	mov	sl, r4
 80049ec:	eb19 090b 	adds.w	r9, r9, fp
 80049f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a08:	4689      	mov	r9, r1
 8004a0a:	4692      	mov	sl, r2
 8004a0c:	eb1b 0509 	adds.w	r5, fp, r9
 8004a10:	eb4c 060a 	adc.w	r6, ip, sl
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	f04f 0400 	mov.w	r4, #0
 8004a26:	0094      	lsls	r4, r2, #2
 8004a28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a2c:	008b      	lsls	r3, r1, #2
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4623      	mov	r3, r4
 8004a32:	4628      	mov	r0, r5
 8004a34:	4631      	mov	r1, r6
 8004a36:	f7fb fc2b 	bl	8000290 <__aeabi_uldivmod>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	461a      	mov	r2, r3
 8004a40:	4b9a      	ldr	r3, [pc, #616]	; (8004cac <UART_SetConfig+0x6f4>)
 8004a42:	fba3 1302 	umull	r1, r3, r3, r2
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2164      	movs	r1, #100	; 0x64
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	3332      	adds	r3, #50	; 0x32
 8004a54:	4a95      	ldr	r2, [pc, #596]	; (8004cac <UART_SetConfig+0x6f4>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a60:	4498      	add	r8, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	469b      	mov	fp, r3
 8004a66:	f04f 0c00 	mov.w	ip, #0
 8004a6a:	46d9      	mov	r9, fp
 8004a6c:	46e2      	mov	sl, ip
 8004a6e:	eb19 0309 	adds.w	r3, r9, r9
 8004a72:	eb4a 040a 	adc.w	r4, sl, sl
 8004a76:	4699      	mov	r9, r3
 8004a78:	46a2      	mov	sl, r4
 8004a7a:	eb19 090b 	adds.w	r9, r9, fp
 8004a7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a96:	4689      	mov	r9, r1
 8004a98:	4692      	mov	sl, r2
 8004a9a:	eb1b 0509 	adds.w	r5, fp, r9
 8004a9e:	eb4c 060a 	adc.w	r6, ip, sl
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	f04f 0400 	mov.w	r4, #0
 8004ab4:	0094      	lsls	r4, r2, #2
 8004ab6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004aba:	008b      	lsls	r3, r1, #2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4623      	mov	r3, r4
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	f7fb fbe4 	bl	8000290 <__aeabi_uldivmod>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	461a      	mov	r2, r3
 8004ace:	4b77      	ldr	r3, [pc, #476]	; (8004cac <UART_SetConfig+0x6f4>)
 8004ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	2164      	movs	r1, #100	; 0x64
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	3332      	adds	r3, #50	; 0x32
 8004ae2:	4a72      	ldr	r2, [pc, #456]	; (8004cac <UART_SetConfig+0x6f4>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4442      	add	r2, r8
 8004af4:	609a      	str	r2, [r3, #8]
 8004af6:	e0d0      	b.n	8004c9a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fd fc28 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8004afc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	469a      	mov	sl, r3
 8004b02:	f04f 0b00 	mov.w	fp, #0
 8004b06:	46d0      	mov	r8, sl
 8004b08:	46d9      	mov	r9, fp
 8004b0a:	eb18 0308 	adds.w	r3, r8, r8
 8004b0e:	eb49 0409 	adc.w	r4, r9, r9
 8004b12:	4698      	mov	r8, r3
 8004b14:	46a1      	mov	r9, r4
 8004b16:	eb18 080a 	adds.w	r8, r8, sl
 8004b1a:	eb49 090b 	adc.w	r9, r9, fp
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b32:	4688      	mov	r8, r1
 8004b34:	4691      	mov	r9, r2
 8004b36:	eb1a 0508 	adds.w	r5, sl, r8
 8004b3a:	eb4b 0609 	adc.w	r6, fp, r9
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4619      	mov	r1, r3
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	f04f 0400 	mov.w	r4, #0
 8004b50:	0094      	lsls	r4, r2, #2
 8004b52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b56:	008b      	lsls	r3, r1, #2
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4623      	mov	r3, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	4631      	mov	r1, r6
 8004b60:	f7fb fb96 	bl	8000290 <__aeabi_uldivmod>
 8004b64:	4603      	mov	r3, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b50      	ldr	r3, [pc, #320]	; (8004cac <UART_SetConfig+0x6f4>)
 8004b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	469b      	mov	fp, r3
 8004b7a:	f04f 0c00 	mov.w	ip, #0
 8004b7e:	46d9      	mov	r9, fp
 8004b80:	46e2      	mov	sl, ip
 8004b82:	eb19 0309 	adds.w	r3, r9, r9
 8004b86:	eb4a 040a 	adc.w	r4, sl, sl
 8004b8a:	4699      	mov	r9, r3
 8004b8c:	46a2      	mov	sl, r4
 8004b8e:	eb19 090b 	adds.w	r9, r9, fp
 8004b92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b96:	f04f 0100 	mov.w	r1, #0
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ba6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004baa:	4689      	mov	r9, r1
 8004bac:	4692      	mov	sl, r2
 8004bae:	eb1b 0509 	adds.w	r5, fp, r9
 8004bb2:	eb4c 060a 	adc.w	r6, ip, sl
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	f04f 0400 	mov.w	r4, #0
 8004bc8:	0094      	lsls	r4, r2, #2
 8004bca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bce:	008b      	lsls	r3, r1, #2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	f7fb fb5a 	bl	8000290 <__aeabi_uldivmod>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	460c      	mov	r4, r1
 8004be0:	461a      	mov	r2, r3
 8004be2:	4b32      	ldr	r3, [pc, #200]	; (8004cac <UART_SetConfig+0x6f4>)
 8004be4:	fba3 1302 	umull	r1, r3, r3, r2
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	2164      	movs	r1, #100	; 0x64
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	3332      	adds	r3, #50	; 0x32
 8004bf6:	4a2d      	ldr	r2, [pc, #180]	; (8004cac <UART_SetConfig+0x6f4>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c02:	4498      	add	r8, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	469b      	mov	fp, r3
 8004c08:	f04f 0c00 	mov.w	ip, #0
 8004c0c:	46d9      	mov	r9, fp
 8004c0e:	46e2      	mov	sl, ip
 8004c10:	eb19 0309 	adds.w	r3, r9, r9
 8004c14:	eb4a 040a 	adc.w	r4, sl, sl
 8004c18:	4699      	mov	r9, r3
 8004c1a:	46a2      	mov	sl, r4
 8004c1c:	eb19 090b 	adds.w	r9, r9, fp
 8004c20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c38:	4689      	mov	r9, r1
 8004c3a:	4692      	mov	sl, r2
 8004c3c:	eb1b 0509 	adds.w	r5, fp, r9
 8004c40:	eb4c 060a 	adc.w	r6, ip, sl
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	f04f 0400 	mov.w	r4, #0
 8004c56:	0094      	lsls	r4, r2, #2
 8004c58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c5c:	008b      	lsls	r3, r1, #2
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4623      	mov	r3, r4
 8004c62:	4628      	mov	r0, r5
 8004c64:	4631      	mov	r1, r6
 8004c66:	f7fb fb13 	bl	8000290 <__aeabi_uldivmod>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <UART_SetConfig+0x6f4>)
 8004c72:	fba3 1302 	umull	r1, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2164      	movs	r1, #100	; 0x64
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	3332      	adds	r3, #50	; 0x32
 8004c84:	4a09      	ldr	r2, [pc, #36]	; (8004cac <UART_SetConfig+0x6f4>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	f003 020f 	and.w	r2, r3, #15
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4442      	add	r2, r8
 8004c96:	609a      	str	r2, [r3, #8]
}
 8004c98:	e7ff      	b.n	8004c9a <UART_SetConfig+0x6e2>
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca4:	40011000 	.word	0x40011000
 8004ca8:	40011400 	.word	0x40011400
 8004cac:	51eb851f 	.word	0x51eb851f

08004cb0 <bufferInit>:
#include "Buffer.h"
#include "main.h"


void bufferInit(s_Buff *buffer)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e007      	b.n	8004cce <bufferInit+0x1e>
		buffer->_p_rx_buffer[i] = 0;
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b18      	cmp	r3, #24
 8004cd2:	ddf4      	ble.n	8004cbe <bufferInit+0xe>
	}
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <ping_callBack>:




void ping_callBack(char* token)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	uart_print(token);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fd0f 	bl	800570c <uart_print>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <version_callback>:

void version_callback(char* token)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	uart_print(VERSION);
 8004d00:	4803      	ldr	r0, [pc, #12]	; (8004d10 <version_callback+0x18>)
 8004d02:	f000 fd03 	bl	800570c <uart_print>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	0800684c 	.word	0x0800684c

08004d14 <pwm_start_callback>:

void pwm_start_callback(char* token)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4805      	ldr	r0, [pc, #20]	; (8004d34 <pwm_start_callback+0x20>)
 8004d20:	f7fe f97e 	bl	8003020 <HAL_TIM_PWM_Start>
	uart_print(OK);
 8004d24:	4804      	ldr	r0, [pc, #16]	; (8004d38 <pwm_start_callback+0x24>)
 8004d26:	f000 fcf1 	bl	800570c <uart_print>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	200002cc 	.word	0x200002cc
 8004d38:	08006854 	.word	0x08006854

08004d3c <pwm_stop_callback>:

void pwm_stop_callback(char* token)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8004d44:	2100      	movs	r1, #0
 8004d46:	4805      	ldr	r0, [pc, #20]	; (8004d5c <pwm_stop_callback+0x20>)
 8004d48:	f7fe f99c 	bl	8003084 <HAL_TIM_PWM_Stop>
	uart_print(OK);
 8004d4c:	4804      	ldr	r0, [pc, #16]	; (8004d60 <pwm_stop_callback+0x24>)
 8004d4e:	f000 fcdd 	bl	800570c <uart_print>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	200002cc 	.word	0x200002cc
 8004d60:	08006854 	.word	0x08006854

08004d64 <pwm_dc_callback>:

void pwm_dc_callback(char* token)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8004d6c:	4911      	ldr	r1, [pc, #68]	; (8004db4 <pwm_dc_callback+0x50>)
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f001 f82e 	bl	8005dd0 <strtok>
 8004d74:	6078      	str	r0, [r7, #4]
	if(strlen(token) <= 0)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d015      	beq.n	8004daa <pwm_dc_callback+0x46>
	{
		return;
	}
	int32_t dc = atoi(token);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 ffb1 	bl	8005ce6 <atoi>
 8004d84:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b64      	cmp	r3, #100	; 0x64
 8004d8a:	dd01      	ble.n	8004d90 <pwm_dc_callback+0x2c>
 8004d8c:	2364      	movs	r3, #100	; 0x64
 8004d8e:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da01      	bge.n	8004d9a <pwm_dc_callback+0x36>
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <pwm_dc_callback+0x54>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	635a      	str	r2, [r3, #52]	; 0x34
	uart_print(OK);
 8004da2:	4806      	ldr	r0, [pc, #24]	; (8004dbc <pwm_dc_callback+0x58>)
 8004da4:	f000 fcb2 	bl	800570c <uart_print>
 8004da8:	e000      	b.n	8004dac <pwm_dc_callback+0x48>
		return;
 8004daa:	bf00      	nop
}
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	08006858 	.word	0x08006858
 8004db8:	200002cc 	.word	0x200002cc
 8004dbc:	08006854 	.word	0x08006854

08004dc0 <crc_whole_flash_calc_callback>:

void crc_whole_flash_calc_callback(char* token)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
		crcFlashResult = HAL_CRC_Accumulate(&hcrc, flashDataBuffer, sector_0_Size);
		offsetAddr += 0x4000;
	}*/

	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 8004dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dcc:	617b      	str	r3, [r7, #20]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 8004dce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dd2:	613b      	str	r3, [r7, #16]
	//FeedDog(1);
	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	6939      	ldr	r1, [r7, #16]
 8004dd8:	4807      	ldr	r0, [pc, #28]	; (8004df8 <crc_whole_flash_calc_callback+0x38>)
 8004dda:	f7fb fd49 	bl	8000870 <HAL_CRC_Calculate>
 8004dde:	60f8      	str	r0, [r7, #12]
	//FeedDog(1);
	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)crcFlashResult);
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4906      	ldr	r1, [pc, #24]	; (8004dfc <crc_whole_flash_calc_callback+0x3c>)
 8004de4:	4806      	ldr	r0, [pc, #24]	; (8004e00 <crc_whole_flash_calc_callback+0x40>)
 8004de6:	f000 ffc1 	bl	8005d6c <siprintf>
	uart_print((char*)s_buffer._p_tx_buffer);
 8004dea:	4805      	ldr	r0, [pc, #20]	; (8004e00 <crc_whole_flash_calc_callback+0x40>)
 8004dec:	f000 fc8e 	bl	800570c <uart_print>
}
 8004df0:	bf00      	nop
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	200002c4 	.word	0x200002c4
 8004dfc:	0800685c 	.word	0x0800685c
 8004e00:	200002ab 	.word	0x200002ab

08004e04 <wwdg_test_callback>:

void wwdg_test_callback(char* token)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	uart_print(OK);
 8004e0c:	4801      	ldr	r0, [pc, #4]	; (8004e14 <wwdg_test_callback+0x10>)
 8004e0e:	f000 fc7d 	bl	800570c <uart_print>
	while(1);
 8004e12:	e7fe      	b.n	8004e12 <wwdg_test_callback+0xe>
 8004e14:	08006854 	.word	0x08006854

08004e18 <flash_lock_callback>:
}

void flash_lock_callback(char* token)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	 *It does not prevent one part of code to read another part, or even rewrite.
	 *PCROP allows you to use debugger to debug your code,
	 *but protects reading and rewriting the "secret" part.*/

	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 8004e20:	f107 030c 	add.w	r3, r7, #12
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fc fb59 	bl	80014dc <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0) {
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	2baa      	cmp	r3, #170	; 0xaa
 8004e2e:	d133      	bne.n	8004e98 <flash_lock_callback+0x80>
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 8004e30:	2355      	movs	r3, #85	; 0x55
 8004e32:	61fb      	str	r3, [r7, #28]
		obConfig.OptionType = OPTIONBYTE_RDP;
 8004e34:	2302      	movs	r3, #2
 8004e36:	60fb      	str	r3, [r7, #12]

		if (HAL_FLASH_Unlock() != HAL_OK)
 8004e38:	f7fc f932 	bl	80010a0 <HAL_FLASH_Unlock>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <flash_lock_callback+0x2e>
		{
			Error_Handler();
 8004e42:	f000 fc95 	bl	8005770 <Error_Handler>
		}
		/* Clear All pending flags */ //if wwdg and kickDog are enabled - uncomment __HAL_FLASH_CLEAR_FLAG
		//__HAL_FLASH_CLEAR_FLAG (FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 8004e46:	f7fc f95d 	bl	8001104 <HAL_FLASH_OB_Unlock>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <flash_lock_callback+0x3c>
		{
			Error_Handler();
 8004e50:	f000 fc8e 	bl	8005770 <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 8004e54:	f107 030c 	add.w	r3, r7, #12
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fc fad1 	bl	8001400 <HAL_FLASHEx_OBProgram>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <flash_lock_callback+0x50>
		{
			Error_Handler();
 8004e64:	f000 fc84 	bl	8005770 <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 8004e68:	f7fc f978 	bl	800115c <HAL_FLASH_OB_Launch>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <flash_lock_callback+0x5e>
		{
			Error_Handler();
 8004e72:	f000 fc7d 	bl	8005770 <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 8004e76:	f7fc f961 	bl	800113c <HAL_FLASH_OB_Lock>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <flash_lock_callback+0x6c>
		{
			Error_Handler();
 8004e80:	f000 fc76 	bl	8005770 <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 8004e84:	f7fc f92e 	bl	80010e4 <HAL_FLASH_Lock>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <flash_lock_callback+0x7a>
		{
			Error_Handler();
 8004e8e:	f000 fc6f 	bl	8005770 <Error_Handler>
		}
		uart_print(OK);
 8004e92:	4803      	ldr	r0, [pc, #12]	; (8004ea0 <flash_lock_callback+0x88>)
 8004e94:	f000 fc3a 	bl	800570c <uart_print>
		MY_FLASH_SetSectorAddrs(7, sector_7_addr);
		uint32_t myTestWrite[1] = {0xDEADBEEF}; 		//0xFFFFFFFF, 0xDEADBEEF
		MY_FLASH_WriteN(131072-4, myTestWrite2, 1, DATA_TYPE_32);
		*/
	}
}
 8004e98:	bf00      	nop
 8004e9a:	3728      	adds	r7, #40	; 0x28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	08006854 	.word	0x08006854

08004ea4 <set_SN_callback>:

void set_SN_callback(char* token)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	/*if (WRP_sector_disable() != HAL_OK)
	{
		Error_Handler();
	}*/
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <set_SN_callback+0x30>)
 8004eae:	60fb      	str	r3, [r7, #12]
	MY_FLASH_SetSectorAddrs(7, sector_7_addr);
 8004eb0:	68f9      	ldr	r1, [r7, #12]
 8004eb2:	2007      	movs	r0, #7
 8004eb4:	f000 f862 	bl	8004f7c <MY_FLASH_SetSectorAddrs>
	uint32_t myTestWrite[1] = {0xDEADBEEF}; //0xFFFFFFFF, 0xDEADBEEF
 8004eb8:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <set_SN_callback+0x34>)
 8004eba:	60bb      	str	r3, [r7, #8]
	MY_FLASH_WriteN(0, myTestWrite, 1, DATA_TYPE_32);
 8004ebc:	f107 0108 	add.w	r1, r7, #8
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f000 f86f 	bl	8004fa8 <MY_FLASH_WriteN>

	/*if (WRP_sector_enable() != HAL_OK)
	{
		Error_Handler();
	}*/
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08060000 	.word	0x08060000
 8004ed8:	deadbeef 	.word	0xdeadbeef

08004edc <get_SN_callback>:

void get_SN_callback(char* token)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <get_SN_callback+0x3c>)
 8004ee6:	60fb      	str	r3, [r7, #12]
	MY_FLASH_SetSectorAddrs(7, sector_7_addr);
 8004ee8:	68f9      	ldr	r1, [r7, #12]
 8004eea:	2007      	movs	r0, #7
 8004eec:	f000 f846 	bl	8004f7c <MY_FLASH_SetSectorAddrs>
	uint32_t myTestRead[1];
	MY_FLASH_ReadN(0, myTestRead, 1, DATA_TYPE_32);
 8004ef0:	f107 0108 	add.w	r1, r7, #8
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f000 f8c7 	bl	800508c <MY_FLASH_ReadN>
	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)myTestRead[0]);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	461a      	mov	r2, r3
 8004f02:	4906      	ldr	r1, [pc, #24]	; (8004f1c <get_SN_callback+0x40>)
 8004f04:	4806      	ldr	r0, [pc, #24]	; (8004f20 <get_SN_callback+0x44>)
 8004f06:	f000 ff31 	bl	8005d6c <siprintf>
	uart_print((char*)s_buffer._p_tx_buffer);
 8004f0a:	4805      	ldr	r0, [pc, #20]	; (8004f20 <get_SN_callback+0x44>)
 8004f0c:	f000 fbfe 	bl	800570c <uart_print>
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	08060000 	.word	0x08060000
 8004f1c:	0800685c 	.word	0x0800685c
 8004f20:	200002ab 	.word	0x200002ab

08004f24 <start_tick_callback>:

void start_tick_callback(char* token)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	MX_RTC_Init();
 8004f2c:	f000 f9c0 	bl	80052b0 <MX_RTC_Init>
	/*if (HAL_RTC_Init(&hrtc) != HAL_OK)
	{
		Error_Handler();
	}*/

}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <stop_tick_callback>:

void stop_tick_callback(char* token)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	if (HAL_RTC_DeInit(&hrtc) != HAL_OK)
 8004f40:	4805      	ldr	r0, [pc, #20]	; (8004f58 <stop_tick_callback+0x20>)
 8004f42:	f7fd fbdf 	bl	8002704 <HAL_RTC_DeInit>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <stop_tick_callback+0x18>
	{
		Error_Handler();
 8004f4c:	f000 fc10 	bl	8005770 <Error_Handler>
	}
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	2000036c 	.word	0x2000036c

08004f5c <MY_FLASH_EraseSector>:
static uint8_t MY_SectorNum;

//functions definitions
//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8004f60:	f7fc f89e 	bl	80010a0 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <MY_FLASH_EraseSector+0x1c>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2102      	movs	r1, #2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fc fada 	bl	8001524 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8004f70:	f7fc f8b8 	bl	80010e4 <HAL_FLASH_Lock>
}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	200001fc 	.word	0x200001fc

08004f7c <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8004f88:	4a05      	ldr	r2, [pc, #20]	; (8004fa0 <MY_FLASH_SetSectorAddrs+0x24>)
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8004f8e:	4a05      	ldr	r2, [pc, #20]	; (8004fa4 <MY_FLASH_SetSectorAddrs+0x28>)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	200001fc 	.word	0x200001fc
 8004fa4:	200001f8 	.word	0x200001f8

08004fa8 <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b089      	sub	sp, #36	; 0x24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8004fb6:	4b34      	ldr	r3, [pc, #208]	; (8005088 <MY_FLASH_WriteN+0xe0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	MY_FLASH_EraseSector();
 8004fc0:	f7ff ffcc 	bl	8004f5c <MY_FLASH_EraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 8004fc4:	f7fc f86c 	bl	80010a0 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d01e      	beq.n	800500c <MY_FLASH_WriteN+0x64>
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d038      	beq.n	8005044 <MY_FLASH_WriteN+0x9c>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d151      	bne.n	800507a <MY_FLASH_WriteN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e012      	b.n	8005002 <MY_FLASH_WriteN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	461a      	mov	r2, r3
 8004fec:	4623      	mov	r3, r4
 8004fee:	69f9      	ldr	r1, [r7, #28]
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f7fc f801 	bl	8000ff8 <HAL_FLASH_Program>
					flashAddress++;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	3301      	adds	r3, #1
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d3e8      	bcc.n	8004fdc <MY_FLASH_WriteN+0x34>
				}
			break;
 800500a:	e036      	b.n	800507a <MY_FLASH_WriteN+0xd2>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e013      	b.n	800503a <MY_FLASH_WriteN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f04f 0400 	mov.w	r4, #0
 8005022:	461a      	mov	r2, r3
 8005024:	4623      	mov	r3, r4
 8005026:	69f9      	ldr	r1, [r7, #28]
 8005028:	2001      	movs	r0, #1
 800502a:	f7fb ffe5 	bl	8000ff8 <HAL_FLASH_Program>
					flashAddress+=2;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3302      	adds	r3, #2
 8005032:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3301      	adds	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d3e7      	bcc.n	8005012 <MY_FLASH_WriteN+0x6a>
				}
			break;
 8005042:	e01a      	b.n	800507a <MY_FLASH_WriteN+0xd2>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	e012      	b.n	8005070 <MY_FLASH_WriteN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4413      	add	r3, r2
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f04f 0400 	mov.w	r4, #0
 8005058:	461a      	mov	r2, r3
 800505a:	4623      	mov	r3, r4
 800505c:	69f9      	ldr	r1, [r7, #28]
 800505e:	2002      	movs	r0, #2
 8005060:	f7fb ffca 	bl	8000ff8 <HAL_FLASH_Program>
					flashAddress+=4;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	3304      	adds	r3, #4
 8005068:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3301      	adds	r3, #1
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d3e8      	bcc.n	800504a <MY_FLASH_WriteN+0xa2>
				}
			break;
 8005078:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800507a:	f7fc f833 	bl	80010e4 <HAL_FLASH_Lock>
}
 800507e:	bf00      	nop
 8005080:	3724      	adds	r7, #36	; 0x24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}
 8005086:	bf00      	nop
 8005088:	200001f8 	.word	0x200001f8

0800508c <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800508c:	b480      	push	{r7}
 800508e:	b089      	sub	sp, #36	; 0x24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800509a:	4b28      	ldr	r3, [pc, #160]	; (800513c <MY_FLASH_ReadN+0xb0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d018      	beq.n	80050dc <MY_FLASH_ReadN+0x50>
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d02b      	beq.n	8005106 <MY_FLASH_ReadN+0x7a>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d000      	beq.n	80050b4 <MY_FLASH_ReadN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 80050b2:	e03d      	b.n	8005130 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e00b      	b.n	80050d2 <MY_FLASH_ReadN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	440b      	add	r3, r1
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3301      	adds	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	3301      	adds	r3, #1
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d3ef      	bcc.n	80050ba <MY_FLASH_ReadN+0x2e>
			break;
 80050da:	e029      	b.n	8005130 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e00c      	b.n	80050fc <MY_FLASH_ReadN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	440b      	add	r3, r1
 80050ec:	8812      	ldrh	r2, [r2, #0]
 80050ee:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	3302      	adds	r3, #2
 80050f4:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3301      	adds	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d3ee      	bcc.n	80050e2 <MY_FLASH_ReadN+0x56>
			break;
 8005104:	e014      	b.n	8005130 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	e00c      	b.n	8005126 <MY_FLASH_ReadN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	440b      	add	r3, r1
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3304      	adds	r3, #4
 800511e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	3301      	adds	r3, #1
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d3ee      	bcc.n	800510c <MY_FLASH_ReadN+0x80>
			break;
 800512e:	bf00      	nop
}
 8005130:	bf00      	nop
 8005132:	3724      	adds	r7, #36	; 0x24
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	200001f8 	.word	0x200001f8

08005140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005144:	f7fb fa24 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005148:	f000 f81a 	bl	8005180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800514c:	f000 fa06 	bl	800555c <MX_GPIO_Init>
  MX_DMA_Init();
 8005150:	f000 f9dc 	bl	800550c <MX_DMA_Init>
  MX_CRC_Init();
 8005154:	f000 f898 	bl	8005288 <MX_CRC_Init>
  //MX_RTC_Init();
  MX_USART2_UART_Init();
 8005158:	f000 f9ae 	bl	80054b8 <MX_USART2_UART_Init>
  MX_TIM3_Init(); //PWM
 800515c:	f000 f936 	bl	80053cc <MX_TIM3_Init>
#ifdef WWDG_ENABLE
  MX_WWDG_Init();
#endif
  /* USER CODE BEGIN 2 */
#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 8005160:	2201      	movs	r2, #1
 8005162:	4904      	ldr	r1, [pc, #16]	; (8005174 <main+0x34>)
 8005164:	4804      	ldr	r0, [pc, #16]	; (8005178 <main+0x38>)
 8005166:	f7fe fe8f 	bl	8003e88 <HAL_UART_Receive_DMA>
  	MY_FLASH_ReadN(0, myTestRead, 1, DATA_TYPE_32);
  	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)myTestRead[0]);
  	uart_print((char*)s_buffer._p_tx_buffer);
  	*/

  uart_print(HELLO_WORLD);
 800516a:	4804      	ldr	r0, [pc, #16]	; (800517c <main+0x3c>)
 800516c:	f000 face 	bl	800570c <uart_print>
  //uart_print((char*)arr);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005170:	e7fe      	b.n	8005170 <main+0x30>
 8005172:	bf00      	nop
 8005174:	200002aa 	.word	0x200002aa
 8005178:	200003a0 	.word	0x200003a0
 800517c:	080068ec 	.word	0x080068ec

08005180 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b09a      	sub	sp, #104	; 0x68
 8005184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005186:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800518a:	2230      	movs	r2, #48	; 0x30
 800518c:	2100      	movs	r1, #0
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fde3 	bl	8005d5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	60da      	str	r2, [r3, #12]
 80051a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80051a4:	f107 030c 	add.w	r3, r7, #12
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	60da      	str	r2, [r3, #12]
 80051b2:	611a      	str	r2, [r3, #16]
 80051b4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	4b31      	ldr	r3, [pc, #196]	; (8005280 <SystemClock_Config+0x100>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a30      	ldr	r2, [pc, #192]	; (8005280 <SystemClock_Config+0x100>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
 80051c6:	4b2e      	ldr	r3, [pc, #184]	; (8005280 <SystemClock_Config+0x100>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <SystemClock_Config+0x104>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a2a      	ldr	r2, [pc, #168]	; (8005284 <SystemClock_Config+0x104>)
 80051dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	4b28      	ldr	r3, [pc, #160]	; (8005284 <SystemClock_Config+0x104>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80051ee:	2306      	movs	r3, #6
 80051f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80051f2:	2301      	movs	r3, #1
 80051f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051f6:	2301      	movs	r3, #1
 80051f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051fa:	2310      	movs	r3, #16
 80051fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051fe:	2302      	movs	r3, #2
 8005200:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005202:	2300      	movs	r3, #0
 8005204:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005206:	2310      	movs	r3, #16
 8005208:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 800520a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800520e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005210:	2304      	movs	r3, #4
 8005212:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005214:	2304      	movs	r3, #4
 8005216:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005218:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800521c:	4618      	mov	r0, r3
 800521e:	f7fc fc5b 	bl	8001ad8 <HAL_RCC_OscConfig>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8005228:	f000 faa2 	bl	8005770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800522c:	230f      	movs	r3, #15
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005230:	2302      	movs	r3, #2
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800523c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800523e:	2300      	movs	r3, #0
 8005240:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005246:	2102      	movs	r1, #2
 8005248:	4618      	mov	r0, r3
 800524a:	f7fc feb5 	bl	8001fb8 <HAL_RCC_ClockConfig>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005254:	f000 fa8c 	bl	8005770 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005258:	2302      	movs	r3, #2
 800525a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800525c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005260:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005262:	f107 030c 	add.w	r3, r7, #12
 8005266:	4618      	mov	r0, r3
 8005268:	f7fd f8ca 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8005272:	f000 fa7d 	bl	8005770 <Error_Handler>
  }
}
 8005276:	bf00      	nop
 8005278:	3768      	adds	r7, #104	; 0x68
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40023800 	.word	0x40023800
 8005284:	40007000 	.word	0x40007000

08005288 <MX_CRC_Init>:

static void MX_CRC_Init(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <MX_CRC_Init+0x20>)
 800528e:	4a07      	ldr	r2, [pc, #28]	; (80052ac <MX_CRC_Init+0x24>)
 8005290:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005292:	4805      	ldr	r0, [pc, #20]	; (80052a8 <MX_CRC_Init+0x20>)
 8005294:	f7fb fad0 	bl	8000838 <HAL_CRC_Init>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800529e:	f000 fa67 	bl	8005770 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	200002c4 	.word	0x200002c4
 80052ac:	40023000 	.word	0x40023000

080052b0 <MX_RTC_Init>:

void MX_RTC_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b090      	sub	sp, #64	; 0x40
 80052b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80052b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	60da      	str	r2, [r3, #12]
 80052c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80052c6:	2300      	movs	r3, #0
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80052ca:	463b      	mov	r3, r7
 80052cc:	2228      	movs	r2, #40	; 0x28
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fd42 	bl	8005d5a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80052d6:	4b3b      	ldr	r3, [pc, #236]	; (80053c4 <MX_RTC_Init+0x114>)
 80052d8:	4a3b      	ldr	r2, [pc, #236]	; (80053c8 <MX_RTC_Init+0x118>)
 80052da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80052dc:	4b39      	ldr	r3, [pc, #228]	; (80053c4 <MX_RTC_Init+0x114>)
 80052de:	2200      	movs	r2, #0
 80052e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80052e2:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <MX_RTC_Init+0x114>)
 80052e4:	227f      	movs	r2, #127	; 0x7f
 80052e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80052e8:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <MX_RTC_Init+0x114>)
 80052ea:	22ff      	movs	r2, #255	; 0xff
 80052ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80052ee:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <MX_RTC_Init+0x114>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80052f4:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <MX_RTC_Init+0x114>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80052fa:	4b32      	ldr	r3, [pc, #200]	; (80053c4 <MX_RTC_Init+0x114>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005300:	4830      	ldr	r0, [pc, #192]	; (80053c4 <MX_RTC_Init+0x114>)
 8005302:	f7fd f96d 	bl	80025e0 <HAL_RTC_Init>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800530c:	f000 fa30 	bl	8005770 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005322:	2300      	movs	r3, #0
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005326:	2300      	movs	r3, #0
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800532a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800532e:	2200      	movs	r2, #0
 8005330:	4619      	mov	r1, r3
 8005332:	4824      	ldr	r0, [pc, #144]	; (80053c4 <MX_RTC_Init+0x114>)
 8005334:	f7fd fa92 	bl	800285c <HAL_RTC_SetTime>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800533e:	f000 fa17 	bl	8005770 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8005348:	2301      	movs	r3, #1
 800534a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800535a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800535e:	2200      	movs	r2, #0
 8005360:	4619      	mov	r1, r3
 8005362:	4818      	ldr	r0, [pc, #96]	; (80053c4 <MX_RTC_Init+0x114>)
 8005364:	f7fd fb37 	bl	80029d6 <HAL_RTC_SetDate>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800536e:	f000 f9ff 	bl	8005770 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800538a:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800538e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8005398:	2301      	movs	r3, #1
 800539a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800539e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80053a4:	463b      	mov	r3, r7
 80053a6:	2200      	movs	r2, #0
 80053a8:	4619      	mov	r1, r3
 80053aa:	4806      	ldr	r0, [pc, #24]	; (80053c4 <MX_RTC_Init+0x114>)
 80053ac:	f7fd fbba 	bl	8002b24 <HAL_RTC_SetAlarm_IT>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80053b6:	f000 f9db 	bl	8005770 <Error_Handler>
		0x1FFU) != HAL_OK) {
    		Error_Handler();
      	}*/
  /* USER CODE END RTC_Init 2 */

}
 80053ba:	bf00      	nop
 80053bc:	3740      	adds	r7, #64	; 0x40
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	2000036c 	.word	0x2000036c
 80053c8:	40002800 	.word	0x40002800

080053cc <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	; 0x38
 80053d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	605a      	str	r2, [r3, #4]
 80053dc:	609a      	str	r2, [r3, #8]
 80053de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053e0:	f107 0320 	add.w	r3, r7, #32
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053ea:	1d3b      	adds	r3, r7, #4
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	609a      	str	r2, [r3, #8]
 80053f4:	60da      	str	r2, [r3, #12]
 80053f6:	611a      	str	r2, [r3, #16]
 80053f8:	615a      	str	r2, [r3, #20]
 80053fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053fc:	4b2c      	ldr	r3, [pc, #176]	; (80054b0 <MX_TIM3_Init+0xe4>)
 80053fe:	4a2d      	ldr	r2, [pc, #180]	; (80054b4 <MX_TIM3_Init+0xe8>)
 8005400:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8005402:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <MX_TIM3_Init+0xe4>)
 8005404:	2253      	movs	r2, #83	; 0x53
 8005406:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005408:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <MX_TIM3_Init+0xe4>)
 800540a:	2200      	movs	r2, #0
 800540c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800540e:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <MX_TIM3_Init+0xe4>)
 8005410:	2263      	movs	r2, #99	; 0x63
 8005412:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005414:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <MX_TIM3_Init+0xe4>)
 8005416:	2200      	movs	r2, #0
 8005418:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800541a:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <MX_TIM3_Init+0xe4>)
 800541c:	2200      	movs	r2, #0
 800541e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005420:	4823      	ldr	r0, [pc, #140]	; (80054b0 <MX_TIM3_Init+0xe4>)
 8005422:	f7fd fd79 	bl	8002f18 <HAL_TIM_Base_Init>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800542c:	f000 f9a0 	bl	8005770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800543a:	4619      	mov	r1, r3
 800543c:	481c      	ldr	r0, [pc, #112]	; (80054b0 <MX_TIM3_Init+0xe4>)
 800543e:	f7fe f83b 	bl	80034b8 <HAL_TIM_ConfigClockSource>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8005448:	f000 f992 	bl	8005770 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800544c:	4818      	ldr	r0, [pc, #96]	; (80054b0 <MX_TIM3_Init+0xe4>)
 800544e:	f7fd fdb2 	bl	8002fb6 <HAL_TIM_PWM_Init>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8005458:	f000 f98a 	bl	8005770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800545c:	2300      	movs	r3, #0
 800545e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005460:	2300      	movs	r3, #0
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005464:	f107 0320 	add.w	r3, r7, #32
 8005468:	4619      	mov	r1, r3
 800546a:	4811      	ldr	r0, [pc, #68]	; (80054b0 <MX_TIM3_Init+0xe4>)
 800546c:	f7fe fbd0 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8005476:	f000 f97b 	bl	8005770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800547a:	2360      	movs	r3, #96	; 0x60
 800547c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	2200      	movs	r2, #0
 800548e:	4619      	mov	r1, r3
 8005490:	4807      	ldr	r0, [pc, #28]	; (80054b0 <MX_TIM3_Init+0xe4>)
 8005492:	f7fd ff4b 	bl	800332c <HAL_TIM_PWM_ConfigChannel>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800549c:	f000 f968 	bl	8005770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80054a0:	4803      	ldr	r0, [pc, #12]	; (80054b0 <MX_TIM3_Init+0xe4>)
 80054a2:	f000 fa0d 	bl	80058c0 <HAL_TIM_MspPostInit>

}
 80054a6:	bf00      	nop
 80054a8:	3738      	adds	r7, #56	; 0x38
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	200002cc 	.word	0x200002cc
 80054b4:	40000400 	.word	0x40000400

080054b8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80054bc:	4b11      	ldr	r3, [pc, #68]	; (8005504 <MX_USART2_UART_Init+0x4c>)
 80054be:	4a12      	ldr	r2, [pc, #72]	; (8005508 <MX_USART2_UART_Init+0x50>)
 80054c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80054c2:	4b10      	ldr	r3, [pc, #64]	; (8005504 <MX_USART2_UART_Init+0x4c>)
 80054c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80054ca:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <MX_USART2_UART_Init+0x4c>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <MX_USART2_UART_Init+0x4c>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80054d6:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <MX_USART2_UART_Init+0x4c>)
 80054d8:	2200      	movs	r2, #0
 80054da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <MX_USART2_UART_Init+0x4c>)
 80054de:	220c      	movs	r2, #12
 80054e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <MX_USART2_UART_Init+0x4c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <MX_USART2_UART_Init+0x4c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80054ee:	4805      	ldr	r0, [pc, #20]	; (8005504 <MX_USART2_UART_Init+0x4c>)
 80054f0:	f7fe fc10 	bl	8003d14 <HAL_UART_Init>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80054fa:	f000 f939 	bl	8005770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80054fe:	bf00      	nop
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	200003a0 	.word	0x200003a0
 8005508:	40004400 	.word	0x40004400

0800550c <MX_DMA_Init>:

}
#endif

static void MX_DMA_Init(void) 
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <MX_DMA_Init+0x4c>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	4a0f      	ldr	r2, [pc, #60]	; (8005558 <MX_DMA_Init+0x4c>)
 800551c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005520:	6313      	str	r3, [r2, #48]	; 0x30
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <MX_DMA_Init+0x4c>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800552a:	607b      	str	r3, [r7, #4]
 800552c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800552e:	2200      	movs	r2, #0
 8005530:	2100      	movs	r1, #0
 8005532:	2010      	movs	r0, #16
 8005534:	f7fb f948 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005538:	2010      	movs	r0, #16
 800553a:	f7fb f961 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800553e:	2200      	movs	r2, #0
 8005540:	2100      	movs	r1, #0
 8005542:	2011      	movs	r0, #17
 8005544:	f7fb f940 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005548:	2011      	movs	r0, #17
 800554a:	f7fb f959 	bl	8000800 <HAL_NVIC_EnableIRQ>
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40023800 	.word	0x40023800

0800555c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005562:	f107 030c 	add.w	r3, r7, #12
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	609a      	str	r2, [r3, #8]
 800556e:	60da      	str	r2, [r3, #12]
 8005570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <MX_GPIO_Init+0x7c>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <MX_GPIO_Init+0x7c>)
 800557c:	f043 0304 	orr.w	r3, r3, #4
 8005580:	6313      	str	r3, [r2, #48]	; 0x30
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <MX_GPIO_Init+0x7c>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	60bb      	str	r3, [r7, #8]
 800558c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800558e:	2300      	movs	r3, #0
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <MX_GPIO_Init+0x7c>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	4a10      	ldr	r2, [pc, #64]	; (80055d8 <MX_GPIO_Init+0x7c>)
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6313      	str	r3, [r2, #48]	; 0x30
 800559e:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <MX_GPIO_Init+0x7c>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	607b      	str	r3, [r7, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80055aa:	2200      	movs	r2, #0
 80055ac:	2120      	movs	r1, #32
 80055ae:	480b      	ldr	r0, [pc, #44]	; (80055dc <MX_GPIO_Init+0x80>)
 80055b0:	f7fc fa78 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80055b4:	2320      	movs	r3, #32
 80055b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b8:	2301      	movs	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c4:	f107 030c 	add.w	r3, r7, #12
 80055c8:	4619      	mov	r1, r3
 80055ca:	4804      	ldr	r0, [pc, #16]	; (80055dc <MX_GPIO_Init+0x80>)
 80055cc:	f7fc f8e8 	bl	80017a0 <HAL_GPIO_Init>
}
 80055d0:	bf00      	nop
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40020000 	.word	0x40020000

080055e0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	if (s_buffer._rx_single_char != '\n')
 80055fc:	4b19      	ldr	r3, [pc, #100]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 80055fe:	7e9b      	ldrb	r3, [r3, #26]
 8005600:	2b0a      	cmp	r3, #10
 8005602:	d011      	beq.n	8005628 <HAL_UART_RxCpltCallback+0x34>
	{
		if(s_buffer._rx_index < BUFFER_SIZE)
 8005604:	4b17      	ldr	r3, [pc, #92]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 8005606:	7e5b      	ldrb	r3, [r3, #25]
 8005608:	2b18      	cmp	r3, #24
 800560a:	d822      	bhi.n	8005652 <HAL_UART_RxCpltCallback+0x5e>
		{
			s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 800560c:	4b15      	ldr	r3, [pc, #84]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 800560e:	7e5b      	ldrb	r3, [r3, #25]
 8005610:	461a      	mov	r2, r3
 8005612:	4b14      	ldr	r3, [pc, #80]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 8005614:	7e99      	ldrb	r1, [r3, #26]
 8005616:	4b13      	ldr	r3, [pc, #76]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 8005618:	5499      	strb	r1, [r3, r2]
			s_buffer._rx_index++;
 800561a:	4b12      	ldr	r3, [pc, #72]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 800561c:	7e5b      	ldrb	r3, [r3, #25]
 800561e:	3301      	adds	r3, #1
 8005620:	b2da      	uxtb	r2, r3
 8005622:	4b10      	ldr	r3, [pc, #64]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 8005624:	765a      	strb	r2, [r3, #25]
 8005626:	e014      	b.n	8005652 <HAL_UART_RxCpltCallback+0x5e>
		}
	}
	else
	{
		s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 800562a:	7e5b      	ldrb	r3, [r3, #25]
 800562c:	461a      	mov	r2, r3
 800562e:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 8005630:	7e99      	ldrb	r1, [r3, #26]
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 8005634:	5499      	strb	r1, [r3, r2]
		s_buffer._rx_index++;
 8005636:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 8005638:	7e5b      	ldrb	r3, [r3, #25]
 800563a:	3301      	adds	r3, #1
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 8005640:	765a      	strb	r2, [r3, #25]
		whichCommand();
 8005642:	f000 f823 	bl	800568c <whichCommand>
		bufferInit(&s_buffer);
 8005646:	4807      	ldr	r0, [pc, #28]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 8005648:	f7ff fb32 	bl	8004cb0 <bufferInit>
		s_buffer._rx_index = 0;
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_UART_RxCpltCallback+0x70>)
 800564e:	2200      	movs	r2, #0
 8005650:	765a      	strb	r2, [r3, #25]
	}

#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 8005652:	2201      	movs	r2, #1
 8005654:	4904      	ldr	r1, [pc, #16]	; (8005668 <HAL_UART_RxCpltCallback+0x74>)
 8005656:	4805      	ldr	r0, [pc, #20]	; (800566c <HAL_UART_RxCpltCallback+0x78>)
 8005658:	f7fe fc16 	bl	8003e88 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
#endif

	//HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
	//HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20000290 	.word	0x20000290
 8005668:	200002aa 	.word	0x200002aa
 800566c:	200003a0 	.word	0x200003a0

08005670 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  uart_print(TICK);
 8005678:	4803      	ldr	r0, [pc, #12]	; (8005688 <HAL_RTC_AlarmAEventCallback+0x18>)
 800567a:	f000 f847 	bl	800570c <uart_print>
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	080068fc 	.word	0x080068fc

0800568c <whichCommand>:

void whichCommand (void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
	char* token = strtok((char*)s_buffer._p_rx_buffer, " ");
 8005692:	491b      	ldr	r1, [pc, #108]	; (8005700 <whichCommand+0x74>)
 8005694:	481b      	ldr	r0, [pc, #108]	; (8005704 <whichCommand+0x78>)
 8005696:	f000 fb9b 	bl	8005dd0 <strtok>
 800569a:	6038      	str	r0, [r7, #0]

	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 800569c:	2300      	movs	r3, #0
 800569e:	71fb      	strb	r3, [r7, #7]
 80056a0:	e027      	b.n	80056f2 <whichCommand+0x66>
	{
		if (strncmp(token, commands[i]._name, commands[i]._size)==0)
 80056a2:	79fa      	ldrb	r2, [r7, #7]
 80056a4:	4918      	ldr	r1, [pc, #96]	; (8005708 <whichCommand+0x7c>)
 80056a6:	4613      	mov	r3, r2
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	79fa      	ldrb	r2, [r7, #7]
 80056b4:	4914      	ldr	r1, [pc, #80]	; (8005708 <whichCommand+0x7c>)
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	3304      	adds	r3, #4
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	4601      	mov	r1, r0
 80056c8:	6838      	ldr	r0, [r7, #0]
 80056ca:	f000 fb6f 	bl	8005dac <strncmp>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <whichCommand+0x60>
		{
			commands[i].func_ptr(token);
 80056d4:	79fa      	ldrb	r2, [r7, #7]
 80056d6:	490c      	ldr	r1, [pc, #48]	; (8005708 <whichCommand+0x7c>)
 80056d8:	4613      	mov	r3, r2
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	3308      	adds	r3, #8
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6838      	ldr	r0, [r7, #0]
 80056e8:	4798      	blx	r3
			return;
 80056ea:	e005      	b.n	80056f8 <whichCommand+0x6c>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	3301      	adds	r3, #1
 80056f0:	71fb      	strb	r3, [r7, #7]
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	2b0b      	cmp	r3, #11
 80056f6:	d9d4      	bls.n	80056a2 <whichCommand+0x16>
		}
	}
}
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	08006904 	.word	0x08006904
 8005704:	20000290 	.word	0x20000290
 8005708:	08006940 	.word	0x08006940

0800570c <uart_print>:
	}
	return status;
}

void uart_print(char* token)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	//HAL_Delay(250);
	memcpy((char*)s_buffer._p_tx_buffer, token, strlen(token));
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fa fd63 	bl	80001e0 <strlen>
 800571a:	4603      	mov	r3, r0
 800571c:	461a      	mov	r2, r3
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4808      	ldr	r0, [pc, #32]	; (8005744 <uart_print+0x38>)
 8005722:	f000 fb0f 	bl	8005d44 <memcpy>
#ifdef UART_TX_DMA
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(token));
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fa fd5a 	bl	80001e0 <strlen>
 800572c:	4603      	mov	r3, r0
 800572e:	b29b      	uxth	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	4904      	ldr	r1, [pc, #16]	; (8005744 <uart_print+0x38>)
 8005734:	4804      	ldr	r0, [pc, #16]	; (8005748 <uart_print+0x3c>)
 8005736:	f7fe fb3b 	bl	8003db0 <HAL_UART_Transmit_DMA>
#else
	HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(token), 10);
#endif
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200002ab 	.word	0x200002ab
 8005748:	200003a0 	.word	0x200003a0

0800574c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a04      	ldr	r2, [pc, #16]	; (800576c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d101      	bne.n	8005762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800575e:	f7fa ff39 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40010000 	.word	0x40010000

08005770 <Error_Handler>:

void Error_Handler(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uart_print("Error");
 8005774:	4801      	ldr	r0, [pc, #4]	; (800577c <Error_Handler+0xc>)
 8005776:	f7ff ffc9 	bl	800570c <uart_print>
	while(1);
 800577a:	e7fe      	b.n	800577a <Error_Handler+0xa>
 800577c:	08006930 	.word	0x08006930

08005780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005786:	2300      	movs	r3, #0
 8005788:	607b      	str	r3, [r7, #4]
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <HAL_MspInit+0x4c>)
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	4a0f      	ldr	r2, [pc, #60]	; (80057cc <HAL_MspInit+0x4c>)
 8005790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005794:	6453      	str	r3, [r2, #68]	; 0x44
 8005796:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <HAL_MspInit+0x4c>)
 8005798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800579e:	607b      	str	r3, [r7, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <HAL_MspInit+0x4c>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	4a08      	ldr	r2, [pc, #32]	; (80057cc <HAL_MspInit+0x4c>)
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b0:	6413      	str	r3, [r2, #64]	; 0x40
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <HAL_MspInit+0x4c>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80057be:	2007      	movs	r0, #7
 80057c0:	f7fa fff7 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40023800 	.word	0x40023800

080057d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a0b      	ldr	r2, [pc, #44]	; (800580c <HAL_CRC_MspInit+0x3c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10d      	bne.n	80057fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <HAL_CRC_MspInit+0x40>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	4a09      	ldr	r2, [pc, #36]	; (8005810 <HAL_CRC_MspInit+0x40>)
 80057ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057f0:	6313      	str	r3, [r2, #48]	; 0x30
 80057f2:	4b07      	ldr	r3, [pc, #28]	; (8005810 <HAL_CRC_MspInit+0x40>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40023000 	.word	0x40023000
 8005810:	40023800 	.word	0x40023800

08005814 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a08      	ldr	r2, [pc, #32]	; (8005844 <HAL_RTC_MspInit+0x30>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d10a      	bne.n	800583c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <HAL_RTC_MspInit+0x34>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800582c:	2200      	movs	r2, #0
 800582e:	2100      	movs	r1, #0
 8005830:	2029      	movs	r0, #41	; 0x29
 8005832:	f7fa ffc9 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005836:	2029      	movs	r0, #41	; 0x29
 8005838:	f7fa ffe2 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40002800 	.word	0x40002800
 8005848:	42470e3c 	.word	0x42470e3c

0800584c <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a06      	ldr	r2, [pc, #24]	; (8005874 <HAL_RTC_MspDeInit+0x28>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d105      	bne.n	800586a <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RTC_MspDeInit+0x2c>)
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8005864:	2029      	movs	r0, #41	; 0x29
 8005866:	f7fa ffd9 	bl	800081c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40002800 	.word	0x40002800
 8005878:	42470e3c 	.word	0x42470e3c

0800587c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a0b      	ldr	r2, [pc, #44]	; (80058b8 <HAL_TIM_Base_MspInit+0x3c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10d      	bne.n	80058aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <HAL_TIM_Base_MspInit+0x40>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	4a09      	ldr	r2, [pc, #36]	; (80058bc <HAL_TIM_Base_MspInit+0x40>)
 8005898:	f043 0302 	orr.w	r3, r3, #2
 800589c:	6413      	str	r3, [r2, #64]	; 0x40
 800589e:	4b07      	ldr	r3, [pc, #28]	; (80058bc <HAL_TIM_Base_MspInit+0x40>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40023800 	.word	0x40023800

080058c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c8:	f107 030c 	add.w	r3, r7, #12
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a12      	ldr	r2, [pc, #72]	; (8005928 <HAL_TIM_MspPostInit+0x68>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d11d      	bne.n	800591e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <HAL_TIM_MspPostInit+0x6c>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	4a10      	ldr	r2, [pc, #64]	; (800592c <HAL_TIM_MspPostInit+0x6c>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6313      	str	r3, [r2, #48]	; 0x30
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <HAL_TIM_MspPostInit+0x6c>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005902:	2302      	movs	r3, #2
 8005904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800590a:	2300      	movs	r3, #0
 800590c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800590e:	2302      	movs	r3, #2
 8005910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005912:	f107 030c 	add.w	r3, r7, #12
 8005916:	4619      	mov	r1, r3
 8005918:	4805      	ldr	r0, [pc, #20]	; (8005930 <HAL_TIM_MspPostInit+0x70>)
 800591a:	f7fb ff41 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800591e:	bf00      	nop
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40000400 	.word	0x40000400
 800592c:	40023800 	.word	0x40023800
 8005930:	40020000 	.word	0x40020000

08005934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a4b      	ldr	r2, [pc, #300]	; (8005a80 <HAL_UART_MspInit+0x14c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	f040 8090 	bne.w	8005a78 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005958:	2300      	movs	r3, #0
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	4b49      	ldr	r3, [pc, #292]	; (8005a84 <HAL_UART_MspInit+0x150>)
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	4a48      	ldr	r2, [pc, #288]	; (8005a84 <HAL_UART_MspInit+0x150>)
 8005962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005966:	6413      	str	r3, [r2, #64]	; 0x40
 8005968:	4b46      	ldr	r3, [pc, #280]	; (8005a84 <HAL_UART_MspInit+0x150>)
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	4b42      	ldr	r3, [pc, #264]	; (8005a84 <HAL_UART_MspInit+0x150>)
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	4a41      	ldr	r2, [pc, #260]	; (8005a84 <HAL_UART_MspInit+0x150>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	6313      	str	r3, [r2, #48]	; 0x30
 8005984:	4b3f      	ldr	r3, [pc, #252]	; (8005a84 <HAL_UART_MspInit+0x150>)
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005990:	230c      	movs	r3, #12
 8005992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005994:	2302      	movs	r3, #2
 8005996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005998:	2300      	movs	r3, #0
 800599a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800599c:	2303      	movs	r3, #3
 800599e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80059a0:	2307      	movs	r3, #7
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	4619      	mov	r1, r3
 80059aa:	4837      	ldr	r0, [pc, #220]	; (8005a88 <HAL_UART_MspInit+0x154>)
 80059ac:	f7fb fef8 	bl	80017a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80059b0:	4b36      	ldr	r3, [pc, #216]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059b2:	4a37      	ldr	r2, [pc, #220]	; (8005a90 <HAL_UART_MspInit+0x15c>)
 80059b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80059b6:	4b35      	ldr	r3, [pc, #212]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059be:	4b33      	ldr	r3, [pc, #204]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059c4:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059ca:	4b30      	ldr	r3, [pc, #192]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059d2:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059d8:	4b2c      	ldr	r3, [pc, #176]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059da:	2200      	movs	r2, #0
 80059dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80059de:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059e4:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059ea:	4b28      	ldr	r3, [pc, #160]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80059f0:	4826      	ldr	r0, [pc, #152]	; (8005a8c <HAL_UART_MspInit+0x158>)
 80059f2:	f7fa ff71 	bl	80008d8 <HAL_DMA_Init>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80059fc:	f7ff feb8 	bl	8005770 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a22      	ldr	r2, [pc, #136]	; (8005a8c <HAL_UART_MspInit+0x158>)
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34
 8005a06:	4a21      	ldr	r2, [pc, #132]	; (8005a8c <HAL_UART_MspInit+0x158>)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a0e:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <HAL_UART_MspInit+0x164>)
 8005a10:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005a12:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a18:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a1c:	2240      	movs	r2, #64	; 0x40
 8005a1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a20:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a26:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a2e:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a34:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005a3a:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a40:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a46:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005a4c:	4811      	ldr	r0, [pc, #68]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a4e:	f7fa ff43 	bl	80008d8 <HAL_DMA_Init>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005a58:	f7ff fe8a 	bl	8005770 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
 8005a62:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <HAL_UART_MspInit+0x160>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	2026      	movs	r0, #38	; 0x26
 8005a6e:	f7fa feab 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a72:	2026      	movs	r0, #38	; 0x26
 8005a74:	f7fa fec4 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005a78:	bf00      	nop
 8005a7a:	3728      	adds	r7, #40	; 0x28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40004400 	.word	0x40004400
 8005a84:	40023800 	.word	0x40023800
 8005a88:	40020000 	.word	0x40020000
 8005a8c:	20000230 	.word	0x20000230
 8005a90:	40026088 	.word	0x40026088
 8005a94:	2000030c 	.word	0x2000030c
 8005a98:	400260a0 	.word	0x400260a0

08005a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08c      	sub	sp, #48	; 0x30
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005aac:	2200      	movs	r2, #0
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	2019      	movs	r0, #25
 8005ab2:	f7fa fe89 	bl	80007c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005ab6:	2019      	movs	r0, #25
 8005ab8:	f7fa fea2 	bl	8000800 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <HAL_InitTick+0xa0>)
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	4a1d      	ldr	r2, [pc, #116]	; (8005b3c <HAL_InitTick+0xa0>)
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	6453      	str	r3, [r2, #68]	; 0x44
 8005acc:	4b1b      	ldr	r3, [pc, #108]	; (8005b3c <HAL_InitTick+0xa0>)
 8005ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005ad8:	f107 0210 	add.w	r2, r7, #16
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fc fc5a 	bl	800239c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005ae8:	f7fc fc44 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8005aec:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <HAL_InitTick+0xa4>)
 8005af2:	fba2 2303 	umull	r2, r3, r2, r3
 8005af6:	0c9b      	lsrs	r3, r3, #18
 8005af8:	3b01      	subs	r3, #1
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <HAL_InitTick+0xa8>)
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <HAL_InitTick+0xac>)
 8005b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005b02:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <HAL_InitTick+0xa8>)
 8005b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005b0a:	4a0e      	ldr	r2, [pc, #56]	; (8005b44 <HAL_InitTick+0xa8>)
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005b10:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <HAL_InitTick+0xa8>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <HAL_InitTick+0xa8>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005b1c:	4809      	ldr	r0, [pc, #36]	; (8005b44 <HAL_InitTick+0xa8>)
 8005b1e:	f7fd f9fb 	bl	8002f18 <HAL_TIM_Base_Init>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005b28:	4806      	ldr	r0, [pc, #24]	; (8005b44 <HAL_InitTick+0xa8>)
 8005b2a:	f7fd fa20 	bl	8002f6e <HAL_TIM_Base_Start_IT>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	e000      	b.n	8005b34 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3730      	adds	r7, #48	; 0x30
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	431bde83 	.word	0x431bde83
 8005b44:	200003e0 	.word	0x200003e0
 8005b48:	40010000 	.word	0x40010000

08005b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b5e:	e7fe      	b.n	8005b5e <HardFault_Handler+0x4>

08005b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b64:	e7fe      	b.n	8005b64 <MemManage_Handler+0x4>

08005b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b6a:	e7fe      	b.n	8005b6a <BusFault_Handler+0x4>

08005b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b70:	e7fe      	b.n	8005b70 <UsageFault_Handler+0x4>

08005b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b72:	b480      	push	{r7}
 8005b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b76:	bf00      	nop
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b92:	bf00      	nop
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005bb0:	4802      	ldr	r0, [pc, #8]	; (8005bbc <DMA1_Stream5_IRQHandler+0x10>)
 8005bb2:	f7fa ffb9 	bl	8000b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000230 	.word	0x20000230

08005bc0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005bc4:	4802      	ldr	r0, [pc, #8]	; (8005bd0 <DMA1_Stream6_IRQHandler+0x10>)
 8005bc6:	f7fa ffaf 	bl	8000b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	2000030c 	.word	0x2000030c

08005bd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005bd8:	4802      	ldr	r0, [pc, #8]	; (8005be4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005bda:	f7fd fa9f 	bl	800311c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200003e0 	.word	0x200003e0

08005be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005bec:	4802      	ldr	r0, [pc, #8]	; (8005bf8 <USART2_IRQHandler+0x10>)
 8005bee:	f7fe f9cb 	bl	8003f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005bf2:	bf00      	nop
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200003a0 	.word	0x200003a0

08005bfc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005c00:	4802      	ldr	r0, [pc, #8]	; (8005c0c <RTC_Alarm_IRQHandler+0x10>)
 8005c02:	f7fd f8c7 	bl	8002d94 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	2000036c 	.word	0x2000036c

08005c10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005c18:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <_sbrk+0x50>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <_sbrk+0x16>
		heap_end = &end;
 8005c20:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <_sbrk+0x50>)
 8005c22:	4a10      	ldr	r2, [pc, #64]	; (8005c64 <_sbrk+0x54>)
 8005c24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005c26:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <_sbrk+0x50>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <_sbrk+0x50>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4413      	add	r3, r2
 8005c34:	466a      	mov	r2, sp
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d907      	bls.n	8005c4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005c3a:	f000 f859 	bl	8005cf0 <__errno>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	230c      	movs	r3, #12
 8005c42:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295
 8005c48:	e006      	b.n	8005c58 <_sbrk+0x48>
	}

	heap_end += incr;
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <_sbrk+0x50>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	4a03      	ldr	r2, [pc, #12]	; (8005c60 <_sbrk+0x50>)
 8005c54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005c56:	68fb      	ldr	r3, [r7, #12]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000200 	.word	0x20000200
 8005c64:	20000428 	.word	0x20000428

08005c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c6c:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <SystemInit+0x28>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c72:	4a07      	ldr	r2, [pc, #28]	; (8005c90 <SystemInit+0x28>)
 8005c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c7c:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <SystemInit+0x28>)
 8005c7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c82:	609a      	str	r2, [r3, #8]
#endif
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	e000ed00 	.word	0xe000ed00

08005c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ccc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005c98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005c9a:	e003      	b.n	8005ca4 <LoopCopyDataInit>

08005c9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005c9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ca0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005ca2:	3104      	adds	r1, #4

08005ca4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005ca4:	480b      	ldr	r0, [pc, #44]	; (8005cd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ca8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005caa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005cac:	d3f6      	bcc.n	8005c9c <CopyDataInit>
  ldr  r2, =_sbss
 8005cae:	4a0b      	ldr	r2, [pc, #44]	; (8005cdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005cb0:	e002      	b.n	8005cb8 <LoopFillZerobss>

08005cb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005cb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005cb4:	f842 3b04 	str.w	r3, [r2], #4

08005cb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005cba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005cbc:	d3f9      	bcc.n	8005cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005cbe:	f7ff ffd3 	bl	8005c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cc2:	f000 f81b 	bl	8005cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cc6:	f7ff fa3b 	bl	8005140 <main>
  bx  lr    
 8005cca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005ccc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005cd0:	08006b38 	.word	0x08006b38
  ldr  r0, =_sdata
 8005cd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005cd8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005cdc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8005ce0:	20000424 	.word	0x20000424

08005ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ce4:	e7fe      	b.n	8005ce4 <ADC_IRQHandler>

08005ce6 <atoi>:
 8005ce6:	220a      	movs	r2, #10
 8005ce8:	2100      	movs	r1, #0
 8005cea:	f000 b941 	b.w	8005f70 <strtol>
	...

08005cf0 <__errno>:
 8005cf0:	4b01      	ldr	r3, [pc, #4]	; (8005cf8 <__errno+0x8>)
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c

08005cfc <__libc_init_array>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4e0d      	ldr	r6, [pc, #52]	; (8005d34 <__libc_init_array+0x38>)
 8005d00:	4c0d      	ldr	r4, [pc, #52]	; (8005d38 <__libc_init_array+0x3c>)
 8005d02:	1ba4      	subs	r4, r4, r6
 8005d04:	10a4      	asrs	r4, r4, #2
 8005d06:	2500      	movs	r5, #0
 8005d08:	42a5      	cmp	r5, r4
 8005d0a:	d109      	bne.n	8005d20 <__libc_init_array+0x24>
 8005d0c:	4e0b      	ldr	r6, [pc, #44]	; (8005d3c <__libc_init_array+0x40>)
 8005d0e:	4c0c      	ldr	r4, [pc, #48]	; (8005d40 <__libc_init_array+0x44>)
 8005d10:	f000 fd4a 	bl	80067a8 <_init>
 8005d14:	1ba4      	subs	r4, r4, r6
 8005d16:	10a4      	asrs	r4, r4, #2
 8005d18:	2500      	movs	r5, #0
 8005d1a:	42a5      	cmp	r5, r4
 8005d1c:	d105      	bne.n	8005d2a <__libc_init_array+0x2e>
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d24:	4798      	blx	r3
 8005d26:	3501      	adds	r5, #1
 8005d28:	e7ee      	b.n	8005d08 <__libc_init_array+0xc>
 8005d2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d2e:	4798      	blx	r3
 8005d30:	3501      	adds	r5, #1
 8005d32:	e7f2      	b.n	8005d1a <__libc_init_array+0x1e>
 8005d34:	08006b30 	.word	0x08006b30
 8005d38:	08006b30 	.word	0x08006b30
 8005d3c:	08006b30 	.word	0x08006b30
 8005d40:	08006b34 	.word	0x08006b34

08005d44 <memcpy>:
 8005d44:	b510      	push	{r4, lr}
 8005d46:	1e43      	subs	r3, r0, #1
 8005d48:	440a      	add	r2, r1
 8005d4a:	4291      	cmp	r1, r2
 8005d4c:	d100      	bne.n	8005d50 <memcpy+0xc>
 8005d4e:	bd10      	pop	{r4, pc}
 8005d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d58:	e7f7      	b.n	8005d4a <memcpy+0x6>

08005d5a <memset>:
 8005d5a:	4402      	add	r2, r0
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d100      	bne.n	8005d64 <memset+0xa>
 8005d62:	4770      	bx	lr
 8005d64:	f803 1b01 	strb.w	r1, [r3], #1
 8005d68:	e7f9      	b.n	8005d5e <memset+0x4>
	...

08005d6c <siprintf>:
 8005d6c:	b40e      	push	{r1, r2, r3}
 8005d6e:	b500      	push	{lr}
 8005d70:	b09c      	sub	sp, #112	; 0x70
 8005d72:	ab1d      	add	r3, sp, #116	; 0x74
 8005d74:	9002      	str	r0, [sp, #8]
 8005d76:	9006      	str	r0, [sp, #24]
 8005d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d7c:	4809      	ldr	r0, [pc, #36]	; (8005da4 <siprintf+0x38>)
 8005d7e:	9107      	str	r1, [sp, #28]
 8005d80:	9104      	str	r1, [sp, #16]
 8005d82:	4909      	ldr	r1, [pc, #36]	; (8005da8 <siprintf+0x3c>)
 8005d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d88:	9105      	str	r1, [sp, #20]
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	a902      	add	r1, sp, #8
 8005d90:	f000 fa24 	bl	80061dc <_svfiprintf_r>
 8005d94:	9b02      	ldr	r3, [sp, #8]
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	b01c      	add	sp, #112	; 0x70
 8005d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da0:	b003      	add	sp, #12
 8005da2:	4770      	bx	lr
 8005da4:	2000000c 	.word	0x2000000c
 8005da8:	ffff0208 	.word	0xffff0208

08005dac <strncmp>:
 8005dac:	b510      	push	{r4, lr}
 8005dae:	b16a      	cbz	r2, 8005dcc <strncmp+0x20>
 8005db0:	3901      	subs	r1, #1
 8005db2:	1884      	adds	r4, r0, r2
 8005db4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005db8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d103      	bne.n	8005dc8 <strncmp+0x1c>
 8005dc0:	42a0      	cmp	r0, r4
 8005dc2:	d001      	beq.n	8005dc8 <strncmp+0x1c>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1f5      	bne.n	8005db4 <strncmp+0x8>
 8005dc8:	1a98      	subs	r0, r3, r2
 8005dca:	bd10      	pop	{r4, pc}
 8005dcc:	4610      	mov	r0, r2
 8005dce:	e7fc      	b.n	8005dca <strncmp+0x1e>

08005dd0 <strtok>:
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <strtok+0x50>)
 8005dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd6:	681d      	ldr	r5, [r3, #0]
 8005dd8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005dda:	4606      	mov	r6, r0
 8005ddc:	460f      	mov	r7, r1
 8005dde:	b9b4      	cbnz	r4, 8005e0e <strtok+0x3e>
 8005de0:	2050      	movs	r0, #80	; 0x50
 8005de2:	f000 f8df 	bl	8005fa4 <malloc>
 8005de6:	65a8      	str	r0, [r5, #88]	; 0x58
 8005de8:	e9c0 4400 	strd	r4, r4, [r0]
 8005dec:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005df0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005df4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005df8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005dfc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005e00:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005e04:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005e08:	6184      	str	r4, [r0, #24]
 8005e0a:	7704      	strb	r4, [r0, #28]
 8005e0c:	6244      	str	r4, [r0, #36]	; 0x24
 8005e0e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005e10:	4639      	mov	r1, r7
 8005e12:	4630      	mov	r0, r6
 8005e14:	2301      	movs	r3, #1
 8005e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1a:	f000 b803 	b.w	8005e24 <__strtok_r>
 8005e1e:	bf00      	nop
 8005e20:	2000000c 	.word	0x2000000c

08005e24 <__strtok_r>:
 8005e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e26:	b918      	cbnz	r0, 8005e30 <__strtok_r+0xc>
 8005e28:	6810      	ldr	r0, [r2, #0]
 8005e2a:	b908      	cbnz	r0, 8005e30 <__strtok_r+0xc>
 8005e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2e:	4620      	mov	r0, r4
 8005e30:	4604      	mov	r4, r0
 8005e32:	460f      	mov	r7, r1
 8005e34:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005e38:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005e3c:	b91e      	cbnz	r6, 8005e46 <__strtok_r+0x22>
 8005e3e:	b96d      	cbnz	r5, 8005e5c <__strtok_r+0x38>
 8005e40:	6015      	str	r5, [r2, #0]
 8005e42:	4628      	mov	r0, r5
 8005e44:	e7f2      	b.n	8005e2c <__strtok_r+0x8>
 8005e46:	42b5      	cmp	r5, r6
 8005e48:	d1f6      	bne.n	8005e38 <__strtok_r+0x14>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1ef      	bne.n	8005e2e <__strtok_r+0xa>
 8005e4e:	6014      	str	r4, [r2, #0]
 8005e50:	7003      	strb	r3, [r0, #0]
 8005e52:	e7eb      	b.n	8005e2c <__strtok_r+0x8>
 8005e54:	462b      	mov	r3, r5
 8005e56:	e00d      	b.n	8005e74 <__strtok_r+0x50>
 8005e58:	b926      	cbnz	r6, 8005e64 <__strtok_r+0x40>
 8005e5a:	461c      	mov	r4, r3
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	460f      	mov	r7, r1
 8005e60:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005e64:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005e68:	42b5      	cmp	r5, r6
 8005e6a:	d1f5      	bne.n	8005e58 <__strtok_r+0x34>
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	d0f1      	beq.n	8005e54 <__strtok_r+0x30>
 8005e70:	2100      	movs	r1, #0
 8005e72:	7021      	strb	r1, [r4, #0]
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e7d9      	b.n	8005e2c <__strtok_r+0x8>

08005e78 <_strtol_l.isra.0>:
 8005e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	4689      	mov	r9, r1
 8005e80:	4692      	mov	sl, r2
 8005e82:	461e      	mov	r6, r3
 8005e84:	460f      	mov	r7, r1
 8005e86:	463d      	mov	r5, r7
 8005e88:	9808      	ldr	r0, [sp, #32]
 8005e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e8e:	f000 f885 	bl	8005f9c <__locale_ctype_ptr_l>
 8005e92:	4420      	add	r0, r4
 8005e94:	7843      	ldrb	r3, [r0, #1]
 8005e96:	f013 0308 	ands.w	r3, r3, #8
 8005e9a:	d132      	bne.n	8005f02 <_strtol_l.isra.0+0x8a>
 8005e9c:	2c2d      	cmp	r4, #45	; 0x2d
 8005e9e:	d132      	bne.n	8005f06 <_strtol_l.isra.0+0x8e>
 8005ea0:	787c      	ldrb	r4, [r7, #1]
 8005ea2:	1cbd      	adds	r5, r7, #2
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	d05d      	beq.n	8005f66 <_strtol_l.isra.0+0xee>
 8005eaa:	2e10      	cmp	r6, #16
 8005eac:	d109      	bne.n	8005ec2 <_strtol_l.isra.0+0x4a>
 8005eae:	2c30      	cmp	r4, #48	; 0x30
 8005eb0:	d107      	bne.n	8005ec2 <_strtol_l.isra.0+0x4a>
 8005eb2:	782b      	ldrb	r3, [r5, #0]
 8005eb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005eb8:	2b58      	cmp	r3, #88	; 0x58
 8005eba:	d14f      	bne.n	8005f5c <_strtol_l.isra.0+0xe4>
 8005ebc:	786c      	ldrb	r4, [r5, #1]
 8005ebe:	2610      	movs	r6, #16
 8005ec0:	3502      	adds	r5, #2
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	bf14      	ite	ne
 8005ec6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005eca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005ece:	2700      	movs	r7, #0
 8005ed0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005eda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005ede:	2b09      	cmp	r3, #9
 8005ee0:	d817      	bhi.n	8005f12 <_strtol_l.isra.0+0x9a>
 8005ee2:	461c      	mov	r4, r3
 8005ee4:	42a6      	cmp	r6, r4
 8005ee6:	dd23      	ble.n	8005f30 <_strtol_l.isra.0+0xb8>
 8005ee8:	1c7b      	adds	r3, r7, #1
 8005eea:	d007      	beq.n	8005efc <_strtol_l.isra.0+0x84>
 8005eec:	4584      	cmp	ip, r0
 8005eee:	d31c      	bcc.n	8005f2a <_strtol_l.isra.0+0xb2>
 8005ef0:	d101      	bne.n	8005ef6 <_strtol_l.isra.0+0x7e>
 8005ef2:	45a6      	cmp	lr, r4
 8005ef4:	db19      	blt.n	8005f2a <_strtol_l.isra.0+0xb2>
 8005ef6:	fb00 4006 	mla	r0, r0, r6, r4
 8005efa:	2701      	movs	r7, #1
 8005efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f00:	e7eb      	b.n	8005eda <_strtol_l.isra.0+0x62>
 8005f02:	462f      	mov	r7, r5
 8005f04:	e7bf      	b.n	8005e86 <_strtol_l.isra.0+0xe>
 8005f06:	2c2b      	cmp	r4, #43	; 0x2b
 8005f08:	bf04      	itt	eq
 8005f0a:	1cbd      	addeq	r5, r7, #2
 8005f0c:	787c      	ldrbeq	r4, [r7, #1]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	e7c9      	b.n	8005ea6 <_strtol_l.isra.0+0x2e>
 8005f12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005f16:	2b19      	cmp	r3, #25
 8005f18:	d801      	bhi.n	8005f1e <_strtol_l.isra.0+0xa6>
 8005f1a:	3c37      	subs	r4, #55	; 0x37
 8005f1c:	e7e2      	b.n	8005ee4 <_strtol_l.isra.0+0x6c>
 8005f1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005f22:	2b19      	cmp	r3, #25
 8005f24:	d804      	bhi.n	8005f30 <_strtol_l.isra.0+0xb8>
 8005f26:	3c57      	subs	r4, #87	; 0x57
 8005f28:	e7dc      	b.n	8005ee4 <_strtol_l.isra.0+0x6c>
 8005f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8005f2e:	e7e5      	b.n	8005efc <_strtol_l.isra.0+0x84>
 8005f30:	1c7b      	adds	r3, r7, #1
 8005f32:	d108      	bne.n	8005f46 <_strtol_l.isra.0+0xce>
 8005f34:	2322      	movs	r3, #34	; 0x22
 8005f36:	f8c8 3000 	str.w	r3, [r8]
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	f1ba 0f00 	cmp.w	sl, #0
 8005f40:	d107      	bne.n	8005f52 <_strtol_l.isra.0+0xda>
 8005f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f46:	b102      	cbz	r2, 8005f4a <_strtol_l.isra.0+0xd2>
 8005f48:	4240      	negs	r0, r0
 8005f4a:	f1ba 0f00 	cmp.w	sl, #0
 8005f4e:	d0f8      	beq.n	8005f42 <_strtol_l.isra.0+0xca>
 8005f50:	b10f      	cbz	r7, 8005f56 <_strtol_l.isra.0+0xde>
 8005f52:	f105 39ff 	add.w	r9, r5, #4294967295
 8005f56:	f8ca 9000 	str.w	r9, [sl]
 8005f5a:	e7f2      	b.n	8005f42 <_strtol_l.isra.0+0xca>
 8005f5c:	2430      	movs	r4, #48	; 0x30
 8005f5e:	2e00      	cmp	r6, #0
 8005f60:	d1af      	bne.n	8005ec2 <_strtol_l.isra.0+0x4a>
 8005f62:	2608      	movs	r6, #8
 8005f64:	e7ad      	b.n	8005ec2 <_strtol_l.isra.0+0x4a>
 8005f66:	2c30      	cmp	r4, #48	; 0x30
 8005f68:	d0a3      	beq.n	8005eb2 <_strtol_l.isra.0+0x3a>
 8005f6a:	260a      	movs	r6, #10
 8005f6c:	e7a9      	b.n	8005ec2 <_strtol_l.isra.0+0x4a>
	...

08005f70 <strtol>:
 8005f70:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <strtol+0x24>)
 8005f72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f74:	681c      	ldr	r4, [r3, #0]
 8005f76:	4d08      	ldr	r5, [pc, #32]	; (8005f98 <strtol+0x28>)
 8005f78:	6a23      	ldr	r3, [r4, #32]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf08      	it	eq
 8005f7e:	462b      	moveq	r3, r5
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	460a      	mov	r2, r1
 8005f86:	4601      	mov	r1, r0
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f7ff ff75 	bl	8005e78 <_strtol_l.isra.0>
 8005f8e:	b003      	add	sp, #12
 8005f90:	bd30      	pop	{r4, r5, pc}
 8005f92:	bf00      	nop
 8005f94:	2000000c 	.word	0x2000000c
 8005f98:	20000070 	.word	0x20000070

08005f9c <__locale_ctype_ptr_l>:
 8005f9c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005fa0:	4770      	bx	lr
	...

08005fa4 <malloc>:
 8005fa4:	4b02      	ldr	r3, [pc, #8]	; (8005fb0 <malloc+0xc>)
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	f000 b863 	b.w	8006074 <_malloc_r>
 8005fae:	bf00      	nop
 8005fb0:	2000000c 	.word	0x2000000c

08005fb4 <__ascii_mbtowc>:
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	b901      	cbnz	r1, 8005fba <__ascii_mbtowc+0x6>
 8005fb8:	a901      	add	r1, sp, #4
 8005fba:	b142      	cbz	r2, 8005fce <__ascii_mbtowc+0x1a>
 8005fbc:	b14b      	cbz	r3, 8005fd2 <__ascii_mbtowc+0x1e>
 8005fbe:	7813      	ldrb	r3, [r2, #0]
 8005fc0:	600b      	str	r3, [r1, #0]
 8005fc2:	7812      	ldrb	r2, [r2, #0]
 8005fc4:	1c10      	adds	r0, r2, #0
 8005fc6:	bf18      	it	ne
 8005fc8:	2001      	movne	r0, #1
 8005fca:	b002      	add	sp, #8
 8005fcc:	4770      	bx	lr
 8005fce:	4610      	mov	r0, r2
 8005fd0:	e7fb      	b.n	8005fca <__ascii_mbtowc+0x16>
 8005fd2:	f06f 0001 	mvn.w	r0, #1
 8005fd6:	e7f8      	b.n	8005fca <__ascii_mbtowc+0x16>

08005fd8 <_free_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4605      	mov	r5, r0
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	d045      	beq.n	800606c <_free_r+0x94>
 8005fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe4:	1f0c      	subs	r4, r1, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bfb8      	it	lt
 8005fea:	18e4      	addlt	r4, r4, r3
 8005fec:	f000 fbac 	bl	8006748 <__malloc_lock>
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <_free_r+0x98>)
 8005ff2:	6813      	ldr	r3, [r2, #0]
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	b933      	cbnz	r3, 8006006 <_free_r+0x2e>
 8005ff8:	6063      	str	r3, [r4, #4]
 8005ffa:	6014      	str	r4, [r2, #0]
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006002:	f000 bba2 	b.w	800674a <__malloc_unlock>
 8006006:	42a3      	cmp	r3, r4
 8006008:	d90c      	bls.n	8006024 <_free_r+0x4c>
 800600a:	6821      	ldr	r1, [r4, #0]
 800600c:	1862      	adds	r2, r4, r1
 800600e:	4293      	cmp	r3, r2
 8006010:	bf04      	itt	eq
 8006012:	681a      	ldreq	r2, [r3, #0]
 8006014:	685b      	ldreq	r3, [r3, #4]
 8006016:	6063      	str	r3, [r4, #4]
 8006018:	bf04      	itt	eq
 800601a:	1852      	addeq	r2, r2, r1
 800601c:	6022      	streq	r2, [r4, #0]
 800601e:	6004      	str	r4, [r0, #0]
 8006020:	e7ec      	b.n	8005ffc <_free_r+0x24>
 8006022:	4613      	mov	r3, r2
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	b10a      	cbz	r2, 800602c <_free_r+0x54>
 8006028:	42a2      	cmp	r2, r4
 800602a:	d9fa      	bls.n	8006022 <_free_r+0x4a>
 800602c:	6819      	ldr	r1, [r3, #0]
 800602e:	1858      	adds	r0, r3, r1
 8006030:	42a0      	cmp	r0, r4
 8006032:	d10b      	bne.n	800604c <_free_r+0x74>
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	4401      	add	r1, r0
 8006038:	1858      	adds	r0, r3, r1
 800603a:	4282      	cmp	r2, r0
 800603c:	6019      	str	r1, [r3, #0]
 800603e:	d1dd      	bne.n	8005ffc <_free_r+0x24>
 8006040:	6810      	ldr	r0, [r2, #0]
 8006042:	6852      	ldr	r2, [r2, #4]
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	4401      	add	r1, r0
 8006048:	6019      	str	r1, [r3, #0]
 800604a:	e7d7      	b.n	8005ffc <_free_r+0x24>
 800604c:	d902      	bls.n	8006054 <_free_r+0x7c>
 800604e:	230c      	movs	r3, #12
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	e7d3      	b.n	8005ffc <_free_r+0x24>
 8006054:	6820      	ldr	r0, [r4, #0]
 8006056:	1821      	adds	r1, r4, r0
 8006058:	428a      	cmp	r2, r1
 800605a:	bf04      	itt	eq
 800605c:	6811      	ldreq	r1, [r2, #0]
 800605e:	6852      	ldreq	r2, [r2, #4]
 8006060:	6062      	str	r2, [r4, #4]
 8006062:	bf04      	itt	eq
 8006064:	1809      	addeq	r1, r1, r0
 8006066:	6021      	streq	r1, [r4, #0]
 8006068:	605c      	str	r4, [r3, #4]
 800606a:	e7c7      	b.n	8005ffc <_free_r+0x24>
 800606c:	bd38      	pop	{r3, r4, r5, pc}
 800606e:	bf00      	nop
 8006070:	20000204 	.word	0x20000204

08006074 <_malloc_r>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	1ccd      	adds	r5, r1, #3
 8006078:	f025 0503 	bic.w	r5, r5, #3
 800607c:	3508      	adds	r5, #8
 800607e:	2d0c      	cmp	r5, #12
 8006080:	bf38      	it	cc
 8006082:	250c      	movcc	r5, #12
 8006084:	2d00      	cmp	r5, #0
 8006086:	4606      	mov	r6, r0
 8006088:	db01      	blt.n	800608e <_malloc_r+0x1a>
 800608a:	42a9      	cmp	r1, r5
 800608c:	d903      	bls.n	8006096 <_malloc_r+0x22>
 800608e:	230c      	movs	r3, #12
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	2000      	movs	r0, #0
 8006094:	bd70      	pop	{r4, r5, r6, pc}
 8006096:	f000 fb57 	bl	8006748 <__malloc_lock>
 800609a:	4a21      	ldr	r2, [pc, #132]	; (8006120 <_malloc_r+0xac>)
 800609c:	6814      	ldr	r4, [r2, #0]
 800609e:	4621      	mov	r1, r4
 80060a0:	b991      	cbnz	r1, 80060c8 <_malloc_r+0x54>
 80060a2:	4c20      	ldr	r4, [pc, #128]	; (8006124 <_malloc_r+0xb0>)
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	b91b      	cbnz	r3, 80060b0 <_malloc_r+0x3c>
 80060a8:	4630      	mov	r0, r6
 80060aa:	f000 fb17 	bl	80066dc <_sbrk_r>
 80060ae:	6020      	str	r0, [r4, #0]
 80060b0:	4629      	mov	r1, r5
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 fb12 	bl	80066dc <_sbrk_r>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d124      	bne.n	8006106 <_malloc_r+0x92>
 80060bc:	230c      	movs	r3, #12
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	4630      	mov	r0, r6
 80060c2:	f000 fb42 	bl	800674a <__malloc_unlock>
 80060c6:	e7e4      	b.n	8006092 <_malloc_r+0x1e>
 80060c8:	680b      	ldr	r3, [r1, #0]
 80060ca:	1b5b      	subs	r3, r3, r5
 80060cc:	d418      	bmi.n	8006100 <_malloc_r+0x8c>
 80060ce:	2b0b      	cmp	r3, #11
 80060d0:	d90f      	bls.n	80060f2 <_malloc_r+0x7e>
 80060d2:	600b      	str	r3, [r1, #0]
 80060d4:	50cd      	str	r5, [r1, r3]
 80060d6:	18cc      	adds	r4, r1, r3
 80060d8:	4630      	mov	r0, r6
 80060da:	f000 fb36 	bl	800674a <__malloc_unlock>
 80060de:	f104 000b 	add.w	r0, r4, #11
 80060e2:	1d23      	adds	r3, r4, #4
 80060e4:	f020 0007 	bic.w	r0, r0, #7
 80060e8:	1ac3      	subs	r3, r0, r3
 80060ea:	d0d3      	beq.n	8006094 <_malloc_r+0x20>
 80060ec:	425a      	negs	r2, r3
 80060ee:	50e2      	str	r2, [r4, r3]
 80060f0:	e7d0      	b.n	8006094 <_malloc_r+0x20>
 80060f2:	428c      	cmp	r4, r1
 80060f4:	684b      	ldr	r3, [r1, #4]
 80060f6:	bf16      	itet	ne
 80060f8:	6063      	strne	r3, [r4, #4]
 80060fa:	6013      	streq	r3, [r2, #0]
 80060fc:	460c      	movne	r4, r1
 80060fe:	e7eb      	b.n	80060d8 <_malloc_r+0x64>
 8006100:	460c      	mov	r4, r1
 8006102:	6849      	ldr	r1, [r1, #4]
 8006104:	e7cc      	b.n	80060a0 <_malloc_r+0x2c>
 8006106:	1cc4      	adds	r4, r0, #3
 8006108:	f024 0403 	bic.w	r4, r4, #3
 800610c:	42a0      	cmp	r0, r4
 800610e:	d005      	beq.n	800611c <_malloc_r+0xa8>
 8006110:	1a21      	subs	r1, r4, r0
 8006112:	4630      	mov	r0, r6
 8006114:	f000 fae2 	bl	80066dc <_sbrk_r>
 8006118:	3001      	adds	r0, #1
 800611a:	d0cf      	beq.n	80060bc <_malloc_r+0x48>
 800611c:	6025      	str	r5, [r4, #0]
 800611e:	e7db      	b.n	80060d8 <_malloc_r+0x64>
 8006120:	20000204 	.word	0x20000204
 8006124:	20000208 	.word	0x20000208

08006128 <__ssputs_r>:
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	688e      	ldr	r6, [r1, #8]
 800612e:	429e      	cmp	r6, r3
 8006130:	4682      	mov	sl, r0
 8006132:	460c      	mov	r4, r1
 8006134:	4690      	mov	r8, r2
 8006136:	4699      	mov	r9, r3
 8006138:	d837      	bhi.n	80061aa <__ssputs_r+0x82>
 800613a:	898a      	ldrh	r2, [r1, #12]
 800613c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006140:	d031      	beq.n	80061a6 <__ssputs_r+0x7e>
 8006142:	6825      	ldr	r5, [r4, #0]
 8006144:	6909      	ldr	r1, [r1, #16]
 8006146:	1a6f      	subs	r7, r5, r1
 8006148:	6965      	ldr	r5, [r4, #20]
 800614a:	2302      	movs	r3, #2
 800614c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006150:	fb95 f5f3 	sdiv	r5, r5, r3
 8006154:	f109 0301 	add.w	r3, r9, #1
 8006158:	443b      	add	r3, r7
 800615a:	429d      	cmp	r5, r3
 800615c:	bf38      	it	cc
 800615e:	461d      	movcc	r5, r3
 8006160:	0553      	lsls	r3, r2, #21
 8006162:	d530      	bpl.n	80061c6 <__ssputs_r+0x9e>
 8006164:	4629      	mov	r1, r5
 8006166:	f7ff ff85 	bl	8006074 <_malloc_r>
 800616a:	4606      	mov	r6, r0
 800616c:	b950      	cbnz	r0, 8006184 <__ssputs_r+0x5c>
 800616e:	230c      	movs	r3, #12
 8006170:	f8ca 3000 	str.w	r3, [sl]
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006184:	463a      	mov	r2, r7
 8006186:	6921      	ldr	r1, [r4, #16]
 8006188:	f7ff fddc 	bl	8005d44 <memcpy>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	6126      	str	r6, [r4, #16]
 800619a:	6165      	str	r5, [r4, #20]
 800619c:	443e      	add	r6, r7
 800619e:	1bed      	subs	r5, r5, r7
 80061a0:	6026      	str	r6, [r4, #0]
 80061a2:	60a5      	str	r5, [r4, #8]
 80061a4:	464e      	mov	r6, r9
 80061a6:	454e      	cmp	r6, r9
 80061a8:	d900      	bls.n	80061ac <__ssputs_r+0x84>
 80061aa:	464e      	mov	r6, r9
 80061ac:	4632      	mov	r2, r6
 80061ae:	4641      	mov	r1, r8
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	f000 fab0 	bl	8006716 <memmove>
 80061b6:	68a3      	ldr	r3, [r4, #8]
 80061b8:	1b9b      	subs	r3, r3, r6
 80061ba:	60a3      	str	r3, [r4, #8]
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	441e      	add	r6, r3
 80061c0:	6026      	str	r6, [r4, #0]
 80061c2:	2000      	movs	r0, #0
 80061c4:	e7dc      	b.n	8006180 <__ssputs_r+0x58>
 80061c6:	462a      	mov	r2, r5
 80061c8:	f000 fac0 	bl	800674c <_realloc_r>
 80061cc:	4606      	mov	r6, r0
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d1e2      	bne.n	8006198 <__ssputs_r+0x70>
 80061d2:	6921      	ldr	r1, [r4, #16]
 80061d4:	4650      	mov	r0, sl
 80061d6:	f7ff feff 	bl	8005fd8 <_free_r>
 80061da:	e7c8      	b.n	800616e <__ssputs_r+0x46>

080061dc <_svfiprintf_r>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	461d      	mov	r5, r3
 80061e2:	898b      	ldrh	r3, [r1, #12]
 80061e4:	061f      	lsls	r7, r3, #24
 80061e6:	b09d      	sub	sp, #116	; 0x74
 80061e8:	4680      	mov	r8, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	4616      	mov	r6, r2
 80061ee:	d50f      	bpl.n	8006210 <_svfiprintf_r+0x34>
 80061f0:	690b      	ldr	r3, [r1, #16]
 80061f2:	b96b      	cbnz	r3, 8006210 <_svfiprintf_r+0x34>
 80061f4:	2140      	movs	r1, #64	; 0x40
 80061f6:	f7ff ff3d 	bl	8006074 <_malloc_r>
 80061fa:	6020      	str	r0, [r4, #0]
 80061fc:	6120      	str	r0, [r4, #16]
 80061fe:	b928      	cbnz	r0, 800620c <_svfiprintf_r+0x30>
 8006200:	230c      	movs	r3, #12
 8006202:	f8c8 3000 	str.w	r3, [r8]
 8006206:	f04f 30ff 	mov.w	r0, #4294967295
 800620a:	e0c8      	b.n	800639e <_svfiprintf_r+0x1c2>
 800620c:	2340      	movs	r3, #64	; 0x40
 800620e:	6163      	str	r3, [r4, #20]
 8006210:	2300      	movs	r3, #0
 8006212:	9309      	str	r3, [sp, #36]	; 0x24
 8006214:	2320      	movs	r3, #32
 8006216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800621a:	2330      	movs	r3, #48	; 0x30
 800621c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006220:	9503      	str	r5, [sp, #12]
 8006222:	f04f 0b01 	mov.w	fp, #1
 8006226:	4637      	mov	r7, r6
 8006228:	463d      	mov	r5, r7
 800622a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800622e:	b10b      	cbz	r3, 8006234 <_svfiprintf_r+0x58>
 8006230:	2b25      	cmp	r3, #37	; 0x25
 8006232:	d13e      	bne.n	80062b2 <_svfiprintf_r+0xd6>
 8006234:	ebb7 0a06 	subs.w	sl, r7, r6
 8006238:	d00b      	beq.n	8006252 <_svfiprintf_r+0x76>
 800623a:	4653      	mov	r3, sl
 800623c:	4632      	mov	r2, r6
 800623e:	4621      	mov	r1, r4
 8006240:	4640      	mov	r0, r8
 8006242:	f7ff ff71 	bl	8006128 <__ssputs_r>
 8006246:	3001      	adds	r0, #1
 8006248:	f000 80a4 	beq.w	8006394 <_svfiprintf_r+0x1b8>
 800624c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624e:	4453      	add	r3, sl
 8006250:	9309      	str	r3, [sp, #36]	; 0x24
 8006252:	783b      	ldrb	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 809d 	beq.w	8006394 <_svfiprintf_r+0x1b8>
 800625a:	2300      	movs	r3, #0
 800625c:	f04f 32ff 	mov.w	r2, #4294967295
 8006260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	9307      	str	r3, [sp, #28]
 8006268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800626c:	931a      	str	r3, [sp, #104]	; 0x68
 800626e:	462f      	mov	r7, r5
 8006270:	2205      	movs	r2, #5
 8006272:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006276:	4850      	ldr	r0, [pc, #320]	; (80063b8 <_svfiprintf_r+0x1dc>)
 8006278:	f7f9 ffba 	bl	80001f0 <memchr>
 800627c:	9b04      	ldr	r3, [sp, #16]
 800627e:	b9d0      	cbnz	r0, 80062b6 <_svfiprintf_r+0xda>
 8006280:	06d9      	lsls	r1, r3, #27
 8006282:	bf44      	itt	mi
 8006284:	2220      	movmi	r2, #32
 8006286:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800628a:	071a      	lsls	r2, r3, #28
 800628c:	bf44      	itt	mi
 800628e:	222b      	movmi	r2, #43	; 0x2b
 8006290:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006294:	782a      	ldrb	r2, [r5, #0]
 8006296:	2a2a      	cmp	r2, #42	; 0x2a
 8006298:	d015      	beq.n	80062c6 <_svfiprintf_r+0xea>
 800629a:	9a07      	ldr	r2, [sp, #28]
 800629c:	462f      	mov	r7, r5
 800629e:	2000      	movs	r0, #0
 80062a0:	250a      	movs	r5, #10
 80062a2:	4639      	mov	r1, r7
 80062a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062a8:	3b30      	subs	r3, #48	; 0x30
 80062aa:	2b09      	cmp	r3, #9
 80062ac:	d94d      	bls.n	800634a <_svfiprintf_r+0x16e>
 80062ae:	b1b8      	cbz	r0, 80062e0 <_svfiprintf_r+0x104>
 80062b0:	e00f      	b.n	80062d2 <_svfiprintf_r+0xf6>
 80062b2:	462f      	mov	r7, r5
 80062b4:	e7b8      	b.n	8006228 <_svfiprintf_r+0x4c>
 80062b6:	4a40      	ldr	r2, [pc, #256]	; (80063b8 <_svfiprintf_r+0x1dc>)
 80062b8:	1a80      	subs	r0, r0, r2
 80062ba:	fa0b f000 	lsl.w	r0, fp, r0
 80062be:	4318      	orrs	r0, r3
 80062c0:	9004      	str	r0, [sp, #16]
 80062c2:	463d      	mov	r5, r7
 80062c4:	e7d3      	b.n	800626e <_svfiprintf_r+0x92>
 80062c6:	9a03      	ldr	r2, [sp, #12]
 80062c8:	1d11      	adds	r1, r2, #4
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	9103      	str	r1, [sp, #12]
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	db01      	blt.n	80062d6 <_svfiprintf_r+0xfa>
 80062d2:	9207      	str	r2, [sp, #28]
 80062d4:	e004      	b.n	80062e0 <_svfiprintf_r+0x104>
 80062d6:	4252      	negs	r2, r2
 80062d8:	f043 0302 	orr.w	r3, r3, #2
 80062dc:	9207      	str	r2, [sp, #28]
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	783b      	ldrb	r3, [r7, #0]
 80062e2:	2b2e      	cmp	r3, #46	; 0x2e
 80062e4:	d10c      	bne.n	8006300 <_svfiprintf_r+0x124>
 80062e6:	787b      	ldrb	r3, [r7, #1]
 80062e8:	2b2a      	cmp	r3, #42	; 0x2a
 80062ea:	d133      	bne.n	8006354 <_svfiprintf_r+0x178>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	1d1a      	adds	r2, r3, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	9203      	str	r2, [sp, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bfb8      	it	lt
 80062f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80062fc:	3702      	adds	r7, #2
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	4d2e      	ldr	r5, [pc, #184]	; (80063bc <_svfiprintf_r+0x1e0>)
 8006302:	7839      	ldrb	r1, [r7, #0]
 8006304:	2203      	movs	r2, #3
 8006306:	4628      	mov	r0, r5
 8006308:	f7f9 ff72 	bl	80001f0 <memchr>
 800630c:	b138      	cbz	r0, 800631e <_svfiprintf_r+0x142>
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	1b40      	subs	r0, r0, r5
 8006312:	fa03 f000 	lsl.w	r0, r3, r0
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	4303      	orrs	r3, r0
 800631a:	3701      	adds	r7, #1
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	7839      	ldrb	r1, [r7, #0]
 8006320:	4827      	ldr	r0, [pc, #156]	; (80063c0 <_svfiprintf_r+0x1e4>)
 8006322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006326:	2206      	movs	r2, #6
 8006328:	1c7e      	adds	r6, r7, #1
 800632a:	f7f9 ff61 	bl	80001f0 <memchr>
 800632e:	2800      	cmp	r0, #0
 8006330:	d038      	beq.n	80063a4 <_svfiprintf_r+0x1c8>
 8006332:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <_svfiprintf_r+0x1e8>)
 8006334:	bb13      	cbnz	r3, 800637c <_svfiprintf_r+0x1a0>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	3307      	adds	r3, #7
 800633a:	f023 0307 	bic.w	r3, r3, #7
 800633e:	3308      	adds	r3, #8
 8006340:	9303      	str	r3, [sp, #12]
 8006342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006344:	444b      	add	r3, r9
 8006346:	9309      	str	r3, [sp, #36]	; 0x24
 8006348:	e76d      	b.n	8006226 <_svfiprintf_r+0x4a>
 800634a:	fb05 3202 	mla	r2, r5, r2, r3
 800634e:	2001      	movs	r0, #1
 8006350:	460f      	mov	r7, r1
 8006352:	e7a6      	b.n	80062a2 <_svfiprintf_r+0xc6>
 8006354:	2300      	movs	r3, #0
 8006356:	3701      	adds	r7, #1
 8006358:	9305      	str	r3, [sp, #20]
 800635a:	4619      	mov	r1, r3
 800635c:	250a      	movs	r5, #10
 800635e:	4638      	mov	r0, r7
 8006360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006364:	3a30      	subs	r2, #48	; 0x30
 8006366:	2a09      	cmp	r2, #9
 8006368:	d903      	bls.n	8006372 <_svfiprintf_r+0x196>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0c8      	beq.n	8006300 <_svfiprintf_r+0x124>
 800636e:	9105      	str	r1, [sp, #20]
 8006370:	e7c6      	b.n	8006300 <_svfiprintf_r+0x124>
 8006372:	fb05 2101 	mla	r1, r5, r1, r2
 8006376:	2301      	movs	r3, #1
 8006378:	4607      	mov	r7, r0
 800637a:	e7f0      	b.n	800635e <_svfiprintf_r+0x182>
 800637c:	ab03      	add	r3, sp, #12
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	4622      	mov	r2, r4
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <_svfiprintf_r+0x1ec>)
 8006384:	a904      	add	r1, sp, #16
 8006386:	4640      	mov	r0, r8
 8006388:	f3af 8000 	nop.w
 800638c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006390:	4681      	mov	r9, r0
 8006392:	d1d6      	bne.n	8006342 <_svfiprintf_r+0x166>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	065b      	lsls	r3, r3, #25
 8006398:	f53f af35 	bmi.w	8006206 <_svfiprintf_r+0x2a>
 800639c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800639e:	b01d      	add	sp, #116	; 0x74
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	ab03      	add	r3, sp, #12
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	4622      	mov	r2, r4
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <_svfiprintf_r+0x1ec>)
 80063ac:	a904      	add	r1, sp, #16
 80063ae:	4640      	mov	r0, r8
 80063b0:	f000 f882 	bl	80064b8 <_printf_i>
 80063b4:	e7ea      	b.n	800638c <_svfiprintf_r+0x1b0>
 80063b6:	bf00      	nop
 80063b8:	080069f2 	.word	0x080069f2
 80063bc:	080069f8 	.word	0x080069f8
 80063c0:	080069fc 	.word	0x080069fc
 80063c4:	00000000 	.word	0x00000000
 80063c8:	08006129 	.word	0x08006129

080063cc <_printf_common>:
 80063cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	4691      	mov	r9, r2
 80063d2:	461f      	mov	r7, r3
 80063d4:	688a      	ldr	r2, [r1, #8]
 80063d6:	690b      	ldr	r3, [r1, #16]
 80063d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063dc:	4293      	cmp	r3, r2
 80063de:	bfb8      	it	lt
 80063e0:	4613      	movlt	r3, r2
 80063e2:	f8c9 3000 	str.w	r3, [r9]
 80063e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063ea:	4606      	mov	r6, r0
 80063ec:	460c      	mov	r4, r1
 80063ee:	b112      	cbz	r2, 80063f6 <_printf_common+0x2a>
 80063f0:	3301      	adds	r3, #1
 80063f2:	f8c9 3000 	str.w	r3, [r9]
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	0699      	lsls	r1, r3, #26
 80063fa:	bf42      	ittt	mi
 80063fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006400:	3302      	addmi	r3, #2
 8006402:	f8c9 3000 	strmi.w	r3, [r9]
 8006406:	6825      	ldr	r5, [r4, #0]
 8006408:	f015 0506 	ands.w	r5, r5, #6
 800640c:	d107      	bne.n	800641e <_printf_common+0x52>
 800640e:	f104 0a19 	add.w	sl, r4, #25
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	f8d9 2000 	ldr.w	r2, [r9]
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	42ab      	cmp	r3, r5
 800641c:	dc28      	bgt.n	8006470 <_printf_common+0xa4>
 800641e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	3300      	adds	r3, #0
 8006426:	bf18      	it	ne
 8006428:	2301      	movne	r3, #1
 800642a:	0692      	lsls	r2, r2, #26
 800642c:	d42d      	bmi.n	800648a <_printf_common+0xbe>
 800642e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006432:	4639      	mov	r1, r7
 8006434:	4630      	mov	r0, r6
 8006436:	47c0      	blx	r8
 8006438:	3001      	adds	r0, #1
 800643a:	d020      	beq.n	800647e <_printf_common+0xb2>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	68e5      	ldr	r5, [r4, #12]
 8006440:	f8d9 2000 	ldr.w	r2, [r9]
 8006444:	f003 0306 	and.w	r3, r3, #6
 8006448:	2b04      	cmp	r3, #4
 800644a:	bf08      	it	eq
 800644c:	1aad      	subeq	r5, r5, r2
 800644e:	68a3      	ldr	r3, [r4, #8]
 8006450:	6922      	ldr	r2, [r4, #16]
 8006452:	bf0c      	ite	eq
 8006454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006458:	2500      	movne	r5, #0
 800645a:	4293      	cmp	r3, r2
 800645c:	bfc4      	itt	gt
 800645e:	1a9b      	subgt	r3, r3, r2
 8006460:	18ed      	addgt	r5, r5, r3
 8006462:	f04f 0900 	mov.w	r9, #0
 8006466:	341a      	adds	r4, #26
 8006468:	454d      	cmp	r5, r9
 800646a:	d11a      	bne.n	80064a2 <_printf_common+0xd6>
 800646c:	2000      	movs	r0, #0
 800646e:	e008      	b.n	8006482 <_printf_common+0xb6>
 8006470:	2301      	movs	r3, #1
 8006472:	4652      	mov	r2, sl
 8006474:	4639      	mov	r1, r7
 8006476:	4630      	mov	r0, r6
 8006478:	47c0      	blx	r8
 800647a:	3001      	adds	r0, #1
 800647c:	d103      	bne.n	8006486 <_printf_common+0xba>
 800647e:	f04f 30ff 	mov.w	r0, #4294967295
 8006482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006486:	3501      	adds	r5, #1
 8006488:	e7c3      	b.n	8006412 <_printf_common+0x46>
 800648a:	18e1      	adds	r1, r4, r3
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	2030      	movs	r0, #48	; 0x30
 8006490:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006494:	4422      	add	r2, r4
 8006496:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800649a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800649e:	3302      	adds	r3, #2
 80064a0:	e7c5      	b.n	800642e <_printf_common+0x62>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4622      	mov	r2, r4
 80064a6:	4639      	mov	r1, r7
 80064a8:	4630      	mov	r0, r6
 80064aa:	47c0      	blx	r8
 80064ac:	3001      	adds	r0, #1
 80064ae:	d0e6      	beq.n	800647e <_printf_common+0xb2>
 80064b0:	f109 0901 	add.w	r9, r9, #1
 80064b4:	e7d8      	b.n	8006468 <_printf_common+0x9c>
	...

080064b8 <_printf_i>:
 80064b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80064c0:	460c      	mov	r4, r1
 80064c2:	7e09      	ldrb	r1, [r1, #24]
 80064c4:	b085      	sub	sp, #20
 80064c6:	296e      	cmp	r1, #110	; 0x6e
 80064c8:	4617      	mov	r7, r2
 80064ca:	4606      	mov	r6, r0
 80064cc:	4698      	mov	r8, r3
 80064ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064d0:	f000 80b3 	beq.w	800663a <_printf_i+0x182>
 80064d4:	d822      	bhi.n	800651c <_printf_i+0x64>
 80064d6:	2963      	cmp	r1, #99	; 0x63
 80064d8:	d036      	beq.n	8006548 <_printf_i+0x90>
 80064da:	d80a      	bhi.n	80064f2 <_printf_i+0x3a>
 80064dc:	2900      	cmp	r1, #0
 80064de:	f000 80b9 	beq.w	8006654 <_printf_i+0x19c>
 80064e2:	2958      	cmp	r1, #88	; 0x58
 80064e4:	f000 8083 	beq.w	80065ee <_printf_i+0x136>
 80064e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064f0:	e032      	b.n	8006558 <_printf_i+0xa0>
 80064f2:	2964      	cmp	r1, #100	; 0x64
 80064f4:	d001      	beq.n	80064fa <_printf_i+0x42>
 80064f6:	2969      	cmp	r1, #105	; 0x69
 80064f8:	d1f6      	bne.n	80064e8 <_printf_i+0x30>
 80064fa:	6820      	ldr	r0, [r4, #0]
 80064fc:	6813      	ldr	r3, [r2, #0]
 80064fe:	0605      	lsls	r5, r0, #24
 8006500:	f103 0104 	add.w	r1, r3, #4
 8006504:	d52a      	bpl.n	800655c <_printf_i+0xa4>
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6011      	str	r1, [r2, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	da03      	bge.n	8006516 <_printf_i+0x5e>
 800650e:	222d      	movs	r2, #45	; 0x2d
 8006510:	425b      	negs	r3, r3
 8006512:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006516:	486f      	ldr	r0, [pc, #444]	; (80066d4 <_printf_i+0x21c>)
 8006518:	220a      	movs	r2, #10
 800651a:	e039      	b.n	8006590 <_printf_i+0xd8>
 800651c:	2973      	cmp	r1, #115	; 0x73
 800651e:	f000 809d 	beq.w	800665c <_printf_i+0x1a4>
 8006522:	d808      	bhi.n	8006536 <_printf_i+0x7e>
 8006524:	296f      	cmp	r1, #111	; 0x6f
 8006526:	d020      	beq.n	800656a <_printf_i+0xb2>
 8006528:	2970      	cmp	r1, #112	; 0x70
 800652a:	d1dd      	bne.n	80064e8 <_printf_i+0x30>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	f043 0320 	orr.w	r3, r3, #32
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	e003      	b.n	800653e <_printf_i+0x86>
 8006536:	2975      	cmp	r1, #117	; 0x75
 8006538:	d017      	beq.n	800656a <_printf_i+0xb2>
 800653a:	2978      	cmp	r1, #120	; 0x78
 800653c:	d1d4      	bne.n	80064e8 <_printf_i+0x30>
 800653e:	2378      	movs	r3, #120	; 0x78
 8006540:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006544:	4864      	ldr	r0, [pc, #400]	; (80066d8 <_printf_i+0x220>)
 8006546:	e055      	b.n	80065f4 <_printf_i+0x13c>
 8006548:	6813      	ldr	r3, [r2, #0]
 800654a:	1d19      	adds	r1, r3, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6011      	str	r1, [r2, #0]
 8006550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006558:	2301      	movs	r3, #1
 800655a:	e08c      	b.n	8006676 <_printf_i+0x1be>
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6011      	str	r1, [r2, #0]
 8006560:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006564:	bf18      	it	ne
 8006566:	b21b      	sxthne	r3, r3
 8006568:	e7cf      	b.n	800650a <_printf_i+0x52>
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	6825      	ldr	r5, [r4, #0]
 800656e:	1d18      	adds	r0, r3, #4
 8006570:	6010      	str	r0, [r2, #0]
 8006572:	0628      	lsls	r0, r5, #24
 8006574:	d501      	bpl.n	800657a <_printf_i+0xc2>
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	e002      	b.n	8006580 <_printf_i+0xc8>
 800657a:	0668      	lsls	r0, r5, #25
 800657c:	d5fb      	bpl.n	8006576 <_printf_i+0xbe>
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	4854      	ldr	r0, [pc, #336]	; (80066d4 <_printf_i+0x21c>)
 8006582:	296f      	cmp	r1, #111	; 0x6f
 8006584:	bf14      	ite	ne
 8006586:	220a      	movne	r2, #10
 8006588:	2208      	moveq	r2, #8
 800658a:	2100      	movs	r1, #0
 800658c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006590:	6865      	ldr	r5, [r4, #4]
 8006592:	60a5      	str	r5, [r4, #8]
 8006594:	2d00      	cmp	r5, #0
 8006596:	f2c0 8095 	blt.w	80066c4 <_printf_i+0x20c>
 800659a:	6821      	ldr	r1, [r4, #0]
 800659c:	f021 0104 	bic.w	r1, r1, #4
 80065a0:	6021      	str	r1, [r4, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d13d      	bne.n	8006622 <_printf_i+0x16a>
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	f040 808e 	bne.w	80066c8 <_printf_i+0x210>
 80065ac:	4665      	mov	r5, ip
 80065ae:	2a08      	cmp	r2, #8
 80065b0:	d10b      	bne.n	80065ca <_printf_i+0x112>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	07db      	lsls	r3, r3, #31
 80065b6:	d508      	bpl.n	80065ca <_printf_i+0x112>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	6862      	ldr	r2, [r4, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	bfde      	ittt	le
 80065c0:	2330      	movle	r3, #48	; 0x30
 80065c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065ca:	ebac 0305 	sub.w	r3, ip, r5
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	f8cd 8000 	str.w	r8, [sp]
 80065d4:	463b      	mov	r3, r7
 80065d6:	aa03      	add	r2, sp, #12
 80065d8:	4621      	mov	r1, r4
 80065da:	4630      	mov	r0, r6
 80065dc:	f7ff fef6 	bl	80063cc <_printf_common>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d14d      	bne.n	8006680 <_printf_i+0x1c8>
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	b005      	add	sp, #20
 80065ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ee:	4839      	ldr	r0, [pc, #228]	; (80066d4 <_printf_i+0x21c>)
 80065f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	6821      	ldr	r1, [r4, #0]
 80065f8:	1d1d      	adds	r5, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6015      	str	r5, [r2, #0]
 80065fe:	060a      	lsls	r2, r1, #24
 8006600:	d50b      	bpl.n	800661a <_printf_i+0x162>
 8006602:	07ca      	lsls	r2, r1, #31
 8006604:	bf44      	itt	mi
 8006606:	f041 0120 	orrmi.w	r1, r1, #32
 800660a:	6021      	strmi	r1, [r4, #0]
 800660c:	b91b      	cbnz	r3, 8006616 <_printf_i+0x15e>
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	f022 0220 	bic.w	r2, r2, #32
 8006614:	6022      	str	r2, [r4, #0]
 8006616:	2210      	movs	r2, #16
 8006618:	e7b7      	b.n	800658a <_printf_i+0xd2>
 800661a:	064d      	lsls	r5, r1, #25
 800661c:	bf48      	it	mi
 800661e:	b29b      	uxthmi	r3, r3
 8006620:	e7ef      	b.n	8006602 <_printf_i+0x14a>
 8006622:	4665      	mov	r5, ip
 8006624:	fbb3 f1f2 	udiv	r1, r3, r2
 8006628:	fb02 3311 	mls	r3, r2, r1, r3
 800662c:	5cc3      	ldrb	r3, [r0, r3]
 800662e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006632:	460b      	mov	r3, r1
 8006634:	2900      	cmp	r1, #0
 8006636:	d1f5      	bne.n	8006624 <_printf_i+0x16c>
 8006638:	e7b9      	b.n	80065ae <_printf_i+0xf6>
 800663a:	6813      	ldr	r3, [r2, #0]
 800663c:	6825      	ldr	r5, [r4, #0]
 800663e:	6961      	ldr	r1, [r4, #20]
 8006640:	1d18      	adds	r0, r3, #4
 8006642:	6010      	str	r0, [r2, #0]
 8006644:	0628      	lsls	r0, r5, #24
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	d501      	bpl.n	800664e <_printf_i+0x196>
 800664a:	6019      	str	r1, [r3, #0]
 800664c:	e002      	b.n	8006654 <_printf_i+0x19c>
 800664e:	066a      	lsls	r2, r5, #25
 8006650:	d5fb      	bpl.n	800664a <_printf_i+0x192>
 8006652:	8019      	strh	r1, [r3, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	4665      	mov	r5, ip
 800665a:	e7b9      	b.n	80065d0 <_printf_i+0x118>
 800665c:	6813      	ldr	r3, [r2, #0]
 800665e:	1d19      	adds	r1, r3, #4
 8006660:	6011      	str	r1, [r2, #0]
 8006662:	681d      	ldr	r5, [r3, #0]
 8006664:	6862      	ldr	r2, [r4, #4]
 8006666:	2100      	movs	r1, #0
 8006668:	4628      	mov	r0, r5
 800666a:	f7f9 fdc1 	bl	80001f0 <memchr>
 800666e:	b108      	cbz	r0, 8006674 <_printf_i+0x1bc>
 8006670:	1b40      	subs	r0, r0, r5
 8006672:	6060      	str	r0, [r4, #4]
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	2300      	movs	r3, #0
 800667a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667e:	e7a7      	b.n	80065d0 <_printf_i+0x118>
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	462a      	mov	r2, r5
 8006684:	4639      	mov	r1, r7
 8006686:	4630      	mov	r0, r6
 8006688:	47c0      	blx	r8
 800668a:	3001      	adds	r0, #1
 800668c:	d0aa      	beq.n	80065e4 <_printf_i+0x12c>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	079b      	lsls	r3, r3, #30
 8006692:	d413      	bmi.n	80066bc <_printf_i+0x204>
 8006694:	68e0      	ldr	r0, [r4, #12]
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	4298      	cmp	r0, r3
 800669a:	bfb8      	it	lt
 800669c:	4618      	movlt	r0, r3
 800669e:	e7a3      	b.n	80065e8 <_printf_i+0x130>
 80066a0:	2301      	movs	r3, #1
 80066a2:	464a      	mov	r2, r9
 80066a4:	4639      	mov	r1, r7
 80066a6:	4630      	mov	r0, r6
 80066a8:	47c0      	blx	r8
 80066aa:	3001      	adds	r0, #1
 80066ac:	d09a      	beq.n	80065e4 <_printf_i+0x12c>
 80066ae:	3501      	adds	r5, #1
 80066b0:	68e3      	ldr	r3, [r4, #12]
 80066b2:	9a03      	ldr	r2, [sp, #12]
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	42ab      	cmp	r3, r5
 80066b8:	dcf2      	bgt.n	80066a0 <_printf_i+0x1e8>
 80066ba:	e7eb      	b.n	8006694 <_printf_i+0x1dc>
 80066bc:	2500      	movs	r5, #0
 80066be:	f104 0919 	add.w	r9, r4, #25
 80066c2:	e7f5      	b.n	80066b0 <_printf_i+0x1f8>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1ac      	bne.n	8006622 <_printf_i+0x16a>
 80066c8:	7803      	ldrb	r3, [r0, #0]
 80066ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d2:	e76c      	b.n	80065ae <_printf_i+0xf6>
 80066d4:	08006a03 	.word	0x08006a03
 80066d8:	08006a14 	.word	0x08006a14

080066dc <_sbrk_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4c06      	ldr	r4, [pc, #24]	; (80066f8 <_sbrk_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4605      	mov	r5, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	f7ff fa92 	bl	8005c10 <_sbrk>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_sbrk_r+0x1a>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_sbrk_r+0x1a>
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	20000420 	.word	0x20000420

080066fc <__ascii_wctomb>:
 80066fc:	b149      	cbz	r1, 8006712 <__ascii_wctomb+0x16>
 80066fe:	2aff      	cmp	r2, #255	; 0xff
 8006700:	bf85      	ittet	hi
 8006702:	238a      	movhi	r3, #138	; 0x8a
 8006704:	6003      	strhi	r3, [r0, #0]
 8006706:	700a      	strbls	r2, [r1, #0]
 8006708:	f04f 30ff 	movhi.w	r0, #4294967295
 800670c:	bf98      	it	ls
 800670e:	2001      	movls	r0, #1
 8006710:	4770      	bx	lr
 8006712:	4608      	mov	r0, r1
 8006714:	4770      	bx	lr

08006716 <memmove>:
 8006716:	4288      	cmp	r0, r1
 8006718:	b510      	push	{r4, lr}
 800671a:	eb01 0302 	add.w	r3, r1, r2
 800671e:	d807      	bhi.n	8006730 <memmove+0x1a>
 8006720:	1e42      	subs	r2, r0, #1
 8006722:	4299      	cmp	r1, r3
 8006724:	d00a      	beq.n	800673c <memmove+0x26>
 8006726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800672e:	e7f8      	b.n	8006722 <memmove+0xc>
 8006730:	4283      	cmp	r3, r0
 8006732:	d9f5      	bls.n	8006720 <memmove+0xa>
 8006734:	1881      	adds	r1, r0, r2
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	42d3      	cmn	r3, r2
 800673a:	d100      	bne.n	800673e <memmove+0x28>
 800673c:	bd10      	pop	{r4, pc}
 800673e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006742:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006746:	e7f7      	b.n	8006738 <memmove+0x22>

08006748 <__malloc_lock>:
 8006748:	4770      	bx	lr

0800674a <__malloc_unlock>:
 800674a:	4770      	bx	lr

0800674c <_realloc_r>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	4607      	mov	r7, r0
 8006750:	4614      	mov	r4, r2
 8006752:	460e      	mov	r6, r1
 8006754:	b921      	cbnz	r1, 8006760 <_realloc_r+0x14>
 8006756:	4611      	mov	r1, r2
 8006758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800675c:	f7ff bc8a 	b.w	8006074 <_malloc_r>
 8006760:	b922      	cbnz	r2, 800676c <_realloc_r+0x20>
 8006762:	f7ff fc39 	bl	8005fd8 <_free_r>
 8006766:	4625      	mov	r5, r4
 8006768:	4628      	mov	r0, r5
 800676a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800676c:	f000 f814 	bl	8006798 <_malloc_usable_size_r>
 8006770:	42a0      	cmp	r0, r4
 8006772:	d20f      	bcs.n	8006794 <_realloc_r+0x48>
 8006774:	4621      	mov	r1, r4
 8006776:	4638      	mov	r0, r7
 8006778:	f7ff fc7c 	bl	8006074 <_malloc_r>
 800677c:	4605      	mov	r5, r0
 800677e:	2800      	cmp	r0, #0
 8006780:	d0f2      	beq.n	8006768 <_realloc_r+0x1c>
 8006782:	4631      	mov	r1, r6
 8006784:	4622      	mov	r2, r4
 8006786:	f7ff fadd 	bl	8005d44 <memcpy>
 800678a:	4631      	mov	r1, r6
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff fc23 	bl	8005fd8 <_free_r>
 8006792:	e7e9      	b.n	8006768 <_realloc_r+0x1c>
 8006794:	4635      	mov	r5, r6
 8006796:	e7e7      	b.n	8006768 <_realloc_r+0x1c>

08006798 <_malloc_usable_size_r>:
 8006798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800679c:	1f18      	subs	r0, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfbc      	itt	lt
 80067a2:	580b      	ldrlt	r3, [r1, r0]
 80067a4:	18c0      	addlt	r0, r0, r3
 80067a6:	4770      	bx	lr

080067a8 <_init>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	bf00      	nop
 80067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ae:	bc08      	pop	{r3}
 80067b0:	469e      	mov	lr, r3
 80067b2:	4770      	bx	lr

080067b4 <_fini>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr
