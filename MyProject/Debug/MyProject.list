
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005338  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005674  08005674  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800567c  0800567c  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08005684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000248  080058cc  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080058cc  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f94d  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023a4  00000000  00000000  0002fbc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  00031f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  00032e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001750e  00000000  00000000  00033c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb88  00000000  00000000  0004b186  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000931c6  00000000  00000000  00056d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9ed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000430c  00000000  00000000  000e9f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000248 	.word	0x20000248
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080054b8 	.word	0x080054b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000024c 	.word	0x2000024c
 80001d4:	080054b8 	.word	0x080054b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f8fa 	bl	80006fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f004 fc76 	bl	8004df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f004 fafe 	bl	8004b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_IncTick+0x20>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_IncTick+0x24>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <HAL_IncTick+0x24>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000004 	.word	0x20000004
 8000540:	20000270 	.word	0x20000270

08000544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return uwTick;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_GetTick+0x14>)
 800054a:	681b      	ldr	r3, [r3, #0]
}
 800054c:	4618      	mov	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000270 	.word	0x20000270

0800055c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000564:	f7ff ffee 	bl	8000544 <HAL_GetTick>
 8000568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000574:	d005      	beq.n	8000582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <HAL_Delay+0x40>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000582:	bf00      	nop
 8000584:	f7ff ffde 	bl	8000544 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	429a      	cmp	r2, r3
 8000592:	d8f7      	bhi.n	8000584 <HAL_Delay+0x28>
  {
  }
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000004 	.word	0x20000004

080005a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f003 0307 	and.w	r3, r3, #7
 80005ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005d2:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <__NVIC_SetPriorityGrouping+0x44>)
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	60d3      	str	r3, [r2, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <__NVIC_GetPriorityGrouping+0x18>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	f003 0307 	and.w	r3, r3, #7
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	db0b      	blt.n	800062e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 021f 	and.w	r2, r3, #31
 800061c:	4907      	ldr	r1, [pc, #28]	; (800063c <__NVIC_EnableIRQ+0x38>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	095b      	lsrs	r3, r3, #5
 8000624:	2001      	movs	r0, #1
 8000626:	fa00 f202 	lsl.w	r2, r0, r2
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000e100 	.word	0xe000e100

08000640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db0a      	blt.n	800066a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	b2da      	uxtb	r2, r3
 8000658:	490c      	ldr	r1, [pc, #48]	; (800068c <__NVIC_SetPriority+0x4c>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	0112      	lsls	r2, r2, #4
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	440b      	add	r3, r1
 8000664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000668:	e00a      	b.n	8000680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4908      	ldr	r1, [pc, #32]	; (8000690 <__NVIC_SetPriority+0x50>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 030f 	and.w	r3, r3, #15
 8000676:	3b04      	subs	r3, #4
 8000678:	0112      	lsls	r2, r2, #4
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	440b      	add	r3, r1
 800067e:	761a      	strb	r2, [r3, #24]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000e100 	.word	0xe000e100
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	bf28      	it	cs
 80006b2:	2304      	movcs	r3, #4
 80006b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3304      	adds	r3, #4
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	d902      	bls.n	80006c4 <NVIC_EncodePriority+0x30>
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3b03      	subs	r3, #3
 80006c2:	e000      	b.n	80006c6 <NVIC_EncodePriority+0x32>
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	f04f 32ff 	mov.w	r2, #4294967295
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	43da      	mvns	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	401a      	ands	r2, r3
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006dc:	f04f 31ff 	mov.w	r1, #4294967295
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	43d9      	mvns	r1, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	4313      	orrs	r3, r2
         );
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3724      	adds	r7, #36	; 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff4c 	bl	80005a0 <__NVIC_SetPriorityGrouping>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000722:	f7ff ff61 	bl	80005e8 <__NVIC_GetPriorityGrouping>
 8000726:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	68b9      	ldr	r1, [r7, #8]
 800072c:	6978      	ldr	r0, [r7, #20]
 800072e:	f7ff ffb1 	bl	8000694 <NVIC_EncodePriority>
 8000732:	4602      	mov	r2, r0
 8000734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff80 	bl	8000640 <__NVIC_SetPriority>
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff54 	bl	8000604 <__NVIC_EnableIRQ>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d105      	bne.n	800078c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f004 f9e8 	bl	8004b5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2201      	movs	r2, #1
 8000790:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2202      	movs	r2, #2
 80007b0:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f042 0201 	orr.w	r2, r2, #1
 80007c0:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00a      	b.n	80007de <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	441a      	add	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d3f0      	bcc.n	80007c8 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2201      	movs	r2, #1
 80007f2:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80007f4:	693b      	ldr	r3, [r7, #16]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	371c      	adds	r7, #28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000810:	f7ff fe98 	bl	8000544 <HAL_GetTick>
 8000814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d101      	bne.n	8000820 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	e099      	b.n	8000954 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2202      	movs	r2, #2
 800082c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f022 0201 	bic.w	r2, r2, #1
 800083e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000840:	e00f      	b.n	8000862 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000842:	f7ff fe7f 	bl	8000544 <HAL_GetTick>
 8000846:	4602      	mov	r2, r0
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	2b05      	cmp	r3, #5
 800084e:	d908      	bls.n	8000862 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2220      	movs	r2, #32
 8000854:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2203      	movs	r2, #3
 800085a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800085e:	2303      	movs	r3, #3
 8000860:	e078      	b.n	8000954 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1e8      	bne.n	8000842 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	4b38      	ldr	r3, [pc, #224]	; (800095c <HAL_DMA_Init+0x158>)
 800087c:	4013      	ands	r3, r2
 800087e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685a      	ldr	r2, [r3, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800088e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800089a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a1b      	ldr	r3, [r3, #32]
 80008ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d107      	bne.n	80008cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4313      	orrs	r3, r2
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	f023 0307 	bic.w	r3, r3, #7
 80008e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d117      	bne.n	8000926 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00e      	beq.n	8000926 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fa91 	bl	8000e30 <DMA_CheckFifoParam>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d008      	beq.n	8000926 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2240      	movs	r2, #64	; 0x40
 8000918:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2201      	movs	r2, #1
 800091e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000922:	2301      	movs	r3, #1
 8000924:	e016      	b.n	8000954 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f000 fa48 	bl	8000dc4 <DMA_CalcBaseAndBitshift>
 8000934:	4603      	mov	r3, r0
 8000936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800093c:	223f      	movs	r2, #63	; 0x3f
 800093e:	409a      	lsls	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	f010803f 	.word	0xf010803f

08000960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800097e:	2b01      	cmp	r3, #1
 8000980:	d101      	bne.n	8000986 <HAL_DMA_Start_IT+0x26>
 8000982:	2302      	movs	r3, #2
 8000984:	e040      	b.n	8000a08 <HAL_DMA_Start_IT+0xa8>
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2201      	movs	r2, #1
 800098a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b01      	cmp	r3, #1
 8000998:	d12f      	bne.n	80009fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2202      	movs	r2, #2
 800099e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2200      	movs	r2, #0
 80009a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f000 f9da 	bl	8000d68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b8:	223f      	movs	r2, #63	; 0x3f
 80009ba:	409a      	lsls	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0216 	orr.w	r2, r2, #22
 80009ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d007      	beq.n	80009e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0208 	orr.w	r2, r2, #8
 80009e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0201 	orr.w	r2, r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	e005      	b.n	8000a06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a02:	2302      	movs	r3, #2
 8000a04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d004      	beq.n	8000a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00c      	b.n	8000a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2205      	movs	r2, #5
 8000a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f022 0201 	bic.w	r2, r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a60:	4b92      	ldr	r3, [pc, #584]	; (8000cac <HAL_DMA_IRQHandler+0x258>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a92      	ldr	r2, [pc, #584]	; (8000cb0 <HAL_DMA_IRQHandler+0x25c>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	0a9b      	lsrs	r3, r3, #10
 8000a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7e:	2208      	movs	r2, #8
 8000a80:	409a      	lsls	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d01a      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d013      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f022 0204 	bic.w	r2, r2, #4
 8000aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aac:	2208      	movs	r2, #8
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ab8:	f043 0201 	orr.w	r2, r3, #1
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d012      	beq.n	8000af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00b      	beq.n	8000af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aee:	f043 0202 	orr.w	r2, r3, #2
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afa:	2204      	movs	r2, #4
 8000afc:	409a      	lsls	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4013      	ands	r3, r2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d012      	beq.n	8000b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00b      	beq.n	8000b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b18:	2204      	movs	r2, #4
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b24:	f043 0204 	orr.w	r2, r3, #4
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b30:	2210      	movs	r2, #16
 8000b32:	409a      	lsls	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d043      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d03c      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b4e:	2210      	movs	r2, #16
 8000b50:	409a      	lsls	r2, r3
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d018      	beq.n	8000b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d108      	bne.n	8000b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d024      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	4798      	blx	r3
 8000b82:	e01f      	b.n	8000bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d01b      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	4798      	blx	r3
 8000b94:	e016      	b.n	8000bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d107      	bne.n	8000bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0208 	bic.w	r2, r2, #8
 8000bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc8:	2220      	movs	r2, #32
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 808e 	beq.w	8000cf2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f000 8086 	beq.w	8000cf2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bea:	2220      	movs	r2, #32
 8000bec:	409a      	lsls	r2, r3
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b05      	cmp	r3, #5
 8000bfc:	d136      	bne.n	8000c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0216 	bic.w	r2, r2, #22
 8000c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d103      	bne.n	8000c2e <HAL_DMA_IRQHandler+0x1da>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d007      	beq.n	8000c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0208 	bic.w	r2, r2, #8
 8000c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c42:	223f      	movs	r2, #63	; 0x3f
 8000c44:	409a      	lsls	r2, r3
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d07d      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	4798      	blx	r3
        }
        return;
 8000c6a:	e078      	b.n	8000d5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d01c      	beq.n	8000cb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d108      	bne.n	8000c9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d030      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	4798      	blx	r3
 8000c98:	e02b      	b.n	8000cf2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d027      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	4798      	blx	r3
 8000caa:	e022      	b.n	8000cf2 <HAL_DMA_IRQHandler+0x29e>
 8000cac:	20000074 	.word	0x20000074
 8000cb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10f      	bne.n	8000ce2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0210 	bic.w	r2, r2, #16
 8000cd0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d032      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d022      	beq.n	8000d4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2205      	movs	r2, #5
 8000d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0201 	bic.w	r2, r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d307      	bcc.n	8000d3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f2      	bne.n	8000d1e <HAL_DMA_IRQHandler+0x2ca>
 8000d38:	e000      	b.n	8000d3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d005      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	4798      	blx	r3
 8000d5c:	e000      	b.n	8000d60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d5e:	bf00      	nop
    }
  }
}
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop

08000d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b40      	cmp	r3, #64	; 0x40
 8000d94:	d108      	bne.n	8000da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000da6:	e007      	b.n	8000db8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	60da      	str	r2, [r3, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	3b10      	subs	r3, #16
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <DMA_CalcBaseAndBitshift+0x64>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <DMA_CalcBaseAndBitshift+0x68>)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d909      	bls.n	8000e06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dfa:	f023 0303 	bic.w	r3, r3, #3
 8000dfe:	1d1a      	adds	r2, r3, #4
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	659a      	str	r2, [r3, #88]	; 0x58
 8000e04:	e007      	b.n	8000e16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e0e:	f023 0303 	bic.w	r3, r3, #3
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	aaaaaaab 	.word	0xaaaaaaab
 8000e2c:	08005524 	.word	0x08005524

08000e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d11f      	bne.n	8000e8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d855      	bhi.n	8000efc <DMA_CheckFifoParam+0xcc>
 8000e50:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DMA_CheckFifoParam+0x28>)
 8000e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e7b 	.word	0x08000e7b
 8000e60:	08000e69 	.word	0x08000e69
 8000e64:	08000efd 	.word	0x08000efd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d045      	beq.n	8000f00 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e78:	e042      	b.n	8000f00 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e82:	d13f      	bne.n	8000f04 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e88:	e03c      	b.n	8000f04 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e92:	d121      	bne.n	8000ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d836      	bhi.n	8000f08 <DMA_CheckFifoParam+0xd8>
 8000e9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <DMA_CheckFifoParam+0x70>)
 8000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea0:	08000eb1 	.word	0x08000eb1
 8000ea4:	08000eb7 	.word	0x08000eb7
 8000ea8:	08000eb1 	.word	0x08000eb1
 8000eac:	08000ec9 	.word	0x08000ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8000eb4:	e02f      	b.n	8000f16 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d024      	beq.n	8000f0c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ec6:	e021      	b.n	8000f0c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ed0:	d11e      	bne.n	8000f10 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000ed6:	e01b      	b.n	8000f10 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d902      	bls.n	8000ee4 <DMA_CheckFifoParam+0xb4>
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d003      	beq.n	8000eea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000ee2:	e018      	b.n	8000f16 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8000ee8:	e015      	b.n	8000f16 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00e      	beq.n	8000f14 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8000efa:	e00b      	b.n	8000f14 <DMA_CheckFifoParam+0xe4>
      break;
 8000efc:	bf00      	nop
 8000efe:	e00a      	b.n	8000f16 <DMA_CheckFifoParam+0xe6>
      break;
 8000f00:	bf00      	nop
 8000f02:	e008      	b.n	8000f16 <DMA_CheckFifoParam+0xe6>
      break;
 8000f04:	bf00      	nop
 8000f06:	e006      	b.n	8000f16 <DMA_CheckFifoParam+0xe6>
      break;
 8000f08:	bf00      	nop
 8000f0a:	e004      	b.n	8000f16 <DMA_CheckFifoParam+0xe6>
      break;
 8000f0c:	bf00      	nop
 8000f0e:	e002      	b.n	8000f16 <DMA_CheckFifoParam+0xe6>
      break;   
 8000f10:	bf00      	nop
 8000f12:	e000      	b.n	8000f16 <DMA_CheckFifoParam+0xe6>
      break;
 8000f14:	bf00      	nop
    }
  } 
  
  return status; 
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	e159      	b.n	80011f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 8148 	bne.w	80011ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d00b      	beq.n	8000f7e <HAL_GPIO_Init+0x5a>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f72:	2b11      	cmp	r3, #17
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b12      	cmp	r3, #18
 8000f7c:	d130      	bne.n	8000fe0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	f003 0201 	and.w	r2, r3, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0xfc>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b12      	cmp	r3, #18
 800101e:	d123      	bne.n	8001068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	69b9      	ldr	r1, [r7, #24]
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0203 	and.w	r2, r3, #3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80a2 	beq.w	80011ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b56      	ldr	r3, [pc, #344]	; (8001208 <HAL_GPIO_Init+0x2e4>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a55      	ldr	r2, [pc, #340]	; (8001208 <HAL_GPIO_Init+0x2e4>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b53      	ldr	r3, [pc, #332]	; (8001208 <HAL_GPIO_Init+0x2e4>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c6:	4a51      	ldr	r2, [pc, #324]	; (800120c <HAL_GPIO_Init+0x2e8>)
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a48      	ldr	r2, [pc, #288]	; (8001210 <HAL_GPIO_Init+0x2ec>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x202>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a47      	ldr	r2, [pc, #284]	; (8001214 <HAL_GPIO_Init+0x2f0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x1fe>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a46      	ldr	r2, [pc, #280]	; (8001218 <HAL_GPIO_Init+0x2f4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x1fa>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a45      	ldr	r2, [pc, #276]	; (800121c <HAL_GPIO_Init+0x2f8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x1f6>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a44      	ldr	r2, [pc, #272]	; (8001220 <HAL_GPIO_Init+0x2fc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x1f2>
 8001112:	2304      	movs	r3, #4
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x204>
 8001116:	2307      	movs	r3, #7
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x204>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x204>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x204>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x204>
 8001126:	2300      	movs	r3, #0
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001138:	4934      	ldr	r1, [pc, #208]	; (800120c <HAL_GPIO_Init+0x2e8>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <HAL_GPIO_Init+0x300>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116a:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <HAL_GPIO_Init+0x300>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <HAL_GPIO_Init+0x300>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001194:	4a23      	ldr	r2, [pc, #140]	; (8001224 <HAL_GPIO_Init+0x300>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_GPIO_Init+0x300>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a19      	ldr	r2, [pc, #100]	; (8001224 <HAL_GPIO_Init+0x300>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_GPIO_Init+0x300>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_GPIO_Init+0x300>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	f67f aea2 	bls.w	8000f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011fc:	bf00      	nop
 80011fe:	3724      	adds	r7, #36	; 0x24
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40013c00 	.word	0x40013c00

08001228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001244:	e003      	b.n	800124e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	041a      	lsls	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	401a      	ands	r2, r3
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	429a      	cmp	r2, r3
 8001272:	d104      	bne.n	800127e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	041a      	lsls	r2, r3, #16
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800127c:	e002      	b.n	8001284 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e25b      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d075      	beq.n	800139a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ae:	4ba3      	ldr	r3, [pc, #652]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d00c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ba:	4ba0      	ldr	r3, [pc, #640]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d112      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c6:	4b9d      	ldr	r3, [pc, #628]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d2:	d10b      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	4b99      	ldr	r3, [pc, #612]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d05b      	beq.n	8001398 <HAL_RCC_OscConfig+0x108>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d157      	bne.n	8001398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e236      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f4:	d106      	bne.n	8001304 <HAL_RCC_OscConfig+0x74>
 80012f6:	4b91      	ldr	r3, [pc, #580]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a90      	ldr	r2, [pc, #576]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x98>
 800130e:	4b8b      	ldr	r3, [pc, #556]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a8a      	ldr	r2, [pc, #552]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a87      	ldr	r2, [pc, #540]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001328:	4b84      	ldr	r3, [pc, #528]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a83      	ldr	r2, [pc, #524]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b81      	ldr	r3, [pc, #516]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a80      	ldr	r2, [pc, #512]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff f8fc 	bl	8000544 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff f8f8 	bl	8000544 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1fb      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b76      	ldr	r3, [pc, #472]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xc0>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff f8e8 	bl	8000544 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff f8e4 	bl	8000544 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1e7      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b6c      	ldr	r3, [pc, #432]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0xe8>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d063      	beq.n	800146e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b62      	ldr	r3, [pc, #392]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1bb      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b56      	ldr	r3, [pc, #344]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4952      	ldr	r1, [pc, #328]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e03a      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b4f      	ldr	r3, [pc, #316]	; (8001540 <HAL_RCC_OscConfig+0x2b0>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff f89d 	bl	8000544 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff f899 	bl	8000544 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e19c      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4940      	ldr	r1, [pc, #256]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <HAL_RCC_OscConfig+0x2b0>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff f87c 	bl	8000544 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff f878 	bl	8000544 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e17b      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d030      	beq.n	80014dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d016      	beq.n	80014b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_RCC_OscConfig+0x2b4>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff f85c 	bl	8000544 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff f858 	bl	8000544 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e15b      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x200>
 80014ae:	e015      	b.n	80014dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_RCC_OscConfig+0x2b4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff f845 	bl	8000544 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014be:	f7ff f841 	bl	8000544 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e144      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a0 	beq.w	800162a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_RCC_OscConfig+0x2ac>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_RCC_OscConfig+0x2b8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d121      	bne.n	800156a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_RCC_OscConfig+0x2b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_RCC_OscConfig+0x2b8>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff f807 	bl	8000544 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e011      	b.n	800155e <HAL_RCC_OscConfig+0x2ce>
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	42470000 	.word	0x42470000
 8001544:	42470e80 	.word	0x42470e80
 8001548:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154c:	f7fe fffa 	bl	8000544 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e0fd      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x4d4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <HAL_RCC_OscConfig+0x2f0>
 8001572:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a7c      	ldr	r2, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	e01c      	b.n	80015ba <HAL_RCC_OscConfig+0x32a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b05      	cmp	r3, #5
 8001586:	d10c      	bne.n	80015a2 <HAL_RCC_OscConfig+0x312>
 8001588:	4b77      	ldr	r3, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	4a76      	ldr	r2, [pc, #472]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6713      	str	r3, [r2, #112]	; 0x70
 8001594:	4b74      	ldr	r3, [pc, #464]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a73      	ldr	r2, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
 80015a0:	e00b      	b.n	80015ba <HAL_RCC_OscConfig+0x32a>
 80015a2:	4b71      	ldr	r3, [pc, #452]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a70      	ldr	r2, [pc, #448]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	4b6e      	ldr	r3, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a6d      	ldr	r2, [pc, #436]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d015      	beq.n	80015ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c2:	f7fe ffbf 	bl	8000544 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c8:	e00a      	b.n	80015e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7fe ffbb 	bl	8000544 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d8:	4293      	cmp	r3, r2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e0bc      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e0:	4b61      	ldr	r3, [pc, #388]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0ee      	beq.n	80015ca <HAL_RCC_OscConfig+0x33a>
 80015ec:	e014      	b.n	8001618 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ee:	f7fe ffa9 	bl	8000544 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7fe ffa5 	bl	8000544 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0a6      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160c:	4b56      	ldr	r3, [pc, #344]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ee      	bne.n	80015f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d105      	bne.n	800162a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161e:	4b52      	ldr	r3, [pc, #328]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a51      	ldr	r2, [pc, #324]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 8001624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8092 	beq.w	8001758 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001634:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b08      	cmp	r3, #8
 800163e:	d05c      	beq.n	80016fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d141      	bne.n	80016cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001648:	4b48      	ldr	r3, [pc, #288]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7fe ff79 	bl	8000544 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001656:	f7fe ff75 	bl	8000544 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e078      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69da      	ldr	r2, [r3, #28]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	019b      	lsls	r3, r3, #6
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	085b      	lsrs	r3, r3, #1
 800168c:	3b01      	subs	r3, #1
 800168e:	041b      	lsls	r3, r3, #16
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	061b      	lsls	r3, r3, #24
 8001698:	4933      	ldr	r1, [pc, #204]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169e:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7fe ff4e 	bl	8000544 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7fe ff4a 	bl	8000544 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04d      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x41c>
 80016ca:	e045      	b.n	8001758 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x4dc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7fe ff37 	bl	8000544 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7fe ff33 	bl	8000544 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e036      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x44a>
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e029      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_RCC_OscConfig+0x4d8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	429a      	cmp	r2, r3
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d115      	bne.n	8001754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800172e:	4013      	ands	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001734:	4293      	cmp	r3, r2
 8001736:	d10d      	bne.n	8001754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d106      	bne.n	8001754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40007000 	.word	0x40007000
 8001768:	40023800 	.word	0x40023800
 800176c:	42470060 	.word	0x42470060

08001770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0cc      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001784:	4b68      	ldr	r3, [pc, #416]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d90c      	bls.n	80017ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b65      	ldr	r3, [pc, #404]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0b8      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a58      	ldr	r2, [pc, #352]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	494d      	ldr	r1, [pc, #308]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d044      	beq.n	8001890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d119      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e07f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d003      	beq.n	800182e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	2b03      	cmp	r3, #3
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	4b3b      	ldr	r3, [pc, #236]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e067      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f023 0203 	bic.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4934      	ldr	r1, [pc, #208]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001860:	f7fe fe70 	bl	8000544 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	e00a      	b.n	800187e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7fe fe6c 	bl	8000544 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e04f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 020c 	and.w	r2, r3, #12
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	429a      	cmp	r2, r3
 800188e:	d1eb      	bne.n	8001868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d20c      	bcs.n	80018b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e032      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	490e      	ldr	r1, [pc, #56]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f6:	f000 f821 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80018fa:	4601      	mov	r1, r0
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	fa21 f303 	lsr.w	r3, r1, r3
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fa6e 	bl	8004df8 <HAL_InitTick>

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00
 800192c:	40023800 	.word	0x40023800
 8001930:	0800552c 	.word	0x0800552c
 8001934:	20000074 	.word	0x20000074
 8001938:	20000000 	.word	0x20000000

0800193c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b04      	cmp	r3, #4
 800195c:	d007      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x32>
 800195e:	2b08      	cmp	r3, #8
 8001960:	d008      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x38>
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 80b4 	bne.w	8001ad0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800196a:	60bb      	str	r3, [r7, #8]
       break;
 800196c:	e0b3      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196e:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001970:	60bb      	str	r3, [r7, #8]
      break;
 8001972:	e0b0      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001974:	4b5a      	ldr	r3, [pc, #360]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800197c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d04a      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	f04f 0400 	mov.w	r4, #0
 8001994:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	ea03 0501 	and.w	r5, r3, r1
 80019a0:	ea04 0602 	and.w	r6, r4, r2
 80019a4:	4629      	mov	r1, r5
 80019a6:	4632      	mov	r2, r6
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	f04f 0400 	mov.w	r4, #0
 80019b0:	0154      	lsls	r4, r2, #5
 80019b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019b6:	014b      	lsls	r3, r1, #5
 80019b8:	4619      	mov	r1, r3
 80019ba:	4622      	mov	r2, r4
 80019bc:	1b49      	subs	r1, r1, r5
 80019be:	eb62 0206 	sbc.w	r2, r2, r6
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f04f 0400 	mov.w	r4, #0
 80019ca:	0194      	lsls	r4, r2, #6
 80019cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019d0:	018b      	lsls	r3, r1, #6
 80019d2:	1a5b      	subs	r3, r3, r1
 80019d4:	eb64 0402 	sbc.w	r4, r4, r2
 80019d8:	f04f 0100 	mov.w	r1, #0
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	00e2      	lsls	r2, r4, #3
 80019e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019e6:	00d9      	lsls	r1, r3, #3
 80019e8:	460b      	mov	r3, r1
 80019ea:	4614      	mov	r4, r2
 80019ec:	195b      	adds	r3, r3, r5
 80019ee:	eb44 0406 	adc.w	r4, r4, r6
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	0262      	lsls	r2, r4, #9
 80019fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a00:	0259      	lsls	r1, r3, #9
 8001a02:	460b      	mov	r3, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	4621      	mov	r1, r4
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f04f 0400 	mov.w	r4, #0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	f7fe fbe0 	bl	80001d8 <__aeabi_uldivmod>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	e049      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	f04f 0400 	mov.w	r4, #0
 8001a2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	ea03 0501 	and.w	r5, r3, r1
 8001a36:	ea04 0602 	and.w	r6, r4, r2
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	4632      	mov	r2, r6
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	f04f 0400 	mov.w	r4, #0
 8001a46:	0154      	lsls	r4, r2, #5
 8001a48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a4c:	014b      	lsls	r3, r1, #5
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4622      	mov	r2, r4
 8001a52:	1b49      	subs	r1, r1, r5
 8001a54:	eb62 0206 	sbc.w	r2, r2, r6
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	f04f 0400 	mov.w	r4, #0
 8001a60:	0194      	lsls	r4, r2, #6
 8001a62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a66:	018b      	lsls	r3, r1, #6
 8001a68:	1a5b      	subs	r3, r3, r1
 8001a6a:	eb64 0402 	sbc.w	r4, r4, r2
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	00e2      	lsls	r2, r4, #3
 8001a78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a7c:	00d9      	lsls	r1, r3, #3
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	195b      	adds	r3, r3, r5
 8001a84:	eb44 0406 	adc.w	r4, r4, r6
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	02a2      	lsls	r2, r4, #10
 8001a92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a96:	0299      	lsls	r1, r3, #10
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4614      	mov	r4, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f04f 0400 	mov.w	r4, #0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4623      	mov	r3, r4
 8001aaa:	f7fe fb95 	bl	80001d8 <__aeabi_uldivmod>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460c      	mov	r4, r1
 8001ab2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	60bb      	str	r3, [r7, #8]
      break;
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ad2:	60bb      	str	r3, [r7, #8]
      break;
 8001ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	007a1200 	.word	0x007a1200

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000074 	.word	0x20000074

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	0800553c 	.word	0x0800553c

08001b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b30:	f7ff ffdc 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b34:	4601      	mov	r1, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0b5b      	lsrs	r3, r3, #13
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	0800553c 	.word	0x0800553c

08001b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	220f      	movs	r2, #15
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetClockConfig+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 020f 	and.w	r2, r3, #15
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d038      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001be6:	f7fe fcad 	bl	8000544 <HAL_GetTick>
 8001bea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bee:	f7fe fca9 	bl	8000544 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0bd      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c00:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	071b      	lsls	r3, r3, #28
 8001c1e:	495a      	ldr	r1, [pc, #360]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c26:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c2c:	f7fe fc8a 	bl	8000544 <HAL_GetTick>
 8001c30:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c34:	f7fe fc86 	bl	8000544 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e09a      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c46:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8083 	beq.w	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	4b48      	ldr	r3, [pc, #288]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c70:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a42      	ldr	r2, [pc, #264]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c88:	f7fe fc5c 	bl	8000544 <HAL_GetTick>
 8001c8c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c90:	f7fe fc58 	bl	8000544 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e06c      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ca2:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cae:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d02f      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d028      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ce2:	4a29      	ldr	r2, [pc, #164]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d114      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fc26 	bl	8000544 <HAL_GetTick>
 8001cf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7fe fc22 	bl	8000544 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e034      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0ee      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d2a:	d10d      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d40:	4911      	ldr	r1, [pc, #68]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
 8001d46:	e005      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d52:	6093      	str	r3, [r2, #8]
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d60:	4909      	ldr	r1, [pc, #36]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7d1a      	ldrb	r2, [r3, #20]
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001d78:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	42470068 	.word	0x42470068
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	42470e40 	.word	0x42470e40
 8001d94:	424711e0 	.word	0x424711e0

08001d98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e083      	b.n	8001eb2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7f5b      	ldrb	r3, [r3, #29]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f002 fef0 	bl	8004ba0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	22ca      	movs	r2, #202	; 0xca
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2253      	movs	r2, #83	; 0x53
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fb7a 	bl	80024d0 <RTC_EnterInitMode>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	22ff      	movs	r2, #255	; 0xff
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2204      	movs	r2, #4
 8001dee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e05e      	b.n	8001eb2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e06:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68d2      	ldr	r2, [r2, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6919      	ldr	r1, [r3, #16]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	041a      	lsls	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e52:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10e      	bne.n	8001e80 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fb0c 	bl	8002480 <HAL_RTC_WaitForSynchro>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e018      	b.n	8001eb2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	22ff      	movs	r2, #255	; 0xff
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001eba:	b590      	push	{r4, r7, lr}
 8001ebc:	b087      	sub	sp, #28
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	7f1b      	ldrb	r3, [r3, #28]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RTC_SetTime+0x1c>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e0aa      	b.n	800202c <HAL_RTC_SetTime+0x172>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d126      	bne.n	8001f36 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fb11 	bl	8002528 <RTC_ByteToBcd2>
 8001f06:	4603      	mov	r3, r0
 8001f08:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	785b      	ldrb	r3, [r3, #1]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fb0a 	bl	8002528 <RTC_ByteToBcd2>
 8001f14:	4603      	mov	r3, r0
 8001f16:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f18:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	789b      	ldrb	r3, [r3, #2]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fb02 	bl	8002528 <RTC_ByteToBcd2>
 8001f24:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f26:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	78db      	ldrb	r3, [r3, #3]
 8001f2e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e018      	b.n	8001f68 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	785b      	ldrb	r3, [r3, #1]
 8001f54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f56:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001f5c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	78db      	ldrb	r3, [r3, #3]
 8001f62:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	22ca      	movs	r2, #202	; 0xca
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2253      	movs	r2, #83	; 0x53
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 faa9 	bl	80024d0 <RTC_EnterInitMode>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	22ff      	movs	r2, #255	; 0xff
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2204      	movs	r2, #4
 8001f90:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e047      	b.n	800202c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001fa6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001faa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d111      	bne.n	8002016 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fa44 	bl	8002480 <HAL_RTC_WaitForSynchro>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2204      	movs	r2, #4
 800200a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00a      	b.n	800202c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800202a:	2300      	movs	r3, #0
  }
}
 800202c:	4618      	mov	r0, r3
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}

08002034 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	7f1b      	ldrb	r3, [r3, #28]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_RTC_SetDate+0x1c>
 800204c:	2302      	movs	r3, #2
 800204e:	e094      	b.n	800217a <HAL_RTC_SetDate+0x146>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2202      	movs	r2, #2
 800205a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10e      	bne.n	8002080 <HAL_RTC_SetDate+0x4c>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	f023 0310 	bic.w	r3, r3, #16
 8002076:	b2db      	uxtb	r3, r3
 8002078:	330a      	adds	r3, #10
 800207a:	b2da      	uxtb	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d11c      	bne.n	80020c0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	78db      	ldrb	r3, [r3, #3]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fa4c 	bl	8002528 <RTC_ByteToBcd2>
 8002090:	4603      	mov	r3, r0
 8002092:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fa45 	bl	8002528 <RTC_ByteToBcd2>
 800209e:	4603      	mov	r3, r0
 80020a0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80020a2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	789b      	ldrb	r3, [r3, #2]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fa3d 	bl	8002528 <RTC_ByteToBcd2>
 80020ae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80020b0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e00e      	b.n	80020de <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	78db      	ldrb	r3, [r3, #3]
 80020c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80020cc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80020d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	22ca      	movs	r2, #202	; 0xca
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2253      	movs	r2, #83	; 0x53
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f9ee 	bl	80024d0 <RTC_EnterInitMode>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	22ff      	movs	r2, #255	; 0xff
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2204      	movs	r2, #4
 8002106:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e033      	b.n	800217a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800211c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002120:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002130:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f99d 	bl	8002480 <HAL_RTC_WaitForSynchro>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00b      	beq.n	8002164 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	22ff      	movs	r2, #255	; 0xff
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2204      	movs	r2, #4
 8002158:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e00a      	b.n	800217a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	22ff      	movs	r2, #255	; 0xff
 800216a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
  }
}
 800217a:	4618      	mov	r0, r3
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd90      	pop	{r4, r7, pc}
	...

08002184 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002198:	4b93      	ldr	r3, [pc, #588]	; (80023e8 <HAL_RTC_SetAlarm_IT+0x264>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a93      	ldr	r2, [pc, #588]	; (80023ec <HAL_RTC_SetAlarm_IT+0x268>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0adb      	lsrs	r3, r3, #11
 80021a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	7f1b      	ldrb	r3, [r3, #28]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_RTC_SetAlarm_IT+0x36>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e111      	b.n	80023de <HAL_RTC_SetAlarm_IT+0x25a>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2202      	movs	r2, #2
 80021c4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d137      	bne.n	800223c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2200      	movs	r2, #0
 80021de:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f99f 	bl	8002528 <RTC_ByteToBcd2>
 80021ea:	4603      	mov	r3, r0
 80021ec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f998 	bl	8002528 <RTC_ByteToBcd2>
 80021f8:	4603      	mov	r3, r0
 80021fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80021fc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	789b      	ldrb	r3, [r3, #2]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f990 	bl	8002528 <RTC_ByteToBcd2>
 8002208:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800220a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	78db      	ldrb	r3, [r3, #3]
 8002212:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002214:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f982 	bl	8002528 <RTC_ByteToBcd2>
 8002224:	4603      	mov	r3, r0
 8002226:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002228:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002230:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002236:	4313      	orrs	r3, r2
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e023      	b.n	8002284 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2200      	movs	r2, #0
 800224e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800225c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002262:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	78db      	ldrb	r3, [r3, #3]
 8002268:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800226a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002272:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002274:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800227a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002280:	4313      	orrs	r3, r2
 8002282:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	22ca      	movs	r2, #202	; 0xca
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2253      	movs	r2, #83	; 0x53
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a8:	d141      	bne.n	800232e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80022ca:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	617a      	str	r2, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10b      	bne.n	80022ee <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	22ff      	movs	r2, #255	; 0xff
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2203      	movs	r2, #3
 80022e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e077      	b.n	80023de <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0e7      	beq.n	80022cc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800231a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	e040      	b.n	80023b0 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800233c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800234e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	1e5a      	subs	r2, r3, #1
 8002354:	617a      	str	r2, [r7, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	22ff      	movs	r2, #255	; 0xff
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2203      	movs	r2, #3
 8002366:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e035      	b.n	80023de <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0e7      	beq.n	8002350 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ae:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80023b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ba:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80023c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	22ff      	movs	r2, #255	; 0xff
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000074 	.word	0x20000074
 80023ec:	10624dd3 	.word	0x10624dd3
 80023f0:	40013c00 	.word	0x40013c00

080023f4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d012      	beq.n	8002430 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f002 fb45 	bl	8004aa8 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800242e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f889 	bl	8002564 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002462:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RTC_AlarmIRQHandler+0x88>)
 8002466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	775a      	strb	r2, [r3, #29]
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40013c00 	.word	0x40013c00

08002480 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800249a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe f852 	bl	8000544 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80024a2:	e009      	b.n	80024b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80024a4:	f7fe f84e 	bl	8000544 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024b2:	d901      	bls.n	80024b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e007      	b.n	80024c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ee      	beq.n	80024a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d119      	bne.n	800251e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f04f 32ff 	mov.w	r2, #4294967295
 80024f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024f4:	f7fe f826 	bl	8000544 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80024fa:	e009      	b.n	8002510 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80024fc:	f7fe f822 	bl	8000544 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800250a:	d901      	bls.n	8002510 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e007      	b.n	8002520 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ee      	beq.n	80024fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002536:	e005      	b.n	8002544 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	3b0a      	subs	r3, #10
 8002542:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b09      	cmp	r3, #9
 8002548:	d8f6      	bhi.n	8002538 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	b2da      	uxtb	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	4313      	orrs	r3, r2
 8002556:	b2db      	uxtb	r3, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e01d      	b.n	80025c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f002 fb1a 	bl	8004bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f000 fb8e 	bl	8002cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b06      	cmp	r3, #6
 80025f6:	d007      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e01d      	b.n	8002664 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f815 	bl	800266c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2202      	movs	r2, #2
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f000 fb3f 	bl	8002cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2201      	movs	r2, #1
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fdc6 	bl	8003224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_TIM_PWM_Start+0x60>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d107      	bne.n	80026b2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b06      	cmp	r3, #6
 80026c2:	d007      	beq.n	80026d4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40010000 	.word	0x40010000

080026e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fd94 	bl	8003224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <HAL_TIM_PWM_Stop+0x94>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d117      	bne.n	8002736 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_TIM_PWM_Stop+0x52>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	f240 4344 	movw	r3, #1092	; 0x444
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d107      	bne.n	8002736 <HAL_TIM_PWM_Stop+0x52>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <HAL_TIM_PWM_Stop+0x82>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	f240 4344 	movw	r3, #1092	; 0x444
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_TIM_PWM_Stop+0x82>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40010000 	.word	0x40010000

0800277c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d122      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b02      	cmp	r3, #2
 800279e:	d11b      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0202 	mvn.w	r2, #2
 80027a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa6b 	bl	8002c9a <HAL_TIM_IC_CaptureCallback>
 80027c4:	e005      	b.n	80027d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa5d 	bl	8002c86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fa6e 	bl	8002cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d122      	bne.n	800282c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d11b      	bne.n	800282c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0204 	mvn.w	r2, #4
 80027fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa41 	bl	8002c9a <HAL_TIM_IC_CaptureCallback>
 8002818:	e005      	b.n	8002826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fa33 	bl	8002c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fa44 	bl	8002cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b08      	cmp	r3, #8
 8002838:	d122      	bne.n	8002880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b08      	cmp	r3, #8
 8002846:	d11b      	bne.n	8002880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0208 	mvn.w	r2, #8
 8002850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2204      	movs	r2, #4
 8002856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fa17 	bl	8002c9a <HAL_TIM_IC_CaptureCallback>
 800286c:	e005      	b.n	800287a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa09 	bl	8002c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fa1a 	bl	8002cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b10      	cmp	r3, #16
 800288c:	d122      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b10      	cmp	r3, #16
 800289a:	d11b      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0210 	mvn.w	r2, #16
 80028a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2208      	movs	r2, #8
 80028aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f9ed 	bl	8002c9a <HAL_TIM_IC_CaptureCallback>
 80028c0:	e005      	b.n	80028ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f9df 	bl	8002c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f9f0 	bl	8002cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d10e      	bne.n	8002900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0201 	mvn.w	r2, #1
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f002 f8ec 	bl	8004ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	2b80      	cmp	r3, #128	; 0x80
 800290c:	d10e      	bne.n	800292c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d107      	bne.n	800292c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fd1a 	bl	8003360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d107      	bne.n	8002958 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f9b5 	bl	8002cc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b20      	cmp	r3, #32
 8002964:	d10e      	bne.n	8002984 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b20      	cmp	r3, #32
 8002972:	d107      	bne.n	8002984 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0220 	mvn.w	r2, #32
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fce4 	bl	800334c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e0b4      	b.n	8002b10 <HAL_TIM_PWM_ConfigChannel+0x184>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	f200 809f 	bhi.w	8002afc <HAL_TIM_PWM_ConfigChannel+0x170>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	080029f9 	.word	0x080029f9
 80029c8:	08002afd 	.word	0x08002afd
 80029cc:	08002afd 	.word	0x08002afd
 80029d0:	08002afd 	.word	0x08002afd
 80029d4:	08002a39 	.word	0x08002a39
 80029d8:	08002afd 	.word	0x08002afd
 80029dc:	08002afd 	.word	0x08002afd
 80029e0:	08002afd 	.word	0x08002afd
 80029e4:	08002a7b 	.word	0x08002a7b
 80029e8:	08002afd 	.word	0x08002afd
 80029ec:	08002afd 	.word	0x08002afd
 80029f0:	08002afd 	.word	0x08002afd
 80029f4:	08002abb 	.word	0x08002abb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f9ea 	bl	8002dd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6999      	ldr	r1, [r3, #24]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	619a      	str	r2, [r3, #24]
      break;
 8002a36:	e062      	b.n	8002afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa30 	bl	8002ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6999      	ldr	r1, [r3, #24]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	021a      	lsls	r2, r3, #8
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	619a      	str	r2, [r3, #24]
      break;
 8002a78:	e041      	b.n	8002afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa7b 	bl	8002f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0208 	orr.w	r2, r2, #8
 8002a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0204 	bic.w	r2, r2, #4
 8002aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69d9      	ldr	r1, [r3, #28]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	61da      	str	r2, [r3, #28]
      break;
 8002ab8:	e021      	b.n	8002afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fac5 	bl	8003050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69d9      	ldr	r1, [r3, #28]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	021a      	lsls	r2, r3, #8
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	61da      	str	r2, [r3, #28]
      break;
 8002afa:	e000      	b.n	8002afe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002afc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIM_ConfigClockSource+0x18>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e0a6      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x166>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d067      	beq.n	8002c38 <HAL_TIM_ConfigClockSource+0x120>
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d80b      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x6c>
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d073      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x140>
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d802      	bhi.n	8002b7a <HAL_TIM_ConfigClockSource+0x62>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d06f      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b78:	e078      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d06c      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x140>
 8002b7e:	2b30      	cmp	r3, #48	; 0x30
 8002b80:	d06a      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b82:	e073      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b84:	2b70      	cmp	r3, #112	; 0x70
 8002b86:	d00d      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0x8c>
 8002b88:	2b70      	cmp	r3, #112	; 0x70
 8002b8a:	d804      	bhi.n	8002b96 <HAL_TIM_ConfigClockSource+0x7e>
 8002b8c:	2b50      	cmp	r3, #80	; 0x50
 8002b8e:	d033      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0xe0>
 8002b90:	2b60      	cmp	r3, #96	; 0x60
 8002b92:	d041      	beq.n	8002c18 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b94:	e06a      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	d066      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x152>
 8002b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba0:	d017      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ba2:	e063      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f000 fb16 	bl	80031e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	609a      	str	r2, [r3, #8]
      break;
 8002bd0:	e04c      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6899      	ldr	r1, [r3, #8]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f000 faff 	bl	80031e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf4:	609a      	str	r2, [r3, #8]
      break;
 8002bf6:	e039      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	461a      	mov	r2, r3
 8002c06:	f000 fa73 	bl	80030f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2150      	movs	r1, #80	; 0x50
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 facc 	bl	80031ae <TIM_ITRx_SetConfig>
      break;
 8002c16:	e029      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f000 fa92 	bl	800314e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2160      	movs	r1, #96	; 0x60
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fabc 	bl	80031ae <TIM_ITRx_SetConfig>
      break;
 8002c36:	e019      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	461a      	mov	r2, r3
 8002c46:	f000 fa53 	bl	80030f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2140      	movs	r1, #64	; 0x40
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 faac 	bl	80031ae <TIM_ITRx_SetConfig>
      break;
 8002c56:	e009      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 faa3 	bl	80031ae <TIM_ITRx_SetConfig>
      break;
 8002c68:	e000      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <TIM_Base_SetConfig+0xe4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00f      	beq.n	8002d10 <TIM_Base_SetConfig+0x38>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0x38>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <TIM_Base_SetConfig+0xe8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x38>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <TIM_Base_SetConfig+0xec>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x38>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a2f      	ldr	r2, [pc, #188]	; (8002dc8 <TIM_Base_SetConfig+0xf0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d108      	bne.n	8002d22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <TIM_Base_SetConfig+0xe4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01b      	beq.n	8002d62 <TIM_Base_SetConfig+0x8a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d017      	beq.n	8002d62 <TIM_Base_SetConfig+0x8a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <TIM_Base_SetConfig+0xe8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <TIM_Base_SetConfig+0x8a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <TIM_Base_SetConfig+0xec>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00f      	beq.n	8002d62 <TIM_Base_SetConfig+0x8a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a20      	ldr	r2, [pc, #128]	; (8002dc8 <TIM_Base_SetConfig+0xf0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00b      	beq.n	8002d62 <TIM_Base_SetConfig+0x8a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <TIM_Base_SetConfig+0xf4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d007      	beq.n	8002d62 <TIM_Base_SetConfig+0x8a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <TIM_Base_SetConfig+0xf8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d003      	beq.n	8002d62 <TIM_Base_SetConfig+0x8a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <TIM_Base_SetConfig+0xfc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d108      	bne.n	8002d74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <TIM_Base_SetConfig+0xe4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d103      	bne.n	8002da8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	615a      	str	r2, [r3, #20]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	40000c00 	.word	0x40000c00
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800

08002dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f023 0201 	bic.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f023 0302 	bic.w	r3, r3, #2
 8002e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <TIM_OC1_SetConfig+0xc8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10c      	bne.n	8002e4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 0308 	bic.w	r3, r3, #8
 8002e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a13      	ldr	r2, [pc, #76]	; (8002ea0 <TIM_OC1_SetConfig+0xc8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d111      	bne.n	8002e7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	621a      	str	r2, [r3, #32]
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40010000 	.word	0x40010000

08002ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0210 	bic.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0320 	bic.w	r3, r3, #32
 8002eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <TIM_OC2_SetConfig+0xd4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10d      	bne.n	8002f20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <TIM_OC2_SetConfig+0xd4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d113      	bne.n	8002f50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40010000 	.word	0x40010000

08002f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <TIM_OC3_SetConfig+0xd0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10d      	bne.n	8002ff6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <TIM_OC3_SetConfig+0xd0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d113      	bne.n	8003026 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800300c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40010000 	.word	0x40010000

08003050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800309a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	031b      	lsls	r3, r3, #12
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a10      	ldr	r2, [pc, #64]	; (80030ec <TIM_OC4_SetConfig+0x9c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d109      	bne.n	80030c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	621a      	str	r2, [r3, #32]
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40010000 	.word	0x40010000

080030f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f023 0201 	bic.w	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800311a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 030a 	bic.w	r3, r3, #10
 800312c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800314e:	b480      	push	{r7}
 8003150:	b087      	sub	sp, #28
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f023 0210 	bic.w	r2, r3, #16
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	031b      	lsls	r3, r3, #12
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800318a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	621a      	str	r2, [r3, #32]
}
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f043 0307 	orr.w	r3, r3, #7
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	021a      	lsls	r2, r3, #8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	431a      	orrs	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2201      	movs	r2, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1a      	ldr	r2, [r3, #32]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	43db      	mvns	r3, r3
 8003246:	401a      	ands	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1a      	ldr	r2, [r3, #32]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003284:	2302      	movs	r3, #2
 8003286:	e050      	b.n	800332a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d013      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a18      	ldr	r2, [pc, #96]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a15      	ldr	r2, [pc, #84]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a13      	ldr	r2, [pc, #76]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10c      	bne.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4313      	orrs	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40014000 	.word	0x40014000

0800334c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e03f      	b.n	8003406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f001 fc78 	bl	8004c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fc2d 	bl	8003c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b20      	cmp	r3, #32
 8003428:	d153      	bne.n	80034d2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_UART_Transmit_DMA+0x26>
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e04c      	b.n	80034d4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_UART_Transmit_DMA+0x38>
 8003444:	2302      	movs	r3, #2
 8003446:	e045      	b.n	80034d4 <HAL_UART_Transmit_DMA+0xc4>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	88fa      	ldrh	r2, [r7, #6]
 800345a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2221      	movs	r2, #33	; 0x21
 800346c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <HAL_UART_Transmit_DMA+0xcc>)
 8003476:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_UART_Transmit_DMA+0xd0>)
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_UART_Transmit_DMA+0xd4>)
 8003486:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	2200      	movs	r2, #0
 800348e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003490:	f107 0308 	add.w	r3, r7, #8
 8003494:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3304      	adds	r3, #4
 80034a4:	461a      	mov	r2, r3
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	f7fd fa5a 	bl	8000960 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034cc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	08003825 	.word	0x08003825
 80034e0:	08003877 	.word	0x08003877
 80034e4:	08003917 	.word	0x08003917

080034e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d166      	bne.n	80035d0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_UART_Receive_DMA+0x26>
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e05f      	b.n	80035d2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_UART_Receive_DMA+0x38>
 800351c:	2302      	movs	r3, #2
 800351e:	e058      	b.n	80035d2 <HAL_UART_Receive_DMA+0xea>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	88fa      	ldrh	r2, [r7, #6]
 8003532:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2222      	movs	r2, #34	; 0x22
 800353e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	4a25      	ldr	r2, [pc, #148]	; (80035dc <HAL_UART_Receive_DMA+0xf4>)
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <HAL_UART_Receive_DMA+0xf8>)
 8003550:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <HAL_UART_Receive_DMA+0xfc>)
 8003558:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	2200      	movs	r2, #0
 8003560:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3304      	adds	r3, #4
 8003572:	4619      	mov	r1, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	f7fd f9f1 	bl	8000960 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035aa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	08003893 	.word	0x08003893
 80035e0:	080038fb 	.word	0x080038fb
 80035e4:	08003917 	.word	0x08003917

080035e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_UART_IRQHandler+0x52>
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa6f 	bl	8003b16 <UART_Receive_IT>
      return;
 8003638:	e0d1      	b.n	80037de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80b0 	beq.w	80037a2 <HAL_UART_IRQHandler+0x1ba>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <HAL_UART_IRQHandler+0x70>
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80a5 	beq.w	80037a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_UART_IRQHandler+0x90>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_UART_IRQHandler+0xb0>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	f043 0202 	orr.w	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_UART_IRQHandler+0xd0>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00f      	beq.n	80036e2 <HAL_UART_IRQHandler+0xfa>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <HAL_UART_IRQHandler+0xee>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	f043 0208 	orr.w	r2, r3, #8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d078      	beq.n	80037dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_UART_IRQHandler+0x11c>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa09 	bl	8003b16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_UART_IRQHandler+0x144>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d031      	beq.n	8003790 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f952 	bl	80039d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b40      	cmp	r3, #64	; 0x40
 800373e:	d123      	bne.n	8003788 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <HAL_UART_IRQHandler+0x1fc>)
 800375e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	4618      	mov	r0, r3
 8003766:	f7fd f953 	bl	8000a10 <HAL_DMA_Abort_IT>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d016      	beq.n	800379e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800377a:	4610      	mov	r0, r2
 800377c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377e:	e00e      	b.n	800379e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f845 	bl	8003810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003786:	e00a      	b.n	800379e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f841 	bl	8003810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378e:	e006      	b.n	800379e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f83d 	bl	8003810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800379c:	e01e      	b.n	80037dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379e:	bf00      	nop
    return;
 80037a0:	e01c      	b.n	80037dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_UART_IRQHandler+0x1d6>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f93f 	bl	8003a3a <UART_Transmit_IT>
    return;
 80037bc:	e00f      	b.n	80037de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_UART_IRQHandler+0x1f6>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f987 	bl	8003ae6 <UART_EndTransmit_IT>
    return;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HAL_UART_IRQHandler+0x1f6>
    return;
 80037dc:	bf00      	nop
  }
}
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	08003a13 	.word	0x08003a13

080037e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d113      	bne.n	8003868 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003854:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003864:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003866:	e002      	b.n	800386e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 ffcd 	bl	8004808 <HAL_UART_TxCpltCallback>
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff ffaf 	bl	80037e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11e      	bne.n	80038ec <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 ff95 	bl	800481c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff ff77 	bl	80037fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	bf0c      	ite	eq
 8003936:	2301      	moveq	r3, #1
 8003938:	2300      	movne	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b21      	cmp	r3, #33	; 0x21
 8003948:	d108      	bne.n	800395c <UART_DMAError+0x46>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2200      	movs	r2, #0
 8003954:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003956:	68b8      	ldr	r0, [r7, #8]
 8003958:	f000 f827 	bl	80039aa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	bf0c      	ite	eq
 800396a:	2301      	moveq	r3, #1
 800396c:	2300      	movne	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b22      	cmp	r3, #34	; 0x22
 800397c:	d108      	bne.n	8003990 <UART_DMAError+0x7a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2200      	movs	r2, #0
 8003988:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800398a:	68b8      	ldr	r0, [r7, #8]
 800398c:	f000 f823 	bl	80039d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	f043 0210 	orr.w	r2, r3, #16
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800399c:	68b8      	ldr	r0, [r7, #8]
 800399e:	f7ff ff37 	bl	8003810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80039c0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff feef 	bl	8003810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b21      	cmp	r3, #33	; 0x21
 8003a4c:	d144      	bne.n	8003ad8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a56:	d11a      	bne.n	8003a8e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d105      	bne.n	8003a82 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	1c9a      	adds	r2, r3, #2
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	621a      	str	r2, [r3, #32]
 8003a80:	e00e      	b.n	8003aa0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	621a      	str	r2, [r3, #32]
 8003a8c:	e008      	b.n	8003aa0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	1c59      	adds	r1, r3, #1
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6211      	str	r1, [r2, #32]
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4619      	mov	r1, r3
 8003aae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10f      	bne.n	8003ad4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ac2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fe7e 	bl	8004808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b22      	cmp	r3, #34	; 0x22
 8003b28:	d171      	bne.n	8003c0e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b32:	d123      	bne.n	8003b7c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10e      	bne.n	8003b60 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b5e:	e029      	b.n	8003bb4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
 8003b7a:	e01b      	b.n	8003bb4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6858      	ldr	r0, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	1c59      	adds	r1, r3, #1
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6291      	str	r1, [r2, #40]	; 0x28
 8003b94:	b2c2      	uxtb	r2, r0
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e00c      	b.n	8003bb4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	1c58      	adds	r0, r3, #1
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	6288      	str	r0, [r1, #40]	; 0x28
 8003bac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d120      	bne.n	8003c0a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0220 	bic.w	r2, r2, #32
 8003bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fe0b 	bl	800481c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e002      	b.n	8003c10 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
  }
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c5a:	f023 030c 	bic.w	r3, r3, #12
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c86:	f040 818b 	bne.w	8003fa0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4ac1      	ldr	r2, [pc, #772]	; (8003f94 <UART_SetConfig+0x37c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d005      	beq.n	8003ca0 <UART_SetConfig+0x88>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4abf      	ldr	r2, [pc, #764]	; (8003f98 <UART_SetConfig+0x380>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	f040 80bd 	bne.w	8003e1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ca0:	f7fd ff44 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8003ca4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	461d      	mov	r5, r3
 8003caa:	f04f 0600 	mov.w	r6, #0
 8003cae:	46a8      	mov	r8, r5
 8003cb0:	46b1      	mov	r9, r6
 8003cb2:	eb18 0308 	adds.w	r3, r8, r8
 8003cb6:	eb49 0409 	adc.w	r4, r9, r9
 8003cba:	4698      	mov	r8, r3
 8003cbc:	46a1      	mov	r9, r4
 8003cbe:	eb18 0805 	adds.w	r8, r8, r5
 8003cc2:	eb49 0906 	adc.w	r9, r9, r6
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cda:	4688      	mov	r8, r1
 8003cdc:	4691      	mov	r9, r2
 8003cde:	eb18 0005 	adds.w	r0, r8, r5
 8003ce2:	eb49 0106 	adc.w	r1, r9, r6
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	461d      	mov	r5, r3
 8003cec:	f04f 0600 	mov.w	r6, #0
 8003cf0:	196b      	adds	r3, r5, r5
 8003cf2:	eb46 0406 	adc.w	r4, r6, r6
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	f7fc fa6d 	bl	80001d8 <__aeabi_uldivmod>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	461a      	mov	r2, r3
 8003d04:	4ba5      	ldr	r3, [pc, #660]	; (8003f9c <UART_SetConfig+0x384>)
 8003d06:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	461d      	mov	r5, r3
 8003d14:	f04f 0600 	mov.w	r6, #0
 8003d18:	46a9      	mov	r9, r5
 8003d1a:	46b2      	mov	sl, r6
 8003d1c:	eb19 0309 	adds.w	r3, r9, r9
 8003d20:	eb4a 040a 	adc.w	r4, sl, sl
 8003d24:	4699      	mov	r9, r3
 8003d26:	46a2      	mov	sl, r4
 8003d28:	eb19 0905 	adds.w	r9, r9, r5
 8003d2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d30:	f04f 0100 	mov.w	r1, #0
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d44:	4689      	mov	r9, r1
 8003d46:	4692      	mov	sl, r2
 8003d48:	eb19 0005 	adds.w	r0, r9, r5
 8003d4c:	eb4a 0106 	adc.w	r1, sl, r6
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	461d      	mov	r5, r3
 8003d56:	f04f 0600 	mov.w	r6, #0
 8003d5a:	196b      	adds	r3, r5, r5
 8003d5c:	eb46 0406 	adc.w	r4, r6, r6
 8003d60:	461a      	mov	r2, r3
 8003d62:	4623      	mov	r3, r4
 8003d64:	f7fc fa38 	bl	80001d8 <__aeabi_uldivmod>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b8b      	ldr	r3, [pc, #556]	; (8003f9c <UART_SetConfig+0x384>)
 8003d70:	fba3 1302 	umull	r1, r3, r3, r2
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	2164      	movs	r1, #100	; 0x64
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	3332      	adds	r3, #50	; 0x32
 8003d82:	4a86      	ldr	r2, [pc, #536]	; (8003f9c <UART_SetConfig+0x384>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d90:	4498      	add	r8, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	461d      	mov	r5, r3
 8003d96:	f04f 0600 	mov.w	r6, #0
 8003d9a:	46a9      	mov	r9, r5
 8003d9c:	46b2      	mov	sl, r6
 8003d9e:	eb19 0309 	adds.w	r3, r9, r9
 8003da2:	eb4a 040a 	adc.w	r4, sl, sl
 8003da6:	4699      	mov	r9, r3
 8003da8:	46a2      	mov	sl, r4
 8003daa:	eb19 0905 	adds.w	r9, r9, r5
 8003dae:	eb4a 0a06 	adc.w	sl, sl, r6
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dc6:	4689      	mov	r9, r1
 8003dc8:	4692      	mov	sl, r2
 8003dca:	eb19 0005 	adds.w	r0, r9, r5
 8003dce:	eb4a 0106 	adc.w	r1, sl, r6
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	461d      	mov	r5, r3
 8003dd8:	f04f 0600 	mov.w	r6, #0
 8003ddc:	196b      	adds	r3, r5, r5
 8003dde:	eb46 0406 	adc.w	r4, r6, r6
 8003de2:	461a      	mov	r2, r3
 8003de4:	4623      	mov	r3, r4
 8003de6:	f7fc f9f7 	bl	80001d8 <__aeabi_uldivmod>
 8003dea:	4603      	mov	r3, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <UART_SetConfig+0x384>)
 8003df2:	fba3 1302 	umull	r1, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2164      	movs	r1, #100	; 0x64
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	3332      	adds	r3, #50	; 0x32
 8003e04:	4a65      	ldr	r2, [pc, #404]	; (8003f9c <UART_SetConfig+0x384>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	f003 0207 	and.w	r2, r3, #7
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4442      	add	r2, r8
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	e26f      	b.n	80042fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e1a:	f7fd fe73 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8003e1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	461d      	mov	r5, r3
 8003e24:	f04f 0600 	mov.w	r6, #0
 8003e28:	46a8      	mov	r8, r5
 8003e2a:	46b1      	mov	r9, r6
 8003e2c:	eb18 0308 	adds.w	r3, r8, r8
 8003e30:	eb49 0409 	adc.w	r4, r9, r9
 8003e34:	4698      	mov	r8, r3
 8003e36:	46a1      	mov	r9, r4
 8003e38:	eb18 0805 	adds.w	r8, r8, r5
 8003e3c:	eb49 0906 	adc.w	r9, r9, r6
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e54:	4688      	mov	r8, r1
 8003e56:	4691      	mov	r9, r2
 8003e58:	eb18 0005 	adds.w	r0, r8, r5
 8003e5c:	eb49 0106 	adc.w	r1, r9, r6
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	461d      	mov	r5, r3
 8003e66:	f04f 0600 	mov.w	r6, #0
 8003e6a:	196b      	adds	r3, r5, r5
 8003e6c:	eb46 0406 	adc.w	r4, r6, r6
 8003e70:	461a      	mov	r2, r3
 8003e72:	4623      	mov	r3, r4
 8003e74:	f7fc f9b0 	bl	80001d8 <__aeabi_uldivmod>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <UART_SetConfig+0x384>)
 8003e80:	fba3 2302 	umull	r2, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	461d      	mov	r5, r3
 8003e8e:	f04f 0600 	mov.w	r6, #0
 8003e92:	46a9      	mov	r9, r5
 8003e94:	46b2      	mov	sl, r6
 8003e96:	eb19 0309 	adds.w	r3, r9, r9
 8003e9a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e9e:	4699      	mov	r9, r3
 8003ea0:	46a2      	mov	sl, r4
 8003ea2:	eb19 0905 	adds.w	r9, r9, r5
 8003ea6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ebe:	4689      	mov	r9, r1
 8003ec0:	4692      	mov	sl, r2
 8003ec2:	eb19 0005 	adds.w	r0, r9, r5
 8003ec6:	eb4a 0106 	adc.w	r1, sl, r6
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	461d      	mov	r5, r3
 8003ed0:	f04f 0600 	mov.w	r6, #0
 8003ed4:	196b      	adds	r3, r5, r5
 8003ed6:	eb46 0406 	adc.w	r4, r6, r6
 8003eda:	461a      	mov	r2, r3
 8003edc:	4623      	mov	r3, r4
 8003ede:	f7fc f97b 	bl	80001d8 <__aeabi_uldivmod>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <UART_SetConfig+0x384>)
 8003eea:	fba3 1302 	umull	r1, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2164      	movs	r1, #100	; 0x64
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	3332      	adds	r3, #50	; 0x32
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <UART_SetConfig+0x384>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f0a:	4498      	add	r8, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	461d      	mov	r5, r3
 8003f10:	f04f 0600 	mov.w	r6, #0
 8003f14:	46a9      	mov	r9, r5
 8003f16:	46b2      	mov	sl, r6
 8003f18:	eb19 0309 	adds.w	r3, r9, r9
 8003f1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f20:	4699      	mov	r9, r3
 8003f22:	46a2      	mov	sl, r4
 8003f24:	eb19 0905 	adds.w	r9, r9, r5
 8003f28:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f40:	4689      	mov	r9, r1
 8003f42:	4692      	mov	sl, r2
 8003f44:	eb19 0005 	adds.w	r0, r9, r5
 8003f48:	eb4a 0106 	adc.w	r1, sl, r6
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	461d      	mov	r5, r3
 8003f52:	f04f 0600 	mov.w	r6, #0
 8003f56:	196b      	adds	r3, r5, r5
 8003f58:	eb46 0406 	adc.w	r4, r6, r6
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4623      	mov	r3, r4
 8003f60:	f7fc f93a 	bl	80001d8 <__aeabi_uldivmod>
 8003f64:	4603      	mov	r3, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <UART_SetConfig+0x384>)
 8003f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	2164      	movs	r1, #100	; 0x64
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	3332      	adds	r3, #50	; 0x32
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <UART_SetConfig+0x384>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	f003 0207 	and.w	r2, r3, #7
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4442      	add	r2, r8
 8003f90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f92:	e1b2      	b.n	80042fa <UART_SetConfig+0x6e2>
 8003f94:	40011000 	.word	0x40011000
 8003f98:	40011400 	.word	0x40011400
 8003f9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4ad7      	ldr	r2, [pc, #860]	; (8004304 <UART_SetConfig+0x6ec>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d005      	beq.n	8003fb6 <UART_SetConfig+0x39e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4ad6      	ldr	r2, [pc, #856]	; (8004308 <UART_SetConfig+0x6f0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	f040 80d1 	bne.w	8004158 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fb6:	f7fd fdb9 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8003fba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	469a      	mov	sl, r3
 8003fc0:	f04f 0b00 	mov.w	fp, #0
 8003fc4:	46d0      	mov	r8, sl
 8003fc6:	46d9      	mov	r9, fp
 8003fc8:	eb18 0308 	adds.w	r3, r8, r8
 8003fcc:	eb49 0409 	adc.w	r4, r9, r9
 8003fd0:	4698      	mov	r8, r3
 8003fd2:	46a1      	mov	r9, r4
 8003fd4:	eb18 080a 	adds.w	r8, r8, sl
 8003fd8:	eb49 090b 	adc.w	r9, r9, fp
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fe8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ff0:	4688      	mov	r8, r1
 8003ff2:	4691      	mov	r9, r2
 8003ff4:	eb1a 0508 	adds.w	r5, sl, r8
 8003ff8:	eb4b 0609 	adc.w	r6, fp, r9
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4619      	mov	r1, r3
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	f04f 0400 	mov.w	r4, #0
 800400e:	0094      	lsls	r4, r2, #2
 8004010:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004014:	008b      	lsls	r3, r1, #2
 8004016:	461a      	mov	r2, r3
 8004018:	4623      	mov	r3, r4
 800401a:	4628      	mov	r0, r5
 800401c:	4631      	mov	r1, r6
 800401e:	f7fc f8db 	bl	80001d8 <__aeabi_uldivmod>
 8004022:	4603      	mov	r3, r0
 8004024:	460c      	mov	r4, r1
 8004026:	461a      	mov	r2, r3
 8004028:	4bb8      	ldr	r3, [pc, #736]	; (800430c <UART_SetConfig+0x6f4>)
 800402a:	fba3 2302 	umull	r2, r3, r3, r2
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	469b      	mov	fp, r3
 8004038:	f04f 0c00 	mov.w	ip, #0
 800403c:	46d9      	mov	r9, fp
 800403e:	46e2      	mov	sl, ip
 8004040:	eb19 0309 	adds.w	r3, r9, r9
 8004044:	eb4a 040a 	adc.w	r4, sl, sl
 8004048:	4699      	mov	r9, r3
 800404a:	46a2      	mov	sl, r4
 800404c:	eb19 090b 	adds.w	r9, r9, fp
 8004050:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004054:	f04f 0100 	mov.w	r1, #0
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004060:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004064:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004068:	4689      	mov	r9, r1
 800406a:	4692      	mov	sl, r2
 800406c:	eb1b 0509 	adds.w	r5, fp, r9
 8004070:	eb4c 060a 	adc.w	r6, ip, sl
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4619      	mov	r1, r3
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	f04f 0400 	mov.w	r4, #0
 8004086:	0094      	lsls	r4, r2, #2
 8004088:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800408c:	008b      	lsls	r3, r1, #2
 800408e:	461a      	mov	r2, r3
 8004090:	4623      	mov	r3, r4
 8004092:	4628      	mov	r0, r5
 8004094:	4631      	mov	r1, r6
 8004096:	f7fc f89f 	bl	80001d8 <__aeabi_uldivmod>
 800409a:	4603      	mov	r3, r0
 800409c:	460c      	mov	r4, r1
 800409e:	461a      	mov	r2, r3
 80040a0:	4b9a      	ldr	r3, [pc, #616]	; (800430c <UART_SetConfig+0x6f4>)
 80040a2:	fba3 1302 	umull	r1, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2164      	movs	r1, #100	; 0x64
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a95      	ldr	r2, [pc, #596]	; (800430c <UART_SetConfig+0x6f4>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c0:	4498      	add	r8, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	469b      	mov	fp, r3
 80040c6:	f04f 0c00 	mov.w	ip, #0
 80040ca:	46d9      	mov	r9, fp
 80040cc:	46e2      	mov	sl, ip
 80040ce:	eb19 0309 	adds.w	r3, r9, r9
 80040d2:	eb4a 040a 	adc.w	r4, sl, sl
 80040d6:	4699      	mov	r9, r3
 80040d8:	46a2      	mov	sl, r4
 80040da:	eb19 090b 	adds.w	r9, r9, fp
 80040de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f6:	4689      	mov	r9, r1
 80040f8:	4692      	mov	sl, r2
 80040fa:	eb1b 0509 	adds.w	r5, fp, r9
 80040fe:	eb4c 060a 	adc.w	r6, ip, sl
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4619      	mov	r1, r3
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	f04f 0400 	mov.w	r4, #0
 8004114:	0094      	lsls	r4, r2, #2
 8004116:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800411a:	008b      	lsls	r3, r1, #2
 800411c:	461a      	mov	r2, r3
 800411e:	4623      	mov	r3, r4
 8004120:	4628      	mov	r0, r5
 8004122:	4631      	mov	r1, r6
 8004124:	f7fc f858 	bl	80001d8 <__aeabi_uldivmod>
 8004128:	4603      	mov	r3, r0
 800412a:	460c      	mov	r4, r1
 800412c:	461a      	mov	r2, r3
 800412e:	4b77      	ldr	r3, [pc, #476]	; (800430c <UART_SetConfig+0x6f4>)
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2164      	movs	r1, #100	; 0x64
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	3332      	adds	r3, #50	; 0x32
 8004142:	4a72      	ldr	r2, [pc, #456]	; (800430c <UART_SetConfig+0x6f4>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4442      	add	r2, r8
 8004154:	609a      	str	r2, [r3, #8]
 8004156:	e0d0      	b.n	80042fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004158:	f7fd fcd4 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 800415c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	469a      	mov	sl, r3
 8004162:	f04f 0b00 	mov.w	fp, #0
 8004166:	46d0      	mov	r8, sl
 8004168:	46d9      	mov	r9, fp
 800416a:	eb18 0308 	adds.w	r3, r8, r8
 800416e:	eb49 0409 	adc.w	r4, r9, r9
 8004172:	4698      	mov	r8, r3
 8004174:	46a1      	mov	r9, r4
 8004176:	eb18 080a 	adds.w	r8, r8, sl
 800417a:	eb49 090b 	adc.w	r9, r9, fp
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800418a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800418e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004192:	4688      	mov	r8, r1
 8004194:	4691      	mov	r9, r2
 8004196:	eb1a 0508 	adds.w	r5, sl, r8
 800419a:	eb4b 0609 	adc.w	r6, fp, r9
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4619      	mov	r1, r3
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	f04f 0400 	mov.w	r4, #0
 80041b0:	0094      	lsls	r4, r2, #2
 80041b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041b6:	008b      	lsls	r3, r1, #2
 80041b8:	461a      	mov	r2, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	4631      	mov	r1, r6
 80041c0:	f7fc f80a 	bl	80001d8 <__aeabi_uldivmod>
 80041c4:	4603      	mov	r3, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b50      	ldr	r3, [pc, #320]	; (800430c <UART_SetConfig+0x6f4>)
 80041cc:	fba3 2302 	umull	r2, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	469b      	mov	fp, r3
 80041da:	f04f 0c00 	mov.w	ip, #0
 80041de:	46d9      	mov	r9, fp
 80041e0:	46e2      	mov	sl, ip
 80041e2:	eb19 0309 	adds.w	r3, r9, r9
 80041e6:	eb4a 040a 	adc.w	r4, sl, sl
 80041ea:	4699      	mov	r9, r3
 80041ec:	46a2      	mov	sl, r4
 80041ee:	eb19 090b 	adds.w	r9, r9, fp
 80041f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004202:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004206:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800420a:	4689      	mov	r9, r1
 800420c:	4692      	mov	sl, r2
 800420e:	eb1b 0509 	adds.w	r5, fp, r9
 8004212:	eb4c 060a 	adc.w	r6, ip, sl
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4619      	mov	r1, r3
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	f04f 0400 	mov.w	r4, #0
 8004228:	0094      	lsls	r4, r2, #2
 800422a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800422e:	008b      	lsls	r3, r1, #2
 8004230:	461a      	mov	r2, r3
 8004232:	4623      	mov	r3, r4
 8004234:	4628      	mov	r0, r5
 8004236:	4631      	mov	r1, r6
 8004238:	f7fb ffce 	bl	80001d8 <__aeabi_uldivmod>
 800423c:	4603      	mov	r3, r0
 800423e:	460c      	mov	r4, r1
 8004240:	461a      	mov	r2, r3
 8004242:	4b32      	ldr	r3, [pc, #200]	; (800430c <UART_SetConfig+0x6f4>)
 8004244:	fba3 1302 	umull	r1, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	2164      	movs	r1, #100	; 0x64
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	3332      	adds	r3, #50	; 0x32
 8004256:	4a2d      	ldr	r2, [pc, #180]	; (800430c <UART_SetConfig+0x6f4>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004262:	4498      	add	r8, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	469b      	mov	fp, r3
 8004268:	f04f 0c00 	mov.w	ip, #0
 800426c:	46d9      	mov	r9, fp
 800426e:	46e2      	mov	sl, ip
 8004270:	eb19 0309 	adds.w	r3, r9, r9
 8004274:	eb4a 040a 	adc.w	r4, sl, sl
 8004278:	4699      	mov	r9, r3
 800427a:	46a2      	mov	sl, r4
 800427c:	eb19 090b 	adds.w	r9, r9, fp
 8004280:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004290:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004294:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004298:	4689      	mov	r9, r1
 800429a:	4692      	mov	sl, r2
 800429c:	eb1b 0509 	adds.w	r5, fp, r9
 80042a0:	eb4c 060a 	adc.w	r6, ip, sl
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4619      	mov	r1, r3
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	f04f 0400 	mov.w	r4, #0
 80042b6:	0094      	lsls	r4, r2, #2
 80042b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042bc:	008b      	lsls	r3, r1, #2
 80042be:	461a      	mov	r2, r3
 80042c0:	4623      	mov	r3, r4
 80042c2:	4628      	mov	r0, r5
 80042c4:	4631      	mov	r1, r6
 80042c6:	f7fb ff87 	bl	80001d8 <__aeabi_uldivmod>
 80042ca:	4603      	mov	r3, r0
 80042cc:	460c      	mov	r4, r1
 80042ce:	461a      	mov	r2, r3
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <UART_SetConfig+0x6f4>)
 80042d2:	fba3 1302 	umull	r1, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2164      	movs	r1, #100	; 0x64
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	3332      	adds	r3, #50	; 0x32
 80042e4:	4a09      	ldr	r2, [pc, #36]	; (800430c <UART_SetConfig+0x6f4>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4442      	add	r2, r8
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	e7ff      	b.n	80042fa <UART_SetConfig+0x6e2>
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004304:	40011000 	.word	0x40011000
 8004308:	40011400 	.word	0x40011400
 800430c:	51eb851f 	.word	0x51eb851f

08004310 <bufferInit>:
	uint8_t _tx_single_char;
}s_Buff;

//void bufferInit(t_Buff buffer);

void bufferInit(s_Buff *buffer){
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e007      	b.n	800432e <bufferInit+0x1e>
		buffer->_p_rx_buffer[i] = 0;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b18      	cmp	r3, #24
 8004332:	ddf4      	ble.n	800431e <bufferInit+0xe>
	}
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004344:	f7fc f8c8 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004348:	f000 f82e 	bl	80043a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800434c:	f000 fa1a 	bl	8004784 <MX_GPIO_Init>
  MX_DMA_Init();
 8004350:	f000 f9f0 	bl	8004734 <MX_DMA_Init>
  MX_CRC_Init();
 8004354:	f000 f8ac 	bl	80044b0 <MX_CRC_Init>
  MX_RTC_Init();
 8004358:	f000 f8be 	bl	80044d8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800435c:	f000 f9c0 	bl	80046e0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8004360:	f000 f948 	bl	80045f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 8004364:	2201      	movs	r2, #1
 8004366:	490b      	ldr	r1, [pc, #44]	; (8004394 <main+0x54>)
 8004368:	480b      	ldr	r0, [pc, #44]	; (8004398 <main+0x58>)
 800436a:	f7ff f8bd 	bl	80034e8 <HAL_UART_Receive_DMA>

#ifndef UART_TX_DMA
  HAL_UART_Transmit(&huart2, m_p_startup_data, m_p_startup_data_length, 10);
#else
  strcpy((char*)s_buffer._p_tx_buffer, (char*)m_p_startup_data);
 800436e:	490b      	ldr	r1, [pc, #44]	; (800439c <main+0x5c>)
 8004370:	480b      	ldr	r0, [pc, #44]	; (80043a0 <main+0x60>)
 8004372:	f000 feb7 	bl	80050e4 <strcpy>
  HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, m_p_startup_data_length);
 8004376:	220c      	movs	r2, #12
 8004378:	4909      	ldr	r1, [pc, #36]	; (80043a0 <main+0x60>)
 800437a:	4807      	ldr	r0, [pc, #28]	; (8004398 <main+0x58>)
 800437c:	f7ff f848 	bl	8003410 <HAL_UART_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004380:	2120      	movs	r1, #32
 8004382:	4808      	ldr	r0, [pc, #32]	; (80043a4 <main+0x64>)
 8004384:	f7fc ff69 	bl	800125a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8004388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800438c:	f7fc f8e6 	bl	800055c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004390:	e7f6      	b.n	8004380 <main+0x40>
 8004392:	bf00      	nop
 8004394:	200002ee 	.word	0x200002ee
 8004398:	200003d4 	.word	0x200003d4
 800439c:	20000010 	.word	0x20000010
 80043a0:	200002ef 	.word	0x200002ef
 80043a4:	40020000 	.word	0x40020000

080043a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b09a      	sub	sp, #104	; 0x68
 80043ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043b2:	2230      	movs	r2, #48	; 0x30
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fe8c 	bl	80050d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043cc:	f107 030c 	add.w	r3, r7, #12
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	611a      	str	r2, [r3, #16]
 80043dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <SystemClock_Config+0x100>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	4a30      	ldr	r2, [pc, #192]	; (80044a8 <SystemClock_Config+0x100>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6413      	str	r3, [r2, #64]	; 0x40
 80043ee:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <SystemClock_Config+0x100>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <SystemClock_Config+0x104>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a2a      	ldr	r2, [pc, #168]	; (80044ac <SystemClock_Config+0x104>)
 8004404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b28      	ldr	r3, [pc, #160]	; (80044ac <SystemClock_Config+0x104>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004416:	2306      	movs	r3, #6
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800441a:	2301      	movs	r3, #1
 800441c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800441e:	2301      	movs	r3, #1
 8004420:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004422:	2310      	movs	r3, #16
 8004424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004426:	2302      	movs	r3, #2
 8004428:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800442a:	2300      	movs	r3, #0
 800442c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 800442e:	2310      	movs	r3, #16
 8004430:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004432:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004436:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004438:	2304      	movs	r3, #4
 800443a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800443c:	2304      	movs	r3, #4
 800443e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004440:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004444:	4618      	mov	r0, r3
 8004446:	f7fc ff23 	bl	8001290 <HAL_RCC_OscConfig>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004450:	f000 fb54 	bl	8004afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004454:	230f      	movs	r3, #15
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004458:	2302      	movs	r3, #2
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800445c:	2300      	movs	r3, #0
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004464:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004466:	2300      	movs	r3, #0
 8004468:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800446a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f7fd f97d 	bl	8001770 <HAL_RCC_ClockConfig>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800447c:	f000 fb3e 	bl	8004afc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004480:	2302      	movs	r3, #2
 8004482:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004488:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd fb92 	bl	8001bb8 <HAL_RCCEx_PeriphCLKConfig>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800449a:	f000 fb2f 	bl	8004afc <Error_Handler>
  }
}
 800449e:	bf00      	nop
 80044a0:	3768      	adds	r7, #104	; 0x68
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40007000 	.word	0x40007000

080044b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <MX_CRC_Init+0x20>)
 80044b6:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <MX_CRC_Init+0x24>)
 80044b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80044ba:	4805      	ldr	r0, [pc, #20]	; (80044d0 <MX_CRC_Init+0x20>)
 80044bc:	f7fc f952 	bl	8000764 <HAL_CRC_Init>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80044c6:	f000 fb19 	bl	8004afc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2000030c 	.word	0x2000030c
 80044d4:	40023000 	.word	0x40023000

080044d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b090      	sub	sp, #64	; 0x40
 80044dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80044de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	605a      	str	r2, [r3, #4]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80044ee:	2300      	movs	r3, #0
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80044f2:	463b      	mov	r3, r7
 80044f4:	2228      	movs	r2, #40	; 0x28
 80044f6:	2100      	movs	r1, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fdeb 	bl	80050d4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80044fe:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <MX_RTC_Init+0x114>)
 8004500:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <MX_RTC_Init+0x118>)
 8004502:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004504:	4b39      	ldr	r3, [pc, #228]	; (80045ec <MX_RTC_Init+0x114>)
 8004506:	2200      	movs	r2, #0
 8004508:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800450a:	4b38      	ldr	r3, [pc, #224]	; (80045ec <MX_RTC_Init+0x114>)
 800450c:	227f      	movs	r2, #127	; 0x7f
 800450e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <MX_RTC_Init+0x114>)
 8004512:	22ff      	movs	r2, #255	; 0xff
 8004514:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004516:	4b35      	ldr	r3, [pc, #212]	; (80045ec <MX_RTC_Init+0x114>)
 8004518:	2200      	movs	r2, #0
 800451a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800451c:	4b33      	ldr	r3, [pc, #204]	; (80045ec <MX_RTC_Init+0x114>)
 800451e:	2200      	movs	r2, #0
 8004520:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004522:	4b32      	ldr	r3, [pc, #200]	; (80045ec <MX_RTC_Init+0x114>)
 8004524:	2200      	movs	r2, #0
 8004526:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004528:	4830      	ldr	r0, [pc, #192]	; (80045ec <MX_RTC_Init+0x114>)
 800452a:	f7fd fc35 	bl	8001d98 <HAL_RTC_Init>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8004534:	f000 fae2 	bl	8004afc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800454a:	2300      	movs	r3, #0
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004556:	2200      	movs	r2, #0
 8004558:	4619      	mov	r1, r3
 800455a:	4824      	ldr	r0, [pc, #144]	; (80045ec <MX_RTC_Init+0x114>)
 800455c:	f7fd fcad 	bl	8001eba <HAL_RTC_SetTime>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8004566:	f000 fac9 	bl	8004afc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004586:	2200      	movs	r2, #0
 8004588:	4619      	mov	r1, r3
 800458a:	4818      	ldr	r0, [pc, #96]	; (80045ec <MX_RTC_Init+0x114>)
 800458c:	f7fd fd52 	bl	8002034 <HAL_RTC_SetDate>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8004596:	f000 fab1 	bl	8004afc <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800459a:	2300      	movs	r3, #0
 800459c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80045b2:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 80045b6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80045c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80045cc:	463b      	mov	r3, r7
 80045ce:	2200      	movs	r2, #0
 80045d0:	4619      	mov	r1, r3
 80045d2:	4806      	ldr	r0, [pc, #24]	; (80045ec <MX_RTC_Init+0x114>)
 80045d4:	f7fd fdd6 	bl	8002184 <HAL_RTC_SetAlarm_IT>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80045de:	f000 fa8d 	bl	8004afc <Error_Handler>
		0x1FFU) != HAL_OK) {
    		Error_Handler();
      	}*/
  /* USER CODE END RTC_Init 2 */

}
 80045e2:	bf00      	nop
 80045e4:	3740      	adds	r7, #64	; 0x40
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	200003b4 	.word	0x200003b4
 80045f0:	40002800 	.word	0x40002800

080045f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08e      	sub	sp, #56	; 0x38
 80045f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004608:	f107 0320 	add.w	r3, r7, #32
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	611a      	str	r2, [r3, #16]
 8004620:	615a      	str	r2, [r3, #20]
 8004622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004624:	4b2c      	ldr	r3, [pc, #176]	; (80046d8 <MX_TIM3_Init+0xe4>)
 8004626:	4a2d      	ldr	r2, [pc, #180]	; (80046dc <MX_TIM3_Init+0xe8>)
 8004628:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800462a:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <MX_TIM3_Init+0xe4>)
 800462c:	2253      	movs	r2, #83	; 0x53
 800462e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004630:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <MX_TIM3_Init+0xe4>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8004636:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <MX_TIM3_Init+0xe4>)
 8004638:	2263      	movs	r2, #99	; 0x63
 800463a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800463c:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <MX_TIM3_Init+0xe4>)
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004642:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <MX_TIM3_Init+0xe4>)
 8004644:	2200      	movs	r2, #0
 8004646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004648:	4823      	ldr	r0, [pc, #140]	; (80046d8 <MX_TIM3_Init+0xe4>)
 800464a:	f7fd ff95 	bl	8002578 <HAL_TIM_Base_Init>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8004654:	f000 fa52 	bl	8004afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800465e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004662:	4619      	mov	r1, r3
 8004664:	481c      	ldr	r0, [pc, #112]	; (80046d8 <MX_TIM3_Init+0xe4>)
 8004666:	f7fe fa57 	bl	8002b18 <HAL_TIM_ConfigClockSource>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8004670:	f000 fa44 	bl	8004afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004674:	4818      	ldr	r0, [pc, #96]	; (80046d8 <MX_TIM3_Init+0xe4>)
 8004676:	f7fd ffce 	bl	8002616 <HAL_TIM_PWM_Init>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004680:	f000 fa3c 	bl	8004afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004684:	2300      	movs	r3, #0
 8004686:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004688:	2300      	movs	r3, #0
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800468c:	f107 0320 	add.w	r3, r7, #32
 8004690:	4619      	mov	r1, r3
 8004692:	4811      	ldr	r0, [pc, #68]	; (80046d8 <MX_TIM3_Init+0xe4>)
 8004694:	f7fe fdec 	bl	8003270 <HAL_TIMEx_MasterConfigSynchronization>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800469e:	f000 fa2d 	bl	8004afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046a2:	2360      	movs	r3, #96	; 0x60
 80046a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046b2:	1d3b      	adds	r3, r7, #4
 80046b4:	2200      	movs	r2, #0
 80046b6:	4619      	mov	r1, r3
 80046b8:	4807      	ldr	r0, [pc, #28]	; (80046d8 <MX_TIM3_Init+0xe4>)
 80046ba:	f7fe f967 	bl	800298c <HAL_TIM_PWM_ConfigChannel>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80046c4:	f000 fa1a 	bl	8004afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80046c8:	4803      	ldr	r0, [pc, #12]	; (80046d8 <MX_TIM3_Init+0xe4>)
 80046ca:	f000 faa7 	bl	8004c1c <HAL_TIM_MspPostInit>

}
 80046ce:	bf00      	nop
 80046d0:	3738      	adds	r7, #56	; 0x38
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000314 	.word	0x20000314
 80046dc:	40000400 	.word	0x40000400

080046e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <MX_USART2_UART_Init+0x4c>)
 80046e6:	4a12      	ldr	r2, [pc, #72]	; (8004730 <MX_USART2_UART_Init+0x50>)
 80046e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <MX_USART2_UART_Init+0x4c>)
 80046ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046f2:	4b0e      	ldr	r3, [pc, #56]	; (800472c <MX_USART2_UART_Init+0x4c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <MX_USART2_UART_Init+0x4c>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <MX_USART2_UART_Init+0x4c>)
 8004700:	2200      	movs	r2, #0
 8004702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004704:	4b09      	ldr	r3, [pc, #36]	; (800472c <MX_USART2_UART_Init+0x4c>)
 8004706:	220c      	movs	r2, #12
 8004708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <MX_USART2_UART_Init+0x4c>)
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <MX_USART2_UART_Init+0x4c>)
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004716:	4805      	ldr	r0, [pc, #20]	; (800472c <MX_USART2_UART_Init+0x4c>)
 8004718:	f7fe fe2c 	bl	8003374 <HAL_UART_Init>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004722:	f000 f9eb 	bl	8004afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200003d4 	.word	0x200003d4
 8004730:	40004400 	.word	0x40004400

08004734 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <MX_DMA_Init+0x4c>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <MX_DMA_Init+0x4c>)
 8004744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004748:	6313      	str	r3, [r2, #48]	; 0x30
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <MX_DMA_Init+0x4c>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004756:	2200      	movs	r2, #0
 8004758:	2100      	movs	r1, #0
 800475a:	2010      	movs	r0, #16
 800475c:	f7fb ffd8 	bl	8000710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004760:	2010      	movs	r0, #16
 8004762:	f7fb fff1 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004766:	2200      	movs	r2, #0
 8004768:	2100      	movs	r1, #0
 800476a:	2011      	movs	r0, #17
 800476c:	f7fb ffd0 	bl	8000710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004770:	2011      	movs	r0, #17
 8004772:	f7fb ffe9 	bl	8000748 <HAL_NVIC_EnableIRQ>

}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800

08004784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	4b18      	ldr	r3, [pc, #96]	; (8004800 <MX_GPIO_Init+0x7c>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	4a17      	ldr	r2, [pc, #92]	; (8004800 <MX_GPIO_Init+0x7c>)
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	6313      	str	r3, [r2, #48]	; 0x30
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <MX_GPIO_Init+0x7c>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <MX_GPIO_Init+0x7c>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <MX_GPIO_Init+0x7c>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <MX_GPIO_Init+0x7c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80047d2:	2200      	movs	r2, #0
 80047d4:	2120      	movs	r1, #32
 80047d6:	480b      	ldr	r0, [pc, #44]	; (8004804 <MX_GPIO_Init+0x80>)
 80047d8:	f7fc fd26 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80047dc:	2320      	movs	r3, #32
 80047de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047e0:	2301      	movs	r3, #1
 80047e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	4619      	mov	r1, r3
 80047f2:	4804      	ldr	r0, [pc, #16]	; (8004804 <MX_GPIO_Init+0x80>)
 80047f4:	f7fc fb96 	bl	8000f24 <HAL_GPIO_Init>

}
 80047f8:	bf00      	nop
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40023800 	.word	0x40023800
 8004804:	40020000 	.word	0x40020000

08004808 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */

  //HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, 20);
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	if (s_buffer._rx_single_char != '\n')
 8004824:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004826:	7e9b      	ldrb	r3, [r3, #26]
 8004828:	2b0a      	cmp	r3, #10
 800482a:	d011      	beq.n	8004850 <HAL_UART_RxCpltCallback+0x34>
	{
		if(s_buffer._rx_index < BUFFER_SIZE)
 800482c:	4b17      	ldr	r3, [pc, #92]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 800482e:	7e5b      	ldrb	r3, [r3, #25]
 8004830:	2b18      	cmp	r3, #24
 8004832:	d822      	bhi.n	800487a <HAL_UART_RxCpltCallback+0x5e>
		{
			s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 8004834:	4b15      	ldr	r3, [pc, #84]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004836:	7e5b      	ldrb	r3, [r3, #25]
 8004838:	461a      	mov	r2, r3
 800483a:	4b14      	ldr	r3, [pc, #80]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 800483c:	7e99      	ldrb	r1, [r3, #26]
 800483e:	4b13      	ldr	r3, [pc, #76]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004840:	5499      	strb	r1, [r3, r2]
			s_buffer._rx_index++;
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004844:	7e5b      	ldrb	r3, [r3, #25]
 8004846:	3301      	adds	r3, #1
 8004848:	b2da      	uxtb	r2, r3
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 800484c:	765a      	strb	r2, [r3, #25]
 800484e:	e014      	b.n	800487a <HAL_UART_RxCpltCallback+0x5e>
		}
	}
	else{
		s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 8004850:	4b0e      	ldr	r3, [pc, #56]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004852:	7e5b      	ldrb	r3, [r3, #25]
 8004854:	461a      	mov	r2, r3
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004858:	7e99      	ldrb	r1, [r3, #26]
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 800485c:	5499      	strb	r1, [r3, r2]
		s_buffer._rx_index++;
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004860:	7e5b      	ldrb	r3, [r3, #25]
 8004862:	3301      	adds	r3, #1
 8004864:	b2da      	uxtb	r2, r3
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004868:	765a      	strb	r2, [r3, #25]
		whichCommand();
 800486a:	f000 f815 	bl	8004898 <whichCommand>
		bufferInit(&s_buffer);
 800486e:	4807      	ldr	r0, [pc, #28]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004870:	f7ff fd4e 	bl	8004310 <bufferInit>
		s_buffer._rx_index = 0;
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_UART_RxCpltCallback+0x70>)
 8004876:	2200      	movs	r2, #0
 8004878:	765a      	strb	r2, [r3, #25]
	}

	//HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
	HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 800487a:	2201      	movs	r2, #1
 800487c:	4904      	ldr	r1, [pc, #16]	; (8004890 <HAL_UART_RxCpltCallback+0x74>)
 800487e:	4805      	ldr	r0, [pc, #20]	; (8004894 <HAL_UART_RxCpltCallback+0x78>)
 8004880:	f7fe fe32 	bl	80034e8 <HAL_UART_Receive_DMA>
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	200002d4 	.word	0x200002d4
 8004890:	200002ee 	.word	0x200002ee
 8004894:	200003d4 	.word	0x200003d4

08004898 <whichCommand>:

void whichCommand (void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
	char* token = strtok((char*)s_buffer._p_rx_buffer, " ");
 800489e:	491b      	ldr	r1, [pc, #108]	; (800490c <whichCommand+0x74>)
 80048a0:	481b      	ldr	r0, [pc, #108]	; (8004910 <whichCommand+0x78>)
 80048a2:	f000 fc4d 	bl	8005140 <strtok>
 80048a6:	6038      	str	r0, [r7, #0]

	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 80048a8:	2300      	movs	r3, #0
 80048aa:	71fb      	strb	r3, [r7, #7]
 80048ac:	e026      	b.n	80048fc <whichCommand+0x64>
	{
		if (strncmp(token, commands[i]._name, commands[i]._size)==0)
 80048ae:	79fa      	ldrb	r2, [r7, #7]
 80048b0:	4918      	ldr	r1, [pc, #96]	; (8004914 <whichCommand+0x7c>)
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	79fa      	ldrb	r2, [r7, #7]
 80048c0:	4914      	ldr	r1, [pc, #80]	; (8004914 <whichCommand+0x7c>)
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3304      	adds	r3, #4
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	4601      	mov	r1, r0
 80048d4:	6838      	ldr	r0, [r7, #0]
 80048d6:	f000 fc21 	bl	800511c <strncmp>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <whichCommand+0x5e>
		{
			commands[i].func_ptr(token);
 80048e0:	79fa      	ldrb	r2, [r7, #7]
 80048e2:	490c      	ldr	r1, [pc, #48]	; (8004914 <whichCommand+0x7c>)
 80048e4:	4613      	mov	r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	3308      	adds	r3, #8
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6838      	ldr	r0, [r7, #0]
 80048f4:	4798      	blx	r3
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	3301      	adds	r3, #1
 80048fa:	71fb      	strb	r3, [r7, #7]
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	2b05      	cmp	r3, #5
 8004900:	d9d5      	bls.n	80048ae <whichCommand+0x16>
		}
	}
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	08005520 	.word	0x08005520
 8004910:	200002d4 	.word	0x200002d4
 8004914:	2000002c 	.word	0x2000002c

08004918 <ping_callBack>:

void ping_callBack(char* token)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
#ifndef UART_TX_DMA
	HAL_UART_Transmit(&huart2, (uint8_t*)token, sizeof(token) + 1, 10);
	//HAL_UART_Transmit(&huart2, (uint8_t*)newline, 1, 10);
#else
	strcpy((char*)s_buffer._p_tx_buffer, (char*)token);
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4806      	ldr	r0, [pc, #24]	; (800493c <ping_callBack+0x24>)
 8004924:	f000 fbde 	bl	80050e4 <strcpy>
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, sizeof(token) + 1);
 8004928:	2205      	movs	r2, #5
 800492a:	4904      	ldr	r1, [pc, #16]	; (800493c <ping_callBack+0x24>)
 800492c:	4804      	ldr	r0, [pc, #16]	; (8004940 <ping_callBack+0x28>)
 800492e:	f7fe fd6f 	bl	8003410 <HAL_UART_Transmit_DMA>
#endif
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	200002ef 	.word	0x200002ef
 8004940:	200003d4 	.word	0x200003d4

08004944 <version_callback>:

void version_callback(char* token)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
#ifndef UART_TX_DMA
	HAL_UART_Transmit(&huart2, m_p_version, sizeof(m_p_version), 10);
#else
	strcpy((char*)s_buffer._p_tx_buffer, (char*)m_p_version);
 800494c:	4906      	ldr	r1, [pc, #24]	; (8004968 <version_callback+0x24>)
 800494e:	4807      	ldr	r0, [pc, #28]	; (800496c <version_callback+0x28>)
 8004950:	f000 fbc8 	bl	80050e4 <strcpy>
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, sizeof(m_p_version));
 8004954:	2207      	movs	r2, #7
 8004956:	4905      	ldr	r1, [pc, #20]	; (800496c <version_callback+0x28>)
 8004958:	4805      	ldr	r0, [pc, #20]	; (8004970 <version_callback+0x2c>)
 800495a:	f7fe fd59 	bl	8003410 <HAL_UART_Transmit_DMA>
#endif
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000008 	.word	0x20000008
 800496c:	200002ef 	.word	0x200002ef
 8004970:	200003d4 	.word	0x200003d4

08004974 <pwm_start_callback>:

void pwm_start_callback(char* token)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800497c:	2100      	movs	r1, #0
 800497e:	4808      	ldr	r0, [pc, #32]	; (80049a0 <pwm_start_callback+0x2c>)
 8004980:	f7fd fe7e 	bl	8002680 <HAL_TIM_PWM_Start>
#ifndef UART_TX_DMA
	HAL_UART_Transmit(&huart2, m_p_ok, sizeof(m_p_ok), 10);
#else
	strcpy((char*)s_buffer._p_tx_buffer, (char*)m_p_ok);
 8004984:	4907      	ldr	r1, [pc, #28]	; (80049a4 <pwm_start_callback+0x30>)
 8004986:	4808      	ldr	r0, [pc, #32]	; (80049a8 <pwm_start_callback+0x34>)
 8004988:	f000 fbac 	bl	80050e4 <strcpy>
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, sizeof(m_p_ok));
 800498c:	2203      	movs	r2, #3
 800498e:	4906      	ldr	r1, [pc, #24]	; (80049a8 <pwm_start_callback+0x34>)
 8004990:	4806      	ldr	r0, [pc, #24]	; (80049ac <pwm_start_callback+0x38>)
 8004992:	f7fe fd3d 	bl	8003410 <HAL_UART_Transmit_DMA>
#endif
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000314 	.word	0x20000314
 80049a4:	20000020 	.word	0x20000020
 80049a8:	200002ef 	.word	0x200002ef
 80049ac:	200003d4 	.word	0x200003d4

080049b0 <pwm_stop_callback>:

void pwm_stop_callback(char* token)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80049b8:	2100      	movs	r1, #0
 80049ba:	4808      	ldr	r0, [pc, #32]	; (80049dc <pwm_stop_callback+0x2c>)
 80049bc:	f7fd fe92 	bl	80026e4 <HAL_TIM_PWM_Stop>
#ifndef UART_TX_DMA
	HAL_UART_Transmit(&huart2, m_p_ok, sizeof(m_p_ok), 10);
#else
	strcpy((char*)s_buffer._p_tx_buffer, (char*)m_p_ok);
 80049c0:	4907      	ldr	r1, [pc, #28]	; (80049e0 <pwm_stop_callback+0x30>)
 80049c2:	4808      	ldr	r0, [pc, #32]	; (80049e4 <pwm_stop_callback+0x34>)
 80049c4:	f000 fb8e 	bl	80050e4 <strcpy>
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, sizeof(m_p_ok));
 80049c8:	2203      	movs	r2, #3
 80049ca:	4906      	ldr	r1, [pc, #24]	; (80049e4 <pwm_stop_callback+0x34>)
 80049cc:	4806      	ldr	r0, [pc, #24]	; (80049e8 <pwm_stop_callback+0x38>)
 80049ce:	f7fe fd1f 	bl	8003410 <HAL_UART_Transmit_DMA>
#endif
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000314 	.word	0x20000314
 80049e0:	20000020 	.word	0x20000020
 80049e4:	200002ef 	.word	0x200002ef
 80049e8:	200003d4 	.word	0x200003d4

080049ec <pwm_dc_callback>:

void pwm_dc_callback(char* token)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 80049f4:	490f      	ldr	r1, [pc, #60]	; (8004a34 <pwm_dc_callback+0x48>)
 80049f6:	2000      	movs	r0, #0
 80049f8:	f000 fba2 	bl	8005140 <strtok>
 80049fc:	6078      	str	r0, [r7, #4]

	if(strlen(token) <= 0)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d012      	beq.n	8004a2c <pwm_dc_callback+0x40>
	{
		return;
	}

	int32_t dc = atoi(token);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fb1b 	bl	8005042 <atoi>
 8004a0c:	60f8      	str	r0, [r7, #12]

	if (dc > 100) dc = 100;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b64      	cmp	r3, #100	; 0x64
 8004a12:	dd01      	ble.n	8004a18 <pwm_dc_callback+0x2c>
 8004a14:	2364      	movs	r3, #100	; 0x64
 8004a16:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da01      	bge.n	8004a22 <pwm_dc_callback+0x36>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]

	htim3.Instance->CCR1 = dc;
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <pwm_dc_callback+0x4c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	635a      	str	r2, [r3, #52]	; 0x34
 8004a2a:	e000      	b.n	8004a2e <pwm_dc_callback+0x42>
		return;
 8004a2c:	bf00      	nop
}
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	08005520 	.word	0x08005520
 8004a38:	20000314 	.word	0x20000314

08004a3c <crc_whole_flash_calc_callback>:

void crc_whole_flash_calc_callback(char* token)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
		offsetAddr += 0x4000;
	}*/


	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 8004a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a48:	61fb      	str	r3, [r7, #28]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 8004a4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a4e:	61bb      	str	r3, [r7, #24]

	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	69b9      	ldr	r1, [r7, #24]
 8004a54:	4810      	ldr	r0, [pc, #64]	; (8004a98 <crc_whole_flash_calc_callback+0x5c>)
 8004a56:	f7fb fea1 	bl	800079c <HAL_CRC_Calculate>
 8004a5a:	6178      	str	r0, [r7, #20]

	char crcBytes[9];
	itoa(crcFlashResult, crcBytes, 16);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f107 0108 	add.w	r1, r7, #8
 8004a62:	2210      	movs	r2, #16
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fb33 	bl	80050d0 <itoa>
	// append ch to str
	strncat(crcBytes, newline, 1);
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <crc_whole_flash_calc_callback+0x60>)
 8004a6c:	6819      	ldr	r1, [r3, #0]
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	2201      	movs	r2, #1
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fb3d 	bl	80050f4 <strncat>

#ifndef UART_TX_DMA
	HAL_UART_Transmit(&huart2, (uint8_t*)crcBytes, strlen(crcBytes), 10);
	//HAL_UART_Transmit(&huart2, (uint8_t*)newline, 1, 10);
#else
	strcpy((char*)s_buffer._p_tx_buffer, crcBytes);
 8004a7a:	f107 0308 	add.w	r3, r7, #8
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4807      	ldr	r0, [pc, #28]	; (8004aa0 <crc_whole_flash_calc_callback+0x64>)
 8004a82:	f000 fb2f 	bl	80050e4 <strcpy>
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, sizeof(crcBytes));
 8004a86:	2209      	movs	r2, #9
 8004a88:	4905      	ldr	r1, [pc, #20]	; (8004aa0 <crc_whole_flash_calc_callback+0x64>)
 8004a8a:	4806      	ldr	r0, [pc, #24]	; (8004aa4 <crc_whole_flash_calc_callback+0x68>)
 8004a8c:	f7fe fcc0 	bl	8003410 <HAL_UART_Transmit_DMA>
	//strcpy((char*)s_buffer._p_tx_buffer, newline);
	//HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, sizeof(newline));
#endif
}
 8004a90:	bf00      	nop
 8004a92:	3720      	adds	r7, #32
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	2000030c 	.word	0x2000030c
 8004a9c:	2000001c 	.word	0x2000001c
 8004aa0:	200002ef 	.word	0x200002ef
 8004aa4:	200003d4 	.word	0x200003d4

08004aa8 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
#ifndef UART_TX_DMA
  HAL_UART_Transmit(&huart2, m_p_tick, TICK_SIZE, 10);
#else
  strcpy((char*)s_buffer._p_tx_buffer, (char*)m_p_tick);
 8004ab0:	4906      	ldr	r1, [pc, #24]	; (8004acc <HAL_RTC_AlarmAEventCallback+0x24>)
 8004ab2:	4807      	ldr	r0, [pc, #28]	; (8004ad0 <HAL_RTC_AlarmAEventCallback+0x28>)
 8004ab4:	f000 fb16 	bl	80050e4 <strcpy>
  HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, TICK_SIZE);
 8004ab8:	2205      	movs	r2, #5
 8004aba:	4905      	ldr	r1, [pc, #20]	; (8004ad0 <HAL_RTC_AlarmAEventCallback+0x28>)
 8004abc:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8004abe:	f7fe fca7 	bl	8003410 <HAL_UART_Transmit_DMA>
#endif

}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000024 	.word	0x20000024
 8004ad0:	200002ef 	.word	0x200002ef
 8004ad4:	200003d4 	.word	0x200003d4

08004ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004aea:	f7fb fd17 	bl	800051c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000

08004afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <HAL_MspInit+0x4c>)
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	4a0f      	ldr	r2, [pc, #60]	; (8004b58 <HAL_MspInit+0x4c>)
 8004b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b20:	6453      	str	r3, [r2, #68]	; 0x44
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_MspInit+0x4c>)
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_MspInit+0x4c>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <HAL_MspInit+0x4c>)
 8004b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_MspInit+0x4c>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004b4a:	2007      	movs	r0, #7
 8004b4c:	f7fb fdd5 	bl	80006fa <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <HAL_CRC_MspInit+0x3c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d10d      	bne.n	8004b8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <HAL_CRC_MspInit+0x40>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <HAL_CRC_MspInit+0x40>)
 8004b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <HAL_CRC_MspInit+0x40>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40023000 	.word	0x40023000
 8004b9c:	40023800 	.word	0x40023800

08004ba0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <HAL_RTC_MspInit+0x30>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10a      	bne.n	8004bc8 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <HAL_RTC_MspInit+0x34>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	2029      	movs	r0, #41	; 0x29
 8004bbe:	f7fb fda7 	bl	8000710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004bc2:	2029      	movs	r0, #41	; 0x29
 8004bc4:	f7fb fdc0 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40002800 	.word	0x40002800
 8004bd4:	42470e3c 	.word	0x42470e3c

08004bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <HAL_TIM_Base_MspInit+0x3c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10d      	bne.n	8004c06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_TIM_Base_MspInit+0x40>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <HAL_TIM_Base_MspInit+0x40>)
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <HAL_TIM_Base_MspInit+0x40>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40023800 	.word	0x40023800

08004c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c24:	f107 030c 	add.w	r3, r7, #12
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <HAL_TIM_MspPostInit+0x68>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d11d      	bne.n	8004c7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_TIM_MspPostInit+0x6c>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <HAL_TIM_MspPostInit+0x6c>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <HAL_TIM_MspPostInit+0x6c>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c5a:	2340      	movs	r3, #64	; 0x40
 8004c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c6e:	f107 030c 	add.w	r3, r7, #12
 8004c72:	4619      	mov	r1, r3
 8004c74:	4805      	ldr	r0, [pc, #20]	; (8004c8c <HAL_TIM_MspPostInit+0x70>)
 8004c76:	f7fc f955 	bl	8000f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004c7a:	bf00      	nop
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	40020000 	.word	0x40020000

08004c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	609a      	str	r2, [r3, #8]
 8004ca4:	60da      	str	r2, [r3, #12]
 8004ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a4b      	ldr	r2, [pc, #300]	; (8004ddc <HAL_UART_MspInit+0x14c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	f040 8090 	bne.w	8004dd4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	4b49      	ldr	r3, [pc, #292]	; (8004de0 <HAL_UART_MspInit+0x150>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	4a48      	ldr	r2, [pc, #288]	; (8004de0 <HAL_UART_MspInit+0x150>)
 8004cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc4:	4b46      	ldr	r3, [pc, #280]	; (8004de0 <HAL_UART_MspInit+0x150>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	4b42      	ldr	r3, [pc, #264]	; (8004de0 <HAL_UART_MspInit+0x150>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	4a41      	ldr	r2, [pc, #260]	; (8004de0 <HAL_UART_MspInit+0x150>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce0:	4b3f      	ldr	r3, [pc, #252]	; (8004de0 <HAL_UART_MspInit+0x150>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004cec:	230c      	movs	r3, #12
 8004cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cfc:	2307      	movs	r3, #7
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d00:	f107 0314 	add.w	r3, r7, #20
 8004d04:	4619      	mov	r1, r3
 8004d06:	4837      	ldr	r0, [pc, #220]	; (8004de4 <HAL_UART_MspInit+0x154>)
 8004d08:	f7fc f90c 	bl	8000f24 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004d0c:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d0e:	4a37      	ldr	r2, [pc, #220]	; (8004dec <HAL_UART_MspInit+0x15c>)
 8004d10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004d12:	4b35      	ldr	r3, [pc, #212]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d1a:	4b33      	ldr	r3, [pc, #204]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d20:	4b31      	ldr	r3, [pc, #196]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d26:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d2e:	4b2e      	ldr	r3, [pc, #184]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d34:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004d3a:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d40:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d46:	4b28      	ldr	r3, [pc, #160]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004d4c:	4826      	ldr	r0, [pc, #152]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d4e:	f7fb fd59 	bl	8000804 <HAL_DMA_Init>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004d58:	f7ff fed0 	bl	8004afc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a22      	ldr	r2, [pc, #136]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34
 8004d62:	4a21      	ldr	r2, [pc, #132]	; (8004de8 <HAL_UART_MspInit+0x158>)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004d68:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004d6a:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <HAL_UART_MspInit+0x164>)
 8004d6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004d6e:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004d70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d74:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d76:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004d78:	2240      	movs	r2, #64	; 0x40
 8004d7a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d7c:	4b1c      	ldr	r3, [pc, #112]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d88:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d8a:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d90:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d96:	4b16      	ldr	r3, [pc, #88]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004da2:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004da8:	4811      	ldr	r0, [pc, #68]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004daa:	f7fb fd2b 	bl	8000804 <HAL_DMA_Init>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004db4:	f7ff fea2 	bl	8004afc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8004dbe:	4a0c      	ldr	r2, [pc, #48]	; (8004df0 <HAL_UART_MspInit+0x160>)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2026      	movs	r0, #38	; 0x26
 8004dca:	f7fb fca1 	bl	8000710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004dce:	2026      	movs	r0, #38	; 0x26
 8004dd0:	f7fb fcba 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004dd4:	bf00      	nop
 8004dd6:	3728      	adds	r7, #40	; 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40004400 	.word	0x40004400
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40020000 	.word	0x40020000
 8004de8:	20000274 	.word	0x20000274
 8004dec:	40026088 	.word	0x40026088
 8004df0:	20000354 	.word	0x20000354
 8004df4:	400260a0 	.word	0x400260a0

08004df8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	; 0x30
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004e08:	2200      	movs	r2, #0
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	2019      	movs	r0, #25
 8004e0e:	f7fb fc7f 	bl	8000710 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004e12:	2019      	movs	r0, #25
 8004e14:	f7fb fc98 	bl	8000748 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <HAL_InitTick+0xa0>)
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	4a1d      	ldr	r2, [pc, #116]	; (8004e98 <HAL_InitTick+0xa0>)
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	6453      	str	r3, [r2, #68]	; 0x44
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <HAL_InitTick+0xa0>)
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e34:	f107 0210 	add.w	r2, r7, #16
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fc fe88 	bl	8001b54 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fc fe72 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8004e48:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <HAL_InitTick+0xa4>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	0c9b      	lsrs	r3, r3, #18
 8004e54:	3b01      	subs	r3, #1
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004e58:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <HAL_InitTick+0xa8>)
 8004e5a:	4a12      	ldr	r2, [pc, #72]	; (8004ea4 <HAL_InitTick+0xac>)
 8004e5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_InitTick+0xa8>)
 8004e60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004e66:	4a0e      	ldr	r2, [pc, #56]	; (8004ea0 <HAL_InitTick+0xa8>)
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <HAL_InitTick+0xa8>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_InitTick+0xa8>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004e78:	4809      	ldr	r0, [pc, #36]	; (8004ea0 <HAL_InitTick+0xa8>)
 8004e7a:	f7fd fb7d 	bl	8002578 <HAL_TIM_Base_Init>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d104      	bne.n	8004e8e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004e84:	4806      	ldr	r0, [pc, #24]	; (8004ea0 <HAL_InitTick+0xa8>)
 8004e86:	f7fd fba2 	bl	80025ce <HAL_TIM_Base_Start_IT>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	e000      	b.n	8004e90 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3730      	adds	r7, #48	; 0x30
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	431bde83 	.word	0x431bde83
 8004ea0:	20000414 	.word	0x20000414
 8004ea4:	40010000 	.word	0x40010000

08004ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004eac:	bf00      	nop
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eba:	e7fe      	b.n	8004eba <HardFault_Handler+0x4>

08004ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ec0:	e7fe      	b.n	8004ec0 <MemManage_Handler+0x4>

08004ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ec6:	e7fe      	b.n	8004ec6 <BusFault_Handler+0x4>

08004ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ecc:	e7fe      	b.n	8004ecc <UsageFault_Handler+0x4>

08004ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ed2:	bf00      	nop
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004f0c:	4802      	ldr	r0, [pc, #8]	; (8004f18 <DMA1_Stream5_IRQHandler+0x10>)
 8004f0e:	f7fb fda1 	bl	8000a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000274 	.word	0x20000274

08004f1c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <DMA1_Stream6_IRQHandler+0x10>)
 8004f22:	f7fb fd97 	bl	8000a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000354 	.word	0x20000354

08004f30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004f36:	f7fd fc21 	bl	800277c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000414 	.word	0x20000414

08004f44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f48:	4802      	ldr	r0, [pc, #8]	; (8004f54 <USART2_IRQHandler+0x10>)
 8004f4a:	f7fe fb4d 	bl	80035e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200003d4 	.word	0x200003d4

08004f58 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004f5c:	4802      	ldr	r0, [pc, #8]	; (8004f68 <RTC_Alarm_IRQHandler+0x10>)
 8004f5e:	f7fd fa49 	bl	80023f4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	200003b4 	.word	0x200003b4

08004f6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004f74:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <_sbrk+0x50>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d102      	bne.n	8004f82 <_sbrk+0x16>
		heap_end = &end;
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <_sbrk+0x50>)
 8004f7e:	4a10      	ldr	r2, [pc, #64]	; (8004fc0 <_sbrk+0x54>)
 8004f80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <_sbrk+0x50>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <_sbrk+0x50>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4413      	add	r3, r2
 8004f90:	466a      	mov	r2, sp
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d907      	bls.n	8004fa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004f96:	f000 f859 	bl	800504c <__errno>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	230c      	movs	r3, #12
 8004f9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	e006      	b.n	8004fb4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004fa6:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <_sbrk+0x50>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	4a03      	ldr	r2, [pc, #12]	; (8004fbc <_sbrk+0x50>)
 8004fb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000264 	.word	0x20000264
 8004fc0:	20000458 	.word	0x20000458

08004fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <SystemInit+0x28>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	4a07      	ldr	r2, [pc, #28]	; (8004fec <SystemInit+0x28>)
 8004fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fd8:	4b04      	ldr	r3, [pc, #16]	; (8004fec <SystemInit+0x28>)
 8004fda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fde:	609a      	str	r2, [r3, #8]
#endif
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	e000ed00 	.word	0xe000ed00

08004ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005028 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ff4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ff6:	e003      	b.n	8005000 <LoopCopyDataInit>

08004ff8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ffa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ffc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ffe:	3104      	adds	r1, #4

08005000 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005000:	480b      	ldr	r0, [pc, #44]	; (8005030 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005004:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005006:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005008:	d3f6      	bcc.n	8004ff8 <CopyDataInit>
  ldr  r2, =_sbss
 800500a:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800500c:	e002      	b.n	8005014 <LoopFillZerobss>

0800500e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800500e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005010:	f842 3b04 	str.w	r3, [r2], #4

08005014 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005014:	4b09      	ldr	r3, [pc, #36]	; (800503c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005016:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005018:	d3f9      	bcc.n	800500e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800501a:	f7ff ffd3 	bl	8004fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800501e:	f000 f81b 	bl	8005058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005022:	f7ff f98d 	bl	8004340 <main>
  bx  lr    
 8005026:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005028:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800502c:	08005684 	.word	0x08005684
  ldr  r0, =_sdata
 8005030:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005034:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8005038:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 800503c:	20000458 	.word	0x20000458

08005040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005040:	e7fe      	b.n	8005040 <ADC_IRQHandler>

08005042 <atoi>:
 8005042:	220a      	movs	r2, #10
 8005044:	2100      	movs	r1, #0
 8005046:	f000 b94b 	b.w	80052e0 <strtol>
	...

0800504c <__errno>:
 800504c:	4b01      	ldr	r3, [pc, #4]	; (8005054 <__errno+0x8>)
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000078 	.word	0x20000078

08005058 <__libc_init_array>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	4e0d      	ldr	r6, [pc, #52]	; (8005090 <__libc_init_array+0x38>)
 800505c:	4c0d      	ldr	r4, [pc, #52]	; (8005094 <__libc_init_array+0x3c>)
 800505e:	1ba4      	subs	r4, r4, r6
 8005060:	10a4      	asrs	r4, r4, #2
 8005062:	2500      	movs	r5, #0
 8005064:	42a5      	cmp	r5, r4
 8005066:	d109      	bne.n	800507c <__libc_init_array+0x24>
 8005068:	4e0b      	ldr	r6, [pc, #44]	; (8005098 <__libc_init_array+0x40>)
 800506a:	4c0c      	ldr	r4, [pc, #48]	; (800509c <__libc_init_array+0x44>)
 800506c:	f000 fa24 	bl	80054b8 <_init>
 8005070:	1ba4      	subs	r4, r4, r6
 8005072:	10a4      	asrs	r4, r4, #2
 8005074:	2500      	movs	r5, #0
 8005076:	42a5      	cmp	r5, r4
 8005078:	d105      	bne.n	8005086 <__libc_init_array+0x2e>
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005080:	4798      	blx	r3
 8005082:	3501      	adds	r5, #1
 8005084:	e7ee      	b.n	8005064 <__libc_init_array+0xc>
 8005086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800508a:	4798      	blx	r3
 800508c:	3501      	adds	r5, #1
 800508e:	e7f2      	b.n	8005076 <__libc_init_array+0x1e>
 8005090:	0800567c 	.word	0x0800567c
 8005094:	0800567c 	.word	0x0800567c
 8005098:	0800567c 	.word	0x0800567c
 800509c:	08005680 	.word	0x08005680

080050a0 <__itoa>:
 80050a0:	1e93      	subs	r3, r2, #2
 80050a2:	2b22      	cmp	r3, #34	; 0x22
 80050a4:	b510      	push	{r4, lr}
 80050a6:	460c      	mov	r4, r1
 80050a8:	d904      	bls.n	80050b4 <__itoa+0x14>
 80050aa:	2300      	movs	r3, #0
 80050ac:	700b      	strb	r3, [r1, #0]
 80050ae:	461c      	mov	r4, r3
 80050b0:	4620      	mov	r0, r4
 80050b2:	bd10      	pop	{r4, pc}
 80050b4:	2a0a      	cmp	r2, #10
 80050b6:	d109      	bne.n	80050cc <__itoa+0x2c>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	da07      	bge.n	80050cc <__itoa+0x2c>
 80050bc:	232d      	movs	r3, #45	; 0x2d
 80050be:	700b      	strb	r3, [r1, #0]
 80050c0:	4240      	negs	r0, r0
 80050c2:	2101      	movs	r1, #1
 80050c4:	4421      	add	r1, r4
 80050c6:	f000 f921 	bl	800530c <__utoa>
 80050ca:	e7f1      	b.n	80050b0 <__itoa+0x10>
 80050cc:	2100      	movs	r1, #0
 80050ce:	e7f9      	b.n	80050c4 <__itoa+0x24>

080050d0 <itoa>:
 80050d0:	f7ff bfe6 	b.w	80050a0 <__itoa>

080050d4 <memset>:
 80050d4:	4402      	add	r2, r0
 80050d6:	4603      	mov	r3, r0
 80050d8:	4293      	cmp	r3, r2
 80050da:	d100      	bne.n	80050de <memset+0xa>
 80050dc:	4770      	bx	lr
 80050de:	f803 1b01 	strb.w	r1, [r3], #1
 80050e2:	e7f9      	b.n	80050d8 <memset+0x4>

080050e4 <strcpy>:
 80050e4:	4603      	mov	r3, r0
 80050e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ea:	f803 2b01 	strb.w	r2, [r3], #1
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d1f9      	bne.n	80050e6 <strcpy+0x2>
 80050f2:	4770      	bx	lr

080050f4 <strncat>:
 80050f4:	b530      	push	{r4, r5, lr}
 80050f6:	4603      	mov	r3, r0
 80050f8:	781c      	ldrb	r4, [r3, #0]
 80050fa:	1c5d      	adds	r5, r3, #1
 80050fc:	b944      	cbnz	r4, 8005110 <strncat+0x1c>
 80050fe:	f112 32ff 	adds.w	r2, r2, #4294967295
 8005102:	d304      	bcc.n	800510e <strncat+0x1a>
 8005104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005108:	f803 4b01 	strb.w	r4, [r3], #1
 800510c:	b914      	cbnz	r4, 8005114 <strncat+0x20>
 800510e:	bd30      	pop	{r4, r5, pc}
 8005110:	462b      	mov	r3, r5
 8005112:	e7f1      	b.n	80050f8 <strncat+0x4>
 8005114:	2a00      	cmp	r2, #0
 8005116:	d1f2      	bne.n	80050fe <strncat+0xa>
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	e7f0      	b.n	80050fe <strncat+0xa>

0800511c <strncmp>:
 800511c:	b510      	push	{r4, lr}
 800511e:	b16a      	cbz	r2, 800513c <strncmp+0x20>
 8005120:	3901      	subs	r1, #1
 8005122:	1884      	adds	r4, r0, r2
 8005124:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005128:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800512c:	4293      	cmp	r3, r2
 800512e:	d103      	bne.n	8005138 <strncmp+0x1c>
 8005130:	42a0      	cmp	r0, r4
 8005132:	d001      	beq.n	8005138 <strncmp+0x1c>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f5      	bne.n	8005124 <strncmp+0x8>
 8005138:	1a98      	subs	r0, r3, r2
 800513a:	bd10      	pop	{r4, pc}
 800513c:	4610      	mov	r0, r2
 800513e:	e7fc      	b.n	800513a <strncmp+0x1e>

08005140 <strtok>:
 8005140:	4b13      	ldr	r3, [pc, #76]	; (8005190 <strtok+0x50>)
 8005142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005146:	681d      	ldr	r5, [r3, #0]
 8005148:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800514a:	4606      	mov	r6, r0
 800514c:	460f      	mov	r7, r1
 800514e:	b9b4      	cbnz	r4, 800517e <strtok+0x3e>
 8005150:	2050      	movs	r0, #80	; 0x50
 8005152:	f000 f91d 	bl	8005390 <malloc>
 8005156:	65a8      	str	r0, [r5, #88]	; 0x58
 8005158:	e9c0 4400 	strd	r4, r4, [r0]
 800515c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005160:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005164:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005168:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800516c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005170:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005174:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005178:	6184      	str	r4, [r0, #24]
 800517a:	7704      	strb	r4, [r0, #28]
 800517c:	6244      	str	r4, [r0, #36]	; 0x24
 800517e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005180:	4639      	mov	r1, r7
 8005182:	4630      	mov	r0, r6
 8005184:	2301      	movs	r3, #1
 8005186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800518a:	f000 b803 	b.w	8005194 <__strtok_r>
 800518e:	bf00      	nop
 8005190:	20000078 	.word	0x20000078

08005194 <__strtok_r>:
 8005194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005196:	b918      	cbnz	r0, 80051a0 <__strtok_r+0xc>
 8005198:	6810      	ldr	r0, [r2, #0]
 800519a:	b908      	cbnz	r0, 80051a0 <__strtok_r+0xc>
 800519c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800519e:	4620      	mov	r0, r4
 80051a0:	4604      	mov	r4, r0
 80051a2:	460f      	mov	r7, r1
 80051a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80051a8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80051ac:	b91e      	cbnz	r6, 80051b6 <__strtok_r+0x22>
 80051ae:	b96d      	cbnz	r5, 80051cc <__strtok_r+0x38>
 80051b0:	6015      	str	r5, [r2, #0]
 80051b2:	4628      	mov	r0, r5
 80051b4:	e7f2      	b.n	800519c <__strtok_r+0x8>
 80051b6:	42b5      	cmp	r5, r6
 80051b8:	d1f6      	bne.n	80051a8 <__strtok_r+0x14>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1ef      	bne.n	800519e <__strtok_r+0xa>
 80051be:	6014      	str	r4, [r2, #0]
 80051c0:	7003      	strb	r3, [r0, #0]
 80051c2:	e7eb      	b.n	800519c <__strtok_r+0x8>
 80051c4:	462b      	mov	r3, r5
 80051c6:	e00d      	b.n	80051e4 <__strtok_r+0x50>
 80051c8:	b926      	cbnz	r6, 80051d4 <__strtok_r+0x40>
 80051ca:	461c      	mov	r4, r3
 80051cc:	4623      	mov	r3, r4
 80051ce:	460f      	mov	r7, r1
 80051d0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80051d4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80051d8:	42b5      	cmp	r5, r6
 80051da:	d1f5      	bne.n	80051c8 <__strtok_r+0x34>
 80051dc:	2d00      	cmp	r5, #0
 80051de:	d0f1      	beq.n	80051c4 <__strtok_r+0x30>
 80051e0:	2100      	movs	r1, #0
 80051e2:	7021      	strb	r1, [r4, #0]
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e7d9      	b.n	800519c <__strtok_r+0x8>

080051e8 <_strtol_l.isra.0>:
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	4680      	mov	r8, r0
 80051ee:	4689      	mov	r9, r1
 80051f0:	4692      	mov	sl, r2
 80051f2:	461e      	mov	r6, r3
 80051f4:	460f      	mov	r7, r1
 80051f6:	463d      	mov	r5, r7
 80051f8:	9808      	ldr	r0, [sp, #32]
 80051fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051fe:	f000 f8c3 	bl	8005388 <__locale_ctype_ptr_l>
 8005202:	4420      	add	r0, r4
 8005204:	7843      	ldrb	r3, [r0, #1]
 8005206:	f013 0308 	ands.w	r3, r3, #8
 800520a:	d132      	bne.n	8005272 <_strtol_l.isra.0+0x8a>
 800520c:	2c2d      	cmp	r4, #45	; 0x2d
 800520e:	d132      	bne.n	8005276 <_strtol_l.isra.0+0x8e>
 8005210:	787c      	ldrb	r4, [r7, #1]
 8005212:	1cbd      	adds	r5, r7, #2
 8005214:	2201      	movs	r2, #1
 8005216:	2e00      	cmp	r6, #0
 8005218:	d05d      	beq.n	80052d6 <_strtol_l.isra.0+0xee>
 800521a:	2e10      	cmp	r6, #16
 800521c:	d109      	bne.n	8005232 <_strtol_l.isra.0+0x4a>
 800521e:	2c30      	cmp	r4, #48	; 0x30
 8005220:	d107      	bne.n	8005232 <_strtol_l.isra.0+0x4a>
 8005222:	782b      	ldrb	r3, [r5, #0]
 8005224:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005228:	2b58      	cmp	r3, #88	; 0x58
 800522a:	d14f      	bne.n	80052cc <_strtol_l.isra.0+0xe4>
 800522c:	786c      	ldrb	r4, [r5, #1]
 800522e:	2610      	movs	r6, #16
 8005230:	3502      	adds	r5, #2
 8005232:	2a00      	cmp	r2, #0
 8005234:	bf14      	ite	ne
 8005236:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800523a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800523e:	2700      	movs	r7, #0
 8005240:	fbb1 fcf6 	udiv	ip, r1, r6
 8005244:	4638      	mov	r0, r7
 8005246:	fb06 1e1c 	mls	lr, r6, ip, r1
 800524a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800524e:	2b09      	cmp	r3, #9
 8005250:	d817      	bhi.n	8005282 <_strtol_l.isra.0+0x9a>
 8005252:	461c      	mov	r4, r3
 8005254:	42a6      	cmp	r6, r4
 8005256:	dd23      	ble.n	80052a0 <_strtol_l.isra.0+0xb8>
 8005258:	1c7b      	adds	r3, r7, #1
 800525a:	d007      	beq.n	800526c <_strtol_l.isra.0+0x84>
 800525c:	4584      	cmp	ip, r0
 800525e:	d31c      	bcc.n	800529a <_strtol_l.isra.0+0xb2>
 8005260:	d101      	bne.n	8005266 <_strtol_l.isra.0+0x7e>
 8005262:	45a6      	cmp	lr, r4
 8005264:	db19      	blt.n	800529a <_strtol_l.isra.0+0xb2>
 8005266:	fb00 4006 	mla	r0, r0, r6, r4
 800526a:	2701      	movs	r7, #1
 800526c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005270:	e7eb      	b.n	800524a <_strtol_l.isra.0+0x62>
 8005272:	462f      	mov	r7, r5
 8005274:	e7bf      	b.n	80051f6 <_strtol_l.isra.0+0xe>
 8005276:	2c2b      	cmp	r4, #43	; 0x2b
 8005278:	bf04      	itt	eq
 800527a:	1cbd      	addeq	r5, r7, #2
 800527c:	787c      	ldrbeq	r4, [r7, #1]
 800527e:	461a      	mov	r2, r3
 8005280:	e7c9      	b.n	8005216 <_strtol_l.isra.0+0x2e>
 8005282:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005286:	2b19      	cmp	r3, #25
 8005288:	d801      	bhi.n	800528e <_strtol_l.isra.0+0xa6>
 800528a:	3c37      	subs	r4, #55	; 0x37
 800528c:	e7e2      	b.n	8005254 <_strtol_l.isra.0+0x6c>
 800528e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005292:	2b19      	cmp	r3, #25
 8005294:	d804      	bhi.n	80052a0 <_strtol_l.isra.0+0xb8>
 8005296:	3c57      	subs	r4, #87	; 0x57
 8005298:	e7dc      	b.n	8005254 <_strtol_l.isra.0+0x6c>
 800529a:	f04f 37ff 	mov.w	r7, #4294967295
 800529e:	e7e5      	b.n	800526c <_strtol_l.isra.0+0x84>
 80052a0:	1c7b      	adds	r3, r7, #1
 80052a2:	d108      	bne.n	80052b6 <_strtol_l.isra.0+0xce>
 80052a4:	2322      	movs	r3, #34	; 0x22
 80052a6:	f8c8 3000 	str.w	r3, [r8]
 80052aa:	4608      	mov	r0, r1
 80052ac:	f1ba 0f00 	cmp.w	sl, #0
 80052b0:	d107      	bne.n	80052c2 <_strtol_l.isra.0+0xda>
 80052b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b6:	b102      	cbz	r2, 80052ba <_strtol_l.isra.0+0xd2>
 80052b8:	4240      	negs	r0, r0
 80052ba:	f1ba 0f00 	cmp.w	sl, #0
 80052be:	d0f8      	beq.n	80052b2 <_strtol_l.isra.0+0xca>
 80052c0:	b10f      	cbz	r7, 80052c6 <_strtol_l.isra.0+0xde>
 80052c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80052c6:	f8ca 9000 	str.w	r9, [sl]
 80052ca:	e7f2      	b.n	80052b2 <_strtol_l.isra.0+0xca>
 80052cc:	2430      	movs	r4, #48	; 0x30
 80052ce:	2e00      	cmp	r6, #0
 80052d0:	d1af      	bne.n	8005232 <_strtol_l.isra.0+0x4a>
 80052d2:	2608      	movs	r6, #8
 80052d4:	e7ad      	b.n	8005232 <_strtol_l.isra.0+0x4a>
 80052d6:	2c30      	cmp	r4, #48	; 0x30
 80052d8:	d0a3      	beq.n	8005222 <_strtol_l.isra.0+0x3a>
 80052da:	260a      	movs	r6, #10
 80052dc:	e7a9      	b.n	8005232 <_strtol_l.isra.0+0x4a>
	...

080052e0 <strtol>:
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <strtol+0x24>)
 80052e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e4:	681c      	ldr	r4, [r3, #0]
 80052e6:	4d08      	ldr	r5, [pc, #32]	; (8005308 <strtol+0x28>)
 80052e8:	6a23      	ldr	r3, [r4, #32]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf08      	it	eq
 80052ee:	462b      	moveq	r3, r5
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	460a      	mov	r2, r1
 80052f6:	4601      	mov	r1, r0
 80052f8:	4620      	mov	r0, r4
 80052fa:	f7ff ff75 	bl	80051e8 <_strtol_l.isra.0>
 80052fe:	b003      	add	sp, #12
 8005300:	bd30      	pop	{r4, r5, pc}
 8005302:	bf00      	nop
 8005304:	20000078 	.word	0x20000078
 8005308:	200000dc 	.word	0x200000dc

0800530c <__utoa>:
 800530c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530e:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <__utoa+0x78>)
 8005310:	b08b      	sub	sp, #44	; 0x2c
 8005312:	4605      	mov	r5, r0
 8005314:	460c      	mov	r4, r1
 8005316:	466e      	mov	r6, sp
 8005318:	f103 0c20 	add.w	ip, r3, #32
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	6859      	ldr	r1, [r3, #4]
 8005320:	4637      	mov	r7, r6
 8005322:	c703      	stmia	r7!, {r0, r1}
 8005324:	3308      	adds	r3, #8
 8005326:	4563      	cmp	r3, ip
 8005328:	463e      	mov	r6, r7
 800532a:	d1f7      	bne.n	800531c <__utoa+0x10>
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	791b      	ldrb	r3, [r3, #4]
 8005330:	713b      	strb	r3, [r7, #4]
 8005332:	1e93      	subs	r3, r2, #2
 8005334:	2b22      	cmp	r3, #34	; 0x22
 8005336:	6038      	str	r0, [r7, #0]
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	d904      	bls.n	8005348 <__utoa+0x3c>
 800533e:	7023      	strb	r3, [r4, #0]
 8005340:	461c      	mov	r4, r3
 8005342:	4620      	mov	r0, r4
 8005344:	b00b      	add	sp, #44	; 0x2c
 8005346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005348:	1e66      	subs	r6, r4, #1
 800534a:	fbb5 f0f2 	udiv	r0, r5, r2
 800534e:	af0a      	add	r7, sp, #40	; 0x28
 8005350:	fb02 5510 	mls	r5, r2, r0, r5
 8005354:	443d      	add	r5, r7
 8005356:	1c59      	adds	r1, r3, #1
 8005358:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800535c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005360:	4605      	mov	r5, r0
 8005362:	b968      	cbnz	r0, 8005380 <__utoa+0x74>
 8005364:	5460      	strb	r0, [r4, r1]
 8005366:	4423      	add	r3, r4
 8005368:	4622      	mov	r2, r4
 800536a:	1b19      	subs	r1, r3, r4
 800536c:	1b10      	subs	r0, r2, r4
 800536e:	4281      	cmp	r1, r0
 8005370:	dde7      	ble.n	8005342 <__utoa+0x36>
 8005372:	7811      	ldrb	r1, [r2, #0]
 8005374:	7818      	ldrb	r0, [r3, #0]
 8005376:	f802 0b01 	strb.w	r0, [r2], #1
 800537a:	f803 1901 	strb.w	r1, [r3], #-1
 800537e:	e7f4      	b.n	800536a <__utoa+0x5e>
 8005380:	460b      	mov	r3, r1
 8005382:	e7e2      	b.n	800534a <__utoa+0x3e>
 8005384:	08005544 	.word	0x08005544

08005388 <__locale_ctype_ptr_l>:
 8005388:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800538c:	4770      	bx	lr
	...

08005390 <malloc>:
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <malloc+0xc>)
 8005392:	4601      	mov	r1, r0
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	f000 b815 	b.w	80053c4 <_malloc_r>
 800539a:	bf00      	nop
 800539c:	20000078 	.word	0x20000078

080053a0 <__ascii_mbtowc>:
 80053a0:	b082      	sub	sp, #8
 80053a2:	b901      	cbnz	r1, 80053a6 <__ascii_mbtowc+0x6>
 80053a4:	a901      	add	r1, sp, #4
 80053a6:	b142      	cbz	r2, 80053ba <__ascii_mbtowc+0x1a>
 80053a8:	b14b      	cbz	r3, 80053be <__ascii_mbtowc+0x1e>
 80053aa:	7813      	ldrb	r3, [r2, #0]
 80053ac:	600b      	str	r3, [r1, #0]
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	1c10      	adds	r0, r2, #0
 80053b2:	bf18      	it	ne
 80053b4:	2001      	movne	r0, #1
 80053b6:	b002      	add	sp, #8
 80053b8:	4770      	bx	lr
 80053ba:	4610      	mov	r0, r2
 80053bc:	e7fb      	b.n	80053b6 <__ascii_mbtowc+0x16>
 80053be:	f06f 0001 	mvn.w	r0, #1
 80053c2:	e7f8      	b.n	80053b6 <__ascii_mbtowc+0x16>

080053c4 <_malloc_r>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	1ccd      	adds	r5, r1, #3
 80053c8:	f025 0503 	bic.w	r5, r5, #3
 80053cc:	3508      	adds	r5, #8
 80053ce:	2d0c      	cmp	r5, #12
 80053d0:	bf38      	it	cc
 80053d2:	250c      	movcc	r5, #12
 80053d4:	2d00      	cmp	r5, #0
 80053d6:	4606      	mov	r6, r0
 80053d8:	db01      	blt.n	80053de <_malloc_r+0x1a>
 80053da:	42a9      	cmp	r1, r5
 80053dc:	d903      	bls.n	80053e6 <_malloc_r+0x22>
 80053de:	230c      	movs	r3, #12
 80053e0:	6033      	str	r3, [r6, #0]
 80053e2:	2000      	movs	r0, #0
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
 80053e6:	f000 f864 	bl	80054b2 <__malloc_lock>
 80053ea:	4a21      	ldr	r2, [pc, #132]	; (8005470 <_malloc_r+0xac>)
 80053ec:	6814      	ldr	r4, [r2, #0]
 80053ee:	4621      	mov	r1, r4
 80053f0:	b991      	cbnz	r1, 8005418 <_malloc_r+0x54>
 80053f2:	4c20      	ldr	r4, [pc, #128]	; (8005474 <_malloc_r+0xb0>)
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	b91b      	cbnz	r3, 8005400 <_malloc_r+0x3c>
 80053f8:	4630      	mov	r0, r6
 80053fa:	f000 f83d 	bl	8005478 <_sbrk_r>
 80053fe:	6020      	str	r0, [r4, #0]
 8005400:	4629      	mov	r1, r5
 8005402:	4630      	mov	r0, r6
 8005404:	f000 f838 	bl	8005478 <_sbrk_r>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d124      	bne.n	8005456 <_malloc_r+0x92>
 800540c:	230c      	movs	r3, #12
 800540e:	6033      	str	r3, [r6, #0]
 8005410:	4630      	mov	r0, r6
 8005412:	f000 f84f 	bl	80054b4 <__malloc_unlock>
 8005416:	e7e4      	b.n	80053e2 <_malloc_r+0x1e>
 8005418:	680b      	ldr	r3, [r1, #0]
 800541a:	1b5b      	subs	r3, r3, r5
 800541c:	d418      	bmi.n	8005450 <_malloc_r+0x8c>
 800541e:	2b0b      	cmp	r3, #11
 8005420:	d90f      	bls.n	8005442 <_malloc_r+0x7e>
 8005422:	600b      	str	r3, [r1, #0]
 8005424:	50cd      	str	r5, [r1, r3]
 8005426:	18cc      	adds	r4, r1, r3
 8005428:	4630      	mov	r0, r6
 800542a:	f000 f843 	bl	80054b4 <__malloc_unlock>
 800542e:	f104 000b 	add.w	r0, r4, #11
 8005432:	1d23      	adds	r3, r4, #4
 8005434:	f020 0007 	bic.w	r0, r0, #7
 8005438:	1ac3      	subs	r3, r0, r3
 800543a:	d0d3      	beq.n	80053e4 <_malloc_r+0x20>
 800543c:	425a      	negs	r2, r3
 800543e:	50e2      	str	r2, [r4, r3]
 8005440:	e7d0      	b.n	80053e4 <_malloc_r+0x20>
 8005442:	428c      	cmp	r4, r1
 8005444:	684b      	ldr	r3, [r1, #4]
 8005446:	bf16      	itet	ne
 8005448:	6063      	strne	r3, [r4, #4]
 800544a:	6013      	streq	r3, [r2, #0]
 800544c:	460c      	movne	r4, r1
 800544e:	e7eb      	b.n	8005428 <_malloc_r+0x64>
 8005450:	460c      	mov	r4, r1
 8005452:	6849      	ldr	r1, [r1, #4]
 8005454:	e7cc      	b.n	80053f0 <_malloc_r+0x2c>
 8005456:	1cc4      	adds	r4, r0, #3
 8005458:	f024 0403 	bic.w	r4, r4, #3
 800545c:	42a0      	cmp	r0, r4
 800545e:	d005      	beq.n	800546c <_malloc_r+0xa8>
 8005460:	1a21      	subs	r1, r4, r0
 8005462:	4630      	mov	r0, r6
 8005464:	f000 f808 	bl	8005478 <_sbrk_r>
 8005468:	3001      	adds	r0, #1
 800546a:	d0cf      	beq.n	800540c <_malloc_r+0x48>
 800546c:	6025      	str	r5, [r4, #0]
 800546e:	e7db      	b.n	8005428 <_malloc_r+0x64>
 8005470:	20000268 	.word	0x20000268
 8005474:	2000026c 	.word	0x2000026c

08005478 <_sbrk_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4c06      	ldr	r4, [pc, #24]	; (8005494 <_sbrk_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4605      	mov	r5, r0
 8005480:	4608      	mov	r0, r1
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	f7ff fd72 	bl	8004f6c <_sbrk>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_sbrk_r+0x1a>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	b103      	cbz	r3, 8005492 <_sbrk_r+0x1a>
 8005490:	602b      	str	r3, [r5, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	20000454 	.word	0x20000454

08005498 <__ascii_wctomb>:
 8005498:	b149      	cbz	r1, 80054ae <__ascii_wctomb+0x16>
 800549a:	2aff      	cmp	r2, #255	; 0xff
 800549c:	bf85      	ittet	hi
 800549e:	238a      	movhi	r3, #138	; 0x8a
 80054a0:	6003      	strhi	r3, [r0, #0]
 80054a2:	700a      	strbls	r2, [r1, #0]
 80054a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80054a8:	bf98      	it	ls
 80054aa:	2001      	movls	r0, #1
 80054ac:	4770      	bx	lr
 80054ae:	4608      	mov	r0, r1
 80054b0:	4770      	bx	lr

080054b2 <__malloc_lock>:
 80054b2:	4770      	bx	lr

080054b4 <__malloc_unlock>:
 80054b4:	4770      	bx	lr
	...

080054b8 <_init>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

080054c4 <_fini>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr
