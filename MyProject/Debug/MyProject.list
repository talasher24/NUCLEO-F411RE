
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800896c  0800896c  0001896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009008  08009008  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009010  08009010  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000080  08009018  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noinit       00000044  20000000  20000000  00030000  2**2
                  ALLOC
 10 .ip_code      00000000  08060000  08060000  0002025c  2**0
                  CONTENTS
 11 .bss          00000200  2000025c  2000025c  0002025c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000045c  2000045c  0002025c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001198e  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002abf  00000000  00000000  00031c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001118  00000000  00000000  000346e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000fb0  00000000  00000000  000357f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00018567  00000000  00000000  000367a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001151e  00000000  00000000  0004ed0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00093f5a  00000000  00000000  0006022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  000f4187  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004bf0  00000000  00000000  000f4204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008954 	.word	0x08008954

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	08008954 	.word	0x08008954

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f94d 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f007 fa00 	bl	80079c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f9ac 	bl	8000950 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f942 	bl	8000898 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000088 	.word	0x20000088
 800062c:	20000084 	.word	0x20000084
 8000630:	20000080 	.word	0x20000080

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000084 	.word	0x20000084
 8000658:	2000028c 	.word	0x2000028c

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000028c 	.word	0x2000028c

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db0b      	blt.n	8000702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f003 021f 	and.w	r2, r3, #31
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <__NVIC_EnableIRQ+0x38>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	2001      	movs	r0, #1
 80006fa:	fa00 f202 	lsl.w	r2, r0, r2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db10      	blt.n	8000748 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 021f 	and.w	r2, r3, #31
 800072c:	4909      	ldr	r1, [pc, #36]	; (8000754 <__NVIC_DisableIRQ+0x40>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	3320      	adds	r3, #32
 800073c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000740:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000744:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f7ff ff8e 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b07      	cmp	r3, #7
 8000864:	d00f      	beq.n	8000886 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b06      	cmp	r3, #6
 800086a:	d00c      	beq.n	8000886 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b05      	cmp	r3, #5
 8000870:	d009      	beq.n	8000886 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b04      	cmp	r3, #4
 8000876:	d006      	beq.n	8000886 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d003      	beq.n	8000886 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800087e:	2192      	movs	r1, #146	; 0x92
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000882:	f007 f87d 	bl	8007980 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fef4 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	0800896c 	.word	0x0800896c

08000898 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d903      	bls.n	80008b8 <HAL_NVIC_SetPriority+0x20>
 80008b0:	21aa      	movs	r1, #170	; 0xaa
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <HAL_NVIC_SetPriority+0x54>)
 80008b4:	f007 f864 	bl	8007980 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d903      	bls.n	80008c6 <HAL_NVIC_SetPriority+0x2e>
 80008be:	21ab      	movs	r1, #171	; 0xab
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <HAL_NVIC_SetPriority+0x54>)
 80008c2:	f007 f85d 	bl	8007980 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c6:	f7ff fef9 	bl	80006bc <__NVIC_GetPriorityGrouping>
 80008ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	6978      	ldr	r0, [r7, #20]
 80008d2:	f7ff ff6b 	bl	80007ac <NVIC_EncodePriority>
 80008d6:	4602      	mov	r2, r0
 80008d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff3a 	bl	8000758 <__NVIC_SetPriority>
}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	0800896c 	.word	0x0800896c

080008f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	da03      	bge.n	800090a <HAL_NVIC_EnableIRQ+0x1a>
 8000902:	21be      	movs	r1, #190	; 0xbe
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_NVIC_EnableIRQ+0x2c>)
 8000906:	f007 f83b 	bl	8007980 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fee2 	bl	80006d8 <__NVIC_EnableIRQ>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	0800896c 	.word	0x0800896c

08000920 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	2b00      	cmp	r3, #0
 8000930:	da03      	bge.n	800093a <HAL_NVIC_DisableIRQ+0x1a>
 8000932:	21ce      	movs	r1, #206	; 0xce
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_NVIC_DisableIRQ+0x2c>)
 8000936:	f007 f823 	bl	8007980 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fee8 	bl	8000714 <__NVIC_DisableIRQ>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	0800896c 	.word	0x0800896c

08000950 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff5b 	bl	8000814 <SysTick_Config>
 800095e:	4603      	mov	r3, r0
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d101      	bne.n	800097a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e017      	b.n	80009aa <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <HAL_CRC_Init+0x4c>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d003      	beq.n	800098c <HAL_CRC_Init+0x24>
 8000984:	2168      	movs	r1, #104	; 0x68
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <HAL_CRC_Init+0x50>)
 8000988:	f006 fffa 	bl	8007980 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	795b      	ldrb	r3, [r3, #5]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d105      	bne.n	80009a2 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f007 f83b 	bl	8007a18 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2201      	movs	r2, #1
 80009a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023000 	.word	0x40023000
 80009b8:	080089a8 	.word	0x080089a8

080009bc <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2202      	movs	r2, #2
 80009d0:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f042 0201 	orr.w	r2, r2, #1
 80009e0:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e00a      	b.n	80009fe <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	441a      	add	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d3f0      	bcc.n	80009e8 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2201      	movs	r2, #1
 8000a12:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000a14:	693b      	ldr	r3, [r7, #16]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	371c      	adds	r7, #28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff fe14 	bl	800065c <HAL_GetTick>
 8000a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d101      	bne.n	8000a40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e204      	b.n	8000e4a <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a97      	ldr	r2, [pc, #604]	; (8000ca4 <HAL_DMA_Init+0x280>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d04e      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a96      	ldr	r2, [pc, #600]	; (8000ca8 <HAL_DMA_Init+0x284>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d049      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a94      	ldr	r2, [pc, #592]	; (8000cac <HAL_DMA_Init+0x288>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d044      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a93      	ldr	r2, [pc, #588]	; (8000cb0 <HAL_DMA_Init+0x28c>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d03f      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a91      	ldr	r2, [pc, #580]	; (8000cb4 <HAL_DMA_Init+0x290>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d03a      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a90      	ldr	r2, [pc, #576]	; (8000cb8 <HAL_DMA_Init+0x294>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d035      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a8e      	ldr	r2, [pc, #568]	; (8000cbc <HAL_DMA_Init+0x298>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d030      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a8d      	ldr	r2, [pc, #564]	; (8000cc0 <HAL_DMA_Init+0x29c>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d02b      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a8b      	ldr	r2, [pc, #556]	; (8000cc4 <HAL_DMA_Init+0x2a0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d026      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a8a      	ldr	r2, [pc, #552]	; (8000cc8 <HAL_DMA_Init+0x2a4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d021      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a88      	ldr	r2, [pc, #544]	; (8000ccc <HAL_DMA_Init+0x2a8>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d01c      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a87      	ldr	r2, [pc, #540]	; (8000cd0 <HAL_DMA_Init+0x2ac>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d017      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a85      	ldr	r2, [pc, #532]	; (8000cd4 <HAL_DMA_Init+0x2b0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d012      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a84      	ldr	r2, [pc, #528]	; (8000cd8 <HAL_DMA_Init+0x2b4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00d      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a82      	ldr	r2, [pc, #520]	; (8000cdc <HAL_DMA_Init+0x2b8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d008      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a81      	ldr	r2, [pc, #516]	; (8000ce0 <HAL_DMA_Init+0x2bc>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d003      	beq.n	8000ae8 <HAL_DMA_Init+0xc4>
 8000ae0:	21b8      	movs	r1, #184	; 0xb8
 8000ae2:	4880      	ldr	r0, [pc, #512]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000ae4:	f006 ff4c 	bl	8007980 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d026      	beq.n	8000b3e <HAL_DMA_Init+0x11a>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000af8:	d021      	beq.n	8000b3e <HAL_DMA_Init+0x11a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b02:	d01c      	beq.n	8000b3e <HAL_DMA_Init+0x11a>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8000b0c:	d017      	beq.n	8000b3e <HAL_DMA_Init+0x11a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000b16:	d012      	beq.n	8000b3e <HAL_DMA_Init+0x11a>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8000b20:	d00d      	beq.n	8000b3e <HAL_DMA_Init+0x11a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8000b2a:	d008      	beq.n	8000b3e <HAL_DMA_Init+0x11a>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8000b34:	d003      	beq.n	8000b3e <HAL_DMA_Init+0x11a>
 8000b36:	21b9      	movs	r1, #185	; 0xb9
 8000b38:	486a      	ldr	r0, [pc, #424]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000b3a:	f006 ff21 	bl	8007980 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00b      	beq.n	8000b5e <HAL_DMA_Init+0x13a>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b40      	cmp	r3, #64	; 0x40
 8000b4c:	d007      	beq.n	8000b5e <HAL_DMA_Init+0x13a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2b80      	cmp	r3, #128	; 0x80
 8000b54:	d003      	beq.n	8000b5e <HAL_DMA_Init+0x13a>
 8000b56:	21ba      	movs	r1, #186	; 0xba
 8000b58:	4862      	ldr	r0, [pc, #392]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000b5a:	f006 ff11 	bl	8007980 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b66:	d007      	beq.n	8000b78 <HAL_DMA_Init+0x154>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <HAL_DMA_Init+0x154>
 8000b70:	21bb      	movs	r1, #187	; 0xbb
 8000b72:	485c      	ldr	r0, [pc, #368]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000b74:	f006 ff04 	bl	8007980 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b80:	d007      	beq.n	8000b92 <HAL_DMA_Init+0x16e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_DMA_Init+0x16e>
 8000b8a:	21bc      	movs	r1, #188	; 0xbc
 8000b8c:	4855      	ldr	r0, [pc, #340]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000b8e:	f006 fef7 	bl	8007980 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00d      	beq.n	8000bb6 <HAL_DMA_Init+0x192>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ba2:	d008      	beq.n	8000bb6 <HAL_DMA_Init+0x192>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bac:	d003      	beq.n	8000bb6 <HAL_DMA_Init+0x192>
 8000bae:	21bd      	movs	r1, #189	; 0xbd
 8000bb0:	484c      	ldr	r0, [pc, #304]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000bb2:	f006 fee5 	bl	8007980 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00d      	beq.n	8000bda <HAL_DMA_Init+0x1b6>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bc6:	d008      	beq.n	8000bda <HAL_DMA_Init+0x1b6>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bd0:	d003      	beq.n	8000bda <HAL_DMA_Init+0x1b6>
 8000bd2:	21be      	movs	r1, #190	; 0xbe
 8000bd4:	4843      	ldr	r0, [pc, #268]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000bd6:	f006 fed3 	bl	8007980 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00c      	beq.n	8000bfc <HAL_DMA_Init+0x1d8>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bea:	d007      	beq.n	8000bfc <HAL_DMA_Init+0x1d8>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	2b20      	cmp	r3, #32
 8000bf2:	d003      	beq.n	8000bfc <HAL_DMA_Init+0x1d8>
 8000bf4:	21bf      	movs	r1, #191	; 0xbf
 8000bf6:	483b      	ldr	r0, [pc, #236]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000bf8:	f006 fec2 	bl	8007980 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d012      	beq.n	8000c2a <HAL_DMA_Init+0x206>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c0c:	d00d      	beq.n	8000c2a <HAL_DMA_Init+0x206>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a1b      	ldr	r3, [r3, #32]
 8000c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c16:	d008      	beq.n	8000c2a <HAL_DMA_Init+0x206>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000c20:	d003      	beq.n	8000c2a <HAL_DMA_Init+0x206>
 8000c22:	21c0      	movs	r1, #192	; 0xc0
 8000c24:	482f      	ldr	r0, [pc, #188]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000c26:	f006 feab 	bl	8007980 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <HAL_DMA_Init+0x21e>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d003      	beq.n	8000c42 <HAL_DMA_Init+0x21e>
 8000c3a:	21c1      	movs	r1, #193	; 0xc1
 8000c3c:	4829      	ldr	r0, [pc, #164]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000c3e:	f006 fe9f 	bl	8007980 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d065      	beq.n	8000d16 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00f      	beq.n	8000c72 <HAL_DMA_Init+0x24e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d00b      	beq.n	8000c72 <HAL_DMA_Init+0x24e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d007      	beq.n	8000c72 <HAL_DMA_Init+0x24e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d003      	beq.n	8000c72 <HAL_DMA_Init+0x24e>
 8000c6a:	21c6      	movs	r1, #198	; 0xc6
 8000c6c:	481d      	ldr	r0, [pc, #116]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000c6e:	f006 fe87 	bl	8007980 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d036      	beq.n	8000ce8 <HAL_DMA_Init+0x2c4>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000c82:	d031      	beq.n	8000ce8 <HAL_DMA_Init+0x2c4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d02c      	beq.n	8000ce8 <HAL_DMA_Init+0x2c4>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000c96:	d027      	beq.n	8000ce8 <HAL_DMA_Init+0x2c4>
 8000c98:	21c7      	movs	r1, #199	; 0xc7
 8000c9a:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <HAL_DMA_Init+0x2c0>)
 8000c9c:	f006 fe70 	bl	8007980 <assert_failed>
 8000ca0:	e022      	b.n	8000ce8 <HAL_DMA_Init+0x2c4>
 8000ca2:	bf00      	nop
 8000ca4:	40026010 	.word	0x40026010
 8000ca8:	40026028 	.word	0x40026028
 8000cac:	40026040 	.word	0x40026040
 8000cb0:	40026058 	.word	0x40026058
 8000cb4:	40026070 	.word	0x40026070
 8000cb8:	40026088 	.word	0x40026088
 8000cbc:	400260a0 	.word	0x400260a0
 8000cc0:	400260b8 	.word	0x400260b8
 8000cc4:	40026410 	.word	0x40026410
 8000cc8:	40026428 	.word	0x40026428
 8000ccc:	40026440 	.word	0x40026440
 8000cd0:	40026458 	.word	0x40026458
 8000cd4:	40026470 	.word	0x40026470
 8000cd8:	40026488 	.word	0x40026488
 8000cdc:	400264a0 	.word	0x400264a0
 8000ce0:	400264b8 	.word	0x400264b8
 8000ce4:	080089e0 	.word	0x080089e0
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d012      	beq.n	8000d16 <HAL_DMA_Init+0x2f2>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000cf8:	d00d      	beq.n	8000d16 <HAL_DMA_Init+0x2f2>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d02:	d008      	beq.n	8000d16 <HAL_DMA_Init+0x2f2>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8000d0c:	d003      	beq.n	8000d16 <HAL_DMA_Init+0x2f2>
 8000d0e:	21c8      	movs	r1, #200	; 0xc8
 8000d10:	4850      	ldr	r0, [pc, #320]	; (8000e54 <HAL_DMA_Init+0x430>)
 8000d12:	f006 fe35 	bl	8007980 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2202      	movs	r2, #2
 8000d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0201 	bic.w	r2, r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d36:	e00f      	b.n	8000d58 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d38:	f7ff fc90 	bl	800065c <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b05      	cmp	r3, #5
 8000d44:	d908      	bls.n	8000d58 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2220      	movs	r2, #32
 8000d4a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2203      	movs	r2, #3
 8000d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e078      	b.n	8000e4a <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1e8      	bne.n	8000d38 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <HAL_DMA_Init+0x434>)
 8000d72:	4013      	ands	r3, r2
 8000d74:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d107      	bne.n	8000dc2 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f023 0307 	bic.w	r3, r3, #7
 8000dd8:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d117      	bne.n	8000e1c <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00e      	beq.n	8000e1c <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 faa2 	bl	8001348 <DMA_CheckFifoParam>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d008      	beq.n	8000e1c <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2240      	movs	r2, #64	; 0x40
 8000e0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e016      	b.n	8000e4a <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 fa59 	bl	80012dc <DMA_CalcBaseAndBitshift>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e32:	223f      	movs	r2, #63	; 0x3f
 8000e34:	409a      	lsls	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	080089e0 	.word	0x080089e0
 8000e58:	f010803f 	.word	0xf010803f

08000e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_DMA_Start_IT+0x26>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e80:	d304      	bcc.n	8000e8c <HAL_DMA_Start_IT+0x30>
 8000e82:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8000e86:	4827      	ldr	r0, [pc, #156]	; (8000f24 <HAL_DMA_Start_IT+0xc8>)
 8000e88:	f006 fd7a 	bl	8007980 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d101      	bne.n	8000e9a <HAL_DMA_Start_IT+0x3e>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e040      	b.n	8000f1c <HAL_DMA_Start_IT+0xc0>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d12f      	bne.n	8000f0e <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f000 f9dc 	bl	8001280 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ecc:	223f      	movs	r2, #63	; 0x3f
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0216 	orr.w	r2, r2, #22
 8000ee2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d007      	beq.n	8000efc <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0208 	orr.w	r2, r2, #8
 8000efa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e005      	b.n	8000f1a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f16:	2302      	movs	r3, #2
 8000f18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	080089e0 	.word	0x080089e0

08000f28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d004      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00c      	b.n	8000f60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2205      	movs	r2, #5
 8000f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f78:	4b92      	ldr	r3, [pc, #584]	; (80011c4 <HAL_DMA_IRQHandler+0x258>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a92      	ldr	r2, [pc, #584]	; (80011c8 <HAL_DMA_IRQHandler+0x25c>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	0a9b      	lsrs	r3, r3, #10
 8000f84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f96:	2208      	movs	r2, #8
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d01a      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d013      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0204 	bic.w	r2, r2, #4
 8000fbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fdc:	2201      	movs	r2, #1
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d012      	beq.n	800100e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00b      	beq.n	800100e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001006:	f043 0202 	orr.w	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001012:	2204      	movs	r2, #4
 8001014:	409a      	lsls	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d012      	beq.n	8001044 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00b      	beq.n	8001044 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001030:	2204      	movs	r2, #4
 8001032:	409a      	lsls	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800103c:	f043 0204 	orr.w	r2, r3, #4
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001048:	2210      	movs	r2, #16
 800104a:	409a      	lsls	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d043      	beq.n	80010dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d03c      	beq.n	80010dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001066:	2210      	movs	r2, #16
 8001068:	409a      	lsls	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d018      	beq.n	80010ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d108      	bne.n	800109c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	2b00      	cmp	r3, #0
 8001090:	d024      	beq.n	80010dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4798      	blx	r3
 800109a:	e01f      	b.n	80010dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d01b      	beq.n	80010dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	4798      	blx	r3
 80010ac:	e016      	b.n	80010dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d107      	bne.n	80010cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0208 	bic.w	r2, r2, #8
 80010ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e0:	2220      	movs	r2, #32
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 808e 	beq.w	800120a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 8086 	beq.w	800120a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001102:	2220      	movs	r2, #32
 8001104:	409a      	lsls	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b05      	cmp	r3, #5
 8001114:	d136      	bne.n	8001184 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0216 	bic.w	r2, r2, #22
 8001124:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001134:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d103      	bne.n	8001146 <HAL_DMA_IRQHandler+0x1da>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0208 	bic.w	r2, r2, #8
 8001154:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115a:	223f      	movs	r2, #63	; 0x3f
 800115c:	409a      	lsls	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001176:	2b00      	cmp	r3, #0
 8001178:	d07d      	beq.n	8001276 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	4798      	blx	r3
        }
        return;
 8001182:	e078      	b.n	8001276 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01c      	beq.n	80011cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d108      	bne.n	80011b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d030      	beq.n	800120a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	4798      	blx	r3
 80011b0:	e02b      	b.n	800120a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d027      	beq.n	800120a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4798      	blx	r3
 80011c2:	e022      	b.n	800120a <HAL_DMA_IRQHandler+0x29e>
 80011c4:	20000088 	.word	0x20000088
 80011c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10f      	bne.n	80011fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0210 	bic.w	r2, r2, #16
 80011e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120e:	2b00      	cmp	r3, #0
 8001210:	d032      	beq.n	8001278 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d022      	beq.n	8001264 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2205      	movs	r2, #5
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3301      	adds	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	429a      	cmp	r2, r3
 8001240:	d307      	bcc.n	8001252 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f2      	bne.n	8001236 <HAL_DMA_IRQHandler+0x2ca>
 8001250:	e000      	b.n	8001254 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001252:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	4798      	blx	r3
 8001274:	e000      	b.n	8001278 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001276:	bf00      	nop
    }
  }
}
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop

08001280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800129c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b40      	cmp	r3, #64	; 0x40
 80012ac:	d108      	bne.n	80012c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80012be:	e007      	b.n	80012d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	60da      	str	r2, [r3, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	3b10      	subs	r3, #16
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <DMA_CalcBaseAndBitshift+0x64>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <DMA_CalcBaseAndBitshift+0x68>)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d909      	bls.n	800131e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001312:	f023 0303 	bic.w	r3, r3, #3
 8001316:	1d1a      	adds	r2, r3, #4
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	659a      	str	r2, [r3, #88]	; 0x58
 800131c:	e007      	b.n	800132e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001326:	f023 0303 	bic.w	r3, r3, #3
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	aaaaaaab 	.word	0xaaaaaaab
 8001344:	08008e00 	.word	0x08008e00

08001348 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d11f      	bne.n	80013a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d855      	bhi.n	8001414 <DMA_CheckFifoParam+0xcc>
 8001368:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <DMA_CheckFifoParam+0x28>)
 800136a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136e:	bf00      	nop
 8001370:	08001381 	.word	0x08001381
 8001374:	08001393 	.word	0x08001393
 8001378:	08001381 	.word	0x08001381
 800137c:	08001415 	.word	0x08001415
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d045      	beq.n	8001418 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001390:	e042      	b.n	8001418 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800139a:	d13f      	bne.n	800141c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013a0:	e03c      	b.n	800141c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013aa:	d121      	bne.n	80013f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d836      	bhi.n	8001420 <DMA_CheckFifoParam+0xd8>
 80013b2:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <DMA_CheckFifoParam+0x70>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	080013cf 	.word	0x080013cf
 80013c0:	080013c9 	.word	0x080013c9
 80013c4:	080013e1 	.word	0x080013e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
      break;
 80013cc:	e02f      	b.n	800142e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d024      	beq.n	8001424 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013de:	e021      	b.n	8001424 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013e8:	d11e      	bne.n	8001428 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013ee:	e01b      	b.n	8001428 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d902      	bls.n	80013fc <DMA_CheckFifoParam+0xb4>
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d003      	beq.n	8001402 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013fa:	e018      	b.n	800142e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001400:	e015      	b.n	800142e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00e      	beq.n	800142c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
      break;
 8001412:	e00b      	b.n	800142c <DMA_CheckFifoParam+0xe4>
      break;
 8001414:	bf00      	nop
 8001416:	e00a      	b.n	800142e <DMA_CheckFifoParam+0xe6>
      break;
 8001418:	bf00      	nop
 800141a:	e008      	b.n	800142e <DMA_CheckFifoParam+0xe6>
      break;
 800141c:	bf00      	nop
 800141e:	e006      	b.n	800142e <DMA_CheckFifoParam+0xe6>
      break;
 8001420:	bf00      	nop
 8001422:	e004      	b.n	800142e <DMA_CheckFifoParam+0xe6>
      break;
 8001424:	bf00      	nop
 8001426:	e002      	b.n	800142e <DMA_CheckFifoParam+0xe6>
      break;   
 8001428:	bf00      	nop
 800142a:	e000      	b.n	800142e <DMA_CheckFifoParam+0xe6>
      break;
 800142c:	bf00      	nop
    }
  } 
  
  return status; 
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_FLASH_Program+0xc0>)
 8001450:	7e1b      	ldrb	r3, [r3, #24]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_FLASH_Program+0x1e>
 8001456:	2302      	movs	r3, #2
 8001458:	e04b      	b.n	80014f2 <HAL_FLASH_Program+0xb6>
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_FLASH_Program+0xc0>)
 800145c:	2201      	movs	r2, #1
 800145e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00c      	beq.n	8001480 <HAL_FLASH_Program+0x44>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d009      	beq.n	8001480 <HAL_FLASH_Program+0x44>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d006      	beq.n	8001480 <HAL_FLASH_Program+0x44>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d003      	beq.n	8001480 <HAL_FLASH_Program+0x44>
 8001478:	21a4      	movs	r1, #164	; 0xa4
 800147a:	4821      	ldr	r0, [pc, #132]	; (8001500 <HAL_FLASH_Program+0xc4>)
 800147c:	f006 fa80 	bl	8007980 <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001480:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001484:	f000 f8b2 	bl	80015ec <FLASH_WaitForLastOperation>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d12b      	bne.n	80014ea <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d105      	bne.n	80014a4 <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001498:	783b      	ldrb	r3, [r7, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	68b8      	ldr	r0, [r7, #8]
 800149e:	f000 f9ad 	bl	80017fc <FLASH_Program_Byte>
 80014a2:	e016      	b.n	80014d2 <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80014aa:	883b      	ldrh	r3, [r7, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	68b8      	ldr	r0, [r7, #8]
 80014b0:	f000 f966 	bl	8001780 <FLASH_Program_HalfWord>
 80014b4:	e00d      	b.n	80014d2 <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d105      	bne.n	80014c8 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	68b8      	ldr	r0, [r7, #8]
 80014c2:	f000 f91f 	bl	8001704 <FLASH_Program_Word>
 80014c6:	e004      	b.n	80014d2 <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80014c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f000 f8cd 	bl	800166c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014d6:	f000 f889 	bl	80015ec <FLASH_WaitForLastOperation>
 80014da:	4603      	mov	r3, r0
 80014dc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_FLASH_Program+0xc8>)
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_FLASH_Program+0xc8>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_FLASH_Program+0xc0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	761a      	strb	r2, [r3, #24]
  
  return status;
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000290 	.word	0x20000290
 8001500:	08008a18 	.word	0x08008a18
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_FLASH_Unlock+0x38>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	da0b      	bge.n	8001532 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_FLASH_Unlock+0x38>)
 800151c:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_FLASH_Unlock+0x3c>)
 800151e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_FLASH_Unlock+0x38>)
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_FLASH_Unlock+0x40>)
 8001524:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_FLASH_Unlock+0x38>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b00      	cmp	r3, #0
 800152c:	da01      	bge.n	8001532 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001532:	79fb      	ldrb	r3, [r7, #7]
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40023c00 	.word	0x40023c00
 8001544:	45670123 	.word	0x45670123
 8001548:	cdef89ab 	.word	0xcdef89ab

0800154c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_FLASH_Lock+0x1c>)
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_FLASH_Lock+0x1c>)
 8001556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800155a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_FLASH_OB_Unlock+0x2c>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_FLASH_OB_Unlock+0x2c>)
 800157e:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_FLASH_OB_Unlock+0x30>)
 8001580:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_FLASH_OB_Unlock+0x2c>)
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_FLASH_OB_Unlock+0x34>)
 8001586:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001588:	2300      	movs	r3, #0
 800158a:	e000      	b.n	800158e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40023c00 	.word	0x40023c00
 800159c:	08192a3b 	.word	0x08192a3b
 80015a0:	4c5d6e7f 	.word	0x4c5d6e7f

080015a4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_FLASH_OB_Lock+0x1c>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_FLASH_OB_Lock+0x1c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_FLASH_OB_Launch+0x24>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_FLASH_OB_Launch+0x24>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 80015d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015dc:	f000 f806 	bl	80015ec <FLASH_WaitForLastOperation>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c14 	.word	0x40023c14

080015ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <FLASH_WaitForLastOperation+0x78>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80015fe:	f7ff f82d 	bl	800065c <HAL_GetTick>
 8001602:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001604:	e010      	b.n	8001628 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d00c      	beq.n	8001628 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <FLASH_WaitForLastOperation+0x38>
 8001614:	f7ff f822 	bl	800065c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	d201      	bcs.n	8001628 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e019      	b.n	800165c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <FLASH_WaitForLastOperation+0x7c>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e8      	bne.n	8001606 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <FLASH_WaitForLastOperation+0x7c>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <FLASH_WaitForLastOperation+0x7c>)
 8001642:	2201      	movs	r2, #1
 8001644:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <FLASH_WaitForLastOperation+0x7c>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001652:	f000 f90f 	bl	8001874 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
  
}  
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000290 	.word	0x20000290
 8001668:	40023c00 	.word	0x40023c00

0800166c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800167e:	d303      	bcc.n	8001688 <FLASH_Program_DoubleWord+0x1c>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <FLASH_Program_DoubleWord+0x84>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d90c      	bls.n	80016a2 <FLASH_Program_DoubleWord+0x36>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <FLASH_Program_DoubleWord+0x88>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d903      	bls.n	8001698 <FLASH_Program_DoubleWord+0x2c>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <FLASH_Program_DoubleWord+0x8c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d904      	bls.n	80016a2 <FLASH_Program_DoubleWord+0x36>
 8001698:	f240 2167 	movw	r1, #615	; 0x267
 800169c:	4817      	ldr	r0, [pc, #92]	; (80016fc <FLASH_Program_DoubleWord+0x90>)
 800169e:	f006 f96f 	bl	8007980 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <FLASH_Program_DoubleWord+0x94>)
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <FLASH_Program_DoubleWord+0x94>)
 80016a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <FLASH_Program_DoubleWord+0x94>)
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <FLASH_Program_DoubleWord+0x94>)
 80016b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <FLASH_Program_DoubleWord+0x94>)
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <FLASH_Program_DoubleWord+0x94>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80016d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	f04f 0400 	mov.w	r4, #0
 80016dc:	0013      	movs	r3, r2
 80016de:	2400      	movs	r4, #0
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	3204      	adds	r2, #4
 80016e4:	6013      	str	r3, [r2, #0]
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0807ffff 	.word	0x0807ffff
 80016f4:	1fff77ff 	.word	0x1fff77ff
 80016f8:	1fff7a0f 	.word	0x1fff7a0f
 80016fc:	08008a18 	.word	0x08008a18
 8001700:	40023c00 	.word	0x40023c00

08001704 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001714:	d303      	bcc.n	800171e <FLASH_Program_Word+0x1a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <FLASH_Program_Word+0x68>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d90c      	bls.n	8001738 <FLASH_Program_Word+0x34>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <FLASH_Program_Word+0x6c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d903      	bls.n	800172e <FLASH_Program_Word+0x2a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <FLASH_Program_Word+0x70>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d904      	bls.n	8001738 <FLASH_Program_Word+0x34>
 800172e:	f240 2189 	movw	r1, #649	; 0x289
 8001732:	4811      	ldr	r0, [pc, #68]	; (8001778 <FLASH_Program_Word+0x74>)
 8001734:	f006 f924 	bl	8007980 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <FLASH_Program_Word+0x78>)
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	4a0f      	ldr	r2, [pc, #60]	; (800177c <FLASH_Program_Word+0x78>)
 800173e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001742:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <FLASH_Program_Word+0x78>)
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <FLASH_Program_Word+0x78>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <FLASH_Program_Word+0x78>)
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	4a09      	ldr	r2, [pc, #36]	; (800177c <FLASH_Program_Word+0x78>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	601a      	str	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	0807ffff 	.word	0x0807ffff
 8001770:	1fff77ff 	.word	0x1fff77ff
 8001774:	1fff7a0f 	.word	0x1fff7a0f
 8001778:	08008a18 	.word	0x08008a18
 800177c:	40023c00 	.word	0x40023c00

08001780 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001792:	d303      	bcc.n	800179c <FLASH_Program_HalfWord+0x1c>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <FLASH_Program_HalfWord+0x68>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d90c      	bls.n	80017b6 <FLASH_Program_HalfWord+0x36>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <FLASH_Program_HalfWord+0x6c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d903      	bls.n	80017ac <FLASH_Program_HalfWord+0x2c>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <FLASH_Program_HalfWord+0x70>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d904      	bls.n	80017b6 <FLASH_Program_HalfWord+0x36>
 80017ac:	f240 21a2 	movw	r1, #674	; 0x2a2
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <FLASH_Program_HalfWord+0x74>)
 80017b2:	f006 f8e5 	bl	8007980 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <FLASH_Program_HalfWord+0x78>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <FLASH_Program_HalfWord+0x78>)
 80017bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <FLASH_Program_HalfWord+0x78>)
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <FLASH_Program_HalfWord+0x78>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <FLASH_Program_HalfWord+0x78>)
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <FLASH_Program_HalfWord+0x78>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	801a      	strh	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	0807ffff 	.word	0x0807ffff
 80017ec:	1fff77ff 	.word	0x1fff77ff
 80017f0:	1fff7a0f 	.word	0x1fff7a0f
 80017f4:	08008a18 	.word	0x08008a18
 80017f8:	40023c00 	.word	0x40023c00

080017fc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800180e:	d303      	bcc.n	8001818 <FLASH_Program_Byte+0x1c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a13      	ldr	r2, [pc, #76]	; (8001860 <FLASH_Program_Byte+0x64>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d90c      	bls.n	8001832 <FLASH_Program_Byte+0x36>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <FLASH_Program_Byte+0x68>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d903      	bls.n	8001828 <FLASH_Program_Byte+0x2c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a11      	ldr	r2, [pc, #68]	; (8001868 <FLASH_Program_Byte+0x6c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d904      	bls.n	8001832 <FLASH_Program_Byte+0x36>
 8001828:	f240 21bb 	movw	r1, #699	; 0x2bb
 800182c:	480f      	ldr	r0, [pc, #60]	; (800186c <FLASH_Program_Byte+0x70>)
 800182e:	f006 f8a7 	bl	8007980 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <FLASH_Program_Byte+0x74>)
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <FLASH_Program_Byte+0x74>)
 8001838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800183c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <FLASH_Program_Byte+0x74>)
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <FLASH_Program_Byte+0x74>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <FLASH_Program_Byte+0x74>)
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <FLASH_Program_Byte+0x74>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	701a      	strb	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	0807ffff 	.word	0x0807ffff
 8001864:	1fff77ff 	.word	0x1fff77ff
 8001868:	1fff7a0f 	.word	0x1fff7a0f
 800186c:	08008a18 	.word	0x08008a18
 8001870:	40023c00 	.word	0x40023c00

08001874 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <FLASH_SetErrorCode+0xc8>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	4a2b      	ldr	r2, [pc, #172]	; (800193c <FLASH_SetErrorCode+0xc8>)
 800188e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 8001892:	2210      	movs	r2, #16
 8001894:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d008      	beq.n	80018b4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <FLASH_SetErrorCode+0xc8>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	4a24      	ldr	r2, [pc, #144]	; (800193c <FLASH_SetErrorCode+0xc8>)
 80018ac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 80018b0:	2220      	movs	r2, #32
 80018b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80018b4:	4b20      	ldr	r3, [pc, #128]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <FLASH_SetErrorCode+0xc8>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <FLASH_SetErrorCode+0xc8>)
 80018ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <FLASH_SetErrorCode+0xc8>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <FLASH_SetErrorCode+0xc8>)
 80018e8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <FLASH_SetErrorCode+0xc8>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <FLASH_SetErrorCode+0xc8>)
 8001906:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 800190a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <FLASH_SetErrorCode+0xc8>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	f043 0320 	orr.w	r3, r3, #32
 8001924:	4a05      	ldr	r2, [pc, #20]	; (800193c <FLASH_SetErrorCode+0xc8>)
 8001926:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <FLASH_SetErrorCode+0xc4>)
 800192a:	2202      	movs	r2, #2
 800192c:	60da      	str	r2, [r3, #12]
  }
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40023c00 	.word	0x40023c00
 800193c:	20000290 	.word	0x20000290

08001940 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800194c:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_FLASHEx_OBProgram+0x104>)
 800194e:	7e1b      	ldrb	r3, [r3, #24]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_FLASHEx_OBProgram+0x18>
 8001954:	2302      	movs	r3, #2
 8001956:	e071      	b.n	8001a3c <HAL_FLASHEx_OBProgram+0xfc>
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_FLASHEx_OBProgram+0x104>)
 800195a:	2201      	movs	r2, #1
 800195c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	d904      	bls.n	8001970 <HAL_FLASHEx_OBProgram+0x30>
 8001966:	f44f 7193 	mov.w	r1, #294	; 0x126
 800196a:	4837      	ldr	r0, [pc, #220]	; (8001a48 <HAL_FLASHEx_OBProgram+0x108>)
 800196c:	f006 f808 	bl	8007980 <assert_failed>

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d025      	beq.n	80019c8 <HAL_FLASHEx_OBProgram+0x88>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_FLASHEx_OBProgram+0x56>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d004      	beq.n	8001996 <HAL_FLASHEx_OBProgram+0x56>
 800198c:	f240 112b 	movw	r1, #299	; 0x12b
 8001990:	482d      	ldr	r0, [pc, #180]	; (8001a48 <HAL_FLASHEx_OBProgram+0x108>)
 8001992:	f005 fff5 	bl	8007980 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d10a      	bne.n	80019b4 <HAL_FLASHEx_OBProgram+0x74>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4619      	mov	r1, r3
 80019a8:	4610      	mov	r0, r2
 80019aa:	f000 f8e9 	bl	8001b80 <FLASH_OB_EnableWRP>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e009      	b.n	80019c8 <HAL_FLASHEx_OBProgram+0x88>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 f91a 	bl	8001bf8 <FLASH_OB_DisableWRP>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <HAL_FLASHEx_OBProgram+0xa4>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f946 	bl	8001c6c <FLASH_OB_RDP_LevelConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_FLASHEx_OBProgram+0xd8>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7e1b      	ldrb	r3, [r3, #24]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80019fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a02:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f000 f956 	bl	8001cc0 <FLASH_OB_UserConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_FLASHEx_OBProgram+0xf4>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f99a 	bl	8001d64 <FLASH_OB_BOR_LevelConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_FLASHEx_OBProgram+0x104>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	761a      	strb	r2, [r3, #24]

  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000290 	.word	0x20000290
 8001a48:	08008a54 	.word	0x08008a54

08001a4c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	220f      	movs	r2, #15
 8001a58:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001a5a:	f000 f9c3 	bl	8001de4 <FLASH_OB_GetWRP>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001a66:	f000 f9c9 	bl	8001dfc <FLASH_OB_GetRDP>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001a72:	f000 f9a7 	bl	8001dc4 <FLASH_OB_GetUser>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001a7e:	f000 f9dd 	bl	8001e3c <FLASH_OB_GetBOR>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	615a      	str	r2, [r3, #20]
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d019      	beq.n	8001ade <FLASH_Erase_Sector+0x4a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d016      	beq.n	8001ade <FLASH_Erase_Sector+0x4a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d013      	beq.n	8001ade <FLASH_Erase_Sector+0x4a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d010      	beq.n	8001ade <FLASH_Erase_Sector+0x4a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d00d      	beq.n	8001ade <FLASH_Erase_Sector+0x4a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d00a      	beq.n	8001ade <FLASH_Erase_Sector+0x4a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d007      	beq.n	8001ade <FLASH_Erase_Sector+0x4a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b07      	cmp	r3, #7
 8001ad2:	d004      	beq.n	8001ade <FLASH_Erase_Sector+0x4a>
 8001ad4:	f240 31db 	movw	r1, #987	; 0x3db
 8001ad8:	4827      	ldr	r0, [pc, #156]	; (8001b78 <FLASH_Erase_Sector+0xe4>)
 8001ada:	f005 ff51 	bl	8007980 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00d      	beq.n	8001b00 <FLASH_Erase_Sector+0x6c>
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d00a      	beq.n	8001b00 <FLASH_Erase_Sector+0x6c>
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d007      	beq.n	8001b00 <FLASH_Erase_Sector+0x6c>
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d004      	beq.n	8001b00 <FLASH_Erase_Sector+0x6c>
 8001af6:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8001afa:	481f      	ldr	r0, [pc, #124]	; (8001b78 <FLASH_Erase_Sector+0xe4>)
 8001afc:	f005 ff40 	bl	8007980 <assert_failed>
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <FLASH_Erase_Sector+0x78>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e010      	b.n	8001b2e <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d103      	bne.n	8001b1a <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e009      	b.n	8001b2e <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d103      	bne.n	8001b28 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e002      	b.n	8001b2e <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001b28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	490f      	ldr	r1, [pc, #60]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <FLASH_Erase_Sector+0xe8>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6e:	6113      	str	r3, [r2, #16]
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	08008a54 	.word	0x08008a54
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001b94:	f023 030f 	bic.w	r3, r3, #15
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <FLASH_OB_EnableWRP+0x22>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d104      	bne.n	8001bac <FLASH_OB_EnableWRP+0x2c>
 8001ba2:	f240 410d 	movw	r1, #1037	; 0x40d
 8001ba6:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <FLASH_OB_EnableWRP+0x70>)
 8001ba8:	f005 feea 	bl	8007980 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d004      	beq.n	8001bbc <FLASH_OB_EnableWRP+0x3c>
 8001bb2:	f240 410e 	movw	r1, #1038	; 0x40e
 8001bb6:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <FLASH_OB_EnableWRP+0x70>)
 8001bb8:	f005 fee2 	bl	8007980 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bc0:	f7ff fd14 	bl	80015ec <FLASH_WaitForLastOperation>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10a      	bne.n	8001be4 <FLASH_OB_EnableWRP+0x64>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <FLASH_OB_EnableWRP+0x74>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4905      	ldr	r1, [pc, #20]	; (8001bf4 <FLASH_OB_EnableWRP+0x74>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08008a54 	.word	0x08008a54
 8001bf4:	40023c16 	.word	0x40023c16

08001bf8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001c0c:	f023 030f 	bic.w	r3, r3, #15
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <FLASH_OB_DisableWRP+0x22>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d104      	bne.n	8001c24 <FLASH_OB_DisableWRP+0x2c>
 8001c1a:	f240 4131 	movw	r1, #1073	; 0x431
 8001c1e:	4811      	ldr	r0, [pc, #68]	; (8001c64 <FLASH_OB_DisableWRP+0x6c>)
 8001c20:	f005 feae 	bl	8007980 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d004      	beq.n	8001c34 <FLASH_OB_DisableWRP+0x3c>
 8001c2a:	f240 4132 	movw	r1, #1074	; 0x432
 8001c2e:	480d      	ldr	r0, [pc, #52]	; (8001c64 <FLASH_OB_DisableWRP+0x6c>)
 8001c30:	f005 fea6 	bl	8007980 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c38:	f7ff fcd8 	bl	80015ec <FLASH_WaitForLastOperation>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <FLASH_OB_DisableWRP+0x60>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <FLASH_OB_DisableWRP+0x70>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4905      	ldr	r1, [pc, #20]	; (8001c68 <FLASH_OB_DisableWRP+0x70>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	08008a54 	.word	0x08008a54
 8001c68:	40023c16 	.word	0x40023c16

08001c6c <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2baa      	cmp	r3, #170	; 0xaa
 8001c7e:	d00a      	beq.n	8001c96 <FLASH_OB_RDP_LevelConfig+0x2a>
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	2b55      	cmp	r3, #85	; 0x55
 8001c84:	d007      	beq.n	8001c96 <FLASH_OB_RDP_LevelConfig+0x2a>
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2bcc      	cmp	r3, #204	; 0xcc
 8001c8a:	d004      	beq.n	8001c96 <FLASH_OB_RDP_LevelConfig+0x2a>
 8001c8c:	f240 418f 	movw	r1, #1167	; 0x48f
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <FLASH_OB_RDP_LevelConfig+0x4c>)
 8001c92:	f005 fe75 	bl	8007980 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c9a:	f7ff fca7 	bl	80015ec <FLASH_WaitForLastOperation>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <FLASH_OB_RDP_LevelConfig+0x42>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <FLASH_OB_RDP_LevelConfig+0x50>)
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	08008a54 	.word	0x08008a54
 8001cbc:	40023c15 	.word	0x40023c15

08001cc0 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	71bb      	strb	r3, [r7, #6]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8001cd2:	23ff      	movs	r3, #255	; 0xff
 8001cd4:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d007      	beq.n	8001cf0 <FLASH_OB_UserConfig+0x30>
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <FLASH_OB_UserConfig+0x30>
 8001ce6:	f240 41b2 	movw	r1, #1202	; 0x4b2
 8001cea:	481c      	ldr	r0, [pc, #112]	; (8001d5c <FLASH_OB_UserConfig+0x9c>)
 8001cec:	f005 fe48 	bl	8007980 <assert_failed>
  assert_param(IS_OB_STOP_SOURCE(Stop));
 8001cf0:	79bb      	ldrb	r3, [r7, #6]
 8001cf2:	2b40      	cmp	r3, #64	; 0x40
 8001cf4:	d007      	beq.n	8001d06 <FLASH_OB_UserConfig+0x46>
 8001cf6:	79bb      	ldrb	r3, [r7, #6]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <FLASH_OB_UserConfig+0x46>
 8001cfc:	f240 41b3 	movw	r1, #1203	; 0x4b3
 8001d00:	4816      	ldr	r0, [pc, #88]	; (8001d5c <FLASH_OB_UserConfig+0x9c>)
 8001d02:	f005 fe3d 	bl	8007980 <assert_failed>
  assert_param(IS_OB_STDBY_SOURCE(Stdby));
 8001d06:	797b      	ldrb	r3, [r7, #5]
 8001d08:	2b80      	cmp	r3, #128	; 0x80
 8001d0a:	d007      	beq.n	8001d1c <FLASH_OB_UserConfig+0x5c>
 8001d0c:	797b      	ldrb	r3, [r7, #5]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <FLASH_OB_UserConfig+0x5c>
 8001d12:	f240 41b4 	movw	r1, #1204	; 0x4b4
 8001d16:	4811      	ldr	r0, [pc, #68]	; (8001d5c <FLASH_OB_UserConfig+0x9c>)
 8001d18:	f005 fe32 	bl	8007980 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d20:	f7ff fc64 	bl	80015ec <FLASH_WaitForLastOperation>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d111      	bne.n	8001d52 <FLASH_OB_UserConfig+0x92>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <FLASH_OB_UserConfig+0xa0>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8001d3a:	79ba      	ldrb	r2, [r7, #6]
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	797b      	ldrb	r3, [r7, #5]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4905      	ldr	r1, [pc, #20]	; (8001d60 <FLASH_OB_UserConfig+0xa0>)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	08008a54 	.word	0x08008a54
 8001d60:	40023c14 	.word	0x40023c14

08001d64 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d00d      	beq.n	8001d90 <FLASH_OB_BOR_LevelConfig+0x2c>
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d00a      	beq.n	8001d90 <FLASH_OB_BOR_LevelConfig+0x2c>
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <FLASH_OB_BOR_LevelConfig+0x2c>
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d004      	beq.n	8001d90 <FLASH_OB_BOR_LevelConfig+0x2c>
 8001d86:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <FLASH_OB_BOR_LevelConfig+0x58>)
 8001d8c:	f005 fdf8 	bl	8007980 <assert_failed>

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <FLASH_OB_BOR_LevelConfig+0x5c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <FLASH_OB_BOR_LevelConfig+0x5c>)
 8001d98:	f023 030c 	bic.w	r3, r3, #12
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <FLASH_OB_BOR_LevelConfig+0x5c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <FLASH_OB_BOR_LevelConfig+0x5c>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
  
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	08008a54 	.word	0x08008a54
 8001dc0:	40023c14 	.word	0x40023c14

08001dc4 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <FLASH_OB_GetUser+0x1c>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f023 031f 	bic.w	r3, r3, #31
 8001dd2:	b2db      	uxtb	r3, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023c00 	.word	0x40023c00

08001de4 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <FLASH_OB_GetWRP+0x14>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40023c16 	.word	0x40023c16

08001dfc <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001e02:	23aa      	movs	r3, #170	; 0xaa
 8001e04:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <FLASH_OB_GetRDP+0x3c>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2bcc      	cmp	r3, #204	; 0xcc
 8001e0e:	d102      	bne.n	8001e16 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001e10:	23cc      	movs	r3, #204	; 0xcc
 8001e12:	71fb      	strb	r3, [r7, #7]
 8001e14:	e009      	b.n	8001e2a <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <FLASH_OB_GetRDP+0x3c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2baa      	cmp	r3, #170	; 0xaa
 8001e1e:	d102      	bne.n	8001e26 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001e20:	23aa      	movs	r3, #170	; 0xaa
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	e001      	b.n	8001e2a <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8001e26:	2355      	movs	r3, #85	; 0x55
 8001e28:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40023c15 	.word	0x40023c15

08001e3c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <FLASH_OB_GetBOR+0x1c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	b2db      	uxtb	r3, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023c14 	.word	0x40023c14

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a3b      	ldr	r2, [pc, #236]	; (8001f64 <HAL_GPIO_Init+0x108>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d017      	beq.n	8001eaa <HAL_GPIO_Init+0x4e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a3a      	ldr	r2, [pc, #232]	; (8001f68 <HAL_GPIO_Init+0x10c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0x4e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a39      	ldr	r2, [pc, #228]	; (8001f6c <HAL_GPIO_Init+0x110>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00f      	beq.n	8001eaa <HAL_GPIO_Init+0x4e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_GPIO_Init+0x114>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00b      	beq.n	8001eaa <HAL_GPIO_Init+0x4e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a37      	ldr	r2, [pc, #220]	; (8001f74 <HAL_GPIO_Init+0x118>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x4e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a36      	ldr	r2, [pc, #216]	; (8001f78 <HAL_GPIO_Init+0x11c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x4e>
 8001ea2:	21b3      	movs	r1, #179	; 0xb3
 8001ea4:	4835      	ldr	r0, [pc, #212]	; (8001f7c <HAL_GPIO_Init+0x120>)
 8001ea6:	f005 fd6b 	bl	8007980 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_GPIO_Init+0x64>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x6c>
 8001ec0:	21b4      	movs	r1, #180	; 0xb4
 8001ec2:	482e      	ldr	r0, [pc, #184]	; (8001f7c <HAL_GPIO_Init+0x120>)
 8001ec4:	f005 fd5c 	bl	8007980 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d035      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d031      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b11      	cmp	r3, #17
 8001ede:	d02d      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d029      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b12      	cmp	r3, #18
 8001eee:	d025      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <HAL_GPIO_Init+0x124>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d020      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <HAL_GPIO_Init+0x128>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d01b      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_GPIO_Init+0x12c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d016      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_GPIO_Init+0x130>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d011      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_GPIO_Init+0x134>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00c      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_GPIO_Init+0x138>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d007      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0xe0>
 8001f34:	21b5      	movs	r1, #181	; 0xb5
 8001f36:	4811      	ldr	r0, [pc, #68]	; (8001f7c <HAL_GPIO_Init+0x120>)
 8001f38:	f005 fd22 	bl	8007980 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_GPIO_Init+0x100>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d007      	beq.n	8001f5c <HAL_GPIO_Init+0x100>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x100>
 8001f54:	21b6      	movs	r1, #182	; 0xb6
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <HAL_GPIO_Init+0x120>)
 8001f58:	f005 fd12 	bl	8007980 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	e211      	b.n	8002386 <HAL_GPIO_Init+0x52a>
 8001f62:	bf00      	nop
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40021c00 	.word	0x40021c00
 8001f7c:	08008a94 	.word	0x08008a94
 8001f80:	10110000 	.word	0x10110000
 8001f84:	10210000 	.word	0x10210000
 8001f88:	10310000 	.word	0x10310000
 8001f8c:	10120000 	.word	0x10120000
 8001f90:	10220000 	.word	0x10220000
 8001f94:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 81e5 	bne.w	8002380 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_GPIO_Init+0x17a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fca:	2b11      	cmp	r3, #17
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d144      	bne.n	8002060 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00f      	beq.n	8001ffe <HAL_GPIO_Init+0x1a2>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d00b      	beq.n	8001ffe <HAL_GPIO_Init+0x1a2>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x1a2>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x1a2>
 8001ff6:	21c8      	movs	r1, #200	; 0xc8
 8001ff8:	489f      	ldr	r0, [pc, #636]	; (8002278 <HAL_GPIO_Init+0x41c>)
 8001ffa:	f005 fcc1 	bl	8007980 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 0201 	and.w	r2, r3, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d004      	beq.n	80020a2 <HAL_GPIO_Init+0x246>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b12      	cmp	r3, #18
 800209e:	f040 80a0 	bne.w	80021e2 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d077      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b09      	cmp	r3, #9
 80020b0:	d073      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d06f      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d06b      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d067      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d05f      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d05b      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d057      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d053      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d04f      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d04b      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b04      	cmp	r3, #4
 8002108:	d047      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b04      	cmp	r3, #4
 8002110:	d043      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d03f      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d03b      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b05      	cmp	r3, #5
 8002128:	d037      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d033      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b06      	cmp	r3, #6
 8002138:	d02f      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b05      	cmp	r3, #5
 8002140:	d02b      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b06      	cmp	r3, #6
 8002148:	d027      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b07      	cmp	r3, #7
 8002150:	d023      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b07      	cmp	r3, #7
 8002158:	d01f      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b07      	cmp	r3, #7
 8002160:	d01b      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b08      	cmp	r3, #8
 8002168:	d017      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b0a      	cmp	r3, #10
 8002170:	d013      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b09      	cmp	r3, #9
 8002178:	d00f      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b09      	cmp	r3, #9
 8002180:	d00b      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x33e>
 8002192:	21e0      	movs	r1, #224	; 0xe0
 8002194:	4838      	ldr	r0, [pc, #224]	; (8002278 <HAL_GPIO_Init+0x41c>)
 8002196:	f005 fbf3 	bl	8007980 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80ae 	beq.w	8002380 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_GPIO_Init+0x420>)
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_GPIO_Init+0x420>)
 800222e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002232:	6453      	str	r3, [r2, #68]	; 0x44
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_GPIO_Init+0x420>)
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <HAL_GPIO_Init+0x424>)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_GPIO_Init+0x428>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d025      	beq.n	80022b8 <HAL_GPIO_Init+0x45c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a06      	ldr	r2, [pc, #24]	; (8002288 <HAL_GPIO_Init+0x42c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d01f      	beq.n	80022b4 <HAL_GPIO_Init+0x458>
 8002274:	e00a      	b.n	800228c <HAL_GPIO_Init+0x430>
 8002276:	bf00      	nop
 8002278:	08008a94 	.word	0x08008a94
 800227c:	40023800 	.word	0x40023800
 8002280:	40013800 	.word	0x40013800
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a42      	ldr	r2, [pc, #264]	; (8002398 <HAL_GPIO_Init+0x53c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00d      	beq.n	80022b0 <HAL_GPIO_Init+0x454>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a41      	ldr	r2, [pc, #260]	; (800239c <HAL_GPIO_Init+0x540>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <HAL_GPIO_Init+0x450>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a40      	ldr	r2, [pc, #256]	; (80023a0 <HAL_GPIO_Init+0x544>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_GPIO_Init+0x44c>
 80022a4:	2304      	movs	r3, #4
 80022a6:	e008      	b.n	80022ba <HAL_GPIO_Init+0x45e>
 80022a8:	2307      	movs	r3, #7
 80022aa:	e006      	b.n	80022ba <HAL_GPIO_Init+0x45e>
 80022ac:	2303      	movs	r3, #3
 80022ae:	e004      	b.n	80022ba <HAL_GPIO_Init+0x45e>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e002      	b.n	80022ba <HAL_GPIO_Init+0x45e>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_GPIO_Init+0x45e>
 80022b8:	2300      	movs	r3, #0
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	f002 0203 	and.w	r2, r2, #3
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	4093      	lsls	r3, r2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ca:	4936      	ldr	r1, [pc, #216]	; (80023a4 <HAL_GPIO_Init+0x548>)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d8:	4b33      	ldr	r3, [pc, #204]	; (80023a8 <HAL_GPIO_Init+0x54c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022fc:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <HAL_GPIO_Init+0x54c>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_GPIO_Init+0x54c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_GPIO_Init+0x54c>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_GPIO_Init+0x54c>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_GPIO_Init+0x54c>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_GPIO_Init+0x54c>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_GPIO_Init+0x54c>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	3301      	adds	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	f67f ae05 	bls.w	8001f98 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 800238e:	bf00      	nop
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40013800 	.word	0x40013800
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_GPIO_WritePin+0x20>
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <HAL_GPIO_WritePin+0x2a>
 80023cc:	f240 119f 	movw	r1, #415	; 0x19f
 80023d0:	480e      	ldr	r0, [pc, #56]	; (800240c <HAL_GPIO_WritePin+0x60>)
 80023d2:	f005 fad5 	bl	8007980 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80023d6:	787b      	ldrb	r3, [r7, #1]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_GPIO_WritePin+0x40>
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d004      	beq.n	80023ec <HAL_GPIO_WritePin+0x40>
 80023e2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80023e6:	4809      	ldr	r0, [pc, #36]	; (800240c <HAL_GPIO_WritePin+0x60>)
 80023e8:	f005 faca 	bl	8007980 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f8:	e003      	b.n	8002402 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	08008a94 	.word	0x08008a94

08002410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e30d      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d903      	bls.n	8002432 <HAL_RCC_OscConfig+0x22>
 800242a:	21e8      	movs	r1, #232	; 0xe8
 800242c:	48a3      	ldr	r0, [pc, #652]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 800242e:	f005 faa7 	bl	8007980 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8088 	beq.w	8002550 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <HAL_RCC_OscConfig+0x54>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d008      	beq.n	8002464 <HAL_RCC_OscConfig+0x54>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245a:	d003      	beq.n	8002464 <HAL_RCC_OscConfig+0x54>
 800245c:	21ed      	movs	r1, #237	; 0xed
 800245e:	4897      	ldr	r0, [pc, #604]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002460:	f005 fa8e 	bl	8007980 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002464:	4b96      	ldr	r3, [pc, #600]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b04      	cmp	r3, #4
 800246e:	d00c      	beq.n	800248a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002470:	4b93      	ldr	r3, [pc, #588]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002478:	2b08      	cmp	r3, #8
 800247a:	d112      	bne.n	80024a2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247c:	4b90      	ldr	r3, [pc, #576]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002488:	d10b      	bne.n	80024a2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248a:	4b8d      	ldr	r3, [pc, #564]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d05b      	beq.n	800254e <HAL_RCC_OscConfig+0x13e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d157      	bne.n	800254e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e2cd      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0xaa>
 80024ac:	4b84      	ldr	r3, [pc, #528]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a83      	ldr	r2, [pc, #524]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	e01d      	b.n	80024f6 <HAL_RCC_OscConfig+0xe6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c2:	d10c      	bne.n	80024de <HAL_RCC_OscConfig+0xce>
 80024c4:	4b7e      	ldr	r3, [pc, #504]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a7d      	ldr	r2, [pc, #500]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a7a      	ldr	r2, [pc, #488]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	e00b      	b.n	80024f6 <HAL_RCC_OscConfig+0xe6>
 80024de:	4b78      	ldr	r3, [pc, #480]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a77      	ldr	r2, [pc, #476]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b75      	ldr	r3, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a74      	ldr	r2, [pc, #464]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80024f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d013      	beq.n	8002526 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7fe f8ad 	bl	800065c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002506:	f7fe f8a9 	bl	800065c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	; 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e292      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002518:	4b69      	ldr	r3, [pc, #420]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0xf6>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7fe f899 	bl	800065c <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252e:	f7fe f895 	bl	800065c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e27e      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002540:	4b5f      	ldr	r3, [pc, #380]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x11e>
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d079      	beq.n	8002650 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_OscConfig+0x166>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d004      	beq.n	8002576 <HAL_RCC_OscConfig+0x166>
 800256c:	f240 111f 	movw	r1, #287	; 0x11f
 8002570:	4852      	ldr	r0, [pc, #328]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002572:	f005 fa05 	bl	8007980 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b1f      	cmp	r3, #31
 800257c:	d904      	bls.n	8002588 <HAL_RCC_OscConfig+0x178>
 800257e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002582:	484e      	ldr	r0, [pc, #312]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002584:	f005 f9fc 	bl	8007980 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002588:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00b      	beq.n	80025ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002594:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259c:	2b08      	cmp	r3, #8
 800259e:	d11c      	bne.n	80025da <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a0:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d116      	bne.n	80025da <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ac:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e23c      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	493b      	ldr	r1, [pc, #236]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d8:	e03a      	b.n	8002650 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d020      	beq.n	8002624 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e2:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <HAL_RCC_OscConfig+0x2b4>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe f838 	bl	800065c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f0:	f7fe f834 	bl	800065c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e21d      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002602:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4928      	ldr	r1, [pc, #160]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
 8002622:	e015      	b.n	8002650 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_RCC_OscConfig+0x2b4>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe f817 	bl	800065c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7fe f813 	bl	800065c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1fc      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d046      	beq.n	80026ea <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_OscConfig+0x266>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d004      	beq.n	8002676 <HAL_RCC_OscConfig+0x266>
 800266c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002670:	4812      	ldr	r0, [pc, #72]	; (80026bc <HAL_RCC_OscConfig+0x2ac>)
 8002672:	f005 f985 	bl	8007980 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_OscConfig+0x2b8>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7fd ffea 	bl	800065c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268c:	f7fd ffe6 	bl	800065c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1cf      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCC_OscConfig+0x2b0>)
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x27c>
 80026aa:	e01e      	b.n	80026ea <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x2b8>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fd ffd3 	bl	800065c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	e011      	b.n	80026de <HAL_RCC_OscConfig+0x2ce>
 80026ba:	bf00      	nop
 80026bc:	08008ad0 	.word	0x08008ad0
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fd ffc6 	bl	800065c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1af      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026de:	4b97      	ldr	r3, [pc, #604]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80a8 	beq.w	8002848 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f8:	2300      	movs	r3, #0
 80026fa:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00c      	beq.n	800271e <HAL_RCC_OscConfig+0x30e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d008      	beq.n	800271e <HAL_RCC_OscConfig+0x30e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b05      	cmp	r3, #5
 8002712:	d004      	beq.n	800271e <HAL_RCC_OscConfig+0x30e>
 8002714:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002718:	4889      	ldr	r0, [pc, #548]	; (8002940 <HAL_RCC_OscConfig+0x530>)
 800271a:	f005 f931 	bl	8007980 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271e:	4b87      	ldr	r3, [pc, #540]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b83      	ldr	r3, [pc, #524]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a82      	ldr	r2, [pc, #520]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b80      	ldr	r3, [pc, #512]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <HAL_RCC_OscConfig+0x534>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d118      	bne.n	8002788 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b7b      	ldr	r3, [pc, #492]	; (8002944 <HAL_RCC_OscConfig+0x534>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7a      	ldr	r2, [pc, #488]	; (8002944 <HAL_RCC_OscConfig+0x534>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fd ff7b 	bl	800065c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fd ff77 	bl	800065c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e160      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b71      	ldr	r3, [pc, #452]	; (8002944 <HAL_RCC_OscConfig+0x534>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x38e>
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	; 0x70
 800279c:	e01c      	b.n	80027d8 <HAL_RCC_OscConfig+0x3c8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x3b0>
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a64      	ldr	r2, [pc, #400]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	4b62      	ldr	r3, [pc, #392]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a61      	ldr	r2, [pc, #388]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0x3c8>
 80027c0:	4b5e      	ldr	r3, [pc, #376]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a5d      	ldr	r2, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b5b      	ldr	r3, [pc, #364]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a5a      	ldr	r2, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d015      	beq.n	800280c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fd ff3c 	bl	800065c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fd ff38 	bl	800065c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e11f      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	4b4f      	ldr	r3, [pc, #316]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ee      	beq.n	80027e8 <HAL_RCC_OscConfig+0x3d8>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280c:	f7fd ff26 	bl	800065c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fd ff22 	bl	800065c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e109      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282a:	4b44      	ldr	r3, [pc, #272]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ee      	bne.n	8002814 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283c:	4b3f      	ldr	r3, [pc, #252]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a3e      	ldr	r2, [pc, #248]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00c      	beq.n	800286a <HAL_RCC_OscConfig+0x45a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d008      	beq.n	800286a <HAL_RCC_OscConfig+0x45a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d004      	beq.n	800286a <HAL_RCC_OscConfig+0x45a>
 8002860:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002864:	4836      	ldr	r0, [pc, #216]	; (8002940 <HAL_RCC_OscConfig+0x530>)
 8002866:	f005 f88b 	bl	8007980 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80e4 	beq.w	8002a3c <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_RCC_OscConfig+0x52c>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	f000 80ae 	beq.w	80029de <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b02      	cmp	r3, #2
 8002888:	f040 8092 	bne.w	80029b0 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <HAL_RCC_OscConfig+0x498>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289c:	d004      	beq.n	80028a8 <HAL_RCC_OscConfig+0x498>
 800289e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80028a2:	4827      	ldr	r0, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x530>)
 80028a4:	f005 f86c 	bl	8007980 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	2b3f      	cmp	r3, #63	; 0x3f
 80028ae:	d904      	bls.n	80028ba <HAL_RCC_OscConfig+0x4aa>
 80028b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80028b4:	4822      	ldr	r0, [pc, #136]	; (8002940 <HAL_RCC_OscConfig+0x530>)
 80028b6:	f005 f863 	bl	8007980 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	2bbf      	cmp	r3, #191	; 0xbf
 80028c0:	d904      	bls.n	80028cc <HAL_RCC_OscConfig+0x4bc>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80028ca:	d904      	bls.n	80028d6 <HAL_RCC_OscConfig+0x4c6>
 80028cc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80028d0:	481b      	ldr	r0, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x530>)
 80028d2:	f005 f855 	bl	8007980 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_OscConfig+0x4f0>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d00c      	beq.n	8002900 <HAL_RCC_OscConfig+0x4f0>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d008      	beq.n	8002900 <HAL_RCC_OscConfig+0x4f0>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d004      	beq.n	8002900 <HAL_RCC_OscConfig+0x4f0>
 80028f6:	f240 11db 	movw	r1, #475	; 0x1db
 80028fa:	4811      	ldr	r0, [pc, #68]	; (8002940 <HAL_RCC_OscConfig+0x530>)
 80028fc:	f005 f840 	bl	8007980 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d903      	bls.n	8002910 <HAL_RCC_OscConfig+0x500>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d904      	bls.n	800291a <HAL_RCC_OscConfig+0x50a>
 8002910:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002914:	480a      	ldr	r0, [pc, #40]	; (8002940 <HAL_RCC_OscConfig+0x530>)
 8002916:	f005 f833 	bl	8007980 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_OscConfig+0x538>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fd fe9c 	bl	800065c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e011      	b.n	800294c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7fd fe98 	bl	800065c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d90a      	bls.n	800294c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e081      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	08008ad0 	.word	0x08008ad0
 8002944:	40007000 	.word	0x40007000
 8002948:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294c:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <HAL_RCC_OscConfig+0x638>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e7      	bne.n	8002928 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	019b      	lsls	r3, r3, #6
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	3b01      	subs	r3, #1
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	061b      	lsls	r3, r3, #24
 800297c:	4932      	ldr	r1, [pc, #200]	; (8002a48 <HAL_RCC_OscConfig+0x638>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002982:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <HAL_RCC_OscConfig+0x63c>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fd fe68 	bl	800065c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7fd fe64 	bl	800065c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e04d      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <HAL_RCC_OscConfig+0x638>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x580>
 80029ae:	e045      	b.n	8002a3c <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b0:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <HAL_RCC_OscConfig+0x63c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fd fe51 	bl	800065c <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7fd fe4d 	bl	800065c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e036      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCC_OscConfig+0x638>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x5ae>
 80029dc:	e02e      	b.n	8002a3c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e029      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_RCC_OscConfig+0x638>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d11c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d115      	bne.n	8002a38 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a12:	4013      	ands	r3, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10d      	bne.n	8002a38 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	42470060 	.word	0x42470060

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e174      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x24>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d904      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x2e>
 8002a74:	f240 2151 	movw	r1, #593	; 0x251
 8002a78:	487b      	ldr	r0, [pc, #492]	; (8002c68 <HAL_RCC_ClockConfig+0x218>)
 8002a7a:	f004 ff81 	bl	8007980 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d019      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d013      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d010      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b06      	cmp	r3, #6
 8002aa6:	d007      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b07      	cmp	r3, #7
 8002aac:	d004      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
 8002aae:	f240 2152 	movw	r1, #594	; 0x252
 8002ab2:	486d      	ldr	r0, [pc, #436]	; (8002c68 <HAL_RCC_ClockConfig+0x218>)
 8002ab4:	f004 ff64 	bl	8007980 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b6c      	ldr	r3, [pc, #432]	; (8002c6c <HAL_RCC_ClockConfig+0x21c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d90c      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <HAL_RCC_ClockConfig+0x21c>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <HAL_RCC_ClockConfig+0x21c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e136      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d049      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af8:	4b5d      	ldr	r3, [pc, #372]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a5c      	ldr	r2, [pc, #368]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b10:	4b57      	ldr	r3, [pc, #348]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a56      	ldr	r2, [pc, #344]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d024      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x11e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x11e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b90      	cmp	r3, #144	; 0x90
 8002b32:	d01c      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x11e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2ba0      	cmp	r3, #160	; 0xa0
 8002b3a:	d018      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x11e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2bb0      	cmp	r3, #176	; 0xb0
 8002b42:	d014      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x11e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2bc0      	cmp	r3, #192	; 0xc0
 8002b4a:	d010      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x11e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2bd0      	cmp	r3, #208	; 0xd0
 8002b52:	d00c      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x11e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2be0      	cmp	r3, #224	; 0xe0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x11e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2bf0      	cmp	r3, #240	; 0xf0
 8002b62:	d004      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x11e>
 8002b64:	f240 2175 	movw	r1, #629	; 0x275
 8002b68:	483f      	ldr	r0, [pc, #252]	; (8002c68 <HAL_RCC_ClockConfig+0x218>)
 8002b6a:	f004 ff09 	bl	8007980 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6e:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	493d      	ldr	r1, [pc, #244]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d059      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x166>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d00c      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x166>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x166>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d004      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x166>
 8002bac:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8002bb0:	482d      	ldr	r0, [pc, #180]	; (8002c68 <HAL_RCC_ClockConfig+0x218>)
 8002bb2:	f004 fee5 	bl	8007980 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d119      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0bf      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0af      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0a7      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f023 0203 	bic.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4919      	ldr	r1, [pc, #100]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c10:	f7fd fd24 	bl	800065c <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c18:	f7fd fd20 	bl	800065c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e08f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_RCC_ClockConfig+0x220>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 020c 	and.w	r2, r3, #12
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d1eb      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_RCC_ClockConfig+0x21c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d212      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_RCC_ClockConfig+0x21c>)
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_RCC_ClockConfig+0x21c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d007      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e072      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2fe>
 8002c68:	08008ad0 	.word	0x08008ad0
 8002c6c:	40023c00 	.word	0x40023c00
 8002c70:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d025      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d018      	beq.n	8002cba <HAL_RCC_ClockConfig+0x26a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c90:	d013      	beq.n	8002cba <HAL_RCC_ClockConfig+0x26a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c9a:	d00e      	beq.n	8002cba <HAL_RCC_ClockConfig+0x26a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ca4:	d009      	beq.n	8002cba <HAL_RCC_ClockConfig+0x26a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002cae:	d004      	beq.n	8002cba <HAL_RCC_ClockConfig+0x26a>
 8002cb0:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002cb4:	4828      	ldr	r0, [pc, #160]	; (8002d58 <HAL_RCC_ClockConfig+0x308>)
 8002cb6:	f004 fe63 	bl	8007980 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cba:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <HAL_RCC_ClockConfig+0x30c>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	4925      	ldr	r1, [pc, #148]	; (8002d5c <HAL_RCC_ClockConfig+0x30c>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d026      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d018      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x2c2>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce8:	d013      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x2c2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002cf2:	d00e      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x2c2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x2c2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002d06:	d004      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x2c2>
 8002d08:	f240 21c1 	movw	r1, #705	; 0x2c1
 8002d0c:	4812      	ldr	r0, [pc, #72]	; (8002d58 <HAL_RCC_ClockConfig+0x308>)
 8002d0e:	f004 fe37 	bl	8007980 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_ClockConfig+0x30c>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	490e      	ldr	r1, [pc, #56]	; (8002d5c <HAL_RCC_ClockConfig+0x30c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d26:	f000 f821 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d2a:	4601      	mov	r1, r0
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_ClockConfig+0x30c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <HAL_RCC_ClockConfig+0x310>)
 8002d38:	5cd3      	ldrb	r3, [r2, r3]
 8002d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d3e:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_RCC_ClockConfig+0x314>)
 8002d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x318>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fc44 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	08008ad0 	.word	0x08008ad0
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	08008eb0 	.word	0x08008eb0
 8002d64:	20000088 	.word	0x20000088
 8002d68:	20000080 	.word	0x20000080

08002d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d007      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x32>
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d008      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x38>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 80b4 	bne.w	8002f00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b5e      	ldr	r3, [pc, #376]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d9a:	60bb      	str	r3, [r7, #8]
       break;
 8002d9c:	e0b3      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d9e:	4b5e      	ldr	r3, [pc, #376]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002da0:	60bb      	str	r3, [r7, #8]
      break;
 8002da2:	e0b0      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da4:	4b5a      	ldr	r3, [pc, #360]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dae:	4b58      	ldr	r3, [pc, #352]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d04a      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	4b55      	ldr	r3, [pc, #340]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	f04f 0400 	mov.w	r4, #0
 8002dc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	ea03 0501 	and.w	r5, r3, r1
 8002dd0:	ea04 0602 	and.w	r6, r4, r2
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	4632      	mov	r2, r6
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	f04f 0400 	mov.w	r4, #0
 8002de0:	0154      	lsls	r4, r2, #5
 8002de2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002de6:	014b      	lsls	r3, r1, #5
 8002de8:	4619      	mov	r1, r3
 8002dea:	4622      	mov	r2, r4
 8002dec:	1b49      	subs	r1, r1, r5
 8002dee:	eb62 0206 	sbc.w	r2, r2, r6
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	f04f 0400 	mov.w	r4, #0
 8002dfa:	0194      	lsls	r4, r2, #6
 8002dfc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e00:	018b      	lsls	r3, r1, #6
 8002e02:	1a5b      	subs	r3, r3, r1
 8002e04:	eb64 0402 	sbc.w	r4, r4, r2
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	00e2      	lsls	r2, r4, #3
 8002e12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e16:	00d9      	lsls	r1, r3, #3
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4614      	mov	r4, r2
 8002e1c:	195b      	adds	r3, r3, r5
 8002e1e:	eb44 0406 	adc.w	r4, r4, r6
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	0262      	lsls	r2, r4, #9
 8002e2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e30:	0259      	lsls	r1, r3, #9
 8002e32:	460b      	mov	r3, r1
 8002e34:	4614      	mov	r4, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	4621      	mov	r1, r4
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f04f 0400 	mov.w	r4, #0
 8002e40:	461a      	mov	r2, r3
 8002e42:	4623      	mov	r3, r4
 8002e44:	f7fd fa24 	bl	8000290 <__aeabi_uldivmod>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	e049      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e50:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	f04f 0400 	mov.w	r4, #0
 8002e5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	ea03 0501 	and.w	r5, r3, r1
 8002e66:	ea04 0602 	and.w	r6, r4, r2
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	4632      	mov	r2, r6
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	f04f 0400 	mov.w	r4, #0
 8002e76:	0154      	lsls	r4, r2, #5
 8002e78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e7c:	014b      	lsls	r3, r1, #5
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4622      	mov	r2, r4
 8002e82:	1b49      	subs	r1, r1, r5
 8002e84:	eb62 0206 	sbc.w	r2, r2, r6
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	f04f 0400 	mov.w	r4, #0
 8002e90:	0194      	lsls	r4, r2, #6
 8002e92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e96:	018b      	lsls	r3, r1, #6
 8002e98:	1a5b      	subs	r3, r3, r1
 8002e9a:	eb64 0402 	sbc.w	r4, r4, r2
 8002e9e:	f04f 0100 	mov.w	r1, #0
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	00e2      	lsls	r2, r4, #3
 8002ea8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002eac:	00d9      	lsls	r1, r3, #3
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4614      	mov	r4, r2
 8002eb2:	195b      	adds	r3, r3, r5
 8002eb4:	eb44 0406 	adc.w	r4, r4, r6
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	02a2      	lsls	r2, r4, #10
 8002ec2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ec6:	0299      	lsls	r1, r3, #10
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4614      	mov	r4, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	4621      	mov	r1, r4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f04f 0400 	mov.w	r4, #0
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4623      	mov	r3, r4
 8002eda:	f7fd f9d9 	bl	8000290 <__aeabi_uldivmod>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	60bb      	str	r3, [r7, #8]
      break;
 8002efe:	e002      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f02:	60bb      	str	r3, [r7, #8]
      break;
 8002f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f06:	68bb      	ldr	r3, [r7, #8]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	007a1200 	.word	0x007a1200

08002f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000088 	.word	0x20000088

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f3c:	4601      	mov	r1, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0a9b      	lsrs	r3, r3, #10
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4a03      	ldr	r2, [pc, #12]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	08008ec0 	.word	0x08008ec0

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f60:	f7ff ffdc 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f64:	4601      	mov	r1, r0
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0b5b      	lsrs	r3, r3, #13
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4a03      	ldr	r2, [pc, #12]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	08008ec0 	.word	0x08008ec0

08002f84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d904      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8002fa4:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8002fa8:	489d      	ldr	r0, [pc, #628]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002faa:	f004 fce9 	bl	8007980 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d060      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d903      	bls.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	d904      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002fd6:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8002fda:	4891      	ldr	r0, [pc, #580]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002fdc:	f004 fcd0 	bl	8007980 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2bbf      	cmp	r3, #191	; 0xbf
 8002fe6:	d904      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002ff0:	d904      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002ff2:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8002ff6:	488a      	ldr	r0, [pc, #552]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ff8:	f004 fcc2 	bl	8007980 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d903      	bls.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b3f      	cmp	r3, #63	; 0x3f
 800300a:	d904      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800300c:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8003010:	4883      	ldr	r0, [pc, #524]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003012:	f004 fcb5 	bl	8007980 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003016:	4b83      	ldr	r3, [pc, #524]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800301c:	f7fd fb1e 	bl	800065c <HAL_GetTick>
 8003020:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003024:	f7fd fb1a 	bl	800065c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e1ae      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003036:	4b7c      	ldr	r3, [pc, #496]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	019b      	lsls	r3, r3, #6
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	071b      	lsls	r3, r3, #28
 8003054:	4974      	ldr	r1, [pc, #464]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800305c:	4b71      	ldr	r3, [pc, #452]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800305e:	2201      	movs	r2, #1
 8003060:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003062:	f7fd fafb 	bl	800065c <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800306a:	f7fd faf7 	bl	800065c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e18b      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800307c:	4b6a      	ldr	r3, [pc, #424]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8174 	beq.w	800337e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309e:	f000 80a6 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030aa:	f000 80a0 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	4a5e      	ldr	r2, [pc, #376]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	f000 809a 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	4a5c      	ldr	r2, [pc, #368]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	f000 8094 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	4a5a      	ldr	r2, [pc, #360]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	f000 808e 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	f000 8088 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	4a56      	ldr	r2, [pc, #344]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	f000 8082 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	4a54      	ldr	r2, [pc, #336]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d07c      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d077      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	4a51      	ldr	r2, [pc, #324]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d072      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	4a4f      	ldr	r2, [pc, #316]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d06d      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	4a4e      	ldr	r2, [pc, #312]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d068      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d063      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	4a4b      	ldr	r2, [pc, #300]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d05e      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4a49      	ldr	r2, [pc, #292]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d059      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	4a48      	ldr	r2, [pc, #288]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d054      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	4a46      	ldr	r2, [pc, #280]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d04f      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	4a45      	ldr	r2, [pc, #276]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	4a43      	ldr	r2, [pc, #268]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	4a42      	ldr	r2, [pc, #264]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	4a40      	ldr	r2, [pc, #256]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	4a3f      	ldr	r2, [pc, #252]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	4a3d      	ldr	r2, [pc, #244]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	4a3c      	ldr	r2, [pc, #240]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4a3a      	ldr	r2, [pc, #232]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	4a39      	ldr	r2, [pc, #228]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	4a37      	ldr	r2, [pc, #220]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	4a36      	ldr	r2, [pc, #216]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	4a34      	ldr	r2, [pc, #208]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	4a33      	ldr	r2, [pc, #204]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	4a31      	ldr	r2, [pc, #196]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	4a30      	ldr	r2, [pc, #192]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80031e4:	f640 2112 	movw	r1, #2578	; 0xa12
 80031e8:	480d      	ldr	r0, [pc, #52]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031ea:	f004 fbc9 	bl	8007980 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6413      	str	r3, [r2, #64]	; 0x40
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003216:	f7fd fa21 	bl	800065c <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800321c:	e04d      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x336>
 800321e:	bf00      	nop
 8003220:	08008b08 	.word	0x08008b08
 8003224:	42470068 	.word	0x42470068
 8003228:	40023800 	.word	0x40023800
 800322c:	00020300 	.word	0x00020300
 8003230:	00030300 	.word	0x00030300
 8003234:	00040300 	.word	0x00040300
 8003238:	00050300 	.word	0x00050300
 800323c:	00060300 	.word	0x00060300
 8003240:	00070300 	.word	0x00070300
 8003244:	00080300 	.word	0x00080300
 8003248:	00090300 	.word	0x00090300
 800324c:	000a0300 	.word	0x000a0300
 8003250:	000b0300 	.word	0x000b0300
 8003254:	000c0300 	.word	0x000c0300
 8003258:	000d0300 	.word	0x000d0300
 800325c:	000e0300 	.word	0x000e0300
 8003260:	000f0300 	.word	0x000f0300
 8003264:	00100300 	.word	0x00100300
 8003268:	00110300 	.word	0x00110300
 800326c:	00120300 	.word	0x00120300
 8003270:	00130300 	.word	0x00130300
 8003274:	00140300 	.word	0x00140300
 8003278:	00150300 	.word	0x00150300
 800327c:	00160300 	.word	0x00160300
 8003280:	00170300 	.word	0x00170300
 8003284:	00180300 	.word	0x00180300
 8003288:	00190300 	.word	0x00190300
 800328c:	001a0300 	.word	0x001a0300
 8003290:	001b0300 	.word	0x001b0300
 8003294:	001c0300 	.word	0x001c0300
 8003298:	001d0300 	.word	0x001d0300
 800329c:	001e0300 	.word	0x001e0300
 80032a0:	001f0300 	.word	0x001f0300
 80032a4:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032a8:	f7fd f9d8 	bl	800065c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e06c      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x418>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032c6:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d02f      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d028      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e4:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f4:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032fa:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d114      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800330c:	f7fd f9a6 	bl	800065c <HAL_GetTick>
 8003310:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fd f9a2 	bl	800065c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e034      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ee      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003342:	d10d      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8003344:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	4911      	ldr	r1, [pc, #68]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
 800335e:	e005      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003366:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800336a:	6093      	str	r3, [r2, #8]
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800336e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003378:	4909      	ldr	r1, [pc, #36]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7d1a      	ldrb	r2, [r3, #20]
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003390:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40007000 	.word	0x40007000
 80033a0:	40023800 	.word	0x40023800
 80033a4:	42470e40 	.word	0x42470e40
 80033a8:	424711e0 	.word	0x424711e0

080033ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0d6      	b.n	800356c <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d007      	beq.n	80033d6 <HAL_RTC_Init+0x2a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_RTC_Init+0x2a>
 80033ce:	21ff      	movs	r1, #255	; 0xff
 80033d0:	4868      	ldr	r0, [pc, #416]	; (8003574 <HAL_RTC_Init+0x1c8>)
 80033d2:	f004 fad5 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b7f      	cmp	r3, #127	; 0x7f
 80033dc:	d904      	bls.n	80033e8 <HAL_RTC_Init+0x3c>
 80033de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033e2:	4864      	ldr	r0, [pc, #400]	; (8003574 <HAL_RTC_Init+0x1c8>)
 80033e4:	f004 facc 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f0:	d304      	bcc.n	80033fc <HAL_RTC_Init+0x50>
 80033f2:	f240 1101 	movw	r1, #257	; 0x101
 80033f6:	485f      	ldr	r0, [pc, #380]	; (8003574 <HAL_RTC_Init+0x1c8>)
 80033f8:	f004 fac2 	bl	8007980 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RTC_Init+0x80>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800340c:	d00e      	beq.n	800342c <HAL_RTC_Init+0x80>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003416:	d009      	beq.n	800342c <HAL_RTC_Init+0x80>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003420:	d004      	beq.n	800342c <HAL_RTC_Init+0x80>
 8003422:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003426:	4853      	ldr	r0, [pc, #332]	; (8003574 <HAL_RTC_Init+0x1c8>)
 8003428:	f004 faaa 	bl	8007980 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HAL_RTC_Init+0x9c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343c:	d004      	beq.n	8003448 <HAL_RTC_Init+0x9c>
 800343e:	f240 1103 	movw	r1, #259	; 0x103
 8003442:	484c      	ldr	r0, [pc, #304]	; (8003574 <HAL_RTC_Init+0x1c8>)
 8003444:	f004 fa9c 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_RTC_Init+0xb8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003458:	d004      	beq.n	8003464 <HAL_RTC_Init+0xb8>
 800345a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800345e:	4845      	ldr	r0, [pc, #276]	; (8003574 <HAL_RTC_Init+0x1c8>)
 8003460:	f004 fa8e 	bl	8007980 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7f5b      	ldrb	r3, [r3, #29]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f004 faf1 	bl	8007a5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	22ca      	movs	r2, #202	; 0xca
 8003486:	625a      	str	r2, [r3, #36]	; 0x24
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2253      	movs	r2, #83	; 0x53
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 ff11 	bl	80042b8 <RTC_EnterInitMode>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2204      	movs	r2, #4
 80034a8:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e05e      	b.n	800356c <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6899      	ldr	r1, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68d2      	ldr	r2, [r2, #12]
 80034e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6919      	ldr	r1, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	041a      	lsls	r2, r3, #16
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800350c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10e      	bne.n	800353a <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fea3 	bl	8004268 <HAL_RTC_WaitForSynchro>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	22ff      	movs	r2, #255	; 0xff
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2204      	movs	r2, #4
 8003534:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e018      	b.n	800356c <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	22ff      	movs	r2, #255	; 0xff
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800356a:	2300      	movs	r3, #0
  }
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	08008b44 	.word	0x08008b44

08003578 <HAL_RTC_DeInit>:
  *                the configuration information for RTC.
  * @note   This function doesn't reset the RTC Backup Data registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	22ca      	movs	r2, #202	; 0xca
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2253      	movs	r2, #83	; 0x53
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fe8c 	bl	80042b8 <RTC_EnterInitMode>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_RTC_DeInit+0x40>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e084      	b.n	80036c2 <HAL_RTC_DeInit+0x14a>
  }
  else
  {
    /* Reset TR, DR and CR registers */
    hrtc->Instance->TR = 0x00000000U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
    hrtc->Instance->DR = 0x00002101U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f242 1201 	movw	r2, #8449	; 0x2101
 80035c8:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    hrtc->Instance->CR &= 0x00000007U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f002 0207 	and.w	r2, r2, #7
 80035d8:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035da:	f7fd f83f 	bl	800065c <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]

    /* Wait till WUTWF flag is set and if Time out is reached exit */
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 80035e0:	e010      	b.n	8003604 <HAL_RTC_DeInit+0x8c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80035e2:	f7fd f83b 	bl	800065c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035f0:	d908      	bls.n	8003604 <HAL_RTC_DeInit+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	22ff      	movs	r2, #255	; 0xff
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2203      	movs	r2, #3
 80035fe:	775a      	strb	r2, [r3, #29]

        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e05e      	b.n	80036c2 <HAL_RTC_DeInit+0x14a>
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0e7      	beq.n	80035e2 <HAL_RTC_DeInit+0x6a>
      }
    }

    /* Reset all RTC CR register bits */
    hrtc->Instance->CR &= 0x00000000U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->WUTR = 0x0000FFFFU;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003628:	615a      	str	r2, [r3, #20]
    hrtc->Instance->PRER = 0x007F00FFU;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a27      	ldr	r2, [pc, #156]	; (80036cc <HAL_RTC_DeInit+0x154>)
 8003630:	611a      	str	r2, [r3, #16]
    hrtc->Instance->CALIBR = 0x00000000U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	619a      	str	r2, [r3, #24]
    hrtc->Instance->ALRMAR = 0x00000000U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
    hrtc->Instance->ALRMBR = 0x00000000U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	621a      	str	r2, [r3, #32]
    hrtc->Instance->SHIFTR = 0x00000000U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2200      	movs	r2, #0
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Instance->CALR = 0x00000000U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c
    hrtc->Instance->ALRMASSR = 0x00000000U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
    hrtc->Instance->ALRMBSSR = 0x00000000U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	649a      	str	r2, [r3, #72]	; 0x48

    /* Reset ISR register and exit initialization mode */
    hrtc->Instance->ISR = 0x00000000U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2200      	movs	r2, #0
 8003670:	60da      	str	r2, [r3, #12]

    /* Reset Tamper and alternate functions configuration register */
    hrtc->Instance->TAFCR = 0x00000000U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	641a      	str	r2, [r3, #64]	; 0x40

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10e      	bne.n	80036a6 <HAL_RTC_DeInit+0x12e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fded 	bl	8004268 <HAL_RTC_WaitForSynchro>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RTC_DeInit+0x12e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2204      	movs	r2, #4
 80036a0:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00d      	b.n	80036c2 <HAL_RTC_DeInit+0x14a>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	22ff      	movs	r2, #255	; 0xff
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  hrtc->MspDeInitCallback(hrtc);

#else
  /* De-Initialize RTC MSP */
  HAL_RTC_MspDeInit(hrtc);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f004 f9f0 	bl	8007a94 <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  hrtc->State = HAL_RTC_STATE_RESET;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	775a      	strb	r2, [r3, #29]

  /* Release Lock */
  __HAL_UNLOCK(hrtc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	007f00ff 	.word	0x007f00ff

080036d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <HAL_RTC_SetTime+0x26>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d004      	beq.n	80036f6 <HAL_RTC_SetTime+0x26>
 80036ec:	f240 21da 	movw	r1, #730	; 0x2da
 80036f0:	48a4      	ldr	r0, [pc, #656]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 80036f2:	f004 f945 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036fe:	d00d      	beq.n	800371c <HAL_RTC_SetTime+0x4c>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003708:	d008      	beq.n	800371c <HAL_RTC_SetTime+0x4c>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_RTC_SetTime+0x4c>
 8003712:	f240 21db 	movw	r1, #731	; 0x2db
 8003716:	489b      	ldr	r0, [pc, #620]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 8003718:	f004 f932 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <HAL_RTC_SetTime+0x68>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800372c:	d004      	beq.n	8003738 <HAL_RTC_SetTime+0x68>
 800372e:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8003732:	4894      	ldr	r0, [pc, #592]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 8003734:	f004 f924 	bl	8007980 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	7f1b      	ldrb	r3, [r3, #28]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_RTC_SetTime+0x74>
 8003740:	2302      	movs	r3, #2
 8003742:	e12c      	b.n	800399e <HAL_RTC_SetTime+0x2ce>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2202      	movs	r2, #2
 800374e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d15c      	bne.n	8003810 <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01a      	beq.n	800379a <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_RTC_SetTime+0xa4>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d904      	bls.n	800377e <HAL_RTC_SetTime+0xae>
 8003774:	f240 21e7 	movw	r1, #743	; 0x2e7
 8003778:	4882      	ldr	r0, [pc, #520]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 800377a:	f004 f901 	bl	8007980 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	78db      	ldrb	r3, [r3, #3]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d015      	beq.n	80037b2 <HAL_RTC_SetTime+0xe2>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	78db      	ldrb	r3, [r3, #3]
 800378a:	2b40      	cmp	r3, #64	; 0x40
 800378c:	d011      	beq.n	80037b2 <HAL_RTC_SetTime+0xe2>
 800378e:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8003792:	487c      	ldr	r0, [pc, #496]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 8003794:	f004 f8f4 	bl	8007980 <assert_failed>
 8003798:	e00b      	b.n	80037b2 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2200      	movs	r2, #0
 800379e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b17      	cmp	r3, #23
 80037a6:	d904      	bls.n	80037b2 <HAL_RTC_SetTime+0xe2>
 80037a8:	f240 21ed 	movw	r1, #749	; 0x2ed
 80037ac:	4875      	ldr	r0, [pc, #468]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 80037ae:	f004 f8e7 	bl	8007980 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	2b3b      	cmp	r3, #59	; 0x3b
 80037b8:	d904      	bls.n	80037c4 <HAL_RTC_SetTime+0xf4>
 80037ba:	f240 21ef 	movw	r1, #751	; 0x2ef
 80037be:	4871      	ldr	r0, [pc, #452]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 80037c0:	f004 f8de 	bl	8007980 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	789b      	ldrb	r3, [r3, #2]
 80037c8:	2b3b      	cmp	r3, #59	; 0x3b
 80037ca:	d904      	bls.n	80037d6 <HAL_RTC_SetTime+0x106>
 80037cc:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80037d0:	486c      	ldr	r0, [pc, #432]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 80037d2:	f004 f8d5 	bl	8007980 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fd98 	bl	8004310 <RTC_ByteToBcd2>
 80037e0:	4603      	mov	r3, r0
 80037e2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fd91 	bl	8004310 <RTC_ByteToBcd2>
 80037ee:	4603      	mov	r3, r0
 80037f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80037f2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	789b      	ldrb	r3, [r3, #2]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fd89 	bl	8004310 <RTC_ByteToBcd2>
 80037fe:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003800:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	78db      	ldrb	r3, [r3, #3]
 8003808:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e062      	b.n	80038d6 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d022      	beq.n	8003864 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fd92 	bl	800434c <RTC_Bcd2ToByte>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_RTC_SetTime+0x16e>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fd8a 	bl	800434c <RTC_Bcd2ToByte>
 8003838:	4603      	mov	r3, r0
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d904      	bls.n	8003848 <HAL_RTC_SetTime+0x178>
 800383e:	f240 21fb 	movw	r1, #763	; 0x2fb
 8003842:	4850      	ldr	r0, [pc, #320]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 8003844:	f004 f89c 	bl	8007980 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	78db      	ldrb	r3, [r3, #3]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d019      	beq.n	8003884 <HAL_RTC_SetTime+0x1b4>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	78db      	ldrb	r3, [r3, #3]
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d015      	beq.n	8003884 <HAL_RTC_SetTime+0x1b4>
 8003858:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 800385c:	4849      	ldr	r0, [pc, #292]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 800385e:	f004 f88f 	bl	8007980 <assert_failed>
 8003862:	e00f      	b.n	8003884 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2200      	movs	r2, #0
 8003868:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fd6c 	bl	800434c <RTC_Bcd2ToByte>
 8003874:	4603      	mov	r3, r0
 8003876:	2b17      	cmp	r3, #23
 8003878:	d904      	bls.n	8003884 <HAL_RTC_SetTime+0x1b4>
 800387a:	f240 3101 	movw	r1, #769	; 0x301
 800387e:	4841      	ldr	r0, [pc, #260]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 8003880:	f004 f87e 	bl	8007980 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fd5f 	bl	800434c <RTC_Bcd2ToByte>
 800388e:	4603      	mov	r3, r0
 8003890:	2b3b      	cmp	r3, #59	; 0x3b
 8003892:	d904      	bls.n	800389e <HAL_RTC_SetTime+0x1ce>
 8003894:	f240 3103 	movw	r1, #771	; 0x303
 8003898:	483a      	ldr	r0, [pc, #232]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 800389a:	f004 f871 	bl	8007980 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	789b      	ldrb	r3, [r3, #2]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fd52 	bl	800434c <RTC_Bcd2ToByte>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b3b      	cmp	r3, #59	; 0x3b
 80038ac:	d904      	bls.n	80038b8 <HAL_RTC_SetTime+0x1e8>
 80038ae:	f44f 7141 	mov.w	r1, #772	; 0x304
 80038b2:	4834      	ldr	r0, [pc, #208]	; (8003984 <HAL_RTC_SetTime+0x2b4>)
 80038b4:	f004 f864 	bl	8007980 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038c4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80038ca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	78db      	ldrb	r3, [r3, #3]
 80038d0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	22ca      	movs	r2, #202	; 0xca
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2253      	movs	r2, #83	; 0x53
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fce6 	bl	80042b8 <RTC_EnterInitMode>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	22ff      	movs	r2, #255	; 0xff
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2204      	movs	r2, #4
 80038fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e049      	b.n	800399e <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003914:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003918:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003928:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003950:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d113      	bne.n	8003988 <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fc81 	bl	8004268 <HAL_RTC_WaitForSynchro>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00d      	beq.n	8003988 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2204      	movs	r2, #4
 8003978:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e00c      	b.n	800399e <HAL_RTC_SetTime+0x2ce>
 8003984:	08008b44 	.word	0x08008b44
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800399c:	2300      	movs	r3, #0
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd90      	pop	{r4, r7, pc}
 80039a6:	bf00      	nop

080039a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_RTC_SetDate+0x26>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d004      	beq.n	80039ce <HAL_RTC_SetDate+0x26>
 80039c4:	f240 318a 	movw	r1, #906	; 0x38a
 80039c8:	488e      	ldr	r0, [pc, #568]	; (8003c04 <HAL_RTC_SetDate+0x25c>)
 80039ca:	f003 ffd9 	bl	8007980 <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	7f1b      	ldrb	r3, [r3, #28]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_RTC_SetDate+0x32>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e10f      	b.n	8003bfa <HAL_RTC_SetDate+0x252>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2202      	movs	r2, #2
 80039e4:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10e      	bne.n	8003a0a <HAL_RTC_SetDate+0x62>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	330a      	adds	r3, #10
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d01c      	beq.n	8003a4c <HAL_RTC_SetDate+0xa4>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d018      	beq.n	8003a4c <HAL_RTC_SetDate+0xa4>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d014      	beq.n	8003a4c <HAL_RTC_SetDate+0xa4>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d010      	beq.n	8003a4c <HAL_RTC_SetDate+0xa4>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d00c      	beq.n	8003a4c <HAL_RTC_SetDate+0xa4>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d008      	beq.n	8003a4c <HAL_RTC_SetDate+0xa4>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b07      	cmp	r3, #7
 8003a40:	d004      	beq.n	8003a4c <HAL_RTC_SetDate+0xa4>
 8003a42:	f240 3196 	movw	r1, #918	; 0x396
 8003a46:	486f      	ldr	r0, [pc, #444]	; (8003c04 <HAL_RTC_SetDate+0x25c>)
 8003a48:	f003 ff9a 	bl	8007980 <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d13f      	bne.n	8003ad2 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	78db      	ldrb	r3, [r3, #3]
 8003a56:	2b63      	cmp	r3, #99	; 0x63
 8003a58:	d904      	bls.n	8003a64 <HAL_RTC_SetDate+0xbc>
 8003a5a:	f240 319a 	movw	r1, #922	; 0x39a
 8003a5e:	4869      	ldr	r0, [pc, #420]	; (8003c04 <HAL_RTC_SetDate+0x25c>)
 8003a60:	f003 ff8e 	bl	8007980 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	785b      	ldrb	r3, [r3, #1]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_RTC_SetDate+0xcc>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	785b      	ldrb	r3, [r3, #1]
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d904      	bls.n	8003a7e <HAL_RTC_SetDate+0xd6>
 8003a74:	f240 319b 	movw	r1, #923	; 0x39b
 8003a78:	4862      	ldr	r0, [pc, #392]	; (8003c04 <HAL_RTC_SetDate+0x25c>)
 8003a7a:	f003 ff81 	bl	8007980 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	789b      	ldrb	r3, [r3, #2]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_RTC_SetDate+0xe6>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	789b      	ldrb	r3, [r3, #2]
 8003a8a:	2b1f      	cmp	r3, #31
 8003a8c:	d904      	bls.n	8003a98 <HAL_RTC_SetDate+0xf0>
 8003a8e:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8003a92:	485c      	ldr	r0, [pc, #368]	; (8003c04 <HAL_RTC_SetDate+0x25c>)
 8003a94:	f003 ff74 	bl	8007980 <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	78db      	ldrb	r3, [r3, #3]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fc37 	bl	8004310 <RTC_ByteToBcd2>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fc30 	bl	8004310 <RTC_ByteToBcd2>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003ab4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	789b      	ldrb	r3, [r3, #2]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fc28 	bl	8004310 <RTC_ByteToBcd2>
 8003ac0:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003ac2:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e045      	b.n	8003b5e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	78db      	ldrb	r3, [r3, #3]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fc38 	bl	800434c <RTC_Bcd2ToByte>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b63      	cmp	r3, #99	; 0x63
 8003ae0:	d904      	bls.n	8003aec <HAL_RTC_SetDate+0x144>
 8003ae2:	f240 31a5 	movw	r1, #933	; 0x3a5
 8003ae6:	4847      	ldr	r0, [pc, #284]	; (8003c04 <HAL_RTC_SetDate+0x25c>)
 8003ae8:	f003 ff4a 	bl	8007980 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fc2b 	bl	800434c <RTC_Bcd2ToByte>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_RTC_SetDate+0x164>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fc23 	bl	800434c <RTC_Bcd2ToByte>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d904      	bls.n	8003b16 <HAL_RTC_SetDate+0x16e>
 8003b0c:	f240 31a6 	movw	r1, #934	; 0x3a6
 8003b10:	483c      	ldr	r0, [pc, #240]	; (8003c04 <HAL_RTC_SetDate+0x25c>)
 8003b12:	f003 ff35 	bl	8007980 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	789b      	ldrb	r3, [r3, #2]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fc16 	bl	800434c <RTC_Bcd2ToByte>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_RTC_SetDate+0x18e>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	789b      	ldrb	r3, [r3, #2]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fc0e 	bl	800434c <RTC_Bcd2ToByte>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b1f      	cmp	r3, #31
 8003b34:	d904      	bls.n	8003b40 <HAL_RTC_SetDate+0x198>
 8003b36:	f240 31a7 	movw	r1, #935	; 0x3a7
 8003b3a:	4832      	ldr	r0, [pc, #200]	; (8003c04 <HAL_RTC_SetDate+0x25c>)
 8003b3c:	f003 ff20 	bl	8007980 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	78db      	ldrb	r3, [r3, #3]
 8003b44:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003b4c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003b52:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	22ca      	movs	r2, #202	; 0xca
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2253      	movs	r2, #83	; 0x53
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fba2 	bl	80042b8 <RTC_EnterInitMode>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2204      	movs	r2, #4
 8003b86:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e033      	b.n	8003bfa <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ba0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d111      	bne.n	8003be4 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fb51 	bl	8004268 <HAL_RTC_WaitForSynchro>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	22ff      	movs	r2, #255	; 0xff
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e00a      	b.n	8003bfa <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	22ff      	movs	r2, #255	; 0xff
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
  }
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd90      	pop	{r4, r7, pc}
 8003c02:	bf00      	nop
 8003c04:	08008b44 	.word	0x08008b44

08003c08 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b089      	sub	sp, #36	; 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003c1c:	4baa      	ldr	r3, [pc, #680]	; (8003ec8 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4aaa      	ldr	r2, [pc, #680]	; (8003ecc <HAL_RTC_SetAlarm_IT+0x2c4>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0adb      	lsrs	r3, r3, #11
 8003c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c2c:	fb02 f303 	mul.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_RTC_SetAlarm_IT+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d004      	beq.n	8003c48 <HAL_RTC_SetAlarm_IT+0x40>
 8003c3e:	f240 41e7 	movw	r1, #1255	; 0x4e7
 8003c42:	48a3      	ldr	r0, [pc, #652]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003c44:	f003 fe9c 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c50:	d009      	beq.n	8003c66 <HAL_RTC_SetAlarm_IT+0x5e>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c5a:	d004      	beq.n	8003c66 <HAL_RTC_SetAlarm_IT+0x5e>
 8003c5c:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 8003c60:	489b      	ldr	r0, [pc, #620]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003c62:	f003 fe8d 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <HAL_RTC_SetAlarm_IT+0x74>
 8003c72:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8003c76:	4896      	ldr	r0, [pc, #600]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003c78:	f003 fe82 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <HAL_RTC_SetAlarm_IT+0x90>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d004      	beq.n	8003c98 <HAL_RTC_SetAlarm_IT+0x90>
 8003c8e:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8003c92:	488f      	ldr	r0, [pc, #572]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003c94:	f003 fe74 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca0:	d304      	bcc.n	8003cac <HAL_RTC_SetAlarm_IT+0xa4>
 8003ca2:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8003ca6:	488a      	ldr	r0, [pc, #552]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003ca8:	f003 fe6a 	bl	8007980 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d04f      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cbc:	d04a      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cc6:	d045      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cd0:	d040      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cda:	d03b      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003ce4:	d036      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003cee:	d031      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8003cf8:	d02c      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d02:	d027      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8003d0c:	d022      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003d16:	d01d      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003d20:	d018      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d2a:	d013      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003d34:	d00e      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003d3e:	d009      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003d48:	d004      	beq.n	8003d54 <HAL_RTC_SetAlarm_IT+0x14c>
 8003d4a:	f240 41ec 	movw	r1, #1260	; 0x4ec
 8003d4e:	4860      	ldr	r0, [pc, #384]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003d50:	f003 fe16 	bl	8007980 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	7f1b      	ldrb	r3, [r3, #28]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_RTC_SetAlarm_IT+0x158>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e237      	b.n	80041d0 <HAL_RTC_SetAlarm_IT+0x5c8>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 80b0 	bne.w	8003ed4 <HAL_RTC_SetAlarm_IT+0x2cc>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01a      	beq.n	8003db8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_RTC_SetAlarm_IT+0x18a>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d904      	bls.n	8003d9c <HAL_RTC_SetAlarm_IT+0x194>
 8003d92:	f240 41f7 	movw	r1, #1271	; 0x4f7
 8003d96:	484e      	ldr	r0, [pc, #312]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003d98:	f003 fdf2 	bl	8007980 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	78db      	ldrb	r3, [r3, #3]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d015      	beq.n	8003dd0 <HAL_RTC_SetAlarm_IT+0x1c8>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	78db      	ldrb	r3, [r3, #3]
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d011      	beq.n	8003dd0 <HAL_RTC_SetAlarm_IT+0x1c8>
 8003dac:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8003db0:	4847      	ldr	r0, [pc, #284]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003db2:	f003 fde5 	bl	8007980 <assert_failed>
 8003db6:	e00b      	b.n	8003dd0 <HAL_RTC_SetAlarm_IT+0x1c8>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b17      	cmp	r3, #23
 8003dc4:	d904      	bls.n	8003dd0 <HAL_RTC_SetAlarm_IT+0x1c8>
 8003dc6:	f240 41fd 	movw	r1, #1277	; 0x4fd
 8003dca:	4841      	ldr	r0, [pc, #260]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003dcc:	f003 fdd8 	bl	8007980 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	785b      	ldrb	r3, [r3, #1]
 8003dd4:	2b3b      	cmp	r3, #59	; 0x3b
 8003dd6:	d904      	bls.n	8003de2 <HAL_RTC_SetAlarm_IT+0x1da>
 8003dd8:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8003ddc:	483c      	ldr	r0, [pc, #240]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003dde:	f003 fdcf 	bl	8007980 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	789b      	ldrb	r3, [r3, #2]
 8003de6:	2b3b      	cmp	r3, #59	; 0x3b
 8003de8:	d904      	bls.n	8003df4 <HAL_RTC_SetAlarm_IT+0x1ec>
 8003dea:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8003dee:	4838      	ldr	r0, [pc, #224]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003df0:	f003 fdc6 	bl	8007980 <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10f      	bne.n	8003e1c <HAL_RTC_SetAlarm_IT+0x214>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_RTC_SetAlarm_IT+0x208>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e0c:	2b1f      	cmp	r3, #31
 8003e0e:	d92d      	bls.n	8003e6c <HAL_RTC_SetAlarm_IT+0x264>
 8003e10:	f240 5104 	movw	r1, #1284	; 0x504
 8003e14:	482e      	ldr	r0, [pc, #184]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003e16:	f003 fdb3 	bl	8007980 <assert_failed>
 8003e1a:	e027      	b.n	8003e6c <HAL_RTC_SetAlarm_IT+0x264>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d022      	beq.n	8003e6c <HAL_RTC_SetAlarm_IT+0x264>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d01d      	beq.n	8003e6c <HAL_RTC_SetAlarm_IT+0x264>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d018      	beq.n	8003e6c <HAL_RTC_SetAlarm_IT+0x264>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d013      	beq.n	8003e6c <HAL_RTC_SetAlarm_IT+0x264>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	d00e      	beq.n	8003e6c <HAL_RTC_SetAlarm_IT+0x264>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d009      	beq.n	8003e6c <HAL_RTC_SetAlarm_IT+0x264>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e5e:	2b07      	cmp	r3, #7
 8003e60:	d004      	beq.n	8003e6c <HAL_RTC_SetAlarm_IT+0x264>
 8003e62:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8003e66:	481a      	ldr	r0, [pc, #104]	; (8003ed0 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8003e68:	f003 fd8a 	bl	8007980 <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fa4d 	bl	8004310 <RTC_ByteToBcd2>
 8003e76:	4603      	mov	r3, r0
 8003e78:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	785b      	ldrb	r3, [r3, #1]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fa46 	bl	8004310 <RTC_ByteToBcd2>
 8003e84:	4603      	mov	r3, r0
 8003e86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e88:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	789b      	ldrb	r3, [r3, #2]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa3e 	bl	8004310 <RTC_ByteToBcd2>
 8003e94:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e96:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	78db      	ldrb	r3, [r3, #3]
 8003e9e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003ea0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fa30 	bl	8004310 <RTC_ByteToBcd2>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003eb4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003ebc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e0d3      	b.n	8004070 <HAL_RTC_SetAlarm_IT+0x468>
 8003ec8:	20000088 	.word	0x20000088
 8003ecc:	10624dd3 	.word	0x10624dd3
 8003ed0:	08008b44 	.word	0x08008b44
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d022      	beq.n	8003f28 <HAL_RTC_SetAlarm_IT+0x320>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fa30 	bl	800434c <RTC_Bcd2ToByte>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_RTC_SetAlarm_IT+0x2fa>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fa28 	bl	800434c <RTC_Bcd2ToByte>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d904      	bls.n	8003f0c <HAL_RTC_SetAlarm_IT+0x304>
 8003f02:	f240 5116 	movw	r1, #1302	; 0x516
 8003f06:	4896      	ldr	r0, [pc, #600]	; (8004160 <HAL_RTC_SetAlarm_IT+0x558>)
 8003f08:	f003 fd3a 	bl	8007980 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	78db      	ldrb	r3, [r3, #3]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d019      	beq.n	8003f48 <HAL_RTC_SetAlarm_IT+0x340>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	78db      	ldrb	r3, [r3, #3]
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d015      	beq.n	8003f48 <HAL_RTC_SetAlarm_IT+0x340>
 8003f1c:	f240 5117 	movw	r1, #1303	; 0x517
 8003f20:	488f      	ldr	r0, [pc, #572]	; (8004160 <HAL_RTC_SetAlarm_IT+0x558>)
 8003f22:	f003 fd2d 	bl	8007980 <assert_failed>
 8003f26:	e00f      	b.n	8003f48 <HAL_RTC_SetAlarm_IT+0x340>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fa0a 	bl	800434c <RTC_Bcd2ToByte>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b17      	cmp	r3, #23
 8003f3c:	d904      	bls.n	8003f48 <HAL_RTC_SetAlarm_IT+0x340>
 8003f3e:	f240 511c 	movw	r1, #1308	; 0x51c
 8003f42:	4887      	ldr	r0, [pc, #540]	; (8004160 <HAL_RTC_SetAlarm_IT+0x558>)
 8003f44:	f003 fd1c 	bl	8007980 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f9fd 	bl	800434c <RTC_Bcd2ToByte>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b3b      	cmp	r3, #59	; 0x3b
 8003f56:	d904      	bls.n	8003f62 <HAL_RTC_SetAlarm_IT+0x35a>
 8003f58:	f240 511f 	movw	r1, #1311	; 0x51f
 8003f5c:	4880      	ldr	r0, [pc, #512]	; (8004160 <HAL_RTC_SetAlarm_IT+0x558>)
 8003f5e:	f003 fd0f 	bl	8007980 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	789b      	ldrb	r3, [r3, #2]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f9f0 	bl	800434c <RTC_Bcd2ToByte>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b3b      	cmp	r3, #59	; 0x3b
 8003f70:	d904      	bls.n	8003f7c <HAL_RTC_SetAlarm_IT+0x374>
 8003f72:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8003f76:	487a      	ldr	r0, [pc, #488]	; (8004160 <HAL_RTC_SetAlarm_IT+0x558>)
 8003f78:	f003 fd02 	bl	8007980 <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d117      	bne.n	8003fb4 <HAL_RTC_SetAlarm_IT+0x3ac>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f9de 	bl	800434c <RTC_Bcd2ToByte>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_RTC_SetAlarm_IT+0x3a0>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f9d5 	bl	800434c <RTC_Bcd2ToByte>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b1f      	cmp	r3, #31
 8003fa6:	d949      	bls.n	800403c <HAL_RTC_SetAlarm_IT+0x434>
 8003fa8:	f240 5124 	movw	r1, #1316	; 0x524
 8003fac:	486c      	ldr	r0, [pc, #432]	; (8004160 <HAL_RTC_SetAlarm_IT+0x558>)
 8003fae:	f003 fce7 	bl	8007980 <assert_failed>
 8003fb2:	e043      	b.n	800403c <HAL_RTC_SetAlarm_IT+0x434>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f9c6 	bl	800434c <RTC_Bcd2ToByte>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d03a      	beq.n	800403c <HAL_RTC_SetAlarm_IT+0x434>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f9bd 	bl	800434c <RTC_Bcd2ToByte>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d031      	beq.n	800403c <HAL_RTC_SetAlarm_IT+0x434>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f9b4 	bl	800434c <RTC_Bcd2ToByte>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d028      	beq.n	800403c <HAL_RTC_SetAlarm_IT+0x434>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f9ab 	bl	800434c <RTC_Bcd2ToByte>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d01f      	beq.n	800403c <HAL_RTC_SetAlarm_IT+0x434>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f9a2 	bl	800434c <RTC_Bcd2ToByte>
 8004008:	4603      	mov	r3, r0
 800400a:	2b05      	cmp	r3, #5
 800400c:	d016      	beq.n	800403c <HAL_RTC_SetAlarm_IT+0x434>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f999 	bl	800434c <RTC_Bcd2ToByte>
 800401a:	4603      	mov	r3, r0
 800401c:	2b06      	cmp	r3, #6
 800401e:	d00d      	beq.n	800403c <HAL_RTC_SetAlarm_IT+0x434>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f990 	bl	800434c <RTC_Bcd2ToByte>
 800402c:	4603      	mov	r3, r0
 800402e:	2b07      	cmp	r3, #7
 8004030:	d004      	beq.n	800403c <HAL_RTC_SetAlarm_IT+0x434>
 8004032:	f44f 61a5 	mov.w	r1, #1320	; 0x528
 8004036:	484a      	ldr	r0, [pc, #296]	; (8004160 <HAL_RTC_SetAlarm_IT+0x558>)
 8004038:	f003 fca2 	bl	8007980 <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004048:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800404e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	78db      	ldrb	r3, [r3, #3]
 8004054:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004056:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800405e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004060:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004066:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800406c:	4313      	orrs	r3, r2
 800406e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	22ca      	movs	r2, #202	; 0xca
 8004082:	625a      	str	r2, [r3, #36]	; 0x24
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2253      	movs	r2, #83	; 0x53
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004094:	d141      	bne.n	800411a <HAL_RTC_SetAlarm_IT+0x512>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040a4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80040b6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	1e5a      	subs	r2, r3, #1
 80040bc:	617a      	str	r2, [r7, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_RTC_SetAlarm_IT+0x4d2>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	22ff      	movs	r2, #255	; 0xff
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2203      	movs	r2, #3
 80040ce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e07a      	b.n	80041d0 <HAL_RTC_SetAlarm_IT+0x5c8>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0e7      	beq.n	80040b8 <HAL_RTC_SetAlarm_IT+0x4b0>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004106:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	e043      	b.n	80041a2 <HAL_RTC_SetAlarm_IT+0x59a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004128:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f462 7220 	orn	r2, r2, #640	; 0x280
 800413a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	1e5a      	subs	r2, r3, #1
 8004140:	617a      	str	r2, [r7, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10e      	bne.n	8004164 <HAL_RTC_SetAlarm_IT+0x55c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	22ff      	movs	r2, #255	; 0xff
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2203      	movs	r2, #3
 8004152:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e038      	b.n	80041d0 <HAL_RTC_SetAlarm_IT+0x5c8>
 800415e:	bf00      	nop
 8004160:	08008b44 	.word	0x08008b44
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0e4      	beq.n	800413c <HAL_RTC_SetAlarm_IT+0x534>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004190:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80041a2:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <HAL_RTC_SetAlarm_IT+0x5d0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <HAL_RTC_SetAlarm_IT+0x5d0>)
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_RTC_SetAlarm_IT+0x5d0>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RTC_SetAlarm_IT+0x5d0>)
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	22ff      	movs	r2, #255	; 0xff
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3724      	adds	r7, #36	; 0x24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd90      	pop	{r4, r7, pc}
 80041d8:	40013c00 	.word	0x40013c00

080041dc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d012      	beq.n	8004218 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f003 fb47 	bl	8007894 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004216:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d012      	beq.n	800424c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f8a7 	bl	8004388 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f462 7220 	orn	r2, r2, #640	; 0x280
 800424a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RTC_AlarmIRQHandler+0x88>)
 800424e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004252:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	775a      	strb	r2, [r3, #29]
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40013c00 	.word	0x40013c00

08004268 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004282:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004284:	f7fc f9ea 	bl	800065c <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800428a:	e009      	b.n	80042a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800428c:	f7fc f9e6 	bl	800065c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800429a:	d901      	bls.n	80042a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e007      	b.n	80042b0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ee      	beq.n	800428c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d119      	bne.n	8004306 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f04f 32ff 	mov.w	r2, #4294967295
 80042da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fc f9be 	bl	800065c <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80042e2:	e009      	b.n	80042f8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80042e4:	f7fc f9ba 	bl	800065c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f2:	d901      	bls.n	80042f8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e007      	b.n	8004308 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0ee      	beq.n	80042e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800431e:	e005      	b.n	800432c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3301      	adds	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	3b0a      	subs	r3, #10
 800432a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	2b09      	cmp	r3, #9
 8004330:	d8f6      	bhi.n	8004320 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	b2da      	uxtb	r2, r3
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	4313      	orrs	r3, r2
 800433e:	b2db      	uxtb	r3, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	4413      	add	r3, r2
 800437a:	b2db      	uxtb	r3, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e083      	b.n	80044b6 <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a43      	ldr	r2, [pc, #268]	; (80044c0 <HAL_TIM_Base_Init+0x124>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d027      	beq.n	8004408 <HAL_TIM_Base_Init+0x6c>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d022      	beq.n	8004408 <HAL_TIM_Base_Init+0x6c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a3f      	ldr	r2, [pc, #252]	; (80044c4 <HAL_TIM_Base_Init+0x128>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d01d      	beq.n	8004408 <HAL_TIM_Base_Init+0x6c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <HAL_TIM_Base_Init+0x12c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d018      	beq.n	8004408 <HAL_TIM_Base_Init+0x6c>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a3c      	ldr	r2, [pc, #240]	; (80044cc <HAL_TIM_Base_Init+0x130>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <HAL_TIM_Base_Init+0x6c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a3a      	ldr	r2, [pc, #232]	; (80044d0 <HAL_TIM_Base_Init+0x134>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <HAL_TIM_Base_Init+0x6c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a39      	ldr	r2, [pc, #228]	; (80044d4 <HAL_TIM_Base_Init+0x138>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d009      	beq.n	8004408 <HAL_TIM_Base_Init+0x6c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a37      	ldr	r2, [pc, #220]	; (80044d8 <HAL_TIM_Base_Init+0x13c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_TIM_Base_Init+0x6c>
 80043fe:	f44f 7189 	mov.w	r1, #274	; 0x112
 8004402:	4836      	ldr	r0, [pc, #216]	; (80044dc <HAL_TIM_Base_Init+0x140>)
 8004404:	f003 fabc 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d014      	beq.n	800443a <HAL_TIM_Base_Init+0x9e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b10      	cmp	r3, #16
 8004416:	d010      	beq.n	800443a <HAL_TIM_Base_Init+0x9e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b20      	cmp	r3, #32
 800441e:	d00c      	beq.n	800443a <HAL_TIM_Base_Init+0x9e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d008      	beq.n	800443a <HAL_TIM_Base_Init+0x9e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b60      	cmp	r3, #96	; 0x60
 800442e:	d004      	beq.n	800443a <HAL_TIM_Base_Init+0x9e>
 8004430:	f240 1113 	movw	r1, #275	; 0x113
 8004434:	4829      	ldr	r0, [pc, #164]	; (80044dc <HAL_TIM_Base_Init+0x140>)
 8004436:	f003 faa3 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00e      	beq.n	8004460 <HAL_TIM_Base_Init+0xc4>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444a:	d009      	beq.n	8004460 <HAL_TIM_Base_Init+0xc4>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004454:	d004      	beq.n	8004460 <HAL_TIM_Base_Init+0xc4>
 8004456:	f44f 718a 	mov.w	r1, #276	; 0x114
 800445a:	4820      	ldr	r0, [pc, #128]	; (80044dc <HAL_TIM_Base_Init+0x140>)
 800445c:	f003 fa90 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_TIM_Base_Init+0xde>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d004      	beq.n	800447a <HAL_TIM_Base_Init+0xde>
 8004470:	f240 1115 	movw	r1, #277	; 0x115
 8004474:	4819      	ldr	r0, [pc, #100]	; (80044dc <HAL_TIM_Base_Init+0x140>)
 8004476:	f003 fa83 	bl	8007980 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f003 fb18 	bl	8007ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f000 feec 	bl	8005284 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40000c00 	.word	0x40000c00
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800
 80044dc:	08008b7c 	.word	0x08008b7c

080044e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e083      	b.n	80045fa <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a43      	ldr	r2, [pc, #268]	; (8004604 <HAL_TIM_PWM_Init+0x124>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d027      	beq.n	800454c <HAL_TIM_PWM_Init+0x6c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004504:	d022      	beq.n	800454c <HAL_TIM_PWM_Init+0x6c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <HAL_TIM_PWM_Init+0x128>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01d      	beq.n	800454c <HAL_TIM_PWM_Init+0x6c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3d      	ldr	r2, [pc, #244]	; (800460c <HAL_TIM_PWM_Init+0x12c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d018      	beq.n	800454c <HAL_TIM_PWM_Init+0x6c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a3c      	ldr	r2, [pc, #240]	; (8004610 <HAL_TIM_PWM_Init+0x130>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <HAL_TIM_PWM_Init+0x6c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a3a      	ldr	r2, [pc, #232]	; (8004614 <HAL_TIM_PWM_Init+0x134>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_TIM_PWM_Init+0x6c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a39      	ldr	r2, [pc, #228]	; (8004618 <HAL_TIM_PWM_Init+0x138>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_TIM_PWM_Init+0x6c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a37      	ldr	r2, [pc, #220]	; (800461c <HAL_TIM_PWM_Init+0x13c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_TIM_PWM_Init+0x6c>
 8004542:	f240 419b 	movw	r1, #1179	; 0x49b
 8004546:	4836      	ldr	r0, [pc, #216]	; (8004620 <HAL_TIM_PWM_Init+0x140>)
 8004548:	f003 fa1a 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d014      	beq.n	800457e <HAL_TIM_PWM_Init+0x9e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b10      	cmp	r3, #16
 800455a:	d010      	beq.n	800457e <HAL_TIM_PWM_Init+0x9e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b20      	cmp	r3, #32
 8004562:	d00c      	beq.n	800457e <HAL_TIM_PWM_Init+0x9e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d008      	beq.n	800457e <HAL_TIM_PWM_Init+0x9e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b60      	cmp	r3, #96	; 0x60
 8004572:	d004      	beq.n	800457e <HAL_TIM_PWM_Init+0x9e>
 8004574:	f240 419c 	movw	r1, #1180	; 0x49c
 8004578:	4829      	ldr	r0, [pc, #164]	; (8004620 <HAL_TIM_PWM_Init+0x140>)
 800457a:	f003 fa01 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <HAL_TIM_PWM_Init+0xc4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458e:	d009      	beq.n	80045a4 <HAL_TIM_PWM_Init+0xc4>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004598:	d004      	beq.n	80045a4 <HAL_TIM_PWM_Init+0xc4>
 800459a:	f240 419d 	movw	r1, #1181	; 0x49d
 800459e:	4820      	ldr	r0, [pc, #128]	; (8004620 <HAL_TIM_PWM_Init+0x140>)
 80045a0:	f003 f9ee 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_TIM_PWM_Init+0xde>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b80      	cmp	r3, #128	; 0x80
 80045b2:	d004      	beq.n	80045be <HAL_TIM_PWM_Init+0xde>
 80045b4:	f240 419e 	movw	r1, #1182	; 0x49e
 80045b8:	4819      	ldr	r0, [pc, #100]	; (8004620 <HAL_TIM_PWM_Init+0x140>)
 80045ba:	f003 f9e1 	bl	8007980 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f826 	bl	8004624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f000 fe4a 	bl	8005284 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40010000 	.word	0x40010000
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800
 8004620:	08008b7c 	.word	0x08008b7c

08004624 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a4e      	ldr	r2, [pc, #312]	; (8004780 <HAL_TIM_PWM_Start+0x148>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d10b      	bne.n	8004664 <HAL_TIM_PWM_Start+0x2c>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d06c      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d069      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b08      	cmp	r3, #8
 800465c:	d066      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d063      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466c:	d10b      	bne.n	8004686 <HAL_TIM_PWM_Start+0x4e>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05b      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b04      	cmp	r3, #4
 8004678:	d058      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d055      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b0c      	cmp	r3, #12
 8004684:	d052      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3e      	ldr	r2, [pc, #248]	; (8004784 <HAL_TIM_PWM_Start+0x14c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10b      	bne.n	80046a8 <HAL_TIM_PWM_Start+0x70>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d04a      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d047      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d044      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d041      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a36      	ldr	r2, [pc, #216]	; (8004788 <HAL_TIM_PWM_Start+0x150>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10b      	bne.n	80046ca <HAL_TIM_PWM_Start+0x92>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d039      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d036      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d033      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b0c      	cmp	r3, #12
 80046c8:	d030      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2f      	ldr	r2, [pc, #188]	; (800478c <HAL_TIM_PWM_Start+0x154>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10b      	bne.n	80046ec <HAL_TIM_PWM_Start+0xb4>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d028      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d025      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d022      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d01f      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a27      	ldr	r2, [pc, #156]	; (8004790 <HAL_TIM_PWM_Start+0x158>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d105      	bne.n	8004702 <HAL_TIM_PWM_Start+0xca>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d017      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d014      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a23      	ldr	r2, [pc, #140]	; (8004794 <HAL_TIM_PWM_Start+0x15c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d102      	bne.n	8004712 <HAL_TIM_PWM_Start+0xda>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a20      	ldr	r2, [pc, #128]	; (8004798 <HAL_TIM_PWM_Start+0x160>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d102      	bne.n	8004722 <HAL_TIM_PWM_Start+0xea>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <HAL_TIM_PWM_Start+0xf4>
 8004722:	f240 5113 	movw	r1, #1299	; 0x513
 8004726:	481d      	ldr	r0, [pc, #116]	; (800479c <HAL_TIM_PWM_Start+0x164>)
 8004728:	f003 f92a 	bl	8007980 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f001 f8d5 	bl	80058e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a10      	ldr	r2, [pc, #64]	; (8004780 <HAL_TIM_PWM_Start+0x148>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d107      	bne.n	8004754 <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b06      	cmp	r3, #6
 8004764:	d007      	beq.n	8004776 <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40010000 	.word	0x40010000
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800
 800479c:	08008b7c 	.word	0x08008b7c

080047a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a5c      	ldr	r2, [pc, #368]	; (8004920 <HAL_TIM_PWM_Stop+0x180>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10b      	bne.n	80047cc <HAL_TIM_PWM_Stop+0x2c>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d06c      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d069      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d066      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	d063      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d4:	d10b      	bne.n	80047ee <HAL_TIM_PWM_Stop+0x4e>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d05b      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d058      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d055      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d052      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a4c      	ldr	r2, [pc, #304]	; (8004924 <HAL_TIM_PWM_Stop+0x184>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10b      	bne.n	8004810 <HAL_TIM_PWM_Stop+0x70>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04a      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b04      	cmp	r3, #4
 8004802:	d047      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b08      	cmp	r3, #8
 8004808:	d044      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d041      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a44      	ldr	r2, [pc, #272]	; (8004928 <HAL_TIM_PWM_Stop+0x188>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10b      	bne.n	8004832 <HAL_TIM_PWM_Stop+0x92>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d039      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d036      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d033      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b0c      	cmp	r3, #12
 8004830:	d030      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3d      	ldr	r2, [pc, #244]	; (800492c <HAL_TIM_PWM_Stop+0x18c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d10b      	bne.n	8004854 <HAL_TIM_PWM_Stop+0xb4>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d028      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d025      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b08      	cmp	r3, #8
 800484c:	d022      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d01f      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a35      	ldr	r2, [pc, #212]	; (8004930 <HAL_TIM_PWM_Stop+0x190>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d105      	bne.n	800486a <HAL_TIM_PWM_Stop+0xca>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d017      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b04      	cmp	r3, #4
 8004868:	d014      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a31      	ldr	r2, [pc, #196]	; (8004934 <HAL_TIM_PWM_Stop+0x194>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d102      	bne.n	800487a <HAL_TIM_PWM_Stop+0xda>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00c      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2e      	ldr	r2, [pc, #184]	; (8004938 <HAL_TIM_PWM_Stop+0x198>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d102      	bne.n	800488a <HAL_TIM_PWM_Stop+0xea>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <HAL_TIM_PWM_Stop+0xf4>
 800488a:	f240 5137 	movw	r1, #1335	; 0x537
 800488e:	482b      	ldr	r0, [pc, #172]	; (800493c <HAL_TIM_PWM_Stop+0x19c>)
 8004890:	f003 f876 	bl	8007980 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2200      	movs	r2, #0
 800489a:	6839      	ldr	r1, [r7, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f001 f821 	bl	80058e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <HAL_TIM_PWM_Stop+0x180>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d117      	bne.n	80048dc <HAL_TIM_PWM_Stop+0x13c>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80048b6:	4013      	ands	r3, r2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10f      	bne.n	80048dc <HAL_TIM_PWM_Stop+0x13c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a1a      	ldr	r2, [r3, #32]
 80048c2:	f240 4344 	movw	r3, #1092	; 0x444
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d107      	bne.n	80048dc <HAL_TIM_PWM_Stop+0x13c>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6a1a      	ldr	r2, [r3, #32]
 80048e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10f      	bne.n	800490c <HAL_TIM_PWM_Stop+0x16c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	f240 4344 	movw	r3, #1092	; 0x444
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d107      	bne.n	800490c <HAL_TIM_PWM_Stop+0x16c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40014000 	.word	0x40014000
 8004934:	40014400 	.word	0x40014400
 8004938:	40014800 	.word	0x40014800
 800493c:	08008b7c 	.word	0x08008b7c

08004940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d00d      	beq.n	8004974 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b08      	cmp	r3, #8
 800495c:	d00a      	beq.n	8004974 <HAL_TIM_PWM_ConfigChannel+0x34>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b0c      	cmp	r3, #12
 8004962:	d007      	beq.n	8004974 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b3c      	cmp	r3, #60	; 0x3c
 8004968:	d004      	beq.n	8004974 <HAL_TIM_PWM_ConfigChannel+0x34>
 800496a:	f640 51ec 	movw	r1, #3564	; 0xdec
 800496e:	4895      	ldr	r0, [pc, #596]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8004970:	f003 f806 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b60      	cmp	r3, #96	; 0x60
 800497a:	d008      	beq.n	800498e <HAL_TIM_PWM_ConfigChannel+0x4e>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b70      	cmp	r3, #112	; 0x70
 8004982:	d004      	beq.n	800498e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004984:	f640 51ed 	movw	r1, #3565	; 0xded
 8004988:	488e      	ldr	r0, [pc, #568]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800498a:	f002 fff9 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x68>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x68>
 800499e:	f640 51ee 	movw	r1, #3566	; 0xdee
 80049a2:	4888      	ldr	r0, [pc, #544]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80049a4:	f002 ffec 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d004      	beq.n	80049c2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80049b8:	f640 51ef 	movw	r1, #3567	; 0xdef
 80049bc:	4881      	ldr	r0, [pc, #516]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80049be:	f002 ffdf 	bl	8007980 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_PWM_ConfigChannel+0x90>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e152      	b.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x336>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	f200 813d 	bhi.w	8004c62 <HAL_TIM_PWM_ConfigChannel+0x322>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a25 	.word	0x08004a25
 80049f4:	08004c63 	.word	0x08004c63
 80049f8:	08004c63 	.word	0x08004c63
 80049fc:	08004c63 	.word	0x08004c63
 8004a00:	08004abf 	.word	0x08004abf
 8004a04:	08004c63 	.word	0x08004c63
 8004a08:	08004c63 	.word	0x08004c63
 8004a0c:	08004c63 	.word	0x08004c63
 8004a10:	08004b47 	.word	0x08004b47
 8004a14:	08004c63 	.word	0x08004c63
 8004a18:	08004c63 	.word	0x08004c63
 8004a1c:	08004c63 	.word	0x08004c63
 8004a20:	08004be5 	.word	0x08004be5
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a67      	ldr	r2, [pc, #412]	; (8004bc8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d027      	beq.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a36:	d022      	beq.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a63      	ldr	r2, [pc, #396]	; (8004bcc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01d      	beq.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a62      	ldr	r2, [pc, #392]	; (8004bd0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d018      	beq.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a60      	ldr	r2, [pc, #384]	; (8004bd4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a5f      	ldr	r2, [pc, #380]	; (8004bd8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00e      	beq.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a5d      	ldr	r2, [pc, #372]	; (8004bdc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d009      	beq.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5c      	ldr	r2, [pc, #368]	; (8004be0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8004a74:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8004a78:	4852      	ldr	r0, [pc, #328]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8004a7a:	f002 ff81 	bl	8007980 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fc7d 	bl	8005384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0208 	orr.w	r2, r2, #8
 8004a98:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0204 	bic.w	r2, r2, #4
 8004aa8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6999      	ldr	r1, [r3, #24]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	619a      	str	r2, [r3, #24]
      break;
 8004abc:	e0d2      	b.n	8004c64 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a41      	ldr	r2, [pc, #260]	; (8004bc8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01d      	beq.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad0:	d018      	beq.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a3d      	ldr	r2, [pc, #244]	; (8004bcc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a3b      	ldr	r2, [pc, #236]	; (8004bd0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3a      	ldr	r2, [pc, #232]	; (8004bd4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a38      	ldr	r2, [pc, #224]	; (8004bd8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8004afa:	f640 610c 	movw	r1, #3596	; 0xe0c
 8004afe:	4831      	ldr	r0, [pc, #196]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8004b00:	f002 ff3e 	bl	8007980 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fcca 	bl	80054a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6999      	ldr	r1, [r3, #24]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	619a      	str	r2, [r3, #24]
      break;
 8004b44:	e08e      	b.n	8004c64 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d018      	beq.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x242>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d013      	beq.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x242>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1b      	ldr	r2, [pc, #108]	; (8004bcc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00e      	beq.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x242>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a19      	ldr	r2, [pc, #100]	; (8004bd0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x242>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x242>
 8004b78:	f640 611d 	movw	r1, #3613	; 0xe1d
 8004b7c:	4811      	ldr	r0, [pc, #68]	; (8004bc4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8004b7e:	f002 feff 	bl	8007980 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fd1f 	bl	80055cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0208 	orr.w	r2, r2, #8
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0204 	bic.w	r2, r2, #4
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	61da      	str	r2, [r3, #28]
      break;
 8004bc0:	e050      	b.n	8004c64 <HAL_TIM_PWM_ConfigChannel+0x324>
 8004bc2:	bf00      	nop
 8004bc4:	08008b7c 	.word	0x08008b7c
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40000c00 	.word	0x40000c00
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a25      	ldr	r2, [pc, #148]	; (8004c80 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d018      	beq.n	8004c20 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf6:	d013      	beq.n	8004c20 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a21      	ldr	r2, [pc, #132]	; (8004c84 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8004c16:	f640 612e 	movw	r1, #3630	; 0xe2e
 8004c1a:	481d      	ldr	r0, [pc, #116]	; (8004c90 <HAL_TIM_PWM_ConfigChannel+0x350>)
 8004c1c:	f002 feb0 	bl	8007980 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fd64 	bl	80056f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69d9      	ldr	r1, [r3, #28]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	021a      	lsls	r2, r3, #8
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	61da      	str	r2, [r3, #28]
      break;
 8004c60:	e000      	b.n	8004c64 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 8004c62:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40000c00 	.word	0x40000c00
 8004c90:	08008b7c 	.word	0x08008b7c

08004c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIM_ConfigClockSource+0x18>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e2db      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x5d0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc4:	d029      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cce:	d024      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d020      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d01c      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d018      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b30      	cmp	r3, #48	; 0x30
 8004cee:	d014      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d010      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b50      	cmp	r3, #80	; 0x50
 8004cfe:	d00c      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b60      	cmp	r3, #96	; 0x60
 8004d06:	d008      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b70      	cmp	r3, #112	; 0x70
 8004d0e:	d004      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x86>
 8004d10:	f241 118b 	movw	r1, #4491	; 0x118b
 8004d14:	4873      	ldr	r0, [pc, #460]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x250>)
 8004d16:	f002 fe33 	bl	8007980 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d30:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	f000 8204 	beq.w	800514c <HAL_TIM_ConfigClockSource+0x4b8>
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d80f      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0xd4>
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	f000 8255 	beq.w	80051f8 <HAL_TIM_ConfigClockSource+0x564>
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d803      	bhi.n	8004d5a <HAL_TIM_ConfigClockSource+0xc6>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8250 	beq.w	80051f8 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004d58:	e27b      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	f000 824c 	beq.w	80051f8 <HAL_TIM_ConfigClockSource+0x564>
 8004d60:	2b30      	cmp	r3, #48	; 0x30
 8004d62:	f000 8249 	beq.w	80051f8 <HAL_TIM_ConfigClockSource+0x564>
      break;
 8004d66:	e274      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8004d68:	2b70      	cmp	r3, #112	; 0x70
 8004d6a:	d046      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x166>
 8004d6c:	2b70      	cmp	r3, #112	; 0x70
 8004d6e:	d806      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0xea>
 8004d70:	2b50      	cmp	r3, #80	; 0x50
 8004d72:	f000 8133 	beq.w	8004fdc <HAL_TIM_ConfigClockSource+0x348>
 8004d76:	2b60      	cmp	r3, #96	; 0x60
 8004d78:	f000 8186 	beq.w	8005088 <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8004d7c:	e269      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8004d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d82:	d004      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0xfa>
 8004d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d88:	f000 80bc 	beq.w	8004f04 <HAL_TIM_ConfigClockSource+0x270>
      break;
 8004d8c:	e261      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a55      	ldr	r2, [pc, #340]	; (8004ee8 <HAL_TIM_ConfigClockSource+0x254>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	f000 825b 	beq.w	8005250 <HAL_TIM_ConfigClockSource+0x5bc>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	f000 8255 	beq.w	8005250 <HAL_TIM_ConfigClockSource+0x5bc>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a50      	ldr	r2, [pc, #320]	; (8004eec <HAL_TIM_ConfigClockSource+0x258>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	f000 824f 	beq.w	8005250 <HAL_TIM_ConfigClockSource+0x5bc>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a4e      	ldr	r2, [pc, #312]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x25c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	f000 8249 	beq.w	8005250 <HAL_TIM_ConfigClockSource+0x5bc>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a4c      	ldr	r2, [pc, #304]	; (8004ef4 <HAL_TIM_ConfigClockSource+0x260>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	f000 8243 	beq.w	8005250 <HAL_TIM_ConfigClockSource+0x5bc>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a4a      	ldr	r2, [pc, #296]	; (8004ef8 <HAL_TIM_ConfigClockSource+0x264>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	f000 823d 	beq.w	8005250 <HAL_TIM_ConfigClockSource+0x5bc>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a48      	ldr	r2, [pc, #288]	; (8004efc <HAL_TIM_ConfigClockSource+0x268>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	f000 8237 	beq.w	8005250 <HAL_TIM_ConfigClockSource+0x5bc>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a46      	ldr	r2, [pc, #280]	; (8004f00 <HAL_TIM_ConfigClockSource+0x26c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	f000 8231 	beq.w	8005250 <HAL_TIM_ConfigClockSource+0x5bc>
 8004dee:	f241 1197 	movw	r1, #4503	; 0x1197
 8004df2:	483c      	ldr	r0, [pc, #240]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x250>)
 8004df4:	f002 fdc4 	bl	8007980 <assert_failed>
      break;
 8004df8:	e22a      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <HAL_TIM_ConfigClockSource+0x254>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d01d      	beq.n	8004e40 <HAL_TIM_ConfigClockSource+0x1ac>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d018      	beq.n	8004e40 <HAL_TIM_ConfigClockSource+0x1ac>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a36      	ldr	r2, [pc, #216]	; (8004eec <HAL_TIM_ConfigClockSource+0x258>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d013      	beq.n	8004e40 <HAL_TIM_ConfigClockSource+0x1ac>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a34      	ldr	r2, [pc, #208]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x25c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00e      	beq.n	8004e40 <HAL_TIM_ConfigClockSource+0x1ac>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a33      	ldr	r2, [pc, #204]	; (8004ef4 <HAL_TIM_ConfigClockSource+0x260>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_TIM_ConfigClockSource+0x1ac>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a31      	ldr	r2, [pc, #196]	; (8004ef8 <HAL_TIM_ConfigClockSource+0x264>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_TIM_ConfigClockSource+0x1ac>
 8004e36:	f241 119e 	movw	r1, #4510	; 0x119e
 8004e3a:	482a      	ldr	r0, [pc, #168]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x250>)
 8004e3c:	f002 fda0 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x1dc>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e50:	d00e      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x1dc>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5a:	d009      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x1dc>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e64:	d004      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x1dc>
 8004e66:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8004e6a:	481e      	ldr	r0, [pc, #120]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x250>)
 8004e6c:	f002 fd88 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e78:	d014      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x210>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x210>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x210>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d008      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x210>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b0a      	cmp	r3, #10
 8004e98:	d004      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x210>
 8004e9a:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8004e9e:	4811      	ldr	r0, [pc, #68]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x250>)
 8004ea0:	f002 fd6e 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b0f      	cmp	r3, #15
 8004eaa:	d904      	bls.n	8004eb6 <HAL_TIM_ConfigClockSource+0x222>
 8004eac:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8004eb0:	480c      	ldr	r0, [pc, #48]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x250>)
 8004eb2:	f002 fd65 	bl	8007980 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f000 fced 	bl	80058a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ed8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	609a      	str	r2, [r3, #8]
      break;
 8004ee2:	e1b6      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
 8004ee4:	08008b7c 	.word	0x08008b7c
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	40000c00 	.word	0x40000c00
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40014400 	.word	0x40014400
 8004f00:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a8a      	ldr	r2, [pc, #552]	; (8005134 <HAL_TIM_ConfigClockSource+0x4a0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d018      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x2ac>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f16:	d013      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x2ac>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a86      	ldr	r2, [pc, #536]	; (8005138 <HAL_TIM_ConfigClockSource+0x4a4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00e      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x2ac>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a85      	ldr	r2, [pc, #532]	; (800513c <HAL_TIM_ConfigClockSource+0x4a8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d009      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x2ac>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a83      	ldr	r2, [pc, #524]	; (8005140 <HAL_TIM_ConfigClockSource+0x4ac>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x2ac>
 8004f36:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8004f3a:	4882      	ldr	r0, [pc, #520]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 8004f3c:	f002 fd20 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_TIM_ConfigClockSource+0x2dc>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f50:	d00e      	beq.n	8004f70 <HAL_TIM_ConfigClockSource+0x2dc>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5a:	d009      	beq.n	8004f70 <HAL_TIM_ConfigClockSource+0x2dc>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f64:	d004      	beq.n	8004f70 <HAL_TIM_ConfigClockSource+0x2dc>
 8004f66:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8004f6a:	4876      	ldr	r0, [pc, #472]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 8004f6c:	f002 fd08 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f78:	d014      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0x310>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d010      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0x310>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00c      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0x310>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d008      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0x310>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b0a      	cmp	r3, #10
 8004f98:	d004      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0x310>
 8004f9a:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8004f9e:	4869      	ldr	r0, [pc, #420]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 8004fa0:	f002 fcee 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b0f      	cmp	r3, #15
 8004faa:	d904      	bls.n	8004fb6 <HAL_TIM_ConfigClockSource+0x322>
 8004fac:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8004fb0:	4864      	ldr	r0, [pc, #400]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 8004fb2:	f002 fce5 	bl	8007980 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f000 fc6d 	bl	80058a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fd8:	609a      	str	r2, [r3, #8]
      break;
 8004fda:	e13a      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a54      	ldr	r2, [pc, #336]	; (8005134 <HAL_TIM_ConfigClockSource+0x4a0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01d      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x38e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d018      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x38e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a50      	ldr	r2, [pc, #320]	; (8005138 <HAL_TIM_ConfigClockSource+0x4a4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x38e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a4f      	ldr	r2, [pc, #316]	; (800513c <HAL_TIM_ConfigClockSource+0x4a8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x38e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a4d      	ldr	r2, [pc, #308]	; (8005140 <HAL_TIM_ConfigClockSource+0x4ac>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x38e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a4d      	ldr	r2, [pc, #308]	; (8005148 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x38e>
 8005018:	f241 11ca 	movw	r1, #4554	; 0x11ca
 800501c:	4849      	ldr	r0, [pc, #292]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 800501e:	f002 fcaf 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502a:	d014      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x3c2>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x3c2>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00c      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x3c2>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d008      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x3c2>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b0a      	cmp	r3, #10
 800504a:	d004      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x3c2>
 800504c:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8005050:	483c      	ldr	r0, [pc, #240]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 8005052:	f002 fc95 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b0f      	cmp	r3, #15
 800505c:	d904      	bls.n	8005068 <HAL_TIM_ConfigClockSource+0x3d4>
 800505e:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8005062:	4838      	ldr	r0, [pc, #224]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 8005064:	f002 fc8c 	bl	8007980 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6859      	ldr	r1, [r3, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	461a      	mov	r2, r3
 8005076:	f000 fb9b 	bl	80057b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2150      	movs	r1, #80	; 0x50
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fbf4 	bl	800586e <TIM_ITRx_SetConfig>
      break;
 8005086:	e0e4      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a29      	ldr	r2, [pc, #164]	; (8005134 <HAL_TIM_ConfigClockSource+0x4a0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01d      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x43a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d018      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x43a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a25      	ldr	r2, [pc, #148]	; (8005138 <HAL_TIM_ConfigClockSource+0x4a4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x43a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a24      	ldr	r2, [pc, #144]	; (800513c <HAL_TIM_ConfigClockSource+0x4a8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x43a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a22      	ldr	r2, [pc, #136]	; (8005140 <HAL_TIM_ConfigClockSource+0x4ac>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x43a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a22      	ldr	r2, [pc, #136]	; (8005148 <HAL_TIM_ConfigClockSource+0x4b4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x43a>
 80050c4:	f241 11da 	movw	r1, #4570	; 0x11da
 80050c8:	481e      	ldr	r0, [pc, #120]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 80050ca:	f002 fc59 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d6:	d014      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x46e>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x46e>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x46e>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d008      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x46e>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b0a      	cmp	r3, #10
 80050f6:	d004      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x46e>
 80050f8:	f241 11dd 	movw	r1, #4573	; 0x11dd
 80050fc:	4811      	ldr	r0, [pc, #68]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 80050fe:	f002 fc3f 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b0f      	cmp	r3, #15
 8005108:	d904      	bls.n	8005114 <HAL_TIM_ConfigClockSource+0x480>
 800510a:	f241 11de 	movw	r1, #4574	; 0x11de
 800510e:	480d      	ldr	r0, [pc, #52]	; (8005144 <HAL_TIM_ConfigClockSource+0x4b0>)
 8005110:	f002 fc36 	bl	8007980 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6859      	ldr	r1, [r3, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	461a      	mov	r2, r3
 8005122:	f000 fb74 	bl	800580e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2160      	movs	r1, #96	; 0x60
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fb9e 	bl	800586e <TIM_ITRx_SetConfig>
      break;
 8005132:	e08e      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	08008b7c 	.word	0x08008b7c
 8005148:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a46      	ldr	r2, [pc, #280]	; (800526c <HAL_TIM_ConfigClockSource+0x5d8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d01d      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x4fe>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d018      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x4fe>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a42      	ldr	r2, [pc, #264]	; (8005270 <HAL_TIM_ConfigClockSource+0x5dc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x4fe>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a41      	ldr	r2, [pc, #260]	; (8005274 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00e      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x4fe>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3f      	ldr	r2, [pc, #252]	; (8005278 <HAL_TIM_ConfigClockSource+0x5e4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d009      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x4fe>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a3e      	ldr	r2, [pc, #248]	; (800527c <HAL_TIM_ConfigClockSource+0x5e8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d004      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x4fe>
 8005188:	f241 11ea 	movw	r1, #4586	; 0x11ea
 800518c:	483c      	ldr	r0, [pc, #240]	; (8005280 <HAL_TIM_ConfigClockSource+0x5ec>)
 800518e:	f002 fbf7 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519a:	d014      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x532>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x532>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x532>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d008      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x532>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b0a      	cmp	r3, #10
 80051ba:	d004      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x532>
 80051bc:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80051c0:	482f      	ldr	r0, [pc, #188]	; (8005280 <HAL_TIM_ConfigClockSource+0x5ec>)
 80051c2:	f002 fbdd 	bl	8007980 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	d904      	bls.n	80051d8 <HAL_TIM_ConfigClockSource+0x544>
 80051ce:	f241 11ee 	movw	r1, #4590	; 0x11ee
 80051d2:	482b      	ldr	r0, [pc, #172]	; (8005280 <HAL_TIM_ConfigClockSource+0x5ec>)
 80051d4:	f002 fbd4 	bl	8007980 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f000 fae3 	bl	80057b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2140      	movs	r1, #64	; 0x40
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fb3c 	bl	800586e <TIM_ITRx_SetConfig>
      break;
 80051f6:	e02c      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1b      	ldr	r2, [pc, #108]	; (800526c <HAL_TIM_ConfigClockSource+0x5d8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01d      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x5aa>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d018      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x5aa>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <HAL_TIM_ConfigClockSource+0x5dc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x5aa>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a16      	ldr	r2, [pc, #88]	; (8005274 <HAL_TIM_ConfigClockSource+0x5e0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00e      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x5aa>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <HAL_TIM_ConfigClockSource+0x5e4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d009      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x5aa>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a13      	ldr	r2, [pc, #76]	; (800527c <HAL_TIM_ConfigClockSource+0x5e8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d004      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x5aa>
 8005234:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8005238:	4811      	ldr	r0, [pc, #68]	; (8005280 <HAL_TIM_ConfigClockSource+0x5ec>)
 800523a:	f002 fba1 	bl	8007980 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f000 fb10 	bl	800586e <TIM_ITRx_SetConfig>
      break;
 800524e:	e000      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x5be>
      break;
 8005250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40010000 	.word	0x40010000
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40014000 	.word	0x40014000
 8005280:	08008b7c 	.word	0x08008b7c

08005284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a34      	ldr	r2, [pc, #208]	; (8005368 <TIM_Base_SetConfig+0xe4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00f      	beq.n	80052bc <TIM_Base_SetConfig+0x38>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a2:	d00b      	beq.n	80052bc <TIM_Base_SetConfig+0x38>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a31      	ldr	r2, [pc, #196]	; (800536c <TIM_Base_SetConfig+0xe8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_Base_SetConfig+0x38>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a30      	ldr	r2, [pc, #192]	; (8005370 <TIM_Base_SetConfig+0xec>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0x38>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a2f      	ldr	r2, [pc, #188]	; (8005374 <TIM_Base_SetConfig+0xf0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a25      	ldr	r2, [pc, #148]	; (8005368 <TIM_Base_SetConfig+0xe4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01b      	beq.n	800530e <TIM_Base_SetConfig+0x8a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052dc:	d017      	beq.n	800530e <TIM_Base_SetConfig+0x8a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a22      	ldr	r2, [pc, #136]	; (800536c <TIM_Base_SetConfig+0xe8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <TIM_Base_SetConfig+0x8a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a21      	ldr	r2, [pc, #132]	; (8005370 <TIM_Base_SetConfig+0xec>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00f      	beq.n	800530e <TIM_Base_SetConfig+0x8a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a20      	ldr	r2, [pc, #128]	; (8005374 <TIM_Base_SetConfig+0xf0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00b      	beq.n	800530e <TIM_Base_SetConfig+0x8a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <TIM_Base_SetConfig+0xf4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_Base_SetConfig+0x8a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1e      	ldr	r2, [pc, #120]	; (800537c <TIM_Base_SetConfig+0xf8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_Base_SetConfig+0x8a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <TIM_Base_SetConfig+0xfc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d108      	bne.n	8005320 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a08      	ldr	r2, [pc, #32]	; (8005368 <TIM_Base_SetConfig+0xe4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d103      	bne.n	8005354 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	615a      	str	r2, [r3, #20]
}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40010000 	.word	0x40010000
 800536c:	40000400 	.word	0x40000400
 8005370:	40000800 	.word	0x40000800
 8005374:	40000c00 	.word	0x40000c00
 8005378:	40014000 	.word	0x40014000
 800537c:	40014400 	.word	0x40014400
 8005380:	40014800 	.word	0x40014800

08005384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 0302 	bic.w	r3, r3, #2
 80053cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a30      	ldr	r2, [pc, #192]	; (800549c <TIM_OC1_SetConfig+0x118>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d119      	bne.n	8005414 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <TIM_OC1_SetConfig+0x76>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d004      	beq.n	80053fa <TIM_OC1_SetConfig+0x76>
 80053f0:	f241 7102 	movw	r1, #5890	; 0x1702
 80053f4:	482a      	ldr	r0, [pc, #168]	; (80054a0 <TIM_OC1_SetConfig+0x11c>)
 80053f6:	f002 fac3 	bl	8007980 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 0308 	bic.w	r3, r3, #8
 8005400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0304 	bic.w	r3, r3, #4
 8005412:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a21      	ldr	r2, [pc, #132]	; (800549c <TIM_OC1_SetConfig+0x118>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d12d      	bne.n	8005478 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005424:	d008      	beq.n	8005438 <TIM_OC1_SetConfig+0xb4>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <TIM_OC1_SetConfig+0xb4>
 800542e:	f241 710f 	movw	r1, #5903	; 0x170f
 8005432:	481b      	ldr	r0, [pc, #108]	; (80054a0 <TIM_OC1_SetConfig+0x11c>)
 8005434:	f002 faa4 	bl	8007980 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005440:	d008      	beq.n	8005454 <TIM_OC1_SetConfig+0xd0>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d004      	beq.n	8005454 <TIM_OC1_SetConfig+0xd0>
 800544a:	f241 7110 	movw	r1, #5904	; 0x1710
 800544e:	4814      	ldr	r0, [pc, #80]	; (80054a0 <TIM_OC1_SetConfig+0x11c>)
 8005450:	f002 fa96 	bl	8007980 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800545a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40010000 	.word	0x40010000
 80054a0:	08008b7c 	.word	0x08008b7c

080054a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f023 0210 	bic.w	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0320 	bic.w	r3, r3, #32
 80054ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a31      	ldr	r2, [pc, #196]	; (80055c4 <TIM_OC2_SetConfig+0x120>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d11a      	bne.n	800553a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <TIM_OC2_SetConfig+0x7a>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d004      	beq.n	800551e <TIM_OC2_SetConfig+0x7a>
 8005514:	f241 714d 	movw	r1, #5965	; 0x174d
 8005518:	482b      	ldr	r0, [pc, #172]	; (80055c8 <TIM_OC2_SetConfig+0x124>)
 800551a:	f002 fa31 	bl	8007980 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005538:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <TIM_OC2_SetConfig+0x120>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d12f      	bne.n	80055a2 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800554a:	d008      	beq.n	800555e <TIM_OC2_SetConfig+0xba>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <TIM_OC2_SetConfig+0xba>
 8005554:	f241 715b 	movw	r1, #5979	; 0x175b
 8005558:	481b      	ldr	r0, [pc, #108]	; (80055c8 <TIM_OC2_SetConfig+0x124>)
 800555a:	f002 fa11 	bl	8007980 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005566:	d008      	beq.n	800557a <TIM_OC2_SetConfig+0xd6>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <TIM_OC2_SetConfig+0xd6>
 8005570:	f241 715c 	movw	r1, #5980	; 0x175c
 8005574:	4814      	ldr	r0, [pc, #80]	; (80055c8 <TIM_OC2_SetConfig+0x124>)
 8005576:	f002 fa03 	bl	8007980 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40010000 	.word	0x40010000
 80055c8:	08008b7c 	.word	0x08008b7c

080055cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0303 	bic.w	r3, r3, #3
 8005602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a31      	ldr	r2, [pc, #196]	; (80056ec <TIM_OC3_SetConfig+0x120>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d11a      	bne.n	8005660 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <TIM_OC3_SetConfig+0x78>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	2b08      	cmp	r3, #8
 8005638:	d004      	beq.n	8005644 <TIM_OC3_SetConfig+0x78>
 800563a:	f241 7198 	movw	r1, #6040	; 0x1798
 800563e:	482c      	ldr	r0, [pc, #176]	; (80056f0 <TIM_OC3_SetConfig+0x124>)
 8005640:	f002 f99e 	bl	8007980 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800564a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800565e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a22      	ldr	r2, [pc, #136]	; (80056ec <TIM_OC3_SetConfig+0x120>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d12f      	bne.n	80056c8 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005670:	d008      	beq.n	8005684 <TIM_OC3_SetConfig+0xb8>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <TIM_OC3_SetConfig+0xb8>
 800567a:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800567e:	481c      	ldr	r0, [pc, #112]	; (80056f0 <TIM_OC3_SetConfig+0x124>)
 8005680:	f002 f97e 	bl	8007980 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568c:	d008      	beq.n	80056a0 <TIM_OC3_SetConfig+0xd4>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <TIM_OC3_SetConfig+0xd4>
 8005696:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800569a:	4815      	ldr	r0, [pc, #84]	; (80056f0 <TIM_OC3_SetConfig+0x124>)
 800569c:	f002 f970 	bl	8007980 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40010000 	.word	0x40010000
 80056f0:	08008b7c 	.word	0x08008b7c

080056f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800573e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	031b      	lsls	r3, r3, #12
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <TIM_OC4_SetConfig+0xb4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d117      	bne.n	8005784 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575c:	d008      	beq.n	8005770 <TIM_OC4_SetConfig+0x7c>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <TIM_OC4_SetConfig+0x7c>
 8005766:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800576a:	4810      	ldr	r0, [pc, #64]	; (80057ac <TIM_OC4_SetConfig+0xb8>)
 800576c:	f002 f908 	bl	8007980 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	019b      	lsls	r3, r3, #6
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40010000 	.word	0x40010000
 80057ac:	08008b7c 	.word	0x08008b7c

080057b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f023 0201 	bic.w	r2, r3, #1
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f023 030a 	bic.w	r3, r3, #10
 80057ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	bf00      	nop
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800580e:	b480      	push	{r7}
 8005810:	b087      	sub	sp, #28
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f023 0210 	bic.w	r2, r3, #16
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005838:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	031b      	lsls	r3, r3, #12
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800584a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	f043 0307 	orr.w	r3, r3, #7
 8005890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	021a      	lsls	r2, r3, #8
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	609a      	str	r2, [r3, #8]
}
 80058d8:	bf00      	nop
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a2a      	ldr	r2, [pc, #168]	; (800599c <TIM_CCxChannelCmd+0xb8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d020      	beq.n	800593a <TIM_CCxChannelCmd+0x56>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fe:	d01c      	beq.n	800593a <TIM_CCxChannelCmd+0x56>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <TIM_CCxChannelCmd+0xbc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <TIM_CCxChannelCmd+0x56>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a26      	ldr	r2, [pc, #152]	; (80059a4 <TIM_CCxChannelCmd+0xc0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d014      	beq.n	800593a <TIM_CCxChannelCmd+0x56>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a25      	ldr	r2, [pc, #148]	; (80059a8 <TIM_CCxChannelCmd+0xc4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d010      	beq.n	800593a <TIM_CCxChannelCmd+0x56>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a24      	ldr	r2, [pc, #144]	; (80059ac <TIM_CCxChannelCmd+0xc8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00c      	beq.n	800593a <TIM_CCxChannelCmd+0x56>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a23      	ldr	r2, [pc, #140]	; (80059b0 <TIM_CCxChannelCmd+0xcc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d008      	beq.n	800593a <TIM_CCxChannelCmd+0x56>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a22      	ldr	r2, [pc, #136]	; (80059b4 <TIM_CCxChannelCmd+0xd0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <TIM_CCxChannelCmd+0x56>
 8005930:	f641 11cc 	movw	r1, #6604	; 0x19cc
 8005934:	4820      	ldr	r0, [pc, #128]	; (80059b8 <TIM_CCxChannelCmd+0xd4>)
 8005936:	f002 f823 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d010      	beq.n	8005962 <TIM_CCxChannelCmd+0x7e>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d00d      	beq.n	8005962 <TIM_CCxChannelCmd+0x7e>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d00a      	beq.n	8005962 <TIM_CCxChannelCmd+0x7e>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b0c      	cmp	r3, #12
 8005950:	d007      	beq.n	8005962 <TIM_CCxChannelCmd+0x7e>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b3c      	cmp	r3, #60	; 0x3c
 8005956:	d004      	beq.n	8005962 <TIM_CCxChannelCmd+0x7e>
 8005958:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800595c:	4816      	ldr	r0, [pc, #88]	; (80059b8 <TIM_CCxChannelCmd+0xd4>)
 800595e:	f002 f80f 	bl	8007980 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	2201      	movs	r2, #1
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	43db      	mvns	r3, r3
 8005978:	401a      	ands	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f003 031f 	and.w	r3, r3, #31
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	fa01 f303 	lsl.w	r3, r1, r3
 800598e:	431a      	orrs	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	621a      	str	r2, [r3, #32]
}
 8005994:	bf00      	nop
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40010000 	.word	0x40010000
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40000800 	.word	0x40000800
 80059a8:	40000c00 	.word	0x40000c00
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800
 80059b8:	08008b7c 	.word	0x08008b7c

080059bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a55      	ldr	r2, [pc, #340]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d018      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d8:	d013      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a51      	ldr	r2, [pc, #324]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a4f      	ldr	r2, [pc, #316]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d009      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a4e      	ldr	r2, [pc, #312]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80059f8:	f240 6164 	movw	r1, #1636	; 0x664
 80059fc:	484c      	ldr	r0, [pc, #304]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80059fe:	f001 ffbf 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d020      	beq.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b10      	cmp	r3, #16
 8005a10:	d01c      	beq.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d018      	beq.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b30      	cmp	r3, #48	; 0x30
 8005a20:	d014      	beq.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d010      	beq.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b50      	cmp	r3, #80	; 0x50
 8005a30:	d00c      	beq.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b60      	cmp	r3, #96	; 0x60
 8005a38:	d008      	beq.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b70      	cmp	r3, #112	; 0x70
 8005a40:	d004      	beq.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005a42:	f240 6165 	movw	r1, #1637	; 0x665
 8005a46:	483a      	ldr	r0, [pc, #232]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8005a48:	f001 ff9a 	bl	8007980 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	d008      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8005a5c:	f240 6166 	movw	r1, #1638	; 0x666
 8005a60:	4833      	ldr	r0, [pc, #204]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8005a62:	f001 ff8d 	bl	8007980 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e050      	b.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1b      	ldr	r2, [pc, #108]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d018      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d013      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00e      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a14      	ldr	r2, [pc, #80]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d004      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a13      	ldr	r2, [pc, #76]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10c      	bne.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800
 8005b2c:	40000c00 	.word	0x40000c00
 8005b30:	08008bb4 	.word	0x08008bb4
 8005b34:	40014000 	.word	0x40014000

08005b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e0a0      	b.n	8005c8c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02c      	beq.n	8005bac <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a4f      	ldr	r2, [pc, #316]	; (8005c94 <HAL_UART_Init+0x15c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_UART_Init+0x42>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a4d      	ldr	r2, [pc, #308]	; (8005c98 <HAL_UART_Init+0x160>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_UART_Init+0x42>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a4c      	ldr	r2, [pc, #304]	; (8005c9c <HAL_UART_Init+0x164>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_UART_Init+0x42>
 8005b70:	f240 114b 	movw	r1, #331	; 0x14b
 8005b74:	484a      	ldr	r0, [pc, #296]	; (8005ca0 <HAL_UART_Init+0x168>)
 8005b76:	f001 ff03 	bl	8007980 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d028      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8a:	d023      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b94:	d01e      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9e:	d019      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005ba0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005ba4:	483e      	ldr	r0, [pc, #248]	; (8005ca0 <HAL_UART_Init+0x168>)
 8005ba6:	f001 feeb 	bl	8007980 <assert_failed>
 8005baa:	e013      	b.n	8005bd4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a38      	ldr	r2, [pc, #224]	; (8005c94 <HAL_UART_Init+0x15c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a37      	ldr	r2, [pc, #220]	; (8005c98 <HAL_UART_Init+0x160>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a35      	ldr	r2, [pc, #212]	; (8005c9c <HAL_UART_Init+0x164>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_UART_Init+0x9c>
 8005bca:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8005bce:	4834      	ldr	r0, [pc, #208]	; (8005ca0 <HAL_UART_Init+0x168>)
 8005bd0:	f001 fed6 	bl	8007980 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <HAL_UART_Init+0xb8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be4:	d004      	beq.n	8005bf0 <HAL_UART_Init+0xb8>
 8005be6:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8005bea:	482d      	ldr	r0, [pc, #180]	; (8005ca0 <HAL_UART_Init+0x168>)
 8005bec:	f001 fec8 	bl	8007980 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <HAL_UART_Init+0xd4>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c00:	d004      	beq.n	8005c0c <HAL_UART_Init+0xd4>
 8005c02:	f240 1153 	movw	r1, #339	; 0x153
 8005c06:	4826      	ldr	r0, [pc, #152]	; (8005ca0 <HAL_UART_Init+0x168>)
 8005c08:	f001 feba 	bl	8007980 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 ffab 	bl	8007b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2224      	movs	r2, #36	; 0x24
 8005c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fd18 	bl	8006674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40011000 	.word	0x40011000
 8005c98:	40004400 	.word	0x40004400
 8005c9c:	40011400 	.word	0x40011400
 8005ca0:	08008bf0 	.word	0x08008bf0

08005ca4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	f040 8083 	bne.w	8005dcc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_UART_Transmit+0x2e>
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e07b      	b.n	8005dce <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_UART_Transmit+0x40>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e074      	b.n	8005dce <HAL_UART_Transmit+0x12a>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2221      	movs	r2, #33	; 0x21
 8005cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005cfa:	f7fa fcaf 	bl	800065c <HAL_GetTick>
 8005cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	88fa      	ldrh	r2, [r7, #6]
 8005d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	88fa      	ldrh	r2, [r7, #6]
 8005d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005d14:	e042      	b.n	8005d9c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2c:	d122      	bne.n	8005d74 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fb1a 	bl	8006372 <UART_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e042      	b.n	8005dce <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d103      	bne.n	8005d6c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	3302      	adds	r3, #2
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	e017      	b.n	8005d9c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	e013      	b.n	8005d9c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2180      	movs	r1, #128	; 0x80
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 faf7 	bl	8006372 <UART_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e01f      	b.n	8005dce <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	60ba      	str	r2, [r7, #8]
 8005d94:	781a      	ldrb	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1b7      	bne.n	8005d16 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	2140      	movs	r1, #64	; 0x40
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fade 	bl	8006372 <UART_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e006      	b.n	8005dce <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
  }
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d153      	bne.n	8005e9a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_UART_Transmit_DMA+0x26>
 8005df8:	88fb      	ldrh	r3, [r7, #6]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e04c      	b.n	8005e9c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_UART_Transmit_DMA+0x38>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e045      	b.n	8005e9c <HAL_UART_Transmit_DMA+0xc4>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2221      	movs	r2, #33	; 0x21
 8005e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <HAL_UART_Transmit_DMA+0xcc>)
 8005e3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <HAL_UART_Transmit_DMA+0xd0>)
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	4a17      	ldr	r2, [pc, #92]	; (8005eac <HAL_UART_Transmit_DMA+0xd4>)
 8005e4e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	2200      	movs	r2, #0
 8005e56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005e58:	f107 0308 	add.w	r3, r7, #8
 8005e5c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	f7fa fff4 	bl	8000e5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e7c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695a      	ldr	r2, [r3, #20]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e94:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e000      	b.n	8005e9c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
  }
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	080061ed 	.word	0x080061ed
 8005ea8:	0800623f 	.word	0x0800623f
 8005eac:	080062df 	.word	0x080062df

08005eb0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d166      	bne.n	8005f98 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_UART_Receive_DMA+0x26>
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e05f      	b.n	8005f9a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UART_Receive_DMA+0x38>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e058      	b.n	8005f9a <HAL_UART_Receive_DMA+0xea>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2222      	movs	r2, #34	; 0x22
 8005f06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	4a25      	ldr	r2, [pc, #148]	; (8005fa4 <HAL_UART_Receive_DMA+0xf4>)
 8005f10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	4a24      	ldr	r2, [pc, #144]	; (8005fa8 <HAL_UART_Receive_DMA+0xf8>)
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	4a23      	ldr	r2, [pc, #140]	; (8005fac <HAL_UART_Receive_DMA+0xfc>)
 8005f20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	2200      	movs	r2, #0
 8005f28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005f2a:	f107 0308 	add.w	r3, r7, #8
 8005f2e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	f7fa ff8b 	bl	8000e5c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005f46:	2300      	movs	r3, #0
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f72:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f92:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	0800625b 	.word	0x0800625b
 8005fa8:	080062c3 	.word	0x080062c3
 8005fac:	080062df 	.word	0x080062df

08005fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10d      	bne.n	8006002 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <HAL_UART_IRQHandler+0x52>
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fab9 	bl	8006572 <UART_Receive_IT>
      return;
 8006000:	e0d1      	b.n	80061a6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 80b0 	beq.w	800616a <HAL_UART_IRQHandler+0x1ba>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d105      	bne.n	8006020 <HAL_UART_IRQHandler+0x70>
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80a5 	beq.w	800616a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <HAL_UART_IRQHandler+0x90>
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006038:	f043 0201 	orr.w	r2, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <HAL_UART_IRQHandler+0xb0>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006058:	f043 0202 	orr.w	r2, r3, #2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_UART_IRQHandler+0xd0>
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006078:	f043 0204 	orr.w	r2, r3, #4
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00f      	beq.n	80060aa <HAL_UART_IRQHandler+0xfa>
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <HAL_UART_IRQHandler+0xee>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	f043 0208 	orr.w	r2, r3, #8
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d078      	beq.n	80061a4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <HAL_UART_IRQHandler+0x11c>
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa53 	bl	8006572 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <HAL_UART_IRQHandler+0x144>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d031      	beq.n	8006158 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f99c 	bl	8006432 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006104:	2b40      	cmp	r3, #64	; 0x40
 8006106:	d123      	bne.n	8006150 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695a      	ldr	r2, [r3, #20]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006116:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	2b00      	cmp	r3, #0
 800611e:	d013      	beq.n	8006148 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006124:	4a21      	ldr	r2, [pc, #132]	; (80061ac <HAL_UART_IRQHandler+0x1fc>)
 8006126:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa fefb 	bl	8000f28 <HAL_DMA_Abort_IT>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d016      	beq.n	8006166 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006142:	4610      	mov	r0, r2
 8006144:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006146:	e00e      	b.n	8006166 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f845 	bl	80061d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614e:	e00a      	b.n	8006166 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f841 	bl	80061d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006156:	e006      	b.n	8006166 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f83d 	bl	80061d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006164:	e01e      	b.n	80061a4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006166:	bf00      	nop
    return;
 8006168:	e01c      	b.n	80061a4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_UART_IRQHandler+0x1d6>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f989 	bl	8006496 <UART_Transmit_IT>
    return;
 8006184:	e00f      	b.n	80061a6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1f6>
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9d1 	bl	8006542 <UART_EndTransmit_IT>
    return;
 80061a0:	bf00      	nop
 80061a2:	e000      	b.n	80061a6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80061a4:	bf00      	nop
  }
}
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	0800646f 	.word	0x0800646f

080061b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006204:	2b00      	cmp	r3, #0
 8006206:	d113      	bne.n	8006230 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800621c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800622c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800622e:	e002      	b.n	8006236 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f001 fae7 	bl	8007804 <HAL_UART_TxCpltCallback>
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff ffaf 	bl	80061b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d11e      	bne.n	80062b4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800628a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062aa:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f001 faaf 	bl	8007818 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff ff77 	bl	80061c4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fa:	2b80      	cmp	r3, #128	; 0x80
 80062fc:	bf0c      	ite	eq
 80062fe:	2301      	moveq	r3, #1
 8006300:	2300      	movne	r3, #0
 8006302:	b2db      	uxtb	r3, r3
 8006304:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b21      	cmp	r3, #33	; 0x21
 8006310:	d108      	bne.n	8006324 <UART_DMAError+0x46>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2200      	movs	r2, #0
 800631c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800631e:	68b8      	ldr	r0, [r7, #8]
 8006320:	f000 f871 	bl	8006406 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	bf0c      	ite	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	2300      	movne	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b22      	cmp	r3, #34	; 0x22
 8006344:	d108      	bne.n	8006358 <UART_DMAError+0x7a>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2200      	movs	r2, #0
 8006350:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006352:	68b8      	ldr	r0, [r7, #8]
 8006354:	f000 f86d 	bl	8006432 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635c:	f043 0210 	orr.w	r2, r3, #16
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006364:	68b8      	ldr	r0, [r7, #8]
 8006366:	f7ff ff37 	bl	80061d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	603b      	str	r3, [r7, #0]
 800637e:	4613      	mov	r3, r2
 8006380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006382:	e02c      	b.n	80063de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	d028      	beq.n	80063de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006392:	f7fa f963 	bl	800065c <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d21d      	bcs.n	80063de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695a      	ldr	r2, [r3, #20]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0201 	bic.w	r2, r2, #1
 80063c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e00f      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4013      	ands	r3, r2
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	bf0c      	ite	eq
 80063ee:	2301      	moveq	r3, #1
 80063f0:	2300      	movne	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d0c3      	beq.n	8006384 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800641c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2220      	movs	r2, #32
 8006422:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006448:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695a      	ldr	r2, [r3, #20]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7ff fea5 	bl	80061d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800648e:	bf00      	nop
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b21      	cmp	r3, #33	; 0x21
 80064a8:	d144      	bne.n	8006534 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b2:	d11a      	bne.n	80064ea <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	1c9a      	adds	r2, r3, #2
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	621a      	str	r2, [r3, #32]
 80064dc:	e00e      	b.n	80064fc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	621a      	str	r2, [r3, #32]
 80064e8:	e008      	b.n	80064fc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	1c59      	adds	r1, r3, #1
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6211      	str	r1, [r2, #32]
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29b      	uxth	r3, r3
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4619      	mov	r1, r3
 800650a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10f      	bne.n	8006530 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800651e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800652e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e000      	b.n	8006536 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006534:	2302      	movs	r3, #2
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006558:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 f94e 	bl	8007804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b22      	cmp	r3, #34	; 0x22
 8006584:	d171      	bne.n	800666a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658e:	d123      	bne.n	80065d8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10e      	bne.n	80065bc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	1c9a      	adds	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	629a      	str	r2, [r3, #40]	; 0x28
 80065ba:	e029      	b.n	8006610 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
 80065d6:	e01b      	b.n	8006610 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6858      	ldr	r0, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6291      	str	r1, [r2, #40]	; 0x28
 80065f0:	b2c2      	uxtb	r2, r0
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	e00c      	b.n	8006610 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	1c58      	adds	r0, r3, #1
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	6288      	str	r0, [r1, #40]	; 0x28
 8006608:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29b      	uxth	r3, r3
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	4619      	mov	r1, r3
 800661e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006620:	2b00      	cmp	r3, #0
 8006622:	d120      	bne.n	8006666 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0220 	bic.w	r2, r2, #32
 8006632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 f8db 	bl	8007818 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	e002      	b.n	800666c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	e000      	b.n	800666c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800666a:	2302      	movs	r3, #2
  }
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	4a9a      	ldr	r2, [pc, #616]	; (80068ec <UART_SetConfig+0x278>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d904      	bls.n	8006692 <UART_SetConfig+0x1e>
 8006688:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800668c:	4898      	ldr	r0, [pc, #608]	; (80068f0 <UART_SetConfig+0x27c>)
 800668e:	f001 f977 	bl	8007980 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <UART_SetConfig+0x3a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a2:	d004      	beq.n	80066ae <UART_SetConfig+0x3a>
 80066a4:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80066a8:	4891      	ldr	r0, [pc, #580]	; (80068f0 <UART_SetConfig+0x27c>)
 80066aa:	f001 f969 	bl	8007980 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <UART_SetConfig+0x60>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066be:	d009      	beq.n	80066d4 <UART_SetConfig+0x60>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066c8:	d004      	beq.n	80066d4 <UART_SetConfig+0x60>
 80066ca:	f640 31fd 	movw	r1, #3069	; 0xbfd
 80066ce:	4888      	ldr	r0, [pc, #544]	; (80068f0 <UART_SetConfig+0x27c>)
 80066d0:	f001 f956 	bl	8007980 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80066dc:	4013      	ands	r3, r2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d103      	bne.n	80066ea <UART_SetConfig+0x76>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <UART_SetConfig+0x80>
 80066ea:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80066ee:	4880      	ldr	r0, [pc, #512]	; (80068f0 <UART_SetConfig+0x27c>)
 80066f0:	f001 f946 	bl	8007980 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800672c:	f023 030c 	bic.w	r3, r3, #12
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	68f9      	ldr	r1, [r7, #12]
 8006736:	430b      	orrs	r3, r1
 8006738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006758:	f040 818f 	bne.w	8006a7a <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a64      	ldr	r2, [pc, #400]	; (80068f4 <UART_SetConfig+0x280>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d005      	beq.n	8006772 <UART_SetConfig+0xfe>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a63      	ldr	r2, [pc, #396]	; (80068f8 <UART_SetConfig+0x284>)
 800676c:	4293      	cmp	r3, r2
 800676e:	f040 80c7 	bne.w	8006900 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006772:	f7fc fbf3 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 8006776:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	461d      	mov	r5, r3
 800677c:	f04f 0600 	mov.w	r6, #0
 8006780:	46a8      	mov	r8, r5
 8006782:	46b1      	mov	r9, r6
 8006784:	eb18 0308 	adds.w	r3, r8, r8
 8006788:	eb49 0409 	adc.w	r4, r9, r9
 800678c:	4698      	mov	r8, r3
 800678e:	46a1      	mov	r9, r4
 8006790:	eb18 0805 	adds.w	r8, r8, r5
 8006794:	eb49 0906 	adc.w	r9, r9, r6
 8006798:	f04f 0100 	mov.w	r1, #0
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067ac:	4688      	mov	r8, r1
 80067ae:	4691      	mov	r9, r2
 80067b0:	eb18 0005 	adds.w	r0, r8, r5
 80067b4:	eb49 0106 	adc.w	r1, r9, r6
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	461d      	mov	r5, r3
 80067be:	f04f 0600 	mov.w	r6, #0
 80067c2:	196b      	adds	r3, r5, r5
 80067c4:	eb46 0406 	adc.w	r4, r6, r6
 80067c8:	461a      	mov	r2, r3
 80067ca:	4623      	mov	r3, r4
 80067cc:	f7f9 fd60 	bl	8000290 <__aeabi_uldivmod>
 80067d0:	4603      	mov	r3, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	461a      	mov	r2, r3
 80067d6:	4b49      	ldr	r3, [pc, #292]	; (80068fc <UART_SetConfig+0x288>)
 80067d8:	fba3 2302 	umull	r2, r3, r3, r2
 80067dc:	095b      	lsrs	r3, r3, #5
 80067de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	461d      	mov	r5, r3
 80067e6:	f04f 0600 	mov.w	r6, #0
 80067ea:	46a9      	mov	r9, r5
 80067ec:	46b2      	mov	sl, r6
 80067ee:	eb19 0309 	adds.w	r3, r9, r9
 80067f2:	eb4a 040a 	adc.w	r4, sl, sl
 80067f6:	4699      	mov	r9, r3
 80067f8:	46a2      	mov	sl, r4
 80067fa:	eb19 0905 	adds.w	r9, r9, r5
 80067fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8006802:	f04f 0100 	mov.w	r1, #0
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800680e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006812:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006816:	4689      	mov	r9, r1
 8006818:	4692      	mov	sl, r2
 800681a:	eb19 0005 	adds.w	r0, r9, r5
 800681e:	eb4a 0106 	adc.w	r1, sl, r6
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	461d      	mov	r5, r3
 8006828:	f04f 0600 	mov.w	r6, #0
 800682c:	196b      	adds	r3, r5, r5
 800682e:	eb46 0406 	adc.w	r4, r6, r6
 8006832:	461a      	mov	r2, r3
 8006834:	4623      	mov	r3, r4
 8006836:	f7f9 fd2b 	bl	8000290 <__aeabi_uldivmod>
 800683a:	4603      	mov	r3, r0
 800683c:	460c      	mov	r4, r1
 800683e:	461a      	mov	r2, r3
 8006840:	4b2e      	ldr	r3, [pc, #184]	; (80068fc <UART_SetConfig+0x288>)
 8006842:	fba3 1302 	umull	r1, r3, r3, r2
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	2164      	movs	r1, #100	; 0x64
 800684a:	fb01 f303 	mul.w	r3, r1, r3
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	3332      	adds	r3, #50	; 0x32
 8006854:	4a29      	ldr	r2, [pc, #164]	; (80068fc <UART_SetConfig+0x288>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006862:	4498      	add	r8, r3
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	461d      	mov	r5, r3
 8006868:	f04f 0600 	mov.w	r6, #0
 800686c:	46a9      	mov	r9, r5
 800686e:	46b2      	mov	sl, r6
 8006870:	eb19 0309 	adds.w	r3, r9, r9
 8006874:	eb4a 040a 	adc.w	r4, sl, sl
 8006878:	4699      	mov	r9, r3
 800687a:	46a2      	mov	sl, r4
 800687c:	eb19 0905 	adds.w	r9, r9, r5
 8006880:	eb4a 0a06 	adc.w	sl, sl, r6
 8006884:	f04f 0100 	mov.w	r1, #0
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006898:	4689      	mov	r9, r1
 800689a:	4692      	mov	sl, r2
 800689c:	eb19 0005 	adds.w	r0, r9, r5
 80068a0:	eb4a 0106 	adc.w	r1, sl, r6
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	461d      	mov	r5, r3
 80068aa:	f04f 0600 	mov.w	r6, #0
 80068ae:	196b      	adds	r3, r5, r5
 80068b0:	eb46 0406 	adc.w	r4, r6, r6
 80068b4:	461a      	mov	r2, r3
 80068b6:	4623      	mov	r3, r4
 80068b8:	f7f9 fcea 	bl	8000290 <__aeabi_uldivmod>
 80068bc:	4603      	mov	r3, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	461a      	mov	r2, r3
 80068c2:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <UART_SetConfig+0x288>)
 80068c4:	fba3 1302 	umull	r1, r3, r3, r2
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	2164      	movs	r1, #100	; 0x64
 80068cc:	fb01 f303 	mul.w	r3, r1, r3
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	3332      	adds	r3, #50	; 0x32
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <UART_SetConfig+0x288>)
 80068d8:	fba2 2303 	umull	r2, r3, r2, r3
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	f003 0207 	and.w	r2, r3, #7
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4442      	add	r2, r8
 80068e8:	609a      	str	r2, [r3, #8]
 80068ea:	e27a      	b.n	8006de2 <UART_SetConfig+0x76e>
 80068ec:	00a037a0 	.word	0x00a037a0
 80068f0:	08008bf0 	.word	0x08008bf0
 80068f4:	40011000 	.word	0x40011000
 80068f8:	40011400 	.word	0x40011400
 80068fc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006900:	f7fc fb18 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8006904:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	461d      	mov	r5, r3
 800690a:	f04f 0600 	mov.w	r6, #0
 800690e:	46a8      	mov	r8, r5
 8006910:	46b1      	mov	r9, r6
 8006912:	eb18 0308 	adds.w	r3, r8, r8
 8006916:	eb49 0409 	adc.w	r4, r9, r9
 800691a:	4698      	mov	r8, r3
 800691c:	46a1      	mov	r9, r4
 800691e:	eb18 0805 	adds.w	r8, r8, r5
 8006922:	eb49 0906 	adc.w	r9, r9, r6
 8006926:	f04f 0100 	mov.w	r1, #0
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006932:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006936:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800693a:	4688      	mov	r8, r1
 800693c:	4691      	mov	r9, r2
 800693e:	eb18 0005 	adds.w	r0, r8, r5
 8006942:	eb49 0106 	adc.w	r1, r9, r6
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	461d      	mov	r5, r3
 800694c:	f04f 0600 	mov.w	r6, #0
 8006950:	196b      	adds	r3, r5, r5
 8006952:	eb46 0406 	adc.w	r4, r6, r6
 8006956:	461a      	mov	r2, r3
 8006958:	4623      	mov	r3, r4
 800695a:	f7f9 fc99 	bl	8000290 <__aeabi_uldivmod>
 800695e:	4603      	mov	r3, r0
 8006960:	460c      	mov	r4, r1
 8006962:	461a      	mov	r2, r3
 8006964:	4bb3      	ldr	r3, [pc, #716]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006966:	fba3 2302 	umull	r2, r3, r3, r2
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	461d      	mov	r5, r3
 8006974:	f04f 0600 	mov.w	r6, #0
 8006978:	46a9      	mov	r9, r5
 800697a:	46b2      	mov	sl, r6
 800697c:	eb19 0309 	adds.w	r3, r9, r9
 8006980:	eb4a 040a 	adc.w	r4, sl, sl
 8006984:	4699      	mov	r9, r3
 8006986:	46a2      	mov	sl, r4
 8006988:	eb19 0905 	adds.w	r9, r9, r5
 800698c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006990:	f04f 0100 	mov.w	r1, #0
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800699c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069a4:	4689      	mov	r9, r1
 80069a6:	4692      	mov	sl, r2
 80069a8:	eb19 0005 	adds.w	r0, r9, r5
 80069ac:	eb4a 0106 	adc.w	r1, sl, r6
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	461d      	mov	r5, r3
 80069b6:	f04f 0600 	mov.w	r6, #0
 80069ba:	196b      	adds	r3, r5, r5
 80069bc:	eb46 0406 	adc.w	r4, r6, r6
 80069c0:	461a      	mov	r2, r3
 80069c2:	4623      	mov	r3, r4
 80069c4:	f7f9 fc64 	bl	8000290 <__aeabi_uldivmod>
 80069c8:	4603      	mov	r3, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	461a      	mov	r2, r3
 80069ce:	4b99      	ldr	r3, [pc, #612]	; (8006c34 <UART_SetConfig+0x5c0>)
 80069d0:	fba3 1302 	umull	r1, r3, r3, r2
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	2164      	movs	r1, #100	; 0x64
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	3332      	adds	r3, #50	; 0x32
 80069e2:	4a94      	ldr	r2, [pc, #592]	; (8006c34 <UART_SetConfig+0x5c0>)
 80069e4:	fba2 2303 	umull	r2, r3, r2, r3
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069f0:	4498      	add	r8, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	461d      	mov	r5, r3
 80069f6:	f04f 0600 	mov.w	r6, #0
 80069fa:	46a9      	mov	r9, r5
 80069fc:	46b2      	mov	sl, r6
 80069fe:	eb19 0309 	adds.w	r3, r9, r9
 8006a02:	eb4a 040a 	adc.w	r4, sl, sl
 8006a06:	4699      	mov	r9, r3
 8006a08:	46a2      	mov	sl, r4
 8006a0a:	eb19 0905 	adds.w	r9, r9, r5
 8006a0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a12:	f04f 0100 	mov.w	r1, #0
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a26:	4689      	mov	r9, r1
 8006a28:	4692      	mov	sl, r2
 8006a2a:	eb19 0005 	adds.w	r0, r9, r5
 8006a2e:	eb4a 0106 	adc.w	r1, sl, r6
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	461d      	mov	r5, r3
 8006a38:	f04f 0600 	mov.w	r6, #0
 8006a3c:	196b      	adds	r3, r5, r5
 8006a3e:	eb46 0406 	adc.w	r4, r6, r6
 8006a42:	461a      	mov	r2, r3
 8006a44:	4623      	mov	r3, r4
 8006a46:	f7f9 fc23 	bl	8000290 <__aeabi_uldivmod>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4b78      	ldr	r3, [pc, #480]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006a52:	fba3 1302 	umull	r1, r3, r3, r2
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	2164      	movs	r1, #100	; 0x64
 8006a5a:	fb01 f303 	mul.w	r3, r1, r3
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	3332      	adds	r3, #50	; 0x32
 8006a64:	4a73      	ldr	r2, [pc, #460]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006a66:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	f003 0207 	and.w	r2, r3, #7
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4442      	add	r2, r8
 8006a76:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006a78:	e1b3      	b.n	8006de2 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a6e      	ldr	r2, [pc, #440]	; (8006c38 <UART_SetConfig+0x5c4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d005      	beq.n	8006a90 <UART_SetConfig+0x41c>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a6c      	ldr	r2, [pc, #432]	; (8006c3c <UART_SetConfig+0x5c8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	f040 80d8 	bne.w	8006c40 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a90:	f7fc fa64 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 8006a94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	469a      	mov	sl, r3
 8006a9a:	f04f 0b00 	mov.w	fp, #0
 8006a9e:	46d0      	mov	r8, sl
 8006aa0:	46d9      	mov	r9, fp
 8006aa2:	eb18 0308 	adds.w	r3, r8, r8
 8006aa6:	eb49 0409 	adc.w	r4, r9, r9
 8006aaa:	4698      	mov	r8, r3
 8006aac:	46a1      	mov	r9, r4
 8006aae:	eb18 080a 	adds.w	r8, r8, sl
 8006ab2:	eb49 090b 	adc.w	r9, r9, fp
 8006ab6:	f04f 0100 	mov.w	r1, #0
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ac2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ac6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006aca:	4688      	mov	r8, r1
 8006acc:	4691      	mov	r9, r2
 8006ace:	eb1a 0508 	adds.w	r5, sl, r8
 8006ad2:	eb4b 0609 	adc.w	r6, fp, r9
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	4619      	mov	r1, r3
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	f04f 0400 	mov.w	r4, #0
 8006ae8:	0094      	lsls	r4, r2, #2
 8006aea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006aee:	008b      	lsls	r3, r1, #2
 8006af0:	461a      	mov	r2, r3
 8006af2:	4623      	mov	r3, r4
 8006af4:	4628      	mov	r0, r5
 8006af6:	4631      	mov	r1, r6
 8006af8:	f7f9 fbca 	bl	8000290 <__aeabi_uldivmod>
 8006afc:	4603      	mov	r3, r0
 8006afe:	460c      	mov	r4, r1
 8006b00:	461a      	mov	r2, r3
 8006b02:	4b4c      	ldr	r3, [pc, #304]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006b04:	fba3 2302 	umull	r2, r3, r3, r2
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	469b      	mov	fp, r3
 8006b12:	f04f 0c00 	mov.w	ip, #0
 8006b16:	46d9      	mov	r9, fp
 8006b18:	46e2      	mov	sl, ip
 8006b1a:	eb19 0309 	adds.w	r3, r9, r9
 8006b1e:	eb4a 040a 	adc.w	r4, sl, sl
 8006b22:	4699      	mov	r9, r3
 8006b24:	46a2      	mov	sl, r4
 8006b26:	eb19 090b 	adds.w	r9, r9, fp
 8006b2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b2e:	f04f 0100 	mov.w	r1, #0
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b42:	4689      	mov	r9, r1
 8006b44:	4692      	mov	sl, r2
 8006b46:	eb1b 0509 	adds.w	r5, fp, r9
 8006b4a:	eb4c 060a 	adc.w	r6, ip, sl
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4619      	mov	r1, r3
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	f04f 0400 	mov.w	r4, #0
 8006b60:	0094      	lsls	r4, r2, #2
 8006b62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b66:	008b      	lsls	r3, r1, #2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4623      	mov	r3, r4
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	4631      	mov	r1, r6
 8006b70:	f7f9 fb8e 	bl	8000290 <__aeabi_uldivmod>
 8006b74:	4603      	mov	r3, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4b2e      	ldr	r3, [pc, #184]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b80:	095b      	lsrs	r3, r3, #5
 8006b82:	2164      	movs	r1, #100	; 0x64
 8006b84:	fb01 f303 	mul.w	r3, r1, r3
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	3332      	adds	r3, #50	; 0x32
 8006b8e:	4a29      	ldr	r2, [pc, #164]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006b90:	fba2 2303 	umull	r2, r3, r2, r3
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b9a:	4498      	add	r8, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	469b      	mov	fp, r3
 8006ba0:	f04f 0c00 	mov.w	ip, #0
 8006ba4:	46d9      	mov	r9, fp
 8006ba6:	46e2      	mov	sl, ip
 8006ba8:	eb19 0309 	adds.w	r3, r9, r9
 8006bac:	eb4a 040a 	adc.w	r4, sl, sl
 8006bb0:	4699      	mov	r9, r3
 8006bb2:	46a2      	mov	sl, r4
 8006bb4:	eb19 090b 	adds.w	r9, r9, fp
 8006bb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bbc:	f04f 0100 	mov.w	r1, #0
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bd0:	4689      	mov	r9, r1
 8006bd2:	4692      	mov	sl, r2
 8006bd4:	eb1b 0509 	adds.w	r5, fp, r9
 8006bd8:	eb4c 060a 	adc.w	r6, ip, sl
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4619      	mov	r1, r3
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	f04f 0400 	mov.w	r4, #0
 8006bee:	0094      	lsls	r4, r2, #2
 8006bf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bf4:	008b      	lsls	r3, r1, #2
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	f7f9 fb47 	bl	8000290 <__aeabi_uldivmod>
 8006c02:	4603      	mov	r3, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	461a      	mov	r2, r3
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	2164      	movs	r1, #100	; 0x64
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	3332      	adds	r3, #50	; 0x32
 8006c1c:	4a05      	ldr	r2, [pc, #20]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	f003 020f 	and.w	r2, r3, #15
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4442      	add	r2, r8
 8006c2e:	609a      	str	r2, [r3, #8]
 8006c30:	e0d7      	b.n	8006de2 <UART_SetConfig+0x76e>
 8006c32:	bf00      	nop
 8006c34:	51eb851f 	.word	0x51eb851f
 8006c38:	40011000 	.word	0x40011000
 8006c3c:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c40:	f7fc f978 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8006c44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	469a      	mov	sl, r3
 8006c4a:	f04f 0b00 	mov.w	fp, #0
 8006c4e:	46d0      	mov	r8, sl
 8006c50:	46d9      	mov	r9, fp
 8006c52:	eb18 0308 	adds.w	r3, r8, r8
 8006c56:	eb49 0409 	adc.w	r4, r9, r9
 8006c5a:	4698      	mov	r8, r3
 8006c5c:	46a1      	mov	r9, r4
 8006c5e:	eb18 080a 	adds.w	r8, r8, sl
 8006c62:	eb49 090b 	adc.w	r9, r9, fp
 8006c66:	f04f 0100 	mov.w	r1, #0
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c7a:	4688      	mov	r8, r1
 8006c7c:	4691      	mov	r9, r2
 8006c7e:	eb1a 0508 	adds.w	r5, sl, r8
 8006c82:	eb4b 0609 	adc.w	r6, fp, r9
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	f04f 0400 	mov.w	r4, #0
 8006c98:	0094      	lsls	r4, r2, #2
 8006c9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c9e:	008b      	lsls	r3, r1, #2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	f7f9 faf2 	bl	8000290 <__aeabi_uldivmod>
 8006cac:	4603      	mov	r3, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4b4e      	ldr	r3, [pc, #312]	; (8006dec <UART_SetConfig+0x778>)
 8006cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	469b      	mov	fp, r3
 8006cc2:	f04f 0c00 	mov.w	ip, #0
 8006cc6:	46d9      	mov	r9, fp
 8006cc8:	46e2      	mov	sl, ip
 8006cca:	eb19 0309 	adds.w	r3, r9, r9
 8006cce:	eb4a 040a 	adc.w	r4, sl, sl
 8006cd2:	4699      	mov	r9, r3
 8006cd4:	46a2      	mov	sl, r4
 8006cd6:	eb19 090b 	adds.w	r9, r9, fp
 8006cda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cde:	f04f 0100 	mov.w	r1, #0
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cf2:	4689      	mov	r9, r1
 8006cf4:	4692      	mov	sl, r2
 8006cf6:	eb1b 0509 	adds.w	r5, fp, r9
 8006cfa:	eb4c 060a 	adc.w	r6, ip, sl
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	4619      	mov	r1, r3
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	f04f 0400 	mov.w	r4, #0
 8006d10:	0094      	lsls	r4, r2, #2
 8006d12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d16:	008b      	lsls	r3, r1, #2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4623      	mov	r3, r4
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	4631      	mov	r1, r6
 8006d20:	f7f9 fab6 	bl	8000290 <__aeabi_uldivmod>
 8006d24:	4603      	mov	r3, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4b30      	ldr	r3, [pc, #192]	; (8006dec <UART_SetConfig+0x778>)
 8006d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	2164      	movs	r1, #100	; 0x64
 8006d34:	fb01 f303 	mul.w	r3, r1, r3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	3332      	adds	r3, #50	; 0x32
 8006d3e:	4a2b      	ldr	r2, [pc, #172]	; (8006dec <UART_SetConfig+0x778>)
 8006d40:	fba2 2303 	umull	r2, r3, r2, r3
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d4a:	4498      	add	r8, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	469b      	mov	fp, r3
 8006d50:	f04f 0c00 	mov.w	ip, #0
 8006d54:	46d9      	mov	r9, fp
 8006d56:	46e2      	mov	sl, ip
 8006d58:	eb19 0309 	adds.w	r3, r9, r9
 8006d5c:	eb4a 040a 	adc.w	r4, sl, sl
 8006d60:	4699      	mov	r9, r3
 8006d62:	46a2      	mov	sl, r4
 8006d64:	eb19 090b 	adds.w	r9, r9, fp
 8006d68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d6c:	f04f 0100 	mov.w	r1, #0
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d80:	4689      	mov	r9, r1
 8006d82:	4692      	mov	sl, r2
 8006d84:	eb1b 0509 	adds.w	r5, fp, r9
 8006d88:	eb4c 060a 	adc.w	r6, ip, sl
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4619      	mov	r1, r3
 8006d92:	f04f 0200 	mov.w	r2, #0
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	f04f 0400 	mov.w	r4, #0
 8006d9e:	0094      	lsls	r4, r2, #2
 8006da0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006da4:	008b      	lsls	r3, r1, #2
 8006da6:	461a      	mov	r2, r3
 8006da8:	4623      	mov	r3, r4
 8006daa:	4628      	mov	r0, r5
 8006dac:	4631      	mov	r1, r6
 8006dae:	f7f9 fa6f 	bl	8000290 <__aeabi_uldivmod>
 8006db2:	4603      	mov	r3, r0
 8006db4:	460c      	mov	r4, r1
 8006db6:	461a      	mov	r2, r3
 8006db8:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <UART_SetConfig+0x778>)
 8006dba:	fba3 1302 	umull	r1, r3, r3, r2
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	2164      	movs	r1, #100	; 0x64
 8006dc2:	fb01 f303 	mul.w	r3, r1, r3
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	3332      	adds	r3, #50	; 0x32
 8006dcc:	4a07      	ldr	r2, [pc, #28]	; (8006dec <UART_SetConfig+0x778>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	f003 020f 	and.w	r2, r3, #15
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4442      	add	r2, r8
 8006dde:	609a      	str	r2, [r3, #8]
}
 8006de0:	e7ff      	b.n	8006de2 <UART_SetConfig+0x76e>
 8006de2:	bf00      	nop
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dec:	51eb851f 	.word	0x51eb851f

08006df0 <bufferInit>:
#include "Buffer.h"
#include "main.h"


void bufferInit(s_Buff *buffer)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e007      	b.n	8006e0e <bufferInit+0x1e>
		buffer->_p_rx_buffer[i] = 0;
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	2200      	movs	r2, #0
 8006e06:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b18      	cmp	r3, #24
 8006e12:	ddf4      	ble.n	8006dfe <bufferInit+0xe>
	}
}
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <ping_callBack>:
 extern assert_struct s_assert_struct;



void ping_callBack(char* token)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
	uart_print(token);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fd81 	bl	8007930 <uart_print>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <version_callback>:

void version_callback(char* token)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
	uart_print(VERSION);
 8006e40:	4803      	ldr	r0, [pc, #12]	; (8006e50 <version_callback+0x18>)
 8006e42:	f000 fd75 	bl	8007930 <uart_print>
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	08008cd8 	.word	0x08008cd8

08006e54 <pwm_start_callback>:

void pwm_start_callback(char* token)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4805      	ldr	r0, [pc, #20]	; (8006e74 <pwm_start_callback+0x20>)
 8006e60:	f7fd fbea 	bl	8004638 <HAL_TIM_PWM_Start>
	uart_print(OK);
 8006e64:	4804      	ldr	r0, [pc, #16]	; (8006e78 <pwm_start_callback+0x24>)
 8006e66:	f000 fd63 	bl	8007930 <uart_print>
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000358 	.word	0x20000358
 8006e78:	08008ce0 	.word	0x08008ce0

08006e7c <pwm_stop_callback>:

void pwm_stop_callback(char* token)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8006e84:	2100      	movs	r1, #0
 8006e86:	4805      	ldr	r0, [pc, #20]	; (8006e9c <pwm_stop_callback+0x20>)
 8006e88:	f7fd fc8a 	bl	80047a0 <HAL_TIM_PWM_Stop>
	uart_print(OK);
 8006e8c:	4804      	ldr	r0, [pc, #16]	; (8006ea0 <pwm_stop_callback+0x24>)
 8006e8e:	f000 fd4f 	bl	8007930 <uart_print>
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000358 	.word	0x20000358
 8006ea0:	08008ce0 	.word	0x08008ce0

08006ea4 <pwm_dc_callback>:

void pwm_dc_callback(char* token)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8006eac:	4911      	ldr	r1, [pc, #68]	; (8006ef4 <pwm_dc_callback+0x50>)
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f001 f864 	bl	8007f7c <strtok>
 8006eb4:	6078      	str	r0, [r7, #4]
	if(strlen(token) <= 0)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d015      	beq.n	8006eea <pwm_dc_callback+0x46>
	{
		return;
	}
	int32_t dc = atoi(token);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 ffd1 	bl	8007e66 <atoi>
 8006ec4:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b64      	cmp	r3, #100	; 0x64
 8006eca:	dd01      	ble.n	8006ed0 <pwm_dc_callback+0x2c>
 8006ecc:	2364      	movs	r3, #100	; 0x64
 8006ece:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da01      	bge.n	8006eda <pwm_dc_callback+0x36>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <pwm_dc_callback+0x54>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	635a      	str	r2, [r3, #52]	; 0x34
	uart_print(OK);
 8006ee2:	4806      	ldr	r0, [pc, #24]	; (8006efc <pwm_dc_callback+0x58>)
 8006ee4:	f000 fd24 	bl	8007930 <uart_print>
 8006ee8:	e000      	b.n	8006eec <pwm_dc_callback+0x48>
		return;
 8006eea:	bf00      	nop
}
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	08008ce4 	.word	0x08008ce4
 8006ef8:	20000358 	.word	0x20000358
 8006efc:	08008ce0 	.word	0x08008ce0

08006f00 <crc_whole_flash_calc_callback>:

void crc_whole_flash_calc_callback(char* token)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
		crcFlashResult = HAL_CRC_Accumulate(&hcrc, flashDataBuffer, sector_0_Size);
		offsetAddr += 0x4000;
	}*/

	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 8006f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f0c:	617b      	str	r3, [r7, #20]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 8006f0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f12:	613b      	str	r3, [r7, #16]
	//FeedDog(1);
	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	6939      	ldr	r1, [r7, #16]
 8006f18:	4807      	ldr	r0, [pc, #28]	; (8006f38 <crc_whole_flash_calc_callback+0x38>)
 8006f1a:	f7f9 fd4f 	bl	80009bc <HAL_CRC_Calculate>
 8006f1e:	60f8      	str	r0, [r7, #12]
	//FeedDog(1);
	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)crcFlashResult);
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4906      	ldr	r1, [pc, #24]	; (8006f3c <crc_whole_flash_calc_callback+0x3c>)
 8006f24:	4806      	ldr	r0, [pc, #24]	; (8006f40 <crc_whole_flash_calc_callback+0x40>)
 8006f26:	f000 ffe1 	bl	8007eec <siprintf>
	uart_print((char*)s_buffer._p_tx_buffer);
 8006f2a:	4805      	ldr	r0, [pc, #20]	; (8006f40 <crc_whole_flash_calc_callback+0x40>)
 8006f2c:	f000 fd00 	bl	8007930 <uart_print>
}
 8006f30:	bf00      	nop
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000350 	.word	0x20000350
 8006f3c:	08008ce8 	.word	0x08008ce8
 8006f40:	2000032b 	.word	0x2000032b

08006f44 <iwdg_test_callback>:

void iwdg_test_callback(char* token)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	uart_print(OK);
 8006f4c:	4801      	ldr	r0, [pc, #4]	; (8006f54 <iwdg_test_callback+0x10>)
 8006f4e:	f000 fcef 	bl	8007930 <uart_print>
	while(1);
 8006f52:	e7fe      	b.n	8006f52 <iwdg_test_callback+0xe>
 8006f54:	08008ce0 	.word	0x08008ce0

08006f58 <flash_lock_callback>:
}

void flash_lock_callback(char* token)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08a      	sub	sp, #40	; 0x28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	 *It does not prevent one part of code to read another part, or even rewrite.
	 *PCROP allows you to use debugger to debug your code,
	 *but protects reading and rewriting the "secret" part.*/

	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 8006f60:	f107 030c 	add.w	r3, r7, #12
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fa fd71 	bl	8001a4c <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0) {
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	2baa      	cmp	r3, #170	; 0xaa
 8006f6e:	d133      	bne.n	8006fd8 <flash_lock_callback+0x80>
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 8006f70:	2355      	movs	r3, #85	; 0x55
 8006f72:	61fb      	str	r3, [r7, #28]
		obConfig.OptionType = OPTIONBYTE_RDP;
 8006f74:	2302      	movs	r3, #2
 8006f76:	60fb      	str	r3, [r7, #12]

		if (HAL_FLASH_Unlock() != HAL_OK)
 8006f78:	f7fa fac6 	bl	8001508 <HAL_FLASH_Unlock>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <flash_lock_callback+0x2e>
		{
			Error_Handler();
 8006f82:	f000 fcf5 	bl	8007970 <Error_Handler>
		}
		/* Clear All pending flags */ //if wwdg and kickDog are enabled - uncomment __HAL_FLASH_CLEAR_FLAG
		//__HAL_FLASH_CLEAR_FLAG (FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 8006f86:	f7fa faf1 	bl	800156c <HAL_FLASH_OB_Unlock>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <flash_lock_callback+0x3c>
		{
			Error_Handler();
 8006f90:	f000 fcee 	bl	8007970 <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 8006f94:	f107 030c 	add.w	r3, r7, #12
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fa fcd1 	bl	8001940 <HAL_FLASHEx_OBProgram>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <flash_lock_callback+0x50>
		{
			Error_Handler();
 8006fa4:	f000 fce4 	bl	8007970 <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 8006fa8:	f7fa fb0c 	bl	80015c4 <HAL_FLASH_OB_Launch>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <flash_lock_callback+0x5e>
		{
			Error_Handler();
 8006fb2:	f000 fcdd 	bl	8007970 <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 8006fb6:	f7fa faf5 	bl	80015a4 <HAL_FLASH_OB_Lock>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <flash_lock_callback+0x6c>
		{
			Error_Handler();
 8006fc0:	f000 fcd6 	bl	8007970 <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 8006fc4:	f7fa fac2 	bl	800154c <HAL_FLASH_Lock>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <flash_lock_callback+0x7a>
		{
			Error_Handler();
 8006fce:	f000 fccf 	bl	8007970 <Error_Handler>
		}
		uart_print(OK);
 8006fd2:	4803      	ldr	r0, [pc, #12]	; (8006fe0 <flash_lock_callback+0x88>)
 8006fd4:	f000 fcac 	bl	8007930 <uart_print>
		MY_FLASH_SetSectorAddrs(7, sector_7_addr);
		uint32_t myTestWrite[1] = {0xDEADBEEF}; 		//0xFFFFFFFF, 0xDEADBEEF
		MY_FLASH_WriteN(131072-4, myTestWrite2, 1, DATA_TYPE_32);
		*/
	}
}
 8006fd8:	bf00      	nop
 8006fda:	3728      	adds	r7, #40	; 0x28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	08008ce0 	.word	0x08008ce0

08006fe4 <set_SN_callback>:

void set_SN_callback(char* token)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	/*if (WRP_sector_disable() != HAL_OK)
	{
		Error_Handler();
	}*/
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8006fec:	4b09      	ldr	r3, [pc, #36]	; (8007014 <set_SN_callback+0x30>)
 8006fee:	60fb      	str	r3, [r7, #12]
	MY_FLASH_SetSectorAddrs(7, sector_7_addr);
 8006ff0:	68f9      	ldr	r1, [r7, #12]
 8006ff2:	2007      	movs	r0, #7
 8006ff4:	f000 f88c 	bl	8007110 <MY_FLASH_SetSectorAddrs>
	uint32_t myTestWrite[1] = {0xDEADBEEF}; //0xFFFFFFFF, 0xDEADBEEF
 8006ff8:	4b07      	ldr	r3, [pc, #28]	; (8007018 <set_SN_callback+0x34>)
 8006ffa:	60bb      	str	r3, [r7, #8]
	MY_FLASH_WriteN(0, myTestWrite, 1, DATA_TYPE_32);
 8006ffc:	f107 0108 	add.w	r1, r7, #8
 8007000:	2302      	movs	r3, #2
 8007002:	2201      	movs	r2, #1
 8007004:	2000      	movs	r0, #0
 8007006:	f000 f899 	bl	800713c <MY_FLASH_WriteN>

	/*if (WRP_sector_enable() != HAL_OK)
	{
		Error_Handler();
	}*/
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	08060000 	.word	0x08060000
 8007018:	deadbeef 	.word	0xdeadbeef

0800701c <get_SN_callback>:

void get_SN_callback(char* token)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8007024:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <get_SN_callback+0x3c>)
 8007026:	60fb      	str	r3, [r7, #12]
	MY_FLASH_SetSectorAddrs(7, sector_7_addr);
 8007028:	68f9      	ldr	r1, [r7, #12]
 800702a:	2007      	movs	r0, #7
 800702c:	f000 f870 	bl	8007110 <MY_FLASH_SetSectorAddrs>
	uint32_t myTestRead[1];
	MY_FLASH_ReadN(0, myTestRead, 1, DATA_TYPE_32);
 8007030:	f107 0108 	add.w	r1, r7, #8
 8007034:	2302      	movs	r3, #2
 8007036:	2201      	movs	r2, #1
 8007038:	2000      	movs	r0, #0
 800703a:	f000 f8f1 	bl	8007220 <MY_FLASH_ReadN>
	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)myTestRead[0]);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	461a      	mov	r2, r3
 8007042:	4906      	ldr	r1, [pc, #24]	; (800705c <get_SN_callback+0x40>)
 8007044:	4806      	ldr	r0, [pc, #24]	; (8007060 <get_SN_callback+0x44>)
 8007046:	f000 ff51 	bl	8007eec <siprintf>
	uart_print((char*)s_buffer._p_tx_buffer);
 800704a:	4805      	ldr	r0, [pc, #20]	; (8007060 <get_SN_callback+0x44>)
 800704c:	f000 fc70 	bl	8007930 <uart_print>
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	08060000 	.word	0x08060000
 800705c:	08008ce8 	.word	0x08008ce8
 8007060:	2000032b 	.word	0x2000032b

08007064 <start_tick_callback>:

void start_tick_callback(char* token)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	MX_RTC_Init();
 800706c:	f000 fa32 	bl	80074d4 <MX_RTC_Init>
	uart_print(OK);
 8007070:	4803      	ldr	r0, [pc, #12]	; (8007080 <start_tick_callback+0x1c>)
 8007072:	f000 fc5d 	bl	8007930 <uart_print>
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	08008ce0 	.word	0x08008ce0

08007084 <stop_tick_callback>:

void stop_tick_callback(char* token)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	if (HAL_RTC_DeInit(&hrtc) != HAL_OK)
 800708c:	4807      	ldr	r0, [pc, #28]	; (80070ac <stop_tick_callback+0x28>)
 800708e:	f7fc fa73 	bl	8003578 <HAL_RTC_DeInit>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <stop_tick_callback+0x18>
	{
		Error_Handler();
 8007098:	f000 fc6a 	bl	8007970 <Error_Handler>
	}
	uart_print(OK);
 800709c:	4804      	ldr	r0, [pc, #16]	; (80070b0 <stop_tick_callback+0x2c>)
 800709e:	f000 fc47 	bl	8007930 <uart_print>
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200003f8 	.word	0x200003f8
 80070b0:	08008ce0 	.word	0x08008ce0

080070b4 <assert_0_callback>:

void assert_0_callback(char* token)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
	assert_param(0);
 80070bc:	21dd      	movs	r1, #221	; 0xdd
 80070be:	4803      	ldr	r0, [pc, #12]	; (80070cc <assert_0_callback+0x18>)
 80070c0:	f000 fc5e 	bl	8007980 <assert_failed>
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	08008cec 	.word	0x08008cec

080070d0 <clear_assert_flag_callback>:

void clear_assert_flag_callback(char* token)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
	s_assert_struct.flag = 0;
 80070d8:	4b04      	ldr	r3, [pc, #16]	; (80070ec <clear_assert_flag_callback+0x1c>)
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20000000 	.word	0x20000000

080070f0 <MY_FLASH_EraseSector>:
static uint8_t MY_SectorNum;

//functions definitions
//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80070f4:	f7fa fa08 	bl	8001508 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <MY_FLASH_EraseSector+0x1c>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2102      	movs	r1, #2
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fa fcc8 	bl	8001a94 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8007104:	f7fa fa22 	bl	800154c <HAL_FLASH_Lock>
}
 8007108:	bf00      	nop
 800710a:	bd80      	pop	{r7, pc}
 800710c:	2000027c 	.word	0x2000027c

08007110 <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	6039      	str	r1, [r7, #0]
 800711a:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 800711c:	4a05      	ldr	r2, [pc, #20]	; (8007134 <MY_FLASH_SetSectorAddrs+0x24>)
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8007122:	4a05      	ldr	r2, [pc, #20]	; (8007138 <MY_FLASH_SetSectorAddrs+0x28>)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	6013      	str	r3, [r2, #0]
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	2000027c 	.word	0x2000027c
 8007138:	20000278 	.word	0x20000278

0800713c <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b089      	sub	sp, #36	; 0x24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800714a:	4b34      	ldr	r3, [pc, #208]	; (800721c <MY_FLASH_WriteN+0xe0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	MY_FLASH_EraseSector();
 8007154:	f7ff ffcc 	bl	80070f0 <MY_FLASH_EraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 8007158:	f7fa f9d6 	bl	8001508 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d01e      	beq.n	80071a0 <MY_FLASH_WriteN+0x64>
 8007162:	2b02      	cmp	r3, #2
 8007164:	d038      	beq.n	80071d8 <MY_FLASH_WriteN+0x9c>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d151      	bne.n	800720e <MY_FLASH_WriteN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 800716a:	2300      	movs	r3, #0
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	e012      	b.n	8007196 <MY_FLASH_WriteN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	4413      	add	r3, r2
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	f04f 0400 	mov.w	r4, #0
 800717e:	461a      	mov	r2, r3
 8007180:	4623      	mov	r3, r4
 8007182:	69f9      	ldr	r1, [r7, #28]
 8007184:	2000      	movs	r0, #0
 8007186:	f7fa f959 	bl	800143c <HAL_FLASH_Program>
					flashAddress++;
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	3301      	adds	r3, #1
 800718e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	3301      	adds	r3, #1
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	429a      	cmp	r2, r3
 800719c:	d3e8      	bcc.n	8007170 <MY_FLASH_WriteN+0x34>
				}
			break;
 800719e:	e036      	b.n	800720e <MY_FLASH_WriteN+0xd2>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e013      	b.n	80071ce <MY_FLASH_WriteN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f04f 0400 	mov.w	r4, #0
 80071b6:	461a      	mov	r2, r3
 80071b8:	4623      	mov	r3, r4
 80071ba:	69f9      	ldr	r1, [r7, #28]
 80071bc:	2001      	movs	r0, #1
 80071be:	f7fa f93d 	bl	800143c <HAL_FLASH_Program>
					flashAddress+=2;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3302      	adds	r3, #2
 80071c6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	3301      	adds	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d3e7      	bcc.n	80071a6 <MY_FLASH_WriteN+0x6a>
				}
			break;
 80071d6:	e01a      	b.n	800720e <MY_FLASH_WriteN+0xd2>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 80071d8:	2300      	movs	r3, #0
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	e012      	b.n	8007204 <MY_FLASH_WriteN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4413      	add	r3, r2
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f04f 0400 	mov.w	r4, #0
 80071ec:	461a      	mov	r2, r3
 80071ee:	4623      	mov	r3, r4
 80071f0:	69f9      	ldr	r1, [r7, #28]
 80071f2:	2002      	movs	r0, #2
 80071f4:	f7fa f922 	bl	800143c <HAL_FLASH_Program>
					flashAddress+=4;
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	3304      	adds	r3, #4
 80071fc:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	3301      	adds	r3, #1
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	d3e8      	bcc.n	80071de <MY_FLASH_WriteN+0xa2>
				}
			break;
 800720c:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800720e:	f7fa f99d 	bl	800154c <HAL_FLASH_Lock>
}
 8007212:	bf00      	nop
 8007214:	3724      	adds	r7, #36	; 0x24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd90      	pop	{r4, r7, pc}
 800721a:	bf00      	nop
 800721c:	20000278 	.word	0x20000278

08007220 <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8007220:	b480      	push	{r7}
 8007222:	b089      	sub	sp, #36	; 0x24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800722e:	4b28      	ldr	r3, [pc, #160]	; (80072d0 <MY_FLASH_ReadN+0xb0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d018      	beq.n	8007270 <MY_FLASH_ReadN+0x50>
 800723e:	2b02      	cmp	r3, #2
 8007240:	d02b      	beq.n	800729a <MY_FLASH_ReadN+0x7a>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d000      	beq.n	8007248 <MY_FLASH_ReadN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8007246:	e03d      	b.n	80072c4 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8007248:	2300      	movs	r3, #0
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	e00b      	b.n	8007266 <MY_FLASH_ReadN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	440b      	add	r3, r1
 8007256:	7812      	ldrb	r2, [r2, #0]
 8007258:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	3301      	adds	r3, #1
 800725e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	3301      	adds	r3, #1
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	429a      	cmp	r2, r3
 800726c:	d3ef      	bcc.n	800724e <MY_FLASH_ReadN+0x2e>
			break;
 800726e:	e029      	b.n	80072c4 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e00c      	b.n	8007290 <MY_FLASH_ReadN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	440b      	add	r3, r1
 8007280:	8812      	ldrh	r2, [r2, #0]
 8007282:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	3302      	adds	r3, #2
 8007288:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	3301      	adds	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d3ee      	bcc.n	8007276 <MY_FLASH_ReadN+0x56>
			break;
 8007298:	e014      	b.n	80072c4 <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
 800729e:	e00c      	b.n	80072ba <MY_FLASH_ReadN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	68b9      	ldr	r1, [r7, #8]
 80072a8:	440b      	add	r3, r1
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	3304      	adds	r3, #4
 80072b2:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3301      	adds	r3, #1
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d3ee      	bcc.n	80072a0 <MY_FLASH_ReadN+0x80>
			break;
 80072c2:	bf00      	nop
}
 80072c4:	bf00      	nop
 80072c6:	3724      	adds	r7, #36	; 0x24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20000278 	.word	0x20000278

080072d4 <__NVIC_SystemReset>:
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80072d8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <__NVIC_SystemReset+0x20>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80072e4:	4903      	ldr	r1, [pc, #12]	; (80072f4 <__NVIC_SystemReset+0x20>)
 80072e6:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <__NVIC_SystemReset+0x24>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60cb      	str	r3, [r1, #12]
 80072ec:	f3bf 8f4f 	dsb	sy
    __NOP();
 80072f0:	bf00      	nop
 80072f2:	e7fd      	b.n	80072f0 <__NVIC_SystemReset+0x1c>
 80072f4:	e000ed00 	.word	0xe000ed00
 80072f8:	05fa0004 	.word	0x05fa0004

080072fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007302:	f7f9 f945 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007306:	f000 f84b 	bl	80073a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800730a:	f000 fa39 	bl	8007780 <MX_GPIO_Init>
  MX_DMA_Init();
 800730e:	f000 fa0f 	bl	8007730 <MX_DMA_Init>
  MX_CRC_Init();
 8007312:	f000 f8cb 	bl	80074ac <MX_CRC_Init>
 // MX_RTC_Init();
  MX_USART2_UART_Init();
 8007316:	f000 f9e1 	bl	80076dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800731a:	f000 f969 	bl	80075f0 <MX_TIM3_Init>
#ifdef IWDG_ENABLE
  MX_IWDG_Init();
#endif
  /* USER CODE BEGIN 2 */
#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 800731e:	2201      	movs	r2, #1
 8007320:	4919      	ldr	r1, [pc, #100]	; (8007388 <main+0x8c>)
 8007322:	481a      	ldr	r0, [pc, #104]	; (800738c <main+0x90>)
 8007324:	f7fe fdc4 	bl	8005eb0 <HAL_UART_Receive_DMA>
#else
  HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
#endif


  if (s_assert_struct.flag == 0xFF)
 8007328:	4b19      	ldr	r3, [pc, #100]	; (8007390 <main+0x94>)
 800732a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800732e:	2bff      	cmp	r3, #255	; 0xff
 8007330:	d126      	bne.n	8007380 <main+0x84>
  {
	  char temp [8];
	  sprintf(s_assert_struct._file, "%s\n", s_assert_struct._file);
 8007332:	4a17      	ldr	r2, [pc, #92]	; (8007390 <main+0x94>)
 8007334:	4917      	ldr	r1, [pc, #92]	; (8007394 <main+0x98>)
 8007336:	4816      	ldr	r0, [pc, #88]	; (8007390 <main+0x94>)
 8007338:	f000 fdd8 	bl	8007eec <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)s_assert_struct._file, strlen(s_assert_struct._file), 10);
 800733c:	4814      	ldr	r0, [pc, #80]	; (8007390 <main+0x94>)
 800733e:	f7f8 ff4f 	bl	80001e0 <strlen>
 8007342:	4603      	mov	r3, r0
 8007344:	b29a      	uxth	r2, r3
 8007346:	230a      	movs	r3, #10
 8007348:	4911      	ldr	r1, [pc, #68]	; (8007390 <main+0x94>)
 800734a:	4810      	ldr	r0, [pc, #64]	; (800738c <main+0x90>)
 800734c:	f7fe fcaa 	bl	8005ca4 <HAL_UART_Transmit>
	  sprintf(temp, "%u\n", (unsigned int)s_assert_struct._line);
 8007350:	4b0f      	ldr	r3, [pc, #60]	; (8007390 <main+0x94>)
 8007352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007354:	463b      	mov	r3, r7
 8007356:	4910      	ldr	r1, [pc, #64]	; (8007398 <main+0x9c>)
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fdc7 	bl	8007eec <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 10);
 800735e:	463b      	mov	r3, r7
 8007360:	4618      	mov	r0, r3
 8007362:	f7f8 ff3d 	bl	80001e0 <strlen>
 8007366:	4603      	mov	r3, r0
 8007368:	b29a      	uxth	r2, r3
 800736a:	4639      	mov	r1, r7
 800736c:	230a      	movs	r3, #10
 800736e:	4807      	ldr	r0, [pc, #28]	; (800738c <main+0x90>)
 8007370:	f7fe fc98 	bl	8005ca4 <HAL_UART_Transmit>
	  while (s_assert_struct.flag == 0xFF)
 8007374:	bf00      	nop
 8007376:	4b06      	ldr	r3, [pc, #24]	; (8007390 <main+0x94>)
 8007378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800737c:	2bff      	cmp	r3, #255	; 0xff
 800737e:	d0fa      	beq.n	8007376 <main+0x7a>
		  kickDog();
#endif
	  }
  }

  uart_print(HELLO_WORLD);
 8007380:	4806      	ldr	r0, [pc, #24]	; (800739c <main+0xa0>)
 8007382:	f000 fad5 	bl	8007930 <uart_print>
  //uart_print((char*)arr);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007386:	e7fe      	b.n	8007386 <main+0x8a>
 8007388:	2000032a 	.word	0x2000032a
 800738c:	20000418 	.word	0x20000418
 8007390:	20000000 	.word	0x20000000
 8007394:	08008dac 	.word	0x08008dac
 8007398:	08008db0 	.word	0x08008db0
 800739c:	08008db4 	.word	0x08008db4

080073a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b09a      	sub	sp, #104	; 0x68
 80073a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80073aa:	2230      	movs	r2, #48	; 0x30
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fd93 	bl	8007eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	609a      	str	r2, [r3, #8]
 80073c0:	60da      	str	r2, [r3, #12]
 80073c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80073c4:	f107 030c 	add.w	r3, r7, #12
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
 80073d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80073d6:	2300      	movs	r3, #0
 80073d8:	60bb      	str	r3, [r7, #8]
 80073da:	4b32      	ldr	r3, [pc, #200]	; (80074a4 <SystemClock_Config+0x104>)
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	4a31      	ldr	r2, [pc, #196]	; (80074a4 <SystemClock_Config+0x104>)
 80073e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e4:	6413      	str	r3, [r2, #64]	; 0x40
 80073e6:	4b2f      	ldr	r3, [pc, #188]	; (80074a4 <SystemClock_Config+0x104>)
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ee:	60bb      	str	r3, [r7, #8]
 80073f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80073f2:	2300      	movs	r3, #0
 80073f4:	607b      	str	r3, [r7, #4]
 80073f6:	4b2c      	ldr	r3, [pc, #176]	; (80074a8 <SystemClock_Config+0x108>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a2b      	ldr	r2, [pc, #172]	; (80074a8 <SystemClock_Config+0x108>)
 80073fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	4b29      	ldr	r3, [pc, #164]	; (80074a8 <SystemClock_Config+0x108>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800740a:	607b      	str	r3, [r7, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800740e:	230e      	movs	r3, #14
 8007410:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007412:	2301      	movs	r3, #1
 8007414:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007416:	2301      	movs	r3, #1
 8007418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800741a:	2310      	movs	r3, #16
 800741c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800741e:	2301      	movs	r3, #1
 8007420:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007422:	2302      	movs	r3, #2
 8007424:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007426:	2300      	movs	r3, #0
 8007428:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 800742a:	2310      	movs	r3, #16
 800742c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 800742e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007432:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007434:	2304      	movs	r3, #4
 8007436:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007438:	2304      	movs	r3, #4
 800743a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800743c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007440:	4618      	mov	r0, r3
 8007442:	f7fa ffe5 	bl	8002410 <HAL_RCC_OscConfig>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800744c:	f000 fa90 	bl	8007970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007450:	230f      	movs	r3, #15
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007454:	2302      	movs	r3, #2
 8007456:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007458:	2300      	movs	r3, #0
 800745a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800745c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007460:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007462:	2300      	movs	r3, #0
 8007464:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800746a:	2102      	movs	r1, #2
 800746c:	4618      	mov	r0, r3
 800746e:	f7fb faef 	bl	8002a50 <HAL_RCC_ClockConfig>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8007478:	f000 fa7a 	bl	8007970 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800747c:	2302      	movs	r3, #2
 800747e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007484:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007486:	f107 030c 	add.w	r3, r7, #12
 800748a:	4618      	mov	r0, r3
 800748c:	f7fb fd7a 	bl	8002f84 <HAL_RCCEx_PeriphCLKConfig>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8007496:	f000 fa6b 	bl	8007970 <Error_Handler>
  }
}
 800749a:	bf00      	nop
 800749c:	3768      	adds	r7, #104	; 0x68
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	40023800 	.word	0x40023800
 80074a8:	40007000 	.word	0x40007000

080074ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80074b0:	4b06      	ldr	r3, [pc, #24]	; (80074cc <MX_CRC_Init+0x20>)
 80074b2:	4a07      	ldr	r2, [pc, #28]	; (80074d0 <MX_CRC_Init+0x24>)
 80074b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80074b6:	4805      	ldr	r0, [pc, #20]	; (80074cc <MX_CRC_Init+0x20>)
 80074b8:	f7f9 fa56 	bl	8000968 <HAL_CRC_Init>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80074c2:	f000 fa55 	bl	8007970 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80074c6:	bf00      	nop
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000350 	.word	0x20000350
 80074d0:	40023000 	.word	0x40023000

080074d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b090      	sub	sp, #64	; 0x40
 80074d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80074da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	605a      	str	r2, [r3, #4]
 80074e4:	609a      	str	r2, [r3, #8]
 80074e6:	60da      	str	r2, [r3, #12]
 80074e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80074ea:	2300      	movs	r3, #0
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80074ee:	463b      	mov	r3, r7
 80074f0:	2228      	movs	r2, #40	; 0x28
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fcf0 	bl	8007eda <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80074fa:	4b3b      	ldr	r3, [pc, #236]	; (80075e8 <MX_RTC_Init+0x114>)
 80074fc:	4a3b      	ldr	r2, [pc, #236]	; (80075ec <MX_RTC_Init+0x118>)
 80074fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007500:	4b39      	ldr	r3, [pc, #228]	; (80075e8 <MX_RTC_Init+0x114>)
 8007502:	2200      	movs	r2, #0
 8007504:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007506:	4b38      	ldr	r3, [pc, #224]	; (80075e8 <MX_RTC_Init+0x114>)
 8007508:	227f      	movs	r2, #127	; 0x7f
 800750a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800750c:	4b36      	ldr	r3, [pc, #216]	; (80075e8 <MX_RTC_Init+0x114>)
 800750e:	22ff      	movs	r2, #255	; 0xff
 8007510:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007512:	4b35      	ldr	r3, [pc, #212]	; (80075e8 <MX_RTC_Init+0x114>)
 8007514:	2200      	movs	r2, #0
 8007516:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007518:	4b33      	ldr	r3, [pc, #204]	; (80075e8 <MX_RTC_Init+0x114>)
 800751a:	2200      	movs	r2, #0
 800751c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800751e:	4b32      	ldr	r3, [pc, #200]	; (80075e8 <MX_RTC_Init+0x114>)
 8007520:	2200      	movs	r2, #0
 8007522:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007524:	4830      	ldr	r0, [pc, #192]	; (80075e8 <MX_RTC_Init+0x114>)
 8007526:	f7fb ff41 	bl	80033ac <HAL_RTC_Init>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8007530:	f000 fa1e 	bl	8007970 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007546:	2300      	movs	r3, #0
 8007548:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800754a:	2300      	movs	r3, #0
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800754e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007552:	2200      	movs	r2, #0
 8007554:	4619      	mov	r1, r3
 8007556:	4824      	ldr	r0, [pc, #144]	; (80075e8 <MX_RTC_Init+0x114>)
 8007558:	f7fc f8ba 	bl	80036d0 <HAL_RTC_SetTime>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8007562:	f000 fa05 	bl	8007970 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800756c:	2301      	movs	r3, #1
 800756e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8007572:	2301      	movs	r3, #1
 8007574:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800757e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007582:	2200      	movs	r2, #0
 8007584:	4619      	mov	r1, r3
 8007586:	4818      	ldr	r0, [pc, #96]	; (80075e8 <MX_RTC_Init+0x114>)
 8007588:	f7fc fa0e 	bl	80039a8 <HAL_RTC_SetDate>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8007592:	f000 f9ed 	bl	8007970 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 800759e:	2301      	movs	r3, #1
 80075a0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80075aa:	2300      	movs	r3, #0
 80075ac:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80075ae:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 80075b2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80075c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80075c8:	463b      	mov	r3, r7
 80075ca:	2200      	movs	r2, #0
 80075cc:	4619      	mov	r1, r3
 80075ce:	4806      	ldr	r0, [pc, #24]	; (80075e8 <MX_RTC_Init+0x114>)
 80075d0:	f7fc fb1a 	bl	8003c08 <HAL_RTC_SetAlarm_IT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80075da:	f000 f9c9 	bl	8007970 <Error_Handler>
		0x1FFU) != HAL_OK) {
    		Error_Handler();
      	}*/
  /* USER CODE END RTC_Init 2 */

}
 80075de:	bf00      	nop
 80075e0:	3740      	adds	r7, #64	; 0x40
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	200003f8 	.word	0x200003f8
 80075ec:	40002800 	.word	0x40002800

080075f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08e      	sub	sp, #56	; 0x38
 80075f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80075f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	605a      	str	r2, [r3, #4]
 8007600:	609a      	str	r2, [r3, #8]
 8007602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007604:	f107 0320 	add.w	r3, r7, #32
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	609a      	str	r2, [r3, #8]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	611a      	str	r2, [r3, #16]
 800761c:	615a      	str	r2, [r3, #20]
 800761e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007620:	4b2c      	ldr	r3, [pc, #176]	; (80076d4 <MX_TIM3_Init+0xe4>)
 8007622:	4a2d      	ldr	r2, [pc, #180]	; (80076d8 <MX_TIM3_Init+0xe8>)
 8007624:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8007626:	4b2b      	ldr	r3, [pc, #172]	; (80076d4 <MX_TIM3_Init+0xe4>)
 8007628:	2253      	movs	r2, #83	; 0x53
 800762a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800762c:	4b29      	ldr	r3, [pc, #164]	; (80076d4 <MX_TIM3_Init+0xe4>)
 800762e:	2200      	movs	r2, #0
 8007630:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8007632:	4b28      	ldr	r3, [pc, #160]	; (80076d4 <MX_TIM3_Init+0xe4>)
 8007634:	2263      	movs	r2, #99	; 0x63
 8007636:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007638:	4b26      	ldr	r3, [pc, #152]	; (80076d4 <MX_TIM3_Init+0xe4>)
 800763a:	2200      	movs	r2, #0
 800763c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800763e:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <MX_TIM3_Init+0xe4>)
 8007640:	2200      	movs	r2, #0
 8007642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007644:	4823      	ldr	r0, [pc, #140]	; (80076d4 <MX_TIM3_Init+0xe4>)
 8007646:	f7fc fea9 	bl	800439c <HAL_TIM_Base_Init>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8007650:	f000 f98e 	bl	8007970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007658:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800765a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800765e:	4619      	mov	r1, r3
 8007660:	481c      	ldr	r0, [pc, #112]	; (80076d4 <MX_TIM3_Init+0xe4>)
 8007662:	f7fd fb17 	bl	8004c94 <HAL_TIM_ConfigClockSource>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800766c:	f000 f980 	bl	8007970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007670:	4818      	ldr	r0, [pc, #96]	; (80076d4 <MX_TIM3_Init+0xe4>)
 8007672:	f7fc ff35 	bl	80044e0 <HAL_TIM_PWM_Init>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800767c:	f000 f978 	bl	8007970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007680:	2300      	movs	r3, #0
 8007682:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007684:	2300      	movs	r3, #0
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007688:	f107 0320 	add.w	r3, r7, #32
 800768c:	4619      	mov	r1, r3
 800768e:	4811      	ldr	r0, [pc, #68]	; (80076d4 <MX_TIM3_Init+0xe4>)
 8007690:	f7fe f994 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800769a:	f000 f969 	bl	8007970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800769e:	2360      	movs	r3, #96	; 0x60
 80076a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	2200      	movs	r2, #0
 80076b2:	4619      	mov	r1, r3
 80076b4:	4807      	ldr	r0, [pc, #28]	; (80076d4 <MX_TIM3_Init+0xe4>)
 80076b6:	f7fd f943 	bl	8004940 <HAL_TIM_PWM_ConfigChannel>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80076c0:	f000 f956 	bl	8007970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80076c4:	4803      	ldr	r0, [pc, #12]	; (80076d4 <MX_TIM3_Init+0xe4>)
 80076c6:	f000 fa1f 	bl	8007b08 <HAL_TIM_MspPostInit>

}
 80076ca:	bf00      	nop
 80076cc:	3738      	adds	r7, #56	; 0x38
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000358 	.word	0x20000358
 80076d8:	40000400 	.word	0x40000400

080076dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80076e0:	4b11      	ldr	r3, [pc, #68]	; (8007728 <MX_USART2_UART_Init+0x4c>)
 80076e2:	4a12      	ldr	r2, [pc, #72]	; (800772c <MX_USART2_UART_Init+0x50>)
 80076e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <MX_USART2_UART_Init+0x4c>)
 80076e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80076ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80076ee:	4b0e      	ldr	r3, [pc, #56]	; (8007728 <MX_USART2_UART_Init+0x4c>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80076f4:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <MX_USART2_UART_Init+0x4c>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80076fa:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <MX_USART2_UART_Init+0x4c>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007700:	4b09      	ldr	r3, [pc, #36]	; (8007728 <MX_USART2_UART_Init+0x4c>)
 8007702:	220c      	movs	r2, #12
 8007704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007706:	4b08      	ldr	r3, [pc, #32]	; (8007728 <MX_USART2_UART_Init+0x4c>)
 8007708:	2200      	movs	r2, #0
 800770a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <MX_USART2_UART_Init+0x4c>)
 800770e:	2200      	movs	r2, #0
 8007710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007712:	4805      	ldr	r0, [pc, #20]	; (8007728 <MX_USART2_UART_Init+0x4c>)
 8007714:	f7fe fa10 	bl	8005b38 <HAL_UART_Init>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800771e:	f000 f927 	bl	8007970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007722:	bf00      	nop
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000418 	.word	0x20000418
 800772c:	40004400 	.word	0x40004400

08007730 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007736:	2300      	movs	r3, #0
 8007738:	607b      	str	r3, [r7, #4]
 800773a:	4b10      	ldr	r3, [pc, #64]	; (800777c <MX_DMA_Init+0x4c>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4a0f      	ldr	r2, [pc, #60]	; (800777c <MX_DMA_Init+0x4c>)
 8007740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <MX_DMA_Init+0x4c>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800774e:	607b      	str	r3, [r7, #4]
 8007750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8007752:	2200      	movs	r2, #0
 8007754:	2100      	movs	r1, #0
 8007756:	2010      	movs	r0, #16
 8007758:	f7f9 f89e 	bl	8000898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800775c:	2010      	movs	r0, #16
 800775e:	f7f9 f8c7 	bl	80008f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	2011      	movs	r0, #17
 8007768:	f7f9 f896 	bl	8000898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800776c:	2011      	movs	r0, #17
 800776e:	f7f9 f8bf 	bl	80008f0 <HAL_NVIC_EnableIRQ>

}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40023800 	.word	0x40023800

08007780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007786:	f107 030c 	add.w	r3, r7, #12
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	605a      	str	r2, [r3, #4]
 8007790:	609a      	str	r2, [r3, #8]
 8007792:	60da      	str	r2, [r3, #12]
 8007794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007796:	2300      	movs	r3, #0
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	4b18      	ldr	r3, [pc, #96]	; (80077fc <MX_GPIO_Init+0x7c>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	4a17      	ldr	r2, [pc, #92]	; (80077fc <MX_GPIO_Init+0x7c>)
 80077a0:	f043 0304 	orr.w	r3, r3, #4
 80077a4:	6313      	str	r3, [r2, #48]	; 0x30
 80077a6:	4b15      	ldr	r3, [pc, #84]	; (80077fc <MX_GPIO_Init+0x7c>)
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	60bb      	str	r3, [r7, #8]
 80077b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077b2:	2300      	movs	r3, #0
 80077b4:	607b      	str	r3, [r7, #4]
 80077b6:	4b11      	ldr	r3, [pc, #68]	; (80077fc <MX_GPIO_Init+0x7c>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	4a10      	ldr	r2, [pc, #64]	; (80077fc <MX_GPIO_Init+0x7c>)
 80077bc:	f043 0301 	orr.w	r3, r3, #1
 80077c0:	6313      	str	r3, [r2, #48]	; 0x30
 80077c2:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <MX_GPIO_Init+0x7c>)
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80077ce:	2200      	movs	r2, #0
 80077d0:	2120      	movs	r1, #32
 80077d2:	480b      	ldr	r0, [pc, #44]	; (8007800 <MX_GPIO_Init+0x80>)
 80077d4:	f7fa fdea 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80077d8:	2320      	movs	r3, #32
 80077da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077dc:	2301      	movs	r3, #1
 80077de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e8:	f107 030c 	add.w	r3, r7, #12
 80077ec:	4619      	mov	r1, r3
 80077ee:	4804      	ldr	r0, [pc, #16]	; (8007800 <MX_GPIO_Init+0x80>)
 80077f0:	f7fa fb34 	bl	8001e5c <HAL_GPIO_Init>

}
 80077f4:	bf00      	nop
 80077f6:	3720      	adds	r7, #32
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40023800 	.word	0x40023800
 8007800:	40020000 	.word	0x40020000

08007804 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	if (s_buffer._rx_single_char != '\n')
 8007820:	4b19      	ldr	r3, [pc, #100]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 8007822:	7e9b      	ldrb	r3, [r3, #26]
 8007824:	2b0a      	cmp	r3, #10
 8007826:	d011      	beq.n	800784c <HAL_UART_RxCpltCallback+0x34>
	{
		if(s_buffer._rx_index < BUFFER_SIZE)
 8007828:	4b17      	ldr	r3, [pc, #92]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 800782a:	7e5b      	ldrb	r3, [r3, #25]
 800782c:	2b18      	cmp	r3, #24
 800782e:	d822      	bhi.n	8007876 <HAL_UART_RxCpltCallback+0x5e>
		{
			s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 8007830:	4b15      	ldr	r3, [pc, #84]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 8007832:	7e5b      	ldrb	r3, [r3, #25]
 8007834:	461a      	mov	r2, r3
 8007836:	4b14      	ldr	r3, [pc, #80]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 8007838:	7e99      	ldrb	r1, [r3, #26]
 800783a:	4b13      	ldr	r3, [pc, #76]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 800783c:	5499      	strb	r1, [r3, r2]
			s_buffer._rx_index++;
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 8007840:	7e5b      	ldrb	r3, [r3, #25]
 8007842:	3301      	adds	r3, #1
 8007844:	b2da      	uxtb	r2, r3
 8007846:	4b10      	ldr	r3, [pc, #64]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 8007848:	765a      	strb	r2, [r3, #25]
 800784a:	e014      	b.n	8007876 <HAL_UART_RxCpltCallback+0x5e>
		}
	}
	else
	{
		s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 800784e:	7e5b      	ldrb	r3, [r3, #25]
 8007850:	461a      	mov	r2, r3
 8007852:	4b0d      	ldr	r3, [pc, #52]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 8007854:	7e99      	ldrb	r1, [r3, #26]
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 8007858:	5499      	strb	r1, [r3, r2]
		s_buffer._rx_index++;
 800785a:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 800785c:	7e5b      	ldrb	r3, [r3, #25]
 800785e:	3301      	adds	r3, #1
 8007860:	b2da      	uxtb	r2, r3
 8007862:	4b09      	ldr	r3, [pc, #36]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 8007864:	765a      	strb	r2, [r3, #25]
		whichCommand();
 8007866:	f000 f823 	bl	80078b0 <whichCommand>
		bufferInit(&s_buffer);
 800786a:	4807      	ldr	r0, [pc, #28]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 800786c:	f7ff fac0 	bl	8006df0 <bufferInit>
		s_buffer._rx_index = 0;
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <HAL_UART_RxCpltCallback+0x70>)
 8007872:	2200      	movs	r2, #0
 8007874:	765a      	strb	r2, [r3, #25]
	}

#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 8007876:	2201      	movs	r2, #1
 8007878:	4904      	ldr	r1, [pc, #16]	; (800788c <HAL_UART_RxCpltCallback+0x74>)
 800787a:	4805      	ldr	r0, [pc, #20]	; (8007890 <HAL_UART_RxCpltCallback+0x78>)
 800787c:	f7fe fb18 	bl	8005eb0 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
#endif

	//HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
	//HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000310 	.word	0x20000310
 800788c:	2000032a 	.word	0x2000032a
 8007890:	20000418 	.word	0x20000418

08007894 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  uart_print(TICK);
 800789c:	4803      	ldr	r0, [pc, #12]	; (80078ac <HAL_RTC_AlarmAEventCallback+0x18>)
 800789e:	f000 f847 	bl	8007930 <uart_print>
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	08008dc4 	.word	0x08008dc4

080078b0 <whichCommand>:

void whichCommand (void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
	char* token = strtok((char*)s_buffer._p_rx_buffer, " ");
 80078b6:	491b      	ldr	r1, [pc, #108]	; (8007924 <whichCommand+0x74>)
 80078b8:	481b      	ldr	r0, [pc, #108]	; (8007928 <whichCommand+0x78>)
 80078ba:	f000 fb5f 	bl	8007f7c <strtok>
 80078be:	6038      	str	r0, [r7, #0]

	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 80078c0:	2300      	movs	r3, #0
 80078c2:	71fb      	strb	r3, [r7, #7]
 80078c4:	e027      	b.n	8007916 <whichCommand+0x66>
	{
		if (strncmp(token, commands[i]._name, commands[i]._size)==0)
 80078c6:	79fa      	ldrb	r2, [r7, #7]
 80078c8:	4918      	ldr	r1, [pc, #96]	; (800792c <whichCommand+0x7c>)
 80078ca:	4613      	mov	r3, r2
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	79fa      	ldrb	r2, [r7, #7]
 80078d8:	4914      	ldr	r1, [pc, #80]	; (800792c <whichCommand+0x7c>)
 80078da:	4613      	mov	r3, r2
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	440b      	add	r3, r1
 80078e4:	3304      	adds	r3, #4
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	4601      	mov	r1, r0
 80078ec:	6838      	ldr	r0, [r7, #0]
 80078ee:	f000 fb1d 	bl	8007f2c <strncmp>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10b      	bne.n	8007910 <whichCommand+0x60>
		{
			commands[i].func_ptr(token);
 80078f8:	79fa      	ldrb	r2, [r7, #7]
 80078fa:	490c      	ldr	r1, [pc, #48]	; (800792c <whichCommand+0x7c>)
 80078fc:	4613      	mov	r3, r2
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	3308      	adds	r3, #8
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6838      	ldr	r0, [r7, #0]
 800790c:	4798      	blx	r3
			return;
 800790e:	e005      	b.n	800791c <whichCommand+0x6c>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	3301      	adds	r3, #1
 8007914:	71fb      	strb	r3, [r7, #7]
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	2b0d      	cmp	r3, #13
 800791a:	d9d4      	bls.n	80078c6 <whichCommand+0x16>
		}
	}
}
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	08008dcc 	.word	0x08008dcc
 8007928:	20000310 	.word	0x20000310
 800792c:	08008e08 	.word	0x08008e08

08007930 <uart_print>:
	}
	return status;
}

void uart_print(char* token)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	memcpy((char*)s_buffer._p_tx_buffer, token, strlen(token));
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7f8 fc51 	bl	80001e0 <strlen>
 800793e:	4603      	mov	r3, r0
 8007940:	461a      	mov	r2, r3
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	4808      	ldr	r0, [pc, #32]	; (8007968 <uart_print+0x38>)
 8007946:	f000 fabd 	bl	8007ec4 <memcpy>
	//memcpy((char*)s_buffer._p_tx_buffer, token, sizeof(s_buffer._p_tx_buffer));
#ifdef UART_TX_DMA
	HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(token));
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7f8 fc48 	bl	80001e0 <strlen>
 8007950:	4603      	mov	r3, r0
 8007952:	b29b      	uxth	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	4904      	ldr	r1, [pc, #16]	; (8007968 <uart_print+0x38>)
 8007958:	4804      	ldr	r0, [pc, #16]	; (800796c <uart_print+0x3c>)
 800795a:	f7fe fa3d 	bl	8005dd8 <HAL_UART_Transmit_DMA>
#else
	HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(token), 10);
#endif
}
 800795e:	bf00      	nop
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	2000032b 	.word	0x2000032b
 800796c:	20000418 	.word	0x20000418

08007970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uart_print("Error");
 8007974:	4801      	ldr	r0, [pc, #4]	; (800797c <Error_Handler+0xc>)
 8007976:	f7ff ffdb 	bl	8007930 <uart_print>
	while(1);
 800797a:	e7fe      	b.n	800797a <Error_Handler+0xa>
 800797c:	08008df8 	.word	0x08008df8

08007980 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
	//s_assert_struct._file = (char*)*file;
	//s_assert_struct.try = 0xDEADBEEF;
	//memcpy((char*)s_assert_struct._file, (char*)file, strlen((char*)file));
	/*if(s_assert_struct.flag)
		return;*/
	s_assert_struct.flag = 0xFF;
 800798a:	4b0e      	ldr	r3, [pc, #56]	; (80079c4 <assert_failed+0x44>)
 800798c:	22ff      	movs	r2, #255	; 0xff
 800798e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (int i = 0; i < sizeof(s_assert_struct._file); i++)
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	e007      	b.n	80079a8 <assert_failed+0x28>
	{
		s_assert_struct._file [i]  = 0;
 8007998:	4a0a      	ldr	r2, [pc, #40]	; (80079c4 <assert_failed+0x44>)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(s_assert_struct._file); i++)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3301      	adds	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b3b      	cmp	r3, #59	; 0x3b
 80079ac:	d9f4      	bls.n	8007998 <assert_failed+0x18>
	}

	strncpy((char*)s_assert_struct._file, (char*)file, sizeof(s_assert_struct._file));
 80079ae:	223c      	movs	r2, #60	; 0x3c
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	4804      	ldr	r0, [pc, #16]	; (80079c4 <assert_failed+0x44>)
 80079b4:	f000 facc 	bl	8007f50 <strncpy>
	s_assert_struct._line = line;
 80079b8:	4a02      	ldr	r2, [pc, #8]	; (80079c4 <assert_failed+0x44>)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	63d3      	str	r3, [r2, #60]	; 0x3c

	while(1)
	{
		NVIC_SystemReset();
 80079be:	f7ff fc89 	bl	80072d4 <__NVIC_SystemReset>
 80079c2:	bf00      	nop
 80079c4:	20000000 	.word	0x20000000

080079c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079ce:	2300      	movs	r3, #0
 80079d0:	607b      	str	r3, [r7, #4]
 80079d2:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <HAL_MspInit+0x4c>)
 80079d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d6:	4a0f      	ldr	r2, [pc, #60]	; (8007a14 <HAL_MspInit+0x4c>)
 80079d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079dc:	6453      	str	r3, [r2, #68]	; 0x44
 80079de:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <HAL_MspInit+0x4c>)
 80079e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079e6:	607b      	str	r3, [r7, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079ea:	2300      	movs	r3, #0
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <HAL_MspInit+0x4c>)
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	4a08      	ldr	r2, [pc, #32]	; (8007a14 <HAL_MspInit+0x4c>)
 80079f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f8:	6413      	str	r3, [r2, #64]	; 0x40
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <HAL_MspInit+0x4c>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007a06:	2007      	movs	r0, #7
 8007a08:	f7f8 ff26 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	40023800 	.word	0x40023800

08007a18 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a0b      	ldr	r2, [pc, #44]	; (8007a54 <HAL_CRC_MspInit+0x3c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d10d      	bne.n	8007a46 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_CRC_MspInit+0x40>)
 8007a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a32:	4a09      	ldr	r2, [pc, #36]	; (8007a58 <HAL_CRC_MspInit+0x40>)
 8007a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a38:	6313      	str	r3, [r2, #48]	; 0x30
 8007a3a:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <HAL_CRC_MspInit+0x40>)
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40023000 	.word	0x40023000
 8007a58:	40023800 	.word	0x40023800

08007a5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a08      	ldr	r2, [pc, #32]	; (8007a8c <HAL_RTC_MspInit+0x30>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d10a      	bne.n	8007a84 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007a6e:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <HAL_RTC_MspInit+0x34>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8007a74:	2200      	movs	r2, #0
 8007a76:	2100      	movs	r1, #0
 8007a78:	2029      	movs	r0, #41	; 0x29
 8007a7a:	f7f8 ff0d 	bl	8000898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8007a7e:	2029      	movs	r0, #41	; 0x29
 8007a80:	f7f8 ff36 	bl	80008f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40002800 	.word	0x40002800
 8007a90:	42470e3c 	.word	0x42470e3c

08007a94 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a06      	ldr	r2, [pc, #24]	; (8007abc <HAL_RTC_MspDeInit+0x28>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d105      	bne.n	8007ab2 <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8007aa6:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <HAL_RTC_MspDeInit+0x2c>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8007aac:	2029      	movs	r0, #41	; 0x29
 8007aae:	f7f8 ff37 	bl	8000920 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40002800 	.word	0x40002800
 8007ac0:	42470e3c 	.word	0x42470e3c

08007ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a0b      	ldr	r2, [pc, #44]	; (8007b00 <HAL_TIM_Base_MspInit+0x3c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d10d      	bne.n	8007af2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <HAL_TIM_Base_MspInit+0x40>)
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <HAL_TIM_Base_MspInit+0x40>)
 8007ae0:	f043 0302 	orr.w	r3, r3, #2
 8007ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ae6:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <HAL_TIM_Base_MspInit+0x40>)
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40023800 	.word	0x40023800

08007b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b10:	f107 030c 	add.w	r3, r7, #12
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	605a      	str	r2, [r3, #4]
 8007b1a:	609a      	str	r2, [r3, #8]
 8007b1c:	60da      	str	r2, [r3, #12]
 8007b1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a12      	ldr	r2, [pc, #72]	; (8007b70 <HAL_TIM_MspPostInit+0x68>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d11d      	bne.n	8007b66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60bb      	str	r3, [r7, #8]
 8007b2e:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <HAL_TIM_MspPostInit+0x6c>)
 8007b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b32:	4a10      	ldr	r2, [pc, #64]	; (8007b74 <HAL_TIM_MspPostInit+0x6c>)
 8007b34:	f043 0301 	orr.w	r3, r3, #1
 8007b38:	6313      	str	r3, [r2, #48]	; 0x30
 8007b3a:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <HAL_TIM_MspPostInit+0x6c>)
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	60bb      	str	r3, [r7, #8]
 8007b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007b46:	2340      	movs	r3, #64	; 0x40
 8007b48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007b56:	2302      	movs	r3, #2
 8007b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b5a:	f107 030c 	add.w	r3, r7, #12
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4805      	ldr	r0, [pc, #20]	; (8007b78 <HAL_TIM_MspPostInit+0x70>)
 8007b62:	f7fa f97b 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007b66:	bf00      	nop
 8007b68:	3720      	adds	r7, #32
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	40000400 	.word	0x40000400
 8007b74:	40023800 	.word	0x40023800
 8007b78:	40020000 	.word	0x40020000

08007b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08a      	sub	sp, #40	; 0x28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b84:	f107 0314 	add.w	r3, r7, #20
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	605a      	str	r2, [r3, #4]
 8007b8e:	609a      	str	r2, [r3, #8]
 8007b90:	60da      	str	r2, [r3, #12]
 8007b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a4b      	ldr	r2, [pc, #300]	; (8007cc8 <HAL_UART_MspInit+0x14c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	f040 8090 	bne.w	8007cc0 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	613b      	str	r3, [r7, #16]
 8007ba4:	4b49      	ldr	r3, [pc, #292]	; (8007ccc <HAL_UART_MspInit+0x150>)
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	4a48      	ldr	r2, [pc, #288]	; (8007ccc <HAL_UART_MspInit+0x150>)
 8007baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bae:	6413      	str	r3, [r2, #64]	; 0x40
 8007bb0:	4b46      	ldr	r3, [pc, #280]	; (8007ccc <HAL_UART_MspInit+0x150>)
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	4b42      	ldr	r3, [pc, #264]	; (8007ccc <HAL_UART_MspInit+0x150>)
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	4a41      	ldr	r2, [pc, #260]	; (8007ccc <HAL_UART_MspInit+0x150>)
 8007bc6:	f043 0301 	orr.w	r3, r3, #1
 8007bca:	6313      	str	r3, [r2, #48]	; 0x30
 8007bcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <HAL_UART_MspInit+0x150>)
 8007bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007bd8:	230c      	movs	r3, #12
 8007bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007be4:	2303      	movs	r3, #3
 8007be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007be8:	2307      	movs	r3, #7
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bec:	f107 0314 	add.w	r3, r7, #20
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4837      	ldr	r0, [pc, #220]	; (8007cd0 <HAL_UART_MspInit+0x154>)
 8007bf4:	f7fa f932 	bl	8001e5c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007bf8:	4b36      	ldr	r3, [pc, #216]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007bfa:	4a37      	ldr	r2, [pc, #220]	; (8007cd8 <HAL_UART_MspInit+0x15c>)
 8007bfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007bfe:	4b35      	ldr	r3, [pc, #212]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c04:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c06:	4b33      	ldr	r3, [pc, #204]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c0c:	4b31      	ldr	r3, [pc, #196]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c12:	4b30      	ldr	r3, [pc, #192]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c18:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c1a:	4b2e      	ldr	r3, [pc, #184]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c20:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007c26:	4b2b      	ldr	r3, [pc, #172]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007c2c:	4b29      	ldr	r3, [pc, #164]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c32:	4b28      	ldr	r3, [pc, #160]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007c38:	4826      	ldr	r0, [pc, #152]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c3a:	f7f8 fef3 	bl	8000a24 <HAL_DMA_Init>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8007c44:	f7ff fe94 	bl	8007970 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a22      	ldr	r2, [pc, #136]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8007c4e:	4a21      	ldr	r2, [pc, #132]	; (8007cd4 <HAL_UART_MspInit+0x158>)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007c54:	4b21      	ldr	r3, [pc, #132]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c56:	4a22      	ldr	r2, [pc, #136]	; (8007ce0 <HAL_UART_MspInit+0x164>)
 8007c58:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007c5a:	4b20      	ldr	r3, [pc, #128]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c60:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c62:	4b1e      	ldr	r3, [pc, #120]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c64:	2240      	movs	r2, #64	; 0x40
 8007c66:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c68:	4b1c      	ldr	r3, [pc, #112]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c6e:	4b1b      	ldr	r3, [pc, #108]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c76:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c7c:	4b17      	ldr	r3, [pc, #92]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007c82:	4b16      	ldr	r3, [pc, #88]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c88:	4b14      	ldr	r3, [pc, #80]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c8e:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007c94:	4811      	ldr	r0, [pc, #68]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007c96:	f7f8 fec5 	bl	8000a24 <HAL_DMA_Init>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8007ca0:	f7ff fe66 	bl	8007970 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8007caa:	4a0c      	ldr	r2, [pc, #48]	; (8007cdc <HAL_UART_MspInit+0x160>)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	2026      	movs	r0, #38	; 0x26
 8007cb6:	f7f8 fdef 	bl	8000898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007cba:	2026      	movs	r0, #38	; 0x26
 8007cbc:	f7f8 fe18 	bl	80008f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007cc0:	bf00      	nop
 8007cc2:	3728      	adds	r7, #40	; 0x28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	40004400 	.word	0x40004400
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	40020000 	.word	0x40020000
 8007cd4:	200002b0 	.word	0x200002b0
 8007cd8:	40026088 	.word	0x40026088
 8007cdc:	20000398 	.word	0x20000398
 8007ce0:	400260a0 	.word	0x400260a0

08007ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007ce8:	bf00      	nop
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007cf6:	e7fe      	b.n	8007cf6 <HardFault_Handler+0x4>

08007cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007cfc:	e7fe      	b.n	8007cfc <MemManage_Handler+0x4>

08007cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d02:	e7fe      	b.n	8007d02 <BusFault_Handler+0x4>

08007d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d08:	e7fe      	b.n	8007d08 <UsageFault_Handler+0x4>

08007d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d0e:	bf00      	nop
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d1c:	bf00      	nop
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d26:	b480      	push	{r7}
 8007d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d2a:	bf00      	nop
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d38:	f7f8 fc7c 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d3c:	bf00      	nop
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007d44:	4802      	ldr	r0, [pc, #8]	; (8007d50 <DMA1_Stream5_IRQHandler+0x10>)
 8007d46:	f7f9 f911 	bl	8000f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	200002b0 	.word	0x200002b0

08007d54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007d58:	4802      	ldr	r0, [pc, #8]	; (8007d64 <DMA1_Stream6_IRQHandler+0x10>)
 8007d5a:	f7f9 f907 	bl	8000f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007d5e:	bf00      	nop
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000398 	.word	0x20000398

08007d68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007d6c:	4802      	ldr	r0, [pc, #8]	; (8007d78 <USART2_IRQHandler+0x10>)
 8007d6e:	f7fe f91f 	bl	8005fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007d72:	bf00      	nop
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20000418 	.word	0x20000418

08007d7c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007d80:	4802      	ldr	r0, [pc, #8]	; (8007d8c <RTC_Alarm_IRQHandler+0x10>)
 8007d82:	f7fc fa2b 	bl	80041dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007d86:	bf00      	nop
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	200003f8 	.word	0x200003f8

08007d90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007d98:	4b11      	ldr	r3, [pc, #68]	; (8007de0 <_sbrk+0x50>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d102      	bne.n	8007da6 <_sbrk+0x16>
		heap_end = &end;
 8007da0:	4b0f      	ldr	r3, [pc, #60]	; (8007de0 <_sbrk+0x50>)
 8007da2:	4a10      	ldr	r2, [pc, #64]	; (8007de4 <_sbrk+0x54>)
 8007da4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007da6:	4b0e      	ldr	r3, [pc, #56]	; (8007de0 <_sbrk+0x50>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007dac:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <_sbrk+0x50>)
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	466a      	mov	r2, sp
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d907      	bls.n	8007dca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007dba:	f000 f859 	bl	8007e70 <__errno>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	230c      	movs	r3, #12
 8007dc2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc8:	e006      	b.n	8007dd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <_sbrk+0x50>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	4a03      	ldr	r2, [pc, #12]	; (8007de0 <_sbrk+0x50>)
 8007dd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20000280 	.word	0x20000280
 8007de4:	20000460 	.word	0x20000460

08007de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007dec:	4b08      	ldr	r3, [pc, #32]	; (8007e10 <SystemInit+0x28>)
 8007dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df2:	4a07      	ldr	r2, [pc, #28]	; (8007e10 <SystemInit+0x28>)
 8007df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007dfc:	4b04      	ldr	r3, [pc, #16]	; (8007e10 <SystemInit+0x28>)
 8007dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e02:	609a      	str	r2, [r3, #8]
#endif
}
 8007e04:	bf00      	nop
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	e000ed00 	.word	0xe000ed00

08007e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007e4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007e18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007e1a:	e003      	b.n	8007e24 <LoopCopyDataInit>

08007e1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007e1c:	4b0c      	ldr	r3, [pc, #48]	; (8007e50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007e1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007e20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007e22:	3104      	adds	r1, #4

08007e24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007e24:	480b      	ldr	r0, [pc, #44]	; (8007e54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007e26:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007e28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007e2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007e2c:	d3f6      	bcc.n	8007e1c <CopyDataInit>
  ldr  r2, =_sbss
 8007e2e:	4a0b      	ldr	r2, [pc, #44]	; (8007e5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007e30:	e002      	b.n	8007e38 <LoopFillZerobss>

08007e32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007e32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007e34:	f842 3b04 	str.w	r3, [r2], #4

08007e38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007e38:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007e3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007e3c:	d3f9      	bcc.n	8007e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007e3e:	f7ff ffd3 	bl	8007de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007e42:	f000 f81b 	bl	8007e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007e46:	f7ff fa59 	bl	80072fc <main>
  bx  lr    
 8007e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007e4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007e50:	08009018 	.word	0x08009018
  ldr  r0, =_sdata
 8007e54:	20000080 	.word	0x20000080
  ldr  r3, =_edata
 8007e58:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 8007e5c:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 8007e60:	2000045c 	.word	0x2000045c

08007e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007e64:	e7fe      	b.n	8007e64 <ADC_IRQHandler>

08007e66 <atoi>:
 8007e66:	220a      	movs	r2, #10
 8007e68:	2100      	movs	r1, #0
 8007e6a:	f000 b957 	b.w	800811c <strtol>
	...

08007e70 <__errno>:
 8007e70:	4b01      	ldr	r3, [pc, #4]	; (8007e78 <__errno+0x8>)
 8007e72:	6818      	ldr	r0, [r3, #0]
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	2000008c 	.word	0x2000008c

08007e7c <__libc_init_array>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	4e0d      	ldr	r6, [pc, #52]	; (8007eb4 <__libc_init_array+0x38>)
 8007e80:	4c0d      	ldr	r4, [pc, #52]	; (8007eb8 <__libc_init_array+0x3c>)
 8007e82:	1ba4      	subs	r4, r4, r6
 8007e84:	10a4      	asrs	r4, r4, #2
 8007e86:	2500      	movs	r5, #0
 8007e88:	42a5      	cmp	r5, r4
 8007e8a:	d109      	bne.n	8007ea0 <__libc_init_array+0x24>
 8007e8c:	4e0b      	ldr	r6, [pc, #44]	; (8007ebc <__libc_init_array+0x40>)
 8007e8e:	4c0c      	ldr	r4, [pc, #48]	; (8007ec0 <__libc_init_array+0x44>)
 8007e90:	f000 fd60 	bl	8008954 <_init>
 8007e94:	1ba4      	subs	r4, r4, r6
 8007e96:	10a4      	asrs	r4, r4, #2
 8007e98:	2500      	movs	r5, #0
 8007e9a:	42a5      	cmp	r5, r4
 8007e9c:	d105      	bne.n	8007eaa <__libc_init_array+0x2e>
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ea4:	4798      	blx	r3
 8007ea6:	3501      	adds	r5, #1
 8007ea8:	e7ee      	b.n	8007e88 <__libc_init_array+0xc>
 8007eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007eae:	4798      	blx	r3
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	e7f2      	b.n	8007e9a <__libc_init_array+0x1e>
 8007eb4:	08009010 	.word	0x08009010
 8007eb8:	08009010 	.word	0x08009010
 8007ebc:	08009010 	.word	0x08009010
 8007ec0:	08009014 	.word	0x08009014

08007ec4 <memcpy>:
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	1e43      	subs	r3, r0, #1
 8007ec8:	440a      	add	r2, r1
 8007eca:	4291      	cmp	r1, r2
 8007ecc:	d100      	bne.n	8007ed0 <memcpy+0xc>
 8007ece:	bd10      	pop	{r4, pc}
 8007ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed8:	e7f7      	b.n	8007eca <memcpy+0x6>

08007eda <memset>:
 8007eda:	4402      	add	r2, r0
 8007edc:	4603      	mov	r3, r0
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d100      	bne.n	8007ee4 <memset+0xa>
 8007ee2:	4770      	bx	lr
 8007ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ee8:	e7f9      	b.n	8007ede <memset+0x4>
	...

08007eec <siprintf>:
 8007eec:	b40e      	push	{r1, r2, r3}
 8007eee:	b500      	push	{lr}
 8007ef0:	b09c      	sub	sp, #112	; 0x70
 8007ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ef4:	9002      	str	r0, [sp, #8]
 8007ef6:	9006      	str	r0, [sp, #24]
 8007ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007efc:	4809      	ldr	r0, [pc, #36]	; (8007f24 <siprintf+0x38>)
 8007efe:	9107      	str	r1, [sp, #28]
 8007f00:	9104      	str	r1, [sp, #16]
 8007f02:	4909      	ldr	r1, [pc, #36]	; (8007f28 <siprintf+0x3c>)
 8007f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f08:	9105      	str	r1, [sp, #20]
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	a902      	add	r1, sp, #8
 8007f10:	f000 fa3a 	bl	8008388 <_svfiprintf_r>
 8007f14:	9b02      	ldr	r3, [sp, #8]
 8007f16:	2200      	movs	r2, #0
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	b01c      	add	sp, #112	; 0x70
 8007f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f20:	b003      	add	sp, #12
 8007f22:	4770      	bx	lr
 8007f24:	2000008c 	.word	0x2000008c
 8007f28:	ffff0208 	.word	0xffff0208

08007f2c <strncmp>:
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	b16a      	cbz	r2, 8007f4c <strncmp+0x20>
 8007f30:	3901      	subs	r1, #1
 8007f32:	1884      	adds	r4, r0, r2
 8007f34:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007f38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d103      	bne.n	8007f48 <strncmp+0x1c>
 8007f40:	42a0      	cmp	r0, r4
 8007f42:	d001      	beq.n	8007f48 <strncmp+0x1c>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1f5      	bne.n	8007f34 <strncmp+0x8>
 8007f48:	1a98      	subs	r0, r3, r2
 8007f4a:	bd10      	pop	{r4, pc}
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	e7fc      	b.n	8007f4a <strncmp+0x1e>

08007f50 <strncpy>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	3901      	subs	r1, #1
 8007f54:	4604      	mov	r4, r0
 8007f56:	b902      	cbnz	r2, 8007f5a <strncpy+0xa>
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007f60:	f803 5b01 	strb.w	r5, [r3], #1
 8007f64:	1e56      	subs	r6, r2, #1
 8007f66:	b92d      	cbnz	r5, 8007f74 <strncpy+0x24>
 8007f68:	4414      	add	r4, r2
 8007f6a:	42a3      	cmp	r3, r4
 8007f6c:	d0f4      	beq.n	8007f58 <strncpy+0x8>
 8007f6e:	f803 5b01 	strb.w	r5, [r3], #1
 8007f72:	e7fa      	b.n	8007f6a <strncpy+0x1a>
 8007f74:	461c      	mov	r4, r3
 8007f76:	4632      	mov	r2, r6
 8007f78:	e7ed      	b.n	8007f56 <strncpy+0x6>
	...

08007f7c <strtok>:
 8007f7c:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <strtok+0x50>)
 8007f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f82:	681d      	ldr	r5, [r3, #0]
 8007f84:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8007f86:	4606      	mov	r6, r0
 8007f88:	460f      	mov	r7, r1
 8007f8a:	b9b4      	cbnz	r4, 8007fba <strtok+0x3e>
 8007f8c:	2050      	movs	r0, #80	; 0x50
 8007f8e:	f000 f8df 	bl	8008150 <malloc>
 8007f92:	65a8      	str	r0, [r5, #88]	; 0x58
 8007f94:	e9c0 4400 	strd	r4, r4, [r0]
 8007f98:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007f9c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007fa0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007fa4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007fa8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007fac:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007fb0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007fb4:	6184      	str	r4, [r0, #24]
 8007fb6:	7704      	strb	r4, [r0, #28]
 8007fb8:	6244      	str	r4, [r0, #36]	; 0x24
 8007fba:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc6:	f000 b803 	b.w	8007fd0 <__strtok_r>
 8007fca:	bf00      	nop
 8007fcc:	2000008c 	.word	0x2000008c

08007fd0 <__strtok_r>:
 8007fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fd2:	b918      	cbnz	r0, 8007fdc <__strtok_r+0xc>
 8007fd4:	6810      	ldr	r0, [r2, #0]
 8007fd6:	b908      	cbnz	r0, 8007fdc <__strtok_r+0xc>
 8007fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fda:	4620      	mov	r0, r4
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460f      	mov	r7, r1
 8007fe0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007fe4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007fe8:	b91e      	cbnz	r6, 8007ff2 <__strtok_r+0x22>
 8007fea:	b96d      	cbnz	r5, 8008008 <__strtok_r+0x38>
 8007fec:	6015      	str	r5, [r2, #0]
 8007fee:	4628      	mov	r0, r5
 8007ff0:	e7f2      	b.n	8007fd8 <__strtok_r+0x8>
 8007ff2:	42b5      	cmp	r5, r6
 8007ff4:	d1f6      	bne.n	8007fe4 <__strtok_r+0x14>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1ef      	bne.n	8007fda <__strtok_r+0xa>
 8007ffa:	6014      	str	r4, [r2, #0]
 8007ffc:	7003      	strb	r3, [r0, #0]
 8007ffe:	e7eb      	b.n	8007fd8 <__strtok_r+0x8>
 8008000:	462b      	mov	r3, r5
 8008002:	e00d      	b.n	8008020 <__strtok_r+0x50>
 8008004:	b926      	cbnz	r6, 8008010 <__strtok_r+0x40>
 8008006:	461c      	mov	r4, r3
 8008008:	4623      	mov	r3, r4
 800800a:	460f      	mov	r7, r1
 800800c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008010:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008014:	42b5      	cmp	r5, r6
 8008016:	d1f5      	bne.n	8008004 <__strtok_r+0x34>
 8008018:	2d00      	cmp	r5, #0
 800801a:	d0f1      	beq.n	8008000 <__strtok_r+0x30>
 800801c:	2100      	movs	r1, #0
 800801e:	7021      	strb	r1, [r4, #0]
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	e7d9      	b.n	8007fd8 <__strtok_r+0x8>

08008024 <_strtol_l.isra.0>:
 8008024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008028:	4680      	mov	r8, r0
 800802a:	4689      	mov	r9, r1
 800802c:	4692      	mov	sl, r2
 800802e:	461e      	mov	r6, r3
 8008030:	460f      	mov	r7, r1
 8008032:	463d      	mov	r5, r7
 8008034:	9808      	ldr	r0, [sp, #32]
 8008036:	f815 4b01 	ldrb.w	r4, [r5], #1
 800803a:	f000 f885 	bl	8008148 <__locale_ctype_ptr_l>
 800803e:	4420      	add	r0, r4
 8008040:	7843      	ldrb	r3, [r0, #1]
 8008042:	f013 0308 	ands.w	r3, r3, #8
 8008046:	d132      	bne.n	80080ae <_strtol_l.isra.0+0x8a>
 8008048:	2c2d      	cmp	r4, #45	; 0x2d
 800804a:	d132      	bne.n	80080b2 <_strtol_l.isra.0+0x8e>
 800804c:	787c      	ldrb	r4, [r7, #1]
 800804e:	1cbd      	adds	r5, r7, #2
 8008050:	2201      	movs	r2, #1
 8008052:	2e00      	cmp	r6, #0
 8008054:	d05d      	beq.n	8008112 <_strtol_l.isra.0+0xee>
 8008056:	2e10      	cmp	r6, #16
 8008058:	d109      	bne.n	800806e <_strtol_l.isra.0+0x4a>
 800805a:	2c30      	cmp	r4, #48	; 0x30
 800805c:	d107      	bne.n	800806e <_strtol_l.isra.0+0x4a>
 800805e:	782b      	ldrb	r3, [r5, #0]
 8008060:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008064:	2b58      	cmp	r3, #88	; 0x58
 8008066:	d14f      	bne.n	8008108 <_strtol_l.isra.0+0xe4>
 8008068:	786c      	ldrb	r4, [r5, #1]
 800806a:	2610      	movs	r6, #16
 800806c:	3502      	adds	r5, #2
 800806e:	2a00      	cmp	r2, #0
 8008070:	bf14      	ite	ne
 8008072:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008076:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800807a:	2700      	movs	r7, #0
 800807c:	fbb1 fcf6 	udiv	ip, r1, r6
 8008080:	4638      	mov	r0, r7
 8008082:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008086:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800808a:	2b09      	cmp	r3, #9
 800808c:	d817      	bhi.n	80080be <_strtol_l.isra.0+0x9a>
 800808e:	461c      	mov	r4, r3
 8008090:	42a6      	cmp	r6, r4
 8008092:	dd23      	ble.n	80080dc <_strtol_l.isra.0+0xb8>
 8008094:	1c7b      	adds	r3, r7, #1
 8008096:	d007      	beq.n	80080a8 <_strtol_l.isra.0+0x84>
 8008098:	4584      	cmp	ip, r0
 800809a:	d31c      	bcc.n	80080d6 <_strtol_l.isra.0+0xb2>
 800809c:	d101      	bne.n	80080a2 <_strtol_l.isra.0+0x7e>
 800809e:	45a6      	cmp	lr, r4
 80080a0:	db19      	blt.n	80080d6 <_strtol_l.isra.0+0xb2>
 80080a2:	fb00 4006 	mla	r0, r0, r6, r4
 80080a6:	2701      	movs	r7, #1
 80080a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080ac:	e7eb      	b.n	8008086 <_strtol_l.isra.0+0x62>
 80080ae:	462f      	mov	r7, r5
 80080b0:	e7bf      	b.n	8008032 <_strtol_l.isra.0+0xe>
 80080b2:	2c2b      	cmp	r4, #43	; 0x2b
 80080b4:	bf04      	itt	eq
 80080b6:	1cbd      	addeq	r5, r7, #2
 80080b8:	787c      	ldrbeq	r4, [r7, #1]
 80080ba:	461a      	mov	r2, r3
 80080bc:	e7c9      	b.n	8008052 <_strtol_l.isra.0+0x2e>
 80080be:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80080c2:	2b19      	cmp	r3, #25
 80080c4:	d801      	bhi.n	80080ca <_strtol_l.isra.0+0xa6>
 80080c6:	3c37      	subs	r4, #55	; 0x37
 80080c8:	e7e2      	b.n	8008090 <_strtol_l.isra.0+0x6c>
 80080ca:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80080ce:	2b19      	cmp	r3, #25
 80080d0:	d804      	bhi.n	80080dc <_strtol_l.isra.0+0xb8>
 80080d2:	3c57      	subs	r4, #87	; 0x57
 80080d4:	e7dc      	b.n	8008090 <_strtol_l.isra.0+0x6c>
 80080d6:	f04f 37ff 	mov.w	r7, #4294967295
 80080da:	e7e5      	b.n	80080a8 <_strtol_l.isra.0+0x84>
 80080dc:	1c7b      	adds	r3, r7, #1
 80080de:	d108      	bne.n	80080f2 <_strtol_l.isra.0+0xce>
 80080e0:	2322      	movs	r3, #34	; 0x22
 80080e2:	f8c8 3000 	str.w	r3, [r8]
 80080e6:	4608      	mov	r0, r1
 80080e8:	f1ba 0f00 	cmp.w	sl, #0
 80080ec:	d107      	bne.n	80080fe <_strtol_l.isra.0+0xda>
 80080ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f2:	b102      	cbz	r2, 80080f6 <_strtol_l.isra.0+0xd2>
 80080f4:	4240      	negs	r0, r0
 80080f6:	f1ba 0f00 	cmp.w	sl, #0
 80080fa:	d0f8      	beq.n	80080ee <_strtol_l.isra.0+0xca>
 80080fc:	b10f      	cbz	r7, 8008102 <_strtol_l.isra.0+0xde>
 80080fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8008102:	f8ca 9000 	str.w	r9, [sl]
 8008106:	e7f2      	b.n	80080ee <_strtol_l.isra.0+0xca>
 8008108:	2430      	movs	r4, #48	; 0x30
 800810a:	2e00      	cmp	r6, #0
 800810c:	d1af      	bne.n	800806e <_strtol_l.isra.0+0x4a>
 800810e:	2608      	movs	r6, #8
 8008110:	e7ad      	b.n	800806e <_strtol_l.isra.0+0x4a>
 8008112:	2c30      	cmp	r4, #48	; 0x30
 8008114:	d0a3      	beq.n	800805e <_strtol_l.isra.0+0x3a>
 8008116:	260a      	movs	r6, #10
 8008118:	e7a9      	b.n	800806e <_strtol_l.isra.0+0x4a>
	...

0800811c <strtol>:
 800811c:	4b08      	ldr	r3, [pc, #32]	; (8008140 <strtol+0x24>)
 800811e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008120:	681c      	ldr	r4, [r3, #0]
 8008122:	4d08      	ldr	r5, [pc, #32]	; (8008144 <strtol+0x28>)
 8008124:	6a23      	ldr	r3, [r4, #32]
 8008126:	2b00      	cmp	r3, #0
 8008128:	bf08      	it	eq
 800812a:	462b      	moveq	r3, r5
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	4613      	mov	r3, r2
 8008130:	460a      	mov	r2, r1
 8008132:	4601      	mov	r1, r0
 8008134:	4620      	mov	r0, r4
 8008136:	f7ff ff75 	bl	8008024 <_strtol_l.isra.0>
 800813a:	b003      	add	sp, #12
 800813c:	bd30      	pop	{r4, r5, pc}
 800813e:	bf00      	nop
 8008140:	2000008c 	.word	0x2000008c
 8008144:	200000f0 	.word	0x200000f0

08008148 <__locale_ctype_ptr_l>:
 8008148:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800814c:	4770      	bx	lr
	...

08008150 <malloc>:
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <malloc+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f000 b863 	b.w	8008220 <_malloc_r>
 800815a:	bf00      	nop
 800815c:	2000008c 	.word	0x2000008c

08008160 <__ascii_mbtowc>:
 8008160:	b082      	sub	sp, #8
 8008162:	b901      	cbnz	r1, 8008166 <__ascii_mbtowc+0x6>
 8008164:	a901      	add	r1, sp, #4
 8008166:	b142      	cbz	r2, 800817a <__ascii_mbtowc+0x1a>
 8008168:	b14b      	cbz	r3, 800817e <__ascii_mbtowc+0x1e>
 800816a:	7813      	ldrb	r3, [r2, #0]
 800816c:	600b      	str	r3, [r1, #0]
 800816e:	7812      	ldrb	r2, [r2, #0]
 8008170:	1c10      	adds	r0, r2, #0
 8008172:	bf18      	it	ne
 8008174:	2001      	movne	r0, #1
 8008176:	b002      	add	sp, #8
 8008178:	4770      	bx	lr
 800817a:	4610      	mov	r0, r2
 800817c:	e7fb      	b.n	8008176 <__ascii_mbtowc+0x16>
 800817e:	f06f 0001 	mvn.w	r0, #1
 8008182:	e7f8      	b.n	8008176 <__ascii_mbtowc+0x16>

08008184 <_free_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4605      	mov	r5, r0
 8008188:	2900      	cmp	r1, #0
 800818a:	d045      	beq.n	8008218 <_free_r+0x94>
 800818c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008190:	1f0c      	subs	r4, r1, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfb8      	it	lt
 8008196:	18e4      	addlt	r4, r4, r3
 8008198:	f000 fbac 	bl	80088f4 <__malloc_lock>
 800819c:	4a1f      	ldr	r2, [pc, #124]	; (800821c <_free_r+0x98>)
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	4610      	mov	r0, r2
 80081a2:	b933      	cbnz	r3, 80081b2 <_free_r+0x2e>
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	6014      	str	r4, [r2, #0]
 80081a8:	4628      	mov	r0, r5
 80081aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ae:	f000 bba2 	b.w	80088f6 <__malloc_unlock>
 80081b2:	42a3      	cmp	r3, r4
 80081b4:	d90c      	bls.n	80081d0 <_free_r+0x4c>
 80081b6:	6821      	ldr	r1, [r4, #0]
 80081b8:	1862      	adds	r2, r4, r1
 80081ba:	4293      	cmp	r3, r2
 80081bc:	bf04      	itt	eq
 80081be:	681a      	ldreq	r2, [r3, #0]
 80081c0:	685b      	ldreq	r3, [r3, #4]
 80081c2:	6063      	str	r3, [r4, #4]
 80081c4:	bf04      	itt	eq
 80081c6:	1852      	addeq	r2, r2, r1
 80081c8:	6022      	streq	r2, [r4, #0]
 80081ca:	6004      	str	r4, [r0, #0]
 80081cc:	e7ec      	b.n	80081a8 <_free_r+0x24>
 80081ce:	4613      	mov	r3, r2
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	b10a      	cbz	r2, 80081d8 <_free_r+0x54>
 80081d4:	42a2      	cmp	r2, r4
 80081d6:	d9fa      	bls.n	80081ce <_free_r+0x4a>
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	1858      	adds	r0, r3, r1
 80081dc:	42a0      	cmp	r0, r4
 80081de:	d10b      	bne.n	80081f8 <_free_r+0x74>
 80081e0:	6820      	ldr	r0, [r4, #0]
 80081e2:	4401      	add	r1, r0
 80081e4:	1858      	adds	r0, r3, r1
 80081e6:	4282      	cmp	r2, r0
 80081e8:	6019      	str	r1, [r3, #0]
 80081ea:	d1dd      	bne.n	80081a8 <_free_r+0x24>
 80081ec:	6810      	ldr	r0, [r2, #0]
 80081ee:	6852      	ldr	r2, [r2, #4]
 80081f0:	605a      	str	r2, [r3, #4]
 80081f2:	4401      	add	r1, r0
 80081f4:	6019      	str	r1, [r3, #0]
 80081f6:	e7d7      	b.n	80081a8 <_free_r+0x24>
 80081f8:	d902      	bls.n	8008200 <_free_r+0x7c>
 80081fa:	230c      	movs	r3, #12
 80081fc:	602b      	str	r3, [r5, #0]
 80081fe:	e7d3      	b.n	80081a8 <_free_r+0x24>
 8008200:	6820      	ldr	r0, [r4, #0]
 8008202:	1821      	adds	r1, r4, r0
 8008204:	428a      	cmp	r2, r1
 8008206:	bf04      	itt	eq
 8008208:	6811      	ldreq	r1, [r2, #0]
 800820a:	6852      	ldreq	r2, [r2, #4]
 800820c:	6062      	str	r2, [r4, #4]
 800820e:	bf04      	itt	eq
 8008210:	1809      	addeq	r1, r1, r0
 8008212:	6021      	streq	r1, [r4, #0]
 8008214:	605c      	str	r4, [r3, #4]
 8008216:	e7c7      	b.n	80081a8 <_free_r+0x24>
 8008218:	bd38      	pop	{r3, r4, r5, pc}
 800821a:	bf00      	nop
 800821c:	20000284 	.word	0x20000284

08008220 <_malloc_r>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	1ccd      	adds	r5, r1, #3
 8008224:	f025 0503 	bic.w	r5, r5, #3
 8008228:	3508      	adds	r5, #8
 800822a:	2d0c      	cmp	r5, #12
 800822c:	bf38      	it	cc
 800822e:	250c      	movcc	r5, #12
 8008230:	2d00      	cmp	r5, #0
 8008232:	4606      	mov	r6, r0
 8008234:	db01      	blt.n	800823a <_malloc_r+0x1a>
 8008236:	42a9      	cmp	r1, r5
 8008238:	d903      	bls.n	8008242 <_malloc_r+0x22>
 800823a:	230c      	movs	r3, #12
 800823c:	6033      	str	r3, [r6, #0]
 800823e:	2000      	movs	r0, #0
 8008240:	bd70      	pop	{r4, r5, r6, pc}
 8008242:	f000 fb57 	bl	80088f4 <__malloc_lock>
 8008246:	4a21      	ldr	r2, [pc, #132]	; (80082cc <_malloc_r+0xac>)
 8008248:	6814      	ldr	r4, [r2, #0]
 800824a:	4621      	mov	r1, r4
 800824c:	b991      	cbnz	r1, 8008274 <_malloc_r+0x54>
 800824e:	4c20      	ldr	r4, [pc, #128]	; (80082d0 <_malloc_r+0xb0>)
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	b91b      	cbnz	r3, 800825c <_malloc_r+0x3c>
 8008254:	4630      	mov	r0, r6
 8008256:	f000 fb17 	bl	8008888 <_sbrk_r>
 800825a:	6020      	str	r0, [r4, #0]
 800825c:	4629      	mov	r1, r5
 800825e:	4630      	mov	r0, r6
 8008260:	f000 fb12 	bl	8008888 <_sbrk_r>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d124      	bne.n	80082b2 <_malloc_r+0x92>
 8008268:	230c      	movs	r3, #12
 800826a:	6033      	str	r3, [r6, #0]
 800826c:	4630      	mov	r0, r6
 800826e:	f000 fb42 	bl	80088f6 <__malloc_unlock>
 8008272:	e7e4      	b.n	800823e <_malloc_r+0x1e>
 8008274:	680b      	ldr	r3, [r1, #0]
 8008276:	1b5b      	subs	r3, r3, r5
 8008278:	d418      	bmi.n	80082ac <_malloc_r+0x8c>
 800827a:	2b0b      	cmp	r3, #11
 800827c:	d90f      	bls.n	800829e <_malloc_r+0x7e>
 800827e:	600b      	str	r3, [r1, #0]
 8008280:	50cd      	str	r5, [r1, r3]
 8008282:	18cc      	adds	r4, r1, r3
 8008284:	4630      	mov	r0, r6
 8008286:	f000 fb36 	bl	80088f6 <__malloc_unlock>
 800828a:	f104 000b 	add.w	r0, r4, #11
 800828e:	1d23      	adds	r3, r4, #4
 8008290:	f020 0007 	bic.w	r0, r0, #7
 8008294:	1ac3      	subs	r3, r0, r3
 8008296:	d0d3      	beq.n	8008240 <_malloc_r+0x20>
 8008298:	425a      	negs	r2, r3
 800829a:	50e2      	str	r2, [r4, r3]
 800829c:	e7d0      	b.n	8008240 <_malloc_r+0x20>
 800829e:	428c      	cmp	r4, r1
 80082a0:	684b      	ldr	r3, [r1, #4]
 80082a2:	bf16      	itet	ne
 80082a4:	6063      	strne	r3, [r4, #4]
 80082a6:	6013      	streq	r3, [r2, #0]
 80082a8:	460c      	movne	r4, r1
 80082aa:	e7eb      	b.n	8008284 <_malloc_r+0x64>
 80082ac:	460c      	mov	r4, r1
 80082ae:	6849      	ldr	r1, [r1, #4]
 80082b0:	e7cc      	b.n	800824c <_malloc_r+0x2c>
 80082b2:	1cc4      	adds	r4, r0, #3
 80082b4:	f024 0403 	bic.w	r4, r4, #3
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d005      	beq.n	80082c8 <_malloc_r+0xa8>
 80082bc:	1a21      	subs	r1, r4, r0
 80082be:	4630      	mov	r0, r6
 80082c0:	f000 fae2 	bl	8008888 <_sbrk_r>
 80082c4:	3001      	adds	r0, #1
 80082c6:	d0cf      	beq.n	8008268 <_malloc_r+0x48>
 80082c8:	6025      	str	r5, [r4, #0]
 80082ca:	e7db      	b.n	8008284 <_malloc_r+0x64>
 80082cc:	20000284 	.word	0x20000284
 80082d0:	20000288 	.word	0x20000288

080082d4 <__ssputs_r>:
 80082d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d8:	688e      	ldr	r6, [r1, #8]
 80082da:	429e      	cmp	r6, r3
 80082dc:	4682      	mov	sl, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	4690      	mov	r8, r2
 80082e2:	4699      	mov	r9, r3
 80082e4:	d837      	bhi.n	8008356 <__ssputs_r+0x82>
 80082e6:	898a      	ldrh	r2, [r1, #12]
 80082e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082ec:	d031      	beq.n	8008352 <__ssputs_r+0x7e>
 80082ee:	6825      	ldr	r5, [r4, #0]
 80082f0:	6909      	ldr	r1, [r1, #16]
 80082f2:	1a6f      	subs	r7, r5, r1
 80082f4:	6965      	ldr	r5, [r4, #20]
 80082f6:	2302      	movs	r3, #2
 80082f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8008300:	f109 0301 	add.w	r3, r9, #1
 8008304:	443b      	add	r3, r7
 8008306:	429d      	cmp	r5, r3
 8008308:	bf38      	it	cc
 800830a:	461d      	movcc	r5, r3
 800830c:	0553      	lsls	r3, r2, #21
 800830e:	d530      	bpl.n	8008372 <__ssputs_r+0x9e>
 8008310:	4629      	mov	r1, r5
 8008312:	f7ff ff85 	bl	8008220 <_malloc_r>
 8008316:	4606      	mov	r6, r0
 8008318:	b950      	cbnz	r0, 8008330 <__ssputs_r+0x5c>
 800831a:	230c      	movs	r3, #12
 800831c:	f8ca 3000 	str.w	r3, [sl]
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008330:	463a      	mov	r2, r7
 8008332:	6921      	ldr	r1, [r4, #16]
 8008334:	f7ff fdc6 	bl	8007ec4 <memcpy>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800833e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	6126      	str	r6, [r4, #16]
 8008346:	6165      	str	r5, [r4, #20]
 8008348:	443e      	add	r6, r7
 800834a:	1bed      	subs	r5, r5, r7
 800834c:	6026      	str	r6, [r4, #0]
 800834e:	60a5      	str	r5, [r4, #8]
 8008350:	464e      	mov	r6, r9
 8008352:	454e      	cmp	r6, r9
 8008354:	d900      	bls.n	8008358 <__ssputs_r+0x84>
 8008356:	464e      	mov	r6, r9
 8008358:	4632      	mov	r2, r6
 800835a:	4641      	mov	r1, r8
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	f000 fab0 	bl	80088c2 <memmove>
 8008362:	68a3      	ldr	r3, [r4, #8]
 8008364:	1b9b      	subs	r3, r3, r6
 8008366:	60a3      	str	r3, [r4, #8]
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	441e      	add	r6, r3
 800836c:	6026      	str	r6, [r4, #0]
 800836e:	2000      	movs	r0, #0
 8008370:	e7dc      	b.n	800832c <__ssputs_r+0x58>
 8008372:	462a      	mov	r2, r5
 8008374:	f000 fac0 	bl	80088f8 <_realloc_r>
 8008378:	4606      	mov	r6, r0
 800837a:	2800      	cmp	r0, #0
 800837c:	d1e2      	bne.n	8008344 <__ssputs_r+0x70>
 800837e:	6921      	ldr	r1, [r4, #16]
 8008380:	4650      	mov	r0, sl
 8008382:	f7ff feff 	bl	8008184 <_free_r>
 8008386:	e7c8      	b.n	800831a <__ssputs_r+0x46>

08008388 <_svfiprintf_r>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	461d      	mov	r5, r3
 800838e:	898b      	ldrh	r3, [r1, #12]
 8008390:	061f      	lsls	r7, r3, #24
 8008392:	b09d      	sub	sp, #116	; 0x74
 8008394:	4680      	mov	r8, r0
 8008396:	460c      	mov	r4, r1
 8008398:	4616      	mov	r6, r2
 800839a:	d50f      	bpl.n	80083bc <_svfiprintf_r+0x34>
 800839c:	690b      	ldr	r3, [r1, #16]
 800839e:	b96b      	cbnz	r3, 80083bc <_svfiprintf_r+0x34>
 80083a0:	2140      	movs	r1, #64	; 0x40
 80083a2:	f7ff ff3d 	bl	8008220 <_malloc_r>
 80083a6:	6020      	str	r0, [r4, #0]
 80083a8:	6120      	str	r0, [r4, #16]
 80083aa:	b928      	cbnz	r0, 80083b8 <_svfiprintf_r+0x30>
 80083ac:	230c      	movs	r3, #12
 80083ae:	f8c8 3000 	str.w	r3, [r8]
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	e0c8      	b.n	800854a <_svfiprintf_r+0x1c2>
 80083b8:	2340      	movs	r3, #64	; 0x40
 80083ba:	6163      	str	r3, [r4, #20]
 80083bc:	2300      	movs	r3, #0
 80083be:	9309      	str	r3, [sp, #36]	; 0x24
 80083c0:	2320      	movs	r3, #32
 80083c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083c6:	2330      	movs	r3, #48	; 0x30
 80083c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083cc:	9503      	str	r5, [sp, #12]
 80083ce:	f04f 0b01 	mov.w	fp, #1
 80083d2:	4637      	mov	r7, r6
 80083d4:	463d      	mov	r5, r7
 80083d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80083da:	b10b      	cbz	r3, 80083e0 <_svfiprintf_r+0x58>
 80083dc:	2b25      	cmp	r3, #37	; 0x25
 80083de:	d13e      	bne.n	800845e <_svfiprintf_r+0xd6>
 80083e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80083e4:	d00b      	beq.n	80083fe <_svfiprintf_r+0x76>
 80083e6:	4653      	mov	r3, sl
 80083e8:	4632      	mov	r2, r6
 80083ea:	4621      	mov	r1, r4
 80083ec:	4640      	mov	r0, r8
 80083ee:	f7ff ff71 	bl	80082d4 <__ssputs_r>
 80083f2:	3001      	adds	r0, #1
 80083f4:	f000 80a4 	beq.w	8008540 <_svfiprintf_r+0x1b8>
 80083f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fa:	4453      	add	r3, sl
 80083fc:	9309      	str	r3, [sp, #36]	; 0x24
 80083fe:	783b      	ldrb	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 809d 	beq.w	8008540 <_svfiprintf_r+0x1b8>
 8008406:	2300      	movs	r3, #0
 8008408:	f04f 32ff 	mov.w	r2, #4294967295
 800840c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	9307      	str	r3, [sp, #28]
 8008414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008418:	931a      	str	r3, [sp, #104]	; 0x68
 800841a:	462f      	mov	r7, r5
 800841c:	2205      	movs	r2, #5
 800841e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008422:	4850      	ldr	r0, [pc, #320]	; (8008564 <_svfiprintf_r+0x1dc>)
 8008424:	f7f7 fee4 	bl	80001f0 <memchr>
 8008428:	9b04      	ldr	r3, [sp, #16]
 800842a:	b9d0      	cbnz	r0, 8008462 <_svfiprintf_r+0xda>
 800842c:	06d9      	lsls	r1, r3, #27
 800842e:	bf44      	itt	mi
 8008430:	2220      	movmi	r2, #32
 8008432:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008436:	071a      	lsls	r2, r3, #28
 8008438:	bf44      	itt	mi
 800843a:	222b      	movmi	r2, #43	; 0x2b
 800843c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008440:	782a      	ldrb	r2, [r5, #0]
 8008442:	2a2a      	cmp	r2, #42	; 0x2a
 8008444:	d015      	beq.n	8008472 <_svfiprintf_r+0xea>
 8008446:	9a07      	ldr	r2, [sp, #28]
 8008448:	462f      	mov	r7, r5
 800844a:	2000      	movs	r0, #0
 800844c:	250a      	movs	r5, #10
 800844e:	4639      	mov	r1, r7
 8008450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008454:	3b30      	subs	r3, #48	; 0x30
 8008456:	2b09      	cmp	r3, #9
 8008458:	d94d      	bls.n	80084f6 <_svfiprintf_r+0x16e>
 800845a:	b1b8      	cbz	r0, 800848c <_svfiprintf_r+0x104>
 800845c:	e00f      	b.n	800847e <_svfiprintf_r+0xf6>
 800845e:	462f      	mov	r7, r5
 8008460:	e7b8      	b.n	80083d4 <_svfiprintf_r+0x4c>
 8008462:	4a40      	ldr	r2, [pc, #256]	; (8008564 <_svfiprintf_r+0x1dc>)
 8008464:	1a80      	subs	r0, r0, r2
 8008466:	fa0b f000 	lsl.w	r0, fp, r0
 800846a:	4318      	orrs	r0, r3
 800846c:	9004      	str	r0, [sp, #16]
 800846e:	463d      	mov	r5, r7
 8008470:	e7d3      	b.n	800841a <_svfiprintf_r+0x92>
 8008472:	9a03      	ldr	r2, [sp, #12]
 8008474:	1d11      	adds	r1, r2, #4
 8008476:	6812      	ldr	r2, [r2, #0]
 8008478:	9103      	str	r1, [sp, #12]
 800847a:	2a00      	cmp	r2, #0
 800847c:	db01      	blt.n	8008482 <_svfiprintf_r+0xfa>
 800847e:	9207      	str	r2, [sp, #28]
 8008480:	e004      	b.n	800848c <_svfiprintf_r+0x104>
 8008482:	4252      	negs	r2, r2
 8008484:	f043 0302 	orr.w	r3, r3, #2
 8008488:	9207      	str	r2, [sp, #28]
 800848a:	9304      	str	r3, [sp, #16]
 800848c:	783b      	ldrb	r3, [r7, #0]
 800848e:	2b2e      	cmp	r3, #46	; 0x2e
 8008490:	d10c      	bne.n	80084ac <_svfiprintf_r+0x124>
 8008492:	787b      	ldrb	r3, [r7, #1]
 8008494:	2b2a      	cmp	r3, #42	; 0x2a
 8008496:	d133      	bne.n	8008500 <_svfiprintf_r+0x178>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	9203      	str	r2, [sp, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bfb8      	it	lt
 80084a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80084a8:	3702      	adds	r7, #2
 80084aa:	9305      	str	r3, [sp, #20]
 80084ac:	4d2e      	ldr	r5, [pc, #184]	; (8008568 <_svfiprintf_r+0x1e0>)
 80084ae:	7839      	ldrb	r1, [r7, #0]
 80084b0:	2203      	movs	r2, #3
 80084b2:	4628      	mov	r0, r5
 80084b4:	f7f7 fe9c 	bl	80001f0 <memchr>
 80084b8:	b138      	cbz	r0, 80084ca <_svfiprintf_r+0x142>
 80084ba:	2340      	movs	r3, #64	; 0x40
 80084bc:	1b40      	subs	r0, r0, r5
 80084be:	fa03 f000 	lsl.w	r0, r3, r0
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	4303      	orrs	r3, r0
 80084c6:	3701      	adds	r7, #1
 80084c8:	9304      	str	r3, [sp, #16]
 80084ca:	7839      	ldrb	r1, [r7, #0]
 80084cc:	4827      	ldr	r0, [pc, #156]	; (800856c <_svfiprintf_r+0x1e4>)
 80084ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084d2:	2206      	movs	r2, #6
 80084d4:	1c7e      	adds	r6, r7, #1
 80084d6:	f7f7 fe8b 	bl	80001f0 <memchr>
 80084da:	2800      	cmp	r0, #0
 80084dc:	d038      	beq.n	8008550 <_svfiprintf_r+0x1c8>
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <_svfiprintf_r+0x1e8>)
 80084e0:	bb13      	cbnz	r3, 8008528 <_svfiprintf_r+0x1a0>
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	3307      	adds	r3, #7
 80084e6:	f023 0307 	bic.w	r3, r3, #7
 80084ea:	3308      	adds	r3, #8
 80084ec:	9303      	str	r3, [sp, #12]
 80084ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f0:	444b      	add	r3, r9
 80084f2:	9309      	str	r3, [sp, #36]	; 0x24
 80084f4:	e76d      	b.n	80083d2 <_svfiprintf_r+0x4a>
 80084f6:	fb05 3202 	mla	r2, r5, r2, r3
 80084fa:	2001      	movs	r0, #1
 80084fc:	460f      	mov	r7, r1
 80084fe:	e7a6      	b.n	800844e <_svfiprintf_r+0xc6>
 8008500:	2300      	movs	r3, #0
 8008502:	3701      	adds	r7, #1
 8008504:	9305      	str	r3, [sp, #20]
 8008506:	4619      	mov	r1, r3
 8008508:	250a      	movs	r5, #10
 800850a:	4638      	mov	r0, r7
 800850c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008510:	3a30      	subs	r2, #48	; 0x30
 8008512:	2a09      	cmp	r2, #9
 8008514:	d903      	bls.n	800851e <_svfiprintf_r+0x196>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0c8      	beq.n	80084ac <_svfiprintf_r+0x124>
 800851a:	9105      	str	r1, [sp, #20]
 800851c:	e7c6      	b.n	80084ac <_svfiprintf_r+0x124>
 800851e:	fb05 2101 	mla	r1, r5, r1, r2
 8008522:	2301      	movs	r3, #1
 8008524:	4607      	mov	r7, r0
 8008526:	e7f0      	b.n	800850a <_svfiprintf_r+0x182>
 8008528:	ab03      	add	r3, sp, #12
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	4622      	mov	r2, r4
 800852e:	4b11      	ldr	r3, [pc, #68]	; (8008574 <_svfiprintf_r+0x1ec>)
 8008530:	a904      	add	r1, sp, #16
 8008532:	4640      	mov	r0, r8
 8008534:	f3af 8000 	nop.w
 8008538:	f1b0 3fff 	cmp.w	r0, #4294967295
 800853c:	4681      	mov	r9, r0
 800853e:	d1d6      	bne.n	80084ee <_svfiprintf_r+0x166>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	065b      	lsls	r3, r3, #25
 8008544:	f53f af35 	bmi.w	80083b2 <_svfiprintf_r+0x2a>
 8008548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800854a:	b01d      	add	sp, #116	; 0x74
 800854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008550:	ab03      	add	r3, sp, #12
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	4622      	mov	r2, r4
 8008556:	4b07      	ldr	r3, [pc, #28]	; (8008574 <_svfiprintf_r+0x1ec>)
 8008558:	a904      	add	r1, sp, #16
 800855a:	4640      	mov	r0, r8
 800855c:	f000 f882 	bl	8008664 <_printf_i>
 8008560:	e7ea      	b.n	8008538 <_svfiprintf_r+0x1b0>
 8008562:	bf00      	nop
 8008564:	08008ed2 	.word	0x08008ed2
 8008568:	08008ed8 	.word	0x08008ed8
 800856c:	08008edc 	.word	0x08008edc
 8008570:	00000000 	.word	0x00000000
 8008574:	080082d5 	.word	0x080082d5

08008578 <_printf_common>:
 8008578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	4691      	mov	r9, r2
 800857e:	461f      	mov	r7, r3
 8008580:	688a      	ldr	r2, [r1, #8]
 8008582:	690b      	ldr	r3, [r1, #16]
 8008584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008588:	4293      	cmp	r3, r2
 800858a:	bfb8      	it	lt
 800858c:	4613      	movlt	r3, r2
 800858e:	f8c9 3000 	str.w	r3, [r9]
 8008592:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008596:	4606      	mov	r6, r0
 8008598:	460c      	mov	r4, r1
 800859a:	b112      	cbz	r2, 80085a2 <_printf_common+0x2a>
 800859c:	3301      	adds	r3, #1
 800859e:	f8c9 3000 	str.w	r3, [r9]
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	0699      	lsls	r1, r3, #26
 80085a6:	bf42      	ittt	mi
 80085a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80085ac:	3302      	addmi	r3, #2
 80085ae:	f8c9 3000 	strmi.w	r3, [r9]
 80085b2:	6825      	ldr	r5, [r4, #0]
 80085b4:	f015 0506 	ands.w	r5, r5, #6
 80085b8:	d107      	bne.n	80085ca <_printf_common+0x52>
 80085ba:	f104 0a19 	add.w	sl, r4, #25
 80085be:	68e3      	ldr	r3, [r4, #12]
 80085c0:	f8d9 2000 	ldr.w	r2, [r9]
 80085c4:	1a9b      	subs	r3, r3, r2
 80085c6:	42ab      	cmp	r3, r5
 80085c8:	dc28      	bgt.n	800861c <_printf_common+0xa4>
 80085ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80085ce:	6822      	ldr	r2, [r4, #0]
 80085d0:	3300      	adds	r3, #0
 80085d2:	bf18      	it	ne
 80085d4:	2301      	movne	r3, #1
 80085d6:	0692      	lsls	r2, r2, #26
 80085d8:	d42d      	bmi.n	8008636 <_printf_common+0xbe>
 80085da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085de:	4639      	mov	r1, r7
 80085e0:	4630      	mov	r0, r6
 80085e2:	47c0      	blx	r8
 80085e4:	3001      	adds	r0, #1
 80085e6:	d020      	beq.n	800862a <_printf_common+0xb2>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	68e5      	ldr	r5, [r4, #12]
 80085ec:	f8d9 2000 	ldr.w	r2, [r9]
 80085f0:	f003 0306 	and.w	r3, r3, #6
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	bf08      	it	eq
 80085f8:	1aad      	subeq	r5, r5, r2
 80085fa:	68a3      	ldr	r3, [r4, #8]
 80085fc:	6922      	ldr	r2, [r4, #16]
 80085fe:	bf0c      	ite	eq
 8008600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008604:	2500      	movne	r5, #0
 8008606:	4293      	cmp	r3, r2
 8008608:	bfc4      	itt	gt
 800860a:	1a9b      	subgt	r3, r3, r2
 800860c:	18ed      	addgt	r5, r5, r3
 800860e:	f04f 0900 	mov.w	r9, #0
 8008612:	341a      	adds	r4, #26
 8008614:	454d      	cmp	r5, r9
 8008616:	d11a      	bne.n	800864e <_printf_common+0xd6>
 8008618:	2000      	movs	r0, #0
 800861a:	e008      	b.n	800862e <_printf_common+0xb6>
 800861c:	2301      	movs	r3, #1
 800861e:	4652      	mov	r2, sl
 8008620:	4639      	mov	r1, r7
 8008622:	4630      	mov	r0, r6
 8008624:	47c0      	blx	r8
 8008626:	3001      	adds	r0, #1
 8008628:	d103      	bne.n	8008632 <_printf_common+0xba>
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	3501      	adds	r5, #1
 8008634:	e7c3      	b.n	80085be <_printf_common+0x46>
 8008636:	18e1      	adds	r1, r4, r3
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	2030      	movs	r0, #48	; 0x30
 800863c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008640:	4422      	add	r2, r4
 8008642:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800864a:	3302      	adds	r3, #2
 800864c:	e7c5      	b.n	80085da <_printf_common+0x62>
 800864e:	2301      	movs	r3, #1
 8008650:	4622      	mov	r2, r4
 8008652:	4639      	mov	r1, r7
 8008654:	4630      	mov	r0, r6
 8008656:	47c0      	blx	r8
 8008658:	3001      	adds	r0, #1
 800865a:	d0e6      	beq.n	800862a <_printf_common+0xb2>
 800865c:	f109 0901 	add.w	r9, r9, #1
 8008660:	e7d8      	b.n	8008614 <_printf_common+0x9c>
	...

08008664 <_printf_i>:
 8008664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008668:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800866c:	460c      	mov	r4, r1
 800866e:	7e09      	ldrb	r1, [r1, #24]
 8008670:	b085      	sub	sp, #20
 8008672:	296e      	cmp	r1, #110	; 0x6e
 8008674:	4617      	mov	r7, r2
 8008676:	4606      	mov	r6, r0
 8008678:	4698      	mov	r8, r3
 800867a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800867c:	f000 80b3 	beq.w	80087e6 <_printf_i+0x182>
 8008680:	d822      	bhi.n	80086c8 <_printf_i+0x64>
 8008682:	2963      	cmp	r1, #99	; 0x63
 8008684:	d036      	beq.n	80086f4 <_printf_i+0x90>
 8008686:	d80a      	bhi.n	800869e <_printf_i+0x3a>
 8008688:	2900      	cmp	r1, #0
 800868a:	f000 80b9 	beq.w	8008800 <_printf_i+0x19c>
 800868e:	2958      	cmp	r1, #88	; 0x58
 8008690:	f000 8083 	beq.w	800879a <_printf_i+0x136>
 8008694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008698:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800869c:	e032      	b.n	8008704 <_printf_i+0xa0>
 800869e:	2964      	cmp	r1, #100	; 0x64
 80086a0:	d001      	beq.n	80086a6 <_printf_i+0x42>
 80086a2:	2969      	cmp	r1, #105	; 0x69
 80086a4:	d1f6      	bne.n	8008694 <_printf_i+0x30>
 80086a6:	6820      	ldr	r0, [r4, #0]
 80086a8:	6813      	ldr	r3, [r2, #0]
 80086aa:	0605      	lsls	r5, r0, #24
 80086ac:	f103 0104 	add.w	r1, r3, #4
 80086b0:	d52a      	bpl.n	8008708 <_printf_i+0xa4>
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6011      	str	r1, [r2, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	da03      	bge.n	80086c2 <_printf_i+0x5e>
 80086ba:	222d      	movs	r2, #45	; 0x2d
 80086bc:	425b      	negs	r3, r3
 80086be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80086c2:	486f      	ldr	r0, [pc, #444]	; (8008880 <_printf_i+0x21c>)
 80086c4:	220a      	movs	r2, #10
 80086c6:	e039      	b.n	800873c <_printf_i+0xd8>
 80086c8:	2973      	cmp	r1, #115	; 0x73
 80086ca:	f000 809d 	beq.w	8008808 <_printf_i+0x1a4>
 80086ce:	d808      	bhi.n	80086e2 <_printf_i+0x7e>
 80086d0:	296f      	cmp	r1, #111	; 0x6f
 80086d2:	d020      	beq.n	8008716 <_printf_i+0xb2>
 80086d4:	2970      	cmp	r1, #112	; 0x70
 80086d6:	d1dd      	bne.n	8008694 <_printf_i+0x30>
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	f043 0320 	orr.w	r3, r3, #32
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	e003      	b.n	80086ea <_printf_i+0x86>
 80086e2:	2975      	cmp	r1, #117	; 0x75
 80086e4:	d017      	beq.n	8008716 <_printf_i+0xb2>
 80086e6:	2978      	cmp	r1, #120	; 0x78
 80086e8:	d1d4      	bne.n	8008694 <_printf_i+0x30>
 80086ea:	2378      	movs	r3, #120	; 0x78
 80086ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086f0:	4864      	ldr	r0, [pc, #400]	; (8008884 <_printf_i+0x220>)
 80086f2:	e055      	b.n	80087a0 <_printf_i+0x13c>
 80086f4:	6813      	ldr	r3, [r2, #0]
 80086f6:	1d19      	adds	r1, r3, #4
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6011      	str	r1, [r2, #0]
 80086fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008704:	2301      	movs	r3, #1
 8008706:	e08c      	b.n	8008822 <_printf_i+0x1be>
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6011      	str	r1, [r2, #0]
 800870c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008710:	bf18      	it	ne
 8008712:	b21b      	sxthne	r3, r3
 8008714:	e7cf      	b.n	80086b6 <_printf_i+0x52>
 8008716:	6813      	ldr	r3, [r2, #0]
 8008718:	6825      	ldr	r5, [r4, #0]
 800871a:	1d18      	adds	r0, r3, #4
 800871c:	6010      	str	r0, [r2, #0]
 800871e:	0628      	lsls	r0, r5, #24
 8008720:	d501      	bpl.n	8008726 <_printf_i+0xc2>
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	e002      	b.n	800872c <_printf_i+0xc8>
 8008726:	0668      	lsls	r0, r5, #25
 8008728:	d5fb      	bpl.n	8008722 <_printf_i+0xbe>
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	4854      	ldr	r0, [pc, #336]	; (8008880 <_printf_i+0x21c>)
 800872e:	296f      	cmp	r1, #111	; 0x6f
 8008730:	bf14      	ite	ne
 8008732:	220a      	movne	r2, #10
 8008734:	2208      	moveq	r2, #8
 8008736:	2100      	movs	r1, #0
 8008738:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800873c:	6865      	ldr	r5, [r4, #4]
 800873e:	60a5      	str	r5, [r4, #8]
 8008740:	2d00      	cmp	r5, #0
 8008742:	f2c0 8095 	blt.w	8008870 <_printf_i+0x20c>
 8008746:	6821      	ldr	r1, [r4, #0]
 8008748:	f021 0104 	bic.w	r1, r1, #4
 800874c:	6021      	str	r1, [r4, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d13d      	bne.n	80087ce <_printf_i+0x16a>
 8008752:	2d00      	cmp	r5, #0
 8008754:	f040 808e 	bne.w	8008874 <_printf_i+0x210>
 8008758:	4665      	mov	r5, ip
 800875a:	2a08      	cmp	r2, #8
 800875c:	d10b      	bne.n	8008776 <_printf_i+0x112>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	07db      	lsls	r3, r3, #31
 8008762:	d508      	bpl.n	8008776 <_printf_i+0x112>
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	6862      	ldr	r2, [r4, #4]
 8008768:	429a      	cmp	r2, r3
 800876a:	bfde      	ittt	le
 800876c:	2330      	movle	r3, #48	; 0x30
 800876e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008772:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008776:	ebac 0305 	sub.w	r3, ip, r5
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	f8cd 8000 	str.w	r8, [sp]
 8008780:	463b      	mov	r3, r7
 8008782:	aa03      	add	r2, sp, #12
 8008784:	4621      	mov	r1, r4
 8008786:	4630      	mov	r0, r6
 8008788:	f7ff fef6 	bl	8008578 <_printf_common>
 800878c:	3001      	adds	r0, #1
 800878e:	d14d      	bne.n	800882c <_printf_i+0x1c8>
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	b005      	add	sp, #20
 8008796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800879a:	4839      	ldr	r0, [pc, #228]	; (8008880 <_printf_i+0x21c>)
 800879c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80087a0:	6813      	ldr	r3, [r2, #0]
 80087a2:	6821      	ldr	r1, [r4, #0]
 80087a4:	1d1d      	adds	r5, r3, #4
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6015      	str	r5, [r2, #0]
 80087aa:	060a      	lsls	r2, r1, #24
 80087ac:	d50b      	bpl.n	80087c6 <_printf_i+0x162>
 80087ae:	07ca      	lsls	r2, r1, #31
 80087b0:	bf44      	itt	mi
 80087b2:	f041 0120 	orrmi.w	r1, r1, #32
 80087b6:	6021      	strmi	r1, [r4, #0]
 80087b8:	b91b      	cbnz	r3, 80087c2 <_printf_i+0x15e>
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	f022 0220 	bic.w	r2, r2, #32
 80087c0:	6022      	str	r2, [r4, #0]
 80087c2:	2210      	movs	r2, #16
 80087c4:	e7b7      	b.n	8008736 <_printf_i+0xd2>
 80087c6:	064d      	lsls	r5, r1, #25
 80087c8:	bf48      	it	mi
 80087ca:	b29b      	uxthmi	r3, r3
 80087cc:	e7ef      	b.n	80087ae <_printf_i+0x14a>
 80087ce:	4665      	mov	r5, ip
 80087d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80087d4:	fb02 3311 	mls	r3, r2, r1, r3
 80087d8:	5cc3      	ldrb	r3, [r0, r3]
 80087da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80087de:	460b      	mov	r3, r1
 80087e0:	2900      	cmp	r1, #0
 80087e2:	d1f5      	bne.n	80087d0 <_printf_i+0x16c>
 80087e4:	e7b9      	b.n	800875a <_printf_i+0xf6>
 80087e6:	6813      	ldr	r3, [r2, #0]
 80087e8:	6825      	ldr	r5, [r4, #0]
 80087ea:	6961      	ldr	r1, [r4, #20]
 80087ec:	1d18      	adds	r0, r3, #4
 80087ee:	6010      	str	r0, [r2, #0]
 80087f0:	0628      	lsls	r0, r5, #24
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	d501      	bpl.n	80087fa <_printf_i+0x196>
 80087f6:	6019      	str	r1, [r3, #0]
 80087f8:	e002      	b.n	8008800 <_printf_i+0x19c>
 80087fa:	066a      	lsls	r2, r5, #25
 80087fc:	d5fb      	bpl.n	80087f6 <_printf_i+0x192>
 80087fe:	8019      	strh	r1, [r3, #0]
 8008800:	2300      	movs	r3, #0
 8008802:	6123      	str	r3, [r4, #16]
 8008804:	4665      	mov	r5, ip
 8008806:	e7b9      	b.n	800877c <_printf_i+0x118>
 8008808:	6813      	ldr	r3, [r2, #0]
 800880a:	1d19      	adds	r1, r3, #4
 800880c:	6011      	str	r1, [r2, #0]
 800880e:	681d      	ldr	r5, [r3, #0]
 8008810:	6862      	ldr	r2, [r4, #4]
 8008812:	2100      	movs	r1, #0
 8008814:	4628      	mov	r0, r5
 8008816:	f7f7 fceb 	bl	80001f0 <memchr>
 800881a:	b108      	cbz	r0, 8008820 <_printf_i+0x1bc>
 800881c:	1b40      	subs	r0, r0, r5
 800881e:	6060      	str	r0, [r4, #4]
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	6123      	str	r3, [r4, #16]
 8008824:	2300      	movs	r3, #0
 8008826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800882a:	e7a7      	b.n	800877c <_printf_i+0x118>
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	462a      	mov	r2, r5
 8008830:	4639      	mov	r1, r7
 8008832:	4630      	mov	r0, r6
 8008834:	47c0      	blx	r8
 8008836:	3001      	adds	r0, #1
 8008838:	d0aa      	beq.n	8008790 <_printf_i+0x12c>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	079b      	lsls	r3, r3, #30
 800883e:	d413      	bmi.n	8008868 <_printf_i+0x204>
 8008840:	68e0      	ldr	r0, [r4, #12]
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	4298      	cmp	r0, r3
 8008846:	bfb8      	it	lt
 8008848:	4618      	movlt	r0, r3
 800884a:	e7a3      	b.n	8008794 <_printf_i+0x130>
 800884c:	2301      	movs	r3, #1
 800884e:	464a      	mov	r2, r9
 8008850:	4639      	mov	r1, r7
 8008852:	4630      	mov	r0, r6
 8008854:	47c0      	blx	r8
 8008856:	3001      	adds	r0, #1
 8008858:	d09a      	beq.n	8008790 <_printf_i+0x12c>
 800885a:	3501      	adds	r5, #1
 800885c:	68e3      	ldr	r3, [r4, #12]
 800885e:	9a03      	ldr	r2, [sp, #12]
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	42ab      	cmp	r3, r5
 8008864:	dcf2      	bgt.n	800884c <_printf_i+0x1e8>
 8008866:	e7eb      	b.n	8008840 <_printf_i+0x1dc>
 8008868:	2500      	movs	r5, #0
 800886a:	f104 0919 	add.w	r9, r4, #25
 800886e:	e7f5      	b.n	800885c <_printf_i+0x1f8>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1ac      	bne.n	80087ce <_printf_i+0x16a>
 8008874:	7803      	ldrb	r3, [r0, #0]
 8008876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800887a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800887e:	e76c      	b.n	800875a <_printf_i+0xf6>
 8008880:	08008ee3 	.word	0x08008ee3
 8008884:	08008ef4 	.word	0x08008ef4

08008888 <_sbrk_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4c06      	ldr	r4, [pc, #24]	; (80088a4 <_sbrk_r+0x1c>)
 800888c:	2300      	movs	r3, #0
 800888e:	4605      	mov	r5, r0
 8008890:	4608      	mov	r0, r1
 8008892:	6023      	str	r3, [r4, #0]
 8008894:	f7ff fa7c 	bl	8007d90 <_sbrk>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_sbrk_r+0x1a>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_sbrk_r+0x1a>
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	20000458 	.word	0x20000458

080088a8 <__ascii_wctomb>:
 80088a8:	b149      	cbz	r1, 80088be <__ascii_wctomb+0x16>
 80088aa:	2aff      	cmp	r2, #255	; 0xff
 80088ac:	bf85      	ittet	hi
 80088ae:	238a      	movhi	r3, #138	; 0x8a
 80088b0:	6003      	strhi	r3, [r0, #0]
 80088b2:	700a      	strbls	r2, [r1, #0]
 80088b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80088b8:	bf98      	it	ls
 80088ba:	2001      	movls	r0, #1
 80088bc:	4770      	bx	lr
 80088be:	4608      	mov	r0, r1
 80088c0:	4770      	bx	lr

080088c2 <memmove>:
 80088c2:	4288      	cmp	r0, r1
 80088c4:	b510      	push	{r4, lr}
 80088c6:	eb01 0302 	add.w	r3, r1, r2
 80088ca:	d807      	bhi.n	80088dc <memmove+0x1a>
 80088cc:	1e42      	subs	r2, r0, #1
 80088ce:	4299      	cmp	r1, r3
 80088d0:	d00a      	beq.n	80088e8 <memmove+0x26>
 80088d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80088da:	e7f8      	b.n	80088ce <memmove+0xc>
 80088dc:	4283      	cmp	r3, r0
 80088de:	d9f5      	bls.n	80088cc <memmove+0xa>
 80088e0:	1881      	adds	r1, r0, r2
 80088e2:	1ad2      	subs	r2, r2, r3
 80088e4:	42d3      	cmn	r3, r2
 80088e6:	d100      	bne.n	80088ea <memmove+0x28>
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80088f2:	e7f7      	b.n	80088e4 <memmove+0x22>

080088f4 <__malloc_lock>:
 80088f4:	4770      	bx	lr

080088f6 <__malloc_unlock>:
 80088f6:	4770      	bx	lr

080088f8 <_realloc_r>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	4607      	mov	r7, r0
 80088fc:	4614      	mov	r4, r2
 80088fe:	460e      	mov	r6, r1
 8008900:	b921      	cbnz	r1, 800890c <_realloc_r+0x14>
 8008902:	4611      	mov	r1, r2
 8008904:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008908:	f7ff bc8a 	b.w	8008220 <_malloc_r>
 800890c:	b922      	cbnz	r2, 8008918 <_realloc_r+0x20>
 800890e:	f7ff fc39 	bl	8008184 <_free_r>
 8008912:	4625      	mov	r5, r4
 8008914:	4628      	mov	r0, r5
 8008916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008918:	f000 f814 	bl	8008944 <_malloc_usable_size_r>
 800891c:	42a0      	cmp	r0, r4
 800891e:	d20f      	bcs.n	8008940 <_realloc_r+0x48>
 8008920:	4621      	mov	r1, r4
 8008922:	4638      	mov	r0, r7
 8008924:	f7ff fc7c 	bl	8008220 <_malloc_r>
 8008928:	4605      	mov	r5, r0
 800892a:	2800      	cmp	r0, #0
 800892c:	d0f2      	beq.n	8008914 <_realloc_r+0x1c>
 800892e:	4631      	mov	r1, r6
 8008930:	4622      	mov	r2, r4
 8008932:	f7ff fac7 	bl	8007ec4 <memcpy>
 8008936:	4631      	mov	r1, r6
 8008938:	4638      	mov	r0, r7
 800893a:	f7ff fc23 	bl	8008184 <_free_r>
 800893e:	e7e9      	b.n	8008914 <_realloc_r+0x1c>
 8008940:	4635      	mov	r5, r6
 8008942:	e7e7      	b.n	8008914 <_realloc_r+0x1c>

08008944 <_malloc_usable_size_r>:
 8008944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008948:	1f18      	subs	r0, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	bfbc      	itt	lt
 800894e:	580b      	ldrlt	r3, [r1, r0]
 8008950:	18c0      	addlt	r0, r0, r3
 8008952:	4770      	bx	lr

08008954 <_init>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr

08008960 <_fini>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	bf00      	nop
 8008964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008966:	bc08      	pop	{r3}
 8008968:	469e      	mov	lr, r3
 800896a:	4770      	bx	lr
