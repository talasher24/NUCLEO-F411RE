
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006468  08006468  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006470  08006470  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08006478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000023c  080066b4  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080066b4  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d9a  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029f4  00000000  00000000  00031006  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  00033a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180de  00000000  00000000  00035a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d854  00000000  00000000  0004db66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093e4a  00000000  00000000  0005b3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc0  00000000  00000000  000ef280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000023c 	.word	0x2000023c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006258 	.word	0x08006258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000240 	.word	0x20000240
 80001dc:	08006258 	.word	0x08006258

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f8fa 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f004 ffc4 	bl	800554c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f004 fe4c 	bl	8005260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000004 	.word	0x20000004
 80005f8:	20000264 	.word	0x20000264

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000264 	.word	0x20000264

08000614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff ffee 	bl	80005fc <HAL_GetTick>
 8000620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800062c:	d005      	beq.n	800063a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_Delay+0x40>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800063a:	bf00      	nop
 800063c:	f7ff ffde 	bl	80005fc <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	429a      	cmp	r2, r3
 800064a:	d8f7      	bhi.n	800063c <HAL_Delay+0x28>
  {
  }
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000004 	.word	0x20000004

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff4c 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007da:	f7ff ff61 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 80007de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	6978      	ldr	r0, [r7, #20]
 80007e6:	f7ff ffb1 	bl	800074c <NVIC_EncodePriority>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff80 	bl	80006f8 <__NVIC_SetPriority>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff54 	bl	80006bc <__NVIC_EnableIRQ>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	795b      	ldrb	r3, [r3, #5]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d105      	bne.n	8000844 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f004 fd36 	bl	80052b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000854:	b480      	push	{r7}
 8000856:	b087      	sub	sp, #28
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2202      	movs	r2, #2
 8000868:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f042 0201 	orr.w	r2, r2, #1
 8000878:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e00a      	b.n	8000896 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	441a      	add	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	6812      	ldr	r2, [r2, #0]
 800088e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	d3f0      	bcc.n	8000880 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2201      	movs	r2, #1
 80008aa:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80008ac:	693b      	ldr	r3, [r7, #16]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	371c      	adds	r7, #28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff fe98 	bl	80005fc <HAL_GetTick>
 80008cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e099      	b.n	8000a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f022 0201 	bic.w	r2, r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008f8:	e00f      	b.n	800091a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008fa:	f7ff fe7f 	bl	80005fc <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b05      	cmp	r3, #5
 8000906:	d908      	bls.n	800091a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2220      	movs	r2, #32
 800090c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2203      	movs	r2, #3
 8000912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000916:	2303      	movs	r3, #3
 8000918:	e078      	b.n	8000a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1e8      	bne.n	80008fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <HAL_DMA_Init+0x158>)
 8000934:	4013      	ands	r3, r2
 8000936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800095e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	4313      	orrs	r3, r2
 800096a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	2b04      	cmp	r3, #4
 8000972:	d107      	bne.n	8000984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4313      	orrs	r3, r2
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4313      	orrs	r3, r2
 8000982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f023 0307 	bic.w	r3, r3, #7
 800099a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d117      	bne.n	80009de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00e      	beq.n	80009de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 fa91 	bl	8000ee8 <DMA_CheckFifoParam>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2240      	movs	r2, #64	; 0x40
 80009d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009da:	2301      	movs	r3, #1
 80009dc:	e016      	b.n	8000a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 fa48 	bl	8000e7c <DMA_CalcBaseAndBitshift>
 80009ec:	4603      	mov	r3, r0
 80009ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f4:	223f      	movs	r2, #63	; 0x3f
 80009f6:	409a      	lsls	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	f010803f 	.word	0xf010803f

08000a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d101      	bne.n	8000a3e <HAL_DMA_Start_IT+0x26>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e040      	b.n	8000ac0 <HAL_DMA_Start_IT+0xa8>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2201      	movs	r2, #1
 8000a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d12f      	bne.n	8000ab2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2202      	movs	r2, #2
 8000a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f9da 	bl	8000e20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a70:	223f      	movs	r2, #63	; 0x3f
 8000a72:	409a      	lsls	r2, r3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 0216 	orr.w	r2, r2, #22
 8000a86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0208 	orr.w	r2, r2, #8
 8000a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e005      	b.n	8000abe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000aba:	2302      	movs	r3, #2
 8000abc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d004      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00c      	b.n	8000b00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2205      	movs	r2, #5
 8000aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 0201 	bic.w	r2, r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b18:	4b92      	ldr	r3, [pc, #584]	; (8000d64 <HAL_DMA_IRQHandler+0x258>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a92      	ldr	r2, [pc, #584]	; (8000d68 <HAL_DMA_IRQHandler+0x25c>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0a9b      	lsrs	r3, r3, #10
 8000b24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b36:	2208      	movs	r2, #8
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d01a      	beq.n	8000b78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d013      	beq.n	8000b78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0204 	bic.w	r2, r2, #4
 8000b5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b64:	2208      	movs	r2, #8
 8000b66:	409a      	lsls	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b70:	f043 0201 	orr.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d012      	beq.n	8000bae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00b      	beq.n	8000bae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba6:	f043 0202 	orr.w	r2, r3, #2
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d012      	beq.n	8000be4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00b      	beq.n	8000be4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bdc:	f043 0204 	orr.w	r2, r3, #4
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be8:	2210      	movs	r2, #16
 8000bea:	409a      	lsls	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d043      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d03c      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c06:	2210      	movs	r2, #16
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d018      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d108      	bne.n	8000c3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d024      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	4798      	blx	r3
 8000c3a:	e01f      	b.n	8000c7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01b      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	4798      	blx	r3
 8000c4c:	e016      	b.n	8000c7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d107      	bne.n	8000c6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0208 	bic.w	r2, r2, #8
 8000c6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c80:	2220      	movs	r2, #32
 8000c82:	409a      	lsls	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 808e 	beq.w	8000daa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 8086 	beq.w	8000daa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b05      	cmp	r3, #5
 8000cb4:	d136      	bne.n	8000d24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0216 	bic.w	r2, r2, #22
 8000cc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d103      	bne.n	8000ce6 <HAL_DMA_IRQHandler+0x1da>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0208 	bic.w	r2, r2, #8
 8000cf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cfa:	223f      	movs	r2, #63	; 0x3f
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d07d      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	4798      	blx	r3
        }
        return;
 8000d22:	e078      	b.n	8000e16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d01c      	beq.n	8000d6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d108      	bne.n	8000d52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d030      	beq.n	8000daa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	4798      	blx	r3
 8000d50:	e02b      	b.n	8000daa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d027      	beq.n	8000daa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	4798      	blx	r3
 8000d62:	e022      	b.n	8000daa <HAL_DMA_IRQHandler+0x29e>
 8000d64:	20000068 	.word	0x20000068
 8000d68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10f      	bne.n	8000d9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0210 	bic.w	r2, r2, #16
 8000d88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d032      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d022      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0201 	bic.w	r2, r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d307      	bcc.n	8000df2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f2      	bne.n	8000dd6 <HAL_DMA_IRQHandler+0x2ca>
 8000df0:	e000      	b.n	8000df4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000df2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	4798      	blx	r3
 8000e14:	e000      	b.n	8000e18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000e16:	bf00      	nop
    }
  }
}
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop

08000e20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b40      	cmp	r3, #64	; 0x40
 8000e4c:	d108      	bne.n	8000e60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e5e:	e007      	b.n	8000e70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	3b10      	subs	r3, #16
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <DMA_CalcBaseAndBitshift+0x64>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <DMA_CalcBaseAndBitshift+0x68>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d909      	bls.n	8000ebe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000eb2:	f023 0303 	bic.w	r3, r3, #3
 8000eb6:	1d1a      	adds	r2, r3, #4
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	659a      	str	r2, [r3, #88]	; 0x58
 8000ebc:	e007      	b.n	8000ece <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	aaaaaaab 	.word	0xaaaaaaab
 8000ee4:	08006308 	.word	0x08006308

08000ee8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d11f      	bne.n	8000f42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d855      	bhi.n	8000fb4 <DMA_CheckFifoParam+0xcc>
 8000f08:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <DMA_CheckFifoParam+0x28>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f21 	.word	0x08000f21
 8000f14:	08000f33 	.word	0x08000f33
 8000f18:	08000f21 	.word	0x08000f21
 8000f1c:	08000fb5 	.word	0x08000fb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d045      	beq.n	8000fb8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f30:	e042      	b.n	8000fb8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f3a:	d13f      	bne.n	8000fbc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f40:	e03c      	b.n	8000fbc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f4a:	d121      	bne.n	8000f90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d836      	bhi.n	8000fc0 <DMA_CheckFifoParam+0xd8>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <DMA_CheckFifoParam+0x70>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f69 	.word	0x08000f69
 8000f5c:	08000f6f 	.word	0x08000f6f
 8000f60:	08000f69 	.word	0x08000f69
 8000f64:	08000f81 	.word	0x08000f81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f6c:	e02f      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d024      	beq.n	8000fc4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f7e:	e021      	b.n	8000fc4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f88:	d11e      	bne.n	8000fc8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f8e:	e01b      	b.n	8000fc8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d902      	bls.n	8000f9c <DMA_CheckFifoParam+0xb4>
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d003      	beq.n	8000fa2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f9a:	e018      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8000fa0:	e015      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00e      	beq.n	8000fcc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8000fb2:	e00b      	b.n	8000fcc <DMA_CheckFifoParam+0xe4>
      break;
 8000fb4:	bf00      	nop
 8000fb6:	e00a      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fb8:	bf00      	nop
 8000fba:	e008      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fbc:	bf00      	nop
 8000fbe:	e006      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fc0:	bf00      	nop
 8000fc2:	e004      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fc4:	bf00      	nop
 8000fc6:	e002      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;   
 8000fc8:	bf00      	nop
 8000fca:	e000      	b.n	8000fce <DMA_CheckFifoParam+0xe6>
      break;
 8000fcc:	bf00      	nop
    }
  } 
  
  return status; 
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_FLASH_Unlock+0x38>)
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da0b      	bge.n	8001006 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_FLASH_Unlock+0x38>)
 8000ff0:	4a09      	ldr	r2, [pc, #36]	; (8001018 <HAL_FLASH_Unlock+0x3c>)
 8000ff2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_FLASH_Unlock+0x38>)
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_FLASH_Unlock+0x40>)
 8000ff8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_FLASH_Unlock+0x38>)
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da01      	bge.n	8001006 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001006:	79fb      	ldrb	r3, [r7, #7]
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40023c00 	.word	0x40023c00
 8001018:	45670123 	.word	0x45670123
 800101c:	cdef89ab 	.word	0xcdef89ab

08001020 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_FLASH_Lock+0x1c>)
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_FLASH_Lock+0x1c>)
 800102a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800102e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_FLASH_OB_Unlock+0x2c>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_FLASH_OB_Unlock+0x2c>)
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_FLASH_OB_Unlock+0x30>)
 8001054:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_FLASH_OB_Unlock+0x2c>)
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_FLASH_OB_Unlock+0x34>)
 800105a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800105c:	2300      	movs	r3, #0
 800105e:	e000      	b.n	8001062 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40023c00 	.word	0x40023c00
 8001070:	08192a3b 	.word	0x08192a3b
 8001074:	4c5d6e7f 	.word	0x4c5d6e7f

08001078 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_FLASH_OB_Lock+0x1c>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_FLASH_OB_Lock+0x1c>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_FLASH_OB_Launch+0x24>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_FLASH_OB_Launch+0x24>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80010ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010b0:	f000 f806 	bl	80010c0 <FLASH_WaitForLastOperation>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c14 	.word	0x40023c14

080010c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <FLASH_WaitForLastOperation+0x78>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80010d2:	f7ff fa93 	bl	80005fc <HAL_GetTick>
 80010d6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010d8:	e010      	b.n	80010fc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d00c      	beq.n	80010fc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d007      	beq.n	80010f8 <FLASH_WaitForLastOperation+0x38>
 80010e8:	f7ff fa88 	bl	80005fc <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d201      	bcs.n	80010fc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e019      	b.n	8001130 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <FLASH_WaitForLastOperation+0x7c>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1e8      	bne.n	80010da <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <FLASH_WaitForLastOperation+0x7c>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <FLASH_WaitForLastOperation+0x7c>)
 8001116:	2201      	movs	r2, #1
 8001118:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <FLASH_WaitForLastOperation+0x7c>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001126:	f000 f80b 	bl	8001140 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
  
}  
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000268 	.word	0x20000268
 800113c:	40023c00 	.word	0x40023c00

08001140 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	4a2b      	ldr	r2, [pc, #172]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 800115a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 800115e:	2210      	movs	r2, #16
 8001160:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f003 0320 	and.w	r3, r3, #32
 800116a:	2b00      	cmp	r3, #0
 800116c:	d008      	beq.n	8001180 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	4a24      	ldr	r2, [pc, #144]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 8001178:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 800117c:	2220      	movs	r2, #32
 800117e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001188:	2b00      	cmp	r3, #0
 800118a:	d008      	beq.n	800119e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 8001196:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 800119a:	2240      	movs	r2, #64	; 0x40
 800119c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d008      	beq.n	80011bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 80011b4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d009      	beq.n	80011dc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 80011d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	4a05      	ldr	r2, [pc, #20]	; (8001208 <FLASH_SetErrorCode+0xc8>)
 80011f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <FLASH_SetErrorCode+0xc4>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	60da      	str	r2, [r3, #12]
  }
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	40023c00 	.word	0x40023c00
 8001208:	20000268 	.word	0x20000268

0800120c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HAL_FLASHEx_OBProgram+0xd8>)
 800121a:	7e1b      	ldrb	r3, [r3, #24]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_FLASHEx_OBProgram+0x18>
 8001220:	2302      	movs	r3, #2
 8001222:	e05b      	b.n	80012dc <HAL_FLASHEx_OBProgram+0xd0>
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_FLASHEx_OBProgram+0xd8>)
 8001226:	2201      	movs	r2, #1
 8001228:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d018      	beq.n	8001268 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10a      	bne.n	8001254 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	4619      	mov	r1, r3
 8001248:	4610      	mov	r0, r2
 800124a:	f000 f871 	bl	8001330 <FLASH_OB_EnableWRP>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e009      	b.n	8001268 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f000 f888 	bl	8001374 <FLASH_OB_DisableWRP>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f89a 	bl	80013b4 <FLASH_OB_RDP_LevelConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7e1b      	ldrb	r3, [r3, #24]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 800129e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a2:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80012a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	f000 f89a 	bl	80013e8 <FLASH_OB_UserConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f8bc 	bl	8001448 <FLASH_OB_BOR_LevelConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_FLASHEx_OBProgram+0xd8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	761a      	strb	r2, [r3, #24]

  return status;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000268 	.word	0x20000268

080012e8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	220f      	movs	r2, #15
 80012f4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80012f6:	f000 f8d5 	bl	80014a4 <FLASH_OB_GetWRP>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001302:	f000 f8db 	bl	80014bc <FLASH_OB_GetRDP>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800130e:	f000 f8b9 	bl	8001484 <FLASH_OB_GetUser>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800131a:	f000 f8ef 	bl	80014fc <FLASH_OB_GetBOR>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	615a      	str	r2, [r3, #20]
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800133e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001342:	f7ff febd 	bl	80010c0 <FLASH_WaitForLastOperation>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10a      	bne.n	8001366 <FLASH_OB_EnableWRP+0x36>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <FLASH_OB_EnableWRP+0x40>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	b29b      	uxth	r3, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	b29b      	uxth	r3, r3
 800135e:	4904      	ldr	r1, [pc, #16]	; (8001370 <FLASH_OB_EnableWRP+0x40>)
 8001360:	4013      	ands	r3, r2
 8001362:	b29b      	uxth	r3, r3
 8001364:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023c16 	.word	0x40023c16

08001374 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001382:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001386:	f7ff fe9b 	bl	80010c0 <FLASH_WaitForLastOperation>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d108      	bne.n	80013a6 <FLASH_OB_DisableWRP+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <FLASH_OB_DisableWRP+0x3c>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4904      	ldr	r1, [pc, #16]	; (80013b0 <FLASH_OB_DisableWRP+0x3c>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023c16 	.word	0x40023c16

080013b4 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013c6:	f7ff fe7b 	bl	80010c0 <FLASH_WaitForLastOperation>
 80013ca:	4603      	mov	r3, r0
 80013cc:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <FLASH_OB_RDP_LevelConfig+0x30>)
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023c15 	.word	0x40023c15

080013e8 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	460b      	mov	r3, r1
 80013f4:	71bb      	strb	r3, [r7, #6]
 80013f6:	4613      	mov	r3, r2
 80013f8:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80013fa:	23ff      	movs	r3, #255	; 0xff
 80013fc:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001402:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001406:	f7ff fe5b 	bl	80010c0 <FLASH_WaitForLastOperation>
 800140a:	4603      	mov	r3, r0
 800140c:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d111      	bne.n	8001438 <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <FLASH_OB_UserConfig+0x5c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	4313      	orrs	r3, r2
 8001426:	b2da      	uxtb	r2, r3
 8001428:	797b      	ldrb	r3, [r7, #5]
 800142a:	4313      	orrs	r3, r2
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4905      	ldr	r1, [pc, #20]	; (8001444 <FLASH_OB_UserConfig+0x5c>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4313      	orrs	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 8001438:	7bbb      	ldrb	r3, [r7, #14]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023c14 	.word	0x40023c14

08001448 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <FLASH_OB_BOR_LevelConfig+0x38>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <FLASH_OB_BOR_LevelConfig+0x38>)
 800145a:	f023 030c 	bic.w	r3, r3, #12
 800145e:	b2db      	uxtb	r3, r3
 8001460:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <FLASH_OB_BOR_LevelConfig+0x38>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4905      	ldr	r1, [pc, #20]	; (8001480 <FLASH_OB_BOR_LevelConfig+0x38>)
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	4313      	orrs	r3, r2
 800146e:	b2db      	uxtb	r3, r3
 8001470:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
  
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40023c14 	.word	0x40023c14

08001484 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <FLASH_OB_GetUser+0x1c>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f023 031f 	bic.w	r3, r3, #31
 8001492:	b2db      	uxtb	r3, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <FLASH_OB_GetWRP+0x14>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40023c16 	.word	0x40023c16

080014bc <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80014c2:	23aa      	movs	r3, #170	; 0xaa
 80014c4:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <FLASH_OB_GetRDP+0x3c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2bcc      	cmp	r3, #204	; 0xcc
 80014ce:	d102      	bne.n	80014d6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80014d0:	23cc      	movs	r3, #204	; 0xcc
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	e009      	b.n	80014ea <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <FLASH_OB_GetRDP+0x3c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2baa      	cmp	r3, #170	; 0xaa
 80014de:	d102      	bne.n	80014e6 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80014e0:	23aa      	movs	r3, #170	; 0xaa
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	e001      	b.n	80014ea <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 80014e6:	2355      	movs	r3, #85	; 0x55
 80014e8:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40023c15 	.word	0x40023c15

080014fc <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <FLASH_OB_GetBOR+0x1c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	b2db      	uxtb	r3, r3
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023c14 	.word	0x40023c14

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	e159      	b.n	80017ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	429a      	cmp	r2, r3
 8001552:	f040 8148 	bne.w	80017e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d00b      	beq.n	8001576 <HAL_GPIO_Init+0x5a>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800156a:	2b11      	cmp	r3, #17
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b12      	cmp	r3, #18
 8001574:	d130      	bne.n	80015d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0xfc>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b12      	cmp	r3, #18
 8001616:	d123      	bne.n	8001660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	08da      	lsrs	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3208      	adds	r2, #8
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0203 	and.w	r2, r3, #3
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a2 	beq.w	80017e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_GPIO_Init+0x2e4>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a55      	ldr	r2, [pc, #340]	; (8001800 <HAL_GPIO_Init+0x2e4>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_GPIO_Init+0x2e4>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016be:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_GPIO_Init+0x2ec>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0x202>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a47      	ldr	r2, [pc, #284]	; (800180c <HAL_GPIO_Init+0x2f0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x1fe>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a46      	ldr	r2, [pc, #280]	; (8001810 <HAL_GPIO_Init+0x2f4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x1fa>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a45      	ldr	r2, [pc, #276]	; (8001814 <HAL_GPIO_Init+0x2f8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x1f6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a44      	ldr	r2, [pc, #272]	; (8001818 <HAL_GPIO_Init+0x2fc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x1f2>
 800170a:	2304      	movs	r3, #4
 800170c:	e008      	b.n	8001720 <HAL_GPIO_Init+0x204>
 800170e:	2307      	movs	r3, #7
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x204>
 8001712:	2303      	movs	r3, #3
 8001714:	e004      	b.n	8001720 <HAL_GPIO_Init+0x204>
 8001716:	2302      	movs	r3, #2
 8001718:	e002      	b.n	8001720 <HAL_GPIO_Init+0x204>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x204>
 800171e:	2300      	movs	r3, #0
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	f002 0203 	and.w	r2, r2, #3
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	4093      	lsls	r3, r2
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001730:	4934      	ldr	r1, [pc, #208]	; (8001804 <HAL_GPIO_Init+0x2e8>)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_GPIO_Init+0x300>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001762:	4a2e      	ldr	r2, [pc, #184]	; (800181c <HAL_GPIO_Init+0x300>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_GPIO_Init+0x300>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800178c:	4a23      	ldr	r2, [pc, #140]	; (800181c <HAL_GPIO_Init+0x300>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_GPIO_Init+0x300>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b6:	4a19      	ldr	r2, [pc, #100]	; (800181c <HAL_GPIO_Init+0x300>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_GPIO_Init+0x300>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_GPIO_Init+0x300>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3301      	adds	r3, #1
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	f67f aea2 	bls.w	8001538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f4:	bf00      	nop
 80017f6:	3724      	adds	r7, #36	; 0x24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40023800 	.word	0x40023800
 8001804:	40013800 	.word	0x40013800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800
 8001814:	40020c00 	.word	0x40020c00
 8001818:	40021000 	.word	0x40021000
 800181c:	40013c00 	.word	0x40013c00

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e25b      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d075      	beq.n	800195e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001872:	4ba3      	ldr	r3, [pc, #652]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d00c      	beq.n	8001898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4ba0      	ldr	r3, [pc, #640]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	2b08      	cmp	r3, #8
 8001888:	d112      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b9d      	ldr	r3, [pc, #628]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001896:	d10b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4b99      	ldr	r3, [pc, #612]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05b      	beq.n	800195c <HAL_RCC_OscConfig+0x108>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d157      	bne.n	800195c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e236      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x74>
 80018ba:	4b91      	ldr	r3, [pc, #580]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a90      	ldr	r2, [pc, #576]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b8b      	ldr	r3, [pc, #556]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a8a      	ldr	r2, [pc, #552]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a87      	ldr	r2, [pc, #540]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018ec:	4b84      	ldr	r3, [pc, #528]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a83      	ldr	r2, [pc, #524]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a80      	ldr	r2, [pc, #512]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7fe fe76 	bl	80005fc <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7fe fe72 	bl	80005fc <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1fb      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xc0>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7fe fe62 	bl	80005fc <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193c:	f7fe fe5e 	bl	80005fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1e7      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0xe8>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196a:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001976:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	2b08      	cmp	r3, #8
 8001980:	d11c      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e1bb      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4952      	ldr	r1, [pc, #328]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_RCC_OscConfig+0x2b0>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7fe fe17 	bl	80005fc <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7fe fe13 	bl	80005fc <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e19c      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4940      	ldr	r1, [pc, #256]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <HAL_RCC_OscConfig+0x2b0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7fe fdf6 	bl	80005fc <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a14:	f7fe fdf2 	bl	80005fc <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e17b      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d030      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d016      	beq.n	8001a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x2b4>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7fe fdd6 	bl	80005fc <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a54:	f7fe fdd2 	bl	80005fc <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e15b      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x200>
 8001a72:	e015      	b.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_OscConfig+0x2b4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7fe fdbf 	bl	80005fc <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a82:	f7fe fdbb 	bl	80005fc <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e144      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a0 	beq.w	8001bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10f      	bne.n	8001ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d121      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7fe fd81 	bl	80005fc <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	e011      	b.n	8001b22 <HAL_RCC_OscConfig+0x2ce>
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	42470000 	.word	0x42470000
 8001b08:	42470e80 	.word	0x42470e80
 8001b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7fe fd74 	bl	80005fc <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0fd      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b81      	ldr	r3, [pc, #516]	; (8001d28 <HAL_RCC_OscConfig+0x4d4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
 8001b36:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a7c      	ldr	r2, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e01c      	b.n	8001b7e <HAL_RCC_OscConfig+0x32a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x312>
 8001b4c:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	4a76      	ldr	r2, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	; 0x70
 8001b58:	4b74      	ldr	r3, [pc, #464]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5c:	4a73      	ldr	r2, [pc, #460]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x32a>
 8001b66:	4b71      	ldr	r3, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a70      	ldr	r2, [pc, #448]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	4b6e      	ldr	r3, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a6d      	ldr	r2, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7fe fd39 	bl	80005fc <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7fe fd35 	bl	80005fc <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0bc      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ee      	beq.n	8001b8e <HAL_RCC_OscConfig+0x33a>
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7fe fd23 	bl	80005fc <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe fd1f 	bl	80005fc <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0a6      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ee      	bne.n	8001bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8092 	beq.w	8001d1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf8:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d05c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d141      	bne.n	8001c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b48      	ldr	r3, [pc, #288]	; (8001d30 <HAL_RCC_OscConfig+0x4dc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7fe fcf3 	bl	80005fc <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7fe fcef 	bl	80005fc <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e078      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	019b      	lsls	r3, r3, #6
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	061b      	lsls	r3, r3, #24
 8001c5c:	4933      	ldr	r1, [pc, #204]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_RCC_OscConfig+0x4dc>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7fe fcc8 	bl	80005fc <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7fe fcc4 	bl	80005fc <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04d      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x41c>
 8001c8e:	e045      	b.n	8001d1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x4dc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7fe fcb1 	bl	80005fc <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7fe fcad 	bl	80005fc <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e036      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x44a>
 8001cbc:	e02e      	b.n	8001d1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e029      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_RCC_OscConfig+0x4d8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d11c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d115      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470060 	.word	0x42470060

08001d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0cc      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b68      	ldr	r3, [pc, #416]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d90c      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b65      	ldr	r3, [pc, #404]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b63      	ldr	r3, [pc, #396]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0b8      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d88:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a58      	ldr	r2, [pc, #352]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	494d      	ldr	r1, [pc, #308]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d044      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d119      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e067      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 0203 	bic.w	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4934      	ldr	r1, [pc, #208]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e24:	f7fe fbea 	bl	80005fc <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7fe fbe6 	bl	80005fc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e04f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 020c 	and.w	r2, r3, #12
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1eb      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d20c      	bcs.n	8001e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e032      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4916      	ldr	r1, [pc, #88]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eba:	f000 f821 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	fa21 f303 	lsr.w	r3, r1, r3
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fb36 	bl	800554c <HAL_InitTick>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	08006310 	.word	0x08006310
 8001ef8:	20000068 	.word	0x20000068
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d007      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x32>
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d008      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x38>
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 80b4 	bne.w	8002094 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f2e:	60bb      	str	r3, [r7, #8]
       break;
 8001f30:	e0b3      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f32:	4b5e      	ldr	r3, [pc, #376]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f34:	60bb      	str	r3, [r7, #8]
      break;
 8001f36:	e0b0      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f38:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f42:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d04a      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4e:	4b55      	ldr	r3, [pc, #340]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	f04f 0400 	mov.w	r4, #0
 8001f58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	ea03 0501 	and.w	r5, r3, r1
 8001f64:	ea04 0602 	and.w	r6, r4, r2
 8001f68:	4629      	mov	r1, r5
 8001f6a:	4632      	mov	r2, r6
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	f04f 0400 	mov.w	r4, #0
 8001f74:	0154      	lsls	r4, r2, #5
 8001f76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f7a:	014b      	lsls	r3, r1, #5
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4622      	mov	r2, r4
 8001f80:	1b49      	subs	r1, r1, r5
 8001f82:	eb62 0206 	sbc.w	r2, r2, r6
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	f04f 0400 	mov.w	r4, #0
 8001f8e:	0194      	lsls	r4, r2, #6
 8001f90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f94:	018b      	lsls	r3, r1, #6
 8001f96:	1a5b      	subs	r3, r3, r1
 8001f98:	eb64 0402 	sbc.w	r4, r4, r2
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	00e2      	lsls	r2, r4, #3
 8001fa6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001faa:	00d9      	lsls	r1, r3, #3
 8001fac:	460b      	mov	r3, r1
 8001fae:	4614      	mov	r4, r2
 8001fb0:	195b      	adds	r3, r3, r5
 8001fb2:	eb44 0406 	adc.w	r4, r4, r6
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	0262      	lsls	r2, r4, #9
 8001fc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fc4:	0259      	lsls	r1, r3, #9
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4614      	mov	r4, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	4621      	mov	r1, r4
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f04f 0400 	mov.w	r4, #0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	f7fe f95a 	bl	8000290 <__aeabi_uldivmod>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	460c      	mov	r4, r1
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e049      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	f04f 0400 	mov.w	r4, #0
 8001fee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	ea03 0501 	and.w	r5, r3, r1
 8001ffa:	ea04 0602 	and.w	r6, r4, r2
 8001ffe:	4629      	mov	r1, r5
 8002000:	4632      	mov	r2, r6
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	f04f 0400 	mov.w	r4, #0
 800200a:	0154      	lsls	r4, r2, #5
 800200c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002010:	014b      	lsls	r3, r1, #5
 8002012:	4619      	mov	r1, r3
 8002014:	4622      	mov	r2, r4
 8002016:	1b49      	subs	r1, r1, r5
 8002018:	eb62 0206 	sbc.w	r2, r2, r6
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	f04f 0400 	mov.w	r4, #0
 8002024:	0194      	lsls	r4, r2, #6
 8002026:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800202a:	018b      	lsls	r3, r1, #6
 800202c:	1a5b      	subs	r3, r3, r1
 800202e:	eb64 0402 	sbc.w	r4, r4, r2
 8002032:	f04f 0100 	mov.w	r1, #0
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	00e2      	lsls	r2, r4, #3
 800203c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002040:	00d9      	lsls	r1, r3, #3
 8002042:	460b      	mov	r3, r1
 8002044:	4614      	mov	r4, r2
 8002046:	195b      	adds	r3, r3, r5
 8002048:	eb44 0406 	adc.w	r4, r4, r6
 800204c:	f04f 0100 	mov.w	r1, #0
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	02a2      	lsls	r2, r4, #10
 8002056:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800205a:	0299      	lsls	r1, r3, #10
 800205c:	460b      	mov	r3, r1
 800205e:	4614      	mov	r4, r2
 8002060:	4618      	mov	r0, r3
 8002062:	4621      	mov	r1, r4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f04f 0400 	mov.w	r4, #0
 800206a:	461a      	mov	r2, r3
 800206c:	4623      	mov	r3, r4
 800206e:	f7fe f90f 	bl	8000290 <__aeabi_uldivmod>
 8002072:	4603      	mov	r3, r0
 8002074:	460c      	mov	r4, r1
 8002076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	3301      	adds	r3, #1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	60bb      	str	r3, [r7, #8]
      break;
 8002092:	e002      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002096:	60bb      	str	r3, [r7, #8]
      break;
 8002098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209a:	68bb      	ldr	r3, [r7, #8]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	00f42400 	.word	0x00f42400
 80020ac:	007a1200 	.word	0x007a1200

080020b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000068 	.word	0x20000068

080020c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020cc:	f7ff fff0 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020d0:	4601      	mov	r1, r0
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0a9b      	lsrs	r3, r3, #10
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4a03      	ldr	r2, [pc, #12]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	08006320 	.word	0x08006320

080020f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020f4:	f7ff ffdc 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020f8:	4601      	mov	r1, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0b5b      	lsrs	r3, r3, #13
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4a03      	ldr	r2, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	08006320 	.word	0x08006320

08002118 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	220f      	movs	r2, #15
 8002126:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_RCC_GetClockConfig+0x5c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_RCC_GetClockConfig+0x5c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_RCC_GetClockConfig+0x5c>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_GetClockConfig+0x5c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_RCC_GetClockConfig+0x60>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 020f 	and.w	r2, r3, #15
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	601a      	str	r2, [r3, #0]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40023c00 	.word	0x40023c00

0800217c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d038      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021a4:	4b68      	ldr	r3, [pc, #416]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021aa:	f7fe fa27 	bl	80005fc <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021b2:	f7fe fa23 	bl	80005fc <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0bd      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021c4:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f0      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	071b      	lsls	r3, r3, #28
 80021e2:	495a      	ldr	r1, [pc, #360]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021f0:	f7fe fa04 	bl	80005fc <HAL_GetTick>
 80021f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021f8:	f7fe fa00 	bl	80005fc <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e09a      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800220a:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8083 	beq.w	800232a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	4b48      	ldr	r3, [pc, #288]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	4a47      	ldr	r2, [pc, #284]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	; 0x40
 8002234:	4b45      	ldr	r3, [pc, #276]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002240:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a42      	ldr	r2, [pc, #264]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800224c:	f7fe f9d6 	bl	80005fc <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7fe f9d2 	bl	80005fc <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e06c      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d02f      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	d028      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002290:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002298:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a0:	4b2c      	ldr	r3, [pc, #176]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80022a6:	4a29      	ldr	r2, [pc, #164]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d114      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe f9a0 	bl	80005fc <HAL_GetTick>
 80022bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	e00a      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe f99c 	bl	80005fc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e034      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ee      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ee:	d10d      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x190>
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002304:	4911      	ldr	r1, [pc, #68]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
 800230a:	e005      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002312:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002316:	6093      	str	r3, [r2, #8]
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	4909      	ldr	r1, [pc, #36]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002326:	4313      	orrs	r3, r2
 8002328:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7d1a      	ldrb	r2, [r3, #20]
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800233c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	42470068 	.word	0x42470068
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000
 8002354:	42470e40 	.word	0x42470e40
 8002358:	424711e0 	.word	0x424711e0

0800235c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e083      	b.n	8002476 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7f5b      	ldrb	r3, [r3, #29]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f002 ffb8 	bl	80052f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	22ca      	movs	r2, #202	; 0xca
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2253      	movs	r2, #83	; 0x53
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fb7a 	bl	8002a94 <RTC_EnterInitMode>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	22ff      	movs	r2, #255	; 0xff
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2204      	movs	r2, #4
 80023b2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e05e      	b.n	8002476 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80023c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68d2      	ldr	r2, [r2, #12]
 80023f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	041a      	lsls	r2, r3, #16
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002416:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10e      	bne.n	8002444 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fb0c 	bl	8002a44 <HAL_RTC_WaitForSynchro>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	22ff      	movs	r2, #255	; 0xff
 8002438:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2204      	movs	r2, #4
 800243e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e018      	b.n	8002476 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	22ff      	movs	r2, #255	; 0xff
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002474:	2300      	movs	r3, #0
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800247e:	b590      	push	{r4, r7, lr}
 8002480:	b087      	sub	sp, #28
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	7f1b      	ldrb	r3, [r3, #28]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_RTC_SetTime+0x1c>
 8002496:	2302      	movs	r3, #2
 8002498:	e0aa      	b.n	80025f0 <HAL_RTC_SetTime+0x172>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2202      	movs	r2, #2
 80024a4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d126      	bne.n	80024fa <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fb11 	bl	8002aec <RTC_ByteToBcd2>
 80024ca:	4603      	mov	r3, r0
 80024cc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	785b      	ldrb	r3, [r3, #1]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fb0a 	bl	8002aec <RTC_ByteToBcd2>
 80024d8:	4603      	mov	r3, r0
 80024da:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024dc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	789b      	ldrb	r3, [r3, #2]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fb02 	bl	8002aec <RTC_ByteToBcd2>
 80024e8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80024ea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	78db      	ldrb	r3, [r3, #3]
 80024f2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e018      	b.n	800252c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	785b      	ldrb	r3, [r3, #1]
 8002518:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800251a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002520:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	78db      	ldrb	r3, [r3, #3]
 8002526:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	22ca      	movs	r2, #202	; 0xca
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2253      	movs	r2, #83	; 0x53
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 faa9 	bl	8002a94 <RTC_EnterInitMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	22ff      	movs	r2, #255	; 0xff
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2204      	movs	r2, #4
 8002554:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e047      	b.n	80025f0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800256a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800256e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800257e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6899      	ldr	r1, [r3, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	431a      	orrs	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d111      	bne.n	80025da <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fa44 	bl	8002a44 <HAL_RTC_WaitForSynchro>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	22ff      	movs	r2, #255	; 0xff
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2204      	movs	r2, #4
 80025ce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00a      	b.n	80025f0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	22ff      	movs	r2, #255	; 0xff
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80025ee:	2300      	movs	r3, #0
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}

080025f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	7f1b      	ldrb	r3, [r3, #28]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_RTC_SetDate+0x1c>
 8002610:	2302      	movs	r3, #2
 8002612:	e094      	b.n	800273e <HAL_RTC_SetDate+0x146>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2202      	movs	r2, #2
 800261e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10e      	bne.n	8002644 <HAL_RTC_SetDate+0x4c>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	f023 0310 	bic.w	r3, r3, #16
 800263a:	b2db      	uxtb	r3, r3
 800263c:	330a      	adds	r3, #10
 800263e:	b2da      	uxtb	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d11c      	bne.n	8002684 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	78db      	ldrb	r3, [r3, #3]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fa4c 	bl	8002aec <RTC_ByteToBcd2>
 8002654:	4603      	mov	r3, r0
 8002656:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	785b      	ldrb	r3, [r3, #1]
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fa45 	bl	8002aec <RTC_ByteToBcd2>
 8002662:	4603      	mov	r3, r0
 8002664:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002666:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	789b      	ldrb	r3, [r3, #2]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fa3d 	bl	8002aec <RTC_ByteToBcd2>
 8002672:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002674:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e00e      	b.n	80026a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	78db      	ldrb	r3, [r3, #3]
 8002688:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	785b      	ldrb	r3, [r3, #1]
 800268e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002690:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002696:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	22ca      	movs	r2, #202	; 0xca
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2253      	movs	r2, #83	; 0x53
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f9ee 	bl	8002a94 <RTC_EnterInitMode>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	22ff      	movs	r2, #255	; 0xff
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2204      	movs	r2, #4
 80026ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e033      	b.n	800273e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80026e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d111      	bne.n	8002728 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f99d 	bl	8002a44 <HAL_RTC_WaitForSynchro>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2204      	movs	r2, #4
 800271c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e00a      	b.n	800273e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
  }
}
 800273e:	4618      	mov	r0, r3
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd90      	pop	{r4, r7, pc}
	...

08002748 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800275c:	4b93      	ldr	r3, [pc, #588]	; (80029ac <HAL_RTC_SetAlarm_IT+0x264>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a93      	ldr	r2, [pc, #588]	; (80029b0 <HAL_RTC_SetAlarm_IT+0x268>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	0adb      	lsrs	r3, r3, #11
 8002768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	7f1b      	ldrb	r3, [r3, #28]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_RTC_SetAlarm_IT+0x36>
 800277a:	2302      	movs	r3, #2
 800277c:	e111      	b.n	80029a2 <HAL_RTC_SetAlarm_IT+0x25a>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2202      	movs	r2, #2
 8002788:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d137      	bne.n	8002800 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2200      	movs	r2, #0
 80027a2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f99f 	bl	8002aec <RTC_ByteToBcd2>
 80027ae:	4603      	mov	r3, r0
 80027b0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f998 	bl	8002aec <RTC_ByteToBcd2>
 80027bc:	4603      	mov	r3, r0
 80027be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80027c0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	789b      	ldrb	r3, [r3, #2]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f990 	bl	8002aec <RTC_ByteToBcd2>
 80027cc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80027ce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	78db      	ldrb	r3, [r3, #3]
 80027d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80027d8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f982 	bl	8002aec <RTC_ByteToBcd2>
 80027e8:	4603      	mov	r3, r0
 80027ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027ec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e023      	b.n	8002848 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2200      	movs	r2, #0
 8002812:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002820:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002826:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800282e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002836:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002838:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800283e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002844:	4313      	orrs	r3, r2
 8002846:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	22ca      	movs	r2, #202	; 0xca
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2253      	movs	r2, #83	; 0x53
 8002862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286c:	d141      	bne.n	80028f2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800287c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800288e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1e5a      	subs	r2, r3, #1
 8002894:	617a      	str	r2, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10b      	bne.n	80028b2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	22ff      	movs	r2, #255	; 0xff
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2203      	movs	r2, #3
 80028a6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e077      	b.n	80029a2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0e7      	beq.n	8002890 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028de:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	e040      	b.n	8002974 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002900:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002912:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	617a      	str	r2, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10b      	bne.n	8002936 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	22ff      	movs	r2, #255	; 0xff
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2203      	movs	r2, #3
 800292a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e035      	b.n	80029a2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0e7      	beq.n	8002914 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002972:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <HAL_RTC_SetAlarm_IT+0x26c>)
 800297a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	22ff      	movs	r2, #255	; 0xff
 8002992:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000068 	.word	0x20000068
 80029b0:	10624dd3 	.word	0x10624dd3
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d012      	beq.n	80029f4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f002 fbe5 	bl	80051ac <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80029f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d012      	beq.n	8002a28 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f8e4 	bl	8002bde <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002a26:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002a2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a2e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	775a      	strb	r2, [r3, #29]
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a60:	f7fd fdcc 	bl	80005fc <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a66:	e009      	b.n	8002a7c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a68:	f7fd fdc8 	bl	80005fc <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a76:	d901      	bls.n	8002a7c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e007      	b.n	8002a8c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ee      	beq.n	8002a68 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d119      	bne.n	8002ae2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ab8:	f7fd fda0 	bl	80005fc <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002abe:	e009      	b.n	8002ad4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ac0:	f7fd fd9c 	bl	80005fc <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ace:	d901      	bls.n	8002ad4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e007      	b.n	8002ae4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ee      	beq.n	8002ac0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002afa:	e005      	b.n	8002b08 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	3b0a      	subs	r3, #10
 8002b06:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b09      	cmp	r3, #9
 8002b0c:	d8f6      	bhi.n	8002afc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	b2db      	uxtb	r3, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmouthCalibMinusPulsesValue must be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmouthCalibMinusPulsesValue)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmouthCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	7f1b      	ldrb	r3, [r3, #28]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_RTCEx_SetSmoothCalib+0x1e>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e047      	b.n	8002bd6 <HAL_RTCEx_SetSmoothCalib+0xae>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	22ca      	movs	r2, #202	; 0xca
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2253      	movs	r2, #83	; 0x53
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01e      	beq.n	8002bae <HAL_RTCEx_SetSmoothCalib+0x86>
  {
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b70:	f7fd fd44 	bl	80005fc <HAL_GetTick>
 8002b74:	6178      	str	r0, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8002b76:	e013      	b.n	8002ba0 <HAL_RTCEx_SetSmoothCalib+0x78>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b78:	f7fd fd40 	bl	80005fc <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b86:	d90b      	bls.n	8002ba0 <HAL_RTCEx_SetSmoothCalib+0x78>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2203      	movs	r2, #3
 8002b94:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e01a      	b.n	8002bd6 <HAL_RTCEx_SetSmoothCalib+0xae>
    while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e4      	bne.n	8002b78 <HAL_RTCEx_SetSmoothCalib+0x50>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmouthCalibMinusPulsesValue);
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	ea42 0103 	orr.w	r1, r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	22ff      	movs	r2, #255	; 0xff
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e01d      	b.n	8002c40 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d106      	bne.n	8002c1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f002 fb87 	bl	800532c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f000 fb8f 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d007      	beq.n	8002c82 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01d      	b.n	8002cde <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f815 	bl	8002ce6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f000 fb40 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	6839      	ldr	r1, [r7, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fdc6 	bl	80038a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_TIM_PWM_Start+0x60>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d107      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b06      	cmp	r3, #6
 8002d3e:	d007      	beq.n	8002d50 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000

08002d60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fd94 	bl	80038a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <HAL_TIM_PWM_Stop+0x94>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d117      	bne.n	8002db2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_TIM_PWM_Stop+0x52>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	f240 4344 	movw	r3, #1092	; 0x444
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d107      	bne.n	8002db2 <HAL_TIM_PWM_Stop+0x52>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <HAL_TIM_PWM_Stop+0x82>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	f240 4344 	movw	r3, #1092	; 0x444
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_PWM_Stop+0x82>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40010000 	.word	0x40010000

08002df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d122      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0202 	mvn.w	r2, #2
 8002e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa6b 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa5d 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fa6e 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d122      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0204 	mvn.w	r2, #4
 8002e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa41 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa33 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fa44 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0208 	mvn.w	r2, #8
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa17 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa09 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fa1a 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0210 	mvn.w	r2, #16
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2208      	movs	r2, #8
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9ed 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9df 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f9f0 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0201 	mvn.w	r2, #1
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f002 f958 	bl	800522c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b80      	cmp	r3, #128	; 0x80
 8002f88:	d10e      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d107      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fd1a 	bl	80039dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d107      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9b5 	bl	800333e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d10e      	bne.n	8003000 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d107      	bne.n	8003000 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0220 	mvn.w	r2, #32
 8002ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fce4 	bl	80039c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800301e:	2302      	movs	r3, #2
 8003020:	e0b4      	b.n	800318c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	f200 809f 	bhi.w	8003178 <HAL_TIM_PWM_ConfigChannel+0x170>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003075 	.word	0x08003075
 8003044:	08003179 	.word	0x08003179
 8003048:	08003179 	.word	0x08003179
 800304c:	08003179 	.word	0x08003179
 8003050:	080030b5 	.word	0x080030b5
 8003054:	08003179 	.word	0x08003179
 8003058:	08003179 	.word	0x08003179
 800305c:	08003179 	.word	0x08003179
 8003060:	080030f7 	.word	0x080030f7
 8003064:	08003179 	.word	0x08003179
 8003068:	08003179 	.word	0x08003179
 800306c:	08003179 	.word	0x08003179
 8003070:	08003137 	.word	0x08003137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f9ea 	bl	8003454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0208 	orr.w	r2, r2, #8
 800308e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0204 	bic.w	r2, r2, #4
 800309e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6999      	ldr	r1, [r3, #24]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	619a      	str	r2, [r3, #24]
      break;
 80030b2:	e062      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fa30 	bl	8003520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6999      	ldr	r1, [r3, #24]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	021a      	lsls	r2, r3, #8
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	619a      	str	r2, [r3, #24]
      break;
 80030f4:	e041      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fa7b 	bl	80035f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0208 	orr.w	r2, r2, #8
 8003110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0204 	bic.w	r2, r2, #4
 8003120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69d9      	ldr	r1, [r3, #28]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	61da      	str	r2, [r3, #28]
      break;
 8003134:	e021      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fac5 	bl	80036cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69d9      	ldr	r1, [r3, #28]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	021a      	lsls	r2, r3, #8
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	61da      	str	r2, [r3, #28]
      break;
 8003176:	e000      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003178:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_ConfigClockSource+0x18>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0a6      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x166>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d067      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0x120>
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d80b      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x6c>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d073      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x140>
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d802      	bhi.n	80031f6 <HAL_TIM_ConfigClockSource+0x62>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d06f      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80031f4:	e078      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d06c      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x140>
 80031fa:	2b30      	cmp	r3, #48	; 0x30
 80031fc:	d06a      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80031fe:	e073      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003200:	2b70      	cmp	r3, #112	; 0x70
 8003202:	d00d      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0x8c>
 8003204:	2b70      	cmp	r3, #112	; 0x70
 8003206:	d804      	bhi.n	8003212 <HAL_TIM_ConfigClockSource+0x7e>
 8003208:	2b50      	cmp	r3, #80	; 0x50
 800320a:	d033      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0xe0>
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d041      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003210:	e06a      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003216:	d066      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x152>
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321c:	d017      	beq.n	800324e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800321e:	e063      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f000 fb16 	bl	8003860 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003242:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	609a      	str	r2, [r3, #8]
      break;
 800324c:	e04c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6899      	ldr	r1, [r3, #8]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f000 faff 	bl	8003860 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003270:	609a      	str	r2, [r3, #8]
      break;
 8003272:	e039      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	461a      	mov	r2, r3
 8003282:	f000 fa73 	bl	800376c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2150      	movs	r1, #80	; 0x50
 800328c:	4618      	mov	r0, r3
 800328e:	f000 facc 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 8003292:	e029      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f000 fa92 	bl	80037ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2160      	movs	r1, #96	; 0x60
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fabc 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 80032b2:	e019      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f000 fa53 	bl	800376c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2140      	movs	r1, #64	; 0x40
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 faac 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 80032d2:	e009      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 faa3 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 80032e4:	e000      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80032e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a34      	ldr	r2, [pc, #208]	; (8003438 <TIM_Base_SetConfig+0xe4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00f      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003372:	d00b      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a31      	ldr	r2, [pc, #196]	; (800343c <TIM_Base_SetConfig+0xe8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a30      	ldr	r2, [pc, #192]	; (8003440 <TIM_Base_SetConfig+0xec>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <TIM_Base_SetConfig+0xf0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a25      	ldr	r2, [pc, #148]	; (8003438 <TIM_Base_SetConfig+0xe4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01b      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d017      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a22      	ldr	r2, [pc, #136]	; (800343c <TIM_Base_SetConfig+0xe8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a21      	ldr	r2, [pc, #132]	; (8003440 <TIM_Base_SetConfig+0xec>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00f      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a20      	ldr	r2, [pc, #128]	; (8003444 <TIM_Base_SetConfig+0xf0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00b      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <TIM_Base_SetConfig+0xf4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1e      	ldr	r2, [pc, #120]	; (800344c <TIM_Base_SetConfig+0xf8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <TIM_Base_SetConfig+0xfc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a08      	ldr	r2, [pc, #32]	; (8003438 <TIM_Base_SetConfig+0xe4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d103      	bne.n	8003424 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	615a      	str	r2, [r3, #20]
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40010000 	.word	0x40010000
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800

08003454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0201 	bic.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 0302 	bic.w	r3, r3, #2
 800349c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a1c      	ldr	r2, [pc, #112]	; (800351c <TIM_OC1_SetConfig+0xc8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10c      	bne.n	80034ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0308 	bic.w	r3, r3, #8
 80034b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <TIM_OC1_SetConfig+0xc8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d111      	bne.n	80034f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	621a      	str	r2, [r3, #32]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40010000 	.word	0x40010000

08003520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f023 0210 	bic.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800354e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 0320 	bic.w	r3, r3, #32
 800356a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <TIM_OC2_SetConfig+0xd4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10d      	bne.n	800359c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <TIM_OC2_SetConfig+0xd4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d113      	bne.n	80035cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000

080035f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <TIM_OC3_SetConfig+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10d      	bne.n	8003672 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800365c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <TIM_OC3_SetConfig+0xd0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d113      	bne.n	80036a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	621a      	str	r2, [r3, #32]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	40010000 	.word	0x40010000

080036cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	031b      	lsls	r3, r3, #12
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <TIM_OC4_SetConfig+0x9c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d109      	bne.n	8003740 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40010000 	.word	0x40010000

0800376c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f023 030a 	bic.w	r3, r3, #10
 80037a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b087      	sub	sp, #28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f023 0210 	bic.w	r2, r3, #16
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	031b      	lsls	r3, r3, #12
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	f043 0307 	orr.w	r3, r3, #7
 800384c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	021a      	lsls	r2, r3, #8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	431a      	orrs	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2201      	movs	r2, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	401a      	ands	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1a      	ldr	r2, [r3, #32]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003900:	2302      	movs	r3, #2
 8003902:	e050      	b.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d013      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a16      	ldr	r2, [pc, #88]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d10c      	bne.n	8003994 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	4313      	orrs	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40014000 	.word	0x40014000

080039c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e03f      	b.n	8003a82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f001 fce4 	bl	80053e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2224      	movs	r2, #36	; 0x24
 8003a20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fc2d 	bl	8004294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d153      	bne.n	8003b4e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_Transmit_DMA+0x26>
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e04c      	b.n	8003b50 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_UART_Transmit_DMA+0x38>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e045      	b.n	8003b50 <HAL_UART_Transmit_DMA+0xc4>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	88fa      	ldrh	r2, [r7, #6]
 8003adc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2221      	movs	r2, #33	; 0x21
 8003ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	4a19      	ldr	r2, [pc, #100]	; (8003b58 <HAL_UART_Transmit_DMA+0xcc>)
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <HAL_UART_Transmit_DMA+0xd0>)
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <HAL_UART_Transmit_DMA+0xd4>)
 8003b02:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	2200      	movs	r2, #0
 8003b0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003b0c:	f107 0308 	add.w	r3, r7, #8
 8003b10:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	461a      	mov	r2, r3
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	f7fc ff78 	bl	8000a18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b30:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b48:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	08003ea1 	.word	0x08003ea1
 8003b5c:	08003ef3 	.word	0x08003ef3
 8003b60:	08003f93 	.word	0x08003f93

08003b64 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d166      	bne.n	8003c4c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_UART_Receive_DMA+0x26>
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e05f      	b.n	8003c4e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Receive_DMA+0x38>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e058      	b.n	8003c4e <HAL_UART_Receive_DMA+0xea>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2222      	movs	r2, #34	; 0x22
 8003bba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc2:	4a25      	ldr	r2, [pc, #148]	; (8003c58 <HAL_UART_Receive_DMA+0xf4>)
 8003bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <HAL_UART_Receive_DMA+0xf8>)
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <HAL_UART_Receive_DMA+0xfc>)
 8003bd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bda:	2200      	movs	r2, #0
 8003bdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	f7fc ff0f 	bl	8000a18 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c26:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c46:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e000      	b.n	8003c4e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	08003f0f 	.word	0x08003f0f
 8003c5c:	08003f77 	.word	0x08003f77
 8003c60:	08003f93 	.word	0x08003f93

08003c64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10d      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x52>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa6f 	bl	8004192 <UART_Receive_IT>
      return;
 8003cb4:	e0d1      	b.n	8003e5a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80b0 	beq.w	8003e1e <HAL_UART_IRQHandler+0x1ba>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x70>
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80a5 	beq.w	8003e1e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x90>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	f043 0201 	orr.w	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_UART_IRQHandler+0xb0>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0c:	f043 0202 	orr.w	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_UART_IRQHandler+0xd0>
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00f      	beq.n	8003d5e <HAL_UART_IRQHandler+0xfa>
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d104      	bne.n	8003d52 <HAL_UART_IRQHandler+0xee>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	f043 0208 	orr.w	r2, r3, #8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d078      	beq.n	8003e58 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <HAL_UART_IRQHandler+0x11c>
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa09 	bl	8004192 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_UART_IRQHandler+0x144>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d031      	beq.n	8003e0c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f952 	bl	8004052 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d123      	bne.n	8003e04 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd8:	4a21      	ldr	r2, [pc, #132]	; (8003e60 <HAL_UART_IRQHandler+0x1fc>)
 8003dda:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fc fe71 	bl	8000ac8 <HAL_DMA_Abort_IT>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d016      	beq.n	8003e1a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df6:	4610      	mov	r0, r2
 8003df8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfa:	e00e      	b.n	8003e1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f845 	bl	8003e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e02:	e00a      	b.n	8003e1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f841 	bl	8003e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0a:	e006      	b.n	8003e1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f83d 	bl	8003e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e18:	e01e      	b.n	8003e58 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1a:	bf00      	nop
    return;
 8003e1c:	e01c      	b.n	8003e58 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_UART_IRQHandler+0x1d6>
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f93f 	bl	80040b6 <UART_Transmit_IT>
    return;
 8003e38:	e00f      	b.n	8003e5a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_UART_IRQHandler+0x1f6>
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f987 	bl	8004162 <UART_EndTransmit_IT>
    return;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003e58:	bf00      	nop
  }
}
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	0800408f 	.word	0x0800408f

08003e64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d113      	bne.n	8003ee4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ee2:	e002      	b.n	8003eea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fff1 	bl	8004ecc <HAL_UART_TxCpltCallback>
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff ffaf 	bl	8003e64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d11e      	bne.n	8003f68 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f3e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 ffb9 	bl	8004ee0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff ff77 	bl	8003e78 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	2b80      	cmp	r3, #128	; 0x80
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b21      	cmp	r3, #33	; 0x21
 8003fc4:	d108      	bne.n	8003fd8 <UART_DMAError+0x46>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003fd2:	68b8      	ldr	r0, [r7, #8]
 8003fd4:	f000 f827 	bl	8004026 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b22      	cmp	r3, #34	; 0x22
 8003ff8:	d108      	bne.n	800400c <UART_DMAError+0x7a>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2200      	movs	r2, #0
 8004004:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004006:	68b8      	ldr	r0, [r7, #8]
 8004008:	f000 f823 	bl	8004052 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004010:	f043 0210 	orr.w	r2, r3, #16
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004018:	68b8      	ldr	r0, [r7, #8]
 800401a:	f7ff ff37 	bl	8003e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800403c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004068:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff feef 	bl	8003e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b21      	cmp	r3, #33	; 0x21
 80040c8:	d144      	bne.n	8004154 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	d11a      	bne.n	800410a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d105      	bne.n	80040fe <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	1c9a      	adds	r2, r3, #2
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]
 80040fc:	e00e      	b.n	800411c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	621a      	str	r2, [r3, #32]
 8004108:	e008      	b.n	800411c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6211      	str	r1, [r2, #32]
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29b      	uxth	r3, r3
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4619      	mov	r1, r3
 800412a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10f      	bne.n	8004150 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800413e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004178:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fea2 	bl	8004ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b22      	cmp	r3, #34	; 0x22
 80041a4:	d171      	bne.n	800428a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ae:	d123      	bne.n	80041f8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10e      	bne.n	80041dc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	1c9a      	adds	r2, r3, #2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
 80041da:	e029      	b.n	8004230 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	629a      	str	r2, [r3, #40]	; 0x28
 80041f6:	e01b      	b.n	8004230 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6858      	ldr	r0, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	1c59      	adds	r1, r3, #1
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6291      	str	r1, [r2, #40]	; 0x28
 8004210:	b2c2      	uxtb	r2, r0
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	e00c      	b.n	8004230 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	1c58      	adds	r0, r3, #1
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	6288      	str	r0, [r1, #40]	; 0x28
 8004228:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4619      	mov	r1, r3
 800423e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004240:	2b00      	cmp	r3, #0
 8004242:	d120      	bne.n	8004286 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0220 	bic.w	r2, r2, #32
 8004252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fe2f 	bl	8004ee0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e002      	b.n	800428c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e000      	b.n	800428c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
  }
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042d6:	f023 030c 	bic.w	r3, r3, #12
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	68f9      	ldr	r1, [r7, #12]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004302:	f040 818b 	bne.w	800461c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4ac1      	ldr	r2, [pc, #772]	; (8004610 <UART_SetConfig+0x37c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d005      	beq.n	800431c <UART_SetConfig+0x88>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4abf      	ldr	r2, [pc, #764]	; (8004614 <UART_SetConfig+0x380>)
 8004316:	4293      	cmp	r3, r2
 8004318:	f040 80bd 	bne.w	8004496 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800431c:	f7fd fee8 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8004320:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	461d      	mov	r5, r3
 8004326:	f04f 0600 	mov.w	r6, #0
 800432a:	46a8      	mov	r8, r5
 800432c:	46b1      	mov	r9, r6
 800432e:	eb18 0308 	adds.w	r3, r8, r8
 8004332:	eb49 0409 	adc.w	r4, r9, r9
 8004336:	4698      	mov	r8, r3
 8004338:	46a1      	mov	r9, r4
 800433a:	eb18 0805 	adds.w	r8, r8, r5
 800433e:	eb49 0906 	adc.w	r9, r9, r6
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800434e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004352:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004356:	4688      	mov	r8, r1
 8004358:	4691      	mov	r9, r2
 800435a:	eb18 0005 	adds.w	r0, r8, r5
 800435e:	eb49 0106 	adc.w	r1, r9, r6
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	461d      	mov	r5, r3
 8004368:	f04f 0600 	mov.w	r6, #0
 800436c:	196b      	adds	r3, r5, r5
 800436e:	eb46 0406 	adc.w	r4, r6, r6
 8004372:	461a      	mov	r2, r3
 8004374:	4623      	mov	r3, r4
 8004376:	f7fb ff8b 	bl	8000290 <__aeabi_uldivmod>
 800437a:	4603      	mov	r3, r0
 800437c:	460c      	mov	r4, r1
 800437e:	461a      	mov	r2, r3
 8004380:	4ba5      	ldr	r3, [pc, #660]	; (8004618 <UART_SetConfig+0x384>)
 8004382:	fba3 2302 	umull	r2, r3, r3, r2
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	461d      	mov	r5, r3
 8004390:	f04f 0600 	mov.w	r6, #0
 8004394:	46a9      	mov	r9, r5
 8004396:	46b2      	mov	sl, r6
 8004398:	eb19 0309 	adds.w	r3, r9, r9
 800439c:	eb4a 040a 	adc.w	r4, sl, sl
 80043a0:	4699      	mov	r9, r3
 80043a2:	46a2      	mov	sl, r4
 80043a4:	eb19 0905 	adds.w	r9, r9, r5
 80043a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c0:	4689      	mov	r9, r1
 80043c2:	4692      	mov	sl, r2
 80043c4:	eb19 0005 	adds.w	r0, r9, r5
 80043c8:	eb4a 0106 	adc.w	r1, sl, r6
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	461d      	mov	r5, r3
 80043d2:	f04f 0600 	mov.w	r6, #0
 80043d6:	196b      	adds	r3, r5, r5
 80043d8:	eb46 0406 	adc.w	r4, r6, r6
 80043dc:	461a      	mov	r2, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	f7fb ff56 	bl	8000290 <__aeabi_uldivmod>
 80043e4:	4603      	mov	r3, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b8b      	ldr	r3, [pc, #556]	; (8004618 <UART_SetConfig+0x384>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a86      	ldr	r2, [pc, #536]	; (8004618 <UART_SetConfig+0x384>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800440c:	4498      	add	r8, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	461d      	mov	r5, r3
 8004412:	f04f 0600 	mov.w	r6, #0
 8004416:	46a9      	mov	r9, r5
 8004418:	46b2      	mov	sl, r6
 800441a:	eb19 0309 	adds.w	r3, r9, r9
 800441e:	eb4a 040a 	adc.w	r4, sl, sl
 8004422:	4699      	mov	r9, r3
 8004424:	46a2      	mov	sl, r4
 8004426:	eb19 0905 	adds.w	r9, r9, r5
 800442a:	eb4a 0a06 	adc.w	sl, sl, r6
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800443a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800443e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004442:	4689      	mov	r9, r1
 8004444:	4692      	mov	sl, r2
 8004446:	eb19 0005 	adds.w	r0, r9, r5
 800444a:	eb4a 0106 	adc.w	r1, sl, r6
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	461d      	mov	r5, r3
 8004454:	f04f 0600 	mov.w	r6, #0
 8004458:	196b      	adds	r3, r5, r5
 800445a:	eb46 0406 	adc.w	r4, r6, r6
 800445e:	461a      	mov	r2, r3
 8004460:	4623      	mov	r3, r4
 8004462:	f7fb ff15 	bl	8000290 <__aeabi_uldivmod>
 8004466:	4603      	mov	r3, r0
 8004468:	460c      	mov	r4, r1
 800446a:	461a      	mov	r2, r3
 800446c:	4b6a      	ldr	r3, [pc, #424]	; (8004618 <UART_SetConfig+0x384>)
 800446e:	fba3 1302 	umull	r1, r3, r3, r2
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2164      	movs	r1, #100	; 0x64
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	3332      	adds	r3, #50	; 0x32
 8004480:	4a65      	ldr	r2, [pc, #404]	; (8004618 <UART_SetConfig+0x384>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	f003 0207 	and.w	r2, r3, #7
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4442      	add	r2, r8
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	e26f      	b.n	8004976 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004496:	f7fd fe17 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 800449a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	461d      	mov	r5, r3
 80044a0:	f04f 0600 	mov.w	r6, #0
 80044a4:	46a8      	mov	r8, r5
 80044a6:	46b1      	mov	r9, r6
 80044a8:	eb18 0308 	adds.w	r3, r8, r8
 80044ac:	eb49 0409 	adc.w	r4, r9, r9
 80044b0:	4698      	mov	r8, r3
 80044b2:	46a1      	mov	r9, r4
 80044b4:	eb18 0805 	adds.w	r8, r8, r5
 80044b8:	eb49 0906 	adc.w	r9, r9, r6
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044d0:	4688      	mov	r8, r1
 80044d2:	4691      	mov	r9, r2
 80044d4:	eb18 0005 	adds.w	r0, r8, r5
 80044d8:	eb49 0106 	adc.w	r1, r9, r6
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	461d      	mov	r5, r3
 80044e2:	f04f 0600 	mov.w	r6, #0
 80044e6:	196b      	adds	r3, r5, r5
 80044e8:	eb46 0406 	adc.w	r4, r6, r6
 80044ec:	461a      	mov	r2, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	f7fb fece 	bl	8000290 <__aeabi_uldivmod>
 80044f4:	4603      	mov	r3, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <UART_SetConfig+0x384>)
 80044fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	461d      	mov	r5, r3
 800450a:	f04f 0600 	mov.w	r6, #0
 800450e:	46a9      	mov	r9, r5
 8004510:	46b2      	mov	sl, r6
 8004512:	eb19 0309 	adds.w	r3, r9, r9
 8004516:	eb4a 040a 	adc.w	r4, sl, sl
 800451a:	4699      	mov	r9, r3
 800451c:	46a2      	mov	sl, r4
 800451e:	eb19 0905 	adds.w	r9, r9, r5
 8004522:	eb4a 0a06 	adc.w	sl, sl, r6
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800453a:	4689      	mov	r9, r1
 800453c:	4692      	mov	sl, r2
 800453e:	eb19 0005 	adds.w	r0, r9, r5
 8004542:	eb4a 0106 	adc.w	r1, sl, r6
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	461d      	mov	r5, r3
 800454c:	f04f 0600 	mov.w	r6, #0
 8004550:	196b      	adds	r3, r5, r5
 8004552:	eb46 0406 	adc.w	r4, r6, r6
 8004556:	461a      	mov	r2, r3
 8004558:	4623      	mov	r3, r4
 800455a:	f7fb fe99 	bl	8000290 <__aeabi_uldivmod>
 800455e:	4603      	mov	r3, r0
 8004560:	460c      	mov	r4, r1
 8004562:	461a      	mov	r2, r3
 8004564:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <UART_SetConfig+0x384>)
 8004566:	fba3 1302 	umull	r1, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2164      	movs	r1, #100	; 0x64
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	3332      	adds	r3, #50	; 0x32
 8004578:	4a27      	ldr	r2, [pc, #156]	; (8004618 <UART_SetConfig+0x384>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004586:	4498      	add	r8, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	461d      	mov	r5, r3
 800458c:	f04f 0600 	mov.w	r6, #0
 8004590:	46a9      	mov	r9, r5
 8004592:	46b2      	mov	sl, r6
 8004594:	eb19 0309 	adds.w	r3, r9, r9
 8004598:	eb4a 040a 	adc.w	r4, sl, sl
 800459c:	4699      	mov	r9, r3
 800459e:	46a2      	mov	sl, r4
 80045a0:	eb19 0905 	adds.w	r9, r9, r5
 80045a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80045a8:	f04f 0100 	mov.w	r1, #0
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045bc:	4689      	mov	r9, r1
 80045be:	4692      	mov	sl, r2
 80045c0:	eb19 0005 	adds.w	r0, r9, r5
 80045c4:	eb4a 0106 	adc.w	r1, sl, r6
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	461d      	mov	r5, r3
 80045ce:	f04f 0600 	mov.w	r6, #0
 80045d2:	196b      	adds	r3, r5, r5
 80045d4:	eb46 0406 	adc.w	r4, r6, r6
 80045d8:	461a      	mov	r2, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	f7fb fe58 	bl	8000290 <__aeabi_uldivmod>
 80045e0:	4603      	mov	r3, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	461a      	mov	r2, r3
 80045e6:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <UART_SetConfig+0x384>)
 80045e8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	2164      	movs	r1, #100	; 0x64
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	3332      	adds	r3, #50	; 0x32
 80045fa:	4a07      	ldr	r2, [pc, #28]	; (8004618 <UART_SetConfig+0x384>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f003 0207 	and.w	r2, r3, #7
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4442      	add	r2, r8
 800460c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800460e:	e1b2      	b.n	8004976 <UART_SetConfig+0x6e2>
 8004610:	40011000 	.word	0x40011000
 8004614:	40011400 	.word	0x40011400
 8004618:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4ad7      	ldr	r2, [pc, #860]	; (8004980 <UART_SetConfig+0x6ec>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d005      	beq.n	8004632 <UART_SetConfig+0x39e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4ad6      	ldr	r2, [pc, #856]	; (8004984 <UART_SetConfig+0x6f0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	f040 80d1 	bne.w	80047d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004632:	f7fd fd5d 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8004636:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	469a      	mov	sl, r3
 800463c:	f04f 0b00 	mov.w	fp, #0
 8004640:	46d0      	mov	r8, sl
 8004642:	46d9      	mov	r9, fp
 8004644:	eb18 0308 	adds.w	r3, r8, r8
 8004648:	eb49 0409 	adc.w	r4, r9, r9
 800464c:	4698      	mov	r8, r3
 800464e:	46a1      	mov	r9, r4
 8004650:	eb18 080a 	adds.w	r8, r8, sl
 8004654:	eb49 090b 	adc.w	r9, r9, fp
 8004658:	f04f 0100 	mov.w	r1, #0
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004664:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004668:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800466c:	4688      	mov	r8, r1
 800466e:	4691      	mov	r9, r2
 8004670:	eb1a 0508 	adds.w	r5, sl, r8
 8004674:	eb4b 0609 	adc.w	r6, fp, r9
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4619      	mov	r1, r3
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	f04f 0400 	mov.w	r4, #0
 800468a:	0094      	lsls	r4, r2, #2
 800468c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004690:	008b      	lsls	r3, r1, #2
 8004692:	461a      	mov	r2, r3
 8004694:	4623      	mov	r3, r4
 8004696:	4628      	mov	r0, r5
 8004698:	4631      	mov	r1, r6
 800469a:	f7fb fdf9 	bl	8000290 <__aeabi_uldivmod>
 800469e:	4603      	mov	r3, r0
 80046a0:	460c      	mov	r4, r1
 80046a2:	461a      	mov	r2, r3
 80046a4:	4bb8      	ldr	r3, [pc, #736]	; (8004988 <UART_SetConfig+0x6f4>)
 80046a6:	fba3 2302 	umull	r2, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	469b      	mov	fp, r3
 80046b4:	f04f 0c00 	mov.w	ip, #0
 80046b8:	46d9      	mov	r9, fp
 80046ba:	46e2      	mov	sl, ip
 80046bc:	eb19 0309 	adds.w	r3, r9, r9
 80046c0:	eb4a 040a 	adc.w	r4, sl, sl
 80046c4:	4699      	mov	r9, r3
 80046c6:	46a2      	mov	sl, r4
 80046c8:	eb19 090b 	adds.w	r9, r9, fp
 80046cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046e4:	4689      	mov	r9, r1
 80046e6:	4692      	mov	sl, r2
 80046e8:	eb1b 0509 	adds.w	r5, fp, r9
 80046ec:	eb4c 060a 	adc.w	r6, ip, sl
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4619      	mov	r1, r3
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	f04f 0400 	mov.w	r4, #0
 8004702:	0094      	lsls	r4, r2, #2
 8004704:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004708:	008b      	lsls	r3, r1, #2
 800470a:	461a      	mov	r2, r3
 800470c:	4623      	mov	r3, r4
 800470e:	4628      	mov	r0, r5
 8004710:	4631      	mov	r1, r6
 8004712:	f7fb fdbd 	bl	8000290 <__aeabi_uldivmod>
 8004716:	4603      	mov	r3, r0
 8004718:	460c      	mov	r4, r1
 800471a:	461a      	mov	r2, r3
 800471c:	4b9a      	ldr	r3, [pc, #616]	; (8004988 <UART_SetConfig+0x6f4>)
 800471e:	fba3 1302 	umull	r1, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2164      	movs	r1, #100	; 0x64
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	3332      	adds	r3, #50	; 0x32
 8004730:	4a95      	ldr	r2, [pc, #596]	; (8004988 <UART_SetConfig+0x6f4>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473c:	4498      	add	r8, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	469b      	mov	fp, r3
 8004742:	f04f 0c00 	mov.w	ip, #0
 8004746:	46d9      	mov	r9, fp
 8004748:	46e2      	mov	sl, ip
 800474a:	eb19 0309 	adds.w	r3, r9, r9
 800474e:	eb4a 040a 	adc.w	r4, sl, sl
 8004752:	4699      	mov	r9, r3
 8004754:	46a2      	mov	sl, r4
 8004756:	eb19 090b 	adds.w	r9, r9, fp
 800475a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800475e:	f04f 0100 	mov.w	r1, #0
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800476a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800476e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004772:	4689      	mov	r9, r1
 8004774:	4692      	mov	sl, r2
 8004776:	eb1b 0509 	adds.w	r5, fp, r9
 800477a:	eb4c 060a 	adc.w	r6, ip, sl
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4619      	mov	r1, r3
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	f04f 0400 	mov.w	r4, #0
 8004790:	0094      	lsls	r4, r2, #2
 8004792:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004796:	008b      	lsls	r3, r1, #2
 8004798:	461a      	mov	r2, r3
 800479a:	4623      	mov	r3, r4
 800479c:	4628      	mov	r0, r5
 800479e:	4631      	mov	r1, r6
 80047a0:	f7fb fd76 	bl	8000290 <__aeabi_uldivmod>
 80047a4:	4603      	mov	r3, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	461a      	mov	r2, r3
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <UART_SetConfig+0x6f4>)
 80047ac:	fba3 1302 	umull	r1, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	2164      	movs	r1, #100	; 0x64
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	3332      	adds	r3, #50	; 0x32
 80047be:	4a72      	ldr	r2, [pc, #456]	; (8004988 <UART_SetConfig+0x6f4>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4442      	add	r2, r8
 80047d0:	609a      	str	r2, [r3, #8]
 80047d2:	e0d0      	b.n	8004976 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fd fc78 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 80047d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	469a      	mov	sl, r3
 80047de:	f04f 0b00 	mov.w	fp, #0
 80047e2:	46d0      	mov	r8, sl
 80047e4:	46d9      	mov	r9, fp
 80047e6:	eb18 0308 	adds.w	r3, r8, r8
 80047ea:	eb49 0409 	adc.w	r4, r9, r9
 80047ee:	4698      	mov	r8, r3
 80047f0:	46a1      	mov	r9, r4
 80047f2:	eb18 080a 	adds.w	r8, r8, sl
 80047f6:	eb49 090b 	adc.w	r9, r9, fp
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004806:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800480a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800480e:	4688      	mov	r8, r1
 8004810:	4691      	mov	r9, r2
 8004812:	eb1a 0508 	adds.w	r5, sl, r8
 8004816:	eb4b 0609 	adc.w	r6, fp, r9
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4619      	mov	r1, r3
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	0094      	lsls	r4, r2, #2
 800482e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004832:	008b      	lsls	r3, r1, #2
 8004834:	461a      	mov	r2, r3
 8004836:	4623      	mov	r3, r4
 8004838:	4628      	mov	r0, r5
 800483a:	4631      	mov	r1, r6
 800483c:	f7fb fd28 	bl	8000290 <__aeabi_uldivmod>
 8004840:	4603      	mov	r3, r0
 8004842:	460c      	mov	r4, r1
 8004844:	461a      	mov	r2, r3
 8004846:	4b50      	ldr	r3, [pc, #320]	; (8004988 <UART_SetConfig+0x6f4>)
 8004848:	fba3 2302 	umull	r2, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	469b      	mov	fp, r3
 8004856:	f04f 0c00 	mov.w	ip, #0
 800485a:	46d9      	mov	r9, fp
 800485c:	46e2      	mov	sl, ip
 800485e:	eb19 0309 	adds.w	r3, r9, r9
 8004862:	eb4a 040a 	adc.w	r4, sl, sl
 8004866:	4699      	mov	r9, r3
 8004868:	46a2      	mov	sl, r4
 800486a:	eb19 090b 	adds.w	r9, r9, fp
 800486e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800487e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004882:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004886:	4689      	mov	r9, r1
 8004888:	4692      	mov	sl, r2
 800488a:	eb1b 0509 	adds.w	r5, fp, r9
 800488e:	eb4c 060a 	adc.w	r6, ip, sl
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4619      	mov	r1, r3
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	f04f 0400 	mov.w	r4, #0
 80048a4:	0094      	lsls	r4, r2, #2
 80048a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	461a      	mov	r2, r3
 80048ae:	4623      	mov	r3, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	4631      	mov	r1, r6
 80048b4:	f7fb fcec 	bl	8000290 <__aeabi_uldivmod>
 80048b8:	4603      	mov	r3, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	461a      	mov	r2, r3
 80048be:	4b32      	ldr	r3, [pc, #200]	; (8004988 <UART_SetConfig+0x6f4>)
 80048c0:	fba3 1302 	umull	r1, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	2164      	movs	r1, #100	; 0x64
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	3332      	adds	r3, #50	; 0x32
 80048d2:	4a2d      	ldr	r2, [pc, #180]	; (8004988 <UART_SetConfig+0x6f4>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048de:	4498      	add	r8, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	469b      	mov	fp, r3
 80048e4:	f04f 0c00 	mov.w	ip, #0
 80048e8:	46d9      	mov	r9, fp
 80048ea:	46e2      	mov	sl, ip
 80048ec:	eb19 0309 	adds.w	r3, r9, r9
 80048f0:	eb4a 040a 	adc.w	r4, sl, sl
 80048f4:	4699      	mov	r9, r3
 80048f6:	46a2      	mov	sl, r4
 80048f8:	eb19 090b 	adds.w	r9, r9, fp
 80048fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004900:	f04f 0100 	mov.w	r1, #0
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800490c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004910:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004914:	4689      	mov	r9, r1
 8004916:	4692      	mov	sl, r2
 8004918:	eb1b 0509 	adds.w	r5, fp, r9
 800491c:	eb4c 060a 	adc.w	r6, ip, sl
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4619      	mov	r1, r3
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	f04f 0400 	mov.w	r4, #0
 8004932:	0094      	lsls	r4, r2, #2
 8004934:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004938:	008b      	lsls	r3, r1, #2
 800493a:	461a      	mov	r2, r3
 800493c:	4623      	mov	r3, r4
 800493e:	4628      	mov	r0, r5
 8004940:	4631      	mov	r1, r6
 8004942:	f7fb fca5 	bl	8000290 <__aeabi_uldivmod>
 8004946:	4603      	mov	r3, r0
 8004948:	460c      	mov	r4, r1
 800494a:	461a      	mov	r2, r3
 800494c:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <UART_SetConfig+0x6f4>)
 800494e:	fba3 1302 	umull	r1, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2164      	movs	r1, #100	; 0x64
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	3332      	adds	r3, #50	; 0x32
 8004960:	4a09      	ldr	r2, [pc, #36]	; (8004988 <UART_SetConfig+0x6f4>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 020f 	and.w	r2, r3, #15
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4442      	add	r2, r8
 8004972:	609a      	str	r2, [r3, #8]
}
 8004974:	e7ff      	b.n	8004976 <UART_SetConfig+0x6e2>
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004980:	40011000 	.word	0x40011000
 8004984:	40011400 	.word	0x40011400
 8004988:	51eb851f 	.word	0x51eb851f

0800498c <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68d2      	ldr	r2, [r2, #12]
 800499c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <bufferInit>:
	uint8_t _p_tx_buffer[BUFFER_SIZE];
}s_Buff;

//void bufferInit(t_Buff buffer);

void bufferInit(s_Buff *buffer){
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	e007      	b.n	80049ca <bufferInit+0x1e>
		buffer->_p_rx_buffer[i] = 0;
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	2200      	movs	r2, #0
 80049c2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3301      	adds	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b18      	cmp	r3, #24
 80049ce:	ddf4      	ble.n	80049ba <bufferInit+0xe>
	}
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049e0:	f7fb fdd6 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049e4:	f000 f82e 	bl	8004a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049e8:	f000 fa2e 	bl	8004e48 <MX_GPIO_Init>
  MX_DMA_Init();
 80049ec:	f000 fa04 	bl	8004df8 <MX_DMA_Init>
  MX_CRC_Init();
 80049f0:	f000 f8ac 	bl	8004b4c <MX_CRC_Init>
  MX_RTC_Init();
 80049f4:	f000 f8be 	bl	8004b74 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80049f8:	f000 f9cc 	bl	8004d94 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80049fc:	f000 f954 	bl	8004ca8 <MX_TIM3_Init>
  MX_WWDG_Init();
 8004a00:	f000 f9f2 	bl	8004de8 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET)
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <main+0x58>)
 8004a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <main+0x40>
  {
	  // Clear reset flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 8004a10:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <main+0x58>)
 8004a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a14:	4a07      	ldr	r2, [pc, #28]	; (8004a34 <main+0x58>)
 8004a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a1a:	6753      	str	r3, [r2, #116]	; 0x74
  }

  HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4906      	ldr	r1, [pc, #24]	; (8004a38 <main+0x5c>)
 8004a20:	4806      	ldr	r0, [pc, #24]	; (8004a3c <main+0x60>)
 8004a22:	f7ff f89f 	bl	8003b64 <HAL_UART_Receive_DMA>
  uart_print(HELLO_WORLD);
 8004a26:	4806      	ldr	r0, [pc, #24]	; (8004a40 <main+0x64>)
 8004a28:	f000 fbce 	bl	80051c8 <uart_print>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  kickDog();
 8004a2c:	f000 fbec 	bl	8005208 <kickDog>
 8004a30:	e7fc      	b.n	8004a2c <main+0x50>
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800
 8004a38:	20000302 	.word	0x20000302
 8004a3c:	200003f8 	.word	0x200003f8
 8004a40:	080062d4 	.word	0x080062d4

08004a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b09a      	sub	sp, #104	; 0x68
 8004a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a4e:	2230      	movs	r2, #48	; 0x30
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fed9 	bl	800580a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a68:	f107 030c 	add.w	r3, r7, #12
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	605a      	str	r2, [r3, #4]
 8004a72:	609a      	str	r2, [r3, #8]
 8004a74:	60da      	str	r2, [r3, #12]
 8004a76:	611a      	str	r2, [r3, #16]
 8004a78:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <SystemClock_Config+0x100>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4a30      	ldr	r2, [pc, #192]	; (8004b44 <SystemClock_Config+0x100>)
 8004a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <SystemClock_Config+0x100>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <SystemClock_Config+0x104>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <SystemClock_Config+0x104>)
 8004aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <SystemClock_Config+0x104>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004ab2:	2306      	movs	r3, #6
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004aba:	2301      	movs	r3, #1
 8004abc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004abe:	2310      	movs	r3, #16
 8004ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004aca:	2310      	movs	r3, #16
 8004acc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004ace:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ad8:	2304      	movs	r3, #4
 8004ada:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004adc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fc feb7 	bl	8001854 <HAL_RCC_OscConfig>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004aec:	f000 fbb0 	bl	8005250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004af0:	230f      	movs	r3, #15
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004af4:	2302      	movs	r3, #2
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b02:	2300      	movs	r3, #0
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fd f911 	bl	8001d34 <HAL_RCC_ClockConfig>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004b18:	f000 fb9a 	bl	8005250 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b24:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b26:	f107 030c 	add.w	r3, r7, #12
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fd fb26 	bl	800217c <HAL_RCCEx_PeriphCLKConfig>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8004b36:	f000 fb8b 	bl	8005250 <Error_Handler>
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	3768      	adds	r7, #104	; 0x68
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40007000 	.word	0x40007000

08004b4c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <MX_CRC_Init+0x20>)
 8004b52:	4a07      	ldr	r2, [pc, #28]	; (8004b70 <MX_CRC_Init+0x24>)
 8004b54:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004b56:	4805      	ldr	r0, [pc, #20]	; (8004b6c <MX_CRC_Init+0x20>)
 8004b58:	f7fb fe60 	bl	800081c <HAL_CRC_Init>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8004b62:	f000 fb75 	bl	8005250 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004b66:	bf00      	nop
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	2000031c 	.word	0x2000031c
 8004b70:	40023000 	.word	0x40023000

08004b74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b090      	sub	sp, #64	; 0x40
 8004b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	609a      	str	r2, [r3, #8]
 8004b86:	60da      	str	r2, [r3, #12]
 8004b88:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004b8e:	463b      	mov	r3, r7
 8004b90:	2228      	movs	r2, #40	; 0x28
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fe38 	bl	800580a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004b9a:	4b41      	ldr	r3, [pc, #260]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004b9c:	4a41      	ldr	r2, [pc, #260]	; (8004ca4 <MX_RTC_Init+0x130>)
 8004b9e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004ba0:	4b3f      	ldr	r3, [pc, #252]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004ba8:	227f      	movs	r2, #127	; 0x7f
 8004baa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004bac:	4b3c      	ldr	r3, [pc, #240]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004bae:	22ff      	movs	r2, #255	; 0xff
 8004bb0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004bb8:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004bbe:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004bc4:	4836      	ldr	r0, [pc, #216]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004bc6:	f7fd fbc9 	bl	800235c <HAL_RTC_Init>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8004bd0:	f000 fb3e 	bl	8005250 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004bea:	2300      	movs	r3, #0
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	482a      	ldr	r0, [pc, #168]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004bf8:	f7fd fc41 	bl	800247e <HAL_RTC_SetTime>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8004c02:	f000 fb25 	bl	8005250 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c22:	2200      	movs	r2, #0
 8004c24:	4619      	mov	r1, r3
 8004c26:	481e      	ldr	r0, [pc, #120]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004c28:	f7fd fce6 	bl	80025f8 <HAL_RTC_SetDate>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8004c32:	f000 fb0d 	bl	8005250 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8004c4e:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8004c52:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004c68:	463b      	mov	r3, r7
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	480c      	ldr	r0, [pc, #48]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004c70:	f7fd fd6a 	bl	8002748 <HAL_RTC_SetAlarm_IT>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8004c7a:	f000 fae9 	bl	8005250 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
    if (HAL_RTCEx_SetSmoothCalib(
 8004c7e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004c82:	2200      	movs	r2, #0
 8004c84:	2100      	movs	r1, #0
 8004c86:	4806      	ldr	r0, [pc, #24]	; (8004ca0 <MX_RTC_Init+0x12c>)
 8004c88:	f7fd ff4e 	bl	8002b28 <HAL_RTCEx_SetSmoothCalib>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <MX_RTC_Init+0x122>
		&hrtc,
		RTC_SMOOTHCALIB_PERIOD_32SEC,
		RTC_SMOOTHCALIB_PLUSPULSES_RESET,
		0x1FFU) != HAL_OK) {
    		Error_Handler();
 8004c92:	f000 fadd 	bl	8005250 <Error_Handler>
      	}
  /* USER CODE END RTC_Init 2 */

}
 8004c96:	bf00      	nop
 8004c98:	3740      	adds	r7, #64	; 0x40
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200003c4 	.word	0x200003c4
 8004ca4:	40002800 	.word	0x40002800

08004ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	609a      	str	r2, [r3, #8]
 8004cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cbc:	f107 0320 	add.w	r3, r7, #32
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cc6:	1d3b      	adds	r3, r7, #4
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	611a      	str	r2, [r3, #16]
 8004cd4:	615a      	str	r2, [r3, #20]
 8004cd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004cd8:	4b2c      	ldr	r3, [pc, #176]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004cda:	4a2d      	ldr	r2, [pc, #180]	; (8004d90 <MX_TIM3_Init+0xe8>)
 8004cdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8004cde:	4b2b      	ldr	r3, [pc, #172]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004ce0:	2253      	movs	r2, #83	; 0x53
 8004ce2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ce4:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8004cea:	4b28      	ldr	r3, [pc, #160]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004cec:	2263      	movs	r2, #99	; 0x63
 8004cee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cf0:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cf6:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004cfc:	4823      	ldr	r0, [pc, #140]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004cfe:	f7fd ff78 	bl	8002bf2 <HAL_TIM_Base_Init>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8004d08:	f000 faa2 	bl	8005250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d16:	4619      	mov	r1, r3
 8004d18:	481c      	ldr	r0, [pc, #112]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004d1a:	f7fe fa3b 	bl	8003194 <HAL_TIM_ConfigClockSource>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8004d24:	f000 fa94 	bl	8005250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d28:	4818      	ldr	r0, [pc, #96]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004d2a:	f7fd ffb1 	bl	8002c90 <HAL_TIM_PWM_Init>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004d34:	f000 fa8c 	bl	8005250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d40:	f107 0320 	add.w	r3, r7, #32
 8004d44:	4619      	mov	r1, r3
 8004d46:	4811      	ldr	r0, [pc, #68]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004d48:	f7fe fdd0 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8004d52:	f000 fa7d 	bl	8005250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d56:	2360      	movs	r3, #96	; 0x60
 8004d58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4807      	ldr	r0, [pc, #28]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004d6e:	f7fe f94b 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8004d78:	f000 fa6a 	bl	8005250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004d7c:	4803      	ldr	r0, [pc, #12]	; (8004d8c <MX_TIM3_Init+0xe4>)
 8004d7e:	f000 faf7 	bl	8005370 <HAL_TIM_MspPostInit>

}
 8004d82:	bf00      	nop
 8004d84:	3738      	adds	r7, #56	; 0x38
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000324 	.word	0x20000324
 8004d90:	40000400 	.word	0x40000400

08004d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <MX_USART2_UART_Init+0x4c>)
 8004d9a:	4a12      	ldr	r2, [pc, #72]	; (8004de4 <MX_USART2_UART_Init+0x50>)
 8004d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <MX_USART2_UART_Init+0x4c>)
 8004da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004da6:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <MX_USART2_UART_Init+0x4c>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <MX_USART2_UART_Init+0x4c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <MX_USART2_UART_Init+0x4c>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <MX_USART2_UART_Init+0x4c>)
 8004dba:	220c      	movs	r2, #12
 8004dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <MX_USART2_UART_Init+0x4c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <MX_USART2_UART_Init+0x4c>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004dca:	4805      	ldr	r0, [pc, #20]	; (8004de0 <MX_USART2_UART_Init+0x4c>)
 8004dcc:	f7fe fe10 	bl	80039f0 <HAL_UART_Init>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004dd6:	f000 fa3b 	bl	8005250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200003f8 	.word	0x200003f8
 8004de4:	40004400 	.word	0x40004400

08004de8 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  }*/
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <MX_DMA_Init+0x4c>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	4a0f      	ldr	r2, [pc, #60]	; (8004e44 <MX_DMA_Init+0x4c>)
 8004e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <MX_DMA_Init+0x4c>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e16:	607b      	str	r3, [r7, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	2010      	movs	r0, #16
 8004e20:	f7fb fcd2 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004e24:	2010      	movs	r0, #16
 8004e26:	f7fb fceb 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	2011      	movs	r0, #17
 8004e30:	f7fb fcca 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004e34:	2011      	movs	r0, #17
 8004e36:	f7fb fce3 	bl	8000800 <HAL_NVIC_EnableIRQ>

}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800

08004e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e4e:	f107 030c 	add.w	r3, r7, #12
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	609a      	str	r2, [r3, #8]
 8004e5a:	60da      	str	r2, [r3, #12]
 8004e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <MX_GPIO_Init+0x7c>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <MX_GPIO_Init+0x7c>)
 8004e68:	f043 0304 	orr.w	r3, r3, #4
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <MX_GPIO_Init+0x7c>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <MX_GPIO_Init+0x7c>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <MX_GPIO_Init+0x7c>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <MX_GPIO_Init+0x7c>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004e96:	2200      	movs	r2, #0
 8004e98:	2120      	movs	r1, #32
 8004e9a:	480b      	ldr	r0, [pc, #44]	; (8004ec8 <MX_GPIO_Init+0x80>)
 8004e9c:	f7fc fcc0 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb0:	f107 030c 	add.w	r3, r7, #12
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4804      	ldr	r0, [pc, #16]	; (8004ec8 <MX_GPIO_Init+0x80>)
 8004eb8:	f7fc fb30 	bl	800151c <HAL_GPIO_Init>

}
 8004ebc:	bf00      	nop
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40020000 	.word	0x40020000

08004ecc <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
  //HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, 20);
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	if (s_buffer._rx_single_char != '\n')
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004eea:	7e9b      	ldrb	r3, [r3, #26]
 8004eec:	2b0a      	cmp	r3, #10
 8004eee:	d011      	beq.n	8004f14 <HAL_UART_RxCpltCallback+0x34>
	{
		if(s_buffer._rx_index < BUFFER_SIZE)
 8004ef0:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004ef2:	7e5b      	ldrb	r3, [r3, #25]
 8004ef4:	2b18      	cmp	r3, #24
 8004ef6:	d822      	bhi.n	8004f3e <HAL_UART_RxCpltCallback+0x5e>
		{
			s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004efa:	7e5b      	ldrb	r3, [r3, #25]
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f00:	7e99      	ldrb	r1, [r3, #26]
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f04:	5499      	strb	r1, [r3, r2]
			s_buffer._rx_index++;
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f08:	7e5b      	ldrb	r3, [r3, #25]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f10:	765a      	strb	r2, [r3, #25]
 8004f12:	e014      	b.n	8004f3e <HAL_UART_RxCpltCallback+0x5e>
		}
	}
	else
	{
		s_buffer._p_rx_buffer[s_buffer._rx_index] = s_buffer._rx_single_char;
 8004f14:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f16:	7e5b      	ldrb	r3, [r3, #25]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f1c:	7e99      	ldrb	r1, [r3, #26]
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f20:	5499      	strb	r1, [r3, r2]
		s_buffer._rx_index++;
 8004f22:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f24:	7e5b      	ldrb	r3, [r3, #25]
 8004f26:	3301      	adds	r3, #1
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f2c:	765a      	strb	r2, [r3, #25]
		whichCommand();
 8004f2e:	f000 f815 	bl	8004f5c <whichCommand>
		bufferInit(&s_buffer);
 8004f32:	4807      	ldr	r0, [pc, #28]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f34:	f7ff fd3a 	bl	80049ac <bufferInit>
		s_buffer._rx_index = 0;
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <HAL_UART_RxCpltCallback+0x70>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	765a      	strb	r2, [r3, #25]
	}

	//HAL_UART_Receive_IT(&huart2, &s_buffer._rx_single_char, 1);
	HAL_UART_Receive_DMA(&huart2, &s_buffer._rx_single_char, 1);
 8004f3e:	2201      	movs	r2, #1
 8004f40:	4904      	ldr	r1, [pc, #16]	; (8004f54 <HAL_UART_RxCpltCallback+0x74>)
 8004f42:	4805      	ldr	r0, [pc, #20]	; (8004f58 <HAL_UART_RxCpltCallback+0x78>)
 8004f44:	f7fe fe0e 	bl	8003b64 <HAL_UART_Receive_DMA>
}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	200002e8 	.word	0x200002e8
 8004f54:	20000302 	.word	0x20000302
 8004f58:	200003f8 	.word	0x200003f8

08004f5c <whichCommand>:

void whichCommand (void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
	char* token = strtok((char*)s_buffer._p_rx_buffer, " ");
 8004f62:	491b      	ldr	r1, [pc, #108]	; (8004fd0 <whichCommand+0x74>)
 8004f64:	481b      	ldr	r0, [pc, #108]	; (8004fd4 <whichCommand+0x78>)
 8004f66:	f000 fc8b 	bl	8005880 <strtok>
 8004f6a:	6038      	str	r0, [r7, #0]

	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	71fb      	strb	r3, [r7, #7]
 8004f70:	e027      	b.n	8004fc2 <whichCommand+0x66>
	{
		if (strncmp(token, commands[i]._name, commands[i]._size)==0)
 8004f72:	79fa      	ldrb	r2, [r7, #7]
 8004f74:	4918      	ldr	r1, [pc, #96]	; (8004fd8 <whichCommand+0x7c>)
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	79fa      	ldrb	r2, [r7, #7]
 8004f84:	4914      	ldr	r1, [pc, #80]	; (8004fd8 <whichCommand+0x7c>)
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3304      	adds	r3, #4
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	4601      	mov	r1, r0
 8004f98:	6838      	ldr	r0, [r7, #0]
 8004f9a:	f000 fc5f 	bl	800585c <strncmp>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <whichCommand+0x60>
		{
			commands[i].func_ptr(token);
 8004fa4:	79fa      	ldrb	r2, [r7, #7]
 8004fa6:	490c      	ldr	r1, [pc, #48]	; (8004fd8 <whichCommand+0x7c>)
 8004fa8:	4613      	mov	r3, r2
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6838      	ldr	r0, [r7, #0]
 8004fb8:	4798      	blx	r3
			return;
 8004fba:	e005      	b.n	8004fc8 <whichCommand+0x6c>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	71fb      	strb	r3, [r7, #7]
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	2b07      	cmp	r3, #7
 8004fc6:	d9d4      	bls.n	8004f72 <whichCommand+0x16>
		}
	}
}
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	080062e4 	.word	0x080062e4
 8004fd4:	200002e8 	.word	0x200002e8
 8004fd8:	20000008 	.word	0x20000008

08004fdc <ping_callBack>:

void ping_callBack(char* token)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	uart_print(token);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f8ef 	bl	80051c8 <uart_print>
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <version_callback>:

void version_callback(char* token)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uart_print(VERSION);
 8004ffc:	4803      	ldr	r0, [pc, #12]	; (800500c <version_callback+0x18>)
 8004ffe:	f000 f8e3 	bl	80051c8 <uart_print>
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	080062e8 	.word	0x080062e8

08005010 <pwm_start_callback>:

void pwm_start_callback(char* token)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005018:	2100      	movs	r1, #0
 800501a:	4805      	ldr	r0, [pc, #20]	; (8005030 <pwm_start_callback+0x20>)
 800501c:	f7fd fe6e 	bl	8002cfc <HAL_TIM_PWM_Start>
	uart_print(OK);
 8005020:	4804      	ldr	r0, [pc, #16]	; (8005034 <pwm_start_callback+0x24>)
 8005022:	f000 f8d1 	bl	80051c8 <uart_print>
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000324 	.word	0x20000324
 8005034:	080062f0 	.word	0x080062f0

08005038 <pwm_stop_callback>:

void pwm_stop_callback(char* token)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8005040:	2100      	movs	r1, #0
 8005042:	4805      	ldr	r0, [pc, #20]	; (8005058 <pwm_stop_callback+0x20>)
 8005044:	f7fd fe8c 	bl	8002d60 <HAL_TIM_PWM_Stop>
	uart_print(OK);
 8005048:	4804      	ldr	r0, [pc, #16]	; (800505c <pwm_stop_callback+0x24>)
 800504a:	f000 f8bd 	bl	80051c8 <uart_print>
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000324 	.word	0x20000324
 800505c:	080062f0 	.word	0x080062f0

08005060 <pwm_dc_callback>:

void pwm_dc_callback(char* token)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8005068:	4911      	ldr	r1, [pc, #68]	; (80050b0 <pwm_dc_callback+0x50>)
 800506a:	2000      	movs	r0, #0
 800506c:	f000 fc08 	bl	8005880 <strtok>
 8005070:	6078      	str	r0, [r7, #4]
	if(strlen(token) <= 0)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d015      	beq.n	80050a6 <pwm_dc_callback+0x46>
	{
		return;
	}
	int32_t dc = atoi(token);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fb8b 	bl	8005796 <atoi>
 8005080:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b64      	cmp	r3, #100	; 0x64
 8005086:	dd01      	ble.n	800508c <pwm_dc_callback+0x2c>
 8005088:	2364      	movs	r3, #100	; 0x64
 800508a:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	da01      	bge.n	8005096 <pwm_dc_callback+0x36>
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <pwm_dc_callback+0x54>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	635a      	str	r2, [r3, #52]	; 0x34
	uart_print(OK);
 800509e:	4806      	ldr	r0, [pc, #24]	; (80050b8 <pwm_dc_callback+0x58>)
 80050a0:	f000 f892 	bl	80051c8 <uart_print>
 80050a4:	e000      	b.n	80050a8 <pwm_dc_callback+0x48>
		return;
 80050a6:	bf00      	nop
}
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	080062e4 	.word	0x080062e4
 80050b4:	20000324 	.word	0x20000324
 80050b8:	080062f0 	.word	0x080062f0

080050bc <crc_whole_flash_calc_callback>:

void crc_whole_flash_calc_callback(char* token)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
		crcFlashResult = HAL_CRC_Accumulate(&hcrc, flashDataBuffer, sector_0_Size);
		offsetAddr += 0x4000;
	}*/

	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 80050c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050c8:	617b      	str	r3, [r7, #20]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 80050ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050ce:	613b      	str	r3, [r7, #16]
	//FeedDog(1);
	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	6939      	ldr	r1, [r7, #16]
 80050d4:	4807      	ldr	r0, [pc, #28]	; (80050f4 <crc_whole_flash_calc_callback+0x38>)
 80050d6:	f7fb fbbd 	bl	8000854 <HAL_CRC_Calculate>
 80050da:	60f8      	str	r0, [r7, #12]
	//FeedDog(1);
	sprintf((char*)s_buffer._p_tx_buffer, "%x\n", (unsigned int)crcFlashResult);
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4906      	ldr	r1, [pc, #24]	; (80050f8 <crc_whole_flash_calc_callback+0x3c>)
 80050e0:	4806      	ldr	r0, [pc, #24]	; (80050fc <crc_whole_flash_calc_callback+0x40>)
 80050e2:	f000 fb9b 	bl	800581c <siprintf>
	uart_print((char*)s_buffer._p_tx_buffer);
 80050e6:	4805      	ldr	r0, [pc, #20]	; (80050fc <crc_whole_flash_calc_callback+0x40>)
 80050e8:	f000 f86e 	bl	80051c8 <uart_print>
}
 80050ec:	bf00      	nop
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	2000031c 	.word	0x2000031c
 80050f8:	080062f4 	.word	0x080062f4
 80050fc:	20000303 	.word	0x20000303

08005100 <wwdg_test_callback>:

void wwdg_test_callback(char* token)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	uart_print(OK);
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <wwdg_test_callback+0x10>)
 800510a:	f000 f85d 	bl	80051c8 <uart_print>
	while(1);
 800510e:	e7fe      	b.n	800510e <wwdg_test_callback+0xe>
 8005110:	080062f0 	.word	0x080062f0

08005114 <flash_lock_callback>:
}

void flash_lock_callback(char* token)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 800511c:	f107 030c 	add.w	r3, r7, #12
 8005120:	4618      	mov	r0, r3
 8005122:	f7fc f8e1 	bl	80012e8 <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0) {
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2baa      	cmp	r3, #170	; 0xaa
 800512a:	d136      	bne.n	800519a <flash_lock_callback+0x86>
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 800512c:	2355      	movs	r3, #85	; 0x55
 800512e:	61fb      	str	r3, [r7, #28]
		obConfig.OptionType = OPTIONBYTE_RDP;
 8005130:	2302      	movs	r3, #2
 8005132:	60fb      	str	r3, [r7, #12]

		if (HAL_FLASH_Unlock() != HAL_OK)
 8005134:	f7fb ff52 	bl	8000fdc <HAL_FLASH_Unlock>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <flash_lock_callback+0x2e>
		{
			Error_Handler();
 800513e:	f000 f887 	bl	8005250 <Error_Handler>
		}
		/* Clear All pending flags */
		__HAL_FLASH_CLEAR_FLAG (FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <flash_lock_callback+0x90>)
 8005144:	22f1      	movs	r2, #241	; 0xf1
 8005146:	60da      	str	r2, [r3, #12]
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 8005148:	f7fb ff7a 	bl	8001040 <HAL_FLASH_OB_Unlock>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <flash_lock_callback+0x42>
		{
			Error_Handler();
 8005152:	f000 f87d 	bl	8005250 <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 8005156:	f107 030c 	add.w	r3, r7, #12
 800515a:	4618      	mov	r0, r3
 800515c:	f7fc f856 	bl	800120c <HAL_FLASHEx_OBProgram>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <flash_lock_callback+0x56>
		{
			Error_Handler();
 8005166:	f000 f873 	bl	8005250 <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 800516a:	f7fb ff95 	bl	8001098 <HAL_FLASH_OB_Launch>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <flash_lock_callback+0x64>
		{
			Error_Handler();
 8005174:	f000 f86c 	bl	8005250 <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 8005178:	f7fb ff7e 	bl	8001078 <HAL_FLASH_OB_Lock>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <flash_lock_callback+0x72>
		{
			Error_Handler();
 8005182:	f000 f865 	bl	8005250 <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 8005186:	f7fb ff4b 	bl	8001020 <HAL_FLASH_Lock>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <flash_lock_callback+0x80>
		{
			Error_Handler();
 8005190:	f000 f85e 	bl	8005250 <Error_Handler>
		}
		uart_print(OK);
 8005194:	4804      	ldr	r0, [pc, #16]	; (80051a8 <flash_lock_callback+0x94>)
 8005196:	f000 f817 	bl	80051c8 <uart_print>
	    if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
	        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
	}*/


}
 800519a:	bf00      	nop
 800519c:	3728      	adds	r7, #40	; 0x28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40023c00 	.word	0x40023c00
 80051a8:	080062f0 	.word	0x080062f0

080051ac <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  uart_print(TICK);
 80051b4:	4803      	ldr	r0, [pc, #12]	; (80051c4 <HAL_RTC_AlarmAEventCallback+0x18>)
 80051b6:	f000 f807 	bl	80051c8 <uart_print>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	080062f8 	.word	0x080062f8

080051c8 <uart_print>:

void uart_print(char* token)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	memcpy((char*)s_buffer._p_tx_buffer, token, strlen(token));
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7fb f805 	bl	80001e0 <strlen>
 80051d6:	4603      	mov	r3, r0
 80051d8:	461a      	mov	r2, r3
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4808      	ldr	r0, [pc, #32]	; (8005200 <uart_print+0x38>)
 80051de:	f000 fb09 	bl	80057f4 <memcpy>
#ifndef UART_TX_DMA
  HAL_UART_Transmit(&huart2, s_buffer._p_tx_buffer, strlen(token), 10);
#else
  HAL_UART_Transmit_DMA(&huart2, s_buffer._p_tx_buffer, strlen(token));
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fa fffc 	bl	80001e0 <strlen>
 80051e8:	4603      	mov	r3, r0
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	4904      	ldr	r1, [pc, #16]	; (8005200 <uart_print+0x38>)
 80051f0:	4804      	ldr	r0, [pc, #16]	; (8005204 <uart_print+0x3c>)
 80051f2:	f7fe fc4b 	bl	8003a8c <HAL_UART_Transmit_DMA>
#endif
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000303 	.word	0x20000303
 8005204:	200003f8 	.word	0x200003f8

08005208 <kickDog>:

void kickDog(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
	/* Refresh WWDG: update counter value to 127, the refresh window is:
		  	 ~780 * (127-80) = 36.6ms < refresh window < ~780 * 64 = 49.9ms */
	HAL_Delay(40);
 800520c:	2028      	movs	r0, #40	; 0x28
 800520e:	f7fb fa01 	bl	8000614 <HAL_Delay>
	if(HAL_WWDG_Refresh(&hwwdg) != HAL_OK)
 8005212:	4805      	ldr	r0, [pc, #20]	; (8005228 <kickDog+0x20>)
 8005214:	f7ff fbba 	bl	800498c <HAL_WWDG_Refresh>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <kickDog+0x1a>
	{
		Error_Handler();
 800521e:	f000 f817 	bl	8005250 <Error_Handler>
	}
}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	200003e4 	.word	0x200003e4

0800522c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a04      	ldr	r2, [pc, #16]	; (800524c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d101      	bne.n	8005242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800523e:	f7fb f9c9 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40010000 	.word	0x40010000

08005250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uart_print("Error");
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <Error_Handler+0xc>)
 8005256:	f7ff ffb7 	bl	80051c8 <uart_print>
	while(1);
 800525a:	e7fe      	b.n	800525a <Error_Handler+0xa>
 800525c:	08006300 	.word	0x08006300

08005260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <HAL_MspInit+0x4c>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	4a0f      	ldr	r2, [pc, #60]	; (80052ac <HAL_MspInit+0x4c>)
 8005270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005274:	6453      	str	r3, [r2, #68]	; 0x44
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <HAL_MspInit+0x4c>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527e:	607b      	str	r3, [r7, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_MspInit+0x4c>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	4a08      	ldr	r2, [pc, #32]	; (80052ac <HAL_MspInit+0x4c>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005290:	6413      	str	r3, [r2, #64]	; 0x40
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_MspInit+0x4c>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800529e:	2007      	movs	r0, #7
 80052a0:	f7fb fa87 	bl	80007b2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40023800 	.word	0x40023800

080052b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a0b      	ldr	r2, [pc, #44]	; (80052ec <HAL_CRC_MspInit+0x3c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10d      	bne.n	80052de <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <HAL_CRC_MspInit+0x40>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <HAL_CRC_MspInit+0x40>)
 80052cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052d0:	6313      	str	r3, [r2, #48]	; 0x30
 80052d2:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <HAL_CRC_MspInit+0x40>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40023000 	.word	0x40023000
 80052f0:	40023800 	.word	0x40023800

080052f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a08      	ldr	r2, [pc, #32]	; (8005324 <HAL_RTC_MspInit+0x30>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d10a      	bne.n	800531c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005306:	4b08      	ldr	r3, [pc, #32]	; (8005328 <HAL_RTC_MspInit+0x34>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800530c:	2200      	movs	r2, #0
 800530e:	2100      	movs	r1, #0
 8005310:	2029      	movs	r0, #41	; 0x29
 8005312:	f7fb fa59 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005316:	2029      	movs	r0, #41	; 0x29
 8005318:	f7fb fa72 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40002800 	.word	0x40002800
 8005328:	42470e3c 	.word	0x42470e3c

0800532c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a0b      	ldr	r2, [pc, #44]	; (8005368 <HAL_TIM_Base_MspInit+0x3c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10d      	bne.n	800535a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	4b0a      	ldr	r3, [pc, #40]	; (800536c <HAL_TIM_Base_MspInit+0x40>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	4a09      	ldr	r2, [pc, #36]	; (800536c <HAL_TIM_Base_MspInit+0x40>)
 8005348:	f043 0302 	orr.w	r3, r3, #2
 800534c:	6413      	str	r3, [r2, #64]	; 0x40
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <HAL_TIM_Base_MspInit+0x40>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40000400 	.word	0x40000400
 800536c:	40023800 	.word	0x40023800

08005370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005378:	f107 030c 	add.w	r3, r7, #12
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <HAL_TIM_MspPostInit+0x68>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d11d      	bne.n	80053ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	4b11      	ldr	r3, [pc, #68]	; (80053dc <HAL_TIM_MspPostInit+0x6c>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	4a10      	ldr	r2, [pc, #64]	; (80053dc <HAL_TIM_MspPostInit+0x6c>)
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	6313      	str	r3, [r2, #48]	; 0x30
 80053a2:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <HAL_TIM_MspPostInit+0x6c>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80053ae:	2340      	movs	r3, #64	; 0x40
 80053b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b2:	2302      	movs	r3, #2
 80053b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053be:	2302      	movs	r3, #2
 80053c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c2:	f107 030c 	add.w	r3, r7, #12
 80053c6:	4619      	mov	r1, r3
 80053c8:	4805      	ldr	r0, [pc, #20]	; (80053e0 <HAL_TIM_MspPostInit+0x70>)
 80053ca:	f7fc f8a7 	bl	800151c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80053ce:	bf00      	nop
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40020000 	.word	0x40020000

080053e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a4b      	ldr	r2, [pc, #300]	; (8005530 <HAL_UART_MspInit+0x14c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f040 8090 	bne.w	8005528 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005408:	2300      	movs	r3, #0
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	4b49      	ldr	r3, [pc, #292]	; (8005534 <HAL_UART_MspInit+0x150>)
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	4a48      	ldr	r2, [pc, #288]	; (8005534 <HAL_UART_MspInit+0x150>)
 8005412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005416:	6413      	str	r3, [r2, #64]	; 0x40
 8005418:	4b46      	ldr	r3, [pc, #280]	; (8005534 <HAL_UART_MspInit+0x150>)
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	4b42      	ldr	r3, [pc, #264]	; (8005534 <HAL_UART_MspInit+0x150>)
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	4a41      	ldr	r2, [pc, #260]	; (8005534 <HAL_UART_MspInit+0x150>)
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	6313      	str	r3, [r2, #48]	; 0x30
 8005434:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_UART_MspInit+0x150>)
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005440:	230c      	movs	r3, #12
 8005442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005444:	2302      	movs	r3, #2
 8005446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800544c:	2303      	movs	r3, #3
 800544e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005450:	2307      	movs	r3, #7
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005454:	f107 0314 	add.w	r3, r7, #20
 8005458:	4619      	mov	r1, r3
 800545a:	4837      	ldr	r0, [pc, #220]	; (8005538 <HAL_UART_MspInit+0x154>)
 800545c:	f7fc f85e 	bl	800151c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005460:	4b36      	ldr	r3, [pc, #216]	; (800553c <HAL_UART_MspInit+0x158>)
 8005462:	4a37      	ldr	r2, [pc, #220]	; (8005540 <HAL_UART_MspInit+0x15c>)
 8005464:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005466:	4b35      	ldr	r3, [pc, #212]	; (800553c <HAL_UART_MspInit+0x158>)
 8005468:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800546c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800546e:	4b33      	ldr	r3, [pc, #204]	; (800553c <HAL_UART_MspInit+0x158>)
 8005470:	2200      	movs	r2, #0
 8005472:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005474:	4b31      	ldr	r3, [pc, #196]	; (800553c <HAL_UART_MspInit+0x158>)
 8005476:	2200      	movs	r2, #0
 8005478:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800547a:	4b30      	ldr	r3, [pc, #192]	; (800553c <HAL_UART_MspInit+0x158>)
 800547c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005480:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005482:	4b2e      	ldr	r3, [pc, #184]	; (800553c <HAL_UART_MspInit+0x158>)
 8005484:	2200      	movs	r2, #0
 8005486:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005488:	4b2c      	ldr	r3, [pc, #176]	; (800553c <HAL_UART_MspInit+0x158>)
 800548a:	2200      	movs	r2, #0
 800548c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800548e:	4b2b      	ldr	r3, [pc, #172]	; (800553c <HAL_UART_MspInit+0x158>)
 8005490:	2200      	movs	r2, #0
 8005492:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005494:	4b29      	ldr	r3, [pc, #164]	; (800553c <HAL_UART_MspInit+0x158>)
 8005496:	2200      	movs	r2, #0
 8005498:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800549a:	4b28      	ldr	r3, [pc, #160]	; (800553c <HAL_UART_MspInit+0x158>)
 800549c:	2200      	movs	r2, #0
 800549e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80054a0:	4826      	ldr	r0, [pc, #152]	; (800553c <HAL_UART_MspInit+0x158>)
 80054a2:	f7fb fa0b 	bl	80008bc <HAL_DMA_Init>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80054ac:	f7ff fed0 	bl	8005250 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a22      	ldr	r2, [pc, #136]	; (800553c <HAL_UART_MspInit+0x158>)
 80054b4:	635a      	str	r2, [r3, #52]	; 0x34
 80054b6:	4a21      	ldr	r2, [pc, #132]	; (800553c <HAL_UART_MspInit+0x158>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80054bc:	4b21      	ldr	r3, [pc, #132]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054be:	4a22      	ldr	r2, [pc, #136]	; (8005548 <HAL_UART_MspInit+0x164>)
 80054c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80054c2:	4b20      	ldr	r3, [pc, #128]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054cc:	2240      	movs	r2, #64	; 0x40
 80054ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054d0:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054d6:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054de:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054e4:	4b17      	ldr	r3, [pc, #92]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80054ea:	4b16      	ldr	r3, [pc, #88]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054f0:	4b14      	ldr	r3, [pc, #80]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80054fc:	4811      	ldr	r0, [pc, #68]	; (8005544 <HAL_UART_MspInit+0x160>)
 80054fe:	f7fb f9dd 	bl	80008bc <HAL_DMA_Init>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005508:	f7ff fea2 	bl	8005250 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0d      	ldr	r2, [pc, #52]	; (8005544 <HAL_UART_MspInit+0x160>)
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
 8005512:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <HAL_UART_MspInit+0x160>)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005518:	2200      	movs	r2, #0
 800551a:	2100      	movs	r1, #0
 800551c:	2026      	movs	r0, #38	; 0x26
 800551e:	f7fb f953 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005522:	2026      	movs	r0, #38	; 0x26
 8005524:	f7fb f96c 	bl	8000800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005528:	bf00      	nop
 800552a:	3728      	adds	r7, #40	; 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40004400 	.word	0x40004400
 8005534:	40023800 	.word	0x40023800
 8005538:	40020000 	.word	0x40020000
 800553c:	20000288 	.word	0x20000288
 8005540:	40026088 	.word	0x40026088
 8005544:	20000364 	.word	0x20000364
 8005548:	400260a0 	.word	0x400260a0

0800554c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	; 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800555c:	2200      	movs	r2, #0
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	2019      	movs	r0, #25
 8005562:	f7fb f931 	bl	80007c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005566:	2019      	movs	r0, #25
 8005568:	f7fb f94a 	bl	8000800 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <HAL_InitTick+0xa0>)
 8005572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005574:	4a1d      	ldr	r2, [pc, #116]	; (80055ec <HAL_InitTick+0xa0>)
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	6453      	str	r3, [r2, #68]	; 0x44
 800557c:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <HAL_InitTick+0xa0>)
 800557e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005588:	f107 0210 	add.w	r2, r7, #16
 800558c:	f107 0314 	add.w	r3, r7, #20
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f7fc fdc0 	bl	8002118 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005598:	f7fc fdaa 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 800559c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <HAL_InitTick+0xa4>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	0c9b      	lsrs	r3, r3, #18
 80055a8:	3b01      	subs	r3, #1
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80055ac:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <HAL_InitTick+0xa8>)
 80055ae:	4a12      	ldr	r2, [pc, #72]	; (80055f8 <HAL_InitTick+0xac>)
 80055b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <HAL_InitTick+0xa8>)
 80055b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80055ba:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <HAL_InitTick+0xa8>)
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <HAL_InitTick+0xa8>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <HAL_InitTick+0xa8>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80055cc:	4809      	ldr	r0, [pc, #36]	; (80055f4 <HAL_InitTick+0xa8>)
 80055ce:	f7fd fb10 	bl	8002bf2 <HAL_TIM_Base_Init>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80055d8:	4806      	ldr	r0, [pc, #24]	; (80055f4 <HAL_InitTick+0xa8>)
 80055da:	f7fd fb35 	bl	8002c48 <HAL_TIM_Base_Start_IT>
 80055de:	4603      	mov	r3, r0
 80055e0:	e000      	b.n	80055e4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3730      	adds	r7, #48	; 0x30
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40023800 	.word	0x40023800
 80055f0:	431bde83 	.word	0x431bde83
 80055f4:	20000438 	.word	0x20000438
 80055f8:	40010000 	.word	0x40010000

080055fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800560a:	b480      	push	{r7}
 800560c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800560e:	e7fe      	b.n	800560e <HardFault_Handler+0x4>

08005610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005614:	e7fe      	b.n	8005614 <MemManage_Handler+0x4>

08005616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005616:	b480      	push	{r7}
 8005618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800561a:	e7fe      	b.n	800561a <BusFault_Handler+0x4>

0800561c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005620:	e7fe      	b.n	8005620 <UsageFault_Handler+0x4>

08005622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005634:	bf00      	nop
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800563e:	b480      	push	{r7}
 8005640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005642:	bf00      	nop
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005660:	4802      	ldr	r0, [pc, #8]	; (800566c <DMA1_Stream5_IRQHandler+0x10>)
 8005662:	f7fb fa53 	bl	8000b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005666:	bf00      	nop
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000288 	.word	0x20000288

08005670 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005674:	4802      	ldr	r0, [pc, #8]	; (8005680 <DMA1_Stream6_IRQHandler+0x10>)
 8005676:	f7fb fa49 	bl	8000b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800567a:	bf00      	nop
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000364 	.word	0x20000364

08005684 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005688:	4802      	ldr	r0, [pc, #8]	; (8005694 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800568a:	f7fd fbb5 	bl	8002df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800568e:	bf00      	nop
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000438 	.word	0x20000438

08005698 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800569c:	4802      	ldr	r0, [pc, #8]	; (80056a8 <USART2_IRQHandler+0x10>)
 800569e:	f7fe fae1 	bl	8003c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80056a2:	bf00      	nop
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	200003f8 	.word	0x200003f8

080056ac <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80056b0:	4802      	ldr	r0, [pc, #8]	; (80056bc <RTC_Alarm_IRQHandler+0x10>)
 80056b2:	f7fd f981 	bl	80029b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80056b6:	bf00      	nop
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	200003c4 	.word	0x200003c4

080056c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80056c8:	4b11      	ldr	r3, [pc, #68]	; (8005710 <_sbrk+0x50>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <_sbrk+0x16>
		heap_end = &end;
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <_sbrk+0x50>)
 80056d2:	4a10      	ldr	r2, [pc, #64]	; (8005714 <_sbrk+0x54>)
 80056d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80056d6:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <_sbrk+0x50>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80056dc:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <_sbrk+0x50>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	466a      	mov	r2, sp
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d907      	bls.n	80056fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80056ea:	f000 f859 	bl	80057a0 <__errno>
 80056ee:	4602      	mov	r2, r0
 80056f0:	230c      	movs	r3, #12
 80056f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	e006      	b.n	8005708 <_sbrk+0x48>
	}

	heap_end += incr;
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <_sbrk+0x50>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	4a03      	ldr	r2, [pc, #12]	; (8005710 <_sbrk+0x50>)
 8005704:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005706:	68fb      	ldr	r3, [r7, #12]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000258 	.word	0x20000258
 8005714:	20000480 	.word	0x20000480

08005718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800571c:	4b08      	ldr	r3, [pc, #32]	; (8005740 <SystemInit+0x28>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	4a07      	ldr	r2, [pc, #28]	; (8005740 <SystemInit+0x28>)
 8005724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <SystemInit+0x28>)
 800572e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005732:	609a      	str	r2, [r3, #8]
#endif
}
 8005734:	bf00      	nop
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000ed00 	.word	0xe000ed00

08005744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800577c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005748:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800574a:	e003      	b.n	8005754 <LoopCopyDataInit>

0800574c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800574e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005750:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005752:	3104      	adds	r1, #4

08005754 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005754:	480b      	ldr	r0, [pc, #44]	; (8005784 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005758:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800575a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800575c:	d3f6      	bcc.n	800574c <CopyDataInit>
  ldr  r2, =_sbss
 800575e:	4a0b      	ldr	r2, [pc, #44]	; (800578c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005760:	e002      	b.n	8005768 <LoopFillZerobss>

08005762 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005762:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005764:	f842 3b04 	str.w	r3, [r2], #4

08005768 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005768:	4b09      	ldr	r3, [pc, #36]	; (8005790 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800576a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800576c:	d3f9      	bcc.n	8005762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800576e:	f7ff ffd3 	bl	8005718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005772:	f000 f81b 	bl	80057ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005776:	f7ff f931 	bl	80049dc <main>
  bx  lr    
 800577a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800577c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005780:	08006478 	.word	0x08006478
  ldr  r0, =_sdata
 8005784:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005788:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 800578c:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 8005790:	2000047c 	.word	0x2000047c

08005794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005794:	e7fe      	b.n	8005794 <ADC_IRQHandler>

08005796 <atoi>:
 8005796:	220a      	movs	r2, #10
 8005798:	2100      	movs	r1, #0
 800579a:	f000 b941 	b.w	8005a20 <strtol>
	...

080057a0 <__errno>:
 80057a0:	4b01      	ldr	r3, [pc, #4]	; (80057a8 <__errno+0x8>)
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	2000006c 	.word	0x2000006c

080057ac <__libc_init_array>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4e0d      	ldr	r6, [pc, #52]	; (80057e4 <__libc_init_array+0x38>)
 80057b0:	4c0d      	ldr	r4, [pc, #52]	; (80057e8 <__libc_init_array+0x3c>)
 80057b2:	1ba4      	subs	r4, r4, r6
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	2500      	movs	r5, #0
 80057b8:	42a5      	cmp	r5, r4
 80057ba:	d109      	bne.n	80057d0 <__libc_init_array+0x24>
 80057bc:	4e0b      	ldr	r6, [pc, #44]	; (80057ec <__libc_init_array+0x40>)
 80057be:	4c0c      	ldr	r4, [pc, #48]	; (80057f0 <__libc_init_array+0x44>)
 80057c0:	f000 fd4a 	bl	8006258 <_init>
 80057c4:	1ba4      	subs	r4, r4, r6
 80057c6:	10a4      	asrs	r4, r4, #2
 80057c8:	2500      	movs	r5, #0
 80057ca:	42a5      	cmp	r5, r4
 80057cc:	d105      	bne.n	80057da <__libc_init_array+0x2e>
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057d4:	4798      	blx	r3
 80057d6:	3501      	adds	r5, #1
 80057d8:	e7ee      	b.n	80057b8 <__libc_init_array+0xc>
 80057da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057de:	4798      	blx	r3
 80057e0:	3501      	adds	r5, #1
 80057e2:	e7f2      	b.n	80057ca <__libc_init_array+0x1e>
 80057e4:	08006470 	.word	0x08006470
 80057e8:	08006470 	.word	0x08006470
 80057ec:	08006470 	.word	0x08006470
 80057f0:	08006474 	.word	0x08006474

080057f4 <memcpy>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	1e43      	subs	r3, r0, #1
 80057f8:	440a      	add	r2, r1
 80057fa:	4291      	cmp	r1, r2
 80057fc:	d100      	bne.n	8005800 <memcpy+0xc>
 80057fe:	bd10      	pop	{r4, pc}
 8005800:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005808:	e7f7      	b.n	80057fa <memcpy+0x6>

0800580a <memset>:
 800580a:	4402      	add	r2, r0
 800580c:	4603      	mov	r3, r0
 800580e:	4293      	cmp	r3, r2
 8005810:	d100      	bne.n	8005814 <memset+0xa>
 8005812:	4770      	bx	lr
 8005814:	f803 1b01 	strb.w	r1, [r3], #1
 8005818:	e7f9      	b.n	800580e <memset+0x4>
	...

0800581c <siprintf>:
 800581c:	b40e      	push	{r1, r2, r3}
 800581e:	b500      	push	{lr}
 8005820:	b09c      	sub	sp, #112	; 0x70
 8005822:	ab1d      	add	r3, sp, #116	; 0x74
 8005824:	9002      	str	r0, [sp, #8]
 8005826:	9006      	str	r0, [sp, #24]
 8005828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800582c:	4809      	ldr	r0, [pc, #36]	; (8005854 <siprintf+0x38>)
 800582e:	9107      	str	r1, [sp, #28]
 8005830:	9104      	str	r1, [sp, #16]
 8005832:	4909      	ldr	r1, [pc, #36]	; (8005858 <siprintf+0x3c>)
 8005834:	f853 2b04 	ldr.w	r2, [r3], #4
 8005838:	9105      	str	r1, [sp, #20]
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	a902      	add	r1, sp, #8
 8005840:	f000 fa24 	bl	8005c8c <_svfiprintf_r>
 8005844:	9b02      	ldr	r3, [sp, #8]
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	b01c      	add	sp, #112	; 0x70
 800584c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005850:	b003      	add	sp, #12
 8005852:	4770      	bx	lr
 8005854:	2000006c 	.word	0x2000006c
 8005858:	ffff0208 	.word	0xffff0208

0800585c <strncmp>:
 800585c:	b510      	push	{r4, lr}
 800585e:	b16a      	cbz	r2, 800587c <strncmp+0x20>
 8005860:	3901      	subs	r1, #1
 8005862:	1884      	adds	r4, r0, r2
 8005864:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005868:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800586c:	4293      	cmp	r3, r2
 800586e:	d103      	bne.n	8005878 <strncmp+0x1c>
 8005870:	42a0      	cmp	r0, r4
 8005872:	d001      	beq.n	8005878 <strncmp+0x1c>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f5      	bne.n	8005864 <strncmp+0x8>
 8005878:	1a98      	subs	r0, r3, r2
 800587a:	bd10      	pop	{r4, pc}
 800587c:	4610      	mov	r0, r2
 800587e:	e7fc      	b.n	800587a <strncmp+0x1e>

08005880 <strtok>:
 8005880:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <strtok+0x50>)
 8005882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005886:	681d      	ldr	r5, [r3, #0]
 8005888:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
 800588e:	b9b4      	cbnz	r4, 80058be <strtok+0x3e>
 8005890:	2050      	movs	r0, #80	; 0x50
 8005892:	f000 f8df 	bl	8005a54 <malloc>
 8005896:	65a8      	str	r0, [r5, #88]	; 0x58
 8005898:	e9c0 4400 	strd	r4, r4, [r0]
 800589c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80058a0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80058a4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80058a8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80058ac:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80058b0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80058b4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80058b8:	6184      	str	r4, [r0, #24]
 80058ba:	7704      	strb	r4, [r0, #28]
 80058bc:	6244      	str	r4, [r0, #36]	; 0x24
 80058be:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80058c0:	4639      	mov	r1, r7
 80058c2:	4630      	mov	r0, r6
 80058c4:	2301      	movs	r3, #1
 80058c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ca:	f000 b803 	b.w	80058d4 <__strtok_r>
 80058ce:	bf00      	nop
 80058d0:	2000006c 	.word	0x2000006c

080058d4 <__strtok_r>:
 80058d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d6:	b918      	cbnz	r0, 80058e0 <__strtok_r+0xc>
 80058d8:	6810      	ldr	r0, [r2, #0]
 80058da:	b908      	cbnz	r0, 80058e0 <__strtok_r+0xc>
 80058dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058de:	4620      	mov	r0, r4
 80058e0:	4604      	mov	r4, r0
 80058e2:	460f      	mov	r7, r1
 80058e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80058e8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80058ec:	b91e      	cbnz	r6, 80058f6 <__strtok_r+0x22>
 80058ee:	b96d      	cbnz	r5, 800590c <__strtok_r+0x38>
 80058f0:	6015      	str	r5, [r2, #0]
 80058f2:	4628      	mov	r0, r5
 80058f4:	e7f2      	b.n	80058dc <__strtok_r+0x8>
 80058f6:	42b5      	cmp	r5, r6
 80058f8:	d1f6      	bne.n	80058e8 <__strtok_r+0x14>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1ef      	bne.n	80058de <__strtok_r+0xa>
 80058fe:	6014      	str	r4, [r2, #0]
 8005900:	7003      	strb	r3, [r0, #0]
 8005902:	e7eb      	b.n	80058dc <__strtok_r+0x8>
 8005904:	462b      	mov	r3, r5
 8005906:	e00d      	b.n	8005924 <__strtok_r+0x50>
 8005908:	b926      	cbnz	r6, 8005914 <__strtok_r+0x40>
 800590a:	461c      	mov	r4, r3
 800590c:	4623      	mov	r3, r4
 800590e:	460f      	mov	r7, r1
 8005910:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005914:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005918:	42b5      	cmp	r5, r6
 800591a:	d1f5      	bne.n	8005908 <__strtok_r+0x34>
 800591c:	2d00      	cmp	r5, #0
 800591e:	d0f1      	beq.n	8005904 <__strtok_r+0x30>
 8005920:	2100      	movs	r1, #0
 8005922:	7021      	strb	r1, [r4, #0]
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e7d9      	b.n	80058dc <__strtok_r+0x8>

08005928 <_strtol_l.isra.0>:
 8005928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	4680      	mov	r8, r0
 800592e:	4689      	mov	r9, r1
 8005930:	4692      	mov	sl, r2
 8005932:	461e      	mov	r6, r3
 8005934:	460f      	mov	r7, r1
 8005936:	463d      	mov	r5, r7
 8005938:	9808      	ldr	r0, [sp, #32]
 800593a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800593e:	f000 f885 	bl	8005a4c <__locale_ctype_ptr_l>
 8005942:	4420      	add	r0, r4
 8005944:	7843      	ldrb	r3, [r0, #1]
 8005946:	f013 0308 	ands.w	r3, r3, #8
 800594a:	d132      	bne.n	80059b2 <_strtol_l.isra.0+0x8a>
 800594c:	2c2d      	cmp	r4, #45	; 0x2d
 800594e:	d132      	bne.n	80059b6 <_strtol_l.isra.0+0x8e>
 8005950:	787c      	ldrb	r4, [r7, #1]
 8005952:	1cbd      	adds	r5, r7, #2
 8005954:	2201      	movs	r2, #1
 8005956:	2e00      	cmp	r6, #0
 8005958:	d05d      	beq.n	8005a16 <_strtol_l.isra.0+0xee>
 800595a:	2e10      	cmp	r6, #16
 800595c:	d109      	bne.n	8005972 <_strtol_l.isra.0+0x4a>
 800595e:	2c30      	cmp	r4, #48	; 0x30
 8005960:	d107      	bne.n	8005972 <_strtol_l.isra.0+0x4a>
 8005962:	782b      	ldrb	r3, [r5, #0]
 8005964:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005968:	2b58      	cmp	r3, #88	; 0x58
 800596a:	d14f      	bne.n	8005a0c <_strtol_l.isra.0+0xe4>
 800596c:	786c      	ldrb	r4, [r5, #1]
 800596e:	2610      	movs	r6, #16
 8005970:	3502      	adds	r5, #2
 8005972:	2a00      	cmp	r2, #0
 8005974:	bf14      	ite	ne
 8005976:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800597a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800597e:	2700      	movs	r7, #0
 8005980:	fbb1 fcf6 	udiv	ip, r1, r6
 8005984:	4638      	mov	r0, r7
 8005986:	fb06 1e1c 	mls	lr, r6, ip, r1
 800598a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800598e:	2b09      	cmp	r3, #9
 8005990:	d817      	bhi.n	80059c2 <_strtol_l.isra.0+0x9a>
 8005992:	461c      	mov	r4, r3
 8005994:	42a6      	cmp	r6, r4
 8005996:	dd23      	ble.n	80059e0 <_strtol_l.isra.0+0xb8>
 8005998:	1c7b      	adds	r3, r7, #1
 800599a:	d007      	beq.n	80059ac <_strtol_l.isra.0+0x84>
 800599c:	4584      	cmp	ip, r0
 800599e:	d31c      	bcc.n	80059da <_strtol_l.isra.0+0xb2>
 80059a0:	d101      	bne.n	80059a6 <_strtol_l.isra.0+0x7e>
 80059a2:	45a6      	cmp	lr, r4
 80059a4:	db19      	blt.n	80059da <_strtol_l.isra.0+0xb2>
 80059a6:	fb00 4006 	mla	r0, r0, r6, r4
 80059aa:	2701      	movs	r7, #1
 80059ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059b0:	e7eb      	b.n	800598a <_strtol_l.isra.0+0x62>
 80059b2:	462f      	mov	r7, r5
 80059b4:	e7bf      	b.n	8005936 <_strtol_l.isra.0+0xe>
 80059b6:	2c2b      	cmp	r4, #43	; 0x2b
 80059b8:	bf04      	itt	eq
 80059ba:	1cbd      	addeq	r5, r7, #2
 80059bc:	787c      	ldrbeq	r4, [r7, #1]
 80059be:	461a      	mov	r2, r3
 80059c0:	e7c9      	b.n	8005956 <_strtol_l.isra.0+0x2e>
 80059c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80059c6:	2b19      	cmp	r3, #25
 80059c8:	d801      	bhi.n	80059ce <_strtol_l.isra.0+0xa6>
 80059ca:	3c37      	subs	r4, #55	; 0x37
 80059cc:	e7e2      	b.n	8005994 <_strtol_l.isra.0+0x6c>
 80059ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80059d2:	2b19      	cmp	r3, #25
 80059d4:	d804      	bhi.n	80059e0 <_strtol_l.isra.0+0xb8>
 80059d6:	3c57      	subs	r4, #87	; 0x57
 80059d8:	e7dc      	b.n	8005994 <_strtol_l.isra.0+0x6c>
 80059da:	f04f 37ff 	mov.w	r7, #4294967295
 80059de:	e7e5      	b.n	80059ac <_strtol_l.isra.0+0x84>
 80059e0:	1c7b      	adds	r3, r7, #1
 80059e2:	d108      	bne.n	80059f6 <_strtol_l.isra.0+0xce>
 80059e4:	2322      	movs	r3, #34	; 0x22
 80059e6:	f8c8 3000 	str.w	r3, [r8]
 80059ea:	4608      	mov	r0, r1
 80059ec:	f1ba 0f00 	cmp.w	sl, #0
 80059f0:	d107      	bne.n	8005a02 <_strtol_l.isra.0+0xda>
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	b102      	cbz	r2, 80059fa <_strtol_l.isra.0+0xd2>
 80059f8:	4240      	negs	r0, r0
 80059fa:	f1ba 0f00 	cmp.w	sl, #0
 80059fe:	d0f8      	beq.n	80059f2 <_strtol_l.isra.0+0xca>
 8005a00:	b10f      	cbz	r7, 8005a06 <_strtol_l.isra.0+0xde>
 8005a02:	f105 39ff 	add.w	r9, r5, #4294967295
 8005a06:	f8ca 9000 	str.w	r9, [sl]
 8005a0a:	e7f2      	b.n	80059f2 <_strtol_l.isra.0+0xca>
 8005a0c:	2430      	movs	r4, #48	; 0x30
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	d1af      	bne.n	8005972 <_strtol_l.isra.0+0x4a>
 8005a12:	2608      	movs	r6, #8
 8005a14:	e7ad      	b.n	8005972 <_strtol_l.isra.0+0x4a>
 8005a16:	2c30      	cmp	r4, #48	; 0x30
 8005a18:	d0a3      	beq.n	8005962 <_strtol_l.isra.0+0x3a>
 8005a1a:	260a      	movs	r6, #10
 8005a1c:	e7a9      	b.n	8005972 <_strtol_l.isra.0+0x4a>
	...

08005a20 <strtol>:
 8005a20:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <strtol+0x24>)
 8005a22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a24:	681c      	ldr	r4, [r3, #0]
 8005a26:	4d08      	ldr	r5, [pc, #32]	; (8005a48 <strtol+0x28>)
 8005a28:	6a23      	ldr	r3, [r4, #32]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bf08      	it	eq
 8005a2e:	462b      	moveq	r3, r5
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	460a      	mov	r2, r1
 8005a36:	4601      	mov	r1, r0
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7ff ff75 	bl	8005928 <_strtol_l.isra.0>
 8005a3e:	b003      	add	sp, #12
 8005a40:	bd30      	pop	{r4, r5, pc}
 8005a42:	bf00      	nop
 8005a44:	2000006c 	.word	0x2000006c
 8005a48:	200000d0 	.word	0x200000d0

08005a4c <__locale_ctype_ptr_l>:
 8005a4c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005a50:	4770      	bx	lr
	...

08005a54 <malloc>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <malloc+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f000 b863 	b.w	8005b24 <_malloc_r>
 8005a5e:	bf00      	nop
 8005a60:	2000006c 	.word	0x2000006c

08005a64 <__ascii_mbtowc>:
 8005a64:	b082      	sub	sp, #8
 8005a66:	b901      	cbnz	r1, 8005a6a <__ascii_mbtowc+0x6>
 8005a68:	a901      	add	r1, sp, #4
 8005a6a:	b142      	cbz	r2, 8005a7e <__ascii_mbtowc+0x1a>
 8005a6c:	b14b      	cbz	r3, 8005a82 <__ascii_mbtowc+0x1e>
 8005a6e:	7813      	ldrb	r3, [r2, #0]
 8005a70:	600b      	str	r3, [r1, #0]
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	1c10      	adds	r0, r2, #0
 8005a76:	bf18      	it	ne
 8005a78:	2001      	movne	r0, #1
 8005a7a:	b002      	add	sp, #8
 8005a7c:	4770      	bx	lr
 8005a7e:	4610      	mov	r0, r2
 8005a80:	e7fb      	b.n	8005a7a <__ascii_mbtowc+0x16>
 8005a82:	f06f 0001 	mvn.w	r0, #1
 8005a86:	e7f8      	b.n	8005a7a <__ascii_mbtowc+0x16>

08005a88 <_free_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	2900      	cmp	r1, #0
 8005a8e:	d045      	beq.n	8005b1c <_free_r+0x94>
 8005a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a94:	1f0c      	subs	r4, r1, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bfb8      	it	lt
 8005a9a:	18e4      	addlt	r4, r4, r3
 8005a9c:	f000 fbac 	bl	80061f8 <__malloc_lock>
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <_free_r+0x98>)
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	b933      	cbnz	r3, 8005ab6 <_free_r+0x2e>
 8005aa8:	6063      	str	r3, [r4, #4]
 8005aaa:	6014      	str	r4, [r2, #0]
 8005aac:	4628      	mov	r0, r5
 8005aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ab2:	f000 bba2 	b.w	80061fa <__malloc_unlock>
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	d90c      	bls.n	8005ad4 <_free_r+0x4c>
 8005aba:	6821      	ldr	r1, [r4, #0]
 8005abc:	1862      	adds	r2, r4, r1
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	bf04      	itt	eq
 8005ac2:	681a      	ldreq	r2, [r3, #0]
 8005ac4:	685b      	ldreq	r3, [r3, #4]
 8005ac6:	6063      	str	r3, [r4, #4]
 8005ac8:	bf04      	itt	eq
 8005aca:	1852      	addeq	r2, r2, r1
 8005acc:	6022      	streq	r2, [r4, #0]
 8005ace:	6004      	str	r4, [r0, #0]
 8005ad0:	e7ec      	b.n	8005aac <_free_r+0x24>
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	b10a      	cbz	r2, 8005adc <_free_r+0x54>
 8005ad8:	42a2      	cmp	r2, r4
 8005ada:	d9fa      	bls.n	8005ad2 <_free_r+0x4a>
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	1858      	adds	r0, r3, r1
 8005ae0:	42a0      	cmp	r0, r4
 8005ae2:	d10b      	bne.n	8005afc <_free_r+0x74>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	4401      	add	r1, r0
 8005ae8:	1858      	adds	r0, r3, r1
 8005aea:	4282      	cmp	r2, r0
 8005aec:	6019      	str	r1, [r3, #0]
 8005aee:	d1dd      	bne.n	8005aac <_free_r+0x24>
 8005af0:	6810      	ldr	r0, [r2, #0]
 8005af2:	6852      	ldr	r2, [r2, #4]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	4401      	add	r1, r0
 8005af8:	6019      	str	r1, [r3, #0]
 8005afa:	e7d7      	b.n	8005aac <_free_r+0x24>
 8005afc:	d902      	bls.n	8005b04 <_free_r+0x7c>
 8005afe:	230c      	movs	r3, #12
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	e7d3      	b.n	8005aac <_free_r+0x24>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	1821      	adds	r1, r4, r0
 8005b08:	428a      	cmp	r2, r1
 8005b0a:	bf04      	itt	eq
 8005b0c:	6811      	ldreq	r1, [r2, #0]
 8005b0e:	6852      	ldreq	r2, [r2, #4]
 8005b10:	6062      	str	r2, [r4, #4]
 8005b12:	bf04      	itt	eq
 8005b14:	1809      	addeq	r1, r1, r0
 8005b16:	6021      	streq	r1, [r4, #0]
 8005b18:	605c      	str	r4, [r3, #4]
 8005b1a:	e7c7      	b.n	8005aac <_free_r+0x24>
 8005b1c:	bd38      	pop	{r3, r4, r5, pc}
 8005b1e:	bf00      	nop
 8005b20:	2000025c 	.word	0x2000025c

08005b24 <_malloc_r>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	1ccd      	adds	r5, r1, #3
 8005b28:	f025 0503 	bic.w	r5, r5, #3
 8005b2c:	3508      	adds	r5, #8
 8005b2e:	2d0c      	cmp	r5, #12
 8005b30:	bf38      	it	cc
 8005b32:	250c      	movcc	r5, #12
 8005b34:	2d00      	cmp	r5, #0
 8005b36:	4606      	mov	r6, r0
 8005b38:	db01      	blt.n	8005b3e <_malloc_r+0x1a>
 8005b3a:	42a9      	cmp	r1, r5
 8005b3c:	d903      	bls.n	8005b46 <_malloc_r+0x22>
 8005b3e:	230c      	movs	r3, #12
 8005b40:	6033      	str	r3, [r6, #0]
 8005b42:	2000      	movs	r0, #0
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	f000 fb57 	bl	80061f8 <__malloc_lock>
 8005b4a:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <_malloc_r+0xac>)
 8005b4c:	6814      	ldr	r4, [r2, #0]
 8005b4e:	4621      	mov	r1, r4
 8005b50:	b991      	cbnz	r1, 8005b78 <_malloc_r+0x54>
 8005b52:	4c20      	ldr	r4, [pc, #128]	; (8005bd4 <_malloc_r+0xb0>)
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	b91b      	cbnz	r3, 8005b60 <_malloc_r+0x3c>
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f000 fb17 	bl	800618c <_sbrk_r>
 8005b5e:	6020      	str	r0, [r4, #0]
 8005b60:	4629      	mov	r1, r5
 8005b62:	4630      	mov	r0, r6
 8005b64:	f000 fb12 	bl	800618c <_sbrk_r>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d124      	bne.n	8005bb6 <_malloc_r+0x92>
 8005b6c:	230c      	movs	r3, #12
 8005b6e:	6033      	str	r3, [r6, #0]
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 fb42 	bl	80061fa <__malloc_unlock>
 8005b76:	e7e4      	b.n	8005b42 <_malloc_r+0x1e>
 8005b78:	680b      	ldr	r3, [r1, #0]
 8005b7a:	1b5b      	subs	r3, r3, r5
 8005b7c:	d418      	bmi.n	8005bb0 <_malloc_r+0x8c>
 8005b7e:	2b0b      	cmp	r3, #11
 8005b80:	d90f      	bls.n	8005ba2 <_malloc_r+0x7e>
 8005b82:	600b      	str	r3, [r1, #0]
 8005b84:	50cd      	str	r5, [r1, r3]
 8005b86:	18cc      	adds	r4, r1, r3
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f000 fb36 	bl	80061fa <__malloc_unlock>
 8005b8e:	f104 000b 	add.w	r0, r4, #11
 8005b92:	1d23      	adds	r3, r4, #4
 8005b94:	f020 0007 	bic.w	r0, r0, #7
 8005b98:	1ac3      	subs	r3, r0, r3
 8005b9a:	d0d3      	beq.n	8005b44 <_malloc_r+0x20>
 8005b9c:	425a      	negs	r2, r3
 8005b9e:	50e2      	str	r2, [r4, r3]
 8005ba0:	e7d0      	b.n	8005b44 <_malloc_r+0x20>
 8005ba2:	428c      	cmp	r4, r1
 8005ba4:	684b      	ldr	r3, [r1, #4]
 8005ba6:	bf16      	itet	ne
 8005ba8:	6063      	strne	r3, [r4, #4]
 8005baa:	6013      	streq	r3, [r2, #0]
 8005bac:	460c      	movne	r4, r1
 8005bae:	e7eb      	b.n	8005b88 <_malloc_r+0x64>
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	6849      	ldr	r1, [r1, #4]
 8005bb4:	e7cc      	b.n	8005b50 <_malloc_r+0x2c>
 8005bb6:	1cc4      	adds	r4, r0, #3
 8005bb8:	f024 0403 	bic.w	r4, r4, #3
 8005bbc:	42a0      	cmp	r0, r4
 8005bbe:	d005      	beq.n	8005bcc <_malloc_r+0xa8>
 8005bc0:	1a21      	subs	r1, r4, r0
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f000 fae2 	bl	800618c <_sbrk_r>
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d0cf      	beq.n	8005b6c <_malloc_r+0x48>
 8005bcc:	6025      	str	r5, [r4, #0]
 8005bce:	e7db      	b.n	8005b88 <_malloc_r+0x64>
 8005bd0:	2000025c 	.word	0x2000025c
 8005bd4:	20000260 	.word	0x20000260

08005bd8 <__ssputs_r>:
 8005bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bdc:	688e      	ldr	r6, [r1, #8]
 8005bde:	429e      	cmp	r6, r3
 8005be0:	4682      	mov	sl, r0
 8005be2:	460c      	mov	r4, r1
 8005be4:	4690      	mov	r8, r2
 8005be6:	4699      	mov	r9, r3
 8005be8:	d837      	bhi.n	8005c5a <__ssputs_r+0x82>
 8005bea:	898a      	ldrh	r2, [r1, #12]
 8005bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bf0:	d031      	beq.n	8005c56 <__ssputs_r+0x7e>
 8005bf2:	6825      	ldr	r5, [r4, #0]
 8005bf4:	6909      	ldr	r1, [r1, #16]
 8005bf6:	1a6f      	subs	r7, r5, r1
 8005bf8:	6965      	ldr	r5, [r4, #20]
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c00:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c04:	f109 0301 	add.w	r3, r9, #1
 8005c08:	443b      	add	r3, r7
 8005c0a:	429d      	cmp	r5, r3
 8005c0c:	bf38      	it	cc
 8005c0e:	461d      	movcc	r5, r3
 8005c10:	0553      	lsls	r3, r2, #21
 8005c12:	d530      	bpl.n	8005c76 <__ssputs_r+0x9e>
 8005c14:	4629      	mov	r1, r5
 8005c16:	f7ff ff85 	bl	8005b24 <_malloc_r>
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	b950      	cbnz	r0, 8005c34 <__ssputs_r+0x5c>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	f8ca 3000 	str.w	r3, [sl]
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	463a      	mov	r2, r7
 8005c36:	6921      	ldr	r1, [r4, #16]
 8005c38:	f7ff fddc 	bl	80057f4 <memcpy>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	6126      	str	r6, [r4, #16]
 8005c4a:	6165      	str	r5, [r4, #20]
 8005c4c:	443e      	add	r6, r7
 8005c4e:	1bed      	subs	r5, r5, r7
 8005c50:	6026      	str	r6, [r4, #0]
 8005c52:	60a5      	str	r5, [r4, #8]
 8005c54:	464e      	mov	r6, r9
 8005c56:	454e      	cmp	r6, r9
 8005c58:	d900      	bls.n	8005c5c <__ssputs_r+0x84>
 8005c5a:	464e      	mov	r6, r9
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	4641      	mov	r1, r8
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	f000 fab0 	bl	80061c6 <memmove>
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	1b9b      	subs	r3, r3, r6
 8005c6a:	60a3      	str	r3, [r4, #8]
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	441e      	add	r6, r3
 8005c70:	6026      	str	r6, [r4, #0]
 8005c72:	2000      	movs	r0, #0
 8005c74:	e7dc      	b.n	8005c30 <__ssputs_r+0x58>
 8005c76:	462a      	mov	r2, r5
 8005c78:	f000 fac0 	bl	80061fc <_realloc_r>
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d1e2      	bne.n	8005c48 <__ssputs_r+0x70>
 8005c82:	6921      	ldr	r1, [r4, #16]
 8005c84:	4650      	mov	r0, sl
 8005c86:	f7ff feff 	bl	8005a88 <_free_r>
 8005c8a:	e7c8      	b.n	8005c1e <__ssputs_r+0x46>

08005c8c <_svfiprintf_r>:
 8005c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c90:	461d      	mov	r5, r3
 8005c92:	898b      	ldrh	r3, [r1, #12]
 8005c94:	061f      	lsls	r7, r3, #24
 8005c96:	b09d      	sub	sp, #116	; 0x74
 8005c98:	4680      	mov	r8, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	d50f      	bpl.n	8005cc0 <_svfiprintf_r+0x34>
 8005ca0:	690b      	ldr	r3, [r1, #16]
 8005ca2:	b96b      	cbnz	r3, 8005cc0 <_svfiprintf_r+0x34>
 8005ca4:	2140      	movs	r1, #64	; 0x40
 8005ca6:	f7ff ff3d 	bl	8005b24 <_malloc_r>
 8005caa:	6020      	str	r0, [r4, #0]
 8005cac:	6120      	str	r0, [r4, #16]
 8005cae:	b928      	cbnz	r0, 8005cbc <_svfiprintf_r+0x30>
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	f8c8 3000 	str.w	r3, [r8]
 8005cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cba:	e0c8      	b.n	8005e4e <_svfiprintf_r+0x1c2>
 8005cbc:	2340      	movs	r3, #64	; 0x40
 8005cbe:	6163      	str	r3, [r4, #20]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cca:	2330      	movs	r3, #48	; 0x30
 8005ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cd0:	9503      	str	r5, [sp, #12]
 8005cd2:	f04f 0b01 	mov.w	fp, #1
 8005cd6:	4637      	mov	r7, r6
 8005cd8:	463d      	mov	r5, r7
 8005cda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cde:	b10b      	cbz	r3, 8005ce4 <_svfiprintf_r+0x58>
 8005ce0:	2b25      	cmp	r3, #37	; 0x25
 8005ce2:	d13e      	bne.n	8005d62 <_svfiprintf_r+0xd6>
 8005ce4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ce8:	d00b      	beq.n	8005d02 <_svfiprintf_r+0x76>
 8005cea:	4653      	mov	r3, sl
 8005cec:	4632      	mov	r2, r6
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	f7ff ff71 	bl	8005bd8 <__ssputs_r>
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f000 80a4 	beq.w	8005e44 <_svfiprintf_r+0x1b8>
 8005cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfe:	4453      	add	r3, sl
 8005d00:	9309      	str	r3, [sp, #36]	; 0x24
 8005d02:	783b      	ldrb	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 809d 	beq.w	8005e44 <_svfiprintf_r+0x1b8>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d14:	9304      	str	r3, [sp, #16]
 8005d16:	9307      	str	r3, [sp, #28]
 8005d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d1e:	462f      	mov	r7, r5
 8005d20:	2205      	movs	r2, #5
 8005d22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d26:	4850      	ldr	r0, [pc, #320]	; (8005e68 <_svfiprintf_r+0x1dc>)
 8005d28:	f7fa fa62 	bl	80001f0 <memchr>
 8005d2c:	9b04      	ldr	r3, [sp, #16]
 8005d2e:	b9d0      	cbnz	r0, 8005d66 <_svfiprintf_r+0xda>
 8005d30:	06d9      	lsls	r1, r3, #27
 8005d32:	bf44      	itt	mi
 8005d34:	2220      	movmi	r2, #32
 8005d36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d3a:	071a      	lsls	r2, r3, #28
 8005d3c:	bf44      	itt	mi
 8005d3e:	222b      	movmi	r2, #43	; 0x2b
 8005d40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d44:	782a      	ldrb	r2, [r5, #0]
 8005d46:	2a2a      	cmp	r2, #42	; 0x2a
 8005d48:	d015      	beq.n	8005d76 <_svfiprintf_r+0xea>
 8005d4a:	9a07      	ldr	r2, [sp, #28]
 8005d4c:	462f      	mov	r7, r5
 8005d4e:	2000      	movs	r0, #0
 8005d50:	250a      	movs	r5, #10
 8005d52:	4639      	mov	r1, r7
 8005d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d58:	3b30      	subs	r3, #48	; 0x30
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d94d      	bls.n	8005dfa <_svfiprintf_r+0x16e>
 8005d5e:	b1b8      	cbz	r0, 8005d90 <_svfiprintf_r+0x104>
 8005d60:	e00f      	b.n	8005d82 <_svfiprintf_r+0xf6>
 8005d62:	462f      	mov	r7, r5
 8005d64:	e7b8      	b.n	8005cd8 <_svfiprintf_r+0x4c>
 8005d66:	4a40      	ldr	r2, [pc, #256]	; (8005e68 <_svfiprintf_r+0x1dc>)
 8005d68:	1a80      	subs	r0, r0, r2
 8005d6a:	fa0b f000 	lsl.w	r0, fp, r0
 8005d6e:	4318      	orrs	r0, r3
 8005d70:	9004      	str	r0, [sp, #16]
 8005d72:	463d      	mov	r5, r7
 8005d74:	e7d3      	b.n	8005d1e <_svfiprintf_r+0x92>
 8005d76:	9a03      	ldr	r2, [sp, #12]
 8005d78:	1d11      	adds	r1, r2, #4
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	9103      	str	r1, [sp, #12]
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	db01      	blt.n	8005d86 <_svfiprintf_r+0xfa>
 8005d82:	9207      	str	r2, [sp, #28]
 8005d84:	e004      	b.n	8005d90 <_svfiprintf_r+0x104>
 8005d86:	4252      	negs	r2, r2
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	9207      	str	r2, [sp, #28]
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	783b      	ldrb	r3, [r7, #0]
 8005d92:	2b2e      	cmp	r3, #46	; 0x2e
 8005d94:	d10c      	bne.n	8005db0 <_svfiprintf_r+0x124>
 8005d96:	787b      	ldrb	r3, [r7, #1]
 8005d98:	2b2a      	cmp	r3, #42	; 0x2a
 8005d9a:	d133      	bne.n	8005e04 <_svfiprintf_r+0x178>
 8005d9c:	9b03      	ldr	r3, [sp, #12]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	9203      	str	r2, [sp, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bfb8      	it	lt
 8005da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dac:	3702      	adds	r7, #2
 8005dae:	9305      	str	r3, [sp, #20]
 8005db0:	4d2e      	ldr	r5, [pc, #184]	; (8005e6c <_svfiprintf_r+0x1e0>)
 8005db2:	7839      	ldrb	r1, [r7, #0]
 8005db4:	2203      	movs	r2, #3
 8005db6:	4628      	mov	r0, r5
 8005db8:	f7fa fa1a 	bl	80001f0 <memchr>
 8005dbc:	b138      	cbz	r0, 8005dce <_svfiprintf_r+0x142>
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	1b40      	subs	r0, r0, r5
 8005dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8005dc6:	9b04      	ldr	r3, [sp, #16]
 8005dc8:	4303      	orrs	r3, r0
 8005dca:	3701      	adds	r7, #1
 8005dcc:	9304      	str	r3, [sp, #16]
 8005dce:	7839      	ldrb	r1, [r7, #0]
 8005dd0:	4827      	ldr	r0, [pc, #156]	; (8005e70 <_svfiprintf_r+0x1e4>)
 8005dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dd6:	2206      	movs	r2, #6
 8005dd8:	1c7e      	adds	r6, r7, #1
 8005dda:	f7fa fa09 	bl	80001f0 <memchr>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d038      	beq.n	8005e54 <_svfiprintf_r+0x1c8>
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <_svfiprintf_r+0x1e8>)
 8005de4:	bb13      	cbnz	r3, 8005e2c <_svfiprintf_r+0x1a0>
 8005de6:	9b03      	ldr	r3, [sp, #12]
 8005de8:	3307      	adds	r3, #7
 8005dea:	f023 0307 	bic.w	r3, r3, #7
 8005dee:	3308      	adds	r3, #8
 8005df0:	9303      	str	r3, [sp, #12]
 8005df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df4:	444b      	add	r3, r9
 8005df6:	9309      	str	r3, [sp, #36]	; 0x24
 8005df8:	e76d      	b.n	8005cd6 <_svfiprintf_r+0x4a>
 8005dfa:	fb05 3202 	mla	r2, r5, r2, r3
 8005dfe:	2001      	movs	r0, #1
 8005e00:	460f      	mov	r7, r1
 8005e02:	e7a6      	b.n	8005d52 <_svfiprintf_r+0xc6>
 8005e04:	2300      	movs	r3, #0
 8005e06:	3701      	adds	r7, #1
 8005e08:	9305      	str	r3, [sp, #20]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	250a      	movs	r5, #10
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e14:	3a30      	subs	r2, #48	; 0x30
 8005e16:	2a09      	cmp	r2, #9
 8005e18:	d903      	bls.n	8005e22 <_svfiprintf_r+0x196>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0c8      	beq.n	8005db0 <_svfiprintf_r+0x124>
 8005e1e:	9105      	str	r1, [sp, #20]
 8005e20:	e7c6      	b.n	8005db0 <_svfiprintf_r+0x124>
 8005e22:	fb05 2101 	mla	r1, r5, r1, r2
 8005e26:	2301      	movs	r3, #1
 8005e28:	4607      	mov	r7, r0
 8005e2a:	e7f0      	b.n	8005e0e <_svfiprintf_r+0x182>
 8005e2c:	ab03      	add	r3, sp, #12
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4622      	mov	r2, r4
 8005e32:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <_svfiprintf_r+0x1ec>)
 8005e34:	a904      	add	r1, sp, #16
 8005e36:	4640      	mov	r0, r8
 8005e38:	f3af 8000 	nop.w
 8005e3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e40:	4681      	mov	r9, r0
 8005e42:	d1d6      	bne.n	8005df2 <_svfiprintf_r+0x166>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	065b      	lsls	r3, r3, #25
 8005e48:	f53f af35 	bmi.w	8005cb6 <_svfiprintf_r+0x2a>
 8005e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e4e:	b01d      	add	sp, #116	; 0x74
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	ab03      	add	r3, sp, #12
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4622      	mov	r2, r4
 8005e5a:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <_svfiprintf_r+0x1ec>)
 8005e5c:	a904      	add	r1, sp, #16
 8005e5e:	4640      	mov	r0, r8
 8005e60:	f000 f882 	bl	8005f68 <_printf_i>
 8005e64:	e7ea      	b.n	8005e3c <_svfiprintf_r+0x1b0>
 8005e66:	bf00      	nop
 8005e68:	08006332 	.word	0x08006332
 8005e6c:	08006338 	.word	0x08006338
 8005e70:	0800633c 	.word	0x0800633c
 8005e74:	00000000 	.word	0x00000000
 8005e78:	08005bd9 	.word	0x08005bd9

08005e7c <_printf_common>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	4691      	mov	r9, r2
 8005e82:	461f      	mov	r7, r3
 8005e84:	688a      	ldr	r2, [r1, #8]
 8005e86:	690b      	ldr	r3, [r1, #16]
 8005e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	bfb8      	it	lt
 8005e90:	4613      	movlt	r3, r2
 8005e92:	f8c9 3000 	str.w	r3, [r9]
 8005e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	b112      	cbz	r2, 8005ea6 <_printf_common+0x2a>
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f8c9 3000 	str.w	r3, [r9]
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	0699      	lsls	r1, r3, #26
 8005eaa:	bf42      	ittt	mi
 8005eac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005eb0:	3302      	addmi	r3, #2
 8005eb2:	f8c9 3000 	strmi.w	r3, [r9]
 8005eb6:	6825      	ldr	r5, [r4, #0]
 8005eb8:	f015 0506 	ands.w	r5, r5, #6
 8005ebc:	d107      	bne.n	8005ece <_printf_common+0x52>
 8005ebe:	f104 0a19 	add.w	sl, r4, #25
 8005ec2:	68e3      	ldr	r3, [r4, #12]
 8005ec4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	42ab      	cmp	r3, r5
 8005ecc:	dc28      	bgt.n	8005f20 <_printf_common+0xa4>
 8005ece:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	3300      	adds	r3, #0
 8005ed6:	bf18      	it	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	0692      	lsls	r2, r2, #26
 8005edc:	d42d      	bmi.n	8005f3a <_printf_common+0xbe>
 8005ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	47c0      	blx	r8
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d020      	beq.n	8005f2e <_printf_common+0xb2>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	68e5      	ldr	r5, [r4, #12]
 8005ef0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ef4:	f003 0306 	and.w	r3, r3, #6
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	bf08      	it	eq
 8005efc:	1aad      	subeq	r5, r5, r2
 8005efe:	68a3      	ldr	r3, [r4, #8]
 8005f00:	6922      	ldr	r2, [r4, #16]
 8005f02:	bf0c      	ite	eq
 8005f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f08:	2500      	movne	r5, #0
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	bfc4      	itt	gt
 8005f0e:	1a9b      	subgt	r3, r3, r2
 8005f10:	18ed      	addgt	r5, r5, r3
 8005f12:	f04f 0900 	mov.w	r9, #0
 8005f16:	341a      	adds	r4, #26
 8005f18:	454d      	cmp	r5, r9
 8005f1a:	d11a      	bne.n	8005f52 <_printf_common+0xd6>
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e008      	b.n	8005f32 <_printf_common+0xb6>
 8005f20:	2301      	movs	r3, #1
 8005f22:	4652      	mov	r2, sl
 8005f24:	4639      	mov	r1, r7
 8005f26:	4630      	mov	r0, r6
 8005f28:	47c0      	blx	r8
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d103      	bne.n	8005f36 <_printf_common+0xba>
 8005f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f36:	3501      	adds	r5, #1
 8005f38:	e7c3      	b.n	8005ec2 <_printf_common+0x46>
 8005f3a:	18e1      	adds	r1, r4, r3
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	2030      	movs	r0, #48	; 0x30
 8005f40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f44:	4422      	add	r2, r4
 8005f46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f4e:	3302      	adds	r3, #2
 8005f50:	e7c5      	b.n	8005ede <_printf_common+0x62>
 8005f52:	2301      	movs	r3, #1
 8005f54:	4622      	mov	r2, r4
 8005f56:	4639      	mov	r1, r7
 8005f58:	4630      	mov	r0, r6
 8005f5a:	47c0      	blx	r8
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d0e6      	beq.n	8005f2e <_printf_common+0xb2>
 8005f60:	f109 0901 	add.w	r9, r9, #1
 8005f64:	e7d8      	b.n	8005f18 <_printf_common+0x9c>
	...

08005f68 <_printf_i>:
 8005f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005f70:	460c      	mov	r4, r1
 8005f72:	7e09      	ldrb	r1, [r1, #24]
 8005f74:	b085      	sub	sp, #20
 8005f76:	296e      	cmp	r1, #110	; 0x6e
 8005f78:	4617      	mov	r7, r2
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	4698      	mov	r8, r3
 8005f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f80:	f000 80b3 	beq.w	80060ea <_printf_i+0x182>
 8005f84:	d822      	bhi.n	8005fcc <_printf_i+0x64>
 8005f86:	2963      	cmp	r1, #99	; 0x63
 8005f88:	d036      	beq.n	8005ff8 <_printf_i+0x90>
 8005f8a:	d80a      	bhi.n	8005fa2 <_printf_i+0x3a>
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	f000 80b9 	beq.w	8006104 <_printf_i+0x19c>
 8005f92:	2958      	cmp	r1, #88	; 0x58
 8005f94:	f000 8083 	beq.w	800609e <_printf_i+0x136>
 8005f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005fa0:	e032      	b.n	8006008 <_printf_i+0xa0>
 8005fa2:	2964      	cmp	r1, #100	; 0x64
 8005fa4:	d001      	beq.n	8005faa <_printf_i+0x42>
 8005fa6:	2969      	cmp	r1, #105	; 0x69
 8005fa8:	d1f6      	bne.n	8005f98 <_printf_i+0x30>
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	6813      	ldr	r3, [r2, #0]
 8005fae:	0605      	lsls	r5, r0, #24
 8005fb0:	f103 0104 	add.w	r1, r3, #4
 8005fb4:	d52a      	bpl.n	800600c <_printf_i+0xa4>
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6011      	str	r1, [r2, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	da03      	bge.n	8005fc6 <_printf_i+0x5e>
 8005fbe:	222d      	movs	r2, #45	; 0x2d
 8005fc0:	425b      	negs	r3, r3
 8005fc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005fc6:	486f      	ldr	r0, [pc, #444]	; (8006184 <_printf_i+0x21c>)
 8005fc8:	220a      	movs	r2, #10
 8005fca:	e039      	b.n	8006040 <_printf_i+0xd8>
 8005fcc:	2973      	cmp	r1, #115	; 0x73
 8005fce:	f000 809d 	beq.w	800610c <_printf_i+0x1a4>
 8005fd2:	d808      	bhi.n	8005fe6 <_printf_i+0x7e>
 8005fd4:	296f      	cmp	r1, #111	; 0x6f
 8005fd6:	d020      	beq.n	800601a <_printf_i+0xb2>
 8005fd8:	2970      	cmp	r1, #112	; 0x70
 8005fda:	d1dd      	bne.n	8005f98 <_printf_i+0x30>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	f043 0320 	orr.w	r3, r3, #32
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	e003      	b.n	8005fee <_printf_i+0x86>
 8005fe6:	2975      	cmp	r1, #117	; 0x75
 8005fe8:	d017      	beq.n	800601a <_printf_i+0xb2>
 8005fea:	2978      	cmp	r1, #120	; 0x78
 8005fec:	d1d4      	bne.n	8005f98 <_printf_i+0x30>
 8005fee:	2378      	movs	r3, #120	; 0x78
 8005ff0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff4:	4864      	ldr	r0, [pc, #400]	; (8006188 <_printf_i+0x220>)
 8005ff6:	e055      	b.n	80060a4 <_printf_i+0x13c>
 8005ff8:	6813      	ldr	r3, [r2, #0]
 8005ffa:	1d19      	adds	r1, r3, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6011      	str	r1, [r2, #0]
 8006000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006008:	2301      	movs	r3, #1
 800600a:	e08c      	b.n	8006126 <_printf_i+0x1be>
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6011      	str	r1, [r2, #0]
 8006010:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006014:	bf18      	it	ne
 8006016:	b21b      	sxthne	r3, r3
 8006018:	e7cf      	b.n	8005fba <_printf_i+0x52>
 800601a:	6813      	ldr	r3, [r2, #0]
 800601c:	6825      	ldr	r5, [r4, #0]
 800601e:	1d18      	adds	r0, r3, #4
 8006020:	6010      	str	r0, [r2, #0]
 8006022:	0628      	lsls	r0, r5, #24
 8006024:	d501      	bpl.n	800602a <_printf_i+0xc2>
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	e002      	b.n	8006030 <_printf_i+0xc8>
 800602a:	0668      	lsls	r0, r5, #25
 800602c:	d5fb      	bpl.n	8006026 <_printf_i+0xbe>
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	4854      	ldr	r0, [pc, #336]	; (8006184 <_printf_i+0x21c>)
 8006032:	296f      	cmp	r1, #111	; 0x6f
 8006034:	bf14      	ite	ne
 8006036:	220a      	movne	r2, #10
 8006038:	2208      	moveq	r2, #8
 800603a:	2100      	movs	r1, #0
 800603c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006040:	6865      	ldr	r5, [r4, #4]
 8006042:	60a5      	str	r5, [r4, #8]
 8006044:	2d00      	cmp	r5, #0
 8006046:	f2c0 8095 	blt.w	8006174 <_printf_i+0x20c>
 800604a:	6821      	ldr	r1, [r4, #0]
 800604c:	f021 0104 	bic.w	r1, r1, #4
 8006050:	6021      	str	r1, [r4, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d13d      	bne.n	80060d2 <_printf_i+0x16a>
 8006056:	2d00      	cmp	r5, #0
 8006058:	f040 808e 	bne.w	8006178 <_printf_i+0x210>
 800605c:	4665      	mov	r5, ip
 800605e:	2a08      	cmp	r2, #8
 8006060:	d10b      	bne.n	800607a <_printf_i+0x112>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	07db      	lsls	r3, r3, #31
 8006066:	d508      	bpl.n	800607a <_printf_i+0x112>
 8006068:	6923      	ldr	r3, [r4, #16]
 800606a:	6862      	ldr	r2, [r4, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	bfde      	ittt	le
 8006070:	2330      	movle	r3, #48	; 0x30
 8006072:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006076:	f105 35ff 	addle.w	r5, r5, #4294967295
 800607a:	ebac 0305 	sub.w	r3, ip, r5
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	f8cd 8000 	str.w	r8, [sp]
 8006084:	463b      	mov	r3, r7
 8006086:	aa03      	add	r2, sp, #12
 8006088:	4621      	mov	r1, r4
 800608a:	4630      	mov	r0, r6
 800608c:	f7ff fef6 	bl	8005e7c <_printf_common>
 8006090:	3001      	adds	r0, #1
 8006092:	d14d      	bne.n	8006130 <_printf_i+0x1c8>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	b005      	add	sp, #20
 800609a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800609e:	4839      	ldr	r0, [pc, #228]	; (8006184 <_printf_i+0x21c>)
 80060a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060a4:	6813      	ldr	r3, [r2, #0]
 80060a6:	6821      	ldr	r1, [r4, #0]
 80060a8:	1d1d      	adds	r5, r3, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6015      	str	r5, [r2, #0]
 80060ae:	060a      	lsls	r2, r1, #24
 80060b0:	d50b      	bpl.n	80060ca <_printf_i+0x162>
 80060b2:	07ca      	lsls	r2, r1, #31
 80060b4:	bf44      	itt	mi
 80060b6:	f041 0120 	orrmi.w	r1, r1, #32
 80060ba:	6021      	strmi	r1, [r4, #0]
 80060bc:	b91b      	cbnz	r3, 80060c6 <_printf_i+0x15e>
 80060be:	6822      	ldr	r2, [r4, #0]
 80060c0:	f022 0220 	bic.w	r2, r2, #32
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	2210      	movs	r2, #16
 80060c8:	e7b7      	b.n	800603a <_printf_i+0xd2>
 80060ca:	064d      	lsls	r5, r1, #25
 80060cc:	bf48      	it	mi
 80060ce:	b29b      	uxthmi	r3, r3
 80060d0:	e7ef      	b.n	80060b2 <_printf_i+0x14a>
 80060d2:	4665      	mov	r5, ip
 80060d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80060d8:	fb02 3311 	mls	r3, r2, r1, r3
 80060dc:	5cc3      	ldrb	r3, [r0, r3]
 80060de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80060e2:	460b      	mov	r3, r1
 80060e4:	2900      	cmp	r1, #0
 80060e6:	d1f5      	bne.n	80060d4 <_printf_i+0x16c>
 80060e8:	e7b9      	b.n	800605e <_printf_i+0xf6>
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	6825      	ldr	r5, [r4, #0]
 80060ee:	6961      	ldr	r1, [r4, #20]
 80060f0:	1d18      	adds	r0, r3, #4
 80060f2:	6010      	str	r0, [r2, #0]
 80060f4:	0628      	lsls	r0, r5, #24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	d501      	bpl.n	80060fe <_printf_i+0x196>
 80060fa:	6019      	str	r1, [r3, #0]
 80060fc:	e002      	b.n	8006104 <_printf_i+0x19c>
 80060fe:	066a      	lsls	r2, r5, #25
 8006100:	d5fb      	bpl.n	80060fa <_printf_i+0x192>
 8006102:	8019      	strh	r1, [r3, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	6123      	str	r3, [r4, #16]
 8006108:	4665      	mov	r5, ip
 800610a:	e7b9      	b.n	8006080 <_printf_i+0x118>
 800610c:	6813      	ldr	r3, [r2, #0]
 800610e:	1d19      	adds	r1, r3, #4
 8006110:	6011      	str	r1, [r2, #0]
 8006112:	681d      	ldr	r5, [r3, #0]
 8006114:	6862      	ldr	r2, [r4, #4]
 8006116:	2100      	movs	r1, #0
 8006118:	4628      	mov	r0, r5
 800611a:	f7fa f869 	bl	80001f0 <memchr>
 800611e:	b108      	cbz	r0, 8006124 <_printf_i+0x1bc>
 8006120:	1b40      	subs	r0, r0, r5
 8006122:	6060      	str	r0, [r4, #4]
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	6123      	str	r3, [r4, #16]
 8006128:	2300      	movs	r3, #0
 800612a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800612e:	e7a7      	b.n	8006080 <_printf_i+0x118>
 8006130:	6923      	ldr	r3, [r4, #16]
 8006132:	462a      	mov	r2, r5
 8006134:	4639      	mov	r1, r7
 8006136:	4630      	mov	r0, r6
 8006138:	47c0      	blx	r8
 800613a:	3001      	adds	r0, #1
 800613c:	d0aa      	beq.n	8006094 <_printf_i+0x12c>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	079b      	lsls	r3, r3, #30
 8006142:	d413      	bmi.n	800616c <_printf_i+0x204>
 8006144:	68e0      	ldr	r0, [r4, #12]
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	4298      	cmp	r0, r3
 800614a:	bfb8      	it	lt
 800614c:	4618      	movlt	r0, r3
 800614e:	e7a3      	b.n	8006098 <_printf_i+0x130>
 8006150:	2301      	movs	r3, #1
 8006152:	464a      	mov	r2, r9
 8006154:	4639      	mov	r1, r7
 8006156:	4630      	mov	r0, r6
 8006158:	47c0      	blx	r8
 800615a:	3001      	adds	r0, #1
 800615c:	d09a      	beq.n	8006094 <_printf_i+0x12c>
 800615e:	3501      	adds	r5, #1
 8006160:	68e3      	ldr	r3, [r4, #12]
 8006162:	9a03      	ldr	r2, [sp, #12]
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	42ab      	cmp	r3, r5
 8006168:	dcf2      	bgt.n	8006150 <_printf_i+0x1e8>
 800616a:	e7eb      	b.n	8006144 <_printf_i+0x1dc>
 800616c:	2500      	movs	r5, #0
 800616e:	f104 0919 	add.w	r9, r4, #25
 8006172:	e7f5      	b.n	8006160 <_printf_i+0x1f8>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1ac      	bne.n	80060d2 <_printf_i+0x16a>
 8006178:	7803      	ldrb	r3, [r0, #0]
 800617a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800617e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006182:	e76c      	b.n	800605e <_printf_i+0xf6>
 8006184:	08006343 	.word	0x08006343
 8006188:	08006354 	.word	0x08006354

0800618c <_sbrk_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4c06      	ldr	r4, [pc, #24]	; (80061a8 <_sbrk_r+0x1c>)
 8006190:	2300      	movs	r3, #0
 8006192:	4605      	mov	r5, r0
 8006194:	4608      	mov	r0, r1
 8006196:	6023      	str	r3, [r4, #0]
 8006198:	f7ff fa92 	bl	80056c0 <_sbrk>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d102      	bne.n	80061a6 <_sbrk_r+0x1a>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	b103      	cbz	r3, 80061a6 <_sbrk_r+0x1a>
 80061a4:	602b      	str	r3, [r5, #0]
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	20000478 	.word	0x20000478

080061ac <__ascii_wctomb>:
 80061ac:	b149      	cbz	r1, 80061c2 <__ascii_wctomb+0x16>
 80061ae:	2aff      	cmp	r2, #255	; 0xff
 80061b0:	bf85      	ittet	hi
 80061b2:	238a      	movhi	r3, #138	; 0x8a
 80061b4:	6003      	strhi	r3, [r0, #0]
 80061b6:	700a      	strbls	r2, [r1, #0]
 80061b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80061bc:	bf98      	it	ls
 80061be:	2001      	movls	r0, #1
 80061c0:	4770      	bx	lr
 80061c2:	4608      	mov	r0, r1
 80061c4:	4770      	bx	lr

080061c6 <memmove>:
 80061c6:	4288      	cmp	r0, r1
 80061c8:	b510      	push	{r4, lr}
 80061ca:	eb01 0302 	add.w	r3, r1, r2
 80061ce:	d807      	bhi.n	80061e0 <memmove+0x1a>
 80061d0:	1e42      	subs	r2, r0, #1
 80061d2:	4299      	cmp	r1, r3
 80061d4:	d00a      	beq.n	80061ec <memmove+0x26>
 80061d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80061de:	e7f8      	b.n	80061d2 <memmove+0xc>
 80061e0:	4283      	cmp	r3, r0
 80061e2:	d9f5      	bls.n	80061d0 <memmove+0xa>
 80061e4:	1881      	adds	r1, r0, r2
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	42d3      	cmn	r3, r2
 80061ea:	d100      	bne.n	80061ee <memmove+0x28>
 80061ec:	bd10      	pop	{r4, pc}
 80061ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80061f6:	e7f7      	b.n	80061e8 <memmove+0x22>

080061f8 <__malloc_lock>:
 80061f8:	4770      	bx	lr

080061fa <__malloc_unlock>:
 80061fa:	4770      	bx	lr

080061fc <_realloc_r>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	4607      	mov	r7, r0
 8006200:	4614      	mov	r4, r2
 8006202:	460e      	mov	r6, r1
 8006204:	b921      	cbnz	r1, 8006210 <_realloc_r+0x14>
 8006206:	4611      	mov	r1, r2
 8006208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800620c:	f7ff bc8a 	b.w	8005b24 <_malloc_r>
 8006210:	b922      	cbnz	r2, 800621c <_realloc_r+0x20>
 8006212:	f7ff fc39 	bl	8005a88 <_free_r>
 8006216:	4625      	mov	r5, r4
 8006218:	4628      	mov	r0, r5
 800621a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800621c:	f000 f814 	bl	8006248 <_malloc_usable_size_r>
 8006220:	42a0      	cmp	r0, r4
 8006222:	d20f      	bcs.n	8006244 <_realloc_r+0x48>
 8006224:	4621      	mov	r1, r4
 8006226:	4638      	mov	r0, r7
 8006228:	f7ff fc7c 	bl	8005b24 <_malloc_r>
 800622c:	4605      	mov	r5, r0
 800622e:	2800      	cmp	r0, #0
 8006230:	d0f2      	beq.n	8006218 <_realloc_r+0x1c>
 8006232:	4631      	mov	r1, r6
 8006234:	4622      	mov	r2, r4
 8006236:	f7ff fadd 	bl	80057f4 <memcpy>
 800623a:	4631      	mov	r1, r6
 800623c:	4638      	mov	r0, r7
 800623e:	f7ff fc23 	bl	8005a88 <_free_r>
 8006242:	e7e9      	b.n	8006218 <_realloc_r+0x1c>
 8006244:	4635      	mov	r5, r6
 8006246:	e7e7      	b.n	8006218 <_realloc_r+0x1c>

08006248 <_malloc_usable_size_r>:
 8006248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800624c:	1f18      	subs	r0, r3, #4
 800624e:	2b00      	cmp	r3, #0
 8006250:	bfbc      	itt	lt
 8006252:	580b      	ldrlt	r3, [r1, r0]
 8006254:	18c0      	addlt	r0, r0, r3
 8006256:	4770      	bx	lr

08006258 <_init>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr

08006264 <_fini>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	bf00      	nop
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr
