
NUCLEO-F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  0800dc28  0800dc28  0001dc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e730  0800e730  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e730  0800e730  0001e730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e738  0800e738  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e738  0800e738  0001e738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e73c  0800e73c  0001e73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000080  0800e740  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noinit       00000044  20000000  20000000  00030000  2**2
                  ALLOC
 10 .ip_code      00000000  08060000  08060000  0002025c  2**0
                  CONTENTS
 11 .bss          0000066c  2000025c  2000025c  0002025c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200008c8  200008c8  0002025c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025bbd  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004333  00000000  00000000  00045e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001ea0  00000000  00000000  0004a180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c88  00000000  00000000  0004c020  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001b741  00000000  00000000  0004dca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001b05e  00000000  00000000  000693e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0009d36b  00000000  00000000  00084447  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001217b2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008a2c  00000000  00000000  00121830  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc10 	.word	0x0800dc10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	0800dc10 	.word	0x0800dc10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f94b 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f00a f868 	bl	800afc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f992 	bl	8001244 <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f940 	bl	80011bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000088 	.word	0x20000088
 8000f54:	20000084 	.word	0x20000084
 8000f58:	20000080 	.word	0x20000080

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000084 	.word	0x20000084
 8000f80:	200006e4 	.word	0x200006e4

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200006e4 	.word	0x200006e4

08000f9c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_SuspendTick+0x1c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_SuspendTick+0x1c>)
 8000fa6:	f023 0302 	bic.w	r3, r3, #2
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_ResumeTick+0x1c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_ResumeTick+0x1c>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b07      	cmp	r3, #7
 8001188:	d00f      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b06      	cmp	r3, #6
 800118e:	d00c      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d009      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d006      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d003      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011a2:	2192      	movs	r1, #146	; 0x92
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80011a6:	f009 fe41 	bl	800ae2c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff16 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	0800dc28 	.word	0x0800dc28

080011bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d903      	bls.n	80011dc <HAL_NVIC_SetPriority+0x20>
 80011d4:	21aa      	movs	r1, #170	; 0xaa
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <HAL_NVIC_SetPriority+0x54>)
 80011d8:	f009 fe28 	bl	800ae2c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	d903      	bls.n	80011ea <HAL_NVIC_SetPriority+0x2e>
 80011e2:	21ab      	movs	r1, #171	; 0xab
 80011e4:	480a      	ldr	r0, [pc, #40]	; (8001210 <HAL_NVIC_SetPriority+0x54>)
 80011e6:	f009 fe21 	bl	800ae2c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ea:	f7ff ff1b 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff ff6b 	bl	80010d0 <NVIC_EncodePriority>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff3a 	bl	800107c <__NVIC_SetPriority>
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	0800dc28 	.word	0x0800dc28

08001214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	da03      	bge.n	800122e <HAL_NVIC_EnableIRQ+0x1a>
 8001226:	21be      	movs	r1, #190	; 0xbe
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_NVIC_EnableIRQ+0x2c>)
 800122a:	f009 fdff 	bl	800ae2c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff04 	bl	8001040 <__NVIC_EnableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	0800dc28 	.word	0x0800dc28

08001244 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff73 	bl	8001138 <SysTick_Config>
 8001252:	4603      	mov	r3, r0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e017      	b.n	800129e <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <HAL_CRC_Init+0x4c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d003      	beq.n	8001280 <HAL_CRC_Init+0x24>
 8001278:	2168      	movs	r1, #104	; 0x68
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <HAL_CRC_Init+0x50>)
 800127c:	f009 fdd6 	bl	800ae2c <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	795b      	ldrb	r3, [r3, #5]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f007 feab 	bl	8008fec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023000 	.word	0x40023000
 80012ac:	0800dc64 	.word	0x0800dc64

080012b0 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2202      	movs	r2, #2
 80012c4:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0201 	orr.w	r2, r2, #1
 80012d4:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e00a      	b.n	80012f2 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	441a      	add	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d3f0      	bcc.n	80012dc <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2201      	movs	r2, #1
 8001306:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001308:	693b      	ldr	r3, [r7, #16]
}
 800130a:	4618      	mov	r0, r3
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff fe2e 	bl	8000f84 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e204      	b.n	800173e <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a97      	ldr	r2, [pc, #604]	; (8001598 <HAL_DMA_Init+0x280>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d04e      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a96      	ldr	r2, [pc, #600]	; (800159c <HAL_DMA_Init+0x284>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d049      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a94      	ldr	r2, [pc, #592]	; (80015a0 <HAL_DMA_Init+0x288>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d044      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a93      	ldr	r2, [pc, #588]	; (80015a4 <HAL_DMA_Init+0x28c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d03f      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a91      	ldr	r2, [pc, #580]	; (80015a8 <HAL_DMA_Init+0x290>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d03a      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a90      	ldr	r2, [pc, #576]	; (80015ac <HAL_DMA_Init+0x294>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d035      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a8e      	ldr	r2, [pc, #568]	; (80015b0 <HAL_DMA_Init+0x298>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d030      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a8d      	ldr	r2, [pc, #564]	; (80015b4 <HAL_DMA_Init+0x29c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d02b      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a8b      	ldr	r2, [pc, #556]	; (80015b8 <HAL_DMA_Init+0x2a0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d026      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a8a      	ldr	r2, [pc, #552]	; (80015bc <HAL_DMA_Init+0x2a4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d021      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a88      	ldr	r2, [pc, #544]	; (80015c0 <HAL_DMA_Init+0x2a8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d01c      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a87      	ldr	r2, [pc, #540]	; (80015c4 <HAL_DMA_Init+0x2ac>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d017      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a85      	ldr	r2, [pc, #532]	; (80015c8 <HAL_DMA_Init+0x2b0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d012      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a84      	ldr	r2, [pc, #528]	; (80015cc <HAL_DMA_Init+0x2b4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00d      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a82      	ldr	r2, [pc, #520]	; (80015d0 <HAL_DMA_Init+0x2b8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d008      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a81      	ldr	r2, [pc, #516]	; (80015d4 <HAL_DMA_Init+0x2bc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d003      	beq.n	80013dc <HAL_DMA_Init+0xc4>
 80013d4:	21b8      	movs	r1, #184	; 0xb8
 80013d6:	4880      	ldr	r0, [pc, #512]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 80013d8:	f009 fd28 	bl	800ae2c <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d026      	beq.n	8001432 <HAL_DMA_Init+0x11a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80013ec:	d021      	beq.n	8001432 <HAL_DMA_Init+0x11a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013f6:	d01c      	beq.n	8001432 <HAL_DMA_Init+0x11a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001400:	d017      	beq.n	8001432 <HAL_DMA_Init+0x11a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800140a:	d012      	beq.n	8001432 <HAL_DMA_Init+0x11a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001414:	d00d      	beq.n	8001432 <HAL_DMA_Init+0x11a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800141e:	d008      	beq.n	8001432 <HAL_DMA_Init+0x11a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001428:	d003      	beq.n	8001432 <HAL_DMA_Init+0x11a>
 800142a:	21b9      	movs	r1, #185	; 0xb9
 800142c:	486a      	ldr	r0, [pc, #424]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 800142e:	f009 fcfd 	bl	800ae2c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_DMA_Init+0x13a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b40      	cmp	r3, #64	; 0x40
 8001440:	d007      	beq.n	8001452 <HAL_DMA_Init+0x13a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b80      	cmp	r3, #128	; 0x80
 8001448:	d003      	beq.n	8001452 <HAL_DMA_Init+0x13a>
 800144a:	21ba      	movs	r1, #186	; 0xba
 800144c:	4862      	ldr	r0, [pc, #392]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 800144e:	f009 fced 	bl	800ae2c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800145a:	d007      	beq.n	800146c <HAL_DMA_Init+0x154>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_DMA_Init+0x154>
 8001464:	21bb      	movs	r1, #187	; 0xbb
 8001466:	485c      	ldr	r0, [pc, #368]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 8001468:	f009 fce0 	bl	800ae2c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001474:	d007      	beq.n	8001486 <HAL_DMA_Init+0x16e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_DMA_Init+0x16e>
 800147e:	21bc      	movs	r1, #188	; 0xbc
 8001480:	4855      	ldr	r0, [pc, #340]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 8001482:	f009 fcd3 	bl	800ae2c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00d      	beq.n	80014aa <HAL_DMA_Init+0x192>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001496:	d008      	beq.n	80014aa <HAL_DMA_Init+0x192>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a0:	d003      	beq.n	80014aa <HAL_DMA_Init+0x192>
 80014a2:	21bd      	movs	r1, #189	; 0xbd
 80014a4:	484c      	ldr	r0, [pc, #304]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 80014a6:	f009 fcc1 	bl	800ae2c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00d      	beq.n	80014ce <HAL_DMA_Init+0x1b6>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ba:	d008      	beq.n	80014ce <HAL_DMA_Init+0x1b6>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014c4:	d003      	beq.n	80014ce <HAL_DMA_Init+0x1b6>
 80014c6:	21be      	movs	r1, #190	; 0xbe
 80014c8:	4843      	ldr	r0, [pc, #268]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 80014ca:	f009 fcaf 	bl	800ae2c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_DMA_Init+0x1d8>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014de:	d007      	beq.n	80014f0 <HAL_DMA_Init+0x1d8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d003      	beq.n	80014f0 <HAL_DMA_Init+0x1d8>
 80014e8:	21bf      	movs	r1, #191	; 0xbf
 80014ea:	483b      	ldr	r0, [pc, #236]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 80014ec:	f009 fc9e 	bl	800ae2c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d012      	beq.n	800151e <HAL_DMA_Init+0x206>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d00d      	beq.n	800151e <HAL_DMA_Init+0x206>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800150a:	d008      	beq.n	800151e <HAL_DMA_Init+0x206>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001514:	d003      	beq.n	800151e <HAL_DMA_Init+0x206>
 8001516:	21c0      	movs	r1, #192	; 0xc0
 8001518:	482f      	ldr	r0, [pc, #188]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 800151a:	f009 fc87 	bl	800ae2c <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <HAL_DMA_Init+0x21e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	2b04      	cmp	r3, #4
 800152c:	d003      	beq.n	8001536 <HAL_DMA_Init+0x21e>
 800152e:	21c1      	movs	r1, #193	; 0xc1
 8001530:	4829      	ldr	r0, [pc, #164]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 8001532:	f009 fc7b 	bl	800ae2c <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	2b00      	cmp	r3, #0
 800153c:	d065      	beq.n	800160a <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00f      	beq.n	8001566 <HAL_DMA_Init+0x24e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00b      	beq.n	8001566 <HAL_DMA_Init+0x24e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	2b02      	cmp	r3, #2
 8001554:	d007      	beq.n	8001566 <HAL_DMA_Init+0x24e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	2b03      	cmp	r3, #3
 800155c:	d003      	beq.n	8001566 <HAL_DMA_Init+0x24e>
 800155e:	21c6      	movs	r1, #198	; 0xc6
 8001560:	481d      	ldr	r0, [pc, #116]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 8001562:	f009 fc63 	bl	800ae2c <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	2b00      	cmp	r3, #0
 800156c:	d036      	beq.n	80015dc <HAL_DMA_Init+0x2c4>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001576:	d031      	beq.n	80015dc <HAL_DMA_Init+0x2c4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d02c      	beq.n	80015dc <HAL_DMA_Init+0x2c4>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800158a:	d027      	beq.n	80015dc <HAL_DMA_Init+0x2c4>
 800158c:	21c7      	movs	r1, #199	; 0xc7
 800158e:	4812      	ldr	r0, [pc, #72]	; (80015d8 <HAL_DMA_Init+0x2c0>)
 8001590:	f009 fc4c 	bl	800ae2c <assert_failed>
 8001594:	e022      	b.n	80015dc <HAL_DMA_Init+0x2c4>
 8001596:	bf00      	nop
 8001598:	40026010 	.word	0x40026010
 800159c:	40026028 	.word	0x40026028
 80015a0:	40026040 	.word	0x40026040
 80015a4:	40026058 	.word	0x40026058
 80015a8:	40026070 	.word	0x40026070
 80015ac:	40026088 	.word	0x40026088
 80015b0:	400260a0 	.word	0x400260a0
 80015b4:	400260b8 	.word	0x400260b8
 80015b8:	40026410 	.word	0x40026410
 80015bc:	40026428 	.word	0x40026428
 80015c0:	40026440 	.word	0x40026440
 80015c4:	40026458 	.word	0x40026458
 80015c8:	40026470 	.word	0x40026470
 80015cc:	40026488 	.word	0x40026488
 80015d0:	400264a0 	.word	0x400264a0
 80015d4:	400264b8 	.word	0x400264b8
 80015d8:	0800dc9c 	.word	0x0800dc9c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d012      	beq.n	800160a <HAL_DMA_Init+0x2f2>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015ec:	d00d      	beq.n	800160a <HAL_DMA_Init+0x2f2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Init+0x2f2>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001600:	d003      	beq.n	800160a <HAL_DMA_Init+0x2f2>
 8001602:	21c8      	movs	r1, #200	; 0xc8
 8001604:	4850      	ldr	r0, [pc, #320]	; (8001748 <HAL_DMA_Init+0x430>)
 8001606:	f009 fc11 	bl	800ae2c <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2202      	movs	r2, #2
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162a:	e00f      	b.n	800164c <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162c:	f7ff fcaa 	bl	8000f84 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b05      	cmp	r3, #5
 8001638:	d908      	bls.n	800164c <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2220      	movs	r2, #32
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e078      	b.n	800173e <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1e8      	bne.n	800162c <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_DMA_Init+0x434>)
 8001666:	4013      	ands	r3, r2
 8001668:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d107      	bne.n	80016b6 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4313      	orrs	r3, r2
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f023 0307 	bic.w	r3, r3, #7
 80016cc:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d117      	bne.n	8001710 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00e      	beq.n	8001710 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 faa2 	bl	8001c3c <DMA_CheckFifoParam>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2240      	movs	r2, #64	; 0x40
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800170c:	2301      	movs	r3, #1
 800170e:	e016      	b.n	800173e <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fa59 	bl	8001bd0 <DMA_CalcBaseAndBitshift>
 800171e:	4603      	mov	r3, r0
 8001720:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	223f      	movs	r2, #63	; 0x3f
 8001728:	409a      	lsls	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	0800dc9c 	.word	0x0800dc9c
 800174c:	f010803f 	.word	0xf010803f

08001750 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_DMA_Start_IT+0x26>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d304      	bcc.n	8001780 <HAL_DMA_Start_IT+0x30>
 8001776:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800177a:	4827      	ldr	r0, [pc, #156]	; (8001818 <HAL_DMA_Start_IT+0xc8>)
 800177c:	f009 fb56 	bl	800ae2c <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_DMA_Start_IT+0x3e>
 800178a:	2302      	movs	r3, #2
 800178c:	e040      	b.n	8001810 <HAL_DMA_Start_IT+0xc0>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d12f      	bne.n	8001802 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2202      	movs	r2, #2
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f9dc 	bl	8001b74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	223f      	movs	r2, #63	; 0x3f
 80017c2:	409a      	lsls	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0216 	orr.w	r2, r2, #22
 80017d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0208 	orr.w	r2, r2, #8
 80017ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e005      	b.n	800180e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800180a:	2302      	movs	r3, #2
 800180c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800180e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	0800dc9c 	.word	0x0800dc9c

0800181c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d004      	beq.n	800183a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00c      	b.n	8001854 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2205      	movs	r2, #5
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800186c:	4b92      	ldr	r3, [pc, #584]	; (8001ab8 <HAL_DMA_IRQHandler+0x258>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a92      	ldr	r2, [pc, #584]	; (8001abc <HAL_DMA_IRQHandler+0x25c>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0a9b      	lsrs	r3, r3, #10
 8001878:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188a:	2208      	movs	r2, #8
 800188c:	409a      	lsls	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01a      	beq.n	80018cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0204 	bic.w	r2, r2, #4
 80018b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	2208      	movs	r2, #8
 80018ba:	409a      	lsls	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	f043 0201 	orr.w	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2201      	movs	r2, #1
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d012      	beq.n	8001902 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	2201      	movs	r2, #1
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fa:	f043 0202 	orr.w	r2, r3, #2
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2204      	movs	r2, #4
 8001908:	409a      	lsls	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d012      	beq.n	8001938 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	2204      	movs	r2, #4
 8001926:	409a      	lsls	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	f043 0204 	orr.w	r2, r3, #4
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2210      	movs	r2, #16
 800193e:	409a      	lsls	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d043      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d03c      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	2210      	movs	r2, #16
 800195c:	409a      	lsls	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d018      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d108      	bne.n	8001990 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d024      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
 800198e:	e01f      	b.n	80019d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01b      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
 80019a0:	e016      	b.n	80019d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0208 	bic.w	r2, r2, #8
 80019be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2220      	movs	r2, #32
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 808e 	beq.w	8001afe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8086 	beq.w	8001afe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2220      	movs	r2, #32
 80019f8:	409a      	lsls	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d136      	bne.n	8001a78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0216 	bic.w	r2, r2, #22
 8001a18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <HAL_DMA_IRQHandler+0x1da>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0208 	bic.w	r2, r2, #8
 8001a48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	223f      	movs	r2, #63	; 0x3f
 8001a50:	409a      	lsls	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d07d      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
        }
        return;
 8001a76:	e078      	b.n	8001b6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01c      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d108      	bne.n	8001aa6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d030      	beq.n	8001afe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	e02b      	b.n	8001afe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d027      	beq.n	8001afe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
 8001ab6:	e022      	b.n	8001afe <HAL_DMA_IRQHandler+0x29e>
 8001ab8:	20000088 	.word	0x20000088
 8001abc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0210 	bic.w	r2, r2, #16
 8001adc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d032      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d022      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2205      	movs	r2, #5
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d307      	bcc.n	8001b46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f2      	bne.n	8001b2a <HAL_DMA_IRQHandler+0x2ca>
 8001b44:	e000      	b.n	8001b48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b46:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
 8001b68:	e000      	b.n	8001b6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b6a:	bf00      	nop
    }
  }
}
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop

08001b74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b40      	cmp	r3, #64	; 0x40
 8001ba0:	d108      	bne.n	8001bb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bb2:	e007      	b.n	8001bc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	3b10      	subs	r3, #16
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <DMA_CalcBaseAndBitshift+0x64>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bea:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <DMA_CalcBaseAndBitshift+0x68>)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d909      	bls.n	8001c12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c06:	f023 0303 	bic.w	r3, r3, #3
 8001c0a:	1d1a      	adds	r2, r3, #4
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c10:	e007      	b.n	8001c22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	aaaaaaab 	.word	0xaaaaaaab
 8001c38:	0800e3cc 	.word	0x0800e3cc

08001c3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11f      	bne.n	8001c96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d855      	bhi.n	8001d08 <DMA_CheckFifoParam+0xcc>
 8001c5c:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <DMA_CheckFifoParam+0x28>)
 8001c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c62:	bf00      	nop
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001c87 	.word	0x08001c87
 8001c6c:	08001c75 	.word	0x08001c75
 8001c70:	08001d09 	.word	0x08001d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d045      	beq.n	8001d0c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c84:	e042      	b.n	8001d0c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c8e:	d13f      	bne.n	8001d10 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c94:	e03c      	b.n	8001d10 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c9e:	d121      	bne.n	8001ce4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d836      	bhi.n	8001d14 <DMA_CheckFifoParam+0xd8>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <DMA_CheckFifoParam+0x70>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001cbd 	.word	0x08001cbd
 8001cb0:	08001cc3 	.word	0x08001cc3
 8001cb4:	08001cbd 	.word	0x08001cbd
 8001cb8:	08001cd5 	.word	0x08001cd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc0:	e02f      	b.n	8001d22 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d024      	beq.n	8001d18 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cd2:	e021      	b.n	8001d18 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cdc:	d11e      	bne.n	8001d1c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ce2:	e01b      	b.n	8001d1c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d902      	bls.n	8001cf0 <DMA_CheckFifoParam+0xb4>
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d003      	beq.n	8001cf6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cee:	e018      	b.n	8001d22 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf4:	e015      	b.n	8001d22 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00e      	beq.n	8001d20 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
      break;
 8001d06:	e00b      	b.n	8001d20 <DMA_CheckFifoParam+0xe4>
      break;
 8001d08:	bf00      	nop
 8001d0a:	e00a      	b.n	8001d22 <DMA_CheckFifoParam+0xe6>
      break;
 8001d0c:	bf00      	nop
 8001d0e:	e008      	b.n	8001d22 <DMA_CheckFifoParam+0xe6>
      break;
 8001d10:	bf00      	nop
 8001d12:	e006      	b.n	8001d22 <DMA_CheckFifoParam+0xe6>
      break;
 8001d14:	bf00      	nop
 8001d16:	e004      	b.n	8001d22 <DMA_CheckFifoParam+0xe6>
      break;
 8001d18:	bf00      	nop
 8001d1a:	e002      	b.n	8001d22 <DMA_CheckFifoParam+0xe6>
      break;   
 8001d1c:	bf00      	nop
 8001d1e:	e000      	b.n	8001d22 <DMA_CheckFifoParam+0xe6>
      break;
 8001d20:	bf00      	nop
    }
  } 
  
  return status; 
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_FLASH_Program+0xc0>)
 8001d44:	7e1b      	ldrb	r3, [r3, #24]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_FLASH_Program+0x1e>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e04b      	b.n	8001de6 <HAL_FLASH_Program+0xb6>
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <HAL_FLASH_Program+0xc0>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_FLASH_Program+0x44>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d009      	beq.n	8001d74 <HAL_FLASH_Program+0x44>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d006      	beq.n	8001d74 <HAL_FLASH_Program+0x44>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d003      	beq.n	8001d74 <HAL_FLASH_Program+0x44>
 8001d6c:	21a4      	movs	r1, #164	; 0xa4
 8001d6e:	4821      	ldr	r0, [pc, #132]	; (8001df4 <HAL_FLASH_Program+0xc4>)
 8001d70:	f009 f85c 	bl	800ae2c <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d78:	f000 f8b2 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d12b      	bne.n	8001dde <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001d8c:	783b      	ldrb	r3, [r7, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	68b8      	ldr	r0, [r7, #8]
 8001d92:	f000 f9ad 	bl	80020f0 <FLASH_Program_Byte>
 8001d96:	e016      	b.n	8001dc6 <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001d9e:	883b      	ldrh	r3, [r7, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	68b8      	ldr	r0, [r7, #8]
 8001da4:	f000 f966 	bl	8002074 <FLASH_Program_HalfWord>
 8001da8:	e00d      	b.n	8001dc6 <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d105      	bne.n	8001dbc <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	68b8      	ldr	r0, [r7, #8]
 8001db6:	f000 f91f 	bl	8001ff8 <FLASH_Program_Word>
 8001dba:	e004      	b.n	8001dc6 <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dc0:	68b8      	ldr	r0, [r7, #8]
 8001dc2:	f000 f8cd 	bl	8001f60 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dca:	f000 f889 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_FLASH_Program+0xc8>)
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_FLASH_Program+0xc8>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_FLASH_Program+0xc0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200006e8 	.word	0x200006e8
 8001df4:	0800dcd4 	.word	0x0800dcd4
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_FLASH_Unlock+0x38>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da0b      	bge.n	8001e26 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_FLASH_Unlock+0x38>)
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_FLASH_Unlock+0x3c>)
 8001e12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_FLASH_Unlock+0x38>)
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_FLASH_Unlock+0x40>)
 8001e18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_FLASH_Unlock+0x38>)
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da01      	bge.n	8001e26 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e26:	79fb      	ldrb	r3, [r7, #7]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40023c00 	.word	0x40023c00
 8001e38:	45670123 	.word	0x45670123
 8001e3c:	cdef89ab 	.word	0xcdef89ab

08001e40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_FLASH_Lock+0x1c>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_FLASH_Lock+0x1c>)
 8001e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e4e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40023c00 	.word	0x40023c00

08001e60 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_FLASH_OB_Unlock+0x2c>)
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_FLASH_OB_Unlock+0x2c>)
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <HAL_FLASH_OB_Unlock+0x30>)
 8001e74:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_FLASH_OB_Unlock+0x2c>)
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_FLASH_OB_Unlock+0x34>)
 8001e7a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40023c00 	.word	0x40023c00
 8001e90:	08192a3b 	.word	0x08192a3b
 8001e94:	4c5d6e7f 	.word	0x4c5d6e7f

08001e98 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_FLASH_OB_Lock+0x1c>)
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_FLASH_OB_Lock+0x1c>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_FLASH_OB_Launch+0x24>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_FLASH_OB_Launch+0x24>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001ecc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ed0:	f000 f806 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c14 	.word	0x40023c14

08001ee0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <FLASH_WaitForLastOperation+0x78>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef2:	f7ff f847 	bl	8000f84 <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ef8:	e010      	b.n	8001f1c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d00c      	beq.n	8001f1c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <FLASH_WaitForLastOperation+0x38>
 8001f08:	f7ff f83c 	bl	8000f84 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d201      	bcs.n	8001f1c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e019      	b.n	8001f50 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <FLASH_WaitForLastOperation+0x7c>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e8      	bne.n	8001efa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <FLASH_WaitForLastOperation+0x7c>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <FLASH_WaitForLastOperation+0x7c>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <FLASH_WaitForLastOperation+0x7c>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f46:	f000 f90f 	bl	8002168 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
  
}  
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200006e8 	.word	0x200006e8
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f72:	d303      	bcc.n	8001f7c <FLASH_Program_DoubleWord+0x1c>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <FLASH_Program_DoubleWord+0x84>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d90c      	bls.n	8001f96 <FLASH_Program_DoubleWord+0x36>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <FLASH_Program_DoubleWord+0x88>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d903      	bls.n	8001f8c <FLASH_Program_DoubleWord+0x2c>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <FLASH_Program_DoubleWord+0x8c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d904      	bls.n	8001f96 <FLASH_Program_DoubleWord+0x36>
 8001f8c:	f240 2167 	movw	r1, #615	; 0x267
 8001f90:	4817      	ldr	r0, [pc, #92]	; (8001ff0 <FLASH_Program_DoubleWord+0x90>)
 8001f92:	f008 ff4b 	bl	800ae2c <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <FLASH_Program_DoubleWord+0x94>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <FLASH_Program_DoubleWord+0x94>)
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <FLASH_Program_DoubleWord+0x94>)
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <FLASH_Program_DoubleWord+0x94>)
 8001fa8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001fac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <FLASH_Program_DoubleWord+0x94>)
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <FLASH_Program_DoubleWord+0x94>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001fc0:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001fc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	f04f 0400 	mov.w	r4, #0
 8001fd0:	0013      	movs	r3, r2
 8001fd2:	2400      	movs	r4, #0
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	3204      	adds	r2, #4
 8001fd8:	6013      	str	r3, [r2, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	0807ffff 	.word	0x0807ffff
 8001fe8:	1fff77ff 	.word	0x1fff77ff
 8001fec:	1fff7a0f 	.word	0x1fff7a0f
 8001ff0:	0800dcd4 	.word	0x0800dcd4
 8001ff4:	40023c00 	.word	0x40023c00

08001ff8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002008:	d303      	bcc.n	8002012 <FLASH_Program_Word+0x1a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <FLASH_Program_Word+0x68>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d90c      	bls.n	800202c <FLASH_Program_Word+0x34>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a13      	ldr	r2, [pc, #76]	; (8002064 <FLASH_Program_Word+0x6c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d903      	bls.n	8002022 <FLASH_Program_Word+0x2a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a12      	ldr	r2, [pc, #72]	; (8002068 <FLASH_Program_Word+0x70>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d904      	bls.n	800202c <FLASH_Program_Word+0x34>
 8002022:	f240 2189 	movw	r1, #649	; 0x289
 8002026:	4811      	ldr	r0, [pc, #68]	; (800206c <FLASH_Program_Word+0x74>)
 8002028:	f008 ff00 	bl	800ae2c <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <FLASH_Program_Word+0x78>)
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <FLASH_Program_Word+0x78>)
 8002032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002036:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <FLASH_Program_Word+0x78>)
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <FLASH_Program_Word+0x78>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <FLASH_Program_Word+0x78>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a09      	ldr	r2, [pc, #36]	; (8002070 <FLASH_Program_Word+0x78>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	601a      	str	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	0807ffff 	.word	0x0807ffff
 8002064:	1fff77ff 	.word	0x1fff77ff
 8002068:	1fff7a0f 	.word	0x1fff7a0f
 800206c:	0800dcd4 	.word	0x0800dcd4
 8002070:	40023c00 	.word	0x40023c00

08002074 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002086:	d303      	bcc.n	8002090 <FLASH_Program_HalfWord+0x1c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <FLASH_Program_HalfWord+0x68>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d90c      	bls.n	80020aa <FLASH_Program_HalfWord+0x36>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <FLASH_Program_HalfWord+0x6c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d903      	bls.n	80020a0 <FLASH_Program_HalfWord+0x2c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <FLASH_Program_HalfWord+0x70>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d904      	bls.n	80020aa <FLASH_Program_HalfWord+0x36>
 80020a0:	f240 21a2 	movw	r1, #674	; 0x2a2
 80020a4:	4810      	ldr	r0, [pc, #64]	; (80020e8 <FLASH_Program_HalfWord+0x74>)
 80020a6:	f008 fec1 	bl	800ae2c <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <FLASH_Program_HalfWord+0x78>)
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <FLASH_Program_HalfWord+0x78>)
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <FLASH_Program_HalfWord+0x78>)
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <FLASH_Program_HalfWord+0x78>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <FLASH_Program_HalfWord+0x78>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <FLASH_Program_HalfWord+0x78>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	801a      	strh	r2, [r3, #0]
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0807ffff 	.word	0x0807ffff
 80020e0:	1fff77ff 	.word	0x1fff77ff
 80020e4:	1fff7a0f 	.word	0x1fff7a0f
 80020e8:	0800dcd4 	.word	0x0800dcd4
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002102:	d303      	bcc.n	800210c <FLASH_Program_Byte+0x1c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a13      	ldr	r2, [pc, #76]	; (8002154 <FLASH_Program_Byte+0x64>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d90c      	bls.n	8002126 <FLASH_Program_Byte+0x36>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <FLASH_Program_Byte+0x68>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d903      	bls.n	800211c <FLASH_Program_Byte+0x2c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a11      	ldr	r2, [pc, #68]	; (800215c <FLASH_Program_Byte+0x6c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d904      	bls.n	8002126 <FLASH_Program_Byte+0x36>
 800211c:	f240 21bb 	movw	r1, #699	; 0x2bb
 8002120:	480f      	ldr	r0, [pc, #60]	; (8002160 <FLASH_Program_Byte+0x70>)
 8002122:	f008 fe83 	bl	800ae2c <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <FLASH_Program_Byte+0x74>)
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <FLASH_Program_Byte+0x74>)
 800212c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002130:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <FLASH_Program_Byte+0x74>)
 8002134:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <FLASH_Program_Byte+0x74>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <FLASH_Program_Byte+0x74>)
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <FLASH_Program_Byte+0x74>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	701a      	strb	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	0807ffff 	.word	0x0807ffff
 8002158:	1fff77ff 	.word	0x1fff77ff
 800215c:	1fff7a0f 	.word	0x1fff7a0f
 8002160:	0800dcd4 	.word	0x0800dcd4
 8002164:	40023c00 	.word	0x40023c00

08002168 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800216c:	4b2f      	ldr	r3, [pc, #188]	; (800222c <FLASH_SetErrorCode+0xc4>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 8002182:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <FLASH_SetErrorCode+0xc4>)
 8002186:	2210      	movs	r2, #16
 8002188:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800218a:	4b28      	ldr	r3, [pc, #160]	; (800222c <FLASH_SetErrorCode+0xc4>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f043 0308 	orr.w	r3, r3, #8
 800219e:	4a24      	ldr	r2, [pc, #144]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 80021a0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <FLASH_SetErrorCode+0xc4>)
 80021a4:	2220      	movs	r2, #32
 80021a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <FLASH_SetErrorCode+0xc4>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 80021be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <FLASH_SetErrorCode+0xc4>)
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <FLASH_SetErrorCode+0xc4>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 80021dc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <FLASH_SetErrorCode+0xc4>)
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <FLASH_SetErrorCode+0xc4>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d009      	beq.n	8002204 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 80021fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <FLASH_SetErrorCode+0xc4>)
 80021fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002202:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <FLASH_SetErrorCode+0xc4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f043 0320 	orr.w	r3, r3, #32
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <FLASH_SetErrorCode+0xc8>)
 800221a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <FLASH_SetErrorCode+0xc4>)
 800221e:	2202      	movs	r2, #2
 8002220:	60da      	str	r2, [r3, #12]
  }
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40023c00 	.word	0x40023c00
 8002230:	200006e8 	.word	0x200006e8

08002234 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002240:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_FLASHEx_OBProgram+0x104>)
 8002242:	7e1b      	ldrb	r3, [r3, #24]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_FLASHEx_OBProgram+0x18>
 8002248:	2302      	movs	r3, #2
 800224a:	e071      	b.n	8002330 <HAL_FLASHEx_OBProgram+0xfc>
 800224c:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_FLASHEx_OBProgram+0x104>)
 800224e:	2201      	movs	r2, #1
 8002250:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	d904      	bls.n	8002264 <HAL_FLASHEx_OBProgram+0x30>
 800225a:	f44f 7193 	mov.w	r1, #294	; 0x126
 800225e:	4837      	ldr	r0, [pc, #220]	; (800233c <HAL_FLASHEx_OBProgram+0x108>)
 8002260:	f008 fde4 	bl	800ae2c <assert_failed>

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d025      	beq.n	80022bc <HAL_FLASHEx_OBProgram+0x88>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_FLASHEx_OBProgram+0x56>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d004      	beq.n	800228a <HAL_FLASHEx_OBProgram+0x56>
 8002280:	f240 112b 	movw	r1, #299	; 0x12b
 8002284:	482d      	ldr	r0, [pc, #180]	; (800233c <HAL_FLASHEx_OBProgram+0x108>)
 8002286:	f008 fdd1 	bl	800ae2c <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10a      	bne.n	80022a8 <HAL_FLASHEx_OBProgram+0x74>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4619      	mov	r1, r3
 800229c:	4610      	mov	r0, r2
 800229e:	f000 f8e9 	bl	8002474 <FLASH_OB_EnableWRP>
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	e009      	b.n	80022bc <HAL_FLASHEx_OBProgram+0x88>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f000 f91a 	bl	80024ec <FLASH_OB_DisableWRP>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_FLASHEx_OBProgram+0xa4>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f946 	bl	8002560 <FLASH_OB_RDP_LevelConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_FLASHEx_OBProgram+0xd8>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7e1b      	ldrb	r3, [r3, #24]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80022fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	f000 f956 	bl	80025b4 <FLASH_OB_UserConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_FLASHEx_OBProgram+0xf4>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f99a 	bl	8002658 <FLASH_OB_BOR_LevelConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_FLASHEx_OBProgram+0x104>)
 800232a:	2200      	movs	r2, #0
 800232c:	761a      	strb	r2, [r3, #24]

  return status;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200006e8 	.word	0x200006e8
 800233c:	0800dd10 	.word	0x0800dd10

08002340 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	220f      	movs	r2, #15
 800234c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800234e:	f000 f9c3 	bl	80026d8 <FLASH_OB_GetWRP>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800235a:	f000 f9c9 	bl	80026f0 <FLASH_OB_GetRDP>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8002366:	f000 f9a7 	bl	80026b8 <FLASH_OB_GetUser>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002372:	f000 f9dd 	bl	8002730 <FLASH_OB_GetBOR>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	615a      	str	r2, [r3, #20]
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d019      	beq.n	80023d2 <FLASH_Erase_Sector+0x4a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d016      	beq.n	80023d2 <FLASH_Erase_Sector+0x4a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d013      	beq.n	80023d2 <FLASH_Erase_Sector+0x4a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d010      	beq.n	80023d2 <FLASH_Erase_Sector+0x4a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d00d      	beq.n	80023d2 <FLASH_Erase_Sector+0x4a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d00a      	beq.n	80023d2 <FLASH_Erase_Sector+0x4a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d007      	beq.n	80023d2 <FLASH_Erase_Sector+0x4a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b07      	cmp	r3, #7
 80023c6:	d004      	beq.n	80023d2 <FLASH_Erase_Sector+0x4a>
 80023c8:	f240 31db 	movw	r1, #987	; 0x3db
 80023cc:	4827      	ldr	r0, [pc, #156]	; (800246c <FLASH_Erase_Sector+0xe4>)
 80023ce:	f008 fd2d 	bl	800ae2c <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <FLASH_Erase_Sector+0x6c>
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d00a      	beq.n	80023f4 <FLASH_Erase_Sector+0x6c>
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d007      	beq.n	80023f4 <FLASH_Erase_Sector+0x6c>
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d004      	beq.n	80023f4 <FLASH_Erase_Sector+0x6c>
 80023ea:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 80023ee:	481f      	ldr	r0, [pc, #124]	; (800246c <FLASH_Erase_Sector+0xe4>)
 80023f0:	f008 fd1c 	bl	800ae2c <assert_failed>
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <FLASH_Erase_Sector+0x78>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e010      	b.n	8002422 <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d103      	bne.n	800240e <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e009      	b.n	8002422 <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d103      	bne.n	800241c <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e002      	b.n	8002422 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800241c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002420:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 8002428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	490f      	ldr	r1, [pc, #60]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 8002440:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002444:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4313      	orrs	r3, r2
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 8002452:	f043 0302 	orr.w	r3, r3, #2
 8002456:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <FLASH_Erase_Sector+0xe8>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	6113      	str	r3, [r2, #16]
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	0800dd10 	.word	0x0800dd10
 8002470:	40023c00 	.word	0x40023c00

08002474 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002488:	f023 030f 	bic.w	r3, r3, #15
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <FLASH_OB_EnableWRP+0x22>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d104      	bne.n	80024a0 <FLASH_OB_EnableWRP+0x2c>
 8002496:	f240 410d 	movw	r1, #1037	; 0x40d
 800249a:	4812      	ldr	r0, [pc, #72]	; (80024e4 <FLASH_OB_EnableWRP+0x70>)
 800249c:	f008 fcc6 	bl	800ae2c <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d004      	beq.n	80024b0 <FLASH_OB_EnableWRP+0x3c>
 80024a6:	f240 410e 	movw	r1, #1038	; 0x40e
 80024aa:	480e      	ldr	r0, [pc, #56]	; (80024e4 <FLASH_OB_EnableWRP+0x70>)
 80024ac:	f008 fcbe 	bl	800ae2c <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024b4:	f7ff fd14 	bl	8001ee0 <FLASH_WaitForLastOperation>
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10a      	bne.n	80024d8 <FLASH_OB_EnableWRP+0x64>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <FLASH_OB_EnableWRP+0x74>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4905      	ldr	r1, [pc, #20]	; (80024e8 <FLASH_OB_EnableWRP+0x74>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	0800dd10 	.word	0x0800dd10
 80024e8:	40023c16 	.word	0x40023c16

080024ec <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002500:	f023 030f 	bic.w	r3, r3, #15
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <FLASH_OB_DisableWRP+0x22>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d104      	bne.n	8002518 <FLASH_OB_DisableWRP+0x2c>
 800250e:	f240 4131 	movw	r1, #1073	; 0x431
 8002512:	4811      	ldr	r0, [pc, #68]	; (8002558 <FLASH_OB_DisableWRP+0x6c>)
 8002514:	f008 fc8a 	bl	800ae2c <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d004      	beq.n	8002528 <FLASH_OB_DisableWRP+0x3c>
 800251e:	f240 4132 	movw	r1, #1074	; 0x432
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <FLASH_OB_DisableWRP+0x6c>)
 8002524:	f008 fc82 	bl	800ae2c <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002528:	f24c 3050 	movw	r0, #50000	; 0xc350
 800252c:	f7ff fcd8 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8002530:	4603      	mov	r3, r0
 8002532:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d108      	bne.n	800254c <FLASH_OB_DisableWRP+0x60>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <FLASH_OB_DisableWRP+0x70>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	b29b      	uxth	r3, r3
 8002544:	4905      	ldr	r1, [pc, #20]	; (800255c <FLASH_OB_DisableWRP+0x70>)
 8002546:	4313      	orrs	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	0800dd10 	.word	0x0800dd10
 800255c:	40023c16 	.word	0x40023c16

08002560 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2baa      	cmp	r3, #170	; 0xaa
 8002572:	d00a      	beq.n	800258a <FLASH_OB_RDP_LevelConfig+0x2a>
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	2b55      	cmp	r3, #85	; 0x55
 8002578:	d007      	beq.n	800258a <FLASH_OB_RDP_LevelConfig+0x2a>
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	2bcc      	cmp	r3, #204	; 0xcc
 800257e:	d004      	beq.n	800258a <FLASH_OB_RDP_LevelConfig+0x2a>
 8002580:	f240 418f 	movw	r1, #1167	; 0x48f
 8002584:	4809      	ldr	r0, [pc, #36]	; (80025ac <FLASH_OB_RDP_LevelConfig+0x4c>)
 8002586:	f008 fc51 	bl	800ae2c <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800258a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800258e:	f7ff fca7 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8002592:	4603      	mov	r3, r0
 8002594:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <FLASH_OB_RDP_LevelConfig+0x42>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <FLASH_OB_RDP_LevelConfig+0x50>)
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	0800dd10 	.word	0x0800dd10
 80025b0:	40023c15 	.word	0x40023c15

080025b4 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
 80025be:	460b      	mov	r3, r1
 80025c0:	71bb      	strb	r3, [r7, #6]
 80025c2:	4613      	mov	r3, r2
 80025c4:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80025c6:	23ff      	movs	r3, #255	; 0xff
 80025c8:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d007      	beq.n	80025e4 <FLASH_OB_UserConfig+0x30>
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <FLASH_OB_UserConfig+0x30>
 80025da:	f240 41b2 	movw	r1, #1202	; 0x4b2
 80025de:	481c      	ldr	r0, [pc, #112]	; (8002650 <FLASH_OB_UserConfig+0x9c>)
 80025e0:	f008 fc24 	bl	800ae2c <assert_failed>
  assert_param(IS_OB_STOP_SOURCE(Stop));
 80025e4:	79bb      	ldrb	r3, [r7, #6]
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d007      	beq.n	80025fa <FLASH_OB_UserConfig+0x46>
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <FLASH_OB_UserConfig+0x46>
 80025f0:	f240 41b3 	movw	r1, #1203	; 0x4b3
 80025f4:	4816      	ldr	r0, [pc, #88]	; (8002650 <FLASH_OB_UserConfig+0x9c>)
 80025f6:	f008 fc19 	bl	800ae2c <assert_failed>
  assert_param(IS_OB_STDBY_SOURCE(Stdby));
 80025fa:	797b      	ldrb	r3, [r7, #5]
 80025fc:	2b80      	cmp	r3, #128	; 0x80
 80025fe:	d007      	beq.n	8002610 <FLASH_OB_UserConfig+0x5c>
 8002600:	797b      	ldrb	r3, [r7, #5]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <FLASH_OB_UserConfig+0x5c>
 8002606:	f240 41b4 	movw	r1, #1204	; 0x4b4
 800260a:	4811      	ldr	r0, [pc, #68]	; (8002650 <FLASH_OB_UserConfig+0x9c>)
 800260c:	f008 fc0e 	bl	800ae2c <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002610:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002614:	f7ff fc64 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8002618:	4603      	mov	r3, r0
 800261a:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 800261c:	7bbb      	ldrb	r3, [r7, #14]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d111      	bne.n	8002646 <FLASH_OB_UserConfig+0x92>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <FLASH_OB_UserConfig+0xa0>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 800262e:	79ba      	ldrb	r2, [r7, #6]
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	4313      	orrs	r3, r2
 8002634:	b2da      	uxtb	r2, r3
 8002636:	797b      	ldrb	r3, [r7, #5]
 8002638:	4313      	orrs	r3, r2
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4905      	ldr	r1, [pc, #20]	; (8002654 <FLASH_OB_UserConfig+0xa0>)
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4313      	orrs	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 8002646:	7bbb      	ldrb	r3, [r7, #14]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	0800dd10 	.word	0x0800dd10
 8002654:	40023c14 	.word	0x40023c14

08002658 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d00d      	beq.n	8002684 <FLASH_OB_BOR_LevelConfig+0x2c>
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d00a      	beq.n	8002684 <FLASH_OB_BOR_LevelConfig+0x2c>
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <FLASH_OB_BOR_LevelConfig+0x2c>
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d004      	beq.n	8002684 <FLASH_OB_BOR_LevelConfig+0x2c>
 800267a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 800267e:	480c      	ldr	r0, [pc, #48]	; (80026b0 <FLASH_OB_BOR_LevelConfig+0x58>)
 8002680:	f008 fbd4 	bl	800ae2c <assert_failed>

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <FLASH_OB_BOR_LevelConfig+0x5c>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <FLASH_OB_BOR_LevelConfig+0x5c>)
 800268c:	f023 030c 	bic.w	r3, r3, #12
 8002690:	b2db      	uxtb	r3, r3
 8002692:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <FLASH_OB_BOR_LevelConfig+0x5c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4906      	ldr	r1, [pc, #24]	; (80026b4 <FLASH_OB_BOR_LevelConfig+0x5c>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	4313      	orrs	r3, r2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
  
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	0800dd10 	.word	0x0800dd10
 80026b4:	40023c14 	.word	0x40023c14

080026b8 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <FLASH_OB_GetUser+0x1c>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f023 031f 	bic.w	r3, r3, #31
 80026c6:	b2db      	uxtb	r3, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <FLASH_OB_GetWRP+0x14>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40023c16 	.word	0x40023c16

080026f0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80026f6:	23aa      	movs	r3, #170	; 0xaa
 80026f8:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <FLASH_OB_GetRDP+0x3c>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2bcc      	cmp	r3, #204	; 0xcc
 8002702:	d102      	bne.n	800270a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002704:	23cc      	movs	r3, #204	; 0xcc
 8002706:	71fb      	strb	r3, [r7, #7]
 8002708:	e009      	b.n	800271e <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <FLASH_OB_GetRDP+0x3c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2baa      	cmp	r3, #170	; 0xaa
 8002712:	d102      	bne.n	800271a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002714:	23aa      	movs	r3, #170	; 0xaa
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	e001      	b.n	800271e <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800271a:	2355      	movs	r3, #85	; 0x55
 800271c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800271e:	79fb      	ldrb	r3, [r7, #7]
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40023c15 	.word	0x40023c15

08002730 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <FLASH_OB_GetBOR+0x1c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	b2db      	uxtb	r3, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023c14 	.word	0x40023c14

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a3b      	ldr	r2, [pc, #236]	; (8002858 <HAL_GPIO_Init+0x108>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d017      	beq.n	800279e <HAL_GPIO_Init+0x4e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a3a      	ldr	r2, [pc, #232]	; (800285c <HAL_GPIO_Init+0x10c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x4e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a39      	ldr	r2, [pc, #228]	; (8002860 <HAL_GPIO_Init+0x110>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00f      	beq.n	800279e <HAL_GPIO_Init+0x4e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a38      	ldr	r2, [pc, #224]	; (8002864 <HAL_GPIO_Init+0x114>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00b      	beq.n	800279e <HAL_GPIO_Init+0x4e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a37      	ldr	r2, [pc, #220]	; (8002868 <HAL_GPIO_Init+0x118>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <HAL_GPIO_Init+0x4e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a36      	ldr	r2, [pc, #216]	; (800286c <HAL_GPIO_Init+0x11c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x4e>
 8002796:	21b3      	movs	r1, #179	; 0xb3
 8002798:	4835      	ldr	r0, [pc, #212]	; (8002870 <HAL_GPIO_Init+0x120>)
 800279a:	f008 fb47 	bl	800ae2c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_GPIO_Init+0x64>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x6c>
 80027b4:	21b4      	movs	r1, #180	; 0xb4
 80027b6:	482e      	ldr	r0, [pc, #184]	; (8002870 <HAL_GPIO_Init+0x120>)
 80027b8:	f008 fb38 	bl	800ae2c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d035      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d031      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b11      	cmp	r3, #17
 80027d2:	d02d      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d029      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b12      	cmp	r3, #18
 80027e2:	d025      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a22      	ldr	r2, [pc, #136]	; (8002874 <HAL_GPIO_Init+0x124>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d020      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a21      	ldr	r2, [pc, #132]	; (8002878 <HAL_GPIO_Init+0x128>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d01b      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_GPIO_Init+0x12c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d016      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_GPIO_Init+0x130>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d011      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <HAL_GPIO_Init+0x134>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00c      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x138>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0xe0>
 8002828:	21b5      	movs	r1, #181	; 0xb5
 800282a:	4811      	ldr	r0, [pc, #68]	; (8002870 <HAL_GPIO_Init+0x120>)
 800282c:	f008 fafe 	bl	800ae2c <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_GPIO_Init+0x100>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d007      	beq.n	8002850 <HAL_GPIO_Init+0x100>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x100>
 8002848:	21b6      	movs	r1, #182	; 0xb6
 800284a:	4809      	ldr	r0, [pc, #36]	; (8002870 <HAL_GPIO_Init+0x120>)
 800284c:	f008 faee 	bl	800ae2c <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	e211      	b.n	8002c7a <HAL_GPIO_Init+0x52a>
 8002856:	bf00      	nop
 8002858:	40020000 	.word	0x40020000
 800285c:	40020400 	.word	0x40020400
 8002860:	40020800 	.word	0x40020800
 8002864:	40020c00 	.word	0x40020c00
 8002868:	40021000 	.word	0x40021000
 800286c:	40021c00 	.word	0x40021c00
 8002870:	0800dd50 	.word	0x0800dd50
 8002874:	10110000 	.word	0x10110000
 8002878:	10210000 	.word	0x10210000
 800287c:	10310000 	.word	0x10310000
 8002880:	10120000 	.word	0x10120000
 8002884:	10220000 	.word	0x10220000
 8002888:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f040 81e5 	bne.w	8002c74 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d00b      	beq.n	80028ca <HAL_GPIO_Init+0x17a>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d007      	beq.n	80028ca <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028be:	2b11      	cmp	r3, #17
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b12      	cmp	r3, #18
 80028c8:	d144      	bne.n	8002954 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00f      	beq.n	80028f2 <HAL_GPIO_Init+0x1a2>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d00b      	beq.n	80028f2 <HAL_GPIO_Init+0x1a2>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x1a2>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x1a2>
 80028ea:	21c8      	movs	r1, #200	; 0xc8
 80028ec:	489f      	ldr	r0, [pc, #636]	; (8002b6c <HAL_GPIO_Init+0x41c>)
 80028ee:	f008 fa9d 	bl	800ae2c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	2203      	movs	r2, #3
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002928:	2201      	movs	r2, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 0201 	and.w	r2, r3, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d004      	beq.n	8002996 <HAL_GPIO_Init+0x246>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b12      	cmp	r3, #18
 8002992:	f040 80a0 	bne.w	8002ad6 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d077      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b09      	cmp	r3, #9
 80029a4:	d073      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d06f      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d06b      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d067      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d063      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d05f      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d05b      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d057      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d053      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d04f      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d04b      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d047      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d043      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d03f      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d03b      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d037      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d033      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d02f      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d02b      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d027      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b07      	cmp	r3, #7
 8002a44:	d023      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b07      	cmp	r3, #7
 8002a4c:	d01f      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b07      	cmp	r3, #7
 8002a54:	d01b      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d017      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b0a      	cmp	r3, #10
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	d00f      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	d00b      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b0f      	cmp	r3, #15
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x33e>
 8002a86:	21e0      	movs	r1, #224	; 0xe0
 8002a88:	4838      	ldr	r0, [pc, #224]	; (8002b6c <HAL_GPIO_Init+0x41c>)
 8002a8a:	f008 f9cf 	bl	800ae2c <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	08da      	lsrs	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3208      	adds	r2, #8
 8002a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	69b9      	ldr	r1, [r7, #24]
 8002ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0203 	and.w	r2, r3, #3
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80ae 	beq.w	8002c74 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_GPIO_Init+0x420>)
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <HAL_GPIO_Init+0x420>)
 8002b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b26:	6453      	str	r3, [r2, #68]	; 0x44
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_GPIO_Init+0x420>)
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b34:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <HAL_GPIO_Init+0x424>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a07      	ldr	r2, [pc, #28]	; (8002b78 <HAL_GPIO_Init+0x428>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d025      	beq.n	8002bac <HAL_GPIO_Init+0x45c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <HAL_GPIO_Init+0x42c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d01f      	beq.n	8002ba8 <HAL_GPIO_Init+0x458>
 8002b68:	e00a      	b.n	8002b80 <HAL_GPIO_Init+0x430>
 8002b6a:	bf00      	nop
 8002b6c:	0800dd50 	.word	0x0800dd50
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a42      	ldr	r2, [pc, #264]	; (8002c8c <HAL_GPIO_Init+0x53c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00d      	beq.n	8002ba4 <HAL_GPIO_Init+0x454>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a41      	ldr	r2, [pc, #260]	; (8002c90 <HAL_GPIO_Init+0x540>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <HAL_GPIO_Init+0x450>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <HAL_GPIO_Init+0x544>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_GPIO_Init+0x44c>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	e008      	b.n	8002bae <HAL_GPIO_Init+0x45e>
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	e006      	b.n	8002bae <HAL_GPIO_Init+0x45e>
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e004      	b.n	8002bae <HAL_GPIO_Init+0x45e>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e002      	b.n	8002bae <HAL_GPIO_Init+0x45e>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_GPIO_Init+0x45e>
 8002bac:	2300      	movs	r3, #0
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	f002 0203 	and.w	r2, r2, #3
 8002bb4:	0092      	lsls	r2, r2, #2
 8002bb6:	4093      	lsls	r3, r2
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bbe:	4936      	ldr	r1, [pc, #216]	; (8002c98 <HAL_GPIO_Init+0x548>)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bcc:	4b33      	ldr	r3, [pc, #204]	; (8002c9c <HAL_GPIO_Init+0x54c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <HAL_GPIO_Init+0x54c>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_GPIO_Init+0x54c>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1a:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <HAL_GPIO_Init+0x54c>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c20:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_GPIO_Init+0x54c>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c44:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <HAL_GPIO_Init+0x54c>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <HAL_GPIO_Init+0x54c>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <HAL_GPIO_Init+0x54c>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	f67f ae05 	bls.w	800288c <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8002c82:	bf00      	nop
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
 8002cac:	4613      	mov	r3, r2
 8002cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_GPIO_WritePin+0x20>
 8002cb6:	887b      	ldrh	r3, [r7, #2]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	041b      	lsls	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_GPIO_WritePin+0x2a>
 8002cc0:	f240 119f 	movw	r1, #415	; 0x19f
 8002cc4:	480e      	ldr	r0, [pc, #56]	; (8002d00 <HAL_GPIO_WritePin+0x60>)
 8002cc6:	f008 f8b1 	bl	800ae2c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002cca:	787b      	ldrb	r3, [r7, #1]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_GPIO_WritePin+0x40>
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d004      	beq.n	8002ce0 <HAL_GPIO_WritePin+0x40>
 8002cd6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002cda:	4809      	ldr	r0, [pc, #36]	; (8002d00 <HAL_GPIO_WritePin+0x60>)
 8002cdc:	f008 f8a6 	bl	800ae2c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cec:	e003      	b.n	8002cf6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cee:	887b      	ldrh	r3, [r7, #2]
 8002cf0:	041a      	lsls	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	0800dd50 	.word	0x0800dd50

08002d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f008 fbe4 	bl	800b4f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40013c00 	.word	0x40013c00

08002d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1b1      	b.n	80030aa <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4aa2      	ldr	r2, [pc, #648]	; (8002fd4 <HAL_I2C_Init+0x2a0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_I2C_Init+0x3a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4aa0      	ldr	r2, [pc, #640]	; (8002fd8 <HAL_I2C_Init+0x2a4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_I2C_Init+0x3a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a9f      	ldr	r2, [pc, #636]	; (8002fdc <HAL_I2C_Init+0x2a8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_I2C_Init+0x3a>
 8002d64:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002d68:	489d      	ldr	r0, [pc, #628]	; (8002fe0 <HAL_I2C_Init+0x2ac>)
 8002d6a:	f008 f85f 	bl	800ae2c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_I2C_Init+0x4c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4a9a      	ldr	r2, [pc, #616]	; (8002fe4 <HAL_I2C_Init+0x2b0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d904      	bls.n	8002d8a <HAL_I2C_Init+0x56>
 8002d80:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002d84:	4896      	ldr	r0, [pc, #600]	; (8002fe0 <HAL_I2C_Init+0x2ac>)
 8002d86:	f008 f851 	bl	800ae2c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_I2C_Init+0x72>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d9a:	d004      	beq.n	8002da6 <HAL_I2C_Init+0x72>
 8002d9c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002da0:	488f      	ldr	r0, [pc, #572]	; (8002fe0 <HAL_I2C_Init+0x2ac>)
 8002da2:	f008 f843 	bl	800ae2c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_I2C_Init+0x8c>
 8002db6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002dba:	4889      	ldr	r0, [pc, #548]	; (8002fe0 <HAL_I2C_Init+0x2ac>)
 8002dbc:	f008 f836 	bl	800ae2c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dc8:	d009      	beq.n	8002dde <HAL_I2C_Init+0xaa>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dd2:	d004      	beq.n	8002dde <HAL_I2C_Init+0xaa>
 8002dd4:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002dd8:	4881      	ldr	r0, [pc, #516]	; (8002fe0 <HAL_I2C_Init+0x2ac>)
 8002dda:	f008 f827 	bl	800ae2c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_I2C_Init+0xc4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d004      	beq.n	8002df8 <HAL_I2C_Init+0xc4>
 8002dee:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002df2:	487b      	ldr	r0, [pc, #492]	; (8002fe0 <HAL_I2C_Init+0x2ac>)
 8002df4:	f008 f81a 	bl	800ae2c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_I2C_Init+0xda>
 8002e04:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002e08:	4875      	ldr	r0, [pc, #468]	; (8002fe0 <HAL_I2C_Init+0x2ac>)
 8002e0a:	f008 f80f 	bl	800ae2c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_I2C_Init+0xf4>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d004      	beq.n	8002e28 <HAL_I2C_Init+0xf4>
 8002e1e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002e22:	486f      	ldr	r0, [pc, #444]	; (8002fe0 <HAL_I2C_Init+0x2ac>)
 8002e24:	f008 f802 	bl	800ae2c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_I2C_Init+0x10e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d004      	beq.n	8002e42 <HAL_I2C_Init+0x10e>
 8002e38:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002e3c:	4868      	ldr	r0, [pc, #416]	; (8002fe0 <HAL_I2C_Init+0x2ac>)
 8002e3e:	f007 fff5 	bl	800ae2c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f006 fab4 	bl	80093c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e94:	f001 fdf4 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8002e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a52      	ldr	r2, [pc, #328]	; (8002fe8 <HAL_I2C_Init+0x2b4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d807      	bhi.n	8002eb4 <HAL_I2C_Init+0x180>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a51      	ldr	r2, [pc, #324]	; (8002fec <HAL_I2C_Init+0x2b8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	bf94      	ite	ls
 8002eac:	2301      	movls	r3, #1
 8002eae:	2300      	movhi	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e006      	b.n	8002ec2 <HAL_I2C_Init+0x18e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a4e      	ldr	r2, [pc, #312]	; (8002ff0 <HAL_I2C_Init+0x2bc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0ef      	b.n	80030aa <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a49      	ldr	r2, [pc, #292]	; (8002ff4 <HAL_I2C_Init+0x2c0>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0c9b      	lsrs	r3, r3, #18
 8002ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a3b      	ldr	r2, [pc, #236]	; (8002fe8 <HAL_I2C_Init+0x2b4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d802      	bhi.n	8002f04 <HAL_I2C_Init+0x1d0>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3301      	adds	r3, #1
 8002f02:	e009      	b.n	8002f18 <HAL_I2C_Init+0x1e4>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <HAL_I2C_Init+0x2c4>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	3301      	adds	r3, #1
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	492d      	ldr	r1, [pc, #180]	; (8002fe8 <HAL_I2C_Init+0x2b4>)
 8002f34:	428b      	cmp	r3, r1
 8002f36:	d80d      	bhi.n	8002f54 <HAL_I2C_Init+0x220>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e59      	subs	r1, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	bf38      	it	cc
 8002f50:	2304      	movcc	r3, #4
 8002f52:	e063      	b.n	800301c <HAL_I2C_Init+0x2e8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <HAL_I2C_Init+0x24c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e012      	b.n	8002fa6 <HAL_I2C_Init+0x272>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	0099      	lsls	r1, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x27a>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e036      	b.n	800301c <HAL_I2C_Init+0x2e8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d122      	bne.n	8002ffc <HAL_I2C_Init+0x2c8>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e58      	subs	r0, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	440b      	add	r3, r1
 8002fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd2:	e023      	b.n	800301c <HAL_I2C_Init+0x2e8>
 8002fd4:	40005400 	.word	0x40005400
 8002fd8:	40005800 	.word	0x40005800
 8002fdc:	40005c00 	.word	0x40005c00
 8002fe0:	0800dd8c 	.word	0x0800dd8c
 8002fe4:	00061a80 	.word	0x00061a80
 8002fe8:	000186a0 	.word	0x000186a0
 8002fec:	001e847f 	.word	0x001e847f
 8002ff0:	003d08ff 	.word	0x003d08ff
 8002ff4:	431bde83 	.word	0x431bde83
 8002ff8:	10624dd3 	.word	0x10624dd3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	0099      	lsls	r1, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6809      	ldr	r1, [r1, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6911      	ldr	r1, [r2, #16]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	430b      	orrs	r3, r1
 800305e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	817b      	strh	r3, [r7, #10]
 80030c6:	460b      	mov	r3, r1
 80030c8:	813b      	strh	r3, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ce:	f7fd ff59 	bl	8000f84 <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d007      	beq.n	80030ea <HAL_I2C_Mem_Write+0x36>
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d004      	beq.n	80030ea <HAL_I2C_Mem_Write+0x36>
 80030e0:	f640 1173 	movw	r1, #2419	; 0x973
 80030e4:	4873      	ldr	r0, [pc, #460]	; (80032b4 <HAL_I2C_Mem_Write+0x200>)
 80030e6:	f007 fea1 	bl	800ae2c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	f040 80d9 	bne.w	80032aa <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2319      	movs	r3, #25
 80030fe:	2201      	movs	r2, #1
 8003100:	496d      	ldr	r1, [pc, #436]	; (80032b8 <HAL_I2C_Mem_Write+0x204>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fc88 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
 8003110:	e0cc      	b.n	80032ac <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_I2C_Mem_Write+0x6c>
 800311c:	2302      	movs	r3, #2
 800311e:	e0c5      	b.n	80032ac <HAL_I2C_Mem_Write+0x1f8>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d007      	beq.n	8003146 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003154:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2221      	movs	r2, #33	; 0x21
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2240      	movs	r2, #64	; 0x40
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a3a      	ldr	r2, [r7, #32]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a4d      	ldr	r2, [pc, #308]	; (80032bc <HAL_I2C_Mem_Write+0x208>)
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003188:	88f8      	ldrh	r0, [r7, #6]
 800318a:	893a      	ldrh	r2, [r7, #8]
 800318c:	8979      	ldrh	r1, [r7, #10]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	4603      	mov	r3, r0
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fac3 	bl	8003724 <I2C_RequestMemoryWrite>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d052      	beq.n	800324a <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e081      	b.n	80032ac <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fd09 	bl	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d107      	bne.n	80031d0 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e06b      	b.n	80032ac <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d11b      	bne.n	800324a <HAL_I2C_Mem_Write+0x196>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d017      	beq.n	800324a <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	781a      	ldrb	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1aa      	bne.n	80031a8 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fcf5 	bl	8003c46 <I2C_WaitOnBTFFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b04      	cmp	r3, #4
 8003268:	d107      	bne.n	800327a <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e016      	b.n	80032ac <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e000      	b.n	80032ac <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	0800dd8c 	.word	0x0800dd8c
 80032b8:	00100002 	.word	0x00100002
 80032bc:	ffff0000 	.word	0xffff0000

080032c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	817b      	strh	r3, [r7, #10]
 80032d2:	460b      	mov	r3, r1
 80032d4:	813b      	strh	r3, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032da:	f7fd fe53 	bl	8000f84 <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d007      	beq.n	80032f6 <HAL_I2C_Mem_Read+0x36>
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d004      	beq.n	80032f6 <HAL_I2C_Mem_Read+0x36>
 80032ec:	f640 11ee 	movw	r1, #2542	; 0x9ee
 80032f0:	4881      	ldr	r0, [pc, #516]	; (80034f8 <HAL_I2C_Mem_Read+0x238>)
 80032f2:	f007 fd9b 	bl	800ae2c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b20      	cmp	r3, #32
 8003300:	f040 8209 	bne.w	8003716 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2319      	movs	r3, #25
 800330a:	2201      	movs	r2, #1
 800330c:	497b      	ldr	r1, [pc, #492]	; (80034fc <HAL_I2C_Mem_Read+0x23c>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fb82 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
 800331c:	e1fc      	b.n	8003718 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_I2C_Mem_Read+0x6c>
 8003328:	2302      	movs	r3, #2
 800332a:	e1f5      	b.n	8003718 <HAL_I2C_Mem_Read+0x458>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d007      	beq.n	8003352 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003360:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2222      	movs	r2, #34	; 0x22
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2240      	movs	r2, #64	; 0x40
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800337c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a5b      	ldr	r2, [pc, #364]	; (8003500 <HAL_I2C_Mem_Read+0x240>)
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003394:	88f8      	ldrh	r0, [r7, #6]
 8003396:	893a      	ldrh	r2, [r7, #8]
 8003398:	8979      	ldrh	r1, [r7, #10]
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4603      	mov	r3, r0
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fa51 	bl	800384c <I2C_RequestMemoryRead>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e1b1      	b.n	8003718 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d113      	bne.n	80033e4 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033bc:	2300      	movs	r3, #0
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	623b      	str	r3, [r7, #32]
 80033d0:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	e185      	b.n	80036f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d11b      	bne.n	8003424 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fa:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e165      	b.n	80036f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	2b02      	cmp	r3, #2
 800342a:	d11b      	bne.n	8003464 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343a:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800344a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344c:	2300      	movs	r3, #0
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	e145      	b.n	80036f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800347a:	e139      	b.n	80036f0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	2b03      	cmp	r3, #3
 8003482:	f200 80f2 	bhi.w	800366a <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	2b01      	cmp	r3, #1
 800348c:	d123      	bne.n	80034d6 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fc18 	bl	8003cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e13a      	b.n	8003718 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034d4:	e10c      	b.n	80036f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d14f      	bne.n	800357e <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2200      	movs	r2, #0
 80034e6:	4907      	ldr	r1, [pc, #28]	; (8003504 <HAL_I2C_Mem_Read+0x244>)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fa95 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e10f      	b.n	8003718 <HAL_I2C_Mem_Read+0x458>
 80034f8:	0800dd8c 	.word	0x0800dd8c
 80034fc:	00100002 	.word	0x00100002
 8003500:	ffff0000 	.word	0xffff0000
 8003504:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800357c:	e0b8      	b.n	80036f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	2200      	movs	r2, #0
 8003586:	4966      	ldr	r1, [pc, #408]	; (8003720 <HAL_I2C_Mem_Read+0x460>)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fa45 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0bf      	b.n	8003718 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	2200      	movs	r2, #0
 80035e2:	494f      	ldr	r1, [pc, #316]	; (8003720 <HAL_I2C_Mem_Read+0x460>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fa17 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e091      	b.n	8003718 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003668:	e042      	b.n	80036f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fb2a 	bl	8003cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e04c      	b.n	8003718 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d118      	bne.n	80036f0 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f47f aec1 	bne.w	800347c <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
  }
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	; 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	00010004 	.word	0x00010004

08003724 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	4608      	mov	r0, r1
 800372e:	4611      	mov	r1, r2
 8003730:	461a      	mov	r2, r3
 8003732:	4603      	mov	r3, r0
 8003734:	817b      	strh	r3, [r7, #10]
 8003736:	460b      	mov	r3, r1
 8003738:	813b      	strh	r3, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800374c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	2200      	movs	r2, #0
 8003756:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f95c 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00c      	beq.n	8003780 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e05f      	b.n	8003840 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003780:	897b      	ldrh	r3, [r7, #10]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800378e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	6a3a      	ldr	r2, [r7, #32]
 8003794:	492c      	ldr	r1, [pc, #176]	; (8003848 <I2C_RequestMemoryWrite+0x124>)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f995 	bl	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e04c      	b.n	8003840 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037be:	6a39      	ldr	r1, [r7, #32]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f9ff 	bl	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d107      	bne.n	80037e4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e02b      	b.n	8003840 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d105      	bne.n	80037fa <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ee:	893b      	ldrh	r3, [r7, #8]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	611a      	str	r2, [r3, #16]
 80037f8:	e021      	b.n	800383e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037fa:	893b      	ldrh	r3, [r7, #8]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	b29b      	uxth	r3, r3
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380a:	6a39      	ldr	r1, [r7, #32]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f9d9 	bl	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	2b04      	cmp	r3, #4
 800381e:	d107      	bne.n	8003830 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e005      	b.n	8003840 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003834:	893b      	ldrh	r3, [r7, #8]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	00010002 	.word	0x00010002

0800384c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4603      	mov	r3, r0
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	460b      	mov	r3, r1
 8003860:	813b      	strh	r3, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003874:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003884:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	2200      	movs	r2, #0
 800388e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f8c0 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e0a9      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038b8:	897b      	ldrh	r3, [r7, #10]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	6a3a      	ldr	r2, [r7, #32]
 80038cc:	4951      	ldr	r1, [pc, #324]	; (8003a14 <I2C_RequestMemoryRead+0x1c8>)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f8f9 	bl	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e096      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	6a39      	ldr	r1, [r7, #32]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f963 	bl	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b04      	cmp	r3, #4
 800390a:	d107      	bne.n	800391c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e075      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d105      	bne.n	8003932 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003926:	893b      	ldrh	r3, [r7, #8]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]
 8003930:	e021      	b.n	8003976 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003932:	893b      	ldrh	r3, [r7, #8]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	b29b      	uxth	r3, r3
 8003938:	b2da      	uxtb	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003942:	6a39      	ldr	r1, [r7, #32]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f93d 	bl	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00d      	beq.n	800396c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	2b04      	cmp	r3, #4
 8003956:	d107      	bne.n	8003968 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003966:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e04f      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800396c:	893b      	ldrh	r3, [r7, #8]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	6a39      	ldr	r1, [r7, #32]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f922 	bl	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b04      	cmp	r3, #4
 800398c:	d107      	bne.n	800399e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e034      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f82a 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e013      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039e4:	897b      	ldrh	r3, [r7, #10]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	6a3a      	ldr	r2, [r7, #32]
 80039f8:	4906      	ldr	r1, [pc, #24]	; (8003a14 <I2C_RequestMemoryRead+0x1c8>)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f863 	bl	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	00010002 	.word	0x00010002

08003a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a28:	e025      	b.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d021      	beq.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fd faa7 	bl	8000f84 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d116      	bne.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e023      	b.n	8003abe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d10d      	bne.n	8003a9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf0c      	ite	eq
 8003a92:	2301      	moveq	r3, #1
 8003a94:	2300      	movne	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	e00c      	b.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d0b6      	beq.n	8003a2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad4:	e051      	b.n	8003b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae4:	d123      	bne.n	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003afe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f043 0204 	orr.w	r2, r3, #4
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e046      	b.n	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d021      	beq.n	8003b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b36:	f7fd fa25 	bl	8000f84 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d116      	bne.n	8003b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e020      	b.n	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10c      	bne.n	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	e00b      	b.n	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d18d      	bne.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bd0:	e02d      	b.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f8ce 	bl	8003d74 <I2C_IsAcknowledgeFailed>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e02d      	b.n	8003c3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d021      	beq.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fd f9cb 	bl	8000f84 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d116      	bne.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f043 0220 	orr.w	r2, r3, #32
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e007      	b.n	8003c3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c38:	2b80      	cmp	r3, #128	; 0x80
 8003c3a:	d1ca      	bne.n	8003bd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c52:	e02d      	b.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f88d 	bl	8003d74 <I2C_IsAcknowledgeFailed>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e02d      	b.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d021      	beq.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6c:	f7fd f98a 	bl	8000f84 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d302      	bcc.n	8003c82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d116      	bne.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e007      	b.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d1ca      	bne.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd4:	e042      	b.n	8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d119      	bne.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0210 	mvn.w	r2, #16
 8003cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e029      	b.n	8003d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d18:	f7fd f934 	bl	8000f84 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d302      	bcc.n	8003d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e007      	b.n	8003d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d1b5      	bne.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8a:	d11b      	bne.n	8003dc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0204 	orr.w	r2, r3, #4
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de2:	d004      	beq.n	8003dee <HAL_PWR_EnableWakeUpPin+0x1a>
 8003de4:	f240 1141 	movw	r1, #321	; 0x141
 8003de8:	4806      	ldr	r0, [pc, #24]	; (8003e04 <HAL_PWR_EnableWakeUpPin+0x30>)
 8003dea:	f007 f81f 	bl	800ae2c <assert_failed>

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_PWR_EnableWakeUpPin+0x34>)
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	4905      	ldr	r1, [pc, #20]	; (8003e08 <HAL_PWR_EnableWakeUpPin+0x34>)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	0800ddc4 	.word	0x0800ddc4
 8003e08:	40007000 	.word	0x40007000

08003e0c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1a:	d004      	beq.n	8003e26 <HAL_PWR_DisableWakeUpPin+0x1a>
 8003e1c:	f240 1153 	movw	r1, #339	; 0x153
 8003e20:	4806      	ldr	r0, [pc, #24]	; (8003e3c <HAL_PWR_DisableWakeUpPin+0x30>)
 8003e22:	f007 f803 	bl	800ae2c <assert_failed>

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_PWR_DisableWakeUpPin+0x34>)
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	4904      	ldr	r1, [pc, #16]	; (8003e40 <HAL_PWR_DisableWakeUpPin+0x34>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	0800ddc4 	.word	0x0800ddc4
 8003e40:	40007000 	.word	0x40007000

08003e44 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_PWR_EnterSLEEPMode+0x22>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d004      	beq.n	8003e66 <HAL_PWR_EnterSLEEPMode+0x22>
 8003e5c:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8003e60:	480f      	ldr	r0, [pc, #60]	; (8003ea0 <HAL_PWR_EnterSLEEPMode+0x5c>)
 8003e62:	f006 ffe3 	bl	800ae2c <assert_failed>
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <HAL_PWR_EnterSLEEPMode+0x38>
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d004      	beq.n	8003e7c <HAL_PWR_EnterSLEEPMode+0x38>
 8003e72:	f240 1171 	movw	r1, #369	; 0x171
 8003e76:	480a      	ldr	r0, [pc, #40]	; (8003ea0 <HAL_PWR_EnterSLEEPMode+0x5c>)
 8003e78:	f006 ffd8 	bl	800ae2c <assert_failed>

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003e82:	f023 0304 	bic.w	r3, r3, #4
 8003e86:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_PWR_EnterSLEEPMode+0x4e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8003e8e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003e90:	e002      	b.n	8003e98 <HAL_PWR_EnterSLEEPMode+0x54>
    __SEV();
 8003e92:	bf40      	sev
    __WFE();
 8003e94:	bf20      	wfe
    __WFE();
 8003e96:	bf20      	wfe
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	0800ddc4 	.word	0x0800ddc4
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_PWR_EnterSTOPMode+0x22>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d004      	beq.n	8003eca <HAL_PWR_EnterSTOPMode+0x22>
 8003ec0:	f240 119b 	movw	r1, #411	; 0x19b
 8003ec4:	4816      	ldr	r0, [pc, #88]	; (8003f20 <HAL_PWR_EnterSTOPMode+0x78>)
 8003ec6:	f006 ffb1 	bl	800ae2c <assert_failed>
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d007      	beq.n	8003ee0 <HAL_PWR_EnterSTOPMode+0x38>
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_PWR_EnterSTOPMode+0x38>
 8003ed6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003eda:	4811      	ldr	r0, [pc, #68]	; (8003f20 <HAL_PWR_EnterSTOPMode+0x78>)
 8003edc:	f006 ffa6 	bl	800ae2c <assert_failed>
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8003ee0:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 0203 	bic.w	r2, r3, #3
 8003ee8:	490e      	ldr	r1, [pc, #56]	; (8003f24 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <HAL_PWR_EnterSTOPMode+0x80>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	4a0c      	ldr	r2, [pc, #48]	; (8003f28 <HAL_PWR_EnterSTOPMode+0x80>)
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_PWR_EnterSTOPMode+0x5e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8003f02:	bf30      	wfi
 8003f04:	e002      	b.n	8003f0c <HAL_PWR_EnterSTOPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003f06:	bf40      	sev
    __WFE();
 8003f08:	bf20      	wfe
    __WFE();
 8003f0a:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_PWR_EnterSTOPMode+0x80>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <HAL_PWR_EnterSTOPMode+0x80>)
 8003f12:	f023 0304 	bic.w	r3, r3, #4
 8003f16:	6113      	str	r3, [r2, #16]
}
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	0800ddc4 	.word	0x0800ddc4
 8003f24:	40007000 	.word	0x40007000
 8003f28:	e000ed00 	.word	0xe000ed00

08003f2c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003f36:	f043 0302 	orr.w	r3, r3, #2
 8003f3a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003f48:	bf30      	wfi
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40007000 	.word	0x40007000
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e30d      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b0f      	cmp	r3, #15
 8003f74:	d903      	bls.n	8003f7e <HAL_RCC_OscConfig+0x22>
 8003f76:	21e8      	movs	r1, #232	; 0xe8
 8003f78:	48a3      	ldr	r0, [pc, #652]	; (8004208 <HAL_RCC_OscConfig+0x2ac>)
 8003f7a:	f006 ff57 	bl	800ae2c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8088 	beq.w	800409c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x54>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d008      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x54>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa6:	d003      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x54>
 8003fa8:	21ed      	movs	r1, #237	; 0xed
 8003faa:	4897      	ldr	r0, [pc, #604]	; (8004208 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	f006 ff3e 	bl	800ae2c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb0:	4b96      	ldr	r3, [pc, #600]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d00c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fbc:	4b93      	ldr	r3, [pc, #588]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d112      	bne.n	8003fee <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc8:	4b90      	ldr	r3, [pc, #576]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd6:	4b8d      	ldr	r3, [pc, #564]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d05b      	beq.n	800409a <HAL_RCC_OscConfig+0x13e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d157      	bne.n	800409a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e2cd      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0xaa>
 8003ff8:	4b84      	ldr	r3, [pc, #528]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a83      	ldr	r2, [pc, #524]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8003ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e01d      	b.n	8004042 <HAL_RCC_OscConfig+0xe6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800400e:	d10c      	bne.n	800402a <HAL_RCC_OscConfig+0xce>
 8004010:	4b7e      	ldr	r3, [pc, #504]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a7d      	ldr	r2, [pc, #500]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b7b      	ldr	r3, [pc, #492]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a7a      	ldr	r2, [pc, #488]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	e00b      	b.n	8004042 <HAL_RCC_OscConfig+0xe6>
 800402a:	4b78      	ldr	r3, [pc, #480]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a77      	ldr	r2, [pc, #476]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b75      	ldr	r3, [pc, #468]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a74      	ldr	r2, [pc, #464]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 800403c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004040:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d013      	beq.n	8004072 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404a:	f7fc ff9b 	bl	8000f84 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004052:	f7fc ff97 	bl	8000f84 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b64      	cmp	r3, #100	; 0x64
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e292      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004064:	4b69      	ldr	r3, [pc, #420]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0xf6>
 8004070:	e014      	b.n	800409c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004072:	f7fc ff87 	bl	8000f84 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800407a:	f7fc ff83 	bl	8000f84 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b64      	cmp	r3, #100	; 0x64
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e27e      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408c:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <HAL_RCC_OscConfig+0x11e>
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d079      	beq.n	800419c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCC_OscConfig+0x166>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d004      	beq.n	80040c2 <HAL_RCC_OscConfig+0x166>
 80040b8:	f240 111f 	movw	r1, #287	; 0x11f
 80040bc:	4852      	ldr	r0, [pc, #328]	; (8004208 <HAL_RCC_OscConfig+0x2ac>)
 80040be:	f006 feb5 	bl	800ae2c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b1f      	cmp	r3, #31
 80040c8:	d904      	bls.n	80040d4 <HAL_RCC_OscConfig+0x178>
 80040ca:	f44f 7190 	mov.w	r1, #288	; 0x120
 80040ce:	484e      	ldr	r0, [pc, #312]	; (8004208 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	f006 feac 	bl	800ae2c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040d4:	4b4d      	ldr	r3, [pc, #308]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 030c 	and.w	r3, r3, #12
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e0:	4b4a      	ldr	r3, [pc, #296]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d11c      	bne.n	8004126 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ec:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f8:	4b44      	ldr	r3, [pc, #272]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_OscConfig+0x1b4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e23c      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004110:	4b3e      	ldr	r3, [pc, #248]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	493b      	ldr	r1, [pc, #236]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004124:	e03a      	b.n	800419c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d020      	beq.n	8004170 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412e:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_RCC_OscConfig+0x2b4>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fc ff26 	bl	8000f84 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413c:	f7fc ff22 	bl	8000f84 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e21d      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	4b2f      	ldr	r3, [pc, #188]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415a:	4b2c      	ldr	r3, [pc, #176]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4928      	ldr	r1, [pc, #160]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]
 800416e:	e015      	b.n	800419c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004170:	4b27      	ldr	r3, [pc, #156]	; (8004210 <HAL_RCC_OscConfig+0x2b4>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fc ff05 	bl	8000f84 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417e:	f7fc ff01 	bl	8000f84 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e1fc      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004190:	4b1e      	ldr	r3, [pc, #120]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d046      	beq.n	8004236 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCC_OscConfig+0x266>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d004      	beq.n	80041c2 <HAL_RCC_OscConfig+0x266>
 80041b8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80041bc:	4812      	ldr	r0, [pc, #72]	; (8004208 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	f006 fe35 	bl	800ae2c <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fc fed8 	bl	8000f84 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fc fed4 	bl	8000f84 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e1cf      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <HAL_RCC_OscConfig+0x2b0>)
 80041ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x27c>
 80041f6:	e01e      	b.n	8004236 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fe:	f7fc fec1 	bl	8000f84 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004204:	e011      	b.n	800422a <HAL_RCC_OscConfig+0x2ce>
 8004206:	bf00      	nop
 8004208:	0800ddfc 	.word	0x0800ddfc
 800420c:	40023800 	.word	0x40023800
 8004210:	42470000 	.word	0x42470000
 8004214:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004218:	f7fc feb4 	bl	8000f84 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e1af      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422a:	4b97      	ldr	r3, [pc, #604]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 800422c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80a8 	beq.w	8004394 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004244:	2300      	movs	r3, #0
 8004246:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00c      	beq.n	800426a <HAL_RCC_OscConfig+0x30e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d008      	beq.n	800426a <HAL_RCC_OscConfig+0x30e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b05      	cmp	r3, #5
 800425e:	d004      	beq.n	800426a <HAL_RCC_OscConfig+0x30e>
 8004260:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004264:	4889      	ldr	r0, [pc, #548]	; (800448c <HAL_RCC_OscConfig+0x530>)
 8004266:	f006 fde1 	bl	800ae2c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426a:	4b87      	ldr	r3, [pc, #540]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	4b83      	ldr	r3, [pc, #524]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a82      	ldr	r2, [pc, #520]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b80      	ldr	r3, [pc, #512]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004296:	4b7e      	ldr	r3, [pc, #504]	; (8004490 <HAL_RCC_OscConfig+0x534>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d118      	bne.n	80042d4 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a2:	4b7b      	ldr	r3, [pc, #492]	; (8004490 <HAL_RCC_OscConfig+0x534>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7a      	ldr	r2, [pc, #488]	; (8004490 <HAL_RCC_OscConfig+0x534>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ae:	f7fc fe69 	bl	8000f84 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fc fe65 	bl	8000f84 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e160      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	4b71      	ldr	r3, [pc, #452]	; (8004490 <HAL_RCC_OscConfig+0x534>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d106      	bne.n	80042ea <HAL_RCC_OscConfig+0x38e>
 80042dc:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	4a69      	ldr	r2, [pc, #420]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70
 80042e8:	e01c      	b.n	8004324 <HAL_RCC_OscConfig+0x3c8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x3b0>
 80042f2:	4b65      	ldr	r3, [pc, #404]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a64      	ldr	r2, [pc, #400]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 80042f8:	f043 0304 	orr.w	r3, r3, #4
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
 80042fe:	4b62      	ldr	r3, [pc, #392]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a61      	ldr	r2, [pc, #388]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0x3c8>
 800430c:	4b5e      	ldr	r3, [pc, #376]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	4a5d      	ldr	r2, [pc, #372]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	6713      	str	r3, [r2, #112]	; 0x70
 8004318:	4b5b      	ldr	r3, [pc, #364]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a5a      	ldr	r2, [pc, #360]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 800431e:	f023 0304 	bic.w	r3, r3, #4
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fc fe2a 	bl	8000f84 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004332:	e00a      	b.n	800434a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fc fe26 	bl	8000f84 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e11f      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434a:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ee      	beq.n	8004334 <HAL_RCC_OscConfig+0x3d8>
 8004356:	e014      	b.n	8004382 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004358:	f7fc fe14 	bl	8000f84 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fc fe10 	bl	8000f84 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e109      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004376:	4b44      	ldr	r3, [pc, #272]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1ee      	bne.n	8004360 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004382:	7dfb      	ldrb	r3, [r7, #23]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d105      	bne.n	8004394 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004388:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	4a3e      	ldr	r2, [pc, #248]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 800438e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_RCC_OscConfig+0x45a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_OscConfig+0x45a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d004      	beq.n	80043b6 <HAL_RCC_OscConfig+0x45a>
 80043ac:	f240 11cf 	movw	r1, #463	; 0x1cf
 80043b0:	4836      	ldr	r0, [pc, #216]	; (800448c <HAL_RCC_OscConfig+0x530>)
 80043b2:	f006 fd3b 	bl	800ae2c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80e4 	beq.w	8004588 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043c0:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCC_OscConfig+0x52c>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	f000 80ae 	beq.w	800452a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	f040 8092 	bne.w	80044fc <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d009      	beq.n	80043f4 <HAL_RCC_OscConfig+0x498>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e8:	d004      	beq.n	80043f4 <HAL_RCC_OscConfig+0x498>
 80043ea:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80043ee:	4827      	ldr	r0, [pc, #156]	; (800448c <HAL_RCC_OscConfig+0x530>)
 80043f0:	f006 fd1c 	bl	800ae2c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	2b3f      	cmp	r3, #63	; 0x3f
 80043fa:	d904      	bls.n	8004406 <HAL_RCC_OscConfig+0x4aa>
 80043fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004400:	4822      	ldr	r0, [pc, #136]	; (800448c <HAL_RCC_OscConfig+0x530>)
 8004402:	f006 fd13 	bl	800ae2c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2bbf      	cmp	r3, #191	; 0xbf
 800440c:	d904      	bls.n	8004418 <HAL_RCC_OscConfig+0x4bc>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004416:	d904      	bls.n	8004422 <HAL_RCC_OscConfig+0x4c6>
 8004418:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800441c:	481b      	ldr	r0, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x530>)
 800441e:	f006 fd05 	bl	800ae2c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	2b02      	cmp	r3, #2
 8004428:	d010      	beq.n	800444c <HAL_RCC_OscConfig+0x4f0>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	2b04      	cmp	r3, #4
 8004430:	d00c      	beq.n	800444c <HAL_RCC_OscConfig+0x4f0>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	2b06      	cmp	r3, #6
 8004438:	d008      	beq.n	800444c <HAL_RCC_OscConfig+0x4f0>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	2b08      	cmp	r3, #8
 8004440:	d004      	beq.n	800444c <HAL_RCC_OscConfig+0x4f0>
 8004442:	f240 11db 	movw	r1, #475	; 0x1db
 8004446:	4811      	ldr	r0, [pc, #68]	; (800448c <HAL_RCC_OscConfig+0x530>)
 8004448:	f006 fcf0 	bl	800ae2c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d903      	bls.n	800445c <HAL_RCC_OscConfig+0x500>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	2b0f      	cmp	r3, #15
 800445a:	d904      	bls.n	8004466 <HAL_RCC_OscConfig+0x50a>
 800445c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <HAL_RCC_OscConfig+0x530>)
 8004462:	f006 fce3 	bl	800ae2c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_OscConfig+0x538>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7fc fd8a 	bl	8000f84 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	e011      	b.n	8004498 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004474:	f7fc fd86 	bl	8000f84 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d90a      	bls.n	8004498 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e081      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	0800ddfc 	.word	0x0800ddfc
 8004490:	40007000 	.word	0x40007000
 8004494:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004498:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <HAL_RCC_OscConfig+0x638>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e7      	bne.n	8004474 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	019b      	lsls	r3, r3, #6
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	3b01      	subs	r3, #1
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	061b      	lsls	r3, r3, #24
 80044c8:	4932      	ldr	r1, [pc, #200]	; (8004594 <HAL_RCC_OscConfig+0x638>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ce:	4b32      	ldr	r3, [pc, #200]	; (8004598 <HAL_RCC_OscConfig+0x63c>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fc fd56 	bl	8000f84 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fc fd52 	bl	8000f84 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e04d      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ee:	4b29      	ldr	r3, [pc, #164]	; (8004594 <HAL_RCC_OscConfig+0x638>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x580>
 80044fa:	e045      	b.n	8004588 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_RCC_OscConfig+0x63c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7fc fd3f 	bl	8000f84 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450a:	f7fc fd3b 	bl	8000f84 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e036      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451c:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_RCC_OscConfig+0x638>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f0      	bne.n	800450a <HAL_RCC_OscConfig+0x5ae>
 8004528:	e02e      	b.n	8004588 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e029      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004536:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_RCC_OscConfig+0x638>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	429a      	cmp	r2, r3
 8004548:	d11c      	bne.n	8004584 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d115      	bne.n	8004584 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800455e:	4013      	ands	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004564:	4293      	cmp	r3, r2
 8004566:	d10d      	bne.n	8004584 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d106      	bne.n	8004584 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40023800 	.word	0x40023800
 8004598:	42470060 	.word	0x42470060

0800459c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e174      	b.n	800489a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x24>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d904      	bls.n	80045ca <HAL_RCC_ClockConfig+0x2e>
 80045c0:	f240 2151 	movw	r1, #593	; 0x251
 80045c4:	487b      	ldr	r0, [pc, #492]	; (80047b4 <HAL_RCC_ClockConfig+0x218>)
 80045c6:	f006 fc31 	bl	800ae2c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d019      	beq.n	8004604 <HAL_RCC_ClockConfig+0x68>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d016      	beq.n	8004604 <HAL_RCC_ClockConfig+0x68>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d013      	beq.n	8004604 <HAL_RCC_ClockConfig+0x68>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d010      	beq.n	8004604 <HAL_RCC_ClockConfig+0x68>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d00d      	beq.n	8004604 <HAL_RCC_ClockConfig+0x68>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d00a      	beq.n	8004604 <HAL_RCC_ClockConfig+0x68>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b06      	cmp	r3, #6
 80045f2:	d007      	beq.n	8004604 <HAL_RCC_ClockConfig+0x68>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b07      	cmp	r3, #7
 80045f8:	d004      	beq.n	8004604 <HAL_RCC_ClockConfig+0x68>
 80045fa:	f240 2152 	movw	r1, #594	; 0x252
 80045fe:	486d      	ldr	r0, [pc, #436]	; (80047b4 <HAL_RCC_ClockConfig+0x218>)
 8004600:	f006 fc14 	bl	800ae2c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b6c      	ldr	r3, [pc, #432]	; (80047b8 <HAL_RCC_ClockConfig+0x21c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d90c      	bls.n	800462c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b69      	ldr	r3, [pc, #420]	; (80047b8 <HAL_RCC_ClockConfig+0x21c>)
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b67      	ldr	r3, [pc, #412]	; (80047b8 <HAL_RCC_ClockConfig+0x21c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e136      	b.n	800489a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d049      	beq.n	80046cc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004644:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a5c      	ldr	r2, [pc, #368]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 800464a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800464e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800465c:	4b57      	ldr	r3, [pc, #348]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a56      	ldr	r2, [pc, #344]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 8004662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d024      	beq.n	80046ba <HAL_RCC_ClockConfig+0x11e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d020      	beq.n	80046ba <HAL_RCC_ClockConfig+0x11e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b90      	cmp	r3, #144	; 0x90
 800467e:	d01c      	beq.n	80046ba <HAL_RCC_ClockConfig+0x11e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2ba0      	cmp	r3, #160	; 0xa0
 8004686:	d018      	beq.n	80046ba <HAL_RCC_ClockConfig+0x11e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2bb0      	cmp	r3, #176	; 0xb0
 800468e:	d014      	beq.n	80046ba <HAL_RCC_ClockConfig+0x11e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2bc0      	cmp	r3, #192	; 0xc0
 8004696:	d010      	beq.n	80046ba <HAL_RCC_ClockConfig+0x11e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2bd0      	cmp	r3, #208	; 0xd0
 800469e:	d00c      	beq.n	80046ba <HAL_RCC_ClockConfig+0x11e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2be0      	cmp	r3, #224	; 0xe0
 80046a6:	d008      	beq.n	80046ba <HAL_RCC_ClockConfig+0x11e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2bf0      	cmp	r3, #240	; 0xf0
 80046ae:	d004      	beq.n	80046ba <HAL_RCC_ClockConfig+0x11e>
 80046b0:	f240 2175 	movw	r1, #629	; 0x275
 80046b4:	483f      	ldr	r0, [pc, #252]	; (80047b4 <HAL_RCC_ClockConfig+0x218>)
 80046b6:	f006 fbb9 	bl	800ae2c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ba:	4b40      	ldr	r3, [pc, #256]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	493d      	ldr	r1, [pc, #244]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d059      	beq.n	800478c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d010      	beq.n	8004702 <HAL_RCC_ClockConfig+0x166>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d00c      	beq.n	8004702 <HAL_RCC_ClockConfig+0x166>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d008      	beq.n	8004702 <HAL_RCC_ClockConfig+0x166>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d004      	beq.n	8004702 <HAL_RCC_ClockConfig+0x166>
 80046f8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80046fc:	482d      	ldr	r0, [pc, #180]	; (80047b4 <HAL_RCC_ClockConfig+0x218>)
 80046fe:	f006 fb95 	bl	800ae2c <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470a:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d119      	bne.n	800474a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0bf      	b.n	800489a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d003      	beq.n	800472a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004726:	2b03      	cmp	r3, #3
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0af      	b.n	800489a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0a7      	b.n	800489a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f023 0203 	bic.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4919      	ldr	r1, [pc, #100]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 8004758:	4313      	orrs	r3, r2
 800475a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800475c:	f7fc fc12 	bl	8000f84 <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	e00a      	b.n	800477a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004764:	f7fc fc0e 	bl	8000f84 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e08f      	b.n	800489a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <HAL_RCC_ClockConfig+0x220>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 020c 	and.w	r2, r3, #12
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	429a      	cmp	r2, r3
 800478a:	d1eb      	bne.n	8004764 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <HAL_RCC_ClockConfig+0x21c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d212      	bcs.n	80047c0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <HAL_RCC_ClockConfig+0x21c>)
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCC_ClockConfig+0x21c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d007      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e072      	b.n	800489a <HAL_RCC_ClockConfig+0x2fe>
 80047b4:	0800ddfc 	.word	0x0800ddfc
 80047b8:	40023c00 	.word	0x40023c00
 80047bc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d025      	beq.n	8004818 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d018      	beq.n	8004806 <HAL_RCC_ClockConfig+0x26a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047dc:	d013      	beq.n	8004806 <HAL_RCC_ClockConfig+0x26a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047e6:	d00e      	beq.n	8004806 <HAL_RCC_ClockConfig+0x26a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047f0:	d009      	beq.n	8004806 <HAL_RCC_ClockConfig+0x26a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80047fa:	d004      	beq.n	8004806 <HAL_RCC_ClockConfig+0x26a>
 80047fc:	f240 21ba 	movw	r1, #698	; 0x2ba
 8004800:	4828      	ldr	r0, [pc, #160]	; (80048a4 <HAL_RCC_ClockConfig+0x308>)
 8004802:	f006 fb13 	bl	800ae2c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004806:	4b28      	ldr	r3, [pc, #160]	; (80048a8 <HAL_RCC_ClockConfig+0x30c>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	4925      	ldr	r1, [pc, #148]	; (80048a8 <HAL_RCC_ClockConfig+0x30c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d026      	beq.n	8004872 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d018      	beq.n	800485e <HAL_RCC_ClockConfig+0x2c2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004834:	d013      	beq.n	800485e <HAL_RCC_ClockConfig+0x2c2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800483e:	d00e      	beq.n	800485e <HAL_RCC_ClockConfig+0x2c2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004848:	d009      	beq.n	800485e <HAL_RCC_ClockConfig+0x2c2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004852:	d004      	beq.n	800485e <HAL_RCC_ClockConfig+0x2c2>
 8004854:	f240 21c1 	movw	r1, #705	; 0x2c1
 8004858:	4812      	ldr	r0, [pc, #72]	; (80048a4 <HAL_RCC_ClockConfig+0x308>)
 800485a:	f006 fae7 	bl	800ae2c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_ClockConfig+0x30c>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	; (80048a8 <HAL_RCC_ClockConfig+0x30c>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4601      	mov	r1, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_ClockConfig+0x30c>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <HAL_RCC_ClockConfig+0x310>)
 8004884:	5cd3      	ldrb	r3, [r2, r3]
 8004886:	fa21 f303 	lsr.w	r3, r1, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x314>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x318>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc fb32 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	0800ddfc 	.word	0x0800ddfc
 80048a8:	40023800 	.word	0x40023800
 80048ac:	0800e4b8 	.word	0x0800e4b8
 80048b0:	20000088 	.word	0x20000088
 80048b4:	20000080 	.word	0x20000080

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	2300      	movs	r3, #0
 80048c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ce:	4b63      	ldr	r3, [pc, #396]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d007      	beq.n	80048ea <HAL_RCC_GetSysClockFreq+0x32>
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d008      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x38>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f040 80b4 	bne.w	8004a4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048e4:	4b5e      	ldr	r3, [pc, #376]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048e6:	60bb      	str	r3, [r7, #8]
       break;
 80048e8:	e0b3      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ea:	4b5e      	ldr	r3, [pc, #376]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80048ec:	60bb      	str	r3, [r7, #8]
      break;
 80048ee:	e0b0      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f0:	4b5a      	ldr	r3, [pc, #360]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048fa:	4b58      	ldr	r3, [pc, #352]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d04a      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004906:	4b55      	ldr	r3, [pc, #340]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	099b      	lsrs	r3, r3, #6
 800490c:	f04f 0400 	mov.w	r4, #0
 8004910:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	ea03 0501 	and.w	r5, r3, r1
 800491c:	ea04 0602 	and.w	r6, r4, r2
 8004920:	4629      	mov	r1, r5
 8004922:	4632      	mov	r2, r6
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	f04f 0400 	mov.w	r4, #0
 800492c:	0154      	lsls	r4, r2, #5
 800492e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004932:	014b      	lsls	r3, r1, #5
 8004934:	4619      	mov	r1, r3
 8004936:	4622      	mov	r2, r4
 8004938:	1b49      	subs	r1, r1, r5
 800493a:	eb62 0206 	sbc.w	r2, r2, r6
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	f04f 0400 	mov.w	r4, #0
 8004946:	0194      	lsls	r4, r2, #6
 8004948:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800494c:	018b      	lsls	r3, r1, #6
 800494e:	1a5b      	subs	r3, r3, r1
 8004950:	eb64 0402 	sbc.w	r4, r4, r2
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	00e2      	lsls	r2, r4, #3
 800495e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004962:	00d9      	lsls	r1, r3, #3
 8004964:	460b      	mov	r3, r1
 8004966:	4614      	mov	r4, r2
 8004968:	195b      	adds	r3, r3, r5
 800496a:	eb44 0406 	adc.w	r4, r4, r6
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	0262      	lsls	r2, r4, #9
 8004978:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800497c:	0259      	lsls	r1, r3, #9
 800497e:	460b      	mov	r3, r1
 8004980:	4614      	mov	r4, r2
 8004982:	4618      	mov	r0, r3
 8004984:	4621      	mov	r1, r4
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f04f 0400 	mov.w	r4, #0
 800498c:	461a      	mov	r2, r3
 800498e:	4623      	mov	r3, r4
 8004990:	f7fc f912 	bl	8000bb8 <__aeabi_uldivmod>
 8004994:	4603      	mov	r3, r0
 8004996:	460c      	mov	r4, r1
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e049      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499c:	4b2f      	ldr	r3, [pc, #188]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	099b      	lsrs	r3, r3, #6
 80049a2:	f04f 0400 	mov.w	r4, #0
 80049a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	ea03 0501 	and.w	r5, r3, r1
 80049b2:	ea04 0602 	and.w	r6, r4, r2
 80049b6:	4629      	mov	r1, r5
 80049b8:	4632      	mov	r2, r6
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	f04f 0400 	mov.w	r4, #0
 80049c2:	0154      	lsls	r4, r2, #5
 80049c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049c8:	014b      	lsls	r3, r1, #5
 80049ca:	4619      	mov	r1, r3
 80049cc:	4622      	mov	r2, r4
 80049ce:	1b49      	subs	r1, r1, r5
 80049d0:	eb62 0206 	sbc.w	r2, r2, r6
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	f04f 0400 	mov.w	r4, #0
 80049dc:	0194      	lsls	r4, r2, #6
 80049de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049e2:	018b      	lsls	r3, r1, #6
 80049e4:	1a5b      	subs	r3, r3, r1
 80049e6:	eb64 0402 	sbc.w	r4, r4, r2
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	00e2      	lsls	r2, r4, #3
 80049f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049f8:	00d9      	lsls	r1, r3, #3
 80049fa:	460b      	mov	r3, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	195b      	adds	r3, r3, r5
 8004a00:	eb44 0406 	adc.w	r4, r4, r6
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	02a2      	lsls	r2, r4, #10
 8004a0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a12:	0299      	lsls	r1, r3, #10
 8004a14:	460b      	mov	r3, r1
 8004a16:	4614      	mov	r4, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f04f 0400 	mov.w	r4, #0
 8004a22:	461a      	mov	r2, r3
 8004a24:	4623      	mov	r3, r4
 8004a26:	f7fc f8c7 	bl	8000bb8 <__aeabi_uldivmod>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	60bb      	str	r3, [r7, #8]
      break;
 8004a4a:	e002      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a4e:	60bb      	str	r3, [r7, #8]
      break;
 8004a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a52:	68bb      	ldr	r3, [r7, #8]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	007a1200 	.word	0x007a1200

08004a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000088 	.word	0x20000088

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a84:	f7ff fff0 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004a88:	4601      	mov	r1, r0
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	0a9b      	lsrs	r3, r3, #10
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4a03      	ldr	r2, [pc, #12]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	0800e4c8 	.word	0x0800e4c8

08004aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aac:	f7ff ffdc 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4601      	mov	r1, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0b5b      	lsrs	r3, r3, #13
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4a03      	ldr	r2, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	0800e4c8 	.word	0x0800e4c8

08004ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d904      	bls.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004af0:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004af4:	489d      	ldr	r0, [pc, #628]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004af6:	f006 f999 	bl	800ae2c <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d105      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d060      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d903      	bls.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b07      	cmp	r3, #7
 8004b20:	d904      	bls.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b22:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004b26:	4891      	ldr	r0, [pc, #580]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b28:	f006 f980 	bl	800ae2c <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2bbf      	cmp	r3, #191	; 0xbf
 8004b32:	d904      	bls.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004b3c:	d904      	bls.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004b3e:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004b42:	488a      	ldr	r0, [pc, #552]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b44:	f006 f972 	bl	800ae2c <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d903      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b3f      	cmp	r3, #63	; 0x3f
 8004b56:	d904      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004b58:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8004b5c:	4883      	ldr	r0, [pc, #524]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b5e:	f006 f965 	bl	800ae2c <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b62:	4b83      	ldr	r3, [pc, #524]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b68:	f7fc fa0c 	bl	8000f84 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b70:	f7fc fa08 	bl	8000f84 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e1ae      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b82:	4b7c      	ldr	r3, [pc, #496]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	019b      	lsls	r3, r3, #6
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	071b      	lsls	r3, r3, #28
 8004ba0:	4974      	ldr	r1, [pc, #464]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ba8:	4b71      	ldr	r3, [pc, #452]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bae:	f7fc f9e9 	bl	8000f84 <HAL_GetTick>
 8004bb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bb6:	f7fc f9e5 	bl	8000f84 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e18b      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc8:	4b6a      	ldr	r3, [pc, #424]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8174 	beq.w	8004eca <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bea:	f000 80a6 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf6:	f000 80a0 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	4a5e      	ldr	r2, [pc, #376]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	f000 809a 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	4a5c      	ldr	r2, [pc, #368]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	f000 8094 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	4a5a      	ldr	r2, [pc, #360]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	f000 808e 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	4a58      	ldr	r2, [pc, #352]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	f000 8088 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4a56      	ldr	r2, [pc, #344]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	f000 8082 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	4a54      	ldr	r2, [pc, #336]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d07c      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d077      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	4a51      	ldr	r2, [pc, #324]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d072      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	4a4f      	ldr	r2, [pc, #316]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d06d      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	4a4e      	ldr	r2, [pc, #312]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d068      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	4a4c      	ldr	r2, [pc, #304]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d063      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	4a4b      	ldr	r2, [pc, #300]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d05e      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	4a49      	ldr	r2, [pc, #292]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d059      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	4a48      	ldr	r2, [pc, #288]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d054      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	4a46      	ldr	r2, [pc, #280]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04f      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	4a45      	ldr	r2, [pc, #276]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d04a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	4a43      	ldr	r2, [pc, #268]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d045      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	4a42      	ldr	r2, [pc, #264]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d040      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d03b      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	4a3f      	ldr	r2, [pc, #252]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d036      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	4a3d      	ldr	r2, [pc, #244]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d031      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	4a3c      	ldr	r2, [pc, #240]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d02c      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	4a3a      	ldr	r2, [pc, #232]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d027      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	4a39      	ldr	r2, [pc, #228]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	4a37      	ldr	r2, [pc, #220]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01d      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	4a36      	ldr	r2, [pc, #216]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	4a34      	ldr	r2, [pc, #208]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	4a33      	ldr	r2, [pc, #204]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	4a31      	ldr	r2, [pc, #196]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	4a30      	ldr	r2, [pc, #192]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d30:	f640 2112 	movw	r1, #2578	; 0xa12
 8004d34:	480d      	ldr	r0, [pc, #52]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d36:	f006 f879 	bl	800ae2c <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d48:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d56:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a25      	ldr	r2, [pc, #148]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d62:	f7fc f90f 	bl	8000f84 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d68:	e04d      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d6a:	bf00      	nop
 8004d6c:	0800de34 	.word	0x0800de34
 8004d70:	42470068 	.word	0x42470068
 8004d74:	40023800 	.word	0x40023800
 8004d78:	00020300 	.word	0x00020300
 8004d7c:	00030300 	.word	0x00030300
 8004d80:	00040300 	.word	0x00040300
 8004d84:	00050300 	.word	0x00050300
 8004d88:	00060300 	.word	0x00060300
 8004d8c:	00070300 	.word	0x00070300
 8004d90:	00080300 	.word	0x00080300
 8004d94:	00090300 	.word	0x00090300
 8004d98:	000a0300 	.word	0x000a0300
 8004d9c:	000b0300 	.word	0x000b0300
 8004da0:	000c0300 	.word	0x000c0300
 8004da4:	000d0300 	.word	0x000d0300
 8004da8:	000e0300 	.word	0x000e0300
 8004dac:	000f0300 	.word	0x000f0300
 8004db0:	00100300 	.word	0x00100300
 8004db4:	00110300 	.word	0x00110300
 8004db8:	00120300 	.word	0x00120300
 8004dbc:	00130300 	.word	0x00130300
 8004dc0:	00140300 	.word	0x00140300
 8004dc4:	00150300 	.word	0x00150300
 8004dc8:	00160300 	.word	0x00160300
 8004dcc:	00170300 	.word	0x00170300
 8004dd0:	00180300 	.word	0x00180300
 8004dd4:	00190300 	.word	0x00190300
 8004dd8:	001a0300 	.word	0x001a0300
 8004ddc:	001b0300 	.word	0x001b0300
 8004de0:	001c0300 	.word	0x001c0300
 8004de4:	001d0300 	.word	0x001d0300
 8004de8:	001e0300 	.word	0x001e0300
 8004dec:	001f0300 	.word	0x001f0300
 8004df0:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004df4:	f7fc f8c6 	bl	8000f84 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e06c      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e06:	4b38      	ldr	r3, [pc, #224]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e12:	4b36      	ldr	r3, [pc, #216]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d02f      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d028      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e30:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e38:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e46:	4a29      	ldr	r2, [pc, #164]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e4c:	4b27      	ldr	r3, [pc, #156]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d114      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e58:	f7fc f894 	bl	8000f84 <HAL_GetTick>
 8004e5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fc f890 	bl	8000f84 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e034      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e76:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0ee      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e8e:	d10d      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004e90:	4b16      	ldr	r3, [pc, #88]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea4:	4911      	ldr	r1, [pc, #68]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	608b      	str	r3, [r1, #8]
 8004eaa:	e005      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a0e      	ldr	r2, [pc, #56]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004eb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004eb6:	6093      	str	r3, [r2, #8]
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004eba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec4:	4909      	ldr	r1, [pc, #36]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	7d1a      	ldrb	r2, [r3, #20]
 8004eda:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004edc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40007000 	.word	0x40007000
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	42470e40 	.word	0x42470e40
 8004ef4:	424711e0 	.word	0x424711e0

08004ef8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0d6      	b.n	80050b8 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d007      	beq.n	8004f22 <HAL_RTC_Init+0x2a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_RTC_Init+0x2a>
 8004f1a:	21ff      	movs	r1, #255	; 0xff
 8004f1c:	4868      	ldr	r0, [pc, #416]	; (80050c0 <HAL_RTC_Init+0x1c8>)
 8004f1e:	f005 ff85 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b7f      	cmp	r3, #127	; 0x7f
 8004f28:	d904      	bls.n	8004f34 <HAL_RTC_Init+0x3c>
 8004f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f2e:	4864      	ldr	r0, [pc, #400]	; (80050c0 <HAL_RTC_Init+0x1c8>)
 8004f30:	f005 ff7c 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3c:	d304      	bcc.n	8004f48 <HAL_RTC_Init+0x50>
 8004f3e:	f240 1101 	movw	r1, #257	; 0x101
 8004f42:	485f      	ldr	r0, [pc, #380]	; (80050c0 <HAL_RTC_Init+0x1c8>)
 8004f44:	f005 ff72 	bl	800ae2c <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d013      	beq.n	8004f78 <HAL_RTC_Init+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f58:	d00e      	beq.n	8004f78 <HAL_RTC_Init+0x80>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f62:	d009      	beq.n	8004f78 <HAL_RTC_Init+0x80>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f6c:	d004      	beq.n	8004f78 <HAL_RTC_Init+0x80>
 8004f6e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004f72:	4853      	ldr	r0, [pc, #332]	; (80050c0 <HAL_RTC_Init+0x1c8>)
 8004f74:	f005 ff5a 	bl	800ae2c <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HAL_RTC_Init+0x9c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f88:	d004      	beq.n	8004f94 <HAL_RTC_Init+0x9c>
 8004f8a:	f240 1103 	movw	r1, #259	; 0x103
 8004f8e:	484c      	ldr	r0, [pc, #304]	; (80050c0 <HAL_RTC_Init+0x1c8>)
 8004f90:	f005 ff4c 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_RTC_Init+0xb8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fa4:	d004      	beq.n	8004fb0 <HAL_RTC_Init+0xb8>
 8004fa6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004faa:	4845      	ldr	r0, [pc, #276]	; (80050c0 <HAL_RTC_Init+0x1c8>)
 8004fac:	f005 ff3e 	bl	800ae2c <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7f5b      	ldrb	r3, [r3, #29]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f005 ffd9 	bl	800af78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	22ca      	movs	r2, #202	; 0xca
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2253      	movs	r2, #83	; 0x53
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 ff01 	bl	8005de4 <RTC_EnterInitMode>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	22ff      	movs	r2, #255	; 0xff
 8004fee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e05e      	b.n	80050b8 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6899      	ldr	r1, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68d2      	ldr	r2, [r2, #12]
 8005034:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6919      	ldr	r1, [r3, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	041a      	lsls	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005058:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10e      	bne.n	8005086 <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fe93 	bl	8005d94 <HAL_RTC_WaitForSynchro>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	22ff      	movs	r2, #255	; 0xff
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2204      	movs	r2, #4
 8005080:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e018      	b.n	80050b8 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	22ff      	movs	r2, #255	; 0xff
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80050b6:	2300      	movs	r3, #0
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	0800de70 	.word	0x0800de70

080050c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <HAL_RTC_SetTime+0x26>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d004      	beq.n	80050ea <HAL_RTC_SetTime+0x26>
 80050e0:	f240 21da 	movw	r1, #730	; 0x2da
 80050e4:	48a4      	ldr	r0, [pc, #656]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 80050e6:	f005 fea1 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f2:	d00d      	beq.n	8005110 <HAL_RTC_SetTime+0x4c>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fc:	d008      	beq.n	8005110 <HAL_RTC_SetTime+0x4c>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <HAL_RTC_SetTime+0x4c>
 8005106:	f240 21db 	movw	r1, #731	; 0x2db
 800510a:	489b      	ldr	r0, [pc, #620]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 800510c:	f005 fe8e 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <HAL_RTC_SetTime+0x68>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005120:	d004      	beq.n	800512c <HAL_RTC_SetTime+0x68>
 8005122:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8005126:	4894      	ldr	r0, [pc, #592]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 8005128:	f005 fe80 	bl	800ae2c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	7f1b      	ldrb	r3, [r3, #28]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_RTC_SetTime+0x74>
 8005134:	2302      	movs	r3, #2
 8005136:	e12c      	b.n	8005392 <HAL_RTC_SetTime+0x2ce>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2202      	movs	r2, #2
 8005142:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d15c      	bne.n	8005204 <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01a      	beq.n	800518e <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_RTC_SetTime+0xa4>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b0c      	cmp	r3, #12
 8005166:	d904      	bls.n	8005172 <HAL_RTC_SetTime+0xae>
 8005168:	f240 21e7 	movw	r1, #743	; 0x2e7
 800516c:	4882      	ldr	r0, [pc, #520]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 800516e:	f005 fe5d 	bl	800ae2c <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	78db      	ldrb	r3, [r3, #3]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d015      	beq.n	80051a6 <HAL_RTC_SetTime+0xe2>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	78db      	ldrb	r3, [r3, #3]
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d011      	beq.n	80051a6 <HAL_RTC_SetTime+0xe2>
 8005182:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8005186:	487c      	ldr	r0, [pc, #496]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 8005188:	f005 fe50 	bl	800ae2c <assert_failed>
 800518c:	e00b      	b.n	80051a6 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b17      	cmp	r3, #23
 800519a:	d904      	bls.n	80051a6 <HAL_RTC_SetTime+0xe2>
 800519c:	f240 21ed 	movw	r1, #749	; 0x2ed
 80051a0:	4875      	ldr	r0, [pc, #468]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 80051a2:	f005 fe43 	bl	800ae2c <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	2b3b      	cmp	r3, #59	; 0x3b
 80051ac:	d904      	bls.n	80051b8 <HAL_RTC_SetTime+0xf4>
 80051ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80051b2:	4871      	ldr	r0, [pc, #452]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 80051b4:	f005 fe3a 	bl	800ae2c <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	2b3b      	cmp	r3, #59	; 0x3b
 80051be:	d904      	bls.n	80051ca <HAL_RTC_SetTime+0x106>
 80051c0:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80051c4:	486c      	ldr	r0, [pc, #432]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 80051c6:	f005 fe31 	bl	800ae2c <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fe34 	bl	8005e3c <RTC_ByteToBcd2>
 80051d4:	4603      	mov	r3, r0
 80051d6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fe2d 	bl	8005e3c <RTC_ByteToBcd2>
 80051e2:	4603      	mov	r3, r0
 80051e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051e6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	789b      	ldrb	r3, [r3, #2]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fe25 	bl	8005e3c <RTC_ByteToBcd2>
 80051f2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80051f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	78db      	ldrb	r3, [r3, #3]
 80051fc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e062      	b.n	80052ca <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d022      	beq.n	8005258 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fe2e 	bl	8005e78 <RTC_Bcd2ToByte>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <HAL_RTC_SetTime+0x16e>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fe26 	bl	8005e78 <RTC_Bcd2ToByte>
 800522c:	4603      	mov	r3, r0
 800522e:	2b0c      	cmp	r3, #12
 8005230:	d904      	bls.n	800523c <HAL_RTC_SetTime+0x178>
 8005232:	f240 21fb 	movw	r1, #763	; 0x2fb
 8005236:	4850      	ldr	r0, [pc, #320]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 8005238:	f005 fdf8 	bl	800ae2c <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	78db      	ldrb	r3, [r3, #3]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d019      	beq.n	8005278 <HAL_RTC_SetTime+0x1b4>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	78db      	ldrb	r3, [r3, #3]
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d015      	beq.n	8005278 <HAL_RTC_SetTime+0x1b4>
 800524c:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8005250:	4849      	ldr	r0, [pc, #292]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 8005252:	f005 fdeb 	bl	800ae2c <assert_failed>
 8005256:	e00f      	b.n	8005278 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2200      	movs	r2, #0
 800525c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fe08 	bl	8005e78 <RTC_Bcd2ToByte>
 8005268:	4603      	mov	r3, r0
 800526a:	2b17      	cmp	r3, #23
 800526c:	d904      	bls.n	8005278 <HAL_RTC_SetTime+0x1b4>
 800526e:	f240 3101 	movw	r1, #769	; 0x301
 8005272:	4841      	ldr	r0, [pc, #260]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 8005274:	f005 fdda 	bl	800ae2c <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fdfb 	bl	8005e78 <RTC_Bcd2ToByte>
 8005282:	4603      	mov	r3, r0
 8005284:	2b3b      	cmp	r3, #59	; 0x3b
 8005286:	d904      	bls.n	8005292 <HAL_RTC_SetTime+0x1ce>
 8005288:	f240 3103 	movw	r1, #771	; 0x303
 800528c:	483a      	ldr	r0, [pc, #232]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 800528e:	f005 fdcd 	bl	800ae2c <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	789b      	ldrb	r3, [r3, #2]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fdee 	bl	8005e78 <RTC_Bcd2ToByte>
 800529c:	4603      	mov	r3, r0
 800529e:	2b3b      	cmp	r3, #59	; 0x3b
 80052a0:	d904      	bls.n	80052ac <HAL_RTC_SetTime+0x1e8>
 80052a2:	f44f 7141 	mov.w	r1, #772	; 0x304
 80052a6:	4834      	ldr	r0, [pc, #208]	; (8005378 <HAL_RTC_SetTime+0x2b4>)
 80052a8:	f005 fdc0 	bl	800ae2c <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80052b8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80052be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	78db      	ldrb	r3, [r3, #3]
 80052c4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	22ca      	movs	r2, #202	; 0xca
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2253      	movs	r2, #83	; 0x53
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fd82 	bl	8005de4 <RTC_EnterInitMode>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	22ff      	movs	r2, #255	; 0xff
 80052ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2204      	movs	r2, #4
 80052f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e049      	b.n	8005392 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005308:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800530c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800531c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6899      	ldr	r1, [r3, #8]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	431a      	orrs	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005344:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d113      	bne.n	800537c <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fd1d 	bl	8005d94 <HAL_RTC_WaitForSynchro>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	22ff      	movs	r2, #255	; 0xff
 8005366:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2204      	movs	r2, #4
 800536c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e00c      	b.n	8005392 <HAL_RTC_SetTime+0x2ce>
 8005378:	0800de70 	.word	0x0800de70
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005390:	2300      	movs	r3, #0
  }
}
 8005392:	4618      	mov	r0, r3
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	bd90      	pop	{r4, r7, pc}
 800539a:	bf00      	nop

0800539c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <HAL_RTC_SetDate+0x26>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d004      	beq.n	80053c2 <HAL_RTC_SetDate+0x26>
 80053b8:	f240 318a 	movw	r1, #906	; 0x38a
 80053bc:	488e      	ldr	r0, [pc, #568]	; (80055f8 <HAL_RTC_SetDate+0x25c>)
 80053be:	f005 fd35 	bl	800ae2c <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	7f1b      	ldrb	r3, [r3, #28]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_RTC_SetDate+0x32>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e10f      	b.n	80055ee <HAL_RTC_SetDate+0x252>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2202      	movs	r2, #2
 80053d8:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10e      	bne.n	80053fe <HAL_RTC_SetDate+0x62>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	785b      	ldrb	r3, [r3, #1]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	f023 0310 	bic.w	r3, r3, #16
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	330a      	adds	r3, #10
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d01c      	beq.n	8005440 <HAL_RTC_SetDate+0xa4>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d018      	beq.n	8005440 <HAL_RTC_SetDate+0xa4>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d014      	beq.n	8005440 <HAL_RTC_SetDate+0xa4>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b04      	cmp	r3, #4
 800541c:	d010      	beq.n	8005440 <HAL_RTC_SetDate+0xa4>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b05      	cmp	r3, #5
 8005424:	d00c      	beq.n	8005440 <HAL_RTC_SetDate+0xa4>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b06      	cmp	r3, #6
 800542c:	d008      	beq.n	8005440 <HAL_RTC_SetDate+0xa4>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b07      	cmp	r3, #7
 8005434:	d004      	beq.n	8005440 <HAL_RTC_SetDate+0xa4>
 8005436:	f240 3196 	movw	r1, #918	; 0x396
 800543a:	486f      	ldr	r0, [pc, #444]	; (80055f8 <HAL_RTC_SetDate+0x25c>)
 800543c:	f005 fcf6 	bl	800ae2c <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d13f      	bne.n	80054c6 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	78db      	ldrb	r3, [r3, #3]
 800544a:	2b63      	cmp	r3, #99	; 0x63
 800544c:	d904      	bls.n	8005458 <HAL_RTC_SetDate+0xbc>
 800544e:	f240 319a 	movw	r1, #922	; 0x39a
 8005452:	4869      	ldr	r0, [pc, #420]	; (80055f8 <HAL_RTC_SetDate+0x25c>)
 8005454:	f005 fcea 	bl	800ae2c <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_RTC_SetDate+0xcc>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b0c      	cmp	r3, #12
 8005466:	d904      	bls.n	8005472 <HAL_RTC_SetDate+0xd6>
 8005468:	f240 319b 	movw	r1, #923	; 0x39b
 800546c:	4862      	ldr	r0, [pc, #392]	; (80055f8 <HAL_RTC_SetDate+0x25c>)
 800546e:	f005 fcdd 	bl	800ae2c <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	789b      	ldrb	r3, [r3, #2]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_RTC_SetDate+0xe6>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	789b      	ldrb	r3, [r3, #2]
 800547e:	2b1f      	cmp	r3, #31
 8005480:	d904      	bls.n	800548c <HAL_RTC_SetDate+0xf0>
 8005482:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8005486:	485c      	ldr	r0, [pc, #368]	; (80055f8 <HAL_RTC_SetDate+0x25c>)
 8005488:	f005 fcd0 	bl	800ae2c <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	78db      	ldrb	r3, [r3, #3]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fcd3 	bl	8005e3c <RTC_ByteToBcd2>
 8005496:	4603      	mov	r3, r0
 8005498:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fccc 	bl	8005e3c <RTC_ByteToBcd2>
 80054a4:	4603      	mov	r3, r0
 80054a6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80054a8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	789b      	ldrb	r3, [r3, #2]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fcc4 	bl	8005e3c <RTC_ByteToBcd2>
 80054b4:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80054b6:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e045      	b.n	8005552 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	78db      	ldrb	r3, [r3, #3]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fcd4 	bl	8005e78 <RTC_Bcd2ToByte>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b63      	cmp	r3, #99	; 0x63
 80054d4:	d904      	bls.n	80054e0 <HAL_RTC_SetDate+0x144>
 80054d6:	f240 31a5 	movw	r1, #933	; 0x3a5
 80054da:	4847      	ldr	r0, [pc, #284]	; (80055f8 <HAL_RTC_SetDate+0x25c>)
 80054dc:	f005 fca6 	bl	800ae2c <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fcc7 	bl	8005e78 <RTC_Bcd2ToByte>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <HAL_RTC_SetDate+0x164>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fcbf 	bl	8005e78 <RTC_Bcd2ToByte>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	d904      	bls.n	800550a <HAL_RTC_SetDate+0x16e>
 8005500:	f240 31a6 	movw	r1, #934	; 0x3a6
 8005504:	483c      	ldr	r0, [pc, #240]	; (80055f8 <HAL_RTC_SetDate+0x25c>)
 8005506:	f005 fc91 	bl	800ae2c <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	789b      	ldrb	r3, [r3, #2]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fcb2 	bl	8005e78 <RTC_Bcd2ToByte>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <HAL_RTC_SetDate+0x18e>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	789b      	ldrb	r3, [r3, #2]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fcaa 	bl	8005e78 <RTC_Bcd2ToByte>
 8005524:	4603      	mov	r3, r0
 8005526:	2b1f      	cmp	r3, #31
 8005528:	d904      	bls.n	8005534 <HAL_RTC_SetDate+0x198>
 800552a:	f240 31a7 	movw	r1, #935	; 0x3a7
 800552e:	4832      	ldr	r0, [pc, #200]	; (80055f8 <HAL_RTC_SetDate+0x25c>)
 8005530:	f005 fc7c 	bl	800ae2c <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	78db      	ldrb	r3, [r3, #3]
 8005538:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005540:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005546:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	22ca      	movs	r2, #202	; 0xca
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2253      	movs	r2, #83	; 0x53
 8005560:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fc3e 	bl	8005de4 <RTC_EnterInitMode>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	22ff      	movs	r2, #255	; 0xff
 8005574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2204      	movs	r2, #4
 800557a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e033      	b.n	80055ee <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005590:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005594:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d111      	bne.n	80055d8 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fbed 	bl	8005d94 <HAL_RTC_WaitForSynchro>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	22ff      	movs	r2, #255	; 0xff
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2204      	movs	r2, #4
 80055cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e00a      	b.n	80055ee <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	22ff      	movs	r2, #255	; 0xff
 80055de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd90      	pop	{r4, r7, pc}
 80055f6:	bf00      	nop
 80055f8:	0800de70 	.word	0x0800de70

080055fc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80055fc:	b590      	push	{r4, r7, lr}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	2300      	movs	r3, #0
 800560e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005610:	4baa      	ldr	r3, [pc, #680]	; (80058bc <HAL_RTC_SetAlarm_IT+0x2c0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4aaa      	ldr	r2, [pc, #680]	; (80058c0 <HAL_RTC_SetAlarm_IT+0x2c4>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	0adb      	lsrs	r3, r3, #11
 800561c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005620:	fb02 f303 	mul.w	r3, r2, r3
 8005624:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <HAL_RTC_SetAlarm_IT+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d004      	beq.n	800563c <HAL_RTC_SetAlarm_IT+0x40>
 8005632:	f240 41e7 	movw	r1, #1255	; 0x4e7
 8005636:	48a3      	ldr	r0, [pc, #652]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005638:	f005 fbf8 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005644:	d009      	beq.n	800565a <HAL_RTC_SetAlarm_IT+0x5e>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800564e:	d004      	beq.n	800565a <HAL_RTC_SetAlarm_IT+0x5e>
 8005650:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 8005654:	489b      	ldr	r0, [pc, #620]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005656:	f005 fbe9 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <HAL_RTC_SetAlarm_IT+0x74>
 8005666:	f240 41e9 	movw	r1, #1257	; 0x4e9
 800566a:	4896      	ldr	r0, [pc, #600]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800566c:	f005 fbde 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <HAL_RTC_SetAlarm_IT+0x90>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d004      	beq.n	800568c <HAL_RTC_SetAlarm_IT+0x90>
 8005682:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8005686:	488f      	ldr	r0, [pc, #572]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005688:	f005 fbd0 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005694:	d304      	bcc.n	80056a0 <HAL_RTC_SetAlarm_IT+0xa4>
 8005696:	f240 41eb 	movw	r1, #1259	; 0x4eb
 800569a:	488a      	ldr	r0, [pc, #552]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800569c:	f005 fbc6 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d04f      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056b0:	d04a      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056ba:	d045      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056c4:	d040      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056ce:	d03b      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80056d8:	d036      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80056e2:	d031      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80056ec:	d02c      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f6:	d027      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8005700:	d022      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800570a:	d01d      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8005714:	d018      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800571e:	d013      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8005728:	d00e      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005732:	d009      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800573c:	d004      	beq.n	8005748 <HAL_RTC_SetAlarm_IT+0x14c>
 800573e:	f240 41ec 	movw	r1, #1260	; 0x4ec
 8005742:	4860      	ldr	r0, [pc, #384]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005744:	f005 fb72 	bl	800ae2c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	7f1b      	ldrb	r3, [r3, #28]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_RTC_SetAlarm_IT+0x158>
 8005750:	2302      	movs	r3, #2
 8005752:	e237      	b.n	8005bc4 <HAL_RTC_SetAlarm_IT+0x5c8>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2202      	movs	r2, #2
 800575e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 80b0 	bne.w	80058c8 <HAL_RTC_SetAlarm_IT+0x2cc>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01a      	beq.n	80057ac <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_RTC_SetAlarm_IT+0x18a>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b0c      	cmp	r3, #12
 8005784:	d904      	bls.n	8005790 <HAL_RTC_SetAlarm_IT+0x194>
 8005786:	f240 41f7 	movw	r1, #1271	; 0x4f7
 800578a:	484e      	ldr	r0, [pc, #312]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800578c:	f005 fb4e 	bl	800ae2c <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	78db      	ldrb	r3, [r3, #3]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d015      	beq.n	80057c4 <HAL_RTC_SetAlarm_IT+0x1c8>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	78db      	ldrb	r3, [r3, #3]
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d011      	beq.n	80057c4 <HAL_RTC_SetAlarm_IT+0x1c8>
 80057a0:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 80057a4:	4847      	ldr	r0, [pc, #284]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057a6:	f005 fb41 	bl	800ae2c <assert_failed>
 80057aa:	e00b      	b.n	80057c4 <HAL_RTC_SetAlarm_IT+0x1c8>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b17      	cmp	r3, #23
 80057b8:	d904      	bls.n	80057c4 <HAL_RTC_SetAlarm_IT+0x1c8>
 80057ba:	f240 41fd 	movw	r1, #1277	; 0x4fd
 80057be:	4841      	ldr	r0, [pc, #260]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057c0:	f005 fb34 	bl	800ae2c <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b3b      	cmp	r3, #59	; 0x3b
 80057ca:	d904      	bls.n	80057d6 <HAL_RTC_SetAlarm_IT+0x1da>
 80057cc:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80057d0:	483c      	ldr	r0, [pc, #240]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057d2:	f005 fb2b 	bl	800ae2c <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	789b      	ldrb	r3, [r3, #2]
 80057da:	2b3b      	cmp	r3, #59	; 0x3b
 80057dc:	d904      	bls.n	80057e8 <HAL_RTC_SetAlarm_IT+0x1ec>
 80057de:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80057e2:	4838      	ldr	r0, [pc, #224]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057e4:	f005 fb22 	bl	800ae2c <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10f      	bne.n	8005810 <HAL_RTC_SetAlarm_IT+0x214>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <HAL_RTC_SetAlarm_IT+0x208>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005800:	2b1f      	cmp	r3, #31
 8005802:	d92d      	bls.n	8005860 <HAL_RTC_SetAlarm_IT+0x264>
 8005804:	f240 5104 	movw	r1, #1284	; 0x504
 8005808:	482e      	ldr	r0, [pc, #184]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800580a:	f005 fb0f 	bl	800ae2c <assert_failed>
 800580e:	e027      	b.n	8005860 <HAL_RTC_SetAlarm_IT+0x264>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d022      	beq.n	8005860 <HAL_RTC_SetAlarm_IT+0x264>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d01d      	beq.n	8005860 <HAL_RTC_SetAlarm_IT+0x264>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d018      	beq.n	8005860 <HAL_RTC_SetAlarm_IT+0x264>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d013      	beq.n	8005860 <HAL_RTC_SetAlarm_IT+0x264>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800583e:	2b05      	cmp	r3, #5
 8005840:	d00e      	beq.n	8005860 <HAL_RTC_SetAlarm_IT+0x264>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005848:	2b06      	cmp	r3, #6
 800584a:	d009      	beq.n	8005860 <HAL_RTC_SetAlarm_IT+0x264>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005852:	2b07      	cmp	r3, #7
 8005854:	d004      	beq.n	8005860 <HAL_RTC_SetAlarm_IT+0x264>
 8005856:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 800585a:	481a      	ldr	r0, [pc, #104]	; (80058c4 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800585c:	f005 fae6 	bl	800ae2c <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fae9 	bl	8005e3c <RTC_ByteToBcd2>
 800586a:	4603      	mov	r3, r0
 800586c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fae2 	bl	8005e3c <RTC_ByteToBcd2>
 8005878:	4603      	mov	r3, r0
 800587a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800587c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	789b      	ldrb	r3, [r3, #2]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fada 	bl	8005e3c <RTC_ByteToBcd2>
 8005888:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800588a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	78db      	ldrb	r3, [r3, #3]
 8005892:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005894:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 facc 	bl	8005e3c <RTC_ByteToBcd2>
 80058a4:	4603      	mov	r3, r0
 80058a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80058a8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80058b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	e0d3      	b.n	8005a64 <HAL_RTC_SetAlarm_IT+0x468>
 80058bc:	20000088 	.word	0x20000088
 80058c0:	10624dd3 	.word	0x10624dd3
 80058c4:	0800de70 	.word	0x0800de70
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d022      	beq.n	800591c <HAL_RTC_SetAlarm_IT+0x320>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 facc 	bl	8005e78 <RTC_Bcd2ToByte>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_RTC_SetAlarm_IT+0x2fa>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fac4 	bl	8005e78 <RTC_Bcd2ToByte>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	d904      	bls.n	8005900 <HAL_RTC_SetAlarm_IT+0x304>
 80058f6:	f240 5116 	movw	r1, #1302	; 0x516
 80058fa:	4896      	ldr	r0, [pc, #600]	; (8005b54 <HAL_RTC_SetAlarm_IT+0x558>)
 80058fc:	f005 fa96 	bl	800ae2c <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	78db      	ldrb	r3, [r3, #3]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d019      	beq.n	800593c <HAL_RTC_SetAlarm_IT+0x340>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	78db      	ldrb	r3, [r3, #3]
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d015      	beq.n	800593c <HAL_RTC_SetAlarm_IT+0x340>
 8005910:	f240 5117 	movw	r1, #1303	; 0x517
 8005914:	488f      	ldr	r0, [pc, #572]	; (8005b54 <HAL_RTC_SetAlarm_IT+0x558>)
 8005916:	f005 fa89 	bl	800ae2c <assert_failed>
 800591a:	e00f      	b.n	800593c <HAL_RTC_SetAlarm_IT+0x340>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2200      	movs	r2, #0
 8005920:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 faa6 	bl	8005e78 <RTC_Bcd2ToByte>
 800592c:	4603      	mov	r3, r0
 800592e:	2b17      	cmp	r3, #23
 8005930:	d904      	bls.n	800593c <HAL_RTC_SetAlarm_IT+0x340>
 8005932:	f240 511c 	movw	r1, #1308	; 0x51c
 8005936:	4887      	ldr	r0, [pc, #540]	; (8005b54 <HAL_RTC_SetAlarm_IT+0x558>)
 8005938:	f005 fa78 	bl	800ae2c <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fa99 	bl	8005e78 <RTC_Bcd2ToByte>
 8005946:	4603      	mov	r3, r0
 8005948:	2b3b      	cmp	r3, #59	; 0x3b
 800594a:	d904      	bls.n	8005956 <HAL_RTC_SetAlarm_IT+0x35a>
 800594c:	f240 511f 	movw	r1, #1311	; 0x51f
 8005950:	4880      	ldr	r0, [pc, #512]	; (8005b54 <HAL_RTC_SetAlarm_IT+0x558>)
 8005952:	f005 fa6b 	bl	800ae2c <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	789b      	ldrb	r3, [r3, #2]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fa8c 	bl	8005e78 <RTC_Bcd2ToByte>
 8005960:	4603      	mov	r3, r0
 8005962:	2b3b      	cmp	r3, #59	; 0x3b
 8005964:	d904      	bls.n	8005970 <HAL_RTC_SetAlarm_IT+0x374>
 8005966:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800596a:	487a      	ldr	r0, [pc, #488]	; (8005b54 <HAL_RTC_SetAlarm_IT+0x558>)
 800596c:	f005 fa5e 	bl	800ae2c <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d117      	bne.n	80059a8 <HAL_RTC_SetAlarm_IT+0x3ac>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fa7a 	bl	8005e78 <RTC_Bcd2ToByte>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_RTC_SetAlarm_IT+0x3a0>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fa71 	bl	8005e78 <RTC_Bcd2ToByte>
 8005996:	4603      	mov	r3, r0
 8005998:	2b1f      	cmp	r3, #31
 800599a:	d949      	bls.n	8005a30 <HAL_RTC_SetAlarm_IT+0x434>
 800599c:	f240 5124 	movw	r1, #1316	; 0x524
 80059a0:	486c      	ldr	r0, [pc, #432]	; (8005b54 <HAL_RTC_SetAlarm_IT+0x558>)
 80059a2:	f005 fa43 	bl	800ae2c <assert_failed>
 80059a6:	e043      	b.n	8005a30 <HAL_RTC_SetAlarm_IT+0x434>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fa62 	bl	8005e78 <RTC_Bcd2ToByte>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d03a      	beq.n	8005a30 <HAL_RTC_SetAlarm_IT+0x434>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fa59 	bl	8005e78 <RTC_Bcd2ToByte>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d031      	beq.n	8005a30 <HAL_RTC_SetAlarm_IT+0x434>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fa50 	bl	8005e78 <RTC_Bcd2ToByte>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d028      	beq.n	8005a30 <HAL_RTC_SetAlarm_IT+0x434>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fa47 	bl	8005e78 <RTC_Bcd2ToByte>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d01f      	beq.n	8005a30 <HAL_RTC_SetAlarm_IT+0x434>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fa3e 	bl	8005e78 <RTC_Bcd2ToByte>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d016      	beq.n	8005a30 <HAL_RTC_SetAlarm_IT+0x434>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fa35 	bl	8005e78 <RTC_Bcd2ToByte>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b06      	cmp	r3, #6
 8005a12:	d00d      	beq.n	8005a30 <HAL_RTC_SetAlarm_IT+0x434>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fa2c 	bl	8005e78 <RTC_Bcd2ToByte>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b07      	cmp	r3, #7
 8005a24:	d004      	beq.n	8005a30 <HAL_RTC_SetAlarm_IT+0x434>
 8005a26:	f44f 61a5 	mov.w	r1, #1320	; 0x528
 8005a2a:	484a      	ldr	r0, [pc, #296]	; (8005b54 <HAL_RTC_SetAlarm_IT+0x558>)
 8005a2c:	f005 f9fe 	bl	800ae2c <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a3c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005a42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	78db      	ldrb	r3, [r3, #3]
 8005a48:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a4a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005a54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005a5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a60:	4313      	orrs	r3, r2
 8005a62:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	22ca      	movs	r2, #202	; 0xca
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2253      	movs	r2, #83	; 0x53
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a88:	d141      	bne.n	8005b0e <HAL_RTC_SetAlarm_IT+0x512>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a98:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005aaa:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	1e5a      	subs	r2, r3, #1
 8005ab0:	617a      	str	r2, [r7, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10b      	bne.n	8005ace <HAL_RTC_SetAlarm_IT+0x4d2>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	22ff      	movs	r2, #255	; 0xff
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e07a      	b.n	8005bc4 <HAL_RTC_SetAlarm_IT+0x5c8>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0e7      	beq.n	8005aac <HAL_RTC_SetAlarm_IT+0x4b0>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005afa:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	e043      	b.n	8005b96 <HAL_RTC_SetAlarm_IT+0x59a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b1c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005b2e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1e5a      	subs	r2, r3, #1
 8005b34:	617a      	str	r2, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10e      	bne.n	8005b58 <HAL_RTC_SetAlarm_IT+0x55c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	22ff      	movs	r2, #255	; 0xff
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2203      	movs	r2, #3
 8005b46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e038      	b.n	8005bc4 <HAL_RTC_SetAlarm_IT+0x5c8>
 8005b52:	bf00      	nop
 8005b54:	0800de70 	.word	0x0800de70
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0e4      	beq.n	8005b30 <HAL_RTC_SetAlarm_IT+0x534>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b84:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b94:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005b96:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a0c      	ldr	r2, [pc, #48]	; (8005bcc <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba0:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bac:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	22ff      	movs	r2, #255	; 0xff
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3724      	adds	r7, #36	; 0x24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd90      	pop	{r4, r7, pc}
 8005bcc:	40013c00 	.word	0x40013c00

08005bd0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be4:	d008      	beq.n	8005bf8 <HAL_RTC_DeactivateAlarm+0x28>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bec:	d004      	beq.n	8005bf8 <HAL_RTC_DeactivateAlarm+0x28>
 8005bee:	f240 519d 	movw	r1, #1437	; 0x59d
 8005bf2:	4844      	ldr	r0, [pc, #272]	; (8005d04 <HAL_RTC_DeactivateAlarm+0x134>)
 8005bf4:	f005 f91a 	bl	800ae2c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7f1b      	ldrb	r3, [r3, #28]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_RTC_DeactivateAlarm+0x34>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e07b      	b.n	8005cfc <HAL_RTC_DeactivateAlarm+0x12c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	22ca      	movs	r2, #202	; 0xca
 8005c16:	625a      	str	r2, [r3, #36]	; 0x24
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2253      	movs	r2, #83	; 0x53
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c26:	d12f      	bne.n	8005c88 <HAL_RTC_DeactivateAlarm+0xb8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c36:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c46:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c48:	f7fb f99c 	bl	8000f84 <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005c4e:	e013      	b.n	8005c78 <HAL_RTC_DeactivateAlarm+0xa8>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c50:	f7fb f998 	bl	8000f84 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c5e:	d90b      	bls.n	8005c78 <HAL_RTC_DeactivateAlarm+0xa8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	22ff      	movs	r2, #255	; 0xff
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e041      	b.n	8005cfc <HAL_RTC_DeactivateAlarm+0x12c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0e4      	beq.n	8005c50 <HAL_RTC_DeactivateAlarm+0x80>
 8005c86:	e02e      	b.n	8005ce6 <HAL_RTC_DeactivateAlarm+0x116>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c96:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca8:	f7fb f96c 	bl	8000f84 <HAL_GetTick>
 8005cac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005cae:	e013      	b.n	8005cd8 <HAL_RTC_DeactivateAlarm+0x108>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cb0:	f7fb f968 	bl	8000f84 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cbe:	d90b      	bls.n	8005cd8 <HAL_RTC_DeactivateAlarm+0x108>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	22ff      	movs	r2, #255	; 0xff
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2203      	movs	r2, #3
 8005ccc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e011      	b.n	8005cfc <HAL_RTC_DeactivateAlarm+0x12c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0e4      	beq.n	8005cb0 <HAL_RTC_DeactivateAlarm+0xe0>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	22ff      	movs	r2, #255	; 0xff
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	0800de70 	.word	0x0800de70

08005d08 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d012      	beq.n	8005d44 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f005 fbed 	bl	800b50c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005d42:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d012      	beq.n	8005d78 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fa0d 	bl	8006180 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005d76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d7e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	775a      	strb	r2, [r3, #29]
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40013c00 	.word	0x40013c00

08005d94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005db0:	f7fb f8e8 	bl	8000f84 <HAL_GetTick>
 8005db4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005db6:	e009      	b.n	8005dcc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005db8:	f7fb f8e4 	bl	8000f84 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc6:	d901      	bls.n	8005dcc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e007      	b.n	8005ddc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0ee      	beq.n	8005db8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d119      	bne.n	8005e32 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f04f 32ff 	mov.w	r2, #4294967295
 8005e06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e08:	f7fb f8bc 	bl	8000f84 <HAL_GetTick>
 8005e0c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e0e:	e009      	b.n	8005e24 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e10:	f7fb f8b8 	bl	8000f84 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e1e:	d901      	bls.n	8005e24 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e007      	b.n	8005e34 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0ee      	beq.n	8005e10 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005e4a:	e005      	b.n	8005e58 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	3b0a      	subs	r3, #10
 8005e56:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	2b09      	cmp	r3, #9
 8005e5c:	d8f6      	bhi.n	8005e4c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	b2db      	uxtb	r3, r3
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	b2db      	uxtb	r3, r3
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d013      	beq.n	8005eee <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d010      	beq.n	8005eee <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d00d      	beq.n	8005eee <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d00a      	beq.n	8005eee <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d007      	beq.n	8005eee <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b06      	cmp	r3, #6
 8005ee2:	d004      	beq.n	8005eee <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005ee4:	f240 314d 	movw	r1, #845	; 0x34d
 8005ee8:	485e      	ldr	r0, [pc, #376]	; (8006064 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 8005eea:	f004 ff9f 	bl	800ae2c <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef4:	d304      	bcc.n	8005f00 <HAL_RTCEx_SetWakeUpTimer_IT+0x4c>
 8005ef6:	f240 314e 	movw	r1, #846	; 0x34e
 8005efa:	485a      	ldr	r0, [pc, #360]	; (8006064 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 8005efc:	f004 ff96 	bl	800ae2c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	7f1b      	ldrb	r3, [r3, #28]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e0a6      	b.n	800605a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2202      	movs	r2, #2
 8005f16:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	22ca      	movs	r2, #202	; 0xca
 8005f1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2253      	movs	r2, #83	; 0x53
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d022      	beq.n	8005f7c <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005f36:	4b4c      	ldr	r3, [pc, #304]	; (8006068 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a4c      	ldr	r2, [pc, #304]	; (800606c <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	0adb      	lsrs	r3, r3, #11
 8005f42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	1e5a      	subs	r2, r3, #1
 8005f50:	617a      	str	r2, [r7, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	22ff      	movs	r2, #255	; 0xff
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2203      	movs	r2, #3
 8005f62:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e075      	b.n	800605a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e7      	bne.n	8005f4c <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005f8c:	4b36      	ldr	r3, [pc, #216]	; (8006068 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a36      	ldr	r2, [pc, #216]	; (800606c <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	0adb      	lsrs	r3, r3, #11
 8005f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f9c:	fb02 f303 	mul.w	r3, r2, r3
 8005fa0:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	617a      	str	r2, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x110>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	22ff      	movs	r2, #255	; 0xff
 8005fb2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e04a      	b.n	800605a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0e7      	beq.n	8005fa2 <HAL_RTCEx_SetWakeUpTimer_IT+0xee>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0207 	bic.w	r2, r2, #7
 8005fe8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6899      	ldr	r1, [r3, #8]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8006000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006004:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8006006:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	4a19      	ldr	r2, [pc, #100]	; (8006070 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 800600c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006010:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006022:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006032:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006042:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	22ff      	movs	r2, #255	; 0xff
 800604a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	0800dea8 	.word	0x0800dea8
 8006068:	20000088 	.word	0x20000088
 800606c:	10624dd3 	.word	0x10624dd3
 8006070:	40013c00 	.word	0x40013c00

08006074 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	7f1b      	ldrb	r3, [r3, #28]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8006088:	2302      	movs	r3, #2
 800608a:	e047      	b.n	800611c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	22ca      	movs	r2, #202	; 0xca
 800609e:	625a      	str	r2, [r3, #36]	; 0x24
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2253      	movs	r2, #83	; 0x53
 80060a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060c6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060c8:	f7fa ff5c 	bl	8000f84 <HAL_GetTick>
 80060cc:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80060ce:	e013      	b.n	80060f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060d0:	f7fa ff58 	bl	8000f84 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060de:	d90b      	bls.n	80060f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	22ff      	movs	r2, #255	; 0xff
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2203      	movs	r2, #3
 80060ec:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e011      	b.n	800611c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0e4      	beq.n	80060d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	22ff      	movs	r2, #255	; 0xff
 800610c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f816 	bl	800616c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	b2da      	uxtb	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006150:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006152:	4b05      	ldr	r3, [pc, #20]	; (8006168 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8006154:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006158:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	775a      	strb	r2, [r3, #29]
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40013c00 	.word	0x40013c00

0800616c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e083      	b.n	80062ae <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a43      	ldr	r2, [pc, #268]	; (80062b8 <HAL_TIM_Base_Init+0x124>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d027      	beq.n	8006200 <HAL_TIM_Base_Init+0x6c>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d022      	beq.n	8006200 <HAL_TIM_Base_Init+0x6c>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3f      	ldr	r2, [pc, #252]	; (80062bc <HAL_TIM_Base_Init+0x128>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d01d      	beq.n	8006200 <HAL_TIM_Base_Init+0x6c>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a3d      	ldr	r2, [pc, #244]	; (80062c0 <HAL_TIM_Base_Init+0x12c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d018      	beq.n	8006200 <HAL_TIM_Base_Init+0x6c>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a3c      	ldr	r2, [pc, #240]	; (80062c4 <HAL_TIM_Base_Init+0x130>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <HAL_TIM_Base_Init+0x6c>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a3a      	ldr	r2, [pc, #232]	; (80062c8 <HAL_TIM_Base_Init+0x134>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00e      	beq.n	8006200 <HAL_TIM_Base_Init+0x6c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a39      	ldr	r2, [pc, #228]	; (80062cc <HAL_TIM_Base_Init+0x138>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d009      	beq.n	8006200 <HAL_TIM_Base_Init+0x6c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a37      	ldr	r2, [pc, #220]	; (80062d0 <HAL_TIM_Base_Init+0x13c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <HAL_TIM_Base_Init+0x6c>
 80061f6:	f44f 7189 	mov.w	r1, #274	; 0x112
 80061fa:	4836      	ldr	r0, [pc, #216]	; (80062d4 <HAL_TIM_Base_Init+0x140>)
 80061fc:	f004 fe16 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d014      	beq.n	8006232 <HAL_TIM_Base_Init+0x9e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b10      	cmp	r3, #16
 800620e:	d010      	beq.n	8006232 <HAL_TIM_Base_Init+0x9e>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b20      	cmp	r3, #32
 8006216:	d00c      	beq.n	8006232 <HAL_TIM_Base_Init+0x9e>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d008      	beq.n	8006232 <HAL_TIM_Base_Init+0x9e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b60      	cmp	r3, #96	; 0x60
 8006226:	d004      	beq.n	8006232 <HAL_TIM_Base_Init+0x9e>
 8006228:	f240 1113 	movw	r1, #275	; 0x113
 800622c:	4829      	ldr	r0, [pc, #164]	; (80062d4 <HAL_TIM_Base_Init+0x140>)
 800622e:	f004 fdfd 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00e      	beq.n	8006258 <HAL_TIM_Base_Init+0xc4>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006242:	d009      	beq.n	8006258 <HAL_TIM_Base_Init+0xc4>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624c:	d004      	beq.n	8006258 <HAL_TIM_Base_Init+0xc4>
 800624e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006252:	4820      	ldr	r0, [pc, #128]	; (80062d4 <HAL_TIM_Base_Init+0x140>)
 8006254:	f004 fdea 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_TIM_Base_Init+0xde>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	2b80      	cmp	r3, #128	; 0x80
 8006266:	d004      	beq.n	8006272 <HAL_TIM_Base_Init+0xde>
 8006268:	f240 1115 	movw	r1, #277	; 0x115
 800626c:	4819      	ldr	r0, [pc, #100]	; (80062d4 <HAL_TIM_Base_Init+0x140>)
 800626e:	f004 fddd 	bl	800ae2c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f005 f9da 	bl	800b640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f000 feec 	bl	800707c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800
 80062d4:	0800dee4 	.word	0x0800dee4

080062d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e083      	b.n	80063f2 <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a43      	ldr	r2, [pc, #268]	; (80063fc <HAL_TIM_PWM_Init+0x124>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d027      	beq.n	8006344 <HAL_TIM_PWM_Init+0x6c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fc:	d022      	beq.n	8006344 <HAL_TIM_PWM_Init+0x6c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a3f      	ldr	r2, [pc, #252]	; (8006400 <HAL_TIM_PWM_Init+0x128>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d01d      	beq.n	8006344 <HAL_TIM_PWM_Init+0x6c>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3d      	ldr	r2, [pc, #244]	; (8006404 <HAL_TIM_PWM_Init+0x12c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d018      	beq.n	8006344 <HAL_TIM_PWM_Init+0x6c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a3c      	ldr	r2, [pc, #240]	; (8006408 <HAL_TIM_PWM_Init+0x130>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d013      	beq.n	8006344 <HAL_TIM_PWM_Init+0x6c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a3a      	ldr	r2, [pc, #232]	; (800640c <HAL_TIM_PWM_Init+0x134>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00e      	beq.n	8006344 <HAL_TIM_PWM_Init+0x6c>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a39      	ldr	r2, [pc, #228]	; (8006410 <HAL_TIM_PWM_Init+0x138>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d009      	beq.n	8006344 <HAL_TIM_PWM_Init+0x6c>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a37      	ldr	r2, [pc, #220]	; (8006414 <HAL_TIM_PWM_Init+0x13c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d004      	beq.n	8006344 <HAL_TIM_PWM_Init+0x6c>
 800633a:	f240 419b 	movw	r1, #1179	; 0x49b
 800633e:	4836      	ldr	r0, [pc, #216]	; (8006418 <HAL_TIM_PWM_Init+0x140>)
 8006340:	f004 fd74 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d014      	beq.n	8006376 <HAL_TIM_PWM_Init+0x9e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b10      	cmp	r3, #16
 8006352:	d010      	beq.n	8006376 <HAL_TIM_PWM_Init+0x9e>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b20      	cmp	r3, #32
 800635a:	d00c      	beq.n	8006376 <HAL_TIM_PWM_Init+0x9e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b40      	cmp	r3, #64	; 0x40
 8006362:	d008      	beq.n	8006376 <HAL_TIM_PWM_Init+0x9e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b60      	cmp	r3, #96	; 0x60
 800636a:	d004      	beq.n	8006376 <HAL_TIM_PWM_Init+0x9e>
 800636c:	f240 419c 	movw	r1, #1180	; 0x49c
 8006370:	4829      	ldr	r0, [pc, #164]	; (8006418 <HAL_TIM_PWM_Init+0x140>)
 8006372:	f004 fd5b 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00e      	beq.n	800639c <HAL_TIM_PWM_Init+0xc4>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006386:	d009      	beq.n	800639c <HAL_TIM_PWM_Init+0xc4>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006390:	d004      	beq.n	800639c <HAL_TIM_PWM_Init+0xc4>
 8006392:	f240 419d 	movw	r1, #1181	; 0x49d
 8006396:	4820      	ldr	r0, [pc, #128]	; (8006418 <HAL_TIM_PWM_Init+0x140>)
 8006398:	f004 fd48 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_TIM_PWM_Init+0xde>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b80      	cmp	r3, #128	; 0x80
 80063aa:	d004      	beq.n	80063b6 <HAL_TIM_PWM_Init+0xde>
 80063ac:	f240 419e 	movw	r1, #1182	; 0x49e
 80063b0:	4819      	ldr	r0, [pc, #100]	; (8006418 <HAL_TIM_PWM_Init+0x140>)
 80063b2:	f004 fd3b 	bl	800ae2c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f826 	bl	800641c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3304      	adds	r3, #4
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f000 fe4a 	bl	800707c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800
 8006418:	0800dee4 	.word	0x0800dee4

0800641c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a4e      	ldr	r2, [pc, #312]	; (8006578 <HAL_TIM_PWM_Start+0x148>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10b      	bne.n	800645c <HAL_TIM_PWM_Start+0x2c>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d06c      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b04      	cmp	r3, #4
 800644e:	d069      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b08      	cmp	r3, #8
 8006454:	d066      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b0c      	cmp	r3, #12
 800645a:	d063      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006464:	d10b      	bne.n	800647e <HAL_TIM_PWM_Start+0x4e>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d05b      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b04      	cmp	r3, #4
 8006470:	d058      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b08      	cmp	r3, #8
 8006476:	d055      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b0c      	cmp	r3, #12
 800647c:	d052      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a3e      	ldr	r2, [pc, #248]	; (800657c <HAL_TIM_PWM_Start+0x14c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d10b      	bne.n	80064a0 <HAL_TIM_PWM_Start+0x70>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04a      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b04      	cmp	r3, #4
 8006492:	d047      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b08      	cmp	r3, #8
 8006498:	d044      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	d041      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a36      	ldr	r2, [pc, #216]	; (8006580 <HAL_TIM_PWM_Start+0x150>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d10b      	bne.n	80064c2 <HAL_TIM_PWM_Start+0x92>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d039      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d036      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d033      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b0c      	cmp	r3, #12
 80064c0:	d030      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2f      	ldr	r2, [pc, #188]	; (8006584 <HAL_TIM_PWM_Start+0x154>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d10b      	bne.n	80064e4 <HAL_TIM_PWM_Start+0xb4>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d028      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d025      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d022      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b0c      	cmp	r3, #12
 80064e2:	d01f      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a27      	ldr	r2, [pc, #156]	; (8006588 <HAL_TIM_PWM_Start+0x158>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d105      	bne.n	80064fa <HAL_TIM_PWM_Start+0xca>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d017      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d014      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a23      	ldr	r2, [pc, #140]	; (800658c <HAL_TIM_PWM_Start+0x15c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d102      	bne.n	800650a <HAL_TIM_PWM_Start+0xda>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00c      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a20      	ldr	r2, [pc, #128]	; (8006590 <HAL_TIM_PWM_Start+0x160>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d102      	bne.n	800651a <HAL_TIM_PWM_Start+0xea>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <HAL_TIM_PWM_Start+0xf4>
 800651a:	f240 5113 	movw	r1, #1299	; 0x513
 800651e:	481d      	ldr	r0, [pc, #116]	; (8006594 <HAL_TIM_PWM_Start+0x164>)
 8006520:	f004 fc84 	bl	800ae2c <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2201      	movs	r2, #1
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f001 f8d5 	bl	80076dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a10      	ldr	r2, [pc, #64]	; (8006578 <HAL_TIM_PWM_Start+0x148>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d107      	bne.n	800654c <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800654a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b06      	cmp	r3, #6
 800655c:	d007      	beq.n	800656e <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40010000 	.word	0x40010000
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	40014000 	.word	0x40014000
 800658c:	40014400 	.word	0x40014400
 8006590:	40014800 	.word	0x40014800
 8006594:	0800dee4 	.word	0x0800dee4

08006598 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a5c      	ldr	r2, [pc, #368]	; (8006718 <HAL_TIM_PWM_Stop+0x180>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d10b      	bne.n	80065c4 <HAL_TIM_PWM_Stop+0x2c>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d06c      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d069      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d066      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	d063      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065cc:	d10b      	bne.n	80065e6 <HAL_TIM_PWM_Stop+0x4e>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d05b      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d058      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d055      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b0c      	cmp	r3, #12
 80065e4:	d052      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a4c      	ldr	r2, [pc, #304]	; (800671c <HAL_TIM_PWM_Stop+0x184>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10b      	bne.n	8006608 <HAL_TIM_PWM_Stop+0x70>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d04a      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d047      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b08      	cmp	r3, #8
 8006600:	d044      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b0c      	cmp	r3, #12
 8006606:	d041      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a44      	ldr	r2, [pc, #272]	; (8006720 <HAL_TIM_PWM_Stop+0x188>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d10b      	bne.n	800662a <HAL_TIM_PWM_Stop+0x92>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d039      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b04      	cmp	r3, #4
 800661c:	d036      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b08      	cmp	r3, #8
 8006622:	d033      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b0c      	cmp	r3, #12
 8006628:	d030      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a3d      	ldr	r2, [pc, #244]	; (8006724 <HAL_TIM_PWM_Stop+0x18c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d10b      	bne.n	800664c <HAL_TIM_PWM_Stop+0xb4>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d028      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b04      	cmp	r3, #4
 800663e:	d025      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b08      	cmp	r3, #8
 8006644:	d022      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b0c      	cmp	r3, #12
 800664a:	d01f      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a35      	ldr	r2, [pc, #212]	; (8006728 <HAL_TIM_PWM_Stop+0x190>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d105      	bne.n	8006662 <HAL_TIM_PWM_Stop+0xca>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d017      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b04      	cmp	r3, #4
 8006660:	d014      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a31      	ldr	r2, [pc, #196]	; (800672c <HAL_TIM_PWM_Stop+0x194>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d102      	bne.n	8006672 <HAL_TIM_PWM_Stop+0xda>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00c      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a2e      	ldr	r2, [pc, #184]	; (8006730 <HAL_TIM_PWM_Stop+0x198>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d102      	bne.n	8006682 <HAL_TIM_PWM_Stop+0xea>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <HAL_TIM_PWM_Stop+0xf4>
 8006682:	f240 5137 	movw	r1, #1335	; 0x537
 8006686:	482b      	ldr	r0, [pc, #172]	; (8006734 <HAL_TIM_PWM_Stop+0x19c>)
 8006688:	f004 fbd0 	bl	800ae2c <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2200      	movs	r2, #0
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	4618      	mov	r0, r3
 8006696:	f001 f821 	bl	80076dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_TIM_PWM_Stop+0x180>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d117      	bne.n	80066d4 <HAL_TIM_PWM_Stop+0x13c>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10f      	bne.n	80066d4 <HAL_TIM_PWM_Stop+0x13c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
 80066ba:	f240 4344 	movw	r3, #1092	; 0x444
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d107      	bne.n	80066d4 <HAL_TIM_PWM_Stop+0x13c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a1a      	ldr	r2, [r3, #32]
 80066da:	f241 1311 	movw	r3, #4369	; 0x1111
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10f      	bne.n	8006704 <HAL_TIM_PWM_Stop+0x16c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6a1a      	ldr	r2, [r3, #32]
 80066ea:	f240 4344 	movw	r3, #1092	; 0x444
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d107      	bne.n	8006704 <HAL_TIM_PWM_Stop+0x16c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0201 	bic.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	40010000 	.word	0x40010000
 800671c:	40000400 	.word	0x40000400
 8006720:	40000800 	.word	0x40000800
 8006724:	40000c00 	.word	0x40000c00
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800
 8006734:	0800dee4 	.word	0x0800dee4

08006738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d010      	beq.n	800676c <HAL_TIM_PWM_ConfigChannel+0x34>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d00d      	beq.n	800676c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b08      	cmp	r3, #8
 8006754:	d00a      	beq.n	800676c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b0c      	cmp	r3, #12
 800675a:	d007      	beq.n	800676c <HAL_TIM_PWM_ConfigChannel+0x34>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b3c      	cmp	r3, #60	; 0x3c
 8006760:	d004      	beq.n	800676c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006762:	f640 51ec 	movw	r1, #3564	; 0xdec
 8006766:	4895      	ldr	r0, [pc, #596]	; (80069bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006768:	f004 fb60 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b60      	cmp	r3, #96	; 0x60
 8006772:	d008      	beq.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b70      	cmp	r3, #112	; 0x70
 800677a:	d004      	beq.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800677c:	f640 51ed 	movw	r1, #3565	; 0xded
 8006780:	488e      	ldr	r0, [pc, #568]	; (80069bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006782:	f004 fb53 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <HAL_TIM_PWM_ConfigChannel+0x68>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d004      	beq.n	80067a0 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006796:	f640 51ee 	movw	r1, #3566	; 0xdee
 800679a:	4888      	ldr	r0, [pc, #544]	; (80069bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800679c:	f004 fb46 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x82>
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d004      	beq.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x82>
 80067b0:	f640 51ef 	movw	r1, #3567	; 0xdef
 80067b4:	4881      	ldr	r0, [pc, #516]	; (80069bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 80067b6:	f004 fb39 	bl	800ae2c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_TIM_PWM_ConfigChannel+0x90>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e152      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x336>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b0c      	cmp	r3, #12
 80067dc:	f200 813d 	bhi.w	8006a5a <HAL_TIM_PWM_ConfigChannel+0x322>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800681d 	.word	0x0800681d
 80067ec:	08006a5b 	.word	0x08006a5b
 80067f0:	08006a5b 	.word	0x08006a5b
 80067f4:	08006a5b 	.word	0x08006a5b
 80067f8:	080068b7 	.word	0x080068b7
 80067fc:	08006a5b 	.word	0x08006a5b
 8006800:	08006a5b 	.word	0x08006a5b
 8006804:	08006a5b 	.word	0x08006a5b
 8006808:	0800693f 	.word	0x0800693f
 800680c:	08006a5b 	.word	0x08006a5b
 8006810:	08006a5b 	.word	0x08006a5b
 8006814:	08006a5b 	.word	0x08006a5b
 8006818:	080069dd 	.word	0x080069dd
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a67      	ldr	r2, [pc, #412]	; (80069c0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d027      	beq.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682e:	d022      	beq.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a63      	ldr	r2, [pc, #396]	; (80069c4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d01d      	beq.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x13e>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a62      	ldr	r2, [pc, #392]	; (80069c8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d018      	beq.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a60      	ldr	r2, [pc, #384]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x294>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d013      	beq.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x13e>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a5f      	ldr	r2, [pc, #380]	; (80069d0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00e      	beq.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a5d      	ldr	r2, [pc, #372]	; (80069d4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a5c      	ldr	r2, [pc, #368]	; (80069d8 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d004      	beq.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x13e>
 800686c:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8006870:	4852      	ldr	r0, [pc, #328]	; (80069bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006872:	f004 fadb 	bl	800ae2c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fc7d 	bl	800717c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0208 	orr.w	r2, r2, #8
 8006890:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699a      	ldr	r2, [r3, #24]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0204 	bic.w	r2, r2, #4
 80068a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6999      	ldr	r1, [r3, #24]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	619a      	str	r2, [r3, #24]
      break;
 80068b4:	e0d2      	b.n	8006a5c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a41      	ldr	r2, [pc, #260]	; (80069c0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d01d      	beq.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x1c4>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d018      	beq.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x1c4>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a3d      	ldr	r2, [pc, #244]	; (80069c4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d013      	beq.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x1c4>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a3b      	ldr	r2, [pc, #236]	; (80069c8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00e      	beq.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x1c4>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a3a      	ldr	r2, [pc, #232]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x294>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d009      	beq.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x1c4>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a38      	ldr	r2, [pc, #224]	; (80069d0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d004      	beq.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x1c4>
 80068f2:	f640 610c 	movw	r1, #3596	; 0xe0c
 80068f6:	4831      	ldr	r0, [pc, #196]	; (80069bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 80068f8:	f004 fa98 	bl	800ae2c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fcca 	bl	800729c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6999      	ldr	r1, [r3, #24]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	021a      	lsls	r2, r3, #8
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	619a      	str	r2, [r3, #24]
      break;
 800693c:	e08e      	b.n	8006a5c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1f      	ldr	r2, [pc, #124]	; (80069c0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d018      	beq.n	800697a <HAL_TIM_PWM_ConfigChannel+0x242>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006950:	d013      	beq.n	800697a <HAL_TIM_PWM_ConfigChannel+0x242>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_TIM_PWM_ConfigChannel+0x242>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_TIM_PWM_ConfigChannel+0x242>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a18      	ldr	r2, [pc, #96]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x294>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIM_PWM_ConfigChannel+0x242>
 8006970:	f640 611d 	movw	r1, #3613	; 0xe1d
 8006974:	4811      	ldr	r0, [pc, #68]	; (80069bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006976:	f004 fa59 	bl	800ae2c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fd1f 	bl	80073c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0208 	orr.w	r2, r2, #8
 8006994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0204 	bic.w	r2, r2, #4
 80069a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69d9      	ldr	r1, [r3, #28]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	61da      	str	r2, [r3, #28]
      break;
 80069b8:	e050      	b.n	8006a5c <HAL_TIM_PWM_ConfigChannel+0x324>
 80069ba:	bf00      	nop
 80069bc:	0800dee4 	.word	0x0800dee4
 80069c0:	40010000 	.word	0x40010000
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800
 80069cc:	40000c00 	.word	0x40000c00
 80069d0:	40014000 	.word	0x40014000
 80069d4:	40014400 	.word	0x40014400
 80069d8:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a25      	ldr	r2, [pc, #148]	; (8006a78 <HAL_TIM_PWM_ConfigChannel+0x340>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d018      	beq.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ee:	d013      	beq.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <HAL_TIM_PWM_ConfigChannel+0x344>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00e      	beq.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a20      	ldr	r2, [pc, #128]	; (8006a80 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d009      	beq.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d004      	beq.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006a0e:	f640 612e 	movw	r1, #3630	; 0xe2e
 8006a12:	481d      	ldr	r0, [pc, #116]	; (8006a88 <HAL_TIM_PWM_ConfigChannel+0x350>)
 8006a14:	f004 fa0a 	bl	800ae2c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fd64 	bl	80074ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69da      	ldr	r2, [r3, #28]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69d9      	ldr	r1, [r3, #28]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	021a      	lsls	r2, r3, #8
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	61da      	str	r2, [r3, #28]
      break;
 8006a58:	e000      	b.n	8006a5c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 8006a5a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40000400 	.word	0x40000400
 8006a80:	40000800 	.word	0x40000800
 8006a84:	40000c00 	.word	0x40000c00
 8006a88:	0800dee4 	.word	0x0800dee4

08006a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_ConfigClockSource+0x18>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e2db      	b.n	800705c <HAL_TIM_ConfigClockSource+0x5d0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006abc:	d029      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac6:	d024      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d020      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d01c      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d018      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b30      	cmp	r3, #48	; 0x30
 8006ae6:	d014      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b40      	cmp	r3, #64	; 0x40
 8006aee:	d010      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b50      	cmp	r3, #80	; 0x50
 8006af6:	d00c      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b60      	cmp	r3, #96	; 0x60
 8006afe:	d008      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b70      	cmp	r3, #112	; 0x70
 8006b06:	d004      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x86>
 8006b08:	f241 118b 	movw	r1, #4491	; 0x118b
 8006b0c:	4873      	ldr	r0, [pc, #460]	; (8006cdc <HAL_TIM_ConfigClockSource+0x250>)
 8006b0e:	f004 f98d 	bl	800ae2c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b28:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b40      	cmp	r3, #64	; 0x40
 8006b38:	f000 8204 	beq.w	8006f44 <HAL_TIM_ConfigClockSource+0x4b8>
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d80f      	bhi.n	8006b60 <HAL_TIM_ConfigClockSource+0xd4>
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	f000 8255 	beq.w	8006ff0 <HAL_TIM_ConfigClockSource+0x564>
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d803      	bhi.n	8006b52 <HAL_TIM_ConfigClockSource+0xc6>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 8250 	beq.w	8006ff0 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006b50:	e27b      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	f000 824c 	beq.w	8006ff0 <HAL_TIM_ConfigClockSource+0x564>
 8006b58:	2b30      	cmp	r3, #48	; 0x30
 8006b5a:	f000 8249 	beq.w	8006ff0 <HAL_TIM_ConfigClockSource+0x564>
      break;
 8006b5e:	e274      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006b60:	2b70      	cmp	r3, #112	; 0x70
 8006b62:	d046      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0x166>
 8006b64:	2b70      	cmp	r3, #112	; 0x70
 8006b66:	d806      	bhi.n	8006b76 <HAL_TIM_ConfigClockSource+0xea>
 8006b68:	2b50      	cmp	r3, #80	; 0x50
 8006b6a:	f000 8133 	beq.w	8006dd4 <HAL_TIM_ConfigClockSource+0x348>
 8006b6e:	2b60      	cmp	r3, #96	; 0x60
 8006b70:	f000 8186 	beq.w	8006e80 <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8006b74:	e269      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7a:	d004      	beq.n	8006b86 <HAL_TIM_ConfigClockSource+0xfa>
 8006b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b80:	f000 80bc 	beq.w	8006cfc <HAL_TIM_ConfigClockSource+0x270>
      break;
 8006b84:	e261      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a55      	ldr	r2, [pc, #340]	; (8006ce0 <HAL_TIM_ConfigClockSource+0x254>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	f000 825b 	beq.w	8007048 <HAL_TIM_ConfigClockSource+0x5bc>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9a:	f000 8255 	beq.w	8007048 <HAL_TIM_ConfigClockSource+0x5bc>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a50      	ldr	r2, [pc, #320]	; (8006ce4 <HAL_TIM_ConfigClockSource+0x258>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	f000 824f 	beq.w	8007048 <HAL_TIM_ConfigClockSource+0x5bc>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a4e      	ldr	r2, [pc, #312]	; (8006ce8 <HAL_TIM_ConfigClockSource+0x25c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	f000 8249 	beq.w	8007048 <HAL_TIM_ConfigClockSource+0x5bc>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a4c      	ldr	r2, [pc, #304]	; (8006cec <HAL_TIM_ConfigClockSource+0x260>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	f000 8243 	beq.w	8007048 <HAL_TIM_ConfigClockSource+0x5bc>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a4a      	ldr	r2, [pc, #296]	; (8006cf0 <HAL_TIM_ConfigClockSource+0x264>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	f000 823d 	beq.w	8007048 <HAL_TIM_ConfigClockSource+0x5bc>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a48      	ldr	r2, [pc, #288]	; (8006cf4 <HAL_TIM_ConfigClockSource+0x268>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	f000 8237 	beq.w	8007048 <HAL_TIM_ConfigClockSource+0x5bc>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a46      	ldr	r2, [pc, #280]	; (8006cf8 <HAL_TIM_ConfigClockSource+0x26c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	f000 8231 	beq.w	8007048 <HAL_TIM_ConfigClockSource+0x5bc>
 8006be6:	f241 1197 	movw	r1, #4503	; 0x1197
 8006bea:	483c      	ldr	r0, [pc, #240]	; (8006cdc <HAL_TIM_ConfigClockSource+0x250>)
 8006bec:	f004 f91e 	bl	800ae2c <assert_failed>
      break;
 8006bf0:	e22a      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a3a      	ldr	r2, [pc, #232]	; (8006ce0 <HAL_TIM_ConfigClockSource+0x254>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d01d      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x1ac>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c04:	d018      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x1ac>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a36      	ldr	r2, [pc, #216]	; (8006ce4 <HAL_TIM_ConfigClockSource+0x258>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d013      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x1ac>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a34      	ldr	r2, [pc, #208]	; (8006ce8 <HAL_TIM_ConfigClockSource+0x25c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00e      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x1ac>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a33      	ldr	r2, [pc, #204]	; (8006cec <HAL_TIM_ConfigClockSource+0x260>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d009      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x1ac>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a31      	ldr	r2, [pc, #196]	; (8006cf0 <HAL_TIM_ConfigClockSource+0x264>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x1ac>
 8006c2e:	f241 119e 	movw	r1, #4510	; 0x119e
 8006c32:	482a      	ldr	r0, [pc, #168]	; (8006cdc <HAL_TIM_ConfigClockSource+0x250>)
 8006c34:	f004 f8fa 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d013      	beq.n	8006c68 <HAL_TIM_ConfigClockSource+0x1dc>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c48:	d00e      	beq.n	8006c68 <HAL_TIM_ConfigClockSource+0x1dc>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c52:	d009      	beq.n	8006c68 <HAL_TIM_ConfigClockSource+0x1dc>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c5c:	d004      	beq.n	8006c68 <HAL_TIM_ConfigClockSource+0x1dc>
 8006c5e:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8006c62:	481e      	ldr	r0, [pc, #120]	; (8006cdc <HAL_TIM_ConfigClockSource+0x250>)
 8006c64:	f004 f8e2 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c70:	d014      	beq.n	8006c9c <HAL_TIM_ConfigClockSource+0x210>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d010      	beq.n	8006c9c <HAL_TIM_ConfigClockSource+0x210>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00c      	beq.n	8006c9c <HAL_TIM_ConfigClockSource+0x210>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d008      	beq.n	8006c9c <HAL_TIM_ConfigClockSource+0x210>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b0a      	cmp	r3, #10
 8006c90:	d004      	beq.n	8006c9c <HAL_TIM_ConfigClockSource+0x210>
 8006c92:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8006c96:	4811      	ldr	r0, [pc, #68]	; (8006cdc <HAL_TIM_ConfigClockSource+0x250>)
 8006c98:	f004 f8c8 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b0f      	cmp	r3, #15
 8006ca2:	d904      	bls.n	8006cae <HAL_TIM_ConfigClockSource+0x222>
 8006ca4:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8006ca8:	480c      	ldr	r0, [pc, #48]	; (8006cdc <HAL_TIM_ConfigClockSource+0x250>)
 8006caa:	f004 f8bf 	bl	800ae2c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6899      	ldr	r1, [r3, #8]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f000 fced 	bl	800769c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	609a      	str	r2, [r3, #8]
      break;
 8006cda:	e1b6      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
 8006cdc:	0800dee4 	.word	0x0800dee4
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	40014400 	.word	0x40014400
 8006cf8:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a8a      	ldr	r2, [pc, #552]	; (8006f2c <HAL_TIM_ConfigClockSource+0x4a0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d018      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0x2ac>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0e:	d013      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0x2ac>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a86      	ldr	r2, [pc, #536]	; (8006f30 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00e      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0x2ac>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a85      	ldr	r2, [pc, #532]	; (8006f34 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0x2ac>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a83      	ldr	r2, [pc, #524]	; (8006f38 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0x2ac>
 8006d2e:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8006d32:	4882      	ldr	r0, [pc, #520]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006d34:	f004 f87a 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d013      	beq.n	8006d68 <HAL_TIM_ConfigClockSource+0x2dc>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d48:	d00e      	beq.n	8006d68 <HAL_TIM_ConfigClockSource+0x2dc>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d52:	d009      	beq.n	8006d68 <HAL_TIM_ConfigClockSource+0x2dc>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d5c:	d004      	beq.n	8006d68 <HAL_TIM_ConfigClockSource+0x2dc>
 8006d5e:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8006d62:	4876      	ldr	r0, [pc, #472]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006d64:	f004 f862 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d70:	d014      	beq.n	8006d9c <HAL_TIM_ConfigClockSource+0x310>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d010      	beq.n	8006d9c <HAL_TIM_ConfigClockSource+0x310>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00c      	beq.n	8006d9c <HAL_TIM_ConfigClockSource+0x310>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d008      	beq.n	8006d9c <HAL_TIM_ConfigClockSource+0x310>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b0a      	cmp	r3, #10
 8006d90:	d004      	beq.n	8006d9c <HAL_TIM_ConfigClockSource+0x310>
 8006d92:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8006d96:	4869      	ldr	r0, [pc, #420]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006d98:	f004 f848 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b0f      	cmp	r3, #15
 8006da2:	d904      	bls.n	8006dae <HAL_TIM_ConfigClockSource+0x322>
 8006da4:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8006da8:	4864      	ldr	r0, [pc, #400]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006daa:	f004 f83f 	bl	800ae2c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	6899      	ldr	r1, [r3, #8]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f000 fc6d 	bl	800769c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dd0:	609a      	str	r2, [r3, #8]
      break;
 8006dd2:	e13a      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a54      	ldr	r2, [pc, #336]	; (8006f2c <HAL_TIM_ConfigClockSource+0x4a0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d01d      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x38e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de6:	d018      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x38e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a50      	ldr	r2, [pc, #320]	; (8006f30 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x38e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a4f      	ldr	r2, [pc, #316]	; (8006f34 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x38e>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a4d      	ldr	r2, [pc, #308]	; (8006f38 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x38e>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a4d      	ldr	r2, [pc, #308]	; (8006f40 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x38e>
 8006e10:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8006e14:	4849      	ldr	r0, [pc, #292]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006e16:	f004 f809 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e22:	d014      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x3c2>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d010      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x3c2>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00c      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x3c2>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d008      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x3c2>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	2b0a      	cmp	r3, #10
 8006e42:	d004      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x3c2>
 8006e44:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8006e48:	483c      	ldr	r0, [pc, #240]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006e4a:	f003 ffef 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	2b0f      	cmp	r3, #15
 8006e54:	d904      	bls.n	8006e60 <HAL_TIM_ConfigClockSource+0x3d4>
 8006e56:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8006e5a:	4838      	ldr	r0, [pc, #224]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006e5c:	f003 ffe6 	bl	800ae2c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6859      	ldr	r1, [r3, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f000 fb9b 	bl	80075a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2150      	movs	r1, #80	; 0x50
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fbf4 	bl	8007666 <TIM_ITRx_SetConfig>
      break;
 8006e7e:	e0e4      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a29      	ldr	r2, [pc, #164]	; (8006f2c <HAL_TIM_ConfigClockSource+0x4a0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d01d      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x43a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e92:	d018      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x43a>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a25      	ldr	r2, [pc, #148]	; (8006f30 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d013      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x43a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a24      	ldr	r2, [pc, #144]	; (8006f34 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00e      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x43a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d009      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x43a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a22      	ldr	r2, [pc, #136]	; (8006f40 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d004      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x43a>
 8006ebc:	f241 11da 	movw	r1, #4570	; 0x11da
 8006ec0:	481e      	ldr	r0, [pc, #120]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006ec2:	f003 ffb3 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ece:	d014      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x46e>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x46e>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00c      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x46e>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d008      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x46e>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2b0a      	cmp	r3, #10
 8006eee:	d004      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x46e>
 8006ef0:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8006ef4:	4811      	ldr	r0, [pc, #68]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006ef6:	f003 ff99 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	2b0f      	cmp	r3, #15
 8006f00:	d904      	bls.n	8006f0c <HAL_TIM_ConfigClockSource+0x480>
 8006f02:	f241 11de 	movw	r1, #4574	; 0x11de
 8006f06:	480d      	ldr	r0, [pc, #52]	; (8006f3c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f08:	f003 ff90 	bl	800ae2c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	6859      	ldr	r1, [r3, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	f000 fb74 	bl	8007606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2160      	movs	r1, #96	; 0x60
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fb9e 	bl	8007666 <TIM_ITRx_SetConfig>
      break;
 8006f2a:	e08e      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40000400 	.word	0x40000400
 8006f34:	40000800 	.word	0x40000800
 8006f38:	40000c00 	.word	0x40000c00
 8006f3c:	0800dee4 	.word	0x0800dee4
 8006f40:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a46      	ldr	r2, [pc, #280]	; (8007064 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d01d      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x4fe>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f56:	d018      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x4fe>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a42      	ldr	r2, [pc, #264]	; (8007068 <HAL_TIM_ConfigClockSource+0x5dc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x4fe>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a41      	ldr	r2, [pc, #260]	; (800706c <HAL_TIM_ConfigClockSource+0x5e0>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x4fe>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a3f      	ldr	r2, [pc, #252]	; (8007070 <HAL_TIM_ConfigClockSource+0x5e4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d009      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x4fe>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a3e      	ldr	r2, [pc, #248]	; (8007074 <HAL_TIM_ConfigClockSource+0x5e8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d004      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x4fe>
 8006f80:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8006f84:	483c      	ldr	r0, [pc, #240]	; (8007078 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006f86:	f003 ff51 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f92:	d014      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x532>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d010      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x532>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00c      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x532>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d008      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x532>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b0a      	cmp	r3, #10
 8006fb2:	d004      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x532>
 8006fb4:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8006fb8:	482f      	ldr	r0, [pc, #188]	; (8007078 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006fba:	f003 ff37 	bl	800ae2c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b0f      	cmp	r3, #15
 8006fc4:	d904      	bls.n	8006fd0 <HAL_TIM_ConfigClockSource+0x544>
 8006fc6:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8006fca:	482b      	ldr	r0, [pc, #172]	; (8007078 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006fcc:	f003 ff2e 	bl	800ae2c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	6859      	ldr	r1, [r3, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f000 fae3 	bl	80075a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2140      	movs	r1, #64	; 0x40
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fb3c 	bl	8007666 <TIM_ITRx_SetConfig>
      break;
 8006fee:	e02c      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1b      	ldr	r2, [pc, #108]	; (8007064 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d01d      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x5aa>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007002:	d018      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x5aa>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a17      	ldr	r2, [pc, #92]	; (8007068 <HAL_TIM_ConfigClockSource+0x5dc>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d013      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x5aa>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a16      	ldr	r2, [pc, #88]	; (800706c <HAL_TIM_ConfigClockSource+0x5e0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00e      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x5aa>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a14      	ldr	r2, [pc, #80]	; (8007070 <HAL_TIM_ConfigClockSource+0x5e4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d009      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x5aa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <HAL_TIM_ConfigClockSource+0x5e8>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d004      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x5aa>
 800702c:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8007030:	4811      	ldr	r0, [pc, #68]	; (8007078 <HAL_TIM_ConfigClockSource+0x5ec>)
 8007032:	f003 fefb 	bl	800ae2c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f000 fb10 	bl	8007666 <TIM_ITRx_SetConfig>
      break;
 8007046:	e000      	b.n	800704a <HAL_TIM_ConfigClockSource+0x5be>
      break;
 8007048:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40010000 	.word	0x40010000
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40014000 	.word	0x40014000
 8007078:	0800dee4 	.word	0x0800dee4

0800707c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a34      	ldr	r2, [pc, #208]	; (8007160 <TIM_Base_SetConfig+0xe4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00f      	beq.n	80070b4 <TIM_Base_SetConfig+0x38>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709a:	d00b      	beq.n	80070b4 <TIM_Base_SetConfig+0x38>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a31      	ldr	r2, [pc, #196]	; (8007164 <TIM_Base_SetConfig+0xe8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d007      	beq.n	80070b4 <TIM_Base_SetConfig+0x38>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a30      	ldr	r2, [pc, #192]	; (8007168 <TIM_Base_SetConfig+0xec>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d003      	beq.n	80070b4 <TIM_Base_SetConfig+0x38>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a2f      	ldr	r2, [pc, #188]	; (800716c <TIM_Base_SetConfig+0xf0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d108      	bne.n	80070c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a25      	ldr	r2, [pc, #148]	; (8007160 <TIM_Base_SetConfig+0xe4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01b      	beq.n	8007106 <TIM_Base_SetConfig+0x8a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d4:	d017      	beq.n	8007106 <TIM_Base_SetConfig+0x8a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a22      	ldr	r2, [pc, #136]	; (8007164 <TIM_Base_SetConfig+0xe8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <TIM_Base_SetConfig+0x8a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a21      	ldr	r2, [pc, #132]	; (8007168 <TIM_Base_SetConfig+0xec>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00f      	beq.n	8007106 <TIM_Base_SetConfig+0x8a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a20      	ldr	r2, [pc, #128]	; (800716c <TIM_Base_SetConfig+0xf0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00b      	beq.n	8007106 <TIM_Base_SetConfig+0x8a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a1f      	ldr	r2, [pc, #124]	; (8007170 <TIM_Base_SetConfig+0xf4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d007      	beq.n	8007106 <TIM_Base_SetConfig+0x8a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a1e      	ldr	r2, [pc, #120]	; (8007174 <TIM_Base_SetConfig+0xf8>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d003      	beq.n	8007106 <TIM_Base_SetConfig+0x8a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a1d      	ldr	r2, [pc, #116]	; (8007178 <TIM_Base_SetConfig+0xfc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d108      	bne.n	8007118 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a08      	ldr	r2, [pc, #32]	; (8007160 <TIM_Base_SetConfig+0xe4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d103      	bne.n	800714c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	615a      	str	r2, [r3, #20]
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40010000 	.word	0x40010000
 8007164:	40000400 	.word	0x40000400
 8007168:	40000800 	.word	0x40000800
 800716c:	40000c00 	.word	0x40000c00
 8007170:	40014000 	.word	0x40014000
 8007174:	40014400 	.word	0x40014400
 8007178:	40014800 	.word	0x40014800

0800717c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	f023 0201 	bic.w	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0303 	bic.w	r3, r3, #3
 80071b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f023 0302 	bic.w	r3, r3, #2
 80071c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a30      	ldr	r2, [pc, #192]	; (8007294 <TIM_OC1_SetConfig+0x118>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d119      	bne.n	800720c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d008      	beq.n	80071f2 <TIM_OC1_SetConfig+0x76>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d004      	beq.n	80071f2 <TIM_OC1_SetConfig+0x76>
 80071e8:	f241 7102 	movw	r1, #5890	; 0x1702
 80071ec:	482a      	ldr	r0, [pc, #168]	; (8007298 <TIM_OC1_SetConfig+0x11c>)
 80071ee:	f003 fe1d 	bl	800ae2c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f023 0308 	bic.w	r3, r3, #8
 80071f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f023 0304 	bic.w	r3, r3, #4
 800720a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a21      	ldr	r2, [pc, #132]	; (8007294 <TIM_OC1_SetConfig+0x118>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d12d      	bne.n	8007270 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800721c:	d008      	beq.n	8007230 <TIM_OC1_SetConfig+0xb4>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <TIM_OC1_SetConfig+0xb4>
 8007226:	f241 710f 	movw	r1, #5903	; 0x170f
 800722a:	481b      	ldr	r0, [pc, #108]	; (8007298 <TIM_OC1_SetConfig+0x11c>)
 800722c:	f003 fdfe 	bl	800ae2c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007238:	d008      	beq.n	800724c <TIM_OC1_SetConfig+0xd0>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <TIM_OC1_SetConfig+0xd0>
 8007242:	f241 7110 	movw	r1, #5904	; 0x1710
 8007246:	4814      	ldr	r0, [pc, #80]	; (8007298 <TIM_OC1_SetConfig+0x11c>)
 8007248:	f003 fdf0 	bl	800ae2c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800725a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	4313      	orrs	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4313      	orrs	r3, r2
 800726e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	621a      	str	r2, [r3, #32]
}
 800728a:	bf00      	nop
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	40010000 	.word	0x40010000
 8007298:	0800dee4 	.word	0x0800dee4

0800729c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f023 0210 	bic.w	r2, r3, #16
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0320 	bic.w	r3, r3, #32
 80072e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a31      	ldr	r2, [pc, #196]	; (80073bc <TIM_OC2_SetConfig+0x120>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d11a      	bne.n	8007332 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <TIM_OC2_SetConfig+0x7a>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	2b08      	cmp	r3, #8
 800730a:	d004      	beq.n	8007316 <TIM_OC2_SetConfig+0x7a>
 800730c:	f241 714d 	movw	r1, #5965	; 0x174d
 8007310:	482b      	ldr	r0, [pc, #172]	; (80073c0 <TIM_OC2_SetConfig+0x124>)
 8007312:	f003 fd8b 	bl	800ae2c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007330:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a21      	ldr	r2, [pc, #132]	; (80073bc <TIM_OC2_SetConfig+0x120>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d12f      	bne.n	800739a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007342:	d008      	beq.n	8007356 <TIM_OC2_SetConfig+0xba>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d004      	beq.n	8007356 <TIM_OC2_SetConfig+0xba>
 800734c:	f241 715b 	movw	r1, #5979	; 0x175b
 8007350:	481b      	ldr	r0, [pc, #108]	; (80073c0 <TIM_OC2_SetConfig+0x124>)
 8007352:	f003 fd6b 	bl	800ae2c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800735e:	d008      	beq.n	8007372 <TIM_OC2_SetConfig+0xd6>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d004      	beq.n	8007372 <TIM_OC2_SetConfig+0xd6>
 8007368:	f241 715c 	movw	r1, #5980	; 0x175c
 800736c:	4814      	ldr	r0, [pc, #80]	; (80073c0 <TIM_OC2_SetConfig+0x124>)
 800736e:	f003 fd5d 	bl	800ae2c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	4313      	orrs	r3, r2
 8007398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	621a      	str	r2, [r3, #32]
}
 80073b4:	bf00      	nop
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	40010000 	.word	0x40010000
 80073c0:	0800dee4 	.word	0x0800dee4

080073c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0303 	bic.w	r3, r3, #3
 80073fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800740c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a31      	ldr	r2, [pc, #196]	; (80074e4 <TIM_OC3_SetConfig+0x120>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d11a      	bne.n	8007458 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d008      	beq.n	800743c <TIM_OC3_SetConfig+0x78>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	2b08      	cmp	r3, #8
 8007430:	d004      	beq.n	800743c <TIM_OC3_SetConfig+0x78>
 8007432:	f241 7198 	movw	r1, #6040	; 0x1798
 8007436:	482c      	ldr	r0, [pc, #176]	; (80074e8 <TIM_OC3_SetConfig+0x124>)
 8007438:	f003 fcf8 	bl	800ae2c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007456:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a22      	ldr	r2, [pc, #136]	; (80074e4 <TIM_OC3_SetConfig+0x120>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d12f      	bne.n	80074c0 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007468:	d008      	beq.n	800747c <TIM_OC3_SetConfig+0xb8>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d004      	beq.n	800747c <TIM_OC3_SetConfig+0xb8>
 8007472:	f241 71a5 	movw	r1, #6053	; 0x17a5
 8007476:	481c      	ldr	r0, [pc, #112]	; (80074e8 <TIM_OC3_SetConfig+0x124>)
 8007478:	f003 fcd8 	bl	800ae2c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007484:	d008      	beq.n	8007498 <TIM_OC3_SetConfig+0xd4>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d004      	beq.n	8007498 <TIM_OC3_SetConfig+0xd4>
 800748e:	f241 71a6 	movw	r1, #6054	; 0x17a6
 8007492:	4815      	ldr	r0, [pc, #84]	; (80074e8 <TIM_OC3_SetConfig+0x124>)
 8007494:	f003 fcca 	bl	800ae2c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800749e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40010000 	.word	0x40010000
 80074e8:	0800dee4 	.word	0x0800dee4

080074ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	021b      	lsls	r3, r3, #8
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	031b      	lsls	r3, r3, #12
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <TIM_OC4_SetConfig+0xb4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d117      	bne.n	800757c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007554:	d008      	beq.n	8007568 <TIM_OC4_SetConfig+0x7c>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <TIM_OC4_SetConfig+0x7c>
 800755e:	f241 71e4 	movw	r1, #6116	; 0x17e4
 8007562:	4810      	ldr	r0, [pc, #64]	; (80075a4 <TIM_OC4_SetConfig+0xb8>)
 8007564:	f003 fc62 	bl	800ae2c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	019b      	lsls	r3, r3, #6
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	40010000 	.word	0x40010000
 80075a4:	0800dee4 	.word	0x0800dee4

080075a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f023 0201 	bic.w	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 030a 	bic.w	r3, r3, #10
 80075e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	621a      	str	r2, [r3, #32]
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007606:	b480      	push	{r7}
 8007608:	b087      	sub	sp, #28
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	f023 0210 	bic.w	r2, r3, #16
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	031b      	lsls	r3, r3, #12
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4313      	orrs	r3, r2
 800763a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	621a      	str	r2, [r3, #32]
}
 800765a:	bf00      	nop
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	f043 0307 	orr.w	r3, r3, #7
 8007688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	609a      	str	r2, [r3, #8]
}
 8007690:	bf00      	nop
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	021a      	lsls	r2, r3, #8
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	431a      	orrs	r2, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	bf00      	nop
 80076d2:	371c      	adds	r7, #28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4a2a      	ldr	r2, [pc, #168]	; (8007794 <TIM_CCxChannelCmd+0xb8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d020      	beq.n	8007732 <TIM_CCxChannelCmd+0x56>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f6:	d01c      	beq.n	8007732 <TIM_CCxChannelCmd+0x56>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4a27      	ldr	r2, [pc, #156]	; (8007798 <TIM_CCxChannelCmd+0xbc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d018      	beq.n	8007732 <TIM_CCxChannelCmd+0x56>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4a26      	ldr	r2, [pc, #152]	; (800779c <TIM_CCxChannelCmd+0xc0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d014      	beq.n	8007732 <TIM_CCxChannelCmd+0x56>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4a25      	ldr	r2, [pc, #148]	; (80077a0 <TIM_CCxChannelCmd+0xc4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d010      	beq.n	8007732 <TIM_CCxChannelCmd+0x56>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4a24      	ldr	r2, [pc, #144]	; (80077a4 <TIM_CCxChannelCmd+0xc8>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00c      	beq.n	8007732 <TIM_CCxChannelCmd+0x56>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4a23      	ldr	r2, [pc, #140]	; (80077a8 <TIM_CCxChannelCmd+0xcc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d008      	beq.n	8007732 <TIM_CCxChannelCmd+0x56>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4a22      	ldr	r2, [pc, #136]	; (80077ac <TIM_CCxChannelCmd+0xd0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d004      	beq.n	8007732 <TIM_CCxChannelCmd+0x56>
 8007728:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800772c:	4820      	ldr	r0, [pc, #128]	; (80077b0 <TIM_CCxChannelCmd+0xd4>)
 800772e:	f003 fb7d 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d010      	beq.n	800775a <TIM_CCxChannelCmd+0x7e>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b04      	cmp	r3, #4
 800773c:	d00d      	beq.n	800775a <TIM_CCxChannelCmd+0x7e>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b08      	cmp	r3, #8
 8007742:	d00a      	beq.n	800775a <TIM_CCxChannelCmd+0x7e>
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b0c      	cmp	r3, #12
 8007748:	d007      	beq.n	800775a <TIM_CCxChannelCmd+0x7e>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b3c      	cmp	r3, #60	; 0x3c
 800774e:	d004      	beq.n	800775a <TIM_CCxChannelCmd+0x7e>
 8007750:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8007754:	4816      	ldr	r0, [pc, #88]	; (80077b0 <TIM_CCxChannelCmd+0xd4>)
 8007756:	f003 fb69 	bl	800ae2c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f003 031f 	and.w	r3, r3, #31
 8007760:	2201      	movs	r2, #1
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a1a      	ldr	r2, [r3, #32]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	43db      	mvns	r3, r3
 8007770:	401a      	ands	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a1a      	ldr	r2, [r3, #32]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	fa01 f303 	lsl.w	r3, r1, r3
 8007786:	431a      	orrs	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	621a      	str	r2, [r3, #32]
}
 800778c:	bf00      	nop
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40010000 	.word	0x40010000
 8007798:	40000400 	.word	0x40000400
 800779c:	40000800 	.word	0x40000800
 80077a0:	40000c00 	.word	0x40000c00
 80077a4:	40014000 	.word	0x40014000
 80077a8:	40014400 	.word	0x40014400
 80077ac:	40014800 	.word	0x40014800
 80077b0:	0800dee4 	.word	0x0800dee4

080077b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a55      	ldr	r2, [pc, #340]	; (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d018      	beq.n	80077fa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d0:	d013      	beq.n	80077fa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a51      	ldr	r2, [pc, #324]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00e      	beq.n	80077fa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a4f      	ldr	r2, [pc, #316]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d009      	beq.n	80077fa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a4e      	ldr	r2, [pc, #312]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d004      	beq.n	80077fa <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80077f0:	f240 6164 	movw	r1, #1636	; 0x664
 80077f4:	484c      	ldr	r0, [pc, #304]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80077f6:	f003 fb19 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d020      	beq.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b10      	cmp	r3, #16
 8007808:	d01c      	beq.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b20      	cmp	r3, #32
 8007810:	d018      	beq.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b30      	cmp	r3, #48	; 0x30
 8007818:	d014      	beq.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d010      	beq.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b50      	cmp	r3, #80	; 0x50
 8007828:	d00c      	beq.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b60      	cmp	r3, #96	; 0x60
 8007830:	d008      	beq.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b70      	cmp	r3, #112	; 0x70
 8007838:	d004      	beq.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800783a:	f240 6165 	movw	r1, #1637	; 0x665
 800783e:	483a      	ldr	r0, [pc, #232]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007840:	f003 faf4 	bl	800ae2c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d008      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007854:	f240 6166 	movw	r1, #1638	; 0x666
 8007858:	4833      	ldr	r0, [pc, #204]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800785a:	f003 fae7 	bl	800ae2c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007868:	2302      	movs	r3, #2
 800786a:	e050      	b.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1b      	ldr	r2, [pc, #108]	; (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d018      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b8:	d013      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a17      	ldr	r2, [pc, #92]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00e      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a15      	ldr	r2, [pc, #84]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d009      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a14      	ldr	r2, [pc, #80]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d004      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a13      	ldr	r2, [pc, #76]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d10c      	bne.n	80078fc <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40010000 	.word	0x40010000
 800791c:	40000400 	.word	0x40000400
 8007920:	40000800 	.word	0x40000800
 8007924:	40000c00 	.word	0x40000c00
 8007928:	0800df1c 	.word	0x0800df1c
 800792c:	40014000 	.word	0x40014000

08007930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e0a0      	b.n	8007a84 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d02c      	beq.n	80079a4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a4f      	ldr	r2, [pc, #316]	; (8007a8c <HAL_UART_Init+0x15c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00e      	beq.n	8007972 <HAL_UART_Init+0x42>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a4d      	ldr	r2, [pc, #308]	; (8007a90 <HAL_UART_Init+0x160>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d009      	beq.n	8007972 <HAL_UART_Init+0x42>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a4c      	ldr	r2, [pc, #304]	; (8007a94 <HAL_UART_Init+0x164>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d004      	beq.n	8007972 <HAL_UART_Init+0x42>
 8007968:	f240 114b 	movw	r1, #331	; 0x14b
 800796c:	484a      	ldr	r0, [pc, #296]	; (8007a98 <HAL_UART_Init+0x168>)
 800796e:	f003 fa5d 	bl	800ae2c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d028      	beq.n	80079cc <HAL_UART_Init+0x9c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007982:	d023      	beq.n	80079cc <HAL_UART_Init+0x9c>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800798c:	d01e      	beq.n	80079cc <HAL_UART_Init+0x9c>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007996:	d019      	beq.n	80079cc <HAL_UART_Init+0x9c>
 8007998:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800799c:	483e      	ldr	r0, [pc, #248]	; (8007a98 <HAL_UART_Init+0x168>)
 800799e:	f003 fa45 	bl	800ae2c <assert_failed>
 80079a2:	e013      	b.n	80079cc <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a38      	ldr	r2, [pc, #224]	; (8007a8c <HAL_UART_Init+0x15c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00e      	beq.n	80079cc <HAL_UART_Init+0x9c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a37      	ldr	r2, [pc, #220]	; (8007a90 <HAL_UART_Init+0x160>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d009      	beq.n	80079cc <HAL_UART_Init+0x9c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a35      	ldr	r2, [pc, #212]	; (8007a94 <HAL_UART_Init+0x164>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d004      	beq.n	80079cc <HAL_UART_Init+0x9c>
 80079c2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80079c6:	4834      	ldr	r0, [pc, #208]	; (8007a98 <HAL_UART_Init+0x168>)
 80079c8:	f003 fa30 	bl	800ae2c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <HAL_UART_Init+0xb8>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079dc:	d004      	beq.n	80079e8 <HAL_UART_Init+0xb8>
 80079de:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80079e2:	482d      	ldr	r0, [pc, #180]	; (8007a98 <HAL_UART_Init+0x168>)
 80079e4:	f003 fa22 	bl	800ae2c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <HAL_UART_Init+0xd4>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f8:	d004      	beq.n	8007a04 <HAL_UART_Init+0xd4>
 80079fa:	f240 1153 	movw	r1, #339	; 0x153
 80079fe:	4826      	ldr	r0, [pc, #152]	; (8007a98 <HAL_UART_Init+0x168>)
 8007a00:	f003 fa14 	bl	800ae2c <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f003 fe97 	bl	800b74c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2224      	movs	r2, #36	; 0x24
 8007a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fc34 	bl	80082a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695a      	ldr	r2, [r3, #20]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40011000 	.word	0x40011000
 8007a90:	40004400 	.word	0x40004400
 8007a94:	40011400 	.word	0x40011400
 8007a98:	0800df58 	.word	0x0800df58

08007a9c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d153      	bne.n	8007b5e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_UART_Transmit_DMA+0x26>
 8007abc:	88fb      	ldrh	r3, [r7, #6]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e04c      	b.n	8007b60 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_UART_Transmit_DMA+0x38>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e045      	b.n	8007b60 <HAL_UART_Transmit_DMA+0xc4>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	88fa      	ldrh	r2, [r7, #6]
 8007ae6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2221      	movs	r2, #33	; 0x21
 8007af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	4a19      	ldr	r2, [pc, #100]	; (8007b68 <HAL_UART_Transmit_DMA+0xcc>)
 8007b02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b08:	4a18      	ldr	r2, [pc, #96]	; (8007b6c <HAL_UART_Transmit_DMA+0xd0>)
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b10:	4a17      	ldr	r2, [pc, #92]	; (8007b70 <HAL_UART_Transmit_DMA+0xd4>)
 8007b12:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	2200      	movs	r2, #0
 8007b1a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007b1c:	f107 0308 	add.w	r3, r7, #8
 8007b20:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	6819      	ldr	r1, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	461a      	mov	r2, r3
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	f7f9 fe0c 	bl	8001750 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b40:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695a      	ldr	r2, [r3, #20]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b58:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e000      	b.n	8007b60 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007b5e:	2302      	movs	r3, #2
  }
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	08007eb1 	.word	0x08007eb1
 8007b6c:	08007f03 	.word	0x08007f03
 8007b70:	08007fa3 	.word	0x08007fa3

08007b74 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d166      	bne.n	8007c5c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <HAL_UART_Receive_DMA+0x26>
 8007b94:	88fb      	ldrh	r3, [r7, #6]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e05f      	b.n	8007c5e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d101      	bne.n	8007bac <HAL_UART_Receive_DMA+0x38>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e058      	b.n	8007c5e <HAL_UART_Receive_DMA+0xea>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	88fa      	ldrh	r2, [r7, #6]
 8007bbe:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2222      	movs	r2, #34	; 0x22
 8007bca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd2:	4a25      	ldr	r2, [pc, #148]	; (8007c68 <HAL_UART_Receive_DMA+0xf4>)
 8007bd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	4a24      	ldr	r2, [pc, #144]	; (8007c6c <HAL_UART_Receive_DMA+0xf8>)
 8007bdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be2:	4a23      	ldr	r2, [pc, #140]	; (8007c70 <HAL_UART_Receive_DMA+0xfc>)
 8007be4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bea:	2200      	movs	r2, #0
 8007bec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007bee:	f107 0308 	add.w	r3, r7, #8
 8007bf2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	f7f9 fda3 	bl	8001750 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	613b      	str	r3, [r7, #16]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695a      	ldr	r2, [r3, #20]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695a      	ldr	r2, [r3, #20]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c56:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e000      	b.n	8007c5e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
  }
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	08007f1f 	.word	0x08007f1f
 8007c6c:	08007f87 	.word	0x08007f87
 8007c70:	08007fa3 	.word	0x08007fa3

08007c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10d      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	f003 0320 	and.w	r3, r3, #32
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d008      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x52>
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa6f 	bl	80081a2 <UART_Receive_IT>
      return;
 8007cc4:	e0d1      	b.n	8007e6a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 80b0 	beq.w	8007e2e <HAL_UART_IRQHandler+0x1ba>
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x70>
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 80a5 	beq.w	8007e2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <HAL_UART_IRQHandler+0x90>
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfc:	f043 0201 	orr.w	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_UART_IRQHandler+0xb0>
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1c:	f043 0202 	orr.w	r2, r3, #2
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <HAL_UART_IRQHandler+0xd0>
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d005      	beq.n	8007d44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3c:	f043 0204 	orr.w	r2, r3, #4
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00f      	beq.n	8007d6e <HAL_UART_IRQHandler+0xfa>
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	f003 0320 	and.w	r3, r3, #32
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <HAL_UART_IRQHandler+0xee>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d66:	f043 0208 	orr.w	r2, r3, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d078      	beq.n	8007e68 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <HAL_UART_IRQHandler+0x11c>
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa09 	bl	80081a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b40      	cmp	r3, #64	; 0x40
 8007d9c:	bf0c      	ite	eq
 8007d9e:	2301      	moveq	r3, #1
 8007da0:	2300      	movne	r3, #0
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d102      	bne.n	8007db8 <HAL_UART_IRQHandler+0x144>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d031      	beq.n	8007e1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f952 	bl	8008062 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d123      	bne.n	8007e14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dda:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d013      	beq.n	8007e0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de8:	4a21      	ldr	r2, [pc, #132]	; (8007e70 <HAL_UART_IRQHandler+0x1fc>)
 8007dea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7f9 fd13 	bl	800181c <HAL_DMA_Abort_IT>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d016      	beq.n	8007e2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e06:	4610      	mov	r0, r2
 8007e08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0a:	e00e      	b.n	8007e2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f845 	bl	8007e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e12:	e00a      	b.n	8007e2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f841 	bl	8007e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1a:	e006      	b.n	8007e2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f83d 	bl	8007e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007e28:	e01e      	b.n	8007e68 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2a:	bf00      	nop
    return;
 8007e2c:	e01c      	b.n	8007e68 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d008      	beq.n	8007e4a <HAL_UART_IRQHandler+0x1d6>
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f93f 	bl	80080c6 <UART_Transmit_IT>
    return;
 8007e48:	e00f      	b.n	8007e6a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00a      	beq.n	8007e6a <HAL_UART_IRQHandler+0x1f6>
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f987 	bl	8008172 <UART_EndTransmit_IT>
    return;
 8007e64:	bf00      	nop
 8007e66:	e000      	b.n	8007e6a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007e68:	bf00      	nop
  }
}
 8007e6a:	3720      	adds	r7, #32
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	0800809f 	.word	0x0800809f

08007e74 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d113      	bne.n	8007ef4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ee0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ef2:	e002      	b.n	8007efa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f003 fae5 	bl	800b4c4 <HAL_UART_TxCpltCallback>
}
 8007efa:	bf00      	nop
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff ffaf 	bl	8007e74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d11e      	bne.n	8007f78 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f4e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695a      	ldr	r2, [r3, #20]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695a      	ldr	r2, [r3, #20]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f6e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f003 faad 	bl	800b4d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff ff77 	bl	8007e88 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbe:	2b80      	cmp	r3, #128	; 0x80
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2301      	moveq	r3, #1
 8007fc4:	2300      	movne	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b21      	cmp	r3, #33	; 0x21
 8007fd4:	d108      	bne.n	8007fe8 <UART_DMAError+0x46>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007fe2:	68b8      	ldr	r0, [r7, #8]
 8007fe4:	f000 f827 	bl	8008036 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff2:	2b40      	cmp	r3, #64	; 0x40
 8007ff4:	bf0c      	ite	eq
 8007ff6:	2301      	moveq	r3, #1
 8007ff8:	2300      	movne	r3, #0
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b22      	cmp	r3, #34	; 0x22
 8008008:	d108      	bne.n	800801c <UART_DMAError+0x7a>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2200      	movs	r2, #0
 8008014:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008016:	68b8      	ldr	r0, [r7, #8]
 8008018:	f000 f823 	bl	8008062 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008020:	f043 0210 	orr.w	r2, r3, #16
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008028:	68b8      	ldr	r0, [r7, #8]
 800802a:	f7ff ff37 	bl	8007e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800804c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008078:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695a      	ldr	r2, [r3, #20]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0201 	bic.w	r2, r2, #1
 8008088:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2220      	movs	r2, #32
 800808e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff feef 	bl	8007e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b21      	cmp	r3, #33	; 0x21
 80080d8:	d144      	bne.n	8008164 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e2:	d11a      	bne.n	800811a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080f8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	1c9a      	adds	r2, r3, #2
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	621a      	str	r2, [r3, #32]
 800810c:	e00e      	b.n	800812c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	621a      	str	r2, [r3, #32]
 8008118:	e008      	b.n	800812c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	1c59      	adds	r1, r3, #1
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6211      	str	r1, [r2, #32]
 8008124:	781a      	ldrb	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008130:	b29b      	uxth	r3, r3
 8008132:	3b01      	subs	r3, #1
 8008134:	b29b      	uxth	r3, r3
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	4619      	mov	r1, r3
 800813a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10f      	bne.n	8008160 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800814e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800815e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	e000      	b.n	8008166 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008164:	2302      	movs	r3, #2
  }
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008188:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2220      	movs	r2, #32
 800818e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f003 f996 	bl	800b4c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b22      	cmp	r3, #34	; 0x22
 80081b4:	d171      	bne.n	800829a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081be:	d123      	bne.n	8008208 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10e      	bne.n	80081ec <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e4:	1c9a      	adds	r2, r3, #2
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	629a      	str	r2, [r3, #40]	; 0x28
 80081ea:	e029      	b.n	8008240 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	629a      	str	r2, [r3, #40]	; 0x28
 8008206:	e01b      	b.n	8008240 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10a      	bne.n	8008226 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6858      	ldr	r0, [r3, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821a:	1c59      	adds	r1, r3, #1
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6291      	str	r1, [r2, #40]	; 0x28
 8008220:	b2c2      	uxtb	r2, r0
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	e00c      	b.n	8008240 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	b2da      	uxtb	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	1c58      	adds	r0, r3, #1
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	6288      	str	r0, [r1, #40]	; 0x28
 8008238:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	b29b      	uxth	r3, r3
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	4619      	mov	r1, r3
 800824e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008250:	2b00      	cmp	r3, #0
 8008252:	d120      	bne.n	8008296 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 0220 	bic.w	r2, r2, #32
 8008262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008272:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	695a      	ldr	r2, [r3, #20]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0201 	bic.w	r2, r2, #1
 8008282:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f003 f923 	bl	800b4d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	e002      	b.n	800829c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	e000      	b.n	800829c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800829a:	2302      	movs	r3, #2
  }
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	4a9a      	ldr	r2, [pc, #616]	; (800851c <UART_SetConfig+0x278>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d904      	bls.n	80082c2 <UART_SetConfig+0x1e>
 80082b8:	f640 31fb 	movw	r1, #3067	; 0xbfb
 80082bc:	4898      	ldr	r0, [pc, #608]	; (8008520 <UART_SetConfig+0x27c>)
 80082be:	f002 fdb5 	bl	800ae2c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <UART_SetConfig+0x3a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082d2:	d004      	beq.n	80082de <UART_SetConfig+0x3a>
 80082d4:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80082d8:	4891      	ldr	r0, [pc, #580]	; (8008520 <UART_SetConfig+0x27c>)
 80082da:	f002 fda7 	bl	800ae2c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00e      	beq.n	8008304 <UART_SetConfig+0x60>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ee:	d009      	beq.n	8008304 <UART_SetConfig+0x60>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80082f8:	d004      	beq.n	8008304 <UART_SetConfig+0x60>
 80082fa:	f640 31fd 	movw	r1, #3069	; 0xbfd
 80082fe:	4888      	ldr	r0, [pc, #544]	; (8008520 <UART_SetConfig+0x27c>)
 8008300:	f002 fd94 	bl	800ae2c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	695a      	ldr	r2, [r3, #20]
 8008308:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800830c:	4013      	ands	r3, r2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d103      	bne.n	800831a <UART_SetConfig+0x76>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d104      	bne.n	8008324 <UART_SetConfig+0x80>
 800831a:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800831e:	4880      	ldr	r0, [pc, #512]	; (8008520 <UART_SetConfig+0x27c>)
 8008320:	f002 fd84 	bl	800ae2c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800835c:	f023 030c 	bic.w	r3, r3, #12
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	68f9      	ldr	r1, [r7, #12]
 8008366:	430b      	orrs	r3, r1
 8008368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699a      	ldr	r2, [r3, #24]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008388:	f040 818f 	bne.w	80086aa <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a64      	ldr	r2, [pc, #400]	; (8008524 <UART_SetConfig+0x280>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d005      	beq.n	80083a2 <UART_SetConfig+0xfe>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a63      	ldr	r2, [pc, #396]	; (8008528 <UART_SetConfig+0x284>)
 800839c:	4293      	cmp	r3, r2
 800839e:	f040 80c7 	bne.w	8008530 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083a2:	f7fc fb81 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 80083a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	461d      	mov	r5, r3
 80083ac:	f04f 0600 	mov.w	r6, #0
 80083b0:	46a8      	mov	r8, r5
 80083b2:	46b1      	mov	r9, r6
 80083b4:	eb18 0308 	adds.w	r3, r8, r8
 80083b8:	eb49 0409 	adc.w	r4, r9, r9
 80083bc:	4698      	mov	r8, r3
 80083be:	46a1      	mov	r9, r4
 80083c0:	eb18 0805 	adds.w	r8, r8, r5
 80083c4:	eb49 0906 	adc.w	r9, r9, r6
 80083c8:	f04f 0100 	mov.w	r1, #0
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80083d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80083d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80083dc:	4688      	mov	r8, r1
 80083de:	4691      	mov	r9, r2
 80083e0:	eb18 0005 	adds.w	r0, r8, r5
 80083e4:	eb49 0106 	adc.w	r1, r9, r6
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	461d      	mov	r5, r3
 80083ee:	f04f 0600 	mov.w	r6, #0
 80083f2:	196b      	adds	r3, r5, r5
 80083f4:	eb46 0406 	adc.w	r4, r6, r6
 80083f8:	461a      	mov	r2, r3
 80083fa:	4623      	mov	r3, r4
 80083fc:	f7f8 fbdc 	bl	8000bb8 <__aeabi_uldivmod>
 8008400:	4603      	mov	r3, r0
 8008402:	460c      	mov	r4, r1
 8008404:	461a      	mov	r2, r3
 8008406:	4b49      	ldr	r3, [pc, #292]	; (800852c <UART_SetConfig+0x288>)
 8008408:	fba3 2302 	umull	r2, r3, r3, r2
 800840c:	095b      	lsrs	r3, r3, #5
 800840e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	461d      	mov	r5, r3
 8008416:	f04f 0600 	mov.w	r6, #0
 800841a:	46a9      	mov	r9, r5
 800841c:	46b2      	mov	sl, r6
 800841e:	eb19 0309 	adds.w	r3, r9, r9
 8008422:	eb4a 040a 	adc.w	r4, sl, sl
 8008426:	4699      	mov	r9, r3
 8008428:	46a2      	mov	sl, r4
 800842a:	eb19 0905 	adds.w	r9, r9, r5
 800842e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008432:	f04f 0100 	mov.w	r1, #0
 8008436:	f04f 0200 	mov.w	r2, #0
 800843a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800843e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008442:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008446:	4689      	mov	r9, r1
 8008448:	4692      	mov	sl, r2
 800844a:	eb19 0005 	adds.w	r0, r9, r5
 800844e:	eb4a 0106 	adc.w	r1, sl, r6
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	461d      	mov	r5, r3
 8008458:	f04f 0600 	mov.w	r6, #0
 800845c:	196b      	adds	r3, r5, r5
 800845e:	eb46 0406 	adc.w	r4, r6, r6
 8008462:	461a      	mov	r2, r3
 8008464:	4623      	mov	r3, r4
 8008466:	f7f8 fba7 	bl	8000bb8 <__aeabi_uldivmod>
 800846a:	4603      	mov	r3, r0
 800846c:	460c      	mov	r4, r1
 800846e:	461a      	mov	r2, r3
 8008470:	4b2e      	ldr	r3, [pc, #184]	; (800852c <UART_SetConfig+0x288>)
 8008472:	fba3 1302 	umull	r1, r3, r3, r2
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	2164      	movs	r1, #100	; 0x64
 800847a:	fb01 f303 	mul.w	r3, r1, r3
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	3332      	adds	r3, #50	; 0x32
 8008484:	4a29      	ldr	r2, [pc, #164]	; (800852c <UART_SetConfig+0x288>)
 8008486:	fba2 2303 	umull	r2, r3, r2, r3
 800848a:	095b      	lsrs	r3, r3, #5
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008492:	4498      	add	r8, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	461d      	mov	r5, r3
 8008498:	f04f 0600 	mov.w	r6, #0
 800849c:	46a9      	mov	r9, r5
 800849e:	46b2      	mov	sl, r6
 80084a0:	eb19 0309 	adds.w	r3, r9, r9
 80084a4:	eb4a 040a 	adc.w	r4, sl, sl
 80084a8:	4699      	mov	r9, r3
 80084aa:	46a2      	mov	sl, r4
 80084ac:	eb19 0905 	adds.w	r9, r9, r5
 80084b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80084b4:	f04f 0100 	mov.w	r1, #0
 80084b8:	f04f 0200 	mov.w	r2, #0
 80084bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084c8:	4689      	mov	r9, r1
 80084ca:	4692      	mov	sl, r2
 80084cc:	eb19 0005 	adds.w	r0, r9, r5
 80084d0:	eb4a 0106 	adc.w	r1, sl, r6
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	461d      	mov	r5, r3
 80084da:	f04f 0600 	mov.w	r6, #0
 80084de:	196b      	adds	r3, r5, r5
 80084e0:	eb46 0406 	adc.w	r4, r6, r6
 80084e4:	461a      	mov	r2, r3
 80084e6:	4623      	mov	r3, r4
 80084e8:	f7f8 fb66 	bl	8000bb8 <__aeabi_uldivmod>
 80084ec:	4603      	mov	r3, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	461a      	mov	r2, r3
 80084f2:	4b0e      	ldr	r3, [pc, #56]	; (800852c <UART_SetConfig+0x288>)
 80084f4:	fba3 1302 	umull	r1, r3, r3, r2
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	2164      	movs	r1, #100	; 0x64
 80084fc:	fb01 f303 	mul.w	r3, r1, r3
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	3332      	adds	r3, #50	; 0x32
 8008506:	4a09      	ldr	r2, [pc, #36]	; (800852c <UART_SetConfig+0x288>)
 8008508:	fba2 2303 	umull	r2, r3, r2, r3
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	f003 0207 	and.w	r2, r3, #7
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4442      	add	r2, r8
 8008518:	609a      	str	r2, [r3, #8]
 800851a:	e27a      	b.n	8008a12 <UART_SetConfig+0x76e>
 800851c:	00a037a0 	.word	0x00a037a0
 8008520:	0800df58 	.word	0x0800df58
 8008524:	40011000 	.word	0x40011000
 8008528:	40011400 	.word	0x40011400
 800852c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008530:	f7fc faa6 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8008534:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	461d      	mov	r5, r3
 800853a:	f04f 0600 	mov.w	r6, #0
 800853e:	46a8      	mov	r8, r5
 8008540:	46b1      	mov	r9, r6
 8008542:	eb18 0308 	adds.w	r3, r8, r8
 8008546:	eb49 0409 	adc.w	r4, r9, r9
 800854a:	4698      	mov	r8, r3
 800854c:	46a1      	mov	r9, r4
 800854e:	eb18 0805 	adds.w	r8, r8, r5
 8008552:	eb49 0906 	adc.w	r9, r9, r6
 8008556:	f04f 0100 	mov.w	r1, #0
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008562:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008566:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800856a:	4688      	mov	r8, r1
 800856c:	4691      	mov	r9, r2
 800856e:	eb18 0005 	adds.w	r0, r8, r5
 8008572:	eb49 0106 	adc.w	r1, r9, r6
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	461d      	mov	r5, r3
 800857c:	f04f 0600 	mov.w	r6, #0
 8008580:	196b      	adds	r3, r5, r5
 8008582:	eb46 0406 	adc.w	r4, r6, r6
 8008586:	461a      	mov	r2, r3
 8008588:	4623      	mov	r3, r4
 800858a:	f7f8 fb15 	bl	8000bb8 <__aeabi_uldivmod>
 800858e:	4603      	mov	r3, r0
 8008590:	460c      	mov	r4, r1
 8008592:	461a      	mov	r2, r3
 8008594:	4bb3      	ldr	r3, [pc, #716]	; (8008864 <UART_SetConfig+0x5c0>)
 8008596:	fba3 2302 	umull	r2, r3, r3, r2
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	461d      	mov	r5, r3
 80085a4:	f04f 0600 	mov.w	r6, #0
 80085a8:	46a9      	mov	r9, r5
 80085aa:	46b2      	mov	sl, r6
 80085ac:	eb19 0309 	adds.w	r3, r9, r9
 80085b0:	eb4a 040a 	adc.w	r4, sl, sl
 80085b4:	4699      	mov	r9, r3
 80085b6:	46a2      	mov	sl, r4
 80085b8:	eb19 0905 	adds.w	r9, r9, r5
 80085bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80085c0:	f04f 0100 	mov.w	r1, #0
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085d4:	4689      	mov	r9, r1
 80085d6:	4692      	mov	sl, r2
 80085d8:	eb19 0005 	adds.w	r0, r9, r5
 80085dc:	eb4a 0106 	adc.w	r1, sl, r6
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	461d      	mov	r5, r3
 80085e6:	f04f 0600 	mov.w	r6, #0
 80085ea:	196b      	adds	r3, r5, r5
 80085ec:	eb46 0406 	adc.w	r4, r6, r6
 80085f0:	461a      	mov	r2, r3
 80085f2:	4623      	mov	r3, r4
 80085f4:	f7f8 fae0 	bl	8000bb8 <__aeabi_uldivmod>
 80085f8:	4603      	mov	r3, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b99      	ldr	r3, [pc, #612]	; (8008864 <UART_SetConfig+0x5c0>)
 8008600:	fba3 1302 	umull	r1, r3, r3, r2
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	2164      	movs	r1, #100	; 0x64
 8008608:	fb01 f303 	mul.w	r3, r1, r3
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	3332      	adds	r3, #50	; 0x32
 8008612:	4a94      	ldr	r2, [pc, #592]	; (8008864 <UART_SetConfig+0x5c0>)
 8008614:	fba2 2303 	umull	r2, r3, r2, r3
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008620:	4498      	add	r8, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	461d      	mov	r5, r3
 8008626:	f04f 0600 	mov.w	r6, #0
 800862a:	46a9      	mov	r9, r5
 800862c:	46b2      	mov	sl, r6
 800862e:	eb19 0309 	adds.w	r3, r9, r9
 8008632:	eb4a 040a 	adc.w	r4, sl, sl
 8008636:	4699      	mov	r9, r3
 8008638:	46a2      	mov	sl, r4
 800863a:	eb19 0905 	adds.w	r9, r9, r5
 800863e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008642:	f04f 0100 	mov.w	r1, #0
 8008646:	f04f 0200 	mov.w	r2, #0
 800864a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800864e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008656:	4689      	mov	r9, r1
 8008658:	4692      	mov	sl, r2
 800865a:	eb19 0005 	adds.w	r0, r9, r5
 800865e:	eb4a 0106 	adc.w	r1, sl, r6
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	461d      	mov	r5, r3
 8008668:	f04f 0600 	mov.w	r6, #0
 800866c:	196b      	adds	r3, r5, r5
 800866e:	eb46 0406 	adc.w	r4, r6, r6
 8008672:	461a      	mov	r2, r3
 8008674:	4623      	mov	r3, r4
 8008676:	f7f8 fa9f 	bl	8000bb8 <__aeabi_uldivmod>
 800867a:	4603      	mov	r3, r0
 800867c:	460c      	mov	r4, r1
 800867e:	461a      	mov	r2, r3
 8008680:	4b78      	ldr	r3, [pc, #480]	; (8008864 <UART_SetConfig+0x5c0>)
 8008682:	fba3 1302 	umull	r1, r3, r3, r2
 8008686:	095b      	lsrs	r3, r3, #5
 8008688:	2164      	movs	r1, #100	; 0x64
 800868a:	fb01 f303 	mul.w	r3, r1, r3
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	3332      	adds	r3, #50	; 0x32
 8008694:	4a73      	ldr	r2, [pc, #460]	; (8008864 <UART_SetConfig+0x5c0>)
 8008696:	fba2 2303 	umull	r2, r3, r2, r3
 800869a:	095b      	lsrs	r3, r3, #5
 800869c:	f003 0207 	and.w	r2, r3, #7
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4442      	add	r2, r8
 80086a6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80086a8:	e1b3      	b.n	8008a12 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a6e      	ldr	r2, [pc, #440]	; (8008868 <UART_SetConfig+0x5c4>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d005      	beq.n	80086c0 <UART_SetConfig+0x41c>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a6c      	ldr	r2, [pc, #432]	; (800886c <UART_SetConfig+0x5c8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	f040 80d8 	bne.w	8008870 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 80086c0:	f7fc f9f2 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 80086c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	469a      	mov	sl, r3
 80086ca:	f04f 0b00 	mov.w	fp, #0
 80086ce:	46d0      	mov	r8, sl
 80086d0:	46d9      	mov	r9, fp
 80086d2:	eb18 0308 	adds.w	r3, r8, r8
 80086d6:	eb49 0409 	adc.w	r4, r9, r9
 80086da:	4698      	mov	r8, r3
 80086dc:	46a1      	mov	r9, r4
 80086de:	eb18 080a 	adds.w	r8, r8, sl
 80086e2:	eb49 090b 	adc.w	r9, r9, fp
 80086e6:	f04f 0100 	mov.w	r1, #0
 80086ea:	f04f 0200 	mov.w	r2, #0
 80086ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80086f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80086f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80086fa:	4688      	mov	r8, r1
 80086fc:	4691      	mov	r9, r2
 80086fe:	eb1a 0508 	adds.w	r5, sl, r8
 8008702:	eb4b 0609 	adc.w	r6, fp, r9
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	4619      	mov	r1, r3
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	f04f 0400 	mov.w	r4, #0
 8008718:	0094      	lsls	r4, r2, #2
 800871a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800871e:	008b      	lsls	r3, r1, #2
 8008720:	461a      	mov	r2, r3
 8008722:	4623      	mov	r3, r4
 8008724:	4628      	mov	r0, r5
 8008726:	4631      	mov	r1, r6
 8008728:	f7f8 fa46 	bl	8000bb8 <__aeabi_uldivmod>
 800872c:	4603      	mov	r3, r0
 800872e:	460c      	mov	r4, r1
 8008730:	461a      	mov	r2, r3
 8008732:	4b4c      	ldr	r3, [pc, #304]	; (8008864 <UART_SetConfig+0x5c0>)
 8008734:	fba3 2302 	umull	r2, r3, r3, r2
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	469b      	mov	fp, r3
 8008742:	f04f 0c00 	mov.w	ip, #0
 8008746:	46d9      	mov	r9, fp
 8008748:	46e2      	mov	sl, ip
 800874a:	eb19 0309 	adds.w	r3, r9, r9
 800874e:	eb4a 040a 	adc.w	r4, sl, sl
 8008752:	4699      	mov	r9, r3
 8008754:	46a2      	mov	sl, r4
 8008756:	eb19 090b 	adds.w	r9, r9, fp
 800875a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800875e:	f04f 0100 	mov.w	r1, #0
 8008762:	f04f 0200 	mov.w	r2, #0
 8008766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800876a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800876e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008772:	4689      	mov	r9, r1
 8008774:	4692      	mov	sl, r2
 8008776:	eb1b 0509 	adds.w	r5, fp, r9
 800877a:	eb4c 060a 	adc.w	r6, ip, sl
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	4619      	mov	r1, r3
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	f04f 0300 	mov.w	r3, #0
 800878c:	f04f 0400 	mov.w	r4, #0
 8008790:	0094      	lsls	r4, r2, #2
 8008792:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008796:	008b      	lsls	r3, r1, #2
 8008798:	461a      	mov	r2, r3
 800879a:	4623      	mov	r3, r4
 800879c:	4628      	mov	r0, r5
 800879e:	4631      	mov	r1, r6
 80087a0:	f7f8 fa0a 	bl	8000bb8 <__aeabi_uldivmod>
 80087a4:	4603      	mov	r3, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	461a      	mov	r2, r3
 80087aa:	4b2e      	ldr	r3, [pc, #184]	; (8008864 <UART_SetConfig+0x5c0>)
 80087ac:	fba3 1302 	umull	r1, r3, r3, r2
 80087b0:	095b      	lsrs	r3, r3, #5
 80087b2:	2164      	movs	r1, #100	; 0x64
 80087b4:	fb01 f303 	mul.w	r3, r1, r3
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	3332      	adds	r3, #50	; 0x32
 80087be:	4a29      	ldr	r2, [pc, #164]	; (8008864 <UART_SetConfig+0x5c0>)
 80087c0:	fba2 2303 	umull	r2, r3, r2, r3
 80087c4:	095b      	lsrs	r3, r3, #5
 80087c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087ca:	4498      	add	r8, r3
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	469b      	mov	fp, r3
 80087d0:	f04f 0c00 	mov.w	ip, #0
 80087d4:	46d9      	mov	r9, fp
 80087d6:	46e2      	mov	sl, ip
 80087d8:	eb19 0309 	adds.w	r3, r9, r9
 80087dc:	eb4a 040a 	adc.w	r4, sl, sl
 80087e0:	4699      	mov	r9, r3
 80087e2:	46a2      	mov	sl, r4
 80087e4:	eb19 090b 	adds.w	r9, r9, fp
 80087e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087ec:	f04f 0100 	mov.w	r1, #0
 80087f0:	f04f 0200 	mov.w	r2, #0
 80087f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008800:	4689      	mov	r9, r1
 8008802:	4692      	mov	sl, r2
 8008804:	eb1b 0509 	adds.w	r5, fp, r9
 8008808:	eb4c 060a 	adc.w	r6, ip, sl
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	4619      	mov	r1, r3
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	f04f 0400 	mov.w	r4, #0
 800881e:	0094      	lsls	r4, r2, #2
 8008820:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008824:	008b      	lsls	r3, r1, #2
 8008826:	461a      	mov	r2, r3
 8008828:	4623      	mov	r3, r4
 800882a:	4628      	mov	r0, r5
 800882c:	4631      	mov	r1, r6
 800882e:	f7f8 f9c3 	bl	8000bb8 <__aeabi_uldivmod>
 8008832:	4603      	mov	r3, r0
 8008834:	460c      	mov	r4, r1
 8008836:	461a      	mov	r2, r3
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <UART_SetConfig+0x5c0>)
 800883a:	fba3 1302 	umull	r1, r3, r3, r2
 800883e:	095b      	lsrs	r3, r3, #5
 8008840:	2164      	movs	r1, #100	; 0x64
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	011b      	lsls	r3, r3, #4
 800884a:	3332      	adds	r3, #50	; 0x32
 800884c:	4a05      	ldr	r2, [pc, #20]	; (8008864 <UART_SetConfig+0x5c0>)
 800884e:	fba2 2303 	umull	r2, r3, r2, r3
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	f003 020f 	and.w	r2, r3, #15
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4442      	add	r2, r8
 800885e:	609a      	str	r2, [r3, #8]
 8008860:	e0d7      	b.n	8008a12 <UART_SetConfig+0x76e>
 8008862:	bf00      	nop
 8008864:	51eb851f 	.word	0x51eb851f
 8008868:	40011000 	.word	0x40011000
 800886c:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8008870:	f7fc f906 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8008874:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	469a      	mov	sl, r3
 800887a:	f04f 0b00 	mov.w	fp, #0
 800887e:	46d0      	mov	r8, sl
 8008880:	46d9      	mov	r9, fp
 8008882:	eb18 0308 	adds.w	r3, r8, r8
 8008886:	eb49 0409 	adc.w	r4, r9, r9
 800888a:	4698      	mov	r8, r3
 800888c:	46a1      	mov	r9, r4
 800888e:	eb18 080a 	adds.w	r8, r8, sl
 8008892:	eb49 090b 	adc.w	r9, r9, fp
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80088a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80088a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80088aa:	4688      	mov	r8, r1
 80088ac:	4691      	mov	r9, r2
 80088ae:	eb1a 0508 	adds.w	r5, sl, r8
 80088b2:	eb4b 0609 	adc.w	r6, fp, r9
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	4619      	mov	r1, r3
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	f04f 0400 	mov.w	r4, #0
 80088c8:	0094      	lsls	r4, r2, #2
 80088ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088ce:	008b      	lsls	r3, r1, #2
 80088d0:	461a      	mov	r2, r3
 80088d2:	4623      	mov	r3, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	4631      	mov	r1, r6
 80088d8:	f7f8 f96e 	bl	8000bb8 <__aeabi_uldivmod>
 80088dc:	4603      	mov	r3, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	461a      	mov	r2, r3
 80088e2:	4b4e      	ldr	r3, [pc, #312]	; (8008a1c <UART_SetConfig+0x778>)
 80088e4:	fba3 2302 	umull	r2, r3, r3, r2
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	469b      	mov	fp, r3
 80088f2:	f04f 0c00 	mov.w	ip, #0
 80088f6:	46d9      	mov	r9, fp
 80088f8:	46e2      	mov	sl, ip
 80088fa:	eb19 0309 	adds.w	r3, r9, r9
 80088fe:	eb4a 040a 	adc.w	r4, sl, sl
 8008902:	4699      	mov	r9, r3
 8008904:	46a2      	mov	sl, r4
 8008906:	eb19 090b 	adds.w	r9, r9, fp
 800890a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800890e:	f04f 0100 	mov.w	r1, #0
 8008912:	f04f 0200 	mov.w	r2, #0
 8008916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800891a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800891e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008922:	4689      	mov	r9, r1
 8008924:	4692      	mov	sl, r2
 8008926:	eb1b 0509 	adds.w	r5, fp, r9
 800892a:	eb4c 060a 	adc.w	r6, ip, sl
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	4619      	mov	r1, r3
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	f04f 0300 	mov.w	r3, #0
 800893c:	f04f 0400 	mov.w	r4, #0
 8008940:	0094      	lsls	r4, r2, #2
 8008942:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008946:	008b      	lsls	r3, r1, #2
 8008948:	461a      	mov	r2, r3
 800894a:	4623      	mov	r3, r4
 800894c:	4628      	mov	r0, r5
 800894e:	4631      	mov	r1, r6
 8008950:	f7f8 f932 	bl	8000bb8 <__aeabi_uldivmod>
 8008954:	4603      	mov	r3, r0
 8008956:	460c      	mov	r4, r1
 8008958:	461a      	mov	r2, r3
 800895a:	4b30      	ldr	r3, [pc, #192]	; (8008a1c <UART_SetConfig+0x778>)
 800895c:	fba3 1302 	umull	r1, r3, r3, r2
 8008960:	095b      	lsrs	r3, r3, #5
 8008962:	2164      	movs	r1, #100	; 0x64
 8008964:	fb01 f303 	mul.w	r3, r1, r3
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	3332      	adds	r3, #50	; 0x32
 800896e:	4a2b      	ldr	r2, [pc, #172]	; (8008a1c <UART_SetConfig+0x778>)
 8008970:	fba2 2303 	umull	r2, r3, r2, r3
 8008974:	095b      	lsrs	r3, r3, #5
 8008976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800897a:	4498      	add	r8, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	469b      	mov	fp, r3
 8008980:	f04f 0c00 	mov.w	ip, #0
 8008984:	46d9      	mov	r9, fp
 8008986:	46e2      	mov	sl, ip
 8008988:	eb19 0309 	adds.w	r3, r9, r9
 800898c:	eb4a 040a 	adc.w	r4, sl, sl
 8008990:	4699      	mov	r9, r3
 8008992:	46a2      	mov	sl, r4
 8008994:	eb19 090b 	adds.w	r9, r9, fp
 8008998:	eb4a 0a0c 	adc.w	sl, sl, ip
 800899c:	f04f 0100 	mov.w	r1, #0
 80089a0:	f04f 0200 	mov.w	r2, #0
 80089a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089b0:	4689      	mov	r9, r1
 80089b2:	4692      	mov	sl, r2
 80089b4:	eb1b 0509 	adds.w	r5, fp, r9
 80089b8:	eb4c 060a 	adc.w	r6, ip, sl
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4619      	mov	r1, r3
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	f04f 0400 	mov.w	r4, #0
 80089ce:	0094      	lsls	r4, r2, #2
 80089d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089d4:	008b      	lsls	r3, r1, #2
 80089d6:	461a      	mov	r2, r3
 80089d8:	4623      	mov	r3, r4
 80089da:	4628      	mov	r0, r5
 80089dc:	4631      	mov	r1, r6
 80089de:	f7f8 f8eb 	bl	8000bb8 <__aeabi_uldivmod>
 80089e2:	4603      	mov	r3, r0
 80089e4:	460c      	mov	r4, r1
 80089e6:	461a      	mov	r2, r3
 80089e8:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <UART_SetConfig+0x778>)
 80089ea:	fba3 1302 	umull	r1, r3, r3, r2
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	2164      	movs	r1, #100	; 0x64
 80089f2:	fb01 f303 	mul.w	r3, r1, r3
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	3332      	adds	r3, #50	; 0x32
 80089fc:	4a07      	ldr	r2, [pc, #28]	; (8008a1c <UART_SetConfig+0x778>)
 80089fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4442      	add	r2, r8
 8008a0e:	609a      	str	r2, [r3, #8]
}
 8008a10:	e7ff      	b.n	8008a12 <UART_SetConfig+0x76e>
 8008a12:	bf00      	nop
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1c:	51eb851f 	.word	0x51eb851f

08008a20 <COM_getReadyCommandFlag>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

bool COM_getReadyCommandFlag(void)
{
 8008a20:	b480      	push	{r7}
 8008a22:	af00      	add	r7, sp, #0
	return Uart_Buffer.rx_ready_command;
 8008a24:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <COM_getReadyCommandFlag+0x14>)
 8008a26:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	20000278 	.word	0x20000278

08008a38 <COM_setReadyCommandFlagOn>:

void COM_setReadyCommandFlagOn(void)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
	Uart_Buffer.rx_ready_command = true;
 8008a3c:	4b04      	ldr	r3, [pc, #16]	; (8008a50 <COM_setReadyCommandFlagOn+0x18>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8008a44:	bf00      	nop
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	20000278 	.word	0x20000278

08008a54 <COM_setReadyCommandFlagOff>:

void COM_setReadyCommandFlagOff(void)
{
 8008a54:	b480      	push	{r7}
 8008a56:	af00      	add	r7, sp, #0
	Uart_Buffer.rx_ready_command = false;
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <COM_setReadyCommandFlagOff+0x18>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8008a60:	bf00      	nop
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	20000278 	.word	0x20000278

08008a70 <COM_readyCommandProcess>:

void COM_readyCommandProcess(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
	char* token = strtok((char*)Uart_Buffer.p_rx_buffer, " ");
 8008a76:	4909      	ldr	r1, [pc, #36]	; (8008a9c <COM_readyCommandProcess+0x2c>)
 8008a78:	4809      	ldr	r0, [pc, #36]	; (8008aa0 <COM_readyCommandProcess+0x30>)
 8008a7a:	f003 fc1f 	bl	800c2bc <strtok>
 8008a7e:	6078      	str	r0, [r7, #4]
	COMMAND_findCommand(token);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f8c1 	bl	8008c08 <COMMAND_findCommand>
	COM_bufferInit(Uart_Buffer.p_rx_buffer);
 8008a86:	4806      	ldr	r0, [pc, #24]	; (8008aa0 <COM_readyCommandProcess+0x30>)
 8008a88:	f000 f8a6 	bl	8008bd8 <COM_bufferInit>
	Uart_Buffer.rx_index = 0;
 8008a8c:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <COM_readyCommandProcess+0x30>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	0800df94 	.word	0x0800df94
 8008aa0:	20000278 	.word	0x20000278

08008aa4 <COM_uartPrint>:

void COM_uartPrint(char* token)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
	while (COM_getTxBusyFlag());
 8008aac:	bf00      	nop
 8008aae:	f000 f84b 	bl	8008b48 <COM_getTxBusyFlag>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1fa      	bne.n	8008aae <COM_uartPrint+0xa>

	strncpy((char*)Uart_Buffer.p_tx_buffer, token, sizeof(Uart_Buffer.p_tx_buffer));
 8008ab8:	2264      	movs	r2, #100	; 0x64
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	480b      	ldr	r0, [pc, #44]	; (8008aec <COM_uartPrint+0x48>)
 8008abe:	f003 fbe7 	bl	800c290 <strncpy>
	while (HAL_UART_Transmit_DMA(&huart2, Uart_Buffer.p_tx_buffer, strlen(token)) != HAL_OK);
 8008ac2:	bf00      	nop
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7f7 fb8b 	bl	80001e0 <strlen>
 8008aca:	4603      	mov	r3, r0
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	461a      	mov	r2, r3
 8008ad0:	4906      	ldr	r1, [pc, #24]	; (8008aec <COM_uartPrint+0x48>)
 8008ad2:	4807      	ldr	r0, [pc, #28]	; (8008af0 <COM_uartPrint+0x4c>)
 8008ad4:	f7fe ffe2 	bl	8007a9c <HAL_UART_Transmit_DMA>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f2      	bne.n	8008ac4 <COM_uartPrint+0x20>
	COM_setTxBusyFlagOn();
 8008ade:	f000 f817 	bl	8008b10 <COM_setTxBusyFlagOn>
}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	200002df 	.word	0x200002df
 8008af0:	20000884 	.word	0x20000884

08008af4 <COM_halUartReceiveDma>:

void COM_halUartReceiveDma(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, &Uart_Buffer.rx_single_char, 1);
 8008af8:	2201      	movs	r2, #1
 8008afa:	4903      	ldr	r1, [pc, #12]	; (8008b08 <COM_halUartReceiveDma+0x14>)
 8008afc:	4803      	ldr	r0, [pc, #12]	; (8008b0c <COM_halUartReceiveDma+0x18>)
 8008afe:	f7ff f839 	bl	8007b74 <HAL_UART_Receive_DMA>
}
 8008b02:	bf00      	nop
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	200002dd 	.word	0x200002dd
 8008b0c:	20000884 	.word	0x20000884

08008b10 <COM_setTxBusyFlagOn>:

void COM_setTxBusyFlagOn(void)
{
 8008b10:	b480      	push	{r7}
 8008b12:	af00      	add	r7, sp, #0
	Uart_Buffer.tx_busy = true;
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <COM_setTxBusyFlagOn+0x18>)
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 8008b1c:	bf00      	nop
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	20000278 	.word	0x20000278

08008b2c <COM_setTxBusyFlagOff>:

void COM_setTxBusyFlagOff(void)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
	Uart_Buffer.tx_busy = false;
 8008b30:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <COM_setTxBusyFlagOff+0x18>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 8008b38:	bf00      	nop
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000278 	.word	0x20000278

08008b48 <COM_getTxBusyFlag>:

bool COM_getTxBusyFlag(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
	return Uart_Buffer.tx_busy;
 8008b4c:	4b03      	ldr	r3, [pc, #12]	; (8008b5c <COM_getTxBusyFlag+0x14>)
 8008b4e:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20000278 	.word	0x20000278

08008b60 <COM_charHandler>:

void COM_charHandler(void)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
	if (COM_getReadyCommandFlag())
 8008b64:	f7ff ff5c 	bl	8008a20 <COM_getReadyCommandFlag>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d12f      	bne.n	8008bce <COM_charHandler+0x6e>
	{
		return;
	}

	if (Uart_Buffer.rx_single_char != '\n')
 8008b6e:	4b19      	ldr	r3, [pc, #100]	; (8008bd4 <COM_charHandler+0x74>)
 8008b70:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8008b74:	2b0a      	cmp	r3, #10
 8008b76:	d016      	beq.n	8008ba6 <COM_charHandler+0x46>
	{
		if(Uart_Buffer.rx_index < BUFFER_SIZE)
 8008b78:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <COM_charHandler+0x74>)
 8008b7a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008b7e:	2b63      	cmp	r3, #99	; 0x63
 8008b80:	d826      	bhi.n	8008bd0 <COM_charHandler+0x70>
	{
			Uart_Buffer.p_rx_buffer[Uart_Buffer.rx_index] = Uart_Buffer.rx_single_char;
 8008b82:	4b14      	ldr	r3, [pc, #80]	; (8008bd4 <COM_charHandler+0x74>)
 8008b84:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b12      	ldr	r3, [pc, #72]	; (8008bd4 <COM_charHandler+0x74>)
 8008b8c:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 8008b90:	4b10      	ldr	r3, [pc, #64]	; (8008bd4 <COM_charHandler+0x74>)
 8008b92:	5499      	strb	r1, [r3, r2]
			Uart_Buffer.rx_index++;
 8008b94:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <COM_charHandler+0x74>)
 8008b96:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <COM_charHandler+0x74>)
 8008ba0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8008ba4:	e014      	b.n	8008bd0 <COM_charHandler+0x70>
	}
	}
	else
	{
		Uart_Buffer.p_rx_buffer[Uart_Buffer.rx_index] = Uart_Buffer.rx_single_char;
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <COM_charHandler+0x74>)
 8008ba8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008bac:	461a      	mov	r2, r3
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <COM_charHandler+0x74>)
 8008bb0:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 8008bb4:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <COM_charHandler+0x74>)
 8008bb6:	5499      	strb	r1, [r3, r2]
		Uart_Buffer.rx_index++;
 8008bb8:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <COM_charHandler+0x74>)
 8008bba:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <COM_charHandler+0x74>)
 8008bc4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		COM_setReadyCommandFlagOn();
 8008bc8:	f7ff ff36 	bl	8008a38 <COM_setReadyCommandFlagOn>
 8008bcc:	e000      	b.n	8008bd0 <COM_charHandler+0x70>
		return;
 8008bce:	bf00      	nop
	}
}
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000278 	.word	0x20000278

08008bd8 <COM_bufferInit>:

void COM_bufferInit(uint8_t* p_buffer)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e007      	b.n	8008bf6 <COM_bufferInit+0x1e>
		p_buffer[i] = 0;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	2200      	movs	r2, #0
 8008bee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b63      	cmp	r3, #99	; 0x63
 8008bfa:	ddf4      	ble.n	8008be6 <COM_bufferInit+0xe>
	}
}
 8008bfc:	bf00      	nop
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <COMMAND_findCommand>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void COMMAND_findCommand (char* token)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
 8008c14:	e02a      	b.n	8008c6c <COMMAND_findCommand+0x64>
	{
		if (strncmp(token, Commands[i].name, Commands[i].size)==0)
 8008c16:	7bfa      	ldrb	r2, [r7, #15]
 8008c18:	4917      	ldr	r1, [pc, #92]	; (8008c78 <COMMAND_findCommand+0x70>)
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	7bfa      	ldrb	r2, [r7, #15]
 8008c28:	4913      	ldr	r1, [pc, #76]	; (8008c78 <COMMAND_findCommand+0x70>)
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	3304      	adds	r3, #4
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f003 fb15 	bl	800c26c <strncmp>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10e      	bne.n	8008c66 <COMMAND_findCommand+0x5e>
		{
			COM_uartPrint(OK);
 8008c48:	480c      	ldr	r0, [pc, #48]	; (8008c7c <COMMAND_findCommand+0x74>)
 8008c4a:	f7ff ff2b 	bl	8008aa4 <COM_uartPrint>
			Commands[i].func_ptr(token);
 8008c4e:	7bfa      	ldrb	r2, [r7, #15]
 8008c50:	4909      	ldr	r1, [pc, #36]	; (8008c78 <COMMAND_findCommand+0x70>)
 8008c52:	4613      	mov	r3, r2
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	4798      	blx	r3
			return;
 8008c64:	e005      	b.n	8008c72 <COMMAND_findCommand+0x6a>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	73fb      	strb	r3, [r7, #15]
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	2b12      	cmp	r3, #18
 8008c70:	d9d1      	bls.n	8008c16 <COMMAND_findCommand+0xe>
		}
	}
}
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	0800e3d4 	.word	0x0800e3d4
 8008c7c:	0800e0b8 	.word	0x0800e0b8

08008c80 <COMMAND_pingCallback>:

void COMMAND_pingCallback(char* token)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	COM_uartPrint(token);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff ff0b 	bl	8008aa4 <COM_uartPrint>
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <COMMAND_getVersionCallback>:

void COMMAND_getVersionCallback(char* token)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	COM_uartPrint(VERSION);
 8008ca0:	4803      	ldr	r0, [pc, #12]	; (8008cb0 <COMMAND_getVersionCallback+0x18>)
 8008ca2:	f7ff feff 	bl	8008aa4 <COM_uartPrint>
}
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	0800e0bc 	.word	0x0800e0bc

08008cb4 <COMMAND_pwmStartCallback>:

void COMMAND_pwmStartCallback(char* token)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4803      	ldr	r0, [pc, #12]	; (8008ccc <COMMAND_pwmStartCallback+0x18>)
 8008cc0:	f7fd fbb6 	bl	8006430 <HAL_TIM_PWM_Start>
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20000784 	.word	0x20000784

08008cd0 <COMMAND_pwmStopCallback>:

void COMMAND_pwmStopCallback(char* token)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4803      	ldr	r0, [pc, #12]	; (8008ce8 <COMMAND_pwmStopCallback+0x18>)
 8008cdc:	f7fd fc5c 	bl	8006598 <HAL_TIM_PWM_Stop>
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20000784 	.word	0x20000784

08008cec <COMMAND_pwmDcCallback>:

void COMMAND_pwmDcCallback(char* token)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8008cf4:	490f      	ldr	r1, [pc, #60]	; (8008d34 <COMMAND_pwmDcCallback+0x48>)
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f003 fae0 	bl	800c2bc <strtok>
 8008cfc:	6078      	str	r0, [r7, #4]
	if(strlen(token) <= 0)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d012      	beq.n	8008d2c <COMMAND_pwmDcCallback+0x40>
	{
		return;
	}
	int32_t dc = atoi(token);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f002 fdfd 	bl	800b906 <atoi>
 8008d0c:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b64      	cmp	r3, #100	; 0x64
 8008d12:	dd01      	ble.n	8008d18 <COMMAND_pwmDcCallback+0x2c>
 8008d14:	2364      	movs	r3, #100	; 0x64
 8008d16:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da01      	bge.n	8008d22 <COMMAND_pwmDcCallback+0x36>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <COMMAND_pwmDcCallback+0x4c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	635a      	str	r2, [r3, #52]	; 0x34
 8008d2a:	e000      	b.n	8008d2e <COMMAND_pwmDcCallback+0x42>
		return;
 8008d2c:	bf00      	nop
}
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	0800e0c4 	.word	0x0800e0c4
 8008d38:	20000784 	.word	0x20000784

08008d3c <COMMAND_crcWholeFlashCalcCallback>:

void COMMAND_crcWholeFlashCalcCallback(char* token)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	char temp [9];
	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 8008d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d48:	61fb      	str	r3, [r7, #28]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 8008d4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d4e:	61bb      	str	r3, [r7, #24]

	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 8008d50:	69fa      	ldr	r2, [r7, #28]
 8008d52:	69b9      	ldr	r1, [r7, #24]
 8008d54:	4809      	ldr	r0, [pc, #36]	; (8008d7c <COMMAND_crcWholeFlashCalcCallback+0x40>)
 8008d56:	f7f8 faab 	bl	80012b0 <HAL_CRC_Calculate>
 8008d5a:	6178      	str	r0, [r7, #20]

	sprintf(temp, "%x\n", (unsigned int)crcFlashResult);
 8008d5c:	f107 0308 	add.w	r3, r7, #8
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	4907      	ldr	r1, [pc, #28]	; (8008d80 <COMMAND_crcWholeFlashCalcCallback+0x44>)
 8008d64:	4618      	mov	r0, r3
 8008d66:	f003 fa61 	bl	800c22c <siprintf>
	COM_uartPrint(temp);
 8008d6a:	f107 0308 	add.w	r3, r7, #8
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff fe98 	bl	8008aa4 <COM_uartPrint>
}
 8008d74:	bf00      	nop
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20000708 	.word	0x20000708
 8008d80:	0800e0c8 	.word	0x0800e0c8

08008d84 <COMMAND_iwdgTestCallback>:

void COMMAND_iwdgTestCallback(char* token)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
#ifdef IWDG_ENABLE
	while(1);
#endif
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <COMMAND_flashLockCallback>:

void COMMAND_flashLockCallback(char* token)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	; 0x28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	 *It does not prevent one part of code to read another part, or even rewrite.
	 *PCROP allows you to use debugger to debug your code,
	 *but protects reading and rewriting the "secret" part.*/

	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 8008da0:	f107 030c 	add.w	r3, r7, #12
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7f9 facb 	bl	8002340 <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0) {
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2baa      	cmp	r3, #170	; 0xaa
 8008dae:	d130      	bne.n	8008e12 <COMMAND_flashLockCallback+0x7a>
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 8008db0:	2355      	movs	r3, #85	; 0x55
 8008db2:	61fb      	str	r3, [r7, #28]
		obConfig.OptionType = OPTIONBYTE_RDP;
 8008db4:	2302      	movs	r3, #2
 8008db6:	60fb      	str	r3, [r7, #12]

		if (HAL_FLASH_Unlock() != HAL_OK)
 8008db8:	f7f9 f820 	bl	8001dfc <HAL_FLASH_Unlock>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <COMMAND_flashLockCallback+0x2e>
		{
			Error_Handler();
 8008dc2:	f002 f82b 	bl	800ae1c <Error_Handler>
		}
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 8008dc6:	f7f9 f84b 	bl	8001e60 <HAL_FLASH_OB_Unlock>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <COMMAND_flashLockCallback+0x3c>
		{
			Error_Handler();
 8008dd0:	f002 f824 	bl	800ae1c <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7f9 fa2b 	bl	8002234 <HAL_FLASHEx_OBProgram>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <COMMAND_flashLockCallback+0x50>
		{
			Error_Handler();
 8008de4:	f002 f81a 	bl	800ae1c <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 8008de8:	f7f9 f866 	bl	8001eb8 <HAL_FLASH_OB_Launch>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <COMMAND_flashLockCallback+0x5e>
		{
			Error_Handler();
 8008df2:	f002 f813 	bl	800ae1c <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 8008df6:	f7f9 f84f 	bl	8001e98 <HAL_FLASH_OB_Lock>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <COMMAND_flashLockCallback+0x6c>
		{
			Error_Handler();
 8008e00:	f002 f80c 	bl	800ae1c <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 8008e04:	f7f9 f81c 	bl	8001e40 <HAL_FLASH_Lock>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <COMMAND_flashLockCallback+0x7a>
		{
			Error_Handler();
 8008e0e:	f002 f805 	bl	800ae1c <Error_Handler>
		FLASH_setSectorAddress(7, sector_7_addr);
		uint32_t myTestWrite[1] = {0xDEADBEEF}; 		//0xFFFFFFFF, 0xDEADBEEF
		FLASH_writeN(131072-4, myTestWrite2, 1, DATA_TYPE_32);
		*/
	}
}
 8008e12:	bf00      	nop
 8008e14:	3728      	adds	r7, #40	; 0x28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <COMMAND_setSNCallback>:

void COMMAND_setSNCallback(char* token)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	/*if (FLASH_wrpSectorDisable() != HAL_OK)
	{
		Error_Handler();
	}*/
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <COMMAND_setSNCallback+0x30>)
 8008e26:	60fb      	str	r3, [r7, #12]
	FLASH_setSectorAddress(7, sector_7_addr);
 8008e28:	68f9      	ldr	r1, [r7, #12]
 8008e2a:	2007      	movs	r0, #7
 8008e2c:	f000 f938 	bl	80090a0 <FLASH_setSectorAddress>
	uint32_t myTestWrite[1] = {0xDEADBEEF}; //0xFFFFFFFF, 0xDEADBEEF
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <COMMAND_setSNCallback+0x34>)
 8008e32:	60bb      	str	r3, [r7, #8]
	FLASH_writeN(0, myTestWrite, 1, DATA_TYPE_32);
 8008e34:	f107 0108 	add.w	r1, r7, #8
 8008e38:	2302      	movs	r3, #2
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	f000 f945 	bl	80090cc <FLASH_writeN>

	/*if (FLASH_wrpSectorEnable() != HAL_OK)
	{
		Error_Handler();
	}*/
}
 8008e42:	bf00      	nop
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	08060000 	.word	0x08060000
 8008e50:	deadbeef 	.word	0xdeadbeef

08008e54 <COMMAND_getSNCallback>:

void COMMAND_getSNCallback(char* token)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
	char temp [9];
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <COMMAND_getSNCallback+0x44>)
 8008e5e:	61fb      	str	r3, [r7, #28]
	FLASH_setSectorAddress(7, sector_7_addr);
 8008e60:	69f9      	ldr	r1, [r7, #28]
 8008e62:	2007      	movs	r0, #7
 8008e64:	f000 f91c 	bl	80090a0 <FLASH_setSectorAddress>
	uint32_t myTestRead[1];
	FLASH_readN(0, myTestRead, 1, DATA_TYPE_32);
 8008e68:	f107 010c 	add.w	r1, r7, #12
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	2201      	movs	r2, #1
 8008e70:	2000      	movs	r0, #0
 8008e72:	f000 f99d 	bl	80091b0 <FLASH_readN>

	sprintf(temp, "%x\n", (unsigned int)myTestRead[0]);
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	f107 0310 	add.w	r3, r7, #16
 8008e7c:	4907      	ldr	r1, [pc, #28]	; (8008e9c <COMMAND_getSNCallback+0x48>)
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f003 f9d4 	bl	800c22c <siprintf>
	COM_uartPrint(temp);
 8008e84:	f107 0310 	add.w	r3, r7, #16
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff fe0b 	bl	8008aa4 <COM_uartPrint>
}
 8008e8e:	bf00      	nop
 8008e90:	3720      	adds	r7, #32
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	08060000 	.word	0x08060000
 8008e9c:	0800e0c8 	.word	0x0800e0c8

08008ea0 <COMMAND_startTickCallback>:

void COMMAND_startTickCallback(char* token)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08c      	sub	sp, #48	; 0x30
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 8008ea8:	f107 0308 	add.w	r3, r7, #8
 8008eac:	2228      	movs	r2, #40	; 0x28
 8008eae:	2100      	movs	r1, #0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f002 fd57 	bl	800b964 <memset>
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	723b      	strb	r3, [r7, #8]
	  sAlarm.AlarmTime.Minutes = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	727b      	strb	r3, [r7, #9]
	  sAlarm.AlarmTime.Seconds = 1;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	72bb      	strb	r3, [r7, #10]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8008ece:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8008ed2:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	627b      	str	r3, [r7, #36]	; 0x24
	  sAlarm.AlarmDateWeekDay = 1;
 8008edc:	2301      	movs	r3, #1
 8008ede:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  sAlarm.Alarm = RTC_ALARM_A;
 8008ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8008ee8:	f107 0308 	add.w	r3, r7, #8
 8008eec:	2200      	movs	r2, #0
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4805      	ldr	r0, [pc, #20]	; (8008f08 <COMMAND_startTickCallback+0x68>)
 8008ef2:	f7fc fb83 	bl	80055fc <HAL_RTC_SetAlarm_IT>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <COMMAND_startTickCallback+0x60>
	  {
	    Error_Handler();
 8008efc:	f001 ff8e 	bl	800ae1c <Error_Handler>
	  }
}
 8008f00:	bf00      	nop
 8008f02:	3730      	adds	r7, #48	; 0x30
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20000764 	.word	0x20000764

08008f0c <COMMAND_stopTickCallback>:

void COMMAND_stopTickCallback(char* token)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8008f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f18:	4803      	ldr	r0, [pc, #12]	; (8008f28 <COMMAND_stopTickCallback+0x1c>)
 8008f1a:	f7fc fe59 	bl	8005bd0 <HAL_RTC_DeactivateAlarm>
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000764 	.word	0x20000764

08008f2c <COMMAND_assert0Callback>:

void COMMAND_assert0Callback(char* token)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	assert_param(0);
 8008f34:	f44f 7192 	mov.w	r1, #292	; 0x124
 8008f38:	4803      	ldr	r0, [pc, #12]	; (8008f48 <COMMAND_assert0Callback+0x1c>)
 8008f3a:	f001 ff77 	bl	800ae2c <assert_failed>
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	0800e0cc 	.word	0x0800e0cc

08008f4c <COMMAND_clearAssertFlagCallback>:

void COMMAND_clearAssertFlagCallback(char* token)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	SYSTEM_DEBUG_assertResetFlag();
 8008f54:	f002 f952 	bl	800b1fc <SYSTEM_DEBUG_assertResetFlag>
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <COMMAND_lsm6dslPerSampleEnableCallback>:

void COMMAND_lsm6dslPerSampleEnableCallback(char* token)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	LSM6DSL_perSampleInit();
 8008f68:	f000 fb24 	bl	80095b4 <LSM6DSL_perSampleInit>
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <COMMAND_lsm6dslFifoEnableCallback>:

void COMMAND_lsm6dslFifoEnableCallback(char* token)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	LSM6DSL_fifoInit();
 8008f7c:	f000 fc32 	bl	80097e4 <LSM6DSL_fifoInit>
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <COMMAND_lsm6dslDisableCallback>:

void COMMAND_lsm6dslDisableCallback(char* token)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	LSM6DSL_modesDisable();
 8008f90:	f000 fede 	bl	8009d50 <LSM6DSL_modesDisable>
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <COMMAND_enterStopModeCallback>:

void COMMAND_enterStopModeCallback(char* token)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
	SYSTEM_DEBUG_enterStopMode();
 8008fa4:	f002 fa12 	bl	800b3cc <SYSTEM_DEBUG_enterStopMode>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <COMMAND_enterStandbyModeCallback>:

void COMMAND_enterStandbyModeCallback(char* token)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	SYSTEM_DEBUG_enterStandbyMode();
 8008fb8:	f002 fa36 	bl	800b428 <SYSTEM_DEBUG_enterStandbyMode>
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8008fc8:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <MX_CRC_Init+0x20>)
 8008fca:	4a07      	ldr	r2, [pc, #28]	; (8008fe8 <MX_CRC_Init+0x24>)
 8008fcc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008fce:	4805      	ldr	r0, [pc, #20]	; (8008fe4 <MX_CRC_Init+0x20>)
 8008fd0:	f7f8 f944 	bl	800125c <HAL_CRC_Init>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008fda:	f001 ff1f 	bl	800ae1c <Error_Handler>
  }

}
 8008fde:	bf00      	nop
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000708 	.word	0x20000708
 8008fe8:	40023000 	.word	0x40023000

08008fec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a0b      	ldr	r2, [pc, #44]	; (8009028 <HAL_CRC_MspInit+0x3c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d10d      	bne.n	800901a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	4b0a      	ldr	r3, [pc, #40]	; (800902c <HAL_CRC_MspInit+0x40>)
 8009004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009006:	4a09      	ldr	r2, [pc, #36]	; (800902c <HAL_CRC_MspInit+0x40>)
 8009008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800900c:	6313      	str	r3, [r2, #48]	; 0x30
 800900e:	4b07      	ldr	r3, [pc, #28]	; (800902c <HAL_CRC_MspInit+0x40>)
 8009010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800901a:	bf00      	nop
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	40023000 	.word	0x40023000
 800902c:	40023800 	.word	0x40023800

08009030 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009036:	2300      	movs	r3, #0
 8009038:	607b      	str	r3, [r7, #4]
 800903a:	4b10      	ldr	r3, [pc, #64]	; (800907c <MX_DMA_Init+0x4c>)
 800903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903e:	4a0f      	ldr	r2, [pc, #60]	; (800907c <MX_DMA_Init+0x4c>)
 8009040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009044:	6313      	str	r3, [r2, #48]	; 0x30
 8009046:	4b0d      	ldr	r3, [pc, #52]	; (800907c <MX_DMA_Init+0x4c>)
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800904e:	607b      	str	r3, [r7, #4]
 8009050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8009052:	2200      	movs	r2, #0
 8009054:	2100      	movs	r1, #0
 8009056:	2010      	movs	r0, #16
 8009058:	f7f8 f8b0 	bl	80011bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800905c:	2010      	movs	r0, #16
 800905e:	f7f8 f8d9 	bl	8001214 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8009062:	2200      	movs	r2, #0
 8009064:	2100      	movs	r1, #0
 8009066:	2011      	movs	r0, #17
 8009068:	f7f8 f8a8 	bl	80011bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800906c:	2011      	movs	r0, #17
 800906e:	f7f8 f8d1 	bl	8001214 <HAL_NVIC_EnableIRQ>

}
 8009072:	bf00      	nop
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	40023800 	.word	0x40023800

08009080 <FLASH_eraseSector>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

static void FLASH_eraseSector(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8009084:	f7f8 feba 	bl	8001dfc <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(Sector_Num, FLASH_VOLTAGE_RANGE_3);
 8009088:	4b04      	ldr	r3, [pc, #16]	; (800909c <FLASH_eraseSector+0x1c>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2102      	movs	r1, #2
 800908e:	4618      	mov	r0, r3
 8009090:	f7f9 f97a 	bl	8002388 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8009094:	f7f8 fed4 	bl	8001e40 <HAL_FLASH_Lock>
}
 8009098:	bf00      	nop
 800909a:	bd80      	pop	{r7, pc}
 800909c:	20000348 	.word	0x20000348

080090a0 <FLASH_setSectorAddress>:

void FLASH_setSectorAddress(uint8_t sector, uint32_t addrs)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	6039      	str	r1, [r7, #0]
 80090aa:	71fb      	strb	r3, [r7, #7]
	Sector_Num = sector;
 80090ac:	4a05      	ldr	r2, [pc, #20]	; (80090c4 <FLASH_setSectorAddress+0x24>)
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	7013      	strb	r3, [r2, #0]
	Sector_Addrs = addrs;
 80090b2:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <FLASH_setSectorAddress+0x28>)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6013      	str	r3, [r2, #0]
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	20000348 	.word	0x20000348
 80090c8:	20000344 	.word	0x20000344

080090cc <FLASH_writeN>:

void FLASH_writeN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 80090cc:	b590      	push	{r4, r7, lr}
 80090ce:	b089      	sub	sp, #36	; 0x24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = Sector_Addrs + idx;
 80090da:	4b34      	ldr	r3, [pc, #208]	; (80091ac <FLASH_writeN+0xe0>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	4413      	add	r3, r2
 80090e2:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	FLASH_eraseSector();
 80090e4:	f7ff ffcc 	bl	8009080 <FLASH_eraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 80090e8:	f7f8 fe88 	bl	8001dfc <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d01e      	beq.n	8009130 <FLASH_writeN+0x64>
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d038      	beq.n	8009168 <FLASH_writeN+0x9c>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d151      	bne.n	800919e <FLASH_writeN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 80090fa:	2300      	movs	r3, #0
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	e012      	b.n	8009126 <FLASH_writeN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	4413      	add	r3, r2
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f04f 0400 	mov.w	r4, #0
 800910e:	461a      	mov	r2, r3
 8009110:	4623      	mov	r3, r4
 8009112:	69f9      	ldr	r1, [r7, #28]
 8009114:	2000      	movs	r0, #0
 8009116:	f7f8 fe0b 	bl	8001d30 <HAL_FLASH_Program>
					flashAddress++;
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	3301      	adds	r3, #1
 800911e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	3301      	adds	r3, #1
 8009124:	61bb      	str	r3, [r7, #24]
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	429a      	cmp	r2, r3
 800912c:	d3e8      	bcc.n	8009100 <FLASH_writeN+0x34>
				}
			break;
 800912e:	e036      	b.n	800919e <FLASH_writeN+0xd2>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	e013      	b.n	800915e <FLASH_writeN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	4413      	add	r3, r2
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	b29b      	uxth	r3, r3
 8009142:	f04f 0400 	mov.w	r4, #0
 8009146:	461a      	mov	r2, r3
 8009148:	4623      	mov	r3, r4
 800914a:	69f9      	ldr	r1, [r7, #28]
 800914c:	2001      	movs	r0, #1
 800914e:	f7f8 fdef 	bl	8001d30 <HAL_FLASH_Program>
					flashAddress+=2;
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	3302      	adds	r3, #2
 8009156:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	3301      	adds	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d3e7      	bcc.n	8009136 <FLASH_writeN+0x6a>
				}
			break;
 8009166:	e01a      	b.n	800919e <FLASH_writeN+0xd2>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8009168:	2300      	movs	r3, #0
 800916a:	613b      	str	r3, [r7, #16]
 800916c:	e012      	b.n	8009194 <FLASH_writeN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4413      	add	r3, r2
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f04f 0400 	mov.w	r4, #0
 800917c:	461a      	mov	r2, r3
 800917e:	4623      	mov	r3, r4
 8009180:	69f9      	ldr	r1, [r7, #28]
 8009182:	2002      	movs	r0, #2
 8009184:	f7f8 fdd4 	bl	8001d30 <HAL_FLASH_Program>
					flashAddress+=4;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	3304      	adds	r3, #4
 800918c:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	3301      	adds	r3, #1
 8009192:	613b      	str	r3, [r7, #16]
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d3e8      	bcc.n	800916e <FLASH_writeN+0xa2>
				}
			break;
 800919c:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800919e:	f7f8 fe4f 	bl	8001e40 <HAL_FLASH_Lock>
}
 80091a2:	bf00      	nop
 80091a4:	3724      	adds	r7, #36	; 0x24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd90      	pop	{r4, r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20000344 	.word	0x20000344

080091b0 <FLASH_readN>:

void FLASH_readN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b089      	sub	sp, #36	; 0x24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
 80091bc:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = Sector_Addrs + idx;
 80091be:	4b28      	ldr	r3, [pc, #160]	; (8009260 <FLASH_readN+0xb0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d018      	beq.n	8009200 <FLASH_readN+0x50>
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d02b      	beq.n	800922a <FLASH_readN+0x7a>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d000      	beq.n	80091d8 <FLASH_readN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 80091d6:	e03d      	b.n	8009254 <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 80091d8:	2300      	movs	r3, #0
 80091da:	61bb      	str	r3, [r7, #24]
 80091dc:	e00b      	b.n	80091f6 <FLASH_readN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	68b9      	ldr	r1, [r7, #8]
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	440b      	add	r3, r1
 80091e6:	7812      	ldrb	r2, [r2, #0]
 80091e8:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3301      	adds	r3, #1
 80091ee:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	3301      	adds	r3, #1
 80091f4:	61bb      	str	r3, [r7, #24]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d3ef      	bcc.n	80091de <FLASH_readN+0x2e>
			break;
 80091fe:	e029      	b.n	8009254 <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8009200:	2300      	movs	r3, #0
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	e00c      	b.n	8009220 <FLASH_readN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	440b      	add	r3, r1
 8009210:	8812      	ldrh	r2, [r2, #0]
 8009212:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	3302      	adds	r3, #2
 8009218:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	3301      	adds	r3, #1
 800921e:	617b      	str	r3, [r7, #20]
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	429a      	cmp	r2, r3
 8009226:	d3ee      	bcc.n	8009206 <FLASH_readN+0x56>
			break;
 8009228:	e014      	b.n	8009254 <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800922a:	2300      	movs	r3, #0
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	e00c      	b.n	800924a <FLASH_readN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	440b      	add	r3, r1
 800923a:	6812      	ldr	r2, [r2, #0]
 800923c:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	3304      	adds	r3, #4
 8009242:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	3301      	adds	r3, #1
 8009248:	613b      	str	r3, [r7, #16]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d3ee      	bcc.n	8009230 <FLASH_readN+0x80>
			break;
 8009252:	bf00      	nop
}
 8009254:	bf00      	nop
 8009256:	3724      	adds	r7, #36	; 0x24
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20000344 	.word	0x20000344

08009264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800926a:	f107 030c 	add.w	r3, r7, #12
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	605a      	str	r2, [r3, #4]
 8009274:	609a      	str	r2, [r3, #8]
 8009276:	60da      	str	r2, [r3, #12]
 8009278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800927a:	2300      	movs	r3, #0
 800927c:	60bb      	str	r3, [r7, #8]
 800927e:	4b34      	ldr	r3, [pc, #208]	; (8009350 <MX_GPIO_Init+0xec>)
 8009280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009282:	4a33      	ldr	r2, [pc, #204]	; (8009350 <MX_GPIO_Init+0xec>)
 8009284:	f043 0304 	orr.w	r3, r3, #4
 8009288:	6313      	str	r3, [r2, #48]	; 0x30
 800928a:	4b31      	ldr	r3, [pc, #196]	; (8009350 <MX_GPIO_Init+0xec>)
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	f003 0304 	and.w	r3, r3, #4
 8009292:	60bb      	str	r3, [r7, #8]
 8009294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009296:	2300      	movs	r3, #0
 8009298:	607b      	str	r3, [r7, #4]
 800929a:	4b2d      	ldr	r3, [pc, #180]	; (8009350 <MX_GPIO_Init+0xec>)
 800929c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929e:	4a2c      	ldr	r2, [pc, #176]	; (8009350 <MX_GPIO_Init+0xec>)
 80092a0:	f043 0301 	orr.w	r3, r3, #1
 80092a4:	6313      	str	r3, [r2, #48]	; 0x30
 80092a6:	4b2a      	ldr	r3, [pc, #168]	; (8009350 <MX_GPIO_Init+0xec>)
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	607b      	str	r3, [r7, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80092b2:	2300      	movs	r3, #0
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	4b26      	ldr	r3, [pc, #152]	; (8009350 <MX_GPIO_Init+0xec>)
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	4a25      	ldr	r2, [pc, #148]	; (8009350 <MX_GPIO_Init+0xec>)
 80092bc:	f043 0302 	orr.w	r3, r3, #2
 80092c0:	6313      	str	r3, [r2, #48]	; 0x30
 80092c2:	4b23      	ldr	r3, [pc, #140]	; (8009350 <MX_GPIO_Init+0xec>)
 80092c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	603b      	str	r3, [r7, #0]
 80092cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80092ce:	2200      	movs	r2, #0
 80092d0:	2120      	movs	r1, #32
 80092d2:	4820      	ldr	r0, [pc, #128]	; (8009354 <MX_GPIO_Init+0xf0>)
 80092d4:	f7f9 fce4 	bl	8002ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80092d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80092de:	4b1e      	ldr	r3, [pc, #120]	; (8009358 <MX_GPIO_Init+0xf4>)
 80092e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092e6:	f107 030c 	add.w	r3, r7, #12
 80092ea:	4619      	mov	r1, r3
 80092ec:	481b      	ldr	r0, [pc, #108]	; (800935c <MX_GPIO_Init+0xf8>)
 80092ee:	f7f9 fa2f 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80092f2:	2320      	movs	r3, #32
 80092f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092f6:	2301      	movs	r3, #1
 80092f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092fe:	2300      	movs	r3, #0
 8009300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009302:	f107 030c 	add.w	r3, r7, #12
 8009306:	4619      	mov	r1, r3
 8009308:	4812      	ldr	r0, [pc, #72]	; (8009354 <MX_GPIO_Init+0xf0>)
 800930a:	f7f9 fa21 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800930e:	2320      	movs	r3, #32
 8009310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009312:	4b13      	ldr	r3, [pc, #76]	; (8009360 <MX_GPIO_Init+0xfc>)
 8009314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800931a:	f107 030c 	add.w	r3, r7, #12
 800931e:	4619      	mov	r1, r3
 8009320:	4810      	ldr	r0, [pc, #64]	; (8009364 <MX_GPIO_Init+0x100>)
 8009322:	f7f9 fa15 	bl	8002750 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8009326:	2200      	movs	r2, #0
 8009328:	2100      	movs	r1, #0
 800932a:	2017      	movs	r0, #23
 800932c:	f7f7 ff46 	bl	80011bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009330:	2017      	movs	r0, #23
 8009332:	f7f7 ff6f 	bl	8001214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009336:	2200      	movs	r2, #0
 8009338:	2100      	movs	r1, #0
 800933a:	2028      	movs	r0, #40	; 0x28
 800933c:	f7f7 ff3e 	bl	80011bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009340:	2028      	movs	r0, #40	; 0x28
 8009342:	f7f7 ff67 	bl	8001214 <HAL_NVIC_EnableIRQ>

}
 8009346:	bf00      	nop
 8009348:	3720      	adds	r7, #32
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	40023800 	.word	0x40023800
 8009354:	40020000 	.word	0x40020000
 8009358:	10110000 	.word	0x10110000
 800935c:	40020800 	.word	0x40020800
 8009360:	10210000 	.word	0x10210000
 8009364:	40020400 	.word	0x40020400

08009368 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800936c:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <MX_I2C1_Init+0x50>)
 800936e:	4a13      	ldr	r2, [pc, #76]	; (80093bc <MX_I2C1_Init+0x54>)
 8009370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009372:	4b11      	ldr	r3, [pc, #68]	; (80093b8 <MX_I2C1_Init+0x50>)
 8009374:	4a12      	ldr	r2, [pc, #72]	; (80093c0 <MX_I2C1_Init+0x58>)
 8009376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009378:	4b0f      	ldr	r3, [pc, #60]	; (80093b8 <MX_I2C1_Init+0x50>)
 800937a:	2200      	movs	r2, #0
 800937c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800937e:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <MX_I2C1_Init+0x50>)
 8009380:	2200      	movs	r2, #0
 8009382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009384:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <MX_I2C1_Init+0x50>)
 8009386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800938a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <MX_I2C1_Init+0x50>)
 800938e:	2200      	movs	r2, #0
 8009390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <MX_I2C1_Init+0x50>)
 8009394:	2200      	movs	r2, #0
 8009396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009398:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <MX_I2C1_Init+0x50>)
 800939a:	2200      	movs	r2, #0
 800939c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800939e:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <MX_I2C1_Init+0x50>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80093a4:	4804      	ldr	r0, [pc, #16]	; (80093b8 <MX_I2C1_Init+0x50>)
 80093a6:	f7f9 fcc5 	bl	8002d34 <HAL_I2C_Init>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80093b0:	f001 fd34 	bl	800ae1c <Error_Handler>
  }

}
 80093b4:	bf00      	nop
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000710 	.word	0x20000710
 80093bc:	40005400 	.word	0x40005400
 80093c0:	000186a0 	.word	0x000186a0

080093c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	; 0x28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093cc:	f107 0314 	add.w	r3, r7, #20
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	605a      	str	r2, [r3, #4]
 80093d6:	609a      	str	r2, [r3, #8]
 80093d8:	60da      	str	r2, [r3, #12]
 80093da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a19      	ldr	r2, [pc, #100]	; (8009448 <HAL_I2C_MspInit+0x84>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d12c      	bne.n	8009440 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093e6:	2300      	movs	r3, #0
 80093e8:	613b      	str	r3, [r7, #16]
 80093ea:	4b18      	ldr	r3, [pc, #96]	; (800944c <HAL_I2C_MspInit+0x88>)
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	4a17      	ldr	r2, [pc, #92]	; (800944c <HAL_I2C_MspInit+0x88>)
 80093f0:	f043 0302 	orr.w	r3, r3, #2
 80093f4:	6313      	str	r3, [r2, #48]	; 0x30
 80093f6:	4b15      	ldr	r3, [pc, #84]	; (800944c <HAL_I2C_MspInit+0x88>)
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	613b      	str	r3, [r7, #16]
 8009400:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009408:	2312      	movs	r3, #18
 800940a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800940c:	2301      	movs	r3, #1
 800940e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009410:	2303      	movs	r3, #3
 8009412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009414:	2304      	movs	r3, #4
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009418:	f107 0314 	add.w	r3, r7, #20
 800941c:	4619      	mov	r1, r3
 800941e:	480c      	ldr	r0, [pc, #48]	; (8009450 <HAL_I2C_MspInit+0x8c>)
 8009420:	f7f9 f996 	bl	8002750 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]
 8009428:	4b08      	ldr	r3, [pc, #32]	; (800944c <HAL_I2C_MspInit+0x88>)
 800942a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942c:	4a07      	ldr	r2, [pc, #28]	; (800944c <HAL_I2C_MspInit+0x88>)
 800942e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009432:	6413      	str	r3, [r2, #64]	; 0x40
 8009434:	4b05      	ldr	r3, [pc, #20]	; (800944c <HAL_I2C_MspInit+0x88>)
 8009436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8009440:	bf00      	nop
 8009442:	3728      	adds	r7, #40	; 0x28
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	40005400 	.word	0x40005400
 800944c:	40023800 	.word	0x40023800
 8009450:	40020400 	.word	0x40020400

08009454 <LSM6DSL_processHanlder>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void LSM6DSL_processHanlder(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Mode == LSM6DSL_MODE_PER_SAMPLE)
 8009458:	4b07      	ldr	r3, [pc, #28]	; (8009478 <LSM6DSL_processHanlder+0x24>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d102      	bne.n	8009466 <LSM6DSL_processHanlder+0x12>
	{
		LSM6DSL_perSampleProcess();
 8009460:	f000 f8e4 	bl	800962c <LSM6DSL_perSampleProcess>
	}
	else if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
	{
		LSM6DSL_fifoProcess();
	}
}
 8009464:	e005      	b.n	8009472 <LSM6DSL_processHanlder+0x1e>
	else if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
 8009466:	4b04      	ldr	r3, [pc, #16]	; (8009478 <LSM6DSL_processHanlder+0x24>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b02      	cmp	r3, #2
 800946c:	d101      	bne.n	8009472 <LSM6DSL_processHanlder+0x1e>
		LSM6DSL_fifoProcess();
 800946e:	f000 fa15 	bl	800989c <LSM6DSL_fifoProcess>
}
 8009472:	bf00      	nop
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	200006d0 	.word	0x200006d0

0800947c <LSM6DSL_write>:

int32_t LSM6DSL_write(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af04      	add	r7, sp, #16
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	607a      	str	r2, [r7, #4]
 8009486:	461a      	mov	r2, r3
 8009488:	460b      	mov	r3, r1
 800948a:	72fb      	strb	r3, [r7, #11]
 800948c:	4613      	mov	r3, r2
 800948e:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	b29a      	uxth	r2, r3
 8009494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009498:	9302      	str	r3, [sp, #8]
 800949a:	893b      	ldrh	r3, [r7, #8]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	2301      	movs	r3, #1
 80094a4:	21d7      	movs	r1, #215	; 0xd7
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f7f9 fe04 	bl	80030b4 <HAL_I2C_Mem_Write>
    return 0;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <LSM6DSL_read>:

int32_t LSM6DSL_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b088      	sub	sp, #32
 80094ba:	af04      	add	r7, sp, #16
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	461a      	mov	r2, r3
 80094c2:	460b      	mov	r3, r1
 80094c4:	72fb      	strb	r3, [r7, #11]
 80094c6:	4613      	mov	r3, r2
 80094c8:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 80094ca:	7afb      	ldrb	r3, [r7, #11]
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094d2:	9302      	str	r3, [sp, #8]
 80094d4:	893b      	ldrh	r3, [r7, #8]
 80094d6:	9301      	str	r3, [sp, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	2301      	movs	r3, #1
 80094de:	21d7      	movs	r1, #215	; 0xd7
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f7f9 feed 	bl	80032c0 <HAL_I2C_Mem_Read>
	return 0;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <LSM6DSL_init>:

void LSM6DSL_init (void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
	Lsm6dsl_Is_Connected = LSM6DSL_DISCONNECTED;
 80094f4:	4b26      	ldr	r3, [pc, #152]	; (8009590 <LSM6DSL_init+0xa0>)
 80094f6:	2201      	movs	r2, #1
 80094f8:	701a      	strb	r2, [r3, #0]

	/* Initialize mems driver interface */
	Dev_Ctx.write_reg = LSM6DSL_write;
 80094fa:	4b26      	ldr	r3, [pc, #152]	; (8009594 <LSM6DSL_init+0xa4>)
 80094fc:	4a26      	ldr	r2, [pc, #152]	; (8009598 <LSM6DSL_init+0xa8>)
 80094fe:	601a      	str	r2, [r3, #0]
	Dev_Ctx.read_reg = LSM6DSL_read;
 8009500:	4b24      	ldr	r3, [pc, #144]	; (8009594 <LSM6DSL_init+0xa4>)
 8009502:	4a26      	ldr	r2, [pc, #152]	; (800959c <LSM6DSL_init+0xac>)
 8009504:	605a      	str	r2, [r3, #4]
	Dev_Ctx.handle = &hi2c1;
 8009506:	4b23      	ldr	r3, [pc, #140]	; (8009594 <LSM6DSL_init+0xa4>)
 8009508:	4a25      	ldr	r2, [pc, #148]	; (80095a0 <LSM6DSL_init+0xb0>)
 800950a:	609a      	str	r2, [r3, #8]

	/* Check device ID */
	Who_Am_I = 0;
 800950c:	4b25      	ldr	r3, [pc, #148]	; (80095a4 <LSM6DSL_init+0xb4>)
 800950e:	2200      	movs	r2, #0
 8009510:	701a      	strb	r2, [r3, #0]
	lsm6dsl_device_id_get(&Dev_Ctx, &Who_Am_I);
 8009512:	4924      	ldr	r1, [pc, #144]	; (80095a4 <LSM6DSL_init+0xb4>)
 8009514:	481f      	ldr	r0, [pc, #124]	; (8009594 <LSM6DSL_init+0xa4>)
 8009516:	f000 fdd8 	bl	800a0ca <lsm6dsl_device_id_get>
	if ( Who_Am_I != LSM6DSL_ID )
 800951a:	4b22      	ldr	r3, [pc, #136]	; (80095a4 <LSM6DSL_init+0xb4>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b6a      	cmp	r3, #106	; 0x6a
 8009520:	d003      	beq.n	800952a <LSM6DSL_init+0x3a>
	{
		COM_uartPrint("lsm6dsl device not found\n");
 8009522:	4821      	ldr	r0, [pc, #132]	; (80095a8 <LSM6DSL_init+0xb8>)
 8009524:	f7ff fabe 	bl	8008aa4 <COM_uartPrint>
		return;
 8009528:	e031      	b.n	800958e <LSM6DSL_init+0x9e>
		//while(1); /* device not found */
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&Dev_Ctx, PROPERTY_ENABLE);
 800952a:	2101      	movs	r1, #1
 800952c:	4819      	ldr	r0, [pc, #100]	; (8009594 <LSM6DSL_init+0xa4>)
 800952e:	f000 fddd 	bl	800a0ec <lsm6dsl_reset_set>
	do {
	lsm6dsl_reset_get(&Dev_Ctx, &Rst);
 8009532:	491e      	ldr	r1, [pc, #120]	; (80095ac <LSM6DSL_init+0xbc>)
 8009534:	4817      	ldr	r0, [pc, #92]	; (8009594 <LSM6DSL_init+0xa4>)
 8009536:	f000 fdff 	bl	800a138 <lsm6dsl_reset_get>
	} while (Rst);
 800953a:	4b1c      	ldr	r3, [pc, #112]	; (80095ac <LSM6DSL_init+0xbc>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f7      	bne.n	8009532 <LSM6DSL_init+0x42>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&Dev_Ctx, PROPERTY_ENABLE);
 8009542:	2101      	movs	r1, #1
 8009544:	4813      	ldr	r0, [pc, #76]	; (8009594 <LSM6DSL_init+0xa4>)
 8009546:	f000 fd2d 	bl	8009fa4 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&Dev_Ctx, LSM6DSL_XL_ODR_12Hz5);
 800954a:	2101      	movs	r1, #1
 800954c:	4811      	ldr	r0, [pc, #68]	; (8009594 <LSM6DSL_init+0xa4>)
 800954e:	f000 fcb7 	bl	8009ec0 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&Dev_Ctx, LSM6DSL_GY_ODR_12Hz5);
 8009552:	2101      	movs	r1, #1
 8009554:	480f      	ldr	r0, [pc, #60]	; (8009594 <LSM6DSL_init+0xa4>)
 8009556:	f000 fcff 	bl	8009f58 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&Dev_Ctx, LSM6DSL_8g);
 800955a:	2103      	movs	r1, #3
 800955c:	480d      	ldr	r0, [pc, #52]	; (8009594 <LSM6DSL_init+0xa4>)
 800955e:	f000 fc89 	bl	8009e74 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&Dev_Ctx, LSM6DSL_500dps);
 8009562:	2102      	movs	r1, #2
 8009564:	480b      	ldr	r0, [pc, #44]	; (8009594 <LSM6DSL_init+0xa4>)
 8009566:	f000 fcd1 	bl	8009f0c <lsm6dsl_gy_full_scale_set>

	/* Accelerometer - analog filter */
	lsm6dsl_xl_filter_analog_set(&Dev_Ctx, LSM6DSL_XL_ANA_BW_400Hz);
 800956a:	2101      	movs	r1, #1
 800956c:	4809      	ldr	r0, [pc, #36]	; (8009594 <LSM6DSL_init+0xa4>)
 800956e:	f000 fdfc 	bl	800a16a <lsm6dsl_xl_filter_analog_set>

	/* Accelerometer - LPF1 + LPF2 path */
	lsm6dsl_xl_lp2_bandwidth_set(&Dev_Ctx, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8009572:	2111      	movs	r1, #17
 8009574:	4807      	ldr	r0, [pc, #28]	; (8009594 <LSM6DSL_init+0xa4>)
 8009576:	f000 fe1e 	bl	800a1b6 <lsm6dsl_xl_lp2_bandwidth_set>

	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&Dev_Ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 800957a:	21a8      	movs	r1, #168	; 0xa8
 800957c:	4805      	ldr	r0, [pc, #20]	; (8009594 <LSM6DSL_init+0xa4>)
 800957e:	f000 fe51 	bl	800a224 <lsm6dsl_gy_band_pass_set>

	Lsm6dsl_Mode = LSM6DSL_MODE_IDLE;
 8009582:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <LSM6DSL_init+0xc0>)
 8009584:	2200      	movs	r2, #0
 8009586:	701a      	strb	r2, [r3, #0]

	Lsm6dsl_Is_Connected = LSM6DSL_CONNECTED;
 8009588:	4b01      	ldr	r3, [pc, #4]	; (8009590 <LSM6DSL_init+0xa0>)
 800958a:	2200      	movs	r2, #0
 800958c:	701a      	strb	r2, [r3, #0]
}
 800958e:	bd80      	pop	{r7, pc}
 8009590:	200006d1 	.word	0x200006d1
 8009594:	20000660 	.word	0x20000660
 8009598:	0800947d 	.word	0x0800947d
 800959c:	080094b7 	.word	0x080094b7
 80095a0:	20000710 	.word	0x20000710
 80095a4:	20000374 	.word	0x20000374
 80095a8:	0800e0e0 	.word	0x0800e0e0
 80095ac:	20000375 	.word	0x20000375
 80095b0:	200006d0 	.word	0x200006d0

080095b4 <LSM6DSL_perSampleInit>:

void LSM6DSL_perSampleInit(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0

	if (Lsm6dsl_Is_Connected == LSM6DSL_DISCONNECTED)
 80095ba:	4b17      	ldr	r3, [pc, #92]	; (8009618 <LSM6DSL_perSampleInit+0x64>)
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d103      	bne.n	80095ca <LSM6DSL_perSampleInit+0x16>
	{
		COM_uartPrint("LSM6DSL is not connected!\n");
 80095c2:	4816      	ldr	r0, [pc, #88]	; (800961c <LSM6DSL_perSampleInit+0x68>)
 80095c4:	f7ff fa6e 	bl	8008aa4 <COM_uartPrint>
		return;
 80095c8:	e023      	b.n	8009612 <LSM6DSL_perSampleInit+0x5e>
	}
	if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
 80095ca:	4b15      	ldr	r3, [pc, #84]	; (8009620 <LSM6DSL_perSampleInit+0x6c>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d103      	bne.n	80095da <LSM6DSL_perSampleInit+0x26>
	{
		COM_uartPrint("Need to disable FIFO mode first\n");
 80095d2:	4814      	ldr	r0, [pc, #80]	; (8009624 <LSM6DSL_perSampleInit+0x70>)
 80095d4:	f7ff fa66 	bl	8008aa4 <COM_uartPrint>
		return;
 80095d8:	e01b      	b.n	8009612 <LSM6DSL_perSampleInit+0x5e>
	}

	//LSM6DSL_ACC_Set_INT1_DRDY
	//LSM6DSL_GYRO_Set_INT1_DRDY

	lsm6dsl_pin_polarity_set(&Dev_Ctx, LSM6DSL_ACTIVE_LOW);
 80095da:	2101      	movs	r1, #1
 80095dc:	4812      	ldr	r0, [pc, #72]	; (8009628 <LSM6DSL_perSampleInit+0x74>)
 80095de:	f001 f8c8 	bl	800a772 <lsm6dsl_pin_polarity_set>

	lsm6dsl_data_ready_mode_set(&Dev_Ctx, LSM6DSL_DRDY_PULSED);
 80095e2:	2101      	movs	r1, #1
 80095e4:	4810      	ldr	r0, [pc, #64]	; (8009628 <LSM6DSL_perSampleInit+0x74>)
 80095e6:	f000 fd4a 	bl	800a07e <lsm6dsl_data_ready_mode_set>

	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 80095ea:	1d3b      	adds	r3, r7, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	480e      	ldr	r0, [pc, #56]	; (8009628 <LSM6DSL_perSampleInit+0x74>)
 80095f0:	f000 ffe9 	bl	800a5c6 <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_ENABLE;
 80095f4:	793b      	ldrb	r3, [r7, #4]
 80095f6:	f043 0301 	orr.w	r3, r3, #1
 80095fa:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_ENABLE;
 80095fc:	793b      	ldrb	r3, [r7, #4]
 80095fe:	f043 0302 	orr.w	r3, r3, #2
 8009602:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	4808      	ldr	r0, [pc, #32]	; (8009628 <LSM6DSL_perSampleInit+0x74>)
 8009608:	f000 fe7a 	bl	800a300 <lsm6dsl_pin_int1_route_set>

	Lsm6dsl_Mode = LSM6DSL_MODE_PER_SAMPLE;
 800960c:	4b04      	ldr	r3, [pc, #16]	; (8009620 <LSM6DSL_perSampleInit+0x6c>)
 800960e:	2201      	movs	r2, #1
 8009610:	701a      	strb	r2, [r3, #0]
}
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	200006d1 	.word	0x200006d1
 800961c:	0800e0fc 	.word	0x0800e0fc
 8009620:	200006d0 	.word	0x200006d0
 8009624:	0800e118 	.word	0x0800e118
 8009628:	20000660 	.word	0x20000660

0800962c <LSM6DSL_perSampleProcess>:

void LSM6DSL_perSampleProcess (void)
{
 800962c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009630:	b086      	sub	sp, #24
 8009632:	af04      	add	r7, sp, #16
	/*
	 * Read output only if new value is available
	 */
	lsm6dsl_reg_t reg;
	lsm6dsl_status_reg_get(&Dev_Ctx, &reg.status_reg);
 8009634:	1d3b      	adds	r3, r7, #4
 8009636:	4619      	mov	r1, r3
 8009638:	4855      	ldr	r0, [pc, #340]	; (8009790 <LSM6DSL_perSampleProcess+0x164>)
 800963a:	f000 fcd9 	bl	8009ff0 <lsm6dsl_status_reg_get>


	if (reg.status_reg.xlda)
 800963e:	793b      	ldrb	r3, [r7, #4]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d04b      	beq.n	80096e2 <LSM6DSL_perSampleProcess+0xb6>
	{
	  memset(Data_Raw_Acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 800964a:	2206      	movs	r2, #6
 800964c:	2100      	movs	r1, #0
 800964e:	4851      	ldr	r0, [pc, #324]	; (8009794 <LSM6DSL_perSampleProcess+0x168>)
 8009650:	f002 f988 	bl	800b964 <memset>
	  lsm6dsl_acceleration_raw_get(&Dev_Ctx, Data_Raw_Acceleration.u8bit);
 8009654:	494f      	ldr	r1, [pc, #316]	; (8009794 <LSM6DSL_perSampleProcess+0x168>)
 8009656:	484e      	ldr	r0, [pc, #312]	; (8009790 <LSM6DSL_perSampleProcess+0x164>)
 8009658:	f000 fcec 	bl	800a034 <lsm6dsl_acceleration_raw_get>
	  P_Acceleration_Mg[0] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[0]);
 800965c:	4b4d      	ldr	r3, [pc, #308]	; (8009794 <LSM6DSL_perSampleProcess+0x168>)
 800965e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fbd6 	bl	8009e14 <lsm6dsl_from_fs8g_to_mg>
 8009668:	eef0 7a40 	vmov.f32	s15, s0
 800966c:	4b4a      	ldr	r3, [pc, #296]	; (8009798 <LSM6DSL_perSampleProcess+0x16c>)
 800966e:	edc3 7a00 	vstr	s15, [r3]
	  P_Acceleration_Mg[1] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[1]);
 8009672:	4b48      	ldr	r3, [pc, #288]	; (8009794 <LSM6DSL_perSampleProcess+0x168>)
 8009674:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 fbcb 	bl	8009e14 <lsm6dsl_from_fs8g_to_mg>
 800967e:	eef0 7a40 	vmov.f32	s15, s0
 8009682:	4b45      	ldr	r3, [pc, #276]	; (8009798 <LSM6DSL_perSampleProcess+0x16c>)
 8009684:	edc3 7a01 	vstr	s15, [r3, #4]
	  P_Acceleration_Mg[2] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[2]);
 8009688:	4b42      	ldr	r3, [pc, #264]	; (8009794 <LSM6DSL_perSampleProcess+0x168>)
 800968a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fbc0 	bl	8009e14 <lsm6dsl_from_fs8g_to_mg>
 8009694:	eef0 7a40 	vmov.f32	s15, s0
 8009698:	4b3f      	ldr	r3, [pc, #252]	; (8009798 <LSM6DSL_perSampleProcess+0x16c>)
 800969a:	edc3 7a02 	vstr	s15, [r3, #8]

	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 800969e:	4b3e      	ldr	r3, [pc, #248]	; (8009798 <LSM6DSL_perSampleProcess+0x16c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f6 ff58 	bl	8000558 <__aeabi_f2d>
 80096a8:	4680      	mov	r8, r0
 80096aa:	4689      	mov	r9, r1
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 80096ac:	4b3a      	ldr	r3, [pc, #232]	; (8009798 <LSM6DSL_perSampleProcess+0x16c>)
 80096ae:	685b      	ldr	r3, [r3, #4]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7f6 ff51 	bl	8000558 <__aeabi_f2d>
 80096b6:	4604      	mov	r4, r0
 80096b8:	460d      	mov	r5, r1
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 80096ba:	4b37      	ldr	r3, [pc, #220]	; (8009798 <LSM6DSL_perSampleProcess+0x16c>)
 80096bc:	689b      	ldr	r3, [r3, #8]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 80096be:	4618      	mov	r0, r3
 80096c0:	f7f6 ff4a 	bl	8000558 <__aeabi_f2d>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096cc:	e9cd 4500 	strd	r4, r5, [sp]
 80096d0:	4642      	mov	r2, r8
 80096d2:	464b      	mov	r3, r9
 80096d4:	4931      	ldr	r1, [pc, #196]	; (800979c <LSM6DSL_perSampleProcess+0x170>)
 80096d6:	4832      	ldr	r0, [pc, #200]	; (80097a0 <LSM6DSL_perSampleProcess+0x174>)
 80096d8:	f002 fda8 	bl	800c22c <siprintf>

	  COM_uartPrint(Data);
 80096dc:	4830      	ldr	r0, [pc, #192]	; (80097a0 <LSM6DSL_perSampleProcess+0x174>)
 80096de:	f7ff f9e1 	bl	8008aa4 <COM_uartPrint>
	}
	if (reg.status_reg.gda)
 80096e2:	793b      	ldrb	r3, [r7, #4]
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d04b      	beq.n	8009786 <LSM6DSL_perSampleProcess+0x15a>
	{
	  memset(Data_Raw_Angular_Rate.u8bit, 0x00, 3*sizeof(int16_t));
 80096ee:	2206      	movs	r2, #6
 80096f0:	2100      	movs	r1, #0
 80096f2:	482c      	ldr	r0, [pc, #176]	; (80097a4 <LSM6DSL_perSampleProcess+0x178>)
 80096f4:	f002 f936 	bl	800b964 <memset>
	  lsm6dsl_angular_rate_raw_get(&Dev_Ctx, Data_Raw_Angular_Rate.u8bit);
 80096f8:	492a      	ldr	r1, [pc, #168]	; (80097a4 <LSM6DSL_perSampleProcess+0x178>)
 80096fa:	4825      	ldr	r0, [pc, #148]	; (8009790 <LSM6DSL_perSampleProcess+0x164>)
 80096fc:	f000 fc89 	bl	800a012 <lsm6dsl_angular_rate_raw_get>
	  P_Angular_Rate_Mdps[0] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[0]);
 8009700:	4b28      	ldr	r3, [pc, #160]	; (80097a4 <LSM6DSL_perSampleProcess+0x178>)
 8009702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fb9c 	bl	8009e44 <lsm6dsl_from_fs500dps_to_mdps>
 800970c:	eef0 7a40 	vmov.f32	s15, s0
 8009710:	4b25      	ldr	r3, [pc, #148]	; (80097a8 <LSM6DSL_perSampleProcess+0x17c>)
 8009712:	edc3 7a00 	vstr	s15, [r3]
	  P_Angular_Rate_Mdps[1] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[1]);
 8009716:	4b23      	ldr	r3, [pc, #140]	; (80097a4 <LSM6DSL_perSampleProcess+0x178>)
 8009718:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fb91 	bl	8009e44 <lsm6dsl_from_fs500dps_to_mdps>
 8009722:	eef0 7a40 	vmov.f32	s15, s0
 8009726:	4b20      	ldr	r3, [pc, #128]	; (80097a8 <LSM6DSL_perSampleProcess+0x17c>)
 8009728:	edc3 7a01 	vstr	s15, [r3, #4]
	  P_Angular_Rate_Mdps[2] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[2]);
 800972c:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <LSM6DSL_perSampleProcess+0x178>)
 800972e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 fb86 	bl	8009e44 <lsm6dsl_from_fs500dps_to_mdps>
 8009738:	eef0 7a40 	vmov.f32	s15, s0
 800973c:	4b1a      	ldr	r3, [pc, #104]	; (80097a8 <LSM6DSL_perSampleProcess+0x17c>)
 800973e:	edc3 7a02 	vstr	s15, [r3, #8]

	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 8009742:	4b19      	ldr	r3, [pc, #100]	; (80097a8 <LSM6DSL_perSampleProcess+0x17c>)
 8009744:	681b      	ldr	r3, [r3, #0]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 8009746:	4618      	mov	r0, r3
 8009748:	f7f6 ff06 	bl	8000558 <__aeabi_f2d>
 800974c:	4680      	mov	r8, r0
 800974e:	4689      	mov	r9, r1
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 8009750:	4b15      	ldr	r3, [pc, #84]	; (80097a8 <LSM6DSL_perSampleProcess+0x17c>)
 8009752:	685b      	ldr	r3, [r3, #4]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 8009754:	4618      	mov	r0, r3
 8009756:	f7f6 feff 	bl	8000558 <__aeabi_f2d>
 800975a:	4604      	mov	r4, r0
 800975c:	460d      	mov	r5, r1
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 800975e:	4b12      	ldr	r3, [pc, #72]	; (80097a8 <LSM6DSL_perSampleProcess+0x17c>)
 8009760:	689b      	ldr	r3, [r3, #8]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 8009762:	4618      	mov	r0, r3
 8009764:	f7f6 fef8 	bl	8000558 <__aeabi_f2d>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009770:	e9cd 4500 	strd	r4, r5, [sp]
 8009774:	4642      	mov	r2, r8
 8009776:	464b      	mov	r3, r9
 8009778:	490c      	ldr	r1, [pc, #48]	; (80097ac <LSM6DSL_perSampleProcess+0x180>)
 800977a:	4809      	ldr	r0, [pc, #36]	; (80097a0 <LSM6DSL_perSampleProcess+0x174>)
 800977c:	f002 fd56 	bl	800c22c <siprintf>

	  COM_uartPrint(Data);
 8009780:	4807      	ldr	r0, [pc, #28]	; (80097a0 <LSM6DSL_perSampleProcess+0x174>)
 8009782:	f7ff f98f 	bl	8008aa4 <COM_uartPrint>
	}
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009790:	20000660 	.word	0x20000660
 8009794:	2000034c 	.word	0x2000034c
 8009798:	2000035c 	.word	0x2000035c
 800979c:	0800e13c 	.word	0x0800e13c
 80097a0:	2000066c 	.word	0x2000066c
 80097a4:	20000354 	.word	0x20000354
 80097a8:	20000368 	.word	0x20000368
 80097ac:	0800e164 	.word	0x0800e164

080097b0 <LSM6DSL_perSampleDisable>:

void LSM6DSL_perSampleDisable (void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 80097b6:	1d3b      	adds	r3, r7, #4
 80097b8:	4619      	mov	r1, r3
 80097ba:	4809      	ldr	r0, [pc, #36]	; (80097e0 <LSM6DSL_perSampleDisable+0x30>)
 80097bc:	f000 ff03 	bl	800a5c6 <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_DISABLE;
 80097c0:	793b      	ldrb	r3, [r7, #4]
 80097c2:	f36f 0300 	bfc	r3, #0, #1
 80097c6:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_DISABLE;
 80097c8:	793b      	ldrb	r3, [r7, #4]
 80097ca:	f36f 0341 	bfc	r3, #1, #1
 80097ce:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4803      	ldr	r0, [pc, #12]	; (80097e0 <LSM6DSL_perSampleDisable+0x30>)
 80097d4:	f000 fd94 	bl	800a300 <lsm6dsl_pin_int1_route_set>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	20000660 	.word	0x20000660

080097e4 <LSM6DSL_fifoInit>:

void LSM6DSL_fifoInit(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Is_Connected == LSM6DSL_DISCONNECTED)
 80097ea:	4b27      	ldr	r3, [pc, #156]	; (8009888 <LSM6DSL_fifoInit+0xa4>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d103      	bne.n	80097fa <LSM6DSL_fifoInit+0x16>
	{
		COM_uartPrint("LSM6DSL is not connected!\n");
 80097f2:	4826      	ldr	r0, [pc, #152]	; (800988c <LSM6DSL_fifoInit+0xa8>)
 80097f4:	f7ff f956 	bl	8008aa4 <COM_uartPrint>
		return;
 80097f8:	e042      	b.n	8009880 <LSM6DSL_fifoInit+0x9c>
	}
	if (Lsm6dsl_Mode == LSM6DSL_MODE_PER_SAMPLE)
 80097fa:	4b25      	ldr	r3, [pc, #148]	; (8009890 <LSM6DSL_fifoInit+0xac>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d103      	bne.n	800980a <LSM6DSL_fifoInit+0x26>
	{
		COM_uartPrint("Need to disable PER_SAMPLE mode first\n");
 8009802:	4824      	ldr	r0, [pc, #144]	; (8009894 <LSM6DSL_fifoInit+0xb0>)
 8009804:	f7ff f94e 	bl	8008aa4 <COM_uartPrint>
		return;
 8009808:	e03a      	b.n	8009880 <LSM6DSL_fifoInit+0x9c>
	}

	lsm6dsl_pin_polarity_set(&Dev_Ctx, LSM6DSL_ACTIVE_LOW);
 800980a:	2101      	movs	r1, #1
 800980c:	4822      	ldr	r0, [pc, #136]	; (8009898 <LSM6DSL_fifoInit+0xb4>)
 800980e:	f000 ffb0 	bl	800a772 <lsm6dsl_pin_polarity_set>

	/* Set acc&gyro FIFO decimation */
	lsm6dsl_dec_fifo_xl_t valXl;
	lsm6dsl_dec_fifo_gyro_t valGy;

	lsm6dsl_fifo_xl_batch_get(&Dev_Ctx, &valXl);
 8009812:	1dfb      	adds	r3, r7, #7
 8009814:	4619      	mov	r1, r3
 8009816:	4820      	ldr	r0, [pc, #128]	; (8009898 <LSM6DSL_fifoInit+0xb4>)
 8009818:	f001 f882 	bl	800a920 <lsm6dsl_fifo_xl_batch_get>
	valXl = LSM6DSL_FIFO_XL_NO_DEC;
 800981c:	2301      	movs	r3, #1
 800981e:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_xl_batch_set(&Dev_Ctx, valXl);
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	4619      	mov	r1, r3
 8009824:	481c      	ldr	r0, [pc, #112]	; (8009898 <LSM6DSL_fifoInit+0xb4>)
 8009826:	f001 f854 	bl	800a8d2 <lsm6dsl_fifo_xl_batch_set>

	lsm6dsl_fifo_gy_batch_get(&Dev_Ctx, &valGy);
 800982a:	1dbb      	adds	r3, r7, #6
 800982c:	4619      	mov	r1, r3
 800982e:	481a      	ldr	r0, [pc, #104]	; (8009898 <LSM6DSL_fifoInit+0xb4>)
 8009830:	f001 f8ec 	bl	800aa0c <lsm6dsl_fifo_gy_batch_get>
	valGy = LSM6DSL_FIFO_GY_NO_DEC;
 8009834:	2301      	movs	r3, #1
 8009836:	71bb      	strb	r3, [r7, #6]
	lsm6dsl_fifo_gy_batch_set(&Dev_Ctx, valGy);
 8009838:	79bb      	ldrb	r3, [r7, #6]
 800983a:	4619      	mov	r1, r3
 800983c:	4816      	ldr	r0, [pc, #88]	; (8009898 <LSM6DSL_fifoInit+0xb4>)
 800983e:	f001 f8bf 	bl	800a9c0 <lsm6dsl_fifo_gy_batch_set>

	/* Set FIFO ODR value */
	lsm6dsl_odr_fifo_t valOdr;
	lsm6dsl_fifo_data_rate_get(&Dev_Ctx, &valOdr);
 8009842:	1d7b      	adds	r3, r7, #5
 8009844:	4619      	mov	r1, r3
 8009846:	4814      	ldr	r0, [pc, #80]	; (8009898 <LSM6DSL_fifoInit+0xb4>)
 8009848:	f001 f9be 	bl	800abc8 <lsm6dsl_fifo_data_rate_get>
	valOdr = LSM6DSL_FIFO_12Hz5;
 800984c:	2301      	movs	r3, #1
 800984e:	717b      	strb	r3, [r7, #5]
	lsm6dsl_fifo_data_rate_set(&Dev_Ctx, valOdr);
 8009850:	797b      	ldrb	r3, [r7, #5]
 8009852:	4619      	mov	r1, r3
 8009854:	4810      	ldr	r0, [pc, #64]	; (8009898 <LSM6DSL_fifoInit+0xb4>)
 8009856:	f001 f991 	bl	800ab7c <lsm6dsl_fifo_data_rate_set>

	LSM6DSL_fifoInterruptEnable();
 800985a:	f000 fa4d 	bl	8009cf8 <LSM6DSL_fifoInterruptEnable>

	/* Set FIFO watermark */
	uint16_t valWtm;
	lsm6dsl_fifo_watermark_get(&Dev_Ctx, &valWtm);
 800985e:	1cbb      	adds	r3, r7, #2
 8009860:	4619      	mov	r1, r3
 8009862:	480d      	ldr	r0, [pc, #52]	; (8009898 <LSM6DSL_fifoInit+0xb4>)
 8009864:	f000 ffe1 	bl	800a82a <lsm6dsl_fifo_watermark_get>
	valWtm = ACC_AND_GYRO_FIFO_WATERMARK;
 8009868:	233c      	movs	r3, #60	; 0x3c
 800986a:	807b      	strh	r3, [r7, #2]
	lsm6dsl_fifo_watermark_set(&Dev_Ctx, valWtm);
 800986c:	887b      	ldrh	r3, [r7, #2]
 800986e:	4619      	mov	r1, r3
 8009870:	4809      	ldr	r0, [pc, #36]	; (8009898 <LSM6DSL_fifoInit+0xb4>)
 8009872:	f000 ffa4 	bl	800a7be <lsm6dsl_fifo_watermark_set>
	/*uint8_t valStopOnWtm;
	lsm6dsl_fifo_stop_on_wtm_get(&Dev_Ctx, &valStopOnWtm);
	valStopOnWtm = PROPERTY_ENABLE;
	lsm6dsl_fifo_stop_on_wtm_set(&Dev_Ctx, valStopOnWtm);*/

	LSM6DSL_fifoSetFIFOMode();
 8009876:	f000 fa13 	bl	8009ca0 <LSM6DSL_fifoSetFIFOMode>

	Lsm6dsl_Mode = LSM6DSL_MODE_FIFO;
 800987a:	4b05      	ldr	r3, [pc, #20]	; (8009890 <LSM6DSL_fifoInit+0xac>)
 800987c:	2202      	movs	r2, #2
 800987e:	701a      	strb	r2, [r3, #0]
}
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	200006d1 	.word	0x200006d1
 800988c:	0800e0fc 	.word	0x0800e0fc
 8009890:	200006d0 	.word	0x200006d0
 8009894:	0800e18c 	.word	0x0800e18c
 8009898:	20000660 	.word	0x20000660

0800989c <LSM6DSL_fifoProcess>:

void LSM6DSL_fifoProcess(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
	LSM6DSL_fifoReadAllData();
 80098a0:	f000 f80a 	bl	80098b8 <LSM6DSL_fifoReadAllData>
}
 80098a4:	bf00      	nop
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <LSM6DSL_fifoDisable>:

void LSM6DSL_fifoDisable(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
	LSM6DSL_fifoInterruptDisable();
 80098ac:	f000 fa3a 	bl	8009d24 <LSM6DSL_fifoInterruptDisable>
	LSM6DSL_fifoSetBypassMode();
 80098b0:	f000 fa0c 	bl	8009ccc <LSM6DSL_fifoSetBypassMode>
}
 80098b4:	bf00      	nop
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <LSM6DSL_fifoReadAllData>:

void LSM6DSL_fifoReadAllData(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
	uint16_t unread_int16_fifo_samples = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	807b      	strh	r3, [r7, #2]

	for(int i = 0; i < 3; i++)
 80098c2:	2300      	movs	r3, #0
 80098c4:	60fb      	str	r3, [r7, #12]
 80098c6:	e010      	b.n	80098ea <LSM6DSL_fifoReadAllData+0x32>
	{
		P_Acceleration_G_Sum[i] = 0;
 80098c8:	4a2f      	ldr	r2, [pc, #188]	; (8009988 <LSM6DSL_fifoReadAllData+0xd0>)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
		P_Angular_Rate_Dps_Sum[i] = 0;
 80098d6:	4a2d      	ldr	r2, [pc, #180]	; (800998c <LSM6DSL_fifoReadAllData+0xd4>)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	f04f 0200 	mov.w	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	ddeb      	ble.n	80098c8 <LSM6DSL_fifoReadAllData+0x10>
	}

	/* Get num of unread FIFO samples before reading Data */
	lsm6dsl_fifo_data_level_get(&Dev_Ctx, &unread_int16_fifo_samples);
 80098f0:	1cbb      	adds	r3, r7, #2
 80098f2:	4619      	mov	r1, r3
 80098f4:	4826      	ldr	r0, [pc, #152]	; (8009990 <LSM6DSL_fifoReadAllData+0xd8>)
 80098f6:	f000 ffc2 	bl	800a87e <lsm6dsl_fifo_data_level_get>

	uint16_t unread_acc_and_gyro_samples = unread_int16_fifo_samples / ACC_AND_GYRO_SINGLE_FIFO_SAMPLE;
 80098fa:	887b      	ldrh	r3, [r7, #2]
 80098fc:	4a25      	ldr	r2, [pc, #148]	; (8009994 <LSM6DSL_fifoReadAllData+0xdc>)
 80098fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009902:	089b      	lsrs	r3, r3, #2
 8009904:	817b      	strh	r3, [r7, #10]
	sprintf(Data, "Number of unread ACC and Gyro samples each: %d\n", unread_acc_and_gyro_samples);
 8009906:	897b      	ldrh	r3, [r7, #10]
 8009908:	461a      	mov	r2, r3
 800990a:	4923      	ldr	r1, [pc, #140]	; (8009998 <LSM6DSL_fifoReadAllData+0xe0>)
 800990c:	4823      	ldr	r0, [pc, #140]	; (800999c <LSM6DSL_fifoReadAllData+0xe4>)
 800990e:	f002 fc8d 	bl	800c22c <siprintf>
	COM_uartPrint(Data);
 8009912:	4822      	ldr	r0, [pc, #136]	; (800999c <LSM6DSL_fifoReadAllData+0xe4>)
 8009914:	f7ff f8c6 	bl	8008aa4 <COM_uartPrint>

	while (unread_acc_and_gyro_samples > 0)
 8009918:	e02f      	b.n	800997a <LSM6DSL_fifoReadAllData+0xc2>
	{
		uint16_t unread_acc_and_gyro_samples_cycle;
		if(unread_acc_and_gyro_samples >= SAMPLES_TO_READ)
 800991a:	897b      	ldrh	r3, [r7, #10]
 800991c:	2b09      	cmp	r3, #9
 800991e:	d902      	bls.n	8009926 <LSM6DSL_fifoReadAllData+0x6e>
		{
			unread_acc_and_gyro_samples_cycle = SAMPLES_TO_READ;
 8009920:	230a      	movs	r3, #10
 8009922:	813b      	strh	r3, [r7, #8]
 8009924:	e001      	b.n	800992a <LSM6DSL_fifoReadAllData+0x72>
		}
		else
		{
			unread_acc_and_gyro_samples_cycle = unread_acc_and_gyro_samples;
 8009926:	897b      	ldrh	r3, [r7, #10]
 8009928:	813b      	strh	r3, [r7, #8]
		}

		lsm6dsl_fifo_raw_data_get(&Dev_Ctx, P_Data_Raw_Acc_Gy_Buf->u8bit, unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE * FIFO_SAMPLE_TO_BYTE_RATIO);
 800992a:	893b      	ldrh	r3, [r7, #8]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	461a      	mov	r2, r3
 8009930:	0052      	lsls	r2, r2, #1
 8009932:	4413      	add	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	b2db      	uxtb	r3, r3
 8009938:	461a      	mov	r2, r3
 800993a:	4919      	ldr	r1, [pc, #100]	; (80099a0 <LSM6DSL_fifoReadAllData+0xe8>)
 800993c:	4814      	ldr	r0, [pc, #80]	; (8009990 <LSM6DSL_fifoReadAllData+0xd8>)
 800993e:	f000 fb8a 	bl	800a056 <lsm6dsl_fifo_raw_data_get>
		for (int i = 0; i < unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 8009942:	2300      	movs	r3, #0
 8009944:	607b      	str	r3, [r7, #4]
 8009946:	e007      	b.n	8009958 <LSM6DSL_fifoReadAllData+0xa0>
		{
			LSM6DSL_fifoAccAndGyroReadSingleSample(i);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	b29b      	uxth	r3, r3
 800994c:	4618      	mov	r0, r3
 800994e:	f000 f829 	bl	80099a4 <LSM6DSL_fifoAccAndGyroReadSingleSample>
		for (int i = 0; i < unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3306      	adds	r3, #6
 8009956:	607b      	str	r3, [r7, #4]
 8009958:	893a      	ldrh	r2, [r7, #8]
 800995a:	4613      	mov	r3, r2
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	4413      	add	r3, r2
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	461a      	mov	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4293      	cmp	r3, r2
 8009968:	dbee      	blt.n	8009948 <LSM6DSL_fifoReadAllData+0x90>
		}
		LSM6DSL_fifoCalcAccGyroAvgAndPrint(unread_acc_and_gyro_samples_cycle);
 800996a:	893b      	ldrh	r3, [r7, #8]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f88f 	bl	8009a90 <LSM6DSL_fifoCalcAccGyroAvgAndPrint>
		unread_acc_and_gyro_samples -= unread_acc_and_gyro_samples_cycle;
 8009972:	897a      	ldrh	r2, [r7, #10]
 8009974:	893b      	ldrh	r3, [r7, #8]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	817b      	strh	r3, [r7, #10]
	while (unread_acc_and_gyro_samples > 0)
 800997a:	897b      	ldrh	r3, [r7, #10]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1cc      	bne.n	800991a <LSM6DSL_fifoReadAllData+0x62>
	}
}
 8009980:	bf00      	nop
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20000648 	.word	0x20000648
 800998c:	20000654 	.word	0x20000654
 8009990:	20000660 	.word	0x20000660
 8009994:	aaaaaaab 	.word	0xaaaaaaab
 8009998:	0800e1b4 	.word	0x0800e1b4
 800999c:	2000066c 	.word	0x2000066c
 80099a0:	20000378 	.word	0x20000378

080099a4 <LSM6DSL_fifoAccAndGyroReadSingleSample>:

void LSM6DSL_fifoAccAndGyroReadSingleSample(uint16_t SampleIndex)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	80fb      	strh	r3, [r7, #6]
	P_Angular_Rate_Dps_Sum[0] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex];
 80099ae:	4b35      	ldr	r3, [pc, #212]	; (8009a84 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 80099b0:	ed93 7a00 	vldr	s14, [r3]
 80099b4:	88fb      	ldrh	r3, [r7, #6]
 80099b6:	4a34      	ldr	r2, [pc, #208]	; (8009a88 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 80099b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80099bc:	ee07 3a90 	vmov	s15, r3
 80099c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099c8:	4b2e      	ldr	r3, [pc, #184]	; (8009a84 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 80099ca:	edc3 7a00 	vstr	s15, [r3]
	P_Angular_Rate_Dps_Sum[1] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 1];
 80099ce:	4b2d      	ldr	r3, [pc, #180]	; (8009a84 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 80099d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80099d4:	88fb      	ldrh	r3, [r7, #6]
 80099d6:	3301      	adds	r3, #1
 80099d8:	4a2b      	ldr	r2, [pc, #172]	; (8009a88 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 80099da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099ea:	4b26      	ldr	r3, [pc, #152]	; (8009a84 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 80099ec:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Angular_Rate_Dps_Sum[2] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 2];
 80099f0:	4b24      	ldr	r3, [pc, #144]	; (8009a84 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 80099f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	3302      	adds	r3, #2
 80099fa:	4a23      	ldr	r2, [pc, #140]	; (8009a88 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 80099fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009a00:	ee07 3a90 	vmov	s15, r3
 8009a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a0c:	4b1d      	ldr	r3, [pc, #116]	; (8009a84 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 8009a0e:	edc3 7a02 	vstr	s15, [r3, #8]

	P_Acceleration_G_Sum[0] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 3];
 8009a12:	4b1e      	ldr	r3, [pc, #120]	; (8009a8c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009a14:	ed93 7a00 	vldr	s14, [r3]
 8009a18:	88fb      	ldrh	r3, [r7, #6]
 8009a1a:	3303      	adds	r3, #3
 8009a1c:	4a1a      	ldr	r2, [pc, #104]	; (8009a88 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 8009a1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a2e:	4b17      	ldr	r3, [pc, #92]	; (8009a8c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009a30:	edc3 7a00 	vstr	s15, [r3]
	P_Acceleration_G_Sum[1] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 4];
 8009a34:	4b15      	ldr	r3, [pc, #84]	; (8009a8c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009a36:	ed93 7a01 	vldr	s14, [r3, #4]
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4a12      	ldr	r2, [pc, #72]	; (8009a88 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 8009a40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009a44:	ee07 3a90 	vmov	s15, r3
 8009a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a50:	4b0e      	ldr	r3, [pc, #56]	; (8009a8c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009a52:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Acceleration_G_Sum[2] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 5];
 8009a56:	4b0d      	ldr	r3, [pc, #52]	; (8009a8c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009a58:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a5c:	88fb      	ldrh	r3, [r7, #6]
 8009a5e:	3305      	adds	r3, #5
 8009a60:	4a09      	ldr	r2, [pc, #36]	; (8009a88 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 8009a62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009a74:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	20000654 	.word	0x20000654
 8009a88:	20000378 	.word	0x20000378
 8009a8c:	20000648 	.word	0x20000648

08009a90 <LSM6DSL_fifoCalcAccGyroAvgAndPrint>:

void LSM6DSL_fifoCalcAccGyroAvgAndPrint(uint16_t divider)
{
 8009a90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a94:	b086      	sub	sp, #24
 8009a96:	af04      	add	r7, sp, #16
 8009a98:	4603      	mov	r3, r0
 8009a9a:	80fb      	strh	r3, [r7, #6]
	sprintf(Data, "%d samples average:\n", divider);
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4978      	ldr	r1, [pc, #480]	; (8009c84 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f4>)
 8009aa2:	4879      	ldr	r0, [pc, #484]	; (8009c88 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009aa4:	f002 fbc2 	bl	800c22c <siprintf>
	COM_uartPrint(Data);
 8009aa8:	4877      	ldr	r0, [pc, #476]	; (8009c88 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009aaa:	f7fe fffb 	bl	8008aa4 <COM_uartPrint>

	P_Acceleration_G_Sum[0] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[0] / divider )/1000;
 8009aae:	4b77      	ldr	r3, [pc, #476]	; (8009c8c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009ab0:	edd3 6a00 	vldr	s13, [r3]
 8009ab4:	88fb      	ldrh	r3, [r7, #6]
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ac6:	ee17 3a90 	vmov	r3, s15
 8009aca:	b21b      	sxth	r3, r3
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 f9a1 	bl	8009e14 <lsm6dsl_from_fs8g_to_mg>
 8009ad2:	eef0 6a40 	vmov.f32	s13, s0
 8009ad6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8009c90 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ade:	4b6b      	ldr	r3, [pc, #428]	; (8009c8c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009ae0:	edc3 7a00 	vstr	s15, [r3]
	P_Acceleration_G_Sum[1] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[1] / divider )/1000;
 8009ae4:	4b69      	ldr	r3, [pc, #420]	; (8009c8c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009ae6:	edd3 6a01 	vldr	s13, [r3, #4]
 8009aea:	88fb      	ldrh	r3, [r7, #6]
 8009aec:	ee07 3a90 	vmov	s15, r3
 8009af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009afc:	ee17 3a90 	vmov	r3, s15
 8009b00:	b21b      	sxth	r3, r3
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 f986 	bl	8009e14 <lsm6dsl_from_fs8g_to_mg>
 8009b08:	eef0 6a40 	vmov.f32	s13, s0
 8009b0c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8009c90 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b14:	4b5d      	ldr	r3, [pc, #372]	; (8009c8c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009b16:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Acceleration_G_Sum[2] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[2] / divider )/1000;
 8009b1a:	4b5c      	ldr	r3, [pc, #368]	; (8009c8c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009b1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8009b20:	88fb      	ldrh	r3, [r7, #6]
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b32:	ee17 3a90 	vmov	r3, s15
 8009b36:	b21b      	sxth	r3, r3
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 f96b 	bl	8009e14 <lsm6dsl_from_fs8g_to_mg>
 8009b3e:	eef0 6a40 	vmov.f32	s13, s0
 8009b42:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8009c90 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b4a:	4b50      	ldr	r3, [pc, #320]	; (8009c8c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009b4c:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 8009b50:	4b4e      	ldr	r3, [pc, #312]	; (8009c8c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7f6 fcff 	bl	8000558 <__aeabi_f2d>
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	4689      	mov	r9, r1
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 8009b5e:	4b4b      	ldr	r3, [pc, #300]	; (8009c8c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009b60:	685b      	ldr	r3, [r3, #4]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7f6 fcf8 	bl	8000558 <__aeabi_f2d>
 8009b68:	4604      	mov	r4, r0
 8009b6a:	460d      	mov	r5, r1
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 8009b6c:	4b47      	ldr	r3, [pc, #284]	; (8009c8c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009b6e:	689b      	ldr	r3, [r3, #8]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7f6 fcf1 	bl	8000558 <__aeabi_f2d>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b7e:	e9cd 4500 	strd	r4, r5, [sp]
 8009b82:	4642      	mov	r2, r8
 8009b84:	464b      	mov	r3, r9
 8009b86:	4943      	ldr	r1, [pc, #268]	; (8009c94 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x204>)
 8009b88:	483f      	ldr	r0, [pc, #252]	; (8009c88 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009b8a:	f002 fb4f 	bl	800c22c <siprintf>

	COM_uartPrint(Data);
 8009b8e:	483e      	ldr	r0, [pc, #248]	; (8009c88 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009b90:	f7fe ff88 	bl	8008aa4 <COM_uartPrint>

	P_Angular_Rate_Dps_Sum[0] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[0] / divider )/1000;
 8009b94:	4b40      	ldr	r3, [pc, #256]	; (8009c98 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009b96:	edd3 6a00 	vldr	s13, [r3]
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	ee07 3a90 	vmov	s15, r3
 8009ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bac:	ee17 3a90 	vmov	r3, s15
 8009bb0:	b21b      	sxth	r3, r3
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f946 	bl	8009e44 <lsm6dsl_from_fs500dps_to_mdps>
 8009bb8:	eef0 6a40 	vmov.f32	s13, s0
 8009bbc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009c90 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc4:	4b34      	ldr	r3, [pc, #208]	; (8009c98 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009bc6:	edc3 7a00 	vstr	s15, [r3]
	P_Angular_Rate_Dps_Sum[1] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[1] / divider )/1000;
 8009bca:	4b33      	ldr	r3, [pc, #204]	; (8009c98 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009bcc:	edd3 6a01 	vldr	s13, [r3, #4]
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009be2:	ee17 3a90 	vmov	r3, s15
 8009be6:	b21b      	sxth	r3, r3
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 f92b 	bl	8009e44 <lsm6dsl_from_fs500dps_to_mdps>
 8009bee:	eef0 6a40 	vmov.f32	s13, s0
 8009bf2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8009c90 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bfa:	4b27      	ldr	r3, [pc, #156]	; (8009c98 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009bfc:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Angular_Rate_Dps_Sum[2] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[2] / divider )/1000;
 8009c00:	4b25      	ldr	r3, [pc, #148]	; (8009c98 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009c02:	edd3 6a02 	vldr	s13, [r3, #8]
 8009c06:	88fb      	ldrh	r3, [r7, #6]
 8009c08:	ee07 3a90 	vmov	s15, r3
 8009c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c18:	ee17 3a90 	vmov	r3, s15
 8009c1c:	b21b      	sxth	r3, r3
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f910 	bl	8009e44 <lsm6dsl_from_fs500dps_to_mdps>
 8009c24:	eef0 6a40 	vmov.f32	s13, s0
 8009c28:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009c90 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c30:	4b19      	ldr	r3, [pc, #100]	; (8009c98 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009c32:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 8009c36:	4b18      	ldr	r3, [pc, #96]	; (8009c98 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009c38:	681b      	ldr	r3, [r3, #0]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7f6 fc8c 	bl	8000558 <__aeabi_f2d>
 8009c40:	4680      	mov	r8, r0
 8009c42:	4689      	mov	r9, r1
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 8009c44:	4b14      	ldr	r3, [pc, #80]	; (8009c98 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009c46:	685b      	ldr	r3, [r3, #4]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7f6 fc85 	bl	8000558 <__aeabi_f2d>
 8009c4e:	4604      	mov	r4, r0
 8009c50:	460d      	mov	r5, r1
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 8009c52:	4b11      	ldr	r3, [pc, #68]	; (8009c98 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009c54:	689b      	ldr	r3, [r3, #8]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7f6 fc7e 	bl	8000558 <__aeabi_f2d>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c64:	e9cd 4500 	strd	r4, r5, [sp]
 8009c68:	4642      	mov	r2, r8
 8009c6a:	464b      	mov	r3, r9
 8009c6c:	490b      	ldr	r1, [pc, #44]	; (8009c9c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x20c>)
 8009c6e:	4806      	ldr	r0, [pc, #24]	; (8009c88 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009c70:	f002 fadc 	bl	800c22c <siprintf>

	COM_uartPrint(Data);
 8009c74:	4804      	ldr	r0, [pc, #16]	; (8009c88 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009c76:	f7fe ff15 	bl	8008aa4 <COM_uartPrint>
}
 8009c7a:	bf00      	nop
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009c84:	0800e1e4 	.word	0x0800e1e4
 8009c88:	2000066c 	.word	0x2000066c
 8009c8c:	20000648 	.word	0x20000648
 8009c90:	447a0000 	.word	0x447a0000
 8009c94:	0800e1fc 	.word	0x0800e1fc
 8009c98:	20000654 	.word	0x20000654
 8009c9c:	0800e224 	.word	0x0800e224

08009ca0 <LSM6DSL_fifoSetFIFOMode>:

void LSM6DSL_fifoSetFIFOMode(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
	/* Set FIFO mode to FIFO */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&Dev_Ctx, &fifo_mode_t);
 8009ca6:	1dfb      	adds	r3, r7, #7
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4807      	ldr	r0, [pc, #28]	; (8009cc8 <LSM6DSL_fifoSetFIFOMode+0x28>)
 8009cac:	f000 ff24 	bl	800aaf8 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_FIFO_MODE;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&Dev_Ctx, fifo_mode_t);
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4803      	ldr	r0, [pc, #12]	; (8009cc8 <LSM6DSL_fifoSetFIFOMode+0x28>)
 8009cba:	f000 fef7 	bl	800aaac <lsm6dsl_fifo_mode_set>
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000660 	.word	0x20000660

08009ccc <LSM6DSL_fifoSetBypassMode>:

void LSM6DSL_fifoSetBypassMode(void)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
	/* Set FIFO mode to BYPASS */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&Dev_Ctx, &fifo_mode_t);
 8009cd2:	1dfb      	adds	r3, r7, #7
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4807      	ldr	r0, [pc, #28]	; (8009cf4 <LSM6DSL_fifoSetBypassMode+0x28>)
 8009cd8:	f000 ff0e 	bl	800aaf8 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_BYPASS_MODE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&Dev_Ctx, fifo_mode_t);
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4803      	ldr	r0, [pc, #12]	; (8009cf4 <LSM6DSL_fifoSetBypassMode+0x28>)
 8009ce6:	f000 fee1 	bl	800aaac <lsm6dsl_fifo_mode_set>

	//lsm6dsl_fifo_mode_set(&Dev_Ctx, LSM6DSL_BYPASS_MODE);
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20000660 	.word	0x20000660

08009cf8 <LSM6DSL_fifoInterruptEnable>:

void LSM6DSL_fifoInterruptEnable(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 8009cfe:	1d3b      	adds	r3, r7, #4
 8009d00:	4619      	mov	r1, r3
 8009d02:	4807      	ldr	r0, [pc, #28]	; (8009d20 <LSM6DSL_fifoInterruptEnable+0x28>)
 8009d04:	f000 fc5f 	bl	800a5c6 <lsm6dsl_pin_int1_route_get>
	//reg.int1_full_flag = PROPERTY_ENABLE;
	reg.int1_fth = PROPERTY_ENABLE;
 8009d08:	793b      	ldrb	r3, [r7, #4]
 8009d0a:	f043 0308 	orr.w	r3, r3, #8
 8009d0e:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	4803      	ldr	r0, [pc, #12]	; (8009d20 <LSM6DSL_fifoInterruptEnable+0x28>)
 8009d14:	f000 faf4 	bl	800a300 <lsm6dsl_pin_int1_route_set>
}
 8009d18:	bf00      	nop
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	20000660 	.word	0x20000660

08009d24 <LSM6DSL_fifoInterruptDisable>:

void LSM6DSL_fifoInterruptDisable(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 8009d2a:	1d3b      	adds	r3, r7, #4
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4807      	ldr	r0, [pc, #28]	; (8009d4c <LSM6DSL_fifoInterruptDisable+0x28>)
 8009d30:	f000 fc49 	bl	800a5c6 <lsm6dsl_pin_int1_route_get>
	reg.int1_fth = PROPERTY_DISABLE;
 8009d34:	793b      	ldrb	r3, [r7, #4]
 8009d36:	f36f 03c3 	bfc	r3, #3, #1
 8009d3a:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4803      	ldr	r0, [pc, #12]	; (8009d4c <LSM6DSL_fifoInterruptDisable+0x28>)
 8009d40:	f000 fade 	bl	800a300 <lsm6dsl_pin_int1_route_set>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	20000660 	.word	0x20000660

08009d50 <LSM6DSL_modesDisable>:

void LSM6DSL_modesDisable(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
	LSM6DSL_perSampleDisable();
 8009d54:	f7ff fd2c 	bl	80097b0 <LSM6DSL_perSampleDisable>
	LSM6DSL_fifoDisable();
 8009d58:	f7ff fda6 	bl	80098a8 <LSM6DSL_fifoDisable>
	Lsm6dsl_Mode = LSM6DSL_MODE_IDLE;
 8009d5c:	4b02      	ldr	r3, [pc, #8]	; (8009d68 <LSM6DSL_modesDisable+0x18>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	701a      	strb	r2, [r3, #0]
}
 8009d62:	bf00      	nop
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	200006d0 	.word	0x200006d0

08009d6c <LSM6DSL_getInterruptFlag>:

bool LSM6DSL_getInterruptFlag(void)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0
	return Interrup_Flag;
 8009d70:	4b03      	ldr	r3, [pc, #12]	; (8009d80 <LSM6DSL_getInterruptFlag+0x14>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	200006d2 	.word	0x200006d2

08009d84 <LSM6DSL_setInterruptFlagOn>:

void LSM6DSL_setInterruptFlagOn(void)
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
	Interrup_Flag = true;
 8009d88:	4b03      	ldr	r3, [pc, #12]	; (8009d98 <LSM6DSL_setInterruptFlagOn+0x14>)
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	701a      	strb	r2, [r3, #0]
}
 8009d8e:	bf00      	nop
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	200006d2 	.word	0x200006d2

08009d9c <LSM6DSL_setInterruptFlagOff>:

void LSM6DSL_setInterruptFlagOff(void)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	af00      	add	r7, sp, #0
	Interrup_Flag = false;
 8009da0:	4b03      	ldr	r3, [pc, #12]	; (8009db0 <LSM6DSL_setInterruptFlagOff+0x14>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	701a      	strb	r2, [r3, #0]
}
 8009da6:	bf00      	nop
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	200006d2 	.word	0x200006d2

08009db4 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8009db4:	b590      	push	{r4, r7, lr}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	607a      	str	r2, [r7, #4]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	72fb      	strb	r3, [r7, #11]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	685c      	ldr	r4, [r3, #4]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6898      	ldr	r0, [r3, #8]
 8009dd0:	893b      	ldrh	r3, [r7, #8]
 8009dd2:	7af9      	ldrb	r1, [r7, #11]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	47a0      	blx	r4
 8009dd8:	6178      	str	r0, [r7, #20]
  return ret;
 8009dda:	697b      	ldr	r3, [r7, #20]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	371c      	adds	r7, #28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd90      	pop	{r4, r7, pc}

08009de4 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8009de4:	b590      	push	{r4, r7, lr}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	607a      	str	r2, [r7, #4]
 8009dee:	461a      	mov	r2, r3
 8009df0:	460b      	mov	r3, r1
 8009df2:	72fb      	strb	r3, [r7, #11]
 8009df4:	4613      	mov	r3, r2
 8009df6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681c      	ldr	r4, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6898      	ldr	r0, [r3, #8]
 8009e00:	893b      	ldrh	r3, [r7, #8]
 8009e02:	7af9      	ldrb	r1, [r7, #11]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	47a0      	blx	r4
 8009e08:	6178      	str	r0, [r7, #20]
  return ret;
 8009e0a:	697b      	ldr	r3, [r7, #20]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	371c      	adds	r7, #28
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd90      	pop	{r4, r7, pc}

08009e14 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 8009e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e22:	ee07 3a90 	vmov	s15, r3
 8009e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e2a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009e40 <lsm6dsl_from_fs8g_to_mg+0x2c>
 8009e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009e32:	eeb0 0a67 	vmov.f32	s0, s15
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	3e79db23 	.word	0x3e79db23

08009e44 <lsm6dsl_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6dsl_from_fs500dps_to_mdps(int16_t lsb)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 8009e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e5a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009e70 <lsm6dsl_from_fs500dps_to_mdps+0x2c>
 8009e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009e62:	eeb0 0a67 	vmov.f32	s0, s15
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	418c0000 	.word	0x418c0000

08009e74 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8009e80:	f107 0208 	add.w	r2, r7, #8
 8009e84:	2301      	movs	r3, #1
 8009e86:	2110      	movs	r1, #16
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff ff93 	bl	8009db4 <lsm6dsl_read_reg>
 8009e8e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10f      	bne.n	8009eb6 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	f003 0303 	and.w	r3, r3, #3
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	7a3b      	ldrb	r3, [r7, #8]
 8009ea0:	f362 0383 	bfi	r3, r2, #2, #2
 8009ea4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8009ea6:	f107 0208 	add.w	r2, r7, #8
 8009eaa:	2301      	movs	r3, #1
 8009eac:	2110      	movs	r1, #16
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7ff ff98 	bl	8009de4 <lsm6dsl_write_reg>
 8009eb4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8009ecc:	f107 0208 	add.w	r2, r7, #8
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	2110      	movs	r1, #16
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7ff ff6d 	bl	8009db4 <lsm6dsl_read_reg>
 8009eda:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10f      	bne.n	8009f02 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8009ee2:	78fb      	ldrb	r3, [r7, #3]
 8009ee4:	f003 030f 	and.w	r3, r3, #15
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	7a3b      	ldrb	r3, [r7, #8]
 8009eec:	f362 1307 	bfi	r3, r2, #4, #4
 8009ef0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8009ef2:	f107 0208 	add.w	r2, r7, #8
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	2110      	movs	r1, #16
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff ff72 	bl	8009de4 <lsm6dsl_write_reg>
 8009f00:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8009f02:	68fb      	ldr	r3, [r7, #12]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8009f18:	f107 0208 	add.w	r2, r7, #8
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	2111      	movs	r1, #17
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff ff47 	bl	8009db4 <lsm6dsl_read_reg>
 8009f26:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10f      	bne.n	8009f4e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8009f2e:	78fb      	ldrb	r3, [r7, #3]
 8009f30:	f003 0307 	and.w	r3, r3, #7
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	7a3b      	ldrb	r3, [r7, #8]
 8009f38:	f362 0343 	bfi	r3, r2, #1, #3
 8009f3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8009f3e:	f107 0208 	add.w	r2, r7, #8
 8009f42:	2301      	movs	r3, #1
 8009f44:	2111      	movs	r1, #17
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff ff4c 	bl	8009de4 <lsm6dsl_write_reg>
 8009f4c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8009f64:	f107 0208 	add.w	r2, r7, #8
 8009f68:	2301      	movs	r3, #1
 8009f6a:	2111      	movs	r1, #17
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7ff ff21 	bl	8009db4 <lsm6dsl_read_reg>
 8009f72:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10f      	bne.n	8009f9a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	7a3b      	ldrb	r3, [r7, #8]
 8009f84:	f362 1307 	bfi	r3, r2, #4, #4
 8009f88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8009f8a:	f107 0208 	add.w	r2, r7, #8
 8009f8e:	2301      	movs	r3, #1
 8009f90:	2111      	movs	r1, #17
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff ff26 	bl	8009de4 <lsm6dsl_write_reg>
 8009f98:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8009fb0:	f107 0208 	add.w	r2, r7, #8
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	2112      	movs	r1, #18
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f7ff fefb 	bl	8009db4 <lsm6dsl_read_reg>
 8009fbe:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10f      	bne.n	8009fe6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8009fc6:	78fb      	ldrb	r3, [r7, #3]
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	7a3b      	ldrb	r3, [r7, #8]
 8009fd0:	f362 1386 	bfi	r3, r2, #6, #1
 8009fd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8009fd6:	f107 0208 	add.w	r2, r7, #8
 8009fda:	2301      	movs	r3, #1
 8009fdc:	2112      	movs	r1, #18
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff ff00 	bl	8009de4 <lsm6dsl_write_reg>
 8009fe4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <lsm6dsl_status_reg_get>:
  * @param  val    Registers STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx, lsm6dsl_status_reg_t *val)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*) val, 1);
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	211e      	movs	r1, #30
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff fed7 	bl	8009db4 <lsm6dsl_read_reg>
 800a006:	60f8      	str	r0, [r7, #12]
  return ret;
 800a008:	68fb      	ldr	r3, [r7, #12]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800a01c:	2306      	movs	r3, #6
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	2122      	movs	r1, #34	; 0x22
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff fec6 	bl	8009db4 <lsm6dsl_read_reg>
 800a028:	60f8      	str	r0, [r7, #12]
  return ret;
 800a02a:	68fb      	ldr	r3, [r7, #12]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800a03e:	2306      	movs	r3, #6
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	2128      	movs	r1, #40	; 0x28
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff feb5 	bl	8009db4 <lsm6dsl_read_reg>
 800a04a:	60f8      	str	r0, [r7, #12]
  return ret;
 800a04c:	68fb      	ldr	r3, [r7, #12]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <lsm6dsl_fifo_raw_data_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_raw_data_get(stmdev_ctx_t *ctx, uint8_t *buffer,
                                  uint8_t len)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b086      	sub	sp, #24
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	4613      	mov	r3, r2
 800a062:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_DATA_OUT_L, buffer, len);
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	b29b      	uxth	r3, r3
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	213e      	movs	r1, #62	; 0x3e
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f7ff fea1 	bl	8009db4 <lsm6dsl_read_reg>
 800a072:	6178      	str	r0, [r7, #20]
  return ret;
 800a074:	697b      	ldr	r3, [r7, #20]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <lsm6dsl_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsl_drdy_pulsed_g_t val)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800a08a:	f107 0208 	add.w	r2, r7, #8
 800a08e:	2301      	movs	r3, #1
 800a090:	210b      	movs	r1, #11
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff fe8e 	bl	8009db4 <lsm6dsl_read_reg>
 800a098:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&drdy_pulse_cfg_g, 1);
  if(ret == 0){
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10f      	bne.n	800a0c0 <lsm6dsl_data_ready_mode_set+0x42>
    drdy_pulse_cfg_g.drdy_pulsed = (uint8_t) val;
 800a0a0:	78fb      	ldrb	r3, [r7, #3]
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	7a3b      	ldrb	r3, [r7, #8]
 800a0aa:	f362 13c7 	bfi	r3, r2, #7, #1
 800a0ae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800a0b0:	f107 0208 	add.w	r2, r7, #8
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	210b      	movs	r1, #11
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff fe93 	bl	8009de4 <lsm6dsl_write_reg>
 800a0be:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&drdy_pulse_cfg_g, 1);
  }
  return ret;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	210f      	movs	r1, #15
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff fe6a 	bl	8009db4 <lsm6dsl_read_reg>
 800a0e0:	60f8      	str	r0, [r7, #12]
  return ret;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a0f8:	f107 0208 	add.w	r2, r7, #8
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	2112      	movs	r1, #18
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fe57 	bl	8009db4 <lsm6dsl_read_reg>
 800a106:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10f      	bne.n	800a12e <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	b2da      	uxtb	r2, r3
 800a116:	7a3b      	ldrb	r3, [r7, #8]
 800a118:	f362 0300 	bfi	r3, r2, #0, #1
 800a11c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a11e:	f107 0208 	add.w	r2, r7, #8
 800a122:	2301      	movs	r3, #1
 800a124:	2112      	movs	r1, #18
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7ff fe5c 	bl	8009de4 <lsm6dsl_write_reg>
 800a12c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a12e:	68fb      	ldr	r3, [r7, #12]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a142:	f107 0208 	add.w	r2, r7, #8
 800a146:	2301      	movs	r3, #1
 800a148:	2112      	movs	r1, #18
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7ff fe32 	bl	8009db4 <lsm6dsl_read_reg>
 800a150:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800a152:	7a3b      	ldrb	r3, [r7, #8]
 800a154:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	461a      	mov	r2, r3
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	701a      	strb	r2, [r3, #0]

  return ret;
 800a160:	68fb      	ldr	r3, [r7, #12]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <lsm6dsl_xl_filter_analog_set>:
  * @param  val    Change the values of bw0_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	460b      	mov	r3, r1
 800a174:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800a176:	f107 0208 	add.w	r2, r7, #8
 800a17a:	2301      	movs	r3, #1
 800a17c:	2110      	movs	r1, #16
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff fe18 	bl	8009db4 <lsm6dsl_read_reg>
 800a184:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10f      	bne.n	800a1ac <lsm6dsl_xl_filter_analog_set+0x42>
    ctrl1_xl.bw0_xl = (uint8_t) val;
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	b2da      	uxtb	r2, r3
 800a194:	7a3b      	ldrb	r3, [r7, #8]
 800a196:	f362 0300 	bfi	r3, r2, #0, #1
 800a19a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800a19c:	f107 0208 	add.w	r2, r7, #8
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	2110      	movs	r1, #16
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff fe1d 	bl	8009de4 <lsm6dsl_write_reg>
 800a1aa:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800a1c2:	f107 0208 	add.w	r2, r7, #8
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	2117      	movs	r1, #23
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff fdf2 	bl	8009db4 <lsm6dsl_read_reg>
 800a1d0:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d120      	bne.n	800a21a <lsm6dsl_xl_lp2_bandwidth_set+0x64>
    ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	091b      	lsrs	r3, r3, #4
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	7a3b      	ldrb	r3, [r7, #8]
 800a1e4:	f362 03c3 	bfi	r3, r2, #3, #1
 800a1e8:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	f003 0303 	and.w	r3, r3, #3
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	7a3b      	ldrb	r3, [r7, #8]
 800a1f4:	f362 1346 	bfi	r3, r2, #5, #2
 800a1f8:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800a1fa:	7a3b      	ldrb	r3, [r7, #8]
 800a1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a200:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800a202:	7a3b      	ldrb	r3, [r7, #8]
 800a204:	f36f 0382 	bfc	r3, #2, #1
 800a208:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800a20a:	f107 0208 	add.w	r2, r7, #8
 800a20e:	2301      	movs	r3, #1
 800a210:	2117      	movs	r1, #23
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff fde6 	bl	8009de4 <lsm6dsl_write_reg>
 800a218:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a21a:	68fb      	ldr	r3, [r7, #12]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <lsm6dsl_gy_band_pass_set>:
  * @param  val    gyroscope filtering chain configuration.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800a230:	f107 0208 	add.w	r2, r7, #8
 800a234:	2301      	movs	r3, #1
 800a236:	2116      	movs	r1, #22
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7ff fdbb 	bl	8009db4 <lsm6dsl_read_reg>
 800a23e:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d157      	bne.n	800a2f6 <lsm6dsl_gy_band_pass_set+0xd2>
    ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	091b      	lsrs	r3, r3, #4
 800a24a:	f003 0303 	and.w	r3, r3, #3
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	7a3b      	ldrb	r3, [r7, #8]
 800a252:	f362 1305 	bfi	r3, r2, #4, #2
 800a256:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	09db      	lsrs	r3, r3, #7
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	b2da      	uxtb	r2, r3
 800a264:	7a3b      	ldrb	r3, [r7, #8]
 800a266:	f362 1386 	bfi	r3, r2, #6, #1
 800a26a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800a26c:	f107 0208 	add.w	r2, r7, #8
 800a270:	2301      	movs	r3, #1
 800a272:	2116      	movs	r1, #22
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff fdb5 	bl	8009de4 <lsm6dsl_write_reg>
 800a27a:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d139      	bne.n	800a2f6 <lsm6dsl_gy_band_pass_set+0xd2>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800a282:	f107 020c 	add.w	r2, r7, #12
 800a286:	2301      	movs	r3, #1
 800a288:	2115      	movs	r1, #21
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7ff fd92 	bl	8009db4 <lsm6dsl_read_reg>
 800a290:	6178      	str	r0, [r7, #20]
      if(ret == 0){
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d12e      	bne.n	800a2f6 <lsm6dsl_gy_band_pass_set+0xd2>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	7b3b      	ldrb	r3, [r7, #12]
 800a2a2:	f362 0301 	bfi	r3, r2, #0, #2
 800a2a6:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800a2a8:	f107 020c 	add.w	r2, r7, #12
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	2115      	movs	r1, #21
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff fd97 	bl	8009de4 <lsm6dsl_write_reg>
 800a2b6:	6178      	str	r0, [r7, #20]
        if(ret == 0){
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d11b      	bne.n	800a2f6 <lsm6dsl_gy_band_pass_set+0xd2>
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 800a2be:	f107 0210 	add.w	r2, r7, #16
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	2113      	movs	r1, #19
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7ff fd74 	bl	8009db4 <lsm6dsl_read_reg>
 800a2cc:	6178      	str	r0, [r7, #20]
                                 (uint8_t*)&ctrl4_c, 1);
          if(ret == 0){
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d110      	bne.n	800a2f6 <lsm6dsl_gy_band_pass_set+0xd2>
            ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	08db      	lsrs	r3, r3, #3
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	7c3b      	ldrb	r3, [r7, #16]
 800a2e0:	f362 0341 	bfi	r3, r2, #1, #1
 800a2e4:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 800a2e6:	f107 0210 	add.w	r2, r7, #16
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	2113      	movs	r1, #19
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7ff fd78 	bl	8009de4 <lsm6dsl_write_reg>
 800a2f4:	6178      	str	r0, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800a2f6:	697b      	ldr	r3, [r7, #20]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	; 0x28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800a30a:	f107 021c 	add.w	r2, r7, #28
 800a30e:	2301      	movs	r3, #1
 800a310:	210d      	movs	r1, #13
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff fd4e 	bl	8009db4 <lsm6dsl_read_reg>
 800a318:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d147      	bne.n	800a3b0 <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800a320:	783b      	ldrb	r3, [r7, #0]
 800a322:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a326:	b2da      	uxtb	r2, r3
 800a328:	7f3b      	ldrb	r3, [r7, #28]
 800a32a:	f362 0300 	bfi	r3, r2, #0, #1
 800a32e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800a330:	783b      	ldrb	r3, [r7, #0]
 800a332:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a336:	b2da      	uxtb	r2, r3
 800a338:	7f3b      	ldrb	r3, [r7, #28]
 800a33a:	f362 0341 	bfi	r3, r2, #1, #1
 800a33e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800a340:	783b      	ldrb	r3, [r7, #0]
 800a342:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a346:	b2da      	uxtb	r2, r3
 800a348:	7f3b      	ldrb	r3, [r7, #28]
 800a34a:	f362 0382 	bfi	r3, r2, #2, #1
 800a34e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800a350:	783b      	ldrb	r3, [r7, #0]
 800a352:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a356:	b2da      	uxtb	r2, r3
 800a358:	7f3b      	ldrb	r3, [r7, #28]
 800a35a:	f362 03c3 	bfi	r3, r2, #3, #1
 800a35e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800a360:	783b      	ldrb	r3, [r7, #0]
 800a362:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	7f3b      	ldrb	r3, [r7, #28]
 800a36a:	f362 1304 	bfi	r3, r2, #4, #1
 800a36e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800a370:	783b      	ldrb	r3, [r7, #0]
 800a372:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a376:	b2da      	uxtb	r2, r3
 800a378:	7f3b      	ldrb	r3, [r7, #28]
 800a37a:	f362 1345 	bfi	r3, r2, #5, #1
 800a37e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 800a380:	783b      	ldrb	r3, [r7, #0]
 800a382:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a386:	b2da      	uxtb	r2, r3
 800a388:	7f3b      	ldrb	r3, [r7, #28]
 800a38a:	f362 1386 	bfi	r3, r2, #6, #1
 800a38e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 800a390:	783b      	ldrb	r3, [r7, #0]
 800a392:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a396:	b2da      	uxtb	r2, r3
 800a398:	7f3b      	ldrb	r3, [r7, #28]
 800a39a:	f362 13c7 	bfi	r3, r2, #7, #1
 800a39e:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800a3a0:	f107 021c 	add.w	r2, r7, #28
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	210d      	movs	r1, #13
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff fd1b 	bl	8009de4 <lsm6dsl_write_reg>
 800a3ae:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d107      	bne.n	800a3c6 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800a3b6:	f107 0218 	add.w	r2, r7, #24
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	215e      	movs	r1, #94	; 0x5e
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7ff fcf8 	bl	8009db4 <lsm6dsl_read_reg>
 800a3c4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d107      	bne.n	800a3dc <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 800a3cc:	f107 0214 	add.w	r2, r7, #20
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	215f      	movs	r1, #95	; 0x5f
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7ff fced 	bl	8009db4 <lsm6dsl_read_reg>
 800a3da:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d147      	bne.n	800a472 <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 800a3e2:	787b      	ldrb	r3, [r7, #1]
 800a3e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	7e3b      	ldrb	r3, [r7, #24]
 800a3ec:	f362 0300 	bfi	r3, r2, #0, #1
 800a3f0:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 800a3f2:	787b      	ldrb	r3, [r7, #1]
 800a3f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	7e3b      	ldrb	r3, [r7, #24]
 800a3fc:	f362 0341 	bfi	r3, r2, #1, #1
 800a400:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 800a402:	787b      	ldrb	r3, [r7, #1]
 800a404:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	7e3b      	ldrb	r3, [r7, #24]
 800a40c:	f362 0382 	bfi	r3, r2, #2, #1
 800a410:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 800a412:	787b      	ldrb	r3, [r7, #1]
 800a414:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	7e3b      	ldrb	r3, [r7, #24]
 800a41c:	f362 03c3 	bfi	r3, r2, #3, #1
 800a420:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 800a422:	787b      	ldrb	r3, [r7, #1]
 800a424:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	7e3b      	ldrb	r3, [r7, #24]
 800a42c:	f362 1304 	bfi	r3, r2, #4, #1
 800a430:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 800a432:	787b      	ldrb	r3, [r7, #1]
 800a434:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	7e3b      	ldrb	r3, [r7, #24]
 800a43c:	f362 1345 	bfi	r3, r2, #5, #1
 800a440:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 800a442:	787b      	ldrb	r3, [r7, #1]
 800a444:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	7e3b      	ldrb	r3, [r7, #24]
 800a44c:	f362 1386 	bfi	r3, r2, #6, #1
 800a450:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 800a452:	787b      	ldrb	r3, [r7, #1]
 800a454:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	7e3b      	ldrb	r3, [r7, #24]
 800a45c:	f362 13c7 	bfi	r3, r2, #7, #1
 800a460:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800a462:	f107 0218 	add.w	r2, r7, #24
 800a466:	2301      	movs	r3, #1
 800a468:	215e      	movs	r1, #94	; 0x5e
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff fcba 	bl	8009de4 <lsm6dsl_write_reg>
 800a470:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	2b00      	cmp	r3, #0
 800a476:	d107      	bne.n	800a488 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800a478:	f107 0210 	add.w	r2, r7, #16
 800a47c:	2301      	movs	r3, #1
 800a47e:	2113      	movs	r1, #19
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff fc97 	bl	8009db4 <lsm6dsl_read_reg>
 800a486:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10f      	bne.n	800a4ae <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 800a48e:	78bb      	ldrb	r3, [r7, #2]
 800a490:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a494:	b2da      	uxtb	r2, r3
 800a496:	7c3b      	ldrb	r3, [r7, #16]
 800a498:	f362 1304 	bfi	r3, r2, #4, #1
 800a49c:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800a49e:	f107 0210 	add.w	r2, r7, #16
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	2113      	movs	r1, #19
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff fc9c 	bl	8009de4 <lsm6dsl_write_reg>
 800a4ac:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d107      	bne.n	800a4c4 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800a4b4:	f107 0220 	add.w	r2, r7, #32
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	211a      	movs	r1, #26
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff fc79 	bl	8009db4 <lsm6dsl_read_reg>
 800a4c2:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d111      	bne.n	800a4ee <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 800a4ca:	78bb      	ldrb	r3, [r7, #2]
 800a4cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a4d6:	f362 13c7 	bfi	r3, r2, #7, #1
 800a4da:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800a4de:	f107 0220 	add.w	r2, r7, #32
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	211a      	movs	r1, #26
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff fc7c 	bl	8009de4 <lsm6dsl_write_reg>
 800a4ec:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d158      	bne.n	800a5a6 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800a4f4:	f107 020c 	add.w	r2, r7, #12
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	2158      	movs	r1, #88	; 0x58
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff fc59 	bl	8009db4 <lsm6dsl_read_reg>
 800a502:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 800a504:	787b      	ldrb	r3, [r7, #1]
 800a506:	f003 0304 	and.w	r3, r3, #4
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d141      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 800a510:	787b      	ldrb	r3, [r7, #1]
 800a512:	f003 0310 	and.w	r3, r3, #16
 800a516:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d13b      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 800a51c:	787b      	ldrb	r3, [r7, #1]
 800a51e:	f003 0320 	and.w	r3, r3, #32
 800a522:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800a524:	2b00      	cmp	r3, #0
 800a526:	d135      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 800a528:	787b      	ldrb	r3, [r7, #1]
 800a52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52e:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800a530:	2b00      	cmp	r3, #0
 800a532:	d12f      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800a534:	787b      	ldrb	r3, [r7, #1]
 800a536:	f003 0308 	and.w	r3, r3, #8
 800a53a:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d129      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 800a540:	787b      	ldrb	r3, [r7, #1]
 800a542:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a546:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d123      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 800a54c:	7d3b      	ldrb	r3, [r7, #20]
 800a54e:	f003 0304 	and.w	r3, r3, #4
 800a552:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 800a554:	2b00      	cmp	r3, #0
 800a556:	d11d      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 800a558:	7d3b      	ldrb	r3, [r7, #20]
 800a55a:	f003 0310 	and.w	r3, r3, #16
 800a55e:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800a560:	2b00      	cmp	r3, #0
 800a562:	d117      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800a564:	7d3b      	ldrb	r3, [r7, #20]
 800a566:	f003 0320 	and.w	r3, r3, #32
 800a56a:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d111      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800a570:	7d3b      	ldrb	r3, [r7, #20]
 800a572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a576:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10b      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 800a57c:	7d3b      	ldrb	r3, [r7, #20]
 800a57e:	f003 0308 	and.w	r3, r3, #8
 800a582:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800a584:	2b00      	cmp	r3, #0
 800a586:	d105      	bne.n	800a594 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 800a588:	7d3b      	ldrb	r3, [r7, #20]
 800a58a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a58e:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800a590:	2b00      	cmp	r3, #0
 800a592:	d004      	beq.n	800a59e <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800a594:	7b3b      	ldrb	r3, [r7, #12]
 800a596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59a:	733b      	strb	r3, [r7, #12]
 800a59c:	e003      	b.n	800a5a6 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 800a59e:	7b3b      	ldrb	r3, [r7, #12]
 800a5a0:	f36f 13c7 	bfc	r3, #7, #1
 800a5a4:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d107      	bne.n	800a5bc <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800a5ac:	f107 020c 	add.w	r2, r7, #12
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	2158      	movs	r1, #88	; 0x58
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff fc15 	bl	8009de4 <lsm6dsl_write_reg>
 800a5ba:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3728      	adds	r7, #40	; 0x28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b088      	sub	sp, #32
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800a5d0:	f107 0214 	add.w	r2, r7, #20
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	210d      	movs	r1, #13
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fbeb 	bl	8009db4 <lsm6dsl_read_reg>
 800a5de:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f040 80c0 	bne.w	800a768 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 800a5e8:	7d3b      	ldrb	r3, [r7, #20]
 800a5ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a5ee:	b2d9      	uxtb	r1, r3
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	7813      	ldrb	r3, [r2, #0]
 800a5f4:	f361 0300 	bfi	r3, r1, #0, #1
 800a5f8:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 800a5fa:	7d3b      	ldrb	r3, [r7, #20]
 800a5fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a600:	b2d9      	uxtb	r1, r3
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	7813      	ldrb	r3, [r2, #0]
 800a606:	f361 0341 	bfi	r3, r1, #1, #1
 800a60a:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 800a60c:	7d3b      	ldrb	r3, [r7, #20]
 800a60e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a612:	b2d9      	uxtb	r1, r3
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	7813      	ldrb	r3, [r2, #0]
 800a618:	f361 0382 	bfi	r3, r1, #2, #1
 800a61c:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 800a61e:	7d3b      	ldrb	r3, [r7, #20]
 800a620:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a624:	b2d9      	uxtb	r1, r3
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	7813      	ldrb	r3, [r2, #0]
 800a62a:	f361 03c3 	bfi	r3, r1, #3, #1
 800a62e:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800a630:	7d3b      	ldrb	r3, [r7, #20]
 800a632:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a636:	b2d9      	uxtb	r1, r3
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	7813      	ldrb	r3, [r2, #0]
 800a63c:	f361 1304 	bfi	r3, r1, #4, #1
 800a640:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800a642:	7d3b      	ldrb	r3, [r7, #20]
 800a644:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a648:	b2d9      	uxtb	r1, r3
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	7813      	ldrb	r3, [r2, #0]
 800a64e:	f361 1345 	bfi	r3, r1, #5, #1
 800a652:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800a654:	7d3b      	ldrb	r3, [r7, #20]
 800a656:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a65a:	b2d9      	uxtb	r1, r3
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	7813      	ldrb	r3, [r2, #0]
 800a660:	f361 1386 	bfi	r3, r1, #6, #1
 800a664:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 800a666:	7d3b      	ldrb	r3, [r7, #20]
 800a668:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a66c:	b2d9      	uxtb	r1, r3
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	7813      	ldrb	r3, [r2, #0]
 800a672:	f361 13c7 	bfi	r3, r1, #7, #1
 800a676:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800a678:	f107 0210 	add.w	r2, r7, #16
 800a67c:	2301      	movs	r3, #1
 800a67e:	215e      	movs	r1, #94	; 0x5e
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff fb97 	bl	8009db4 <lsm6dsl_read_reg>
 800a686:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d16c      	bne.n	800a768 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 800a68e:	7c3b      	ldrb	r3, [r7, #16]
 800a690:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a694:	b2d9      	uxtb	r1, r3
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	7853      	ldrb	r3, [r2, #1]
 800a69a:	f361 0300 	bfi	r3, r1, #0, #1
 800a69e:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 800a6a0:	7c3b      	ldrb	r3, [r7, #16]
 800a6a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a6a6:	b2d9      	uxtb	r1, r3
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	7853      	ldrb	r3, [r2, #1]
 800a6ac:	f361 0341 	bfi	r3, r1, #1, #1
 800a6b0:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 800a6b2:	7c3b      	ldrb	r3, [r7, #16]
 800a6b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a6b8:	b2d9      	uxtb	r1, r3
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	7853      	ldrb	r3, [r2, #1]
 800a6be:	f361 0382 	bfi	r3, r1, #2, #1
 800a6c2:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 800a6c4:	7c3b      	ldrb	r3, [r7, #16]
 800a6c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a6ca:	b2d9      	uxtb	r1, r3
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	7853      	ldrb	r3, [r2, #1]
 800a6d0:	f361 03c3 	bfi	r3, r1, #3, #1
 800a6d4:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 800a6d6:	7c3b      	ldrb	r3, [r7, #16]
 800a6d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a6dc:	b2d9      	uxtb	r1, r3
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	7853      	ldrb	r3, [r2, #1]
 800a6e2:	f361 1304 	bfi	r3, r1, #4, #1
 800a6e6:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 800a6e8:	7c3b      	ldrb	r3, [r7, #16]
 800a6ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a6ee:	b2d9      	uxtb	r1, r3
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	7853      	ldrb	r3, [r2, #1]
 800a6f4:	f361 1345 	bfi	r3, r1, #5, #1
 800a6f8:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 800a6fa:	7c3b      	ldrb	r3, [r7, #16]
 800a6fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a700:	b2d9      	uxtb	r1, r3
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	7853      	ldrb	r3, [r2, #1]
 800a706:	f361 1386 	bfi	r3, r1, #6, #1
 800a70a:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 800a70c:	7c3b      	ldrb	r3, [r7, #16]
 800a70e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a712:	b2d9      	uxtb	r1, r3
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	7853      	ldrb	r3, [r2, #1]
 800a718:	f361 13c7 	bfi	r3, r1, #7, #1
 800a71c:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800a71e:	f107 020c 	add.w	r2, r7, #12
 800a722:	2301      	movs	r3, #1
 800a724:	2113      	movs	r1, #19
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff fb44 	bl	8009db4 <lsm6dsl_read_reg>
 800a72c:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d119      	bne.n	800a768 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800a734:	7b3b      	ldrb	r3, [r7, #12]
 800a736:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a73a:	b2d9      	uxtb	r1, r3
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	7893      	ldrb	r3, [r2, #2]
 800a740:	f361 0300 	bfi	r3, r1, #0, #1
 800a744:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800a746:	f107 0218 	add.w	r2, r7, #24
 800a74a:	2301      	movs	r3, #1
 800a74c:	211a      	movs	r1, #26
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff fb30 	bl	8009db4 <lsm6dsl_read_reg>
 800a754:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 800a756:	7e3b      	ldrb	r3, [r7, #24]
 800a758:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a75c:	b2d9      	uxtb	r1, r3
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	7893      	ldrb	r3, [r2, #2]
 800a762:	f361 0300 	bfi	r3, r1, #0, #1
 800a766:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 800a768:	69fb      	ldr	r3, [r7, #28]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3720      	adds	r7, #32
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <lsm6dsl_pin_polarity_set>:
  * @param  val    Change the values of h_lactive in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_polarity_set(stmdev_ctx_t *ctx, lsm6dsl_h_lactive_t val)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	460b      	mov	r3, r1
 800a77c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a77e:	f107 0208 	add.w	r2, r7, #8
 800a782:	2301      	movs	r3, #1
 800a784:	2112      	movs	r1, #18
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f7ff fb14 	bl	8009db4 <lsm6dsl_read_reg>
 800a78c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10f      	bne.n	800a7b4 <lsm6dsl_pin_polarity_set+0x42>
    ctrl3_c.h_lactive = (uint8_t) val;
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	7a3b      	ldrb	r3, [r7, #8]
 800a79e:	f362 1345 	bfi	r3, r2, #5, #1
 800a7a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a7a4:	f107 0208 	add.w	r2, r7, #8
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	2112      	movs	r1, #18
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff fb19 	bl	8009de4 <lsm6dsl_write_reg>
 800a7b2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b086      	sub	sp, #24
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 800a7ca:	f107 020c 	add.w	r2, r7, #12
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	2107      	movs	r1, #7
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff faee 	bl	8009db4 <lsm6dsl_read_reg>
 800a7d8:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d11f      	bne.n	800a820 <lsm6dsl_fifo_watermark_set+0x62>
    fifo_ctrl1.fth = (uint8_t) (0x00FFU & val);
 800a7e0:	887b      	ldrh	r3, [r7, #2]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t) (( 0x0700U & val ) >> 8);
 800a7e6:	887b      	ldrh	r3, [r7, #2]
 800a7e8:	0a1b      	lsrs	r3, r3, #8
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	f003 0307 	and.w	r3, r3, #7
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	7b3b      	ldrb	r3, [r7, #12]
 800a7f4:	f362 0302 	bfi	r3, r2, #0, #3
 800a7f8:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 800a7fa:	f107 0210 	add.w	r2, r7, #16
 800a7fe:	2301      	movs	r3, #1
 800a800:	2106      	movs	r1, #6
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff faee 	bl	8009de4 <lsm6dsl_write_reg>
 800a808:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d107      	bne.n	800a820 <lsm6dsl_fifo_watermark_set+0x62>
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 800a810:	f107 020c 	add.w	r2, r7, #12
 800a814:	2301      	movs	r3, #1
 800a816:	2107      	movs	r1, #7
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff fae3 	bl	8009de4 <lsm6dsl_write_reg>
 800a81e:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
    }
  }
  return ret;
 800a820:	697b      	ldr	r3, [r7, #20]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <lsm6dsl_fifo_watermark_get>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b086      	sub	sp, #24
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 800a834:	f107 0210 	add.w	r2, r7, #16
 800a838:	2301      	movs	r3, #1
 800a83a:	2106      	movs	r1, #6
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff fab9 	bl	8009db4 <lsm6dsl_read_reg>
 800a842:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d107      	bne.n	800a85a <lsm6dsl_fifo_watermark_get+0x30>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 800a84a:	f107 020c 	add.w	r2, r7, #12
 800a84e:	2301      	movs	r3, #1
 800a850:	2107      	movs	r1, #7
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff faae 	bl	8009db4 <lsm6dsl_read_reg>
 800a858:	6178      	str	r0, [r7, #20]
  }
  *val = ((uint16_t)fifo_ctrl2.fth << 8) + (uint16_t)fifo_ctrl1.fth;
 800a85a:	7b3b      	ldrb	r3, [r7, #12]
 800a85c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a860:	b2db      	uxtb	r3, r3
 800a862:	b29b      	uxth	r3, r3
 800a864:	021b      	lsls	r3, r3, #8
 800a866:	b29a      	uxth	r2, r3
 800a868:	7c3b      	ldrb	r3, [r7, #16]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	4413      	add	r3, r2
 800a86e:	b29a      	uxth	r2, r3
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	801a      	strh	r2, [r3, #0]

  return ret;
 800a874:	697b      	ldr	r3, [r7, #20]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <lsm6dsl_fifo_data_level_get>:
  *                BDU bit.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b086      	sub	sp, #24
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_status1_t fifo_status1;
  lsm6dsl_fifo_status2_t fifo_status2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS1,
 800a888:	f107 0210 	add.w	r2, r7, #16
 800a88c:	2301      	movs	r3, #1
 800a88e:	213a      	movs	r1, #58	; 0x3a
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fa8f 	bl	8009db4 <lsm6dsl_read_reg>
 800a896:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&fifo_status1, 1);
  if(ret == 0){
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d114      	bne.n	800a8c8 <lsm6dsl_fifo_data_level_get+0x4a>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS2,
 800a89e:	f107 020c 	add.w	r2, r7, #12
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	213b      	movs	r1, #59	; 0x3b
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fa84 	bl	8009db4 <lsm6dsl_read_reg>
 800a8ac:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_status2, 1);
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 800a8ae:	7b3b      	ldrb	r3, [r7, #12]
 800a8b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	021b      	lsls	r3, r3, #8
 800a8ba:	b29a      	uxth	r2, r3
             (uint16_t) fifo_status1.diff_fifo;
 800a8bc:	7c3b      	ldrb	r3, [r7, #16]
 800a8be:	b29b      	uxth	r3, r3
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 800a8c0:	4413      	add	r3, r2
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800a8c8:	697b      	ldr	r3, [r7, #20]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800a8de:	f107 0208 	add.w	r2, r7, #8
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	2108      	movs	r1, #8
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff fa64 	bl	8009db4 <lsm6dsl_read_reg>
 800a8ec:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10f      	bne.n	800a914 <lsm6dsl_fifo_xl_batch_set+0x42>
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	7a3b      	ldrb	r3, [r7, #8]
 800a8fe:	f362 0302 	bfi	r3, r2, #0, #3
 800a902:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 800a904:	f107 0208 	add.w	r2, r7, #8
 800a908:	2301      	movs	r3, #1
 800a90a:	2108      	movs	r1, #8
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff fa69 	bl	8009de4 <lsm6dsl_write_reg>
 800a912:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 800a914:	68fb      	ldr	r3, [r7, #12]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
	...

0800a920 <lsm6dsl_fifo_xl_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t *val)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800a92a:	f107 0208 	add.w	r2, r7, #8
 800a92e:	2301      	movs	r3, #1
 800a930:	2108      	movs	r1, #8
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7ff fa3e 	bl	8009db4 <lsm6dsl_read_reg>
 800a938:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_xl) {
 800a93a:	7a3b      	ldrb	r3, [r7, #8]
 800a93c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b07      	cmp	r3, #7
 800a944:	d832      	bhi.n	800a9ac <lsm6dsl_fifo_xl_batch_get+0x8c>
 800a946:	a201      	add	r2, pc, #4	; (adr r2, 800a94c <lsm6dsl_fifo_xl_batch_get+0x2c>)
 800a948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94c:	0800a96d 	.word	0x0800a96d
 800a950:	0800a975 	.word	0x0800a975
 800a954:	0800a97d 	.word	0x0800a97d
 800a958:	0800a985 	.word	0x0800a985
 800a95c:	0800a98d 	.word	0x0800a98d
 800a960:	0800a995 	.word	0x0800a995
 800a964:	0800a99d 	.word	0x0800a99d
 800a968:	0800a9a5 	.word	0x0800a9a5
    case LSM6DSL_FIFO_XL_DISABLE:
      *val = LSM6DSL_FIFO_XL_DISABLE;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2200      	movs	r2, #0
 800a970:	701a      	strb	r2, [r3, #0]
      break;
 800a972:	e01f      	b.n	800a9b4 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_NO_DEC:
      *val = LSM6DSL_FIFO_XL_NO_DEC;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	2201      	movs	r2, #1
 800a978:	701a      	strb	r2, [r3, #0]
      break;
 800a97a:	e01b      	b.n	800a9b4 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_2:
      *val = LSM6DSL_FIFO_XL_DEC_2;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	2202      	movs	r2, #2
 800a980:	701a      	strb	r2, [r3, #0]
      break;
 800a982:	e017      	b.n	800a9b4 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_3:
      *val = LSM6DSL_FIFO_XL_DEC_3;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2203      	movs	r2, #3
 800a988:	701a      	strb	r2, [r3, #0]
      break;
 800a98a:	e013      	b.n	800a9b4 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_4:
      *val = LSM6DSL_FIFO_XL_DEC_4;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2204      	movs	r2, #4
 800a990:	701a      	strb	r2, [r3, #0]
      break;
 800a992:	e00f      	b.n	800a9b4 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_8:
      *val = LSM6DSL_FIFO_XL_DEC_8;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2205      	movs	r2, #5
 800a998:	701a      	strb	r2, [r3, #0]
      break;
 800a99a:	e00b      	b.n	800a9b4 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_16:
      *val = LSM6DSL_FIFO_XL_DEC_16;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2206      	movs	r2, #6
 800a9a0:	701a      	strb	r2, [r3, #0]
      break;
 800a9a2:	e007      	b.n	800a9b4 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_32:
      *val = LSM6DSL_FIFO_XL_DEC_32;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2207      	movs	r2, #7
 800a9a8:	701a      	strb	r2, [r3, #0]
      break;
 800a9aa:	e003      	b.n	800a9b4 <lsm6dsl_fifo_xl_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_XL_DEC_ND;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2208      	movs	r2, #8
 800a9b0:	701a      	strb	r2, [r3, #0]
      break;
 800a9b2:	bf00      	nop
  }

  return ret;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop

0800a9c0 <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800a9cc:	f107 0208 	add.w	r2, r7, #8
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	2108      	movs	r1, #8
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff f9ed 	bl	8009db4 <lsm6dsl_read_reg>
 800a9da:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10f      	bne.n	800aa02 <lsm6dsl_fifo_gy_batch_set+0x42>
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	7a3b      	ldrb	r3, [r7, #8]
 800a9ec:	f362 03c5 	bfi	r3, r2, #3, #3
 800a9f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800a9f2:	f107 0208 	add.w	r2, r7, #8
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	2108      	movs	r1, #8
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff f9f2 	bl	8009de4 <lsm6dsl_write_reg>
 800aa00:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800aa02:	68fb      	ldr	r3, [r7, #12]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <lsm6dsl_fifo_gy_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t *val)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800aa16:	f107 0208 	add.w	r2, r7, #8
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	2108      	movs	r1, #8
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff f9c8 	bl	8009db4 <lsm6dsl_read_reg>
 800aa24:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_gyro) {
 800aa26:	7a3b      	ldrb	r3, [r7, #8]
 800aa28:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b07      	cmp	r3, #7
 800aa30:	d832      	bhi.n	800aa98 <lsm6dsl_fifo_gy_batch_get+0x8c>
 800aa32:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <lsm6dsl_fifo_gy_batch_get+0x2c>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa59 	.word	0x0800aa59
 800aa3c:	0800aa61 	.word	0x0800aa61
 800aa40:	0800aa69 	.word	0x0800aa69
 800aa44:	0800aa71 	.word	0x0800aa71
 800aa48:	0800aa79 	.word	0x0800aa79
 800aa4c:	0800aa81 	.word	0x0800aa81
 800aa50:	0800aa89 	.word	0x0800aa89
 800aa54:	0800aa91 	.word	0x0800aa91
    case LSM6DSL_FIFO_GY_DISABLE:
      *val = LSM6DSL_FIFO_GY_DISABLE;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	701a      	strb	r2, [r3, #0]
      break;
 800aa5e:	e01f      	b.n	800aaa0 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_NO_DEC:
      *val = LSM6DSL_FIFO_GY_NO_DEC;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2201      	movs	r2, #1
 800aa64:	701a      	strb	r2, [r3, #0]
      break;
 800aa66:	e01b      	b.n	800aaa0 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_2:
      *val = LSM6DSL_FIFO_GY_DEC_2;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	701a      	strb	r2, [r3, #0]
      break;
 800aa6e:	e017      	b.n	800aaa0 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_3:
      *val = LSM6DSL_FIFO_GY_DEC_3;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2203      	movs	r2, #3
 800aa74:	701a      	strb	r2, [r3, #0]
      break;
 800aa76:	e013      	b.n	800aaa0 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_4:
      *val = LSM6DSL_FIFO_GY_DEC_4;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2204      	movs	r2, #4
 800aa7c:	701a      	strb	r2, [r3, #0]
      break;
 800aa7e:	e00f      	b.n	800aaa0 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_8:
      *val = LSM6DSL_FIFO_GY_DEC_8;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	2205      	movs	r2, #5
 800aa84:	701a      	strb	r2, [r3, #0]
      break;
 800aa86:	e00b      	b.n	800aaa0 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_16:
      *val = LSM6DSL_FIFO_GY_DEC_16;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2206      	movs	r2, #6
 800aa8c:	701a      	strb	r2, [r3, #0]
      break;
 800aa8e:	e007      	b.n	800aaa0 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_32:
      *val = LSM6DSL_FIFO_GY_DEC_32;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2207      	movs	r2, #7
 800aa94:	701a      	strb	r2, [r3, #0]
      break;
 800aa96:	e003      	b.n	800aaa0 <lsm6dsl_fifo_gy_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_GY_DEC_ND;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2208      	movs	r2, #8
 800aa9c:	701a      	strb	r2, [r3, #0]
      break;
 800aa9e:	bf00      	nop
  }

  return ret;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop

0800aaac <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800aab8:	f107 0208 	add.w	r2, r7, #8
 800aabc:	2301      	movs	r3, #1
 800aabe:	210a      	movs	r1, #10
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff f977 	bl	8009db4 <lsm6dsl_read_reg>
 800aac6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10f      	bne.n	800aaee <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800aace:	78fb      	ldrb	r3, [r7, #3]
 800aad0:	f003 0307 	and.w	r3, r3, #7
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	7a3b      	ldrb	r3, [r7, #8]
 800aad8:	f362 0302 	bfi	r3, r2, #0, #3
 800aadc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800aade:	f107 0208 	add.w	r2, r7, #8
 800aae2:	2301      	movs	r3, #1
 800aae4:	210a      	movs	r1, #10
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff f97c 	bl	8009de4 <lsm6dsl_write_reg>
 800aaec:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800aaee:	68fb      	ldr	r3, [r7, #12]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <lsm6dsl_fifo_mode_get>:
  * @param  val    Get the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_get(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t *val)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800ab02:	f107 0208 	add.w	r2, r7, #8
 800ab06:	2301      	movs	r3, #1
 800ab08:	210a      	movs	r1, #10
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7ff f952 	bl	8009db4 <lsm6dsl_read_reg>
 800ab10:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.fifo_mode) {
 800ab12:	7a3b      	ldrb	r3, [r7, #8]
 800ab14:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b06      	cmp	r3, #6
 800ab1c:	d824      	bhi.n	800ab68 <lsm6dsl_fifo_mode_get+0x70>
 800ab1e:	a201      	add	r2, pc, #4	; (adr r2, 800ab24 <lsm6dsl_fifo_mode_get+0x2c>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab41 	.word	0x0800ab41
 800ab28:	0800ab49 	.word	0x0800ab49
 800ab2c:	0800ab69 	.word	0x0800ab69
 800ab30:	0800ab51 	.word	0x0800ab51
 800ab34:	0800ab59 	.word	0x0800ab59
 800ab38:	0800ab69 	.word	0x0800ab69
 800ab3c:	0800ab61 	.word	0x0800ab61
    case LSM6DSL_BYPASS_MODE:
      *val = LSM6DSL_BYPASS_MODE;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2200      	movs	r2, #0
 800ab44:	701a      	strb	r2, [r3, #0]
      break;
 800ab46:	e013      	b.n	800ab70 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_FIFO_MODE:
      *val = LSM6DSL_FIFO_MODE;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	701a      	strb	r2, [r3, #0]
      break;
 800ab4e:	e00f      	b.n	800ab70 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_TO_FIFO_MODE:
      *val = LSM6DSL_STREAM_TO_FIFO_MODE;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2203      	movs	r2, #3
 800ab54:	701a      	strb	r2, [r3, #0]
      break;
 800ab56:	e00b      	b.n	800ab70 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
      *val = LSM6DSL_BYPASS_TO_STREAM_MODE;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2204      	movs	r2, #4
 800ab5c:	701a      	strb	r2, [r3, #0]
      break;
 800ab5e:	e007      	b.n	800ab70 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_MODE:
      *val = LSM6DSL_STREAM_MODE;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2206      	movs	r2, #6
 800ab64:	701a      	strb	r2, [r3, #0]
      break;
 800ab66:	e003      	b.n	800ab70 <lsm6dsl_fifo_mode_get+0x78>
    default:
      *val = LSM6DSL_FIFO_MODE_ND;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2208      	movs	r2, #8
 800ab6c:	701a      	strb	r2, [r3, #0]
      break;
 800ab6e:	bf00      	nop
  }

  return ret;
 800ab70:	68fb      	ldr	r3, [r7, #12]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop

0800ab7c <lsm6dsl_fifo_data_rate_set>:
  * @param  val    Change the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t val)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800ab88:	f107 0208 	add.w	r2, r7, #8
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	210a      	movs	r1, #10
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff f90f 	bl	8009db4 <lsm6dsl_read_reg>
 800ab96:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10f      	bne.n	800abbe <lsm6dsl_fifo_data_rate_set+0x42>
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 800ab9e:	78fb      	ldrb	r3, [r7, #3]
 800aba0:	f003 030f 	and.w	r3, r3, #15
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	7a3b      	ldrb	r3, [r7, #8]
 800aba8:	f362 03c6 	bfi	r3, r2, #3, #4
 800abac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800abae:	f107 0208 	add.w	r2, r7, #8
 800abb2:	2301      	movs	r3, #1
 800abb4:	210a      	movs	r1, #10
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff f914 	bl	8009de4 <lsm6dsl_write_reg>
 800abbc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800abbe:	68fb      	ldr	r3, [r7, #12]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <lsm6dsl_fifo_data_rate_get>:
  * @param  val    Get the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t *val)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800abd2:	f107 0208 	add.w	r2, r7, #8
 800abd6:	2301      	movs	r3, #1
 800abd8:	210a      	movs	r1, #10
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff f8ea 	bl	8009db4 <lsm6dsl_read_reg>
 800abe0:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.odr_fifo) {
 800abe2:	7a3b      	ldrb	r3, [r7, #8]
 800abe4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b0a      	cmp	r3, #10
 800abec:	d844      	bhi.n	800ac78 <lsm6dsl_fifo_data_rate_get+0xb0>
 800abee:	a201      	add	r2, pc, #4	; (adr r2, 800abf4 <lsm6dsl_fifo_data_rate_get+0x2c>)
 800abf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf4:	0800ac21 	.word	0x0800ac21
 800abf8:	0800ac29 	.word	0x0800ac29
 800abfc:	0800ac31 	.word	0x0800ac31
 800ac00:	0800ac39 	.word	0x0800ac39
 800ac04:	0800ac41 	.word	0x0800ac41
 800ac08:	0800ac49 	.word	0x0800ac49
 800ac0c:	0800ac51 	.word	0x0800ac51
 800ac10:	0800ac59 	.word	0x0800ac59
 800ac14:	0800ac61 	.word	0x0800ac61
 800ac18:	0800ac69 	.word	0x0800ac69
 800ac1c:	0800ac71 	.word	0x0800ac71
    case LSM6DSL_FIFO_DISABLE:
      *val = LSM6DSL_FIFO_DISABLE;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2200      	movs	r2, #0
 800ac24:	701a      	strb	r2, [r3, #0]
      break;
 800ac26:	e02b      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_12Hz5:
      *val = LSM6DSL_FIFO_12Hz5;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	701a      	strb	r2, [r3, #0]
      break;
 800ac2e:	e027      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_26Hz:
      *val = LSM6DSL_FIFO_26Hz;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2202      	movs	r2, #2
 800ac34:	701a      	strb	r2, [r3, #0]
      break;
 800ac36:	e023      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_52Hz:
      *val = LSM6DSL_FIFO_52Hz;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2203      	movs	r2, #3
 800ac3c:	701a      	strb	r2, [r3, #0]
      break;
 800ac3e:	e01f      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_104Hz:
      *val = LSM6DSL_FIFO_104Hz;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2204      	movs	r2, #4
 800ac44:	701a      	strb	r2, [r3, #0]
      break;
 800ac46:	e01b      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_208Hz:
      *val = LSM6DSL_FIFO_208Hz;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2205      	movs	r2, #5
 800ac4c:	701a      	strb	r2, [r3, #0]
      break;
 800ac4e:	e017      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_416Hz:
      *val = LSM6DSL_FIFO_416Hz;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	2206      	movs	r2, #6
 800ac54:	701a      	strb	r2, [r3, #0]
      break;
 800ac56:	e013      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_833Hz:
      *val = LSM6DSL_FIFO_833Hz;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2207      	movs	r2, #7
 800ac5c:	701a      	strb	r2, [r3, #0]
      break;
 800ac5e:	e00f      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_1k66Hz:
      *val = LSM6DSL_FIFO_1k66Hz;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2208      	movs	r2, #8
 800ac64:	701a      	strb	r2, [r3, #0]
      break;
 800ac66:	e00b      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_3k33Hz:
      *val = LSM6DSL_FIFO_3k33Hz;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2209      	movs	r2, #9
 800ac6c:	701a      	strb	r2, [r3, #0]
      break;
 800ac6e:	e007      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_6k66Hz:
      *val = LSM6DSL_FIFO_6k66Hz;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	220a      	movs	r2, #10
 800ac74:	701a      	strb	r2, [r3, #0]
      break;
 800ac76:	e003      	b.n	800ac80 <lsm6dsl_fifo_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_FIFO_RATE_ND;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	220b      	movs	r2, #11
 800ac7c:	701a      	strb	r2, [r3, #0]
      break;
 800ac7e:	bf00      	nop
  }

  return ret;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop

0800ac8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ac90:	f7f6 f912 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ac94:	f000 f83c 	bl	800ad10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ac98:	f7fe fae4 	bl	8009264 <MX_GPIO_Init>
  MX_DMA_Init();
 800ac9c:	f7fe f9c8 	bl	8009030 <MX_DMA_Init>
  MX_CRC_Init();
 800aca0:	f7fe f990 	bl	8008fc4 <MX_CRC_Init>
  MX_RTC_Init();
 800aca4:	f000 f8d0 	bl	800ae48 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800aca8:	f000 fd26 	bl	800b6f8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800acac:	f000 fc52 	bl	800b554 <MX_TIM3_Init>
  MX_I2C1_Init();
 800acb0:	f7fe fb5a 	bl	8009368 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800acb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800acb8:	4813      	ldr	r0, [pc, #76]	; (800ad08 <main+0x7c>)
 800acba:	f7fa ff89 	bl	8005bd0 <HAL_RTC_DeactivateAlarm>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800acbe:	4812      	ldr	r0, [pc, #72]	; (800ad08 <main+0x7c>)
 800acc0:	f7fb f9d8 	bl	8006074 <HAL_RTCEx_DeactivateWakeUpTimer>

  SYSTEM_DEBUG_wakeupStandbyMode();
 800acc4:	f000 fbde 	bl	800b484 <SYSTEM_DEBUG_wakeupStandbyMode>

#ifdef IWDG_ENABLE
  MX_IWDG_Init();
#endif

  COM_halUartReceiveDma();
 800acc8:	f7fd ff14 	bl	8008af4 <COM_halUartReceiveDma>

  SYSTEM_DEBUG_assertMsgPrint();
 800accc:	f000 fa7a 	bl	800b1c4 <SYSTEM_DEBUG_assertMsgPrint>

  LSM6DSL_init();
 800acd0:	f7fe fc0e 	bl	80094f0 <LSM6DSL_init>

  SYSTEM_DEBUG_printResetCause();
 800acd4:	f000 faa0 	bl	800b218 <SYSTEM_DEBUG_printResetCause>

  COM_uartPrint(HELLO_WORLD);
 800acd8:	480c      	ldr	r0, [pc, #48]	; (800ad0c <main+0x80>)
 800acda:	f7fd fee3 	bl	8008aa4 <COM_uartPrint>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	SYSTEM_DEBUG_enterSleepMode();
 800acde:	f000 fb5d 	bl	800b39c <SYSTEM_DEBUG_enterSleepMode>

#ifdef IWDG_ENABLE
	  kickDog();
#endif

	if (COM_getReadyCommandFlag())
 800ace2:	f7fd fe9d 	bl	8008a20 <COM_getReadyCommandFlag>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d003      	beq.n	800acf4 <main+0x68>
	{
		COM_readyCommandProcess();
 800acec:	f7fd fec0 	bl	8008a70 <COM_readyCommandProcess>
		COM_setReadyCommandFlagOff();
 800acf0:	f7fd feb0 	bl	8008a54 <COM_setReadyCommandFlagOff>
	}

	if (LSM6DSL_getInterruptFlag())
 800acf4:	f7ff f83a 	bl	8009d6c <LSM6DSL_getInterruptFlag>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0ef      	beq.n	800acde <main+0x52>
	{
		LSM6DSL_processHanlder();
 800acfe:	f7fe fba9 	bl	8009454 <LSM6DSL_processHanlder>
		LSM6DSL_setInterruptFlagOff();
 800ad02:	f7ff f84b 	bl	8009d9c <LSM6DSL_setInterruptFlagOff>
	SYSTEM_DEBUG_enterSleepMode();
 800ad06:	e7ea      	b.n	800acde <main+0x52>
 800ad08:	20000764 	.word	0x20000764
 800ad0c:	0800e24c 	.word	0x0800e24c

0800ad10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b09a      	sub	sp, #104	; 0x68
 800ad14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ad16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ad1a:	2230      	movs	r2, #48	; 0x30
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 fe20 	bl	800b964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ad24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	605a      	str	r2, [r3, #4]
 800ad2e:	609a      	str	r2, [r3, #8]
 800ad30:	60da      	str	r2, [r3, #12]
 800ad32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ad34:	f107 030c 	add.w	r3, r7, #12
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	605a      	str	r2, [r3, #4]
 800ad3e:	609a      	str	r2, [r3, #8]
 800ad40:	60da      	str	r2, [r3, #12]
 800ad42:	611a      	str	r2, [r3, #16]
 800ad44:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad46:	2300      	movs	r3, #0
 800ad48:	60bb      	str	r3, [r7, #8]
 800ad4a:	4b32      	ldr	r3, [pc, #200]	; (800ae14 <SystemClock_Config+0x104>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	4a31      	ldr	r2, [pc, #196]	; (800ae14 <SystemClock_Config+0x104>)
 800ad50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad54:	6413      	str	r3, [r2, #64]	; 0x40
 800ad56:	4b2f      	ldr	r3, [pc, #188]	; (800ae14 <SystemClock_Config+0x104>)
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad5e:	60bb      	str	r3, [r7, #8]
 800ad60:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ad62:	2300      	movs	r3, #0
 800ad64:	607b      	str	r3, [r7, #4]
 800ad66:	4b2c      	ldr	r3, [pc, #176]	; (800ae18 <SystemClock_Config+0x108>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a2b      	ldr	r2, [pc, #172]	; (800ae18 <SystemClock_Config+0x108>)
 800ad6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	4b29      	ldr	r3, [pc, #164]	; (800ae18 <SystemClock_Config+0x108>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ad7a:	607b      	str	r3, [r7, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800ad7e:	230e      	movs	r3, #14
 800ad80:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ad82:	2301      	movs	r3, #1
 800ad84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ad86:	2301      	movs	r3, #1
 800ad88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ad8a:	2310      	movs	r3, #16
 800ad8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ad92:	2302      	movs	r3, #2
 800ad94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ad96:	2300      	movs	r3, #0
 800ad98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 800ad9a:	2310      	movs	r3, #16
 800ad9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 800ad9e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800ada2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800ada4:	2304      	movs	r3, #4
 800ada6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ada8:	2304      	movs	r3, #4
 800adaa:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800adac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7f9 f8d3 	bl	8003f5c <HAL_RCC_OscConfig>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800adbc:	f000 f82e 	bl	800ae1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800adc0:	230f      	movs	r3, #15
 800adc2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800adc4:	2302      	movs	r3, #2
 800adc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800adc8:	2300      	movs	r3, #0
 800adca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800adcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800add0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800add2:	2300      	movs	r3, #0
 800add4:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800add6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adda:	2102      	movs	r1, #2
 800addc:	4618      	mov	r0, r3
 800adde:	f7f9 fbdd 	bl	800459c <HAL_RCC_ClockConfig>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800ade8:	f000 f818 	bl	800ae1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800adec:	2302      	movs	r3, #2
 800adee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800adf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adf4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800adf6:	f107 030c 	add.w	r3, r7, #12
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7f9 fe68 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800ae06:	f000 f809 	bl	800ae1c <Error_Handler>
  }
}
 800ae0a:	bf00      	nop
 800ae0c:	3768      	adds	r7, #104	; 0x68
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	40023800 	.word	0x40023800
 800ae18:	40007000 	.word	0x40007000

0800ae1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	COM_uartPrint("Error");
 800ae20:	4801      	ldr	r0, [pc, #4]	; (800ae28 <Error_Handler+0xc>)
 800ae22:	f7fd fe3f 	bl	8008aa4 <COM_uartPrint>
	while(1);
 800ae26:	e7fe      	b.n	800ae26 <Error_Handler+0xa>
 800ae28:	0800e25c 	.word	0x0800e25c

0800ae2c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	SYSTEM_DEBUG_assertRecord(file, line);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f999 	bl	800b170 <SYSTEM_DEBUG_assertRecord>

  /* USER CODE END 6 */
}
 800ae3e:	bf00      	nop
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b090      	sub	sp, #64	; 0x40
 800ae4c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800ae4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	605a      	str	r2, [r3, #4]
 800ae58:	609a      	str	r2, [r3, #8]
 800ae5a:	60da      	str	r2, [r3, #12]
 800ae5c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800ae5e:	2300      	movs	r3, #0
 800ae60:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800ae62:	463b      	mov	r3, r7
 800ae64:	2228      	movs	r2, #40	; 0x28
 800ae66:	2100      	movs	r1, #0
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 fd7b 	bl	800b964 <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800ae6e:	4b40      	ldr	r3, [pc, #256]	; (800af70 <MX_RTC_Init+0x128>)
 800ae70:	4a40      	ldr	r2, [pc, #256]	; (800af74 <MX_RTC_Init+0x12c>)
 800ae72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ae74:	4b3e      	ldr	r3, [pc, #248]	; (800af70 <MX_RTC_Init+0x128>)
 800ae76:	2200      	movs	r2, #0
 800ae78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800ae7a:	4b3d      	ldr	r3, [pc, #244]	; (800af70 <MX_RTC_Init+0x128>)
 800ae7c:	227f      	movs	r2, #127	; 0x7f
 800ae7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800ae80:	4b3b      	ldr	r3, [pc, #236]	; (800af70 <MX_RTC_Init+0x128>)
 800ae82:	22ff      	movs	r2, #255	; 0xff
 800ae84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ae86:	4b3a      	ldr	r3, [pc, #232]	; (800af70 <MX_RTC_Init+0x128>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ae8c:	4b38      	ldr	r3, [pc, #224]	; (800af70 <MX_RTC_Init+0x128>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ae92:	4b37      	ldr	r3, [pc, #220]	; (800af70 <MX_RTC_Init+0x128>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800ae98:	4835      	ldr	r0, [pc, #212]	; (800af70 <MX_RTC_Init+0x128>)
 800ae9a:	f7fa f82d 	bl	8004ef8 <HAL_RTC_Init>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800aea4:	f7ff ffba 	bl	800ae1c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800aeba:	2300      	movs	r3, #0
 800aebc:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800aebe:	2300      	movs	r3, #0
 800aec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800aec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aec6:	2200      	movs	r2, #0
 800aec8:	4619      	mov	r1, r3
 800aeca:	4829      	ldr	r0, [pc, #164]	; (800af70 <MX_RTC_Init+0x128>)
 800aecc:	f7fa f8fa 	bl	80050c4 <HAL_RTC_SetTime>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800aed6:	f7ff ffa1 	bl	800ae1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800aeda:	2301      	movs	r3, #1
 800aedc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800aee0:	2301      	movs	r3, #1
 800aee2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 800aee6:	2301      	movs	r3, #1
 800aee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800aef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aef6:	2200      	movs	r2, #0
 800aef8:	4619      	mov	r1, r3
 800aefa:	481d      	ldr	r0, [pc, #116]	; (800af70 <MX_RTC_Init+0x128>)
 800aefc:	f7fa fa4e 	bl	800539c <HAL_RTC_SetDate>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800af06:	f7ff ff89 	bl	800ae1c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 800af12:	2301      	movs	r3, #1
 800af14:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800af1e:	2300      	movs	r3, #0
 800af20:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800af22:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800af26:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800af28:	2300      	movs	r3, #0
 800af2a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800af2c:	2300      	movs	r3, #0
 800af2e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800af30:	2301      	movs	r3, #1
 800af32:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800af36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800af3c:	463b      	mov	r3, r7
 800af3e:	2200      	movs	r2, #0
 800af40:	4619      	mov	r1, r3
 800af42:	480b      	ldr	r0, [pc, #44]	; (800af70 <MX_RTC_Init+0x128>)
 800af44:	f7fa fb5a 	bl	80055fc <HAL_RTC_SetAlarm_IT>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800af4e:	f7ff ff65 	bl	800ae1c <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800af52:	2200      	movs	r2, #0
 800af54:	2100      	movs	r1, #0
 800af56:	4806      	ldr	r0, [pc, #24]	; (800af70 <MX_RTC_Init+0x128>)
 800af58:	f7fa ffac 	bl	8005eb4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <MX_RTC_Init+0x11e>
  {
    Error_Handler();
 800af62:	f7ff ff5b 	bl	800ae1c <Error_Handler>
  }

}
 800af66:	bf00      	nop
 800af68:	3740      	adds	r7, #64	; 0x40
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20000764 	.word	0x20000764
 800af74:	40002800 	.word	0x40002800

0800af78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a0c      	ldr	r2, [pc, #48]	; (800afb8 <HAL_RTC_MspInit+0x40>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d112      	bne.n	800afb0 <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800af8a:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <HAL_RTC_MspInit+0x44>)
 800af8c:	2201      	movs	r2, #1
 800af8e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800af90:	2200      	movs	r2, #0
 800af92:	2100      	movs	r1, #0
 800af94:	2003      	movs	r0, #3
 800af96:	f7f6 f911 	bl	80011bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800af9a:	2003      	movs	r0, #3
 800af9c:	f7f6 f93a 	bl	8001214 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800afa0:	2200      	movs	r2, #0
 800afa2:	2100      	movs	r1, #0
 800afa4:	2029      	movs	r0, #41	; 0x29
 800afa6:	f7f6 f909 	bl	80011bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800afaa:	2029      	movs	r0, #41	; 0x29
 800afac:	f7f6 f932 	bl	8001214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	40002800 	.word	0x40002800
 800afbc:	42470e3c 	.word	0x42470e3c

0800afc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afc6:	2300      	movs	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]
 800afca:	4b10      	ldr	r3, [pc, #64]	; (800b00c <HAL_MspInit+0x4c>)
 800afcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afce:	4a0f      	ldr	r2, [pc, #60]	; (800b00c <HAL_MspInit+0x4c>)
 800afd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800afd4:	6453      	str	r3, [r2, #68]	; 0x44
 800afd6:	4b0d      	ldr	r3, [pc, #52]	; (800b00c <HAL_MspInit+0x4c>)
 800afd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afde:	607b      	str	r3, [r7, #4]
 800afe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800afe2:	2300      	movs	r3, #0
 800afe4:	603b      	str	r3, [r7, #0]
 800afe6:	4b09      	ldr	r3, [pc, #36]	; (800b00c <HAL_MspInit+0x4c>)
 800afe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afea:	4a08      	ldr	r2, [pc, #32]	; (800b00c <HAL_MspInit+0x4c>)
 800afec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aff0:	6413      	str	r3, [r2, #64]	; 0x40
 800aff2:	4b06      	ldr	r3, [pc, #24]	; (800b00c <HAL_MspInit+0x4c>)
 800aff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800affe:	2007      	movs	r0, #7
 800b000:	f7f6 f8bc 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	40023800 	.word	0x40023800

0800b010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b014:	bf00      	nop
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b01e:	b480      	push	{r7}
 800b020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b022:	e7fe      	b.n	800b022 <HardFault_Handler+0x4>

0800b024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b024:	b480      	push	{r7}
 800b026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b028:	e7fe      	b.n	800b028 <MemManage_Handler+0x4>

0800b02a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b02a:	b480      	push	{r7}
 800b02c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b02e:	e7fe      	b.n	800b02e <BusFault_Handler+0x4>

0800b030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b034:	e7fe      	b.n	800b034 <UsageFault_Handler+0x4>

0800b036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b036:	b480      	push	{r7}
 800b038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b03a:	bf00      	nop
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b044:	b480      	push	{r7}
 800b046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b048:	bf00      	nop
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b052:	b480      	push	{r7}
 800b054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b056:	bf00      	nop
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b064:	f7f5 ff7a 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b068:	bf00      	nop
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800b070:	4802      	ldr	r0, [pc, #8]	; (800b07c <RTC_WKUP_IRQHandler+0x10>)
 800b072:	f7fb f857 	bl	8006124 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800b076:	bf00      	nop
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20000764 	.word	0x20000764

0800b080 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800b084:	4802      	ldr	r0, [pc, #8]	; (800b090 <DMA1_Stream5_IRQHandler+0x10>)
 800b086:	f7f6 fbeb 	bl	8001860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800b08a:	bf00      	nop
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	200007c4 	.word	0x200007c4

0800b094 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800b098:	4802      	ldr	r0, [pc, #8]	; (800b0a4 <DMA1_Stream6_IRQHandler+0x10>)
 800b09a:	f7f6 fbe1 	bl	8001860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800b09e:	bf00      	nop
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	20000824 	.word	0x20000824

0800b0a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800b0ac:	2020      	movs	r0, #32
 800b0ae:	f7f7 fe29 	bl	8002d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b0b2:	bf00      	nop
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b0bc:	4802      	ldr	r0, [pc, #8]	; (800b0c8 <USART2_IRQHandler+0x10>)
 800b0be:	f7fc fdd9 	bl	8007c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b0c2:	bf00      	nop
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20000884 	.word	0x20000884

0800b0cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b0d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b0d4:	f7f7 fe16 	bl	8002d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b0d8:	bf00      	nop
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800b0e0:	4802      	ldr	r0, [pc, #8]	; (800b0ec <RTC_Alarm_IRQHandler+0x10>)
 800b0e2:	f7fa fe11 	bl	8005d08 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800b0e6:	bf00      	nop
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20000764 	.word	0x20000764

0800b0f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b0f8:	4b11      	ldr	r3, [pc, #68]	; (800b140 <_sbrk+0x50>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d102      	bne.n	800b106 <_sbrk+0x16>
		heap_end = &end;
 800b100:	4b0f      	ldr	r3, [pc, #60]	; (800b140 <_sbrk+0x50>)
 800b102:	4a10      	ldr	r2, [pc, #64]	; (800b144 <_sbrk+0x54>)
 800b104:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b106:	4b0e      	ldr	r3, [pc, #56]	; (800b140 <_sbrk+0x50>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <_sbrk+0x50>)
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4413      	add	r3, r2
 800b114:	466a      	mov	r2, sp
 800b116:	4293      	cmp	r3, r2
 800b118:	d907      	bls.n	800b12a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b11a:	f000 fbf9 	bl	800b910 <__errno>
 800b11e:	4602      	mov	r2, r0
 800b120:	230c      	movs	r3, #12
 800b122:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b124:	f04f 33ff 	mov.w	r3, #4294967295
 800b128:	e006      	b.n	800b138 <_sbrk+0x48>
	}

	heap_end += incr;
 800b12a:	4b05      	ldr	r3, [pc, #20]	; (800b140 <_sbrk+0x50>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4413      	add	r3, r2
 800b132:	4a03      	ldr	r2, [pc, #12]	; (800b140 <_sbrk+0x50>)
 800b134:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b136:	68fb      	ldr	r3, [r7, #12]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	200006d4 	.word	0x200006d4
 800b144:	200008c8 	.word	0x200008c8

0800b148 <__NVIC_SystemReset>:
{
 800b148:	b480      	push	{r7}
 800b14a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b14c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <__NVIC_SystemReset+0x20>)
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b158:	4903      	ldr	r1, [pc, #12]	; (800b168 <__NVIC_SystemReset+0x20>)
 800b15a:	4b04      	ldr	r3, [pc, #16]	; (800b16c <__NVIC_SystemReset+0x24>)
 800b15c:	4313      	orrs	r3, r2
 800b15e:	60cb      	str	r3, [r1, #12]
 800b160:	f3bf 8f4f 	dsb	sy
    __NOP();
 800b164:	bf00      	nop
 800b166:	e7fd      	b.n	800b164 <__NVIC_SystemReset+0x1c>
 800b168:	e000ed00 	.word	0xe000ed00
 800b16c:	05fa0004 	.word	0x05fa0004

0800b170 <SYSTEM_DEBUG_assertRecord>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void SYSTEM_DEBUG_assertRecord(uint8_t *p_file, uint32_t line)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	Assert_Struct.flag = ASSERT_FLAG_ON;
 800b17a:	4b11      	ldr	r3, [pc, #68]	; (800b1c0 <SYSTEM_DEBUG_assertRecord+0x50>)
 800b17c:	22aa      	movs	r2, #170	; 0xaa
 800b17e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (int i = 0; i < sizeof(Assert_Struct.p_file); i++)
 800b182:	2300      	movs	r3, #0
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	e007      	b.n	800b198 <SYSTEM_DEBUG_assertRecord+0x28>
	{
		Assert_Struct.p_file [i]  = 0;
 800b188:	4a0d      	ldr	r2, [pc, #52]	; (800b1c0 <SYSTEM_DEBUG_assertRecord+0x50>)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	4413      	add	r3, r2
 800b18e:	2200      	movs	r2, #0
 800b190:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(Assert_Struct.p_file); i++)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b3b      	cmp	r3, #59	; 0x3b
 800b19c:	d9f4      	bls.n	800b188 <SYSTEM_DEBUG_assertRecord+0x18>
	}

	strncpy((char*)Assert_Struct.p_file, (char*)p_file, sizeof(Assert_Struct.p_file));
 800b19e:	223c      	movs	r2, #60	; 0x3c
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	4807      	ldr	r0, [pc, #28]	; (800b1c0 <SYSTEM_DEBUG_assertRecord+0x50>)
 800b1a4:	f001 f874 	bl	800c290 <strncpy>
	Assert_Struct.line = line;
 800b1a8:	4a05      	ldr	r2, [pc, #20]	; (800b1c0 <SYSTEM_DEBUG_assertRecord+0x50>)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	63d3      	str	r3, [r2, #60]	; 0x3c

	while (COM_getTxBusyFlag()); // OK message
 800b1ae:	bf00      	nop
 800b1b0:	f7fd fcca 	bl	8008b48 <COM_getTxBusyFlag>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1fa      	bne.n	800b1b0 <SYSTEM_DEBUG_assertRecord+0x40>
	NVIC_SystemReset();
 800b1ba:	f7ff ffc5 	bl	800b148 <__NVIC_SystemReset>
 800b1be:	bf00      	nop
 800b1c0:	20000000 	.word	0x20000000

0800b1c4 <SYSTEM_DEBUG_assertMsgPrint>:
	while (1) {}; // never reached to here
}

void SYSTEM_DEBUG_assertMsgPrint(void)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b09a      	sub	sp, #104	; 0x68
 800b1c8:	af00      	add	r7, sp, #0
	if (Assert_Struct.flag == ASSERT_FLAG_ON)
 800b1ca:	4b0a      	ldr	r3, [pc, #40]	; (800b1f4 <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800b1cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1d0:	2baa      	cmp	r3, #170	; 0xaa
 800b1d2:	d10a      	bne.n	800b1ea <SYSTEM_DEBUG_assertMsgPrint+0x26>
	{
		char temp [100];
		sprintf(temp, "Problem found! Path: %s\tLine: %u\n", Assert_Struct.p_file, (unsigned int)Assert_Struct.line);
 800b1d4:	4b07      	ldr	r3, [pc, #28]	; (800b1f4 <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800b1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d8:	1d38      	adds	r0, r7, #4
 800b1da:	4a06      	ldr	r2, [pc, #24]	; (800b1f4 <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800b1dc:	4906      	ldr	r1, [pc, #24]	; (800b1f8 <SYSTEM_DEBUG_assertMsgPrint+0x34>)
 800b1de:	f001 f825 	bl	800c22c <siprintf>
		COM_uartPrint(temp);
 800b1e2:	1d3b      	adds	r3, r7, #4
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fd fc5d 	bl	8008aa4 <COM_uartPrint>
	}
}
 800b1ea:	bf00      	nop
 800b1ec:	3768      	adds	r7, #104	; 0x68
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20000000 	.word	0x20000000
 800b1f8:	0800e264 	.word	0x0800e264

0800b1fc <SYSTEM_DEBUG_assertResetFlag>:

void SYSTEM_DEBUG_assertResetFlag(void)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	af00      	add	r7, sp, #0
	Assert_Struct.flag = ASSERT_FLAG_OFF;
 800b200:	4b04      	ldr	r3, [pc, #16]	; (800b214 <SYSTEM_DEBUG_assertResetFlag+0x18>)
 800b202:	2255      	movs	r2, #85	; 0x55
 800b204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b208:	bf00      	nop
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	20000000 	.word	0x20000000

0800b218 <SYSTEM_DEBUG_printResetCause>:

void SYSTEM_DEBUG_printResetCause(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b09a      	sub	sp, #104	; 0x68
 800b21c:	af00      	add	r7, sp, #0
	Reset_Cause = SYSTEM_DEBUG_resetCauseGet();
 800b21e:	f000 f81b 	bl	800b258 <SYSTEM_DEBUG_resetCauseGet>
 800b222:	4603      	mov	r3, r0
 800b224:	461a      	mov	r2, r3
 800b226:	4b0a      	ldr	r3, [pc, #40]	; (800b250 <SYSTEM_DEBUG_printResetCause+0x38>)
 800b228:	701a      	strb	r2, [r3, #0]

	char temp [100];
	sprintf(temp, "The system reset cause is \%s\"\n", SYSTEM_DEBUG_resetCauseGetName(Reset_Cause));
 800b22a:	4b09      	ldr	r3, [pc, #36]	; (800b250 <SYSTEM_DEBUG_printResetCause+0x38>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 f864 	bl	800b2fc <SYSTEM_DEBUG_resetCauseGetName>
 800b234:	4602      	mov	r2, r0
 800b236:	1d3b      	adds	r3, r7, #4
 800b238:	4906      	ldr	r1, [pc, #24]	; (800b254 <SYSTEM_DEBUG_printResetCause+0x3c>)
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 fff6 	bl	800c22c <siprintf>
	COM_uartPrint(temp);
 800b240:	1d3b      	adds	r3, r7, #4
 800b242:	4618      	mov	r0, r3
 800b244:	f7fd fc2e 	bl	8008aa4 <COM_uartPrint>
}
 800b248:	bf00      	nop
 800b24a:	3768      	adds	r7, #104	; 0x68
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	200006d8 	.word	0x200006d8
 800b254:	0800e288 	.word	0x0800e288

0800b258 <SYSTEM_DEBUG_resetCauseGet>:

reset_cause_t SYSTEM_DEBUG_resetCauseGet(void)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
    reset_cause_t Reset_Cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800b25e:	4b26      	ldr	r3, [pc, #152]	; (800b2f8 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b262:	2b00      	cmp	r3, #0
 800b264:	da02      	bge.n	800b26c <SYSTEM_DEBUG_resetCauseGet+0x14>
    {
        Reset_Cause = RESET_CAUSE_LOW_POWER_RESET;
 800b266:	2301      	movs	r3, #1
 800b268:	71fb      	strb	r3, [r7, #7]
 800b26a:	e037      	b.n	800b2dc <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800b26c:	4b22      	ldr	r3, [pc, #136]	; (800b2f8 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b26e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b270:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <SYSTEM_DEBUG_resetCauseGet+0x26>
    {
        Reset_Cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800b278:	2302      	movs	r3, #2
 800b27a:	71fb      	strb	r3, [r7, #7]
 800b27c:	e02e      	b.n	800b2dc <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800b27e:	4b1e      	ldr	r3, [pc, #120]	; (800b2f8 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b286:	2b00      	cmp	r3, #0
 800b288:	d002      	beq.n	800b290 <SYSTEM_DEBUG_resetCauseGet+0x38>
    {
        Reset_Cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800b28a:	2303      	movs	r3, #3
 800b28c:	71fb      	strb	r3, [r7, #7]
 800b28e:	e025      	b.n	800b2dc <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800b290:	4b19      	ldr	r3, [pc, #100]	; (800b2f8 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SYSTEM_DEBUG_resetCauseGet+0x4a>
    {
        Reset_Cause = RESET_CAUSE_SOFTWARE_RESET;
 800b29c:	2304      	movs	r3, #4
 800b29e:	71fb      	strb	r3, [r7, #7]
 800b2a0:	e01c      	b.n	800b2dc <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b2a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <SYSTEM_DEBUG_resetCauseGet+0x5c>
    {
        Reset_Cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800b2ae:	2305      	movs	r3, #5
 800b2b0:	71fb      	strb	r3, [r7, #7]
 800b2b2:	e013      	b.n	800b2dc <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800b2b4:	4b10      	ldr	r3, [pc, #64]	; (800b2f8 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b2b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <SYSTEM_DEBUG_resetCauseGet+0x6e>
    {
        Reset_Cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800b2c0:	2306      	movs	r3, #6
 800b2c2:	71fb      	strb	r3, [r7, #7]
 800b2c4:	e00a      	b.n	800b2dc <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800b2c6:	4b0c      	ldr	r3, [pc, #48]	; (800b2f8 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b2c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <SYSTEM_DEBUG_resetCauseGet+0x80>
    {
        Reset_Cause = RESET_CAUSE_BROWNOUT_RESET;
 800b2d2:	2307      	movs	r3, #7
 800b2d4:	71fb      	strb	r3, [r7, #7]
 800b2d6:	e001      	b.n	800b2dc <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else
    {
        Reset_Cause = RESET_CAUSE_UNKNOWN;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 800b2dc:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2e0:	4a05      	ldr	r2, [pc, #20]	; (800b2f8 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b2e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2e6:	6753      	str	r3, [r2, #116]	; 0x74

    return Reset_Cause;
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	40023800 	.word	0x40023800

0800b2fc <SYSTEM_DEBUG_resetCauseGetName>:

const char * SYSTEM_DEBUG_resetCauseGetName(reset_cause_t Reset_Cause)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	4603      	mov	r3, r0
 800b304:	71fb      	strb	r3, [r7, #7]
    const char * reset_cause_name = "TBD";
 800b306:	4b1c      	ldr	r3, [pc, #112]	; (800b378 <SYSTEM_DEBUG_resetCauseGetName+0x7c>)
 800b308:	60fb      	str	r3, [r7, #12]

    switch (Reset_Cause)
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	2b07      	cmp	r3, #7
 800b30e:	d82b      	bhi.n	800b368 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
 800b310:	a201      	add	r2, pc, #4	; (adr r2, 800b318 <SYSTEM_DEBUG_resetCauseGetName+0x1c>)
 800b312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b316:	bf00      	nop
 800b318:	0800b339 	.word	0x0800b339
 800b31c:	0800b33f 	.word	0x0800b33f
 800b320:	0800b345 	.word	0x0800b345
 800b324:	0800b34b 	.word	0x0800b34b
 800b328:	0800b351 	.word	0x0800b351
 800b32c:	0800b357 	.word	0x0800b357
 800b330:	0800b35d 	.word	0x0800b35d
 800b334:	0800b363 	.word	0x0800b363
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800b338:	4b10      	ldr	r3, [pc, #64]	; (800b37c <SYSTEM_DEBUG_resetCauseGetName+0x80>)
 800b33a:	60fb      	str	r3, [r7, #12]
            break;
 800b33c:	e014      	b.n	800b368 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800b33e:	4b10      	ldr	r3, [pc, #64]	; (800b380 <SYSTEM_DEBUG_resetCauseGetName+0x84>)
 800b340:	60fb      	str	r3, [r7, #12]
            break;
 800b342:	e011      	b.n	800b368 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800b344:	4b0f      	ldr	r3, [pc, #60]	; (800b384 <SYSTEM_DEBUG_resetCauseGetName+0x88>)
 800b346:	60fb      	str	r3, [r7, #12]
            break;
 800b348:	e00e      	b.n	800b368 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800b34a:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <SYSTEM_DEBUG_resetCauseGetName+0x8c>)
 800b34c:	60fb      	str	r3, [r7, #12]
            break;
 800b34e:	e00b      	b.n	800b368 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800b350:	4b0e      	ldr	r3, [pc, #56]	; (800b38c <SYSTEM_DEBUG_resetCauseGetName+0x90>)
 800b352:	60fb      	str	r3, [r7, #12]
            break;
 800b354:	e008      	b.n	800b368 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800b356:	4b0e      	ldr	r3, [pc, #56]	; (800b390 <SYSTEM_DEBUG_resetCauseGetName+0x94>)
 800b358:	60fb      	str	r3, [r7, #12]
            break;
 800b35a:	e005      	b.n	800b368 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800b35c:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <SYSTEM_DEBUG_resetCauseGetName+0x98>)
 800b35e:	60fb      	str	r3, [r7, #12]
            break;
 800b360:	e002      	b.n	800b368 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800b362:	4b0d      	ldr	r3, [pc, #52]	; (800b398 <SYSTEM_DEBUG_resetCauseGetName+0x9c>)
 800b364:	60fb      	str	r3, [r7, #12]
            break;
 800b366:	bf00      	nop
    }

    return reset_cause_name;
 800b368:	68fb      	ldr	r3, [r7, #12]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	0800e2a8 	.word	0x0800e2a8
 800b37c:	0800e2ac 	.word	0x0800e2ac
 800b380:	0800e2b4 	.word	0x0800e2b4
 800b384:	0800e2c4 	.word	0x0800e2c4
 800b388:	0800e2dc 	.word	0x0800e2dc
 800b38c:	0800e2f8 	.word	0x0800e2f8
 800b390:	0800e308 	.word	0x0800e308
 800b394:	0800e338 	.word	0x0800e338
 800b398:	0800e354 	.word	0x0800e354

0800b39c <SYSTEM_DEBUG_enterSleepMode>:

void SYSTEM_DEBUG_enterSleepMode(void)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2120      	movs	r1, #32
 800b3a4:	4808      	ldr	r0, [pc, #32]	; (800b3c8 <SYSTEM_DEBUG_enterSleepMode+0x2c>)
 800b3a6:	f7f7 fc7b 	bl	8002ca0 <HAL_GPIO_WritePin>

	// Enters to sleep mode
	HAL_SuspendTick();
 800b3aa:	f7f5 fdf7 	bl	8000f9c <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800b3ae:	2101      	movs	r1, #1
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	f7f8 fd47 	bl	8003e44 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 800b3b6:	f7f5 fe01 	bl	8000fbc <HAL_ResumeTick>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	2120      	movs	r1, #32
 800b3be:	4802      	ldr	r0, [pc, #8]	; (800b3c8 <SYSTEM_DEBUG_enterSleepMode+0x2c>)
 800b3c0:	f7f7 fc6e 	bl	8002ca0 <HAL_GPIO_WritePin>
}
 800b3c4:	bf00      	nop
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	40020000 	.word	0x40020000

0800b3cc <SYSTEM_DEBUG_enterStopMode>:

void SYSTEM_DEBUG_enterStopMode(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	COM_uartPrint("STOP MODE is ON\n");
 800b3d0:	4812      	ldr	r0, [pc, #72]	; (800b41c <SYSTEM_DEBUG_enterStopMode+0x50>)
 800b3d2:	f7fd fb67 	bl	8008aa4 <COM_uartPrint>

	/* enable the RTC Wakeup */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2710, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f242 7110 	movw	r1, #10000	; 0x2710
 800b3dc:	4810      	ldr	r0, [pc, #64]	; (800b420 <SYSTEM_DEBUG_enterStopMode+0x54>)
 800b3de:	f7fa fd69 	bl	8005eb4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <SYSTEM_DEBUG_enterStopMode+0x20>
	{
		Error_Handler();
 800b3e8:	f7ff fd18 	bl	800ae1c <Error_Handler>
	}

	// Enters to stop mode
	while (COM_getTxBusyFlag());
 800b3ec:	bf00      	nop
 800b3ee:	f7fd fbab 	bl	8008b48 <COM_getTxBusyFlag>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1fa      	bne.n	800b3ee <SYSTEM_DEBUG_enterStopMode+0x22>
	HAL_SuspendTick();
 800b3f8:	f7f5 fdd0 	bl	8000f9c <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	2001      	movs	r0, #1
 800b400:	f7f8 fd52 	bl	8003ea8 <HAL_PWR_EnterSTOPMode>

	SystemClock_Config();
 800b404:	f7ff fc84 	bl	800ad10 <SystemClock_Config>
	HAL_ResumeTick();
 800b408:	f7f5 fdd8 	bl	8000fbc <HAL_ResumeTick>

	/** Deactivate the RTC wakeup  **/
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800b40c:	4804      	ldr	r0, [pc, #16]	; (800b420 <SYSTEM_DEBUG_enterStopMode+0x54>)
 800b40e:	f7fa fe31 	bl	8006074 <HAL_RTCEx_DeactivateWakeUpTimer>

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	COM_uartPrint("STOP MODE is OFF\n");
 800b412:	4804      	ldr	r0, [pc, #16]	; (800b424 <SYSTEM_DEBUG_enterStopMode+0x58>)
 800b414:	f7fd fb46 	bl	8008aa4 <COM_uartPrint>

}
 800b418:	bf00      	nop
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	0800e36c 	.word	0x0800e36c
 800b420:	20000764 	.word	0x20000764
 800b424:	0800e380 	.word	0x0800e380

0800b428 <SYSTEM_DEBUG_enterStandbyMode>:

void SYSTEM_DEBUG_enterStandbyMode(void)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	af00      	add	r7, sp, #0
	/* Clear the WU FLAG */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800b42c:	4b12      	ldr	r3, [pc, #72]	; (800b478 <SYSTEM_DEBUG_enterStandbyMode+0x50>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a11      	ldr	r2, [pc, #68]	; (800b478 <SYSTEM_DEBUG_enterStandbyMode+0x50>)
 800b432:	f043 0304 	orr.w	r3, r3, #4
 800b436:	6013      	str	r3, [r2, #0]

	 /* clear the RTC Wake UP (WU) flag */
	 __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800b438:	4b10      	ldr	r3, [pc, #64]	; (800b47c <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	4b0e      	ldr	r3, [pc, #56]	; (800b47c <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b448:	60da      	str	r2, [r3, #12]

	 /* Enable the WAKEUP PIN */
	 HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800b44a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b44e:	f7f8 fcc1 	bl	8003dd4 <HAL_PWR_EnableWakeUpPin>
	      To configure the wake up timer to 5s the WakeUpCounter is set to 0x2710:
	      RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
	      Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
	      ==> WakeUpCounter = ~5s/0.0005s = 20000 = 0x2710
	    */
	 if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2710, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800b452:	2200      	movs	r2, #0
 800b454:	f242 7110 	movw	r1, #10000	; 0x2710
 800b458:	4808      	ldr	r0, [pc, #32]	; (800b47c <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800b45a:	f7fa fd2b 	bl	8005eb4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <SYSTEM_DEBUG_enterStandbyMode+0x40>
	 {
		 Error_Handler();
 800b464:	f7ff fcda 	bl	800ae1c <Error_Handler>
	 }
	 COM_uartPrint("STANDBY MODE is ON\n");
 800b468:	4805      	ldr	r0, [pc, #20]	; (800b480 <SYSTEM_DEBUG_enterStandbyMode+0x58>)
 800b46a:	f7fd fb1b 	bl	8008aa4 <COM_uartPrint>

	 /* Enter the standby mode */
	 HAL_PWR_EnterSTANDBYMode();
 800b46e:	f7f8 fd5d 	bl	8003f2c <HAL_PWR_EnterSTANDBYMode>
}
 800b472:	bf00      	nop
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	40007000 	.word	0x40007000
 800b47c:	20000764 	.word	0x20000764
 800b480:	0800e394 	.word	0x0800e394

0800b484 <SYSTEM_DEBUG_wakeupStandbyMode>:

void SYSTEM_DEBUG_wakeupStandbyMode(void)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800b488:	4b0b      	ldr	r3, [pc, #44]	; (800b4b8 <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	f003 0302 	and.w	r3, r3, #2
 800b490:	2b02      	cmp	r3, #2
 800b492:	d10f      	bne.n	800b4b4 <SYSTEM_DEBUG_wakeupStandbyMode+0x30>
	{
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800b494:	4b08      	ldr	r3, [pc, #32]	; (800b4b8 <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a07      	ldr	r2, [pc, #28]	; (800b4b8 <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800b49a:	f043 0308 	orr.w	r3, r3, #8
 800b49e:	6013      	str	r3, [r2, #0]

		COM_uartPrint("Wakeup from STANDBY MODE\n");
 800b4a0:	4806      	ldr	r0, [pc, #24]	; (800b4bc <SYSTEM_DEBUG_wakeupStandbyMode+0x38>)
 800b4a2:	f7fd faff 	bl	8008aa4 <COM_uartPrint>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800b4a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b4aa:	f7f8 fcaf 	bl	8003e0c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800b4ae:	4804      	ldr	r0, [pc, #16]	; (800b4c0 <SYSTEM_DEBUG_wakeupStandbyMode+0x3c>)
 800b4b0:	f7fa fde0 	bl	8006074 <HAL_RTCEx_DeactivateWakeUpTimer>
	}
}
 800b4b4:	bf00      	nop
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	40007000 	.word	0x40007000
 800b4bc:	0800e3a8 	.word	0x0800e3a8
 800b4c0:	20000764 	.word	0x20000764

0800b4c4 <HAL_UART_TxCpltCallback>:
 /******************************************************************************
 * Function Definitions
 *******************************************************************************/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
  COM_setTxBusyFlagOff();
 800b4cc:	f7fd fb2e 	bl	8008b2c <COM_setTxBusyFlagOff>
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  COM_halUartReceiveDma();
 800b4e0:	f7fd fb08 	bl	8008af4 <COM_halUartReceiveDma>

  COM_charHandler();
 800b4e4:	f7fd fb3c 	bl	8008b60 <COM_charHandler>
}
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if (GPIO_Pin == GPIO_PIN_5)
 800b4fa:	88fb      	ldrh	r3, [r7, #6]
 800b4fc:	2b20      	cmp	r3, #32
 800b4fe:	d101      	bne.n	800b504 <HAL_GPIO_EXTI_Callback+0x14>
  {
	  LSM6DSL_setInterruptFlagOn();
 800b500:	f7fe fc40 	bl	8009d84 <LSM6DSL_setInterruptFlagOn>
  }
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  COM_uartPrint(TICK);
 800b514:	4803      	ldr	r0, [pc, #12]	; (800b524 <HAL_RTC_AlarmAEventCallback+0x18>)
 800b516:	f7fd fac5 	bl	8008aa4 <COM_uartPrint>
}
 800b51a:	bf00      	nop
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	0800e3c4 	.word	0x0800e3c4

0800b528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b528:	b480      	push	{r7}
 800b52a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b52c:	4b08      	ldr	r3, [pc, #32]	; (800b550 <SystemInit+0x28>)
 800b52e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b532:	4a07      	ldr	r2, [pc, #28]	; (800b550 <SystemInit+0x28>)
 800b534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b53c:	4b04      	ldr	r3, [pc, #16]	; (800b550 <SystemInit+0x28>)
 800b53e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b542:	609a      	str	r2, [r3, #8]
#endif
}
 800b544:	bf00      	nop
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	e000ed00 	.word	0xe000ed00

0800b554 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b08e      	sub	sp, #56	; 0x38
 800b558:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b55a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	605a      	str	r2, [r3, #4]
 800b564:	609a      	str	r2, [r3, #8]
 800b566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b568:	f107 0320 	add.w	r3, r7, #32
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b572:	1d3b      	adds	r3, r7, #4
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	605a      	str	r2, [r3, #4]
 800b57a:	609a      	str	r2, [r3, #8]
 800b57c:	60da      	str	r2, [r3, #12]
 800b57e:	611a      	str	r2, [r3, #16]
 800b580:	615a      	str	r2, [r3, #20]
 800b582:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800b584:	4b2c      	ldr	r3, [pc, #176]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b586:	4a2d      	ldr	r2, [pc, #180]	; (800b63c <MX_TIM3_Init+0xe8>)
 800b588:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800b58a:	4b2b      	ldr	r3, [pc, #172]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b58c:	2253      	movs	r2, #83	; 0x53
 800b58e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b590:	4b29      	ldr	r3, [pc, #164]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b592:	2200      	movs	r2, #0
 800b594:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800b596:	4b28      	ldr	r3, [pc, #160]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b598:	2263      	movs	r2, #99	; 0x63
 800b59a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b59c:	4b26      	ldr	r3, [pc, #152]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b5a2:	4b25      	ldr	r3, [pc, #148]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b5a8:	4823      	ldr	r0, [pc, #140]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b5aa:	f7fa fdf3 	bl	8006194 <HAL_TIM_Base_Init>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d001      	beq.n	800b5b8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800b5b4:	f7ff fc32 	bl	800ae1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b5b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b5be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	481c      	ldr	r0, [pc, #112]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b5c6:	f7fb fa61 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800b5d0:	f7ff fc24 	bl	800ae1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b5d4:	4818      	ldr	r0, [pc, #96]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b5d6:	f7fa fe7f 	bl	80062d8 <HAL_TIM_PWM_Init>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800b5e0:	f7ff fc1c 	bl	800ae1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b5ec:	f107 0320 	add.w	r3, r7, #32
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	4811      	ldr	r0, [pc, #68]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b5f4:	f7fc f8de 	bl	80077b4 <HAL_TIMEx_MasterConfigSynchronization>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800b5fe:	f7ff fc0d 	bl	800ae1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b602:	2360      	movs	r3, #96	; 0x60
 800b604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b60e:	2300      	movs	r3, #0
 800b610:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b612:	1d3b      	adds	r3, r7, #4
 800b614:	2200      	movs	r2, #0
 800b616:	4619      	mov	r1, r3
 800b618:	4807      	ldr	r0, [pc, #28]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b61a:	f7fb f88d 	bl	8006738 <HAL_TIM_PWM_ConfigChannel>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800b624:	f7ff fbfa 	bl	800ae1c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800b628:	4803      	ldr	r0, [pc, #12]	; (800b638 <MX_TIM3_Init+0xe4>)
 800b62a:	f000 f82b 	bl	800b684 <HAL_TIM_MspPostInit>

}
 800b62e:	bf00      	nop
 800b630:	3738      	adds	r7, #56	; 0x38
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20000784 	.word	0x20000784
 800b63c:	40000400 	.word	0x40000400

0800b640 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a0b      	ldr	r2, [pc, #44]	; (800b67c <HAL_TIM_Base_MspInit+0x3c>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d10d      	bne.n	800b66e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b652:	2300      	movs	r3, #0
 800b654:	60fb      	str	r3, [r7, #12]
 800b656:	4b0a      	ldr	r3, [pc, #40]	; (800b680 <HAL_TIM_Base_MspInit+0x40>)
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	4a09      	ldr	r2, [pc, #36]	; (800b680 <HAL_TIM_Base_MspInit+0x40>)
 800b65c:	f043 0302 	orr.w	r3, r3, #2
 800b660:	6413      	str	r3, [r2, #64]	; 0x40
 800b662:	4b07      	ldr	r3, [pc, #28]	; (800b680 <HAL_TIM_Base_MspInit+0x40>)
 800b664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b666:	f003 0302 	and.w	r3, r3, #2
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800b66e:	bf00      	nop
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	40000400 	.word	0x40000400
 800b680:	40023800 	.word	0x40023800

0800b684 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b68c:	f107 030c 	add.w	r3, r7, #12
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	605a      	str	r2, [r3, #4]
 800b696:	609a      	str	r2, [r3, #8]
 800b698:	60da      	str	r2, [r3, #12]
 800b69a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a12      	ldr	r2, [pc, #72]	; (800b6ec <HAL_TIM_MspPostInit+0x68>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d11d      	bne.n	800b6e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60bb      	str	r3, [r7, #8]
 800b6aa:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <HAL_TIM_MspPostInit+0x6c>)
 800b6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ae:	4a10      	ldr	r2, [pc, #64]	; (800b6f0 <HAL_TIM_MspPostInit+0x6c>)
 800b6b0:	f043 0301 	orr.w	r3, r3, #1
 800b6b4:	6313      	str	r3, [r2, #48]	; 0x30
 800b6b6:	4b0e      	ldr	r3, [pc, #56]	; (800b6f0 <HAL_TIM_MspPostInit+0x6c>)
 800b6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ba:	f003 0301 	and.w	r3, r3, #1
 800b6be:	60bb      	str	r3, [r7, #8]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b6c2:	2340      	movs	r3, #64	; 0x40
 800b6c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6d6:	f107 030c 	add.w	r3, r7, #12
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4805      	ldr	r0, [pc, #20]	; (800b6f4 <HAL_TIM_MspPostInit+0x70>)
 800b6de:	f7f7 f837 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b6e2:	bf00      	nop
 800b6e4:	3720      	adds	r7, #32
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	40000400 	.word	0x40000400
 800b6f0:	40023800 	.word	0x40023800
 800b6f4:	40020000 	.word	0x40020000

0800b6f8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800b6fc:	4b11      	ldr	r3, [pc, #68]	; (800b744 <MX_USART2_UART_Init+0x4c>)
 800b6fe:	4a12      	ldr	r2, [pc, #72]	; (800b748 <MX_USART2_UART_Init+0x50>)
 800b700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b702:	4b10      	ldr	r3, [pc, #64]	; (800b744 <MX_USART2_UART_Init+0x4c>)
 800b704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b70a:	4b0e      	ldr	r3, [pc, #56]	; (800b744 <MX_USART2_UART_Init+0x4c>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b710:	4b0c      	ldr	r3, [pc, #48]	; (800b744 <MX_USART2_UART_Init+0x4c>)
 800b712:	2200      	movs	r2, #0
 800b714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <MX_USART2_UART_Init+0x4c>)
 800b718:	2200      	movs	r2, #0
 800b71a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b71c:	4b09      	ldr	r3, [pc, #36]	; (800b744 <MX_USART2_UART_Init+0x4c>)
 800b71e:	220c      	movs	r2, #12
 800b720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b722:	4b08      	ldr	r3, [pc, #32]	; (800b744 <MX_USART2_UART_Init+0x4c>)
 800b724:	2200      	movs	r2, #0
 800b726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b728:	4b06      	ldr	r3, [pc, #24]	; (800b744 <MX_USART2_UART_Init+0x4c>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b72e:	4805      	ldr	r0, [pc, #20]	; (800b744 <MX_USART2_UART_Init+0x4c>)
 800b730:	f7fc f8fe 	bl	8007930 <HAL_UART_Init>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b73a:	f7ff fb6f 	bl	800ae1c <Error_Handler>
  }

}
 800b73e:	bf00      	nop
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20000884 	.word	0x20000884
 800b748:	40004400 	.word	0x40004400

0800b74c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b08a      	sub	sp, #40	; 0x28
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b754:	f107 0314 	add.w	r3, r7, #20
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	605a      	str	r2, [r3, #4]
 800b75e:	609a      	str	r2, [r3, #8]
 800b760:	60da      	str	r2, [r3, #12]
 800b762:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a4b      	ldr	r2, [pc, #300]	; (800b898 <HAL_UART_MspInit+0x14c>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	f040 8090 	bne.w	800b890 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b770:	2300      	movs	r3, #0
 800b772:	613b      	str	r3, [r7, #16]
 800b774:	4b49      	ldr	r3, [pc, #292]	; (800b89c <HAL_UART_MspInit+0x150>)
 800b776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b778:	4a48      	ldr	r2, [pc, #288]	; (800b89c <HAL_UART_MspInit+0x150>)
 800b77a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b77e:	6413      	str	r3, [r2, #64]	; 0x40
 800b780:	4b46      	ldr	r3, [pc, #280]	; (800b89c <HAL_UART_MspInit+0x150>)
 800b782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b788:	613b      	str	r3, [r7, #16]
 800b78a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b78c:	2300      	movs	r3, #0
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	4b42      	ldr	r3, [pc, #264]	; (800b89c <HAL_UART_MspInit+0x150>)
 800b792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b794:	4a41      	ldr	r2, [pc, #260]	; (800b89c <HAL_UART_MspInit+0x150>)
 800b796:	f043 0301 	orr.w	r3, r3, #1
 800b79a:	6313      	str	r3, [r2, #48]	; 0x30
 800b79c:	4b3f      	ldr	r3, [pc, #252]	; (800b89c <HAL_UART_MspInit+0x150>)
 800b79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	60fb      	str	r3, [r7, #12]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b7a8:	230c      	movs	r3, #12
 800b7aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b7b8:	2307      	movs	r3, #7
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7bc:	f107 0314 	add.w	r3, r7, #20
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4837      	ldr	r0, [pc, #220]	; (800b8a0 <HAL_UART_MspInit+0x154>)
 800b7c4:	f7f6 ffc4 	bl	8002750 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800b7c8:	4b36      	ldr	r3, [pc, #216]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b7ca:	4a37      	ldr	r2, [pc, #220]	; (800b8a8 <HAL_UART_MspInit+0x15c>)
 800b7cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800b7ce:	4b35      	ldr	r3, [pc, #212]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b7d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b7d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7d6:	4b33      	ldr	r3, [pc, #204]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b7dc:	4b31      	ldr	r3, [pc, #196]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b7e2:	4b30      	ldr	r3, [pc, #192]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b7e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7ea:	4b2e      	ldr	r3, [pc, #184]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7f0:	4b2c      	ldr	r3, [pc, #176]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800b7f6:	4b2b      	ldr	r3, [pc, #172]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b7fc:	4b29      	ldr	r3, [pc, #164]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b7fe:	2200      	movs	r2, #0
 800b800:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b802:	4b28      	ldr	r3, [pc, #160]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b804:	2200      	movs	r2, #0
 800b806:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800b808:	4826      	ldr	r0, [pc, #152]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b80a:	f7f5 fd85 	bl	8001318 <HAL_DMA_Init>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800b814:	f7ff fb02 	bl	800ae1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a22      	ldr	r2, [pc, #136]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b81c:	635a      	str	r2, [r3, #52]	; 0x34
 800b81e:	4a21      	ldr	r2, [pc, #132]	; (800b8a4 <HAL_UART_MspInit+0x158>)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800b824:	4b21      	ldr	r3, [pc, #132]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b826:	4a22      	ldr	r2, [pc, #136]	; (800b8b0 <HAL_UART_MspInit+0x164>)
 800b828:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800b82a:	4b20      	ldr	r3, [pc, #128]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b82c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b830:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b832:	4b1e      	ldr	r3, [pc, #120]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b834:	2240      	movs	r2, #64	; 0x40
 800b836:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b838:	4b1c      	ldr	r3, [pc, #112]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b83e:	4b1b      	ldr	r3, [pc, #108]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b844:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b846:	4b19      	ldr	r3, [pc, #100]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b848:	2200      	movs	r2, #0
 800b84a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b84c:	4b17      	ldr	r3, [pc, #92]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b84e:	2200      	movs	r2, #0
 800b850:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800b852:	4b16      	ldr	r3, [pc, #88]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b854:	2200      	movs	r2, #0
 800b856:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b858:	4b14      	ldr	r3, [pc, #80]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b85e:	4b13      	ldr	r3, [pc, #76]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b860:	2200      	movs	r2, #0
 800b862:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800b864:	4811      	ldr	r0, [pc, #68]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b866:	f7f5 fd57 	bl	8001318 <HAL_DMA_Init>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800b870:	f7ff fad4 	bl	800ae1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4a0d      	ldr	r2, [pc, #52]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b878:	631a      	str	r2, [r3, #48]	; 0x30
 800b87a:	4a0c      	ldr	r2, [pc, #48]	; (800b8ac <HAL_UART_MspInit+0x160>)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800b880:	2200      	movs	r2, #0
 800b882:	2100      	movs	r1, #0
 800b884:	2026      	movs	r0, #38	; 0x26
 800b886:	f7f5 fc99 	bl	80011bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b88a:	2026      	movs	r0, #38	; 0x26
 800b88c:	f7f5 fcc2 	bl	8001214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800b890:	bf00      	nop
 800b892:	3728      	adds	r7, #40	; 0x28
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	40004400 	.word	0x40004400
 800b89c:	40023800 	.word	0x40023800
 800b8a0:	40020000 	.word	0x40020000
 800b8a4:	200007c4 	.word	0x200007c4
 800b8a8:	40026088 	.word	0x40026088
 800b8ac:	20000824 	.word	0x20000824
 800b8b0:	400260a0 	.word	0x400260a0

0800b8b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b8b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b8ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b8b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b8ba:	e003      	b.n	800b8c4 <LoopCopyDataInit>

0800b8bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b8bc:	4b0c      	ldr	r3, [pc, #48]	; (800b8f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b8be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b8c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b8c2:	3104      	adds	r1, #4

0800b8c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b8c4:	480b      	ldr	r0, [pc, #44]	; (800b8f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b8c6:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b8c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b8ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b8cc:	d3f6      	bcc.n	800b8bc <CopyDataInit>
  ldr  r2, =_sbss
 800b8ce:	4a0b      	ldr	r2, [pc, #44]	; (800b8fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b8d0:	e002      	b.n	800b8d8 <LoopFillZerobss>

0800b8d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b8d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b8d4:	f842 3b04 	str.w	r3, [r2], #4

0800b8d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b8d8:	4b09      	ldr	r3, [pc, #36]	; (800b900 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b8da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b8dc:	d3f9      	bcc.n	800b8d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b8de:	f7ff fe23 	bl	800b528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b8e2:	f000 f81b 	bl	800b91c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b8e6:	f7ff f9d1 	bl	800ac8c <main>
  bx  lr    
 800b8ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b8ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b8f0:	0800e740 	.word	0x0800e740
  ldr  r0, =_sdata
 800b8f4:	20000080 	.word	0x20000080
  ldr  r3, =_edata
 800b8f8:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 800b8fc:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 800b900:	200008c8 	.word	0x200008c8

0800b904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b904:	e7fe      	b.n	800b904 <ADC_IRQHandler>

0800b906 <atoi>:
 800b906:	220a      	movs	r2, #10
 800b908:	2100      	movs	r1, #0
 800b90a:	f000 bda7 	b.w	800c45c <strtol>
	...

0800b910 <__errno>:
 800b910:	4b01      	ldr	r3, [pc, #4]	; (800b918 <__errno+0x8>)
 800b912:	6818      	ldr	r0, [r3, #0]
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	2000008c 	.word	0x2000008c

0800b91c <__libc_init_array>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	4e0d      	ldr	r6, [pc, #52]	; (800b954 <__libc_init_array+0x38>)
 800b920:	4c0d      	ldr	r4, [pc, #52]	; (800b958 <__libc_init_array+0x3c>)
 800b922:	1ba4      	subs	r4, r4, r6
 800b924:	10a4      	asrs	r4, r4, #2
 800b926:	2500      	movs	r5, #0
 800b928:	42a5      	cmp	r5, r4
 800b92a:	d109      	bne.n	800b940 <__libc_init_array+0x24>
 800b92c:	4e0b      	ldr	r6, [pc, #44]	; (800b95c <__libc_init_array+0x40>)
 800b92e:	4c0c      	ldr	r4, [pc, #48]	; (800b960 <__libc_init_array+0x44>)
 800b930:	f002 f96e 	bl	800dc10 <_init>
 800b934:	1ba4      	subs	r4, r4, r6
 800b936:	10a4      	asrs	r4, r4, #2
 800b938:	2500      	movs	r5, #0
 800b93a:	42a5      	cmp	r5, r4
 800b93c:	d105      	bne.n	800b94a <__libc_init_array+0x2e>
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b944:	4798      	blx	r3
 800b946:	3501      	adds	r5, #1
 800b948:	e7ee      	b.n	800b928 <__libc_init_array+0xc>
 800b94a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b94e:	4798      	blx	r3
 800b950:	3501      	adds	r5, #1
 800b952:	e7f2      	b.n	800b93a <__libc_init_array+0x1e>
 800b954:	0800e738 	.word	0x0800e738
 800b958:	0800e738 	.word	0x0800e738
 800b95c:	0800e738 	.word	0x0800e738
 800b960:	0800e73c 	.word	0x0800e73c

0800b964 <memset>:
 800b964:	4402      	add	r2, r0
 800b966:	4603      	mov	r3, r0
 800b968:	4293      	cmp	r3, r2
 800b96a:	d100      	bne.n	800b96e <memset+0xa>
 800b96c:	4770      	bx	lr
 800b96e:	f803 1b01 	strb.w	r1, [r3], #1
 800b972:	e7f9      	b.n	800b968 <memset+0x4>

0800b974 <__cvt>:
 800b974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b978:	ec55 4b10 	vmov	r4, r5, d0
 800b97c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b97e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b982:	2d00      	cmp	r5, #0
 800b984:	460e      	mov	r6, r1
 800b986:	4691      	mov	r9, r2
 800b988:	4619      	mov	r1, r3
 800b98a:	bfb8      	it	lt
 800b98c:	4622      	movlt	r2, r4
 800b98e:	462b      	mov	r3, r5
 800b990:	f027 0720 	bic.w	r7, r7, #32
 800b994:	bfbb      	ittet	lt
 800b996:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b99a:	461d      	movlt	r5, r3
 800b99c:	2300      	movge	r3, #0
 800b99e:	232d      	movlt	r3, #45	; 0x2d
 800b9a0:	bfb8      	it	lt
 800b9a2:	4614      	movlt	r4, r2
 800b9a4:	2f46      	cmp	r7, #70	; 0x46
 800b9a6:	700b      	strb	r3, [r1, #0]
 800b9a8:	d004      	beq.n	800b9b4 <__cvt+0x40>
 800b9aa:	2f45      	cmp	r7, #69	; 0x45
 800b9ac:	d100      	bne.n	800b9b0 <__cvt+0x3c>
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	2102      	movs	r1, #2
 800b9b2:	e000      	b.n	800b9b6 <__cvt+0x42>
 800b9b4:	2103      	movs	r1, #3
 800b9b6:	ab03      	add	r3, sp, #12
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	ab02      	add	r3, sp, #8
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	4632      	mov	r2, r6
 800b9c0:	4653      	mov	r3, sl
 800b9c2:	ec45 4b10 	vmov	d0, r4, r5
 800b9c6:	f000 fdeb 	bl	800c5a0 <_dtoa_r>
 800b9ca:	2f47      	cmp	r7, #71	; 0x47
 800b9cc:	4680      	mov	r8, r0
 800b9ce:	d102      	bne.n	800b9d6 <__cvt+0x62>
 800b9d0:	f019 0f01 	tst.w	r9, #1
 800b9d4:	d026      	beq.n	800ba24 <__cvt+0xb0>
 800b9d6:	2f46      	cmp	r7, #70	; 0x46
 800b9d8:	eb08 0906 	add.w	r9, r8, r6
 800b9dc:	d111      	bne.n	800ba02 <__cvt+0x8e>
 800b9de:	f898 3000 	ldrb.w	r3, [r8]
 800b9e2:	2b30      	cmp	r3, #48	; 0x30
 800b9e4:	d10a      	bne.n	800b9fc <__cvt+0x88>
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	f7f5 f873 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9f2:	b918      	cbnz	r0, 800b9fc <__cvt+0x88>
 800b9f4:	f1c6 0601 	rsb	r6, r6, #1
 800b9f8:	f8ca 6000 	str.w	r6, [sl]
 800b9fc:	f8da 3000 	ldr.w	r3, [sl]
 800ba00:	4499      	add	r9, r3
 800ba02:	2200      	movs	r2, #0
 800ba04:	2300      	movs	r3, #0
 800ba06:	4620      	mov	r0, r4
 800ba08:	4629      	mov	r1, r5
 800ba0a:	f7f5 f865 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba0e:	b938      	cbnz	r0, 800ba20 <__cvt+0xac>
 800ba10:	2230      	movs	r2, #48	; 0x30
 800ba12:	9b03      	ldr	r3, [sp, #12]
 800ba14:	454b      	cmp	r3, r9
 800ba16:	d205      	bcs.n	800ba24 <__cvt+0xb0>
 800ba18:	1c59      	adds	r1, r3, #1
 800ba1a:	9103      	str	r1, [sp, #12]
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	e7f8      	b.n	800ba12 <__cvt+0x9e>
 800ba20:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba24:	9b03      	ldr	r3, [sp, #12]
 800ba26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba28:	eba3 0308 	sub.w	r3, r3, r8
 800ba2c:	4640      	mov	r0, r8
 800ba2e:	6013      	str	r3, [r2, #0]
 800ba30:	b004      	add	sp, #16
 800ba32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ba36 <__exponent>:
 800ba36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba38:	2900      	cmp	r1, #0
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	bfba      	itte	lt
 800ba3e:	4249      	neglt	r1, r1
 800ba40:	232d      	movlt	r3, #45	; 0x2d
 800ba42:	232b      	movge	r3, #43	; 0x2b
 800ba44:	2909      	cmp	r1, #9
 800ba46:	f804 2b02 	strb.w	r2, [r4], #2
 800ba4a:	7043      	strb	r3, [r0, #1]
 800ba4c:	dd20      	ble.n	800ba90 <__exponent+0x5a>
 800ba4e:	f10d 0307 	add.w	r3, sp, #7
 800ba52:	461f      	mov	r7, r3
 800ba54:	260a      	movs	r6, #10
 800ba56:	fb91 f5f6 	sdiv	r5, r1, r6
 800ba5a:	fb06 1115 	mls	r1, r6, r5, r1
 800ba5e:	3130      	adds	r1, #48	; 0x30
 800ba60:	2d09      	cmp	r5, #9
 800ba62:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba66:	f103 32ff 	add.w	r2, r3, #4294967295
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	dc09      	bgt.n	800ba82 <__exponent+0x4c>
 800ba6e:	3130      	adds	r1, #48	; 0x30
 800ba70:	3b02      	subs	r3, #2
 800ba72:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ba76:	42bb      	cmp	r3, r7
 800ba78:	4622      	mov	r2, r4
 800ba7a:	d304      	bcc.n	800ba86 <__exponent+0x50>
 800ba7c:	1a10      	subs	r0, r2, r0
 800ba7e:	b003      	add	sp, #12
 800ba80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba82:	4613      	mov	r3, r2
 800ba84:	e7e7      	b.n	800ba56 <__exponent+0x20>
 800ba86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba8a:	f804 2b01 	strb.w	r2, [r4], #1
 800ba8e:	e7f2      	b.n	800ba76 <__exponent+0x40>
 800ba90:	2330      	movs	r3, #48	; 0x30
 800ba92:	4419      	add	r1, r3
 800ba94:	7083      	strb	r3, [r0, #2]
 800ba96:	1d02      	adds	r2, r0, #4
 800ba98:	70c1      	strb	r1, [r0, #3]
 800ba9a:	e7ef      	b.n	800ba7c <__exponent+0x46>

0800ba9c <_printf_float>:
 800ba9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	b08d      	sub	sp, #52	; 0x34
 800baa2:	460c      	mov	r4, r1
 800baa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800baa8:	4616      	mov	r6, r2
 800baaa:	461f      	mov	r7, r3
 800baac:	4605      	mov	r5, r0
 800baae:	f001 fb33 	bl	800d118 <_localeconv_r>
 800bab2:	6803      	ldr	r3, [r0, #0]
 800bab4:	9304      	str	r3, [sp, #16]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7f4 fb92 	bl	80001e0 <strlen>
 800babc:	2300      	movs	r3, #0
 800babe:	930a      	str	r3, [sp, #40]	; 0x28
 800bac0:	f8d8 3000 	ldr.w	r3, [r8]
 800bac4:	9005      	str	r0, [sp, #20]
 800bac6:	3307      	adds	r3, #7
 800bac8:	f023 0307 	bic.w	r3, r3, #7
 800bacc:	f103 0208 	add.w	r2, r3, #8
 800bad0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bad4:	f8d4 b000 	ldr.w	fp, [r4]
 800bad8:	f8c8 2000 	str.w	r2, [r8]
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bae4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bae8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800baec:	9307      	str	r3, [sp, #28]
 800baee:	f8cd 8018 	str.w	r8, [sp, #24]
 800baf2:	f04f 32ff 	mov.w	r2, #4294967295
 800baf6:	4ba7      	ldr	r3, [pc, #668]	; (800bd94 <_printf_float+0x2f8>)
 800baf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bafc:	f7f5 f81e 	bl	8000b3c <__aeabi_dcmpun>
 800bb00:	bb70      	cbnz	r0, 800bb60 <_printf_float+0xc4>
 800bb02:	f04f 32ff 	mov.w	r2, #4294967295
 800bb06:	4ba3      	ldr	r3, [pc, #652]	; (800bd94 <_printf_float+0x2f8>)
 800bb08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb0c:	f7f4 fff8 	bl	8000b00 <__aeabi_dcmple>
 800bb10:	bb30      	cbnz	r0, 800bb60 <_printf_float+0xc4>
 800bb12:	2200      	movs	r2, #0
 800bb14:	2300      	movs	r3, #0
 800bb16:	4640      	mov	r0, r8
 800bb18:	4649      	mov	r1, r9
 800bb1a:	f7f4 ffe7 	bl	8000aec <__aeabi_dcmplt>
 800bb1e:	b110      	cbz	r0, 800bb26 <_printf_float+0x8a>
 800bb20:	232d      	movs	r3, #45	; 0x2d
 800bb22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb26:	4a9c      	ldr	r2, [pc, #624]	; (800bd98 <_printf_float+0x2fc>)
 800bb28:	4b9c      	ldr	r3, [pc, #624]	; (800bd9c <_printf_float+0x300>)
 800bb2a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bb2e:	bf8c      	ite	hi
 800bb30:	4690      	movhi	r8, r2
 800bb32:	4698      	movls	r8, r3
 800bb34:	2303      	movs	r3, #3
 800bb36:	f02b 0204 	bic.w	r2, fp, #4
 800bb3a:	6123      	str	r3, [r4, #16]
 800bb3c:	6022      	str	r2, [r4, #0]
 800bb3e:	f04f 0900 	mov.w	r9, #0
 800bb42:	9700      	str	r7, [sp, #0]
 800bb44:	4633      	mov	r3, r6
 800bb46:	aa0b      	add	r2, sp, #44	; 0x2c
 800bb48:	4621      	mov	r1, r4
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f000 f9e6 	bl	800bf1c <_printf_common>
 800bb50:	3001      	adds	r0, #1
 800bb52:	f040 808d 	bne.w	800bc70 <_printf_float+0x1d4>
 800bb56:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5a:	b00d      	add	sp, #52	; 0x34
 800bb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb60:	4642      	mov	r2, r8
 800bb62:	464b      	mov	r3, r9
 800bb64:	4640      	mov	r0, r8
 800bb66:	4649      	mov	r1, r9
 800bb68:	f7f4 ffe8 	bl	8000b3c <__aeabi_dcmpun>
 800bb6c:	b110      	cbz	r0, 800bb74 <_printf_float+0xd8>
 800bb6e:	4a8c      	ldr	r2, [pc, #560]	; (800bda0 <_printf_float+0x304>)
 800bb70:	4b8c      	ldr	r3, [pc, #560]	; (800bda4 <_printf_float+0x308>)
 800bb72:	e7da      	b.n	800bb2a <_printf_float+0x8e>
 800bb74:	6861      	ldr	r1, [r4, #4]
 800bb76:	1c4b      	adds	r3, r1, #1
 800bb78:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bb7c:	a80a      	add	r0, sp, #40	; 0x28
 800bb7e:	d13e      	bne.n	800bbfe <_printf_float+0x162>
 800bb80:	2306      	movs	r3, #6
 800bb82:	6063      	str	r3, [r4, #4]
 800bb84:	2300      	movs	r3, #0
 800bb86:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bb8a:	ab09      	add	r3, sp, #36	; 0x24
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	ec49 8b10 	vmov	d0, r8, r9
 800bb92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb96:	6022      	str	r2, [r4, #0]
 800bb98:	f8cd a004 	str.w	sl, [sp, #4]
 800bb9c:	6861      	ldr	r1, [r4, #4]
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f7ff fee8 	bl	800b974 <__cvt>
 800bba4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bba8:	2b47      	cmp	r3, #71	; 0x47
 800bbaa:	4680      	mov	r8, r0
 800bbac:	d109      	bne.n	800bbc2 <_printf_float+0x126>
 800bbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb0:	1cd8      	adds	r0, r3, #3
 800bbb2:	db02      	blt.n	800bbba <_printf_float+0x11e>
 800bbb4:	6862      	ldr	r2, [r4, #4]
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	dd47      	ble.n	800bc4a <_printf_float+0x1ae>
 800bbba:	f1aa 0a02 	sub.w	sl, sl, #2
 800bbbe:	fa5f fa8a 	uxtb.w	sl, sl
 800bbc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bbc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbc8:	d824      	bhi.n	800bc14 <_printf_float+0x178>
 800bbca:	3901      	subs	r1, #1
 800bbcc:	4652      	mov	r2, sl
 800bbce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bbd2:	9109      	str	r1, [sp, #36]	; 0x24
 800bbd4:	f7ff ff2f 	bl	800ba36 <__exponent>
 800bbd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbda:	1813      	adds	r3, r2, r0
 800bbdc:	2a01      	cmp	r2, #1
 800bbde:	4681      	mov	r9, r0
 800bbe0:	6123      	str	r3, [r4, #16]
 800bbe2:	dc02      	bgt.n	800bbea <_printf_float+0x14e>
 800bbe4:	6822      	ldr	r2, [r4, #0]
 800bbe6:	07d1      	lsls	r1, r2, #31
 800bbe8:	d501      	bpl.n	800bbee <_printf_float+0x152>
 800bbea:	3301      	adds	r3, #1
 800bbec:	6123      	str	r3, [r4, #16]
 800bbee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0a5      	beq.n	800bb42 <_printf_float+0xa6>
 800bbf6:	232d      	movs	r3, #45	; 0x2d
 800bbf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbfc:	e7a1      	b.n	800bb42 <_printf_float+0xa6>
 800bbfe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bc02:	f000 8177 	beq.w	800bef4 <_printf_float+0x458>
 800bc06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bc0a:	d1bb      	bne.n	800bb84 <_printf_float+0xe8>
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	d1b9      	bne.n	800bb84 <_printf_float+0xe8>
 800bc10:	2301      	movs	r3, #1
 800bc12:	e7b6      	b.n	800bb82 <_printf_float+0xe6>
 800bc14:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bc18:	d119      	bne.n	800bc4e <_printf_float+0x1b2>
 800bc1a:	2900      	cmp	r1, #0
 800bc1c:	6863      	ldr	r3, [r4, #4]
 800bc1e:	dd0c      	ble.n	800bc3a <_printf_float+0x19e>
 800bc20:	6121      	str	r1, [r4, #16]
 800bc22:	b913      	cbnz	r3, 800bc2a <_printf_float+0x18e>
 800bc24:	6822      	ldr	r2, [r4, #0]
 800bc26:	07d2      	lsls	r2, r2, #31
 800bc28:	d502      	bpl.n	800bc30 <_printf_float+0x194>
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	440b      	add	r3, r1
 800bc2e:	6123      	str	r3, [r4, #16]
 800bc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc32:	65a3      	str	r3, [r4, #88]	; 0x58
 800bc34:	f04f 0900 	mov.w	r9, #0
 800bc38:	e7d9      	b.n	800bbee <_printf_float+0x152>
 800bc3a:	b913      	cbnz	r3, 800bc42 <_printf_float+0x1a6>
 800bc3c:	6822      	ldr	r2, [r4, #0]
 800bc3e:	07d0      	lsls	r0, r2, #31
 800bc40:	d501      	bpl.n	800bc46 <_printf_float+0x1aa>
 800bc42:	3302      	adds	r3, #2
 800bc44:	e7f3      	b.n	800bc2e <_printf_float+0x192>
 800bc46:	2301      	movs	r3, #1
 800bc48:	e7f1      	b.n	800bc2e <_printf_float+0x192>
 800bc4a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bc4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bc52:	4293      	cmp	r3, r2
 800bc54:	db05      	blt.n	800bc62 <_printf_float+0x1c6>
 800bc56:	6822      	ldr	r2, [r4, #0]
 800bc58:	6123      	str	r3, [r4, #16]
 800bc5a:	07d1      	lsls	r1, r2, #31
 800bc5c:	d5e8      	bpl.n	800bc30 <_printf_float+0x194>
 800bc5e:	3301      	adds	r3, #1
 800bc60:	e7e5      	b.n	800bc2e <_printf_float+0x192>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	bfd4      	ite	le
 800bc66:	f1c3 0302 	rsble	r3, r3, #2
 800bc6a:	2301      	movgt	r3, #1
 800bc6c:	4413      	add	r3, r2
 800bc6e:	e7de      	b.n	800bc2e <_printf_float+0x192>
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	055a      	lsls	r2, r3, #21
 800bc74:	d407      	bmi.n	800bc86 <_printf_float+0x1ea>
 800bc76:	6923      	ldr	r3, [r4, #16]
 800bc78:	4642      	mov	r2, r8
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b8      	blx	r7
 800bc80:	3001      	adds	r0, #1
 800bc82:	d12b      	bne.n	800bcdc <_printf_float+0x240>
 800bc84:	e767      	b.n	800bb56 <_printf_float+0xba>
 800bc86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bc8a:	f240 80dc 	bls.w	800be46 <_printf_float+0x3aa>
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2300      	movs	r3, #0
 800bc92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc96:	f7f4 ff1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d033      	beq.n	800bd06 <_printf_float+0x26a>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	4a41      	ldr	r2, [pc, #260]	; (800bda8 <_printf_float+0x30c>)
 800bca2:	4631      	mov	r1, r6
 800bca4:	4628      	mov	r0, r5
 800bca6:	47b8      	blx	r7
 800bca8:	3001      	adds	r0, #1
 800bcaa:	f43f af54 	beq.w	800bb56 <_printf_float+0xba>
 800bcae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	db02      	blt.n	800bcbc <_printf_float+0x220>
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	07d8      	lsls	r0, r3, #31
 800bcba:	d50f      	bpl.n	800bcdc <_printf_float+0x240>
 800bcbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcc0:	4631      	mov	r1, r6
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	47b8      	blx	r7
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	f43f af45 	beq.w	800bb56 <_printf_float+0xba>
 800bccc:	f04f 0800 	mov.w	r8, #0
 800bcd0:	f104 091a 	add.w	r9, r4, #26
 800bcd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	4543      	cmp	r3, r8
 800bcda:	dc09      	bgt.n	800bcf0 <_printf_float+0x254>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	079b      	lsls	r3, r3, #30
 800bce0:	f100 8103 	bmi.w	800beea <_printf_float+0x44e>
 800bce4:	68e0      	ldr	r0, [r4, #12]
 800bce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bce8:	4298      	cmp	r0, r3
 800bcea:	bfb8      	it	lt
 800bcec:	4618      	movlt	r0, r3
 800bcee:	e734      	b.n	800bb5a <_printf_float+0xbe>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	464a      	mov	r2, r9
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	47b8      	blx	r7
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	f43f af2b 	beq.w	800bb56 <_printf_float+0xba>
 800bd00:	f108 0801 	add.w	r8, r8, #1
 800bd04:	e7e6      	b.n	800bcd4 <_printf_float+0x238>
 800bd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dc2b      	bgt.n	800bd64 <_printf_float+0x2c8>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	4a26      	ldr	r2, [pc, #152]	; (800bda8 <_printf_float+0x30c>)
 800bd10:	4631      	mov	r1, r6
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b8      	blx	r7
 800bd16:	3001      	adds	r0, #1
 800bd18:	f43f af1d 	beq.w	800bb56 <_printf_float+0xba>
 800bd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd1e:	b923      	cbnz	r3, 800bd2a <_printf_float+0x28e>
 800bd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd22:	b913      	cbnz	r3, 800bd2a <_printf_float+0x28e>
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	07d9      	lsls	r1, r3, #31
 800bd28:	d5d8      	bpl.n	800bcdc <_printf_float+0x240>
 800bd2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4628      	mov	r0, r5
 800bd32:	47b8      	blx	r7
 800bd34:	3001      	adds	r0, #1
 800bd36:	f43f af0e 	beq.w	800bb56 <_printf_float+0xba>
 800bd3a:	f04f 0900 	mov.w	r9, #0
 800bd3e:	f104 0a1a 	add.w	sl, r4, #26
 800bd42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd44:	425b      	negs	r3, r3
 800bd46:	454b      	cmp	r3, r9
 800bd48:	dc01      	bgt.n	800bd4e <_printf_float+0x2b2>
 800bd4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd4c:	e794      	b.n	800bc78 <_printf_float+0x1dc>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	4652      	mov	r2, sl
 800bd52:	4631      	mov	r1, r6
 800bd54:	4628      	mov	r0, r5
 800bd56:	47b8      	blx	r7
 800bd58:	3001      	adds	r0, #1
 800bd5a:	f43f aefc 	beq.w	800bb56 <_printf_float+0xba>
 800bd5e:	f109 0901 	add.w	r9, r9, #1
 800bd62:	e7ee      	b.n	800bd42 <_printf_float+0x2a6>
 800bd64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	bfa8      	it	ge
 800bd6c:	461a      	movge	r2, r3
 800bd6e:	2a00      	cmp	r2, #0
 800bd70:	4691      	mov	r9, r2
 800bd72:	dd07      	ble.n	800bd84 <_printf_float+0x2e8>
 800bd74:	4613      	mov	r3, r2
 800bd76:	4631      	mov	r1, r6
 800bd78:	4642      	mov	r2, r8
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	47b8      	blx	r7
 800bd7e:	3001      	adds	r0, #1
 800bd80:	f43f aee9 	beq.w	800bb56 <_printf_float+0xba>
 800bd84:	f104 031a 	add.w	r3, r4, #26
 800bd88:	f04f 0b00 	mov.w	fp, #0
 800bd8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd90:	9306      	str	r3, [sp, #24]
 800bd92:	e015      	b.n	800bdc0 <_printf_float+0x324>
 800bd94:	7fefffff 	.word	0x7fefffff
 800bd98:	0800e4d4 	.word	0x0800e4d4
 800bd9c:	0800e4d0 	.word	0x0800e4d0
 800bda0:	0800e4dc 	.word	0x0800e4dc
 800bda4:	0800e4d8 	.word	0x0800e4d8
 800bda8:	0800e4e0 	.word	0x0800e4e0
 800bdac:	2301      	movs	r3, #1
 800bdae:	9a06      	ldr	r2, [sp, #24]
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	47b8      	blx	r7
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	f43f aecd 	beq.w	800bb56 <_printf_float+0xba>
 800bdbc:	f10b 0b01 	add.w	fp, fp, #1
 800bdc0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bdc4:	ebaa 0309 	sub.w	r3, sl, r9
 800bdc8:	455b      	cmp	r3, fp
 800bdca:	dcef      	bgt.n	800bdac <_printf_float+0x310>
 800bdcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	44d0      	add	r8, sl
 800bdd4:	db15      	blt.n	800be02 <_printf_float+0x366>
 800bdd6:	6823      	ldr	r3, [r4, #0]
 800bdd8:	07da      	lsls	r2, r3, #31
 800bdda:	d412      	bmi.n	800be02 <_printf_float+0x366>
 800bddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdde:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bde0:	eba3 020a 	sub.w	r2, r3, sl
 800bde4:	eba3 0a01 	sub.w	sl, r3, r1
 800bde8:	4592      	cmp	sl, r2
 800bdea:	bfa8      	it	ge
 800bdec:	4692      	movge	sl, r2
 800bdee:	f1ba 0f00 	cmp.w	sl, #0
 800bdf2:	dc0e      	bgt.n	800be12 <_printf_float+0x376>
 800bdf4:	f04f 0800 	mov.w	r8, #0
 800bdf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdfc:	f104 091a 	add.w	r9, r4, #26
 800be00:	e019      	b.n	800be36 <_printf_float+0x39a>
 800be02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be06:	4631      	mov	r1, r6
 800be08:	4628      	mov	r0, r5
 800be0a:	47b8      	blx	r7
 800be0c:	3001      	adds	r0, #1
 800be0e:	d1e5      	bne.n	800bddc <_printf_float+0x340>
 800be10:	e6a1      	b.n	800bb56 <_printf_float+0xba>
 800be12:	4653      	mov	r3, sl
 800be14:	4642      	mov	r2, r8
 800be16:	4631      	mov	r1, r6
 800be18:	4628      	mov	r0, r5
 800be1a:	47b8      	blx	r7
 800be1c:	3001      	adds	r0, #1
 800be1e:	d1e9      	bne.n	800bdf4 <_printf_float+0x358>
 800be20:	e699      	b.n	800bb56 <_printf_float+0xba>
 800be22:	2301      	movs	r3, #1
 800be24:	464a      	mov	r2, r9
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	47b8      	blx	r7
 800be2c:	3001      	adds	r0, #1
 800be2e:	f43f ae92 	beq.w	800bb56 <_printf_float+0xba>
 800be32:	f108 0801 	add.w	r8, r8, #1
 800be36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be3a:	1a9b      	subs	r3, r3, r2
 800be3c:	eba3 030a 	sub.w	r3, r3, sl
 800be40:	4543      	cmp	r3, r8
 800be42:	dcee      	bgt.n	800be22 <_printf_float+0x386>
 800be44:	e74a      	b.n	800bcdc <_printf_float+0x240>
 800be46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be48:	2a01      	cmp	r2, #1
 800be4a:	dc01      	bgt.n	800be50 <_printf_float+0x3b4>
 800be4c:	07db      	lsls	r3, r3, #31
 800be4e:	d53a      	bpl.n	800bec6 <_printf_float+0x42a>
 800be50:	2301      	movs	r3, #1
 800be52:	4642      	mov	r2, r8
 800be54:	4631      	mov	r1, r6
 800be56:	4628      	mov	r0, r5
 800be58:	47b8      	blx	r7
 800be5a:	3001      	adds	r0, #1
 800be5c:	f43f ae7b 	beq.w	800bb56 <_printf_float+0xba>
 800be60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be64:	4631      	mov	r1, r6
 800be66:	4628      	mov	r0, r5
 800be68:	47b8      	blx	r7
 800be6a:	3001      	adds	r0, #1
 800be6c:	f108 0801 	add.w	r8, r8, #1
 800be70:	f43f ae71 	beq.w	800bb56 <_printf_float+0xba>
 800be74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be76:	2200      	movs	r2, #0
 800be78:	f103 3aff 	add.w	sl, r3, #4294967295
 800be7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be80:	2300      	movs	r3, #0
 800be82:	f7f4 fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 800be86:	b9c8      	cbnz	r0, 800bebc <_printf_float+0x420>
 800be88:	4653      	mov	r3, sl
 800be8a:	4642      	mov	r2, r8
 800be8c:	4631      	mov	r1, r6
 800be8e:	4628      	mov	r0, r5
 800be90:	47b8      	blx	r7
 800be92:	3001      	adds	r0, #1
 800be94:	d10e      	bne.n	800beb4 <_printf_float+0x418>
 800be96:	e65e      	b.n	800bb56 <_printf_float+0xba>
 800be98:	2301      	movs	r3, #1
 800be9a:	4652      	mov	r2, sl
 800be9c:	4631      	mov	r1, r6
 800be9e:	4628      	mov	r0, r5
 800bea0:	47b8      	blx	r7
 800bea2:	3001      	adds	r0, #1
 800bea4:	f43f ae57 	beq.w	800bb56 <_printf_float+0xba>
 800bea8:	f108 0801 	add.w	r8, r8, #1
 800beac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beae:	3b01      	subs	r3, #1
 800beb0:	4543      	cmp	r3, r8
 800beb2:	dcf1      	bgt.n	800be98 <_printf_float+0x3fc>
 800beb4:	464b      	mov	r3, r9
 800beb6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800beba:	e6de      	b.n	800bc7a <_printf_float+0x1de>
 800bebc:	f04f 0800 	mov.w	r8, #0
 800bec0:	f104 0a1a 	add.w	sl, r4, #26
 800bec4:	e7f2      	b.n	800beac <_printf_float+0x410>
 800bec6:	2301      	movs	r3, #1
 800bec8:	e7df      	b.n	800be8a <_printf_float+0x3ee>
 800beca:	2301      	movs	r3, #1
 800becc:	464a      	mov	r2, r9
 800bece:	4631      	mov	r1, r6
 800bed0:	4628      	mov	r0, r5
 800bed2:	47b8      	blx	r7
 800bed4:	3001      	adds	r0, #1
 800bed6:	f43f ae3e 	beq.w	800bb56 <_printf_float+0xba>
 800beda:	f108 0801 	add.w	r8, r8, #1
 800bede:	68e3      	ldr	r3, [r4, #12]
 800bee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bee2:	1a9b      	subs	r3, r3, r2
 800bee4:	4543      	cmp	r3, r8
 800bee6:	dcf0      	bgt.n	800beca <_printf_float+0x42e>
 800bee8:	e6fc      	b.n	800bce4 <_printf_float+0x248>
 800beea:	f04f 0800 	mov.w	r8, #0
 800beee:	f104 0919 	add.w	r9, r4, #25
 800bef2:	e7f4      	b.n	800bede <_printf_float+0x442>
 800bef4:	2900      	cmp	r1, #0
 800bef6:	f43f ae8b 	beq.w	800bc10 <_printf_float+0x174>
 800befa:	2300      	movs	r3, #0
 800befc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bf00:	ab09      	add	r3, sp, #36	; 0x24
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	ec49 8b10 	vmov	d0, r8, r9
 800bf08:	6022      	str	r2, [r4, #0]
 800bf0a:	f8cd a004 	str.w	sl, [sp, #4]
 800bf0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf12:	4628      	mov	r0, r5
 800bf14:	f7ff fd2e 	bl	800b974 <__cvt>
 800bf18:	4680      	mov	r8, r0
 800bf1a:	e648      	b.n	800bbae <_printf_float+0x112>

0800bf1c <_printf_common>:
 800bf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf20:	4691      	mov	r9, r2
 800bf22:	461f      	mov	r7, r3
 800bf24:	688a      	ldr	r2, [r1, #8]
 800bf26:	690b      	ldr	r3, [r1, #16]
 800bf28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	bfb8      	it	lt
 800bf30:	4613      	movlt	r3, r2
 800bf32:	f8c9 3000 	str.w	r3, [r9]
 800bf36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	b112      	cbz	r2, 800bf46 <_printf_common+0x2a>
 800bf40:	3301      	adds	r3, #1
 800bf42:	f8c9 3000 	str.w	r3, [r9]
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	0699      	lsls	r1, r3, #26
 800bf4a:	bf42      	ittt	mi
 800bf4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bf50:	3302      	addmi	r3, #2
 800bf52:	f8c9 3000 	strmi.w	r3, [r9]
 800bf56:	6825      	ldr	r5, [r4, #0]
 800bf58:	f015 0506 	ands.w	r5, r5, #6
 800bf5c:	d107      	bne.n	800bf6e <_printf_common+0x52>
 800bf5e:	f104 0a19 	add.w	sl, r4, #25
 800bf62:	68e3      	ldr	r3, [r4, #12]
 800bf64:	f8d9 2000 	ldr.w	r2, [r9]
 800bf68:	1a9b      	subs	r3, r3, r2
 800bf6a:	42ab      	cmp	r3, r5
 800bf6c:	dc28      	bgt.n	800bfc0 <_printf_common+0xa4>
 800bf6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf72:	6822      	ldr	r2, [r4, #0]
 800bf74:	3300      	adds	r3, #0
 800bf76:	bf18      	it	ne
 800bf78:	2301      	movne	r3, #1
 800bf7a:	0692      	lsls	r2, r2, #26
 800bf7c:	d42d      	bmi.n	800bfda <_printf_common+0xbe>
 800bf7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf82:	4639      	mov	r1, r7
 800bf84:	4630      	mov	r0, r6
 800bf86:	47c0      	blx	r8
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d020      	beq.n	800bfce <_printf_common+0xb2>
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	68e5      	ldr	r5, [r4, #12]
 800bf90:	f8d9 2000 	ldr.w	r2, [r9]
 800bf94:	f003 0306 	and.w	r3, r3, #6
 800bf98:	2b04      	cmp	r3, #4
 800bf9a:	bf08      	it	eq
 800bf9c:	1aad      	subeq	r5, r5, r2
 800bf9e:	68a3      	ldr	r3, [r4, #8]
 800bfa0:	6922      	ldr	r2, [r4, #16]
 800bfa2:	bf0c      	ite	eq
 800bfa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfa8:	2500      	movne	r5, #0
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	bfc4      	itt	gt
 800bfae:	1a9b      	subgt	r3, r3, r2
 800bfb0:	18ed      	addgt	r5, r5, r3
 800bfb2:	f04f 0900 	mov.w	r9, #0
 800bfb6:	341a      	adds	r4, #26
 800bfb8:	454d      	cmp	r5, r9
 800bfba:	d11a      	bne.n	800bff2 <_printf_common+0xd6>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	e008      	b.n	800bfd2 <_printf_common+0xb6>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	4652      	mov	r2, sl
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	47c0      	blx	r8
 800bfca:	3001      	adds	r0, #1
 800bfcc:	d103      	bne.n	800bfd6 <_printf_common+0xba>
 800bfce:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd6:	3501      	adds	r5, #1
 800bfd8:	e7c3      	b.n	800bf62 <_printf_common+0x46>
 800bfda:	18e1      	adds	r1, r4, r3
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	2030      	movs	r0, #48	; 0x30
 800bfe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfe4:	4422      	add	r2, r4
 800bfe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfee:	3302      	adds	r3, #2
 800bff0:	e7c5      	b.n	800bf7e <_printf_common+0x62>
 800bff2:	2301      	movs	r3, #1
 800bff4:	4622      	mov	r2, r4
 800bff6:	4639      	mov	r1, r7
 800bff8:	4630      	mov	r0, r6
 800bffa:	47c0      	blx	r8
 800bffc:	3001      	adds	r0, #1
 800bffe:	d0e6      	beq.n	800bfce <_printf_common+0xb2>
 800c000:	f109 0901 	add.w	r9, r9, #1
 800c004:	e7d8      	b.n	800bfb8 <_printf_common+0x9c>
	...

0800c008 <_printf_i>:
 800c008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c00c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c010:	460c      	mov	r4, r1
 800c012:	7e09      	ldrb	r1, [r1, #24]
 800c014:	b085      	sub	sp, #20
 800c016:	296e      	cmp	r1, #110	; 0x6e
 800c018:	4617      	mov	r7, r2
 800c01a:	4606      	mov	r6, r0
 800c01c:	4698      	mov	r8, r3
 800c01e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c020:	f000 80b3 	beq.w	800c18a <_printf_i+0x182>
 800c024:	d822      	bhi.n	800c06c <_printf_i+0x64>
 800c026:	2963      	cmp	r1, #99	; 0x63
 800c028:	d036      	beq.n	800c098 <_printf_i+0x90>
 800c02a:	d80a      	bhi.n	800c042 <_printf_i+0x3a>
 800c02c:	2900      	cmp	r1, #0
 800c02e:	f000 80b9 	beq.w	800c1a4 <_printf_i+0x19c>
 800c032:	2958      	cmp	r1, #88	; 0x58
 800c034:	f000 8083 	beq.w	800c13e <_printf_i+0x136>
 800c038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c03c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c040:	e032      	b.n	800c0a8 <_printf_i+0xa0>
 800c042:	2964      	cmp	r1, #100	; 0x64
 800c044:	d001      	beq.n	800c04a <_printf_i+0x42>
 800c046:	2969      	cmp	r1, #105	; 0x69
 800c048:	d1f6      	bne.n	800c038 <_printf_i+0x30>
 800c04a:	6820      	ldr	r0, [r4, #0]
 800c04c:	6813      	ldr	r3, [r2, #0]
 800c04e:	0605      	lsls	r5, r0, #24
 800c050:	f103 0104 	add.w	r1, r3, #4
 800c054:	d52a      	bpl.n	800c0ac <_printf_i+0xa4>
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6011      	str	r1, [r2, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	da03      	bge.n	800c066 <_printf_i+0x5e>
 800c05e:	222d      	movs	r2, #45	; 0x2d
 800c060:	425b      	negs	r3, r3
 800c062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c066:	486f      	ldr	r0, [pc, #444]	; (800c224 <_printf_i+0x21c>)
 800c068:	220a      	movs	r2, #10
 800c06a:	e039      	b.n	800c0e0 <_printf_i+0xd8>
 800c06c:	2973      	cmp	r1, #115	; 0x73
 800c06e:	f000 809d 	beq.w	800c1ac <_printf_i+0x1a4>
 800c072:	d808      	bhi.n	800c086 <_printf_i+0x7e>
 800c074:	296f      	cmp	r1, #111	; 0x6f
 800c076:	d020      	beq.n	800c0ba <_printf_i+0xb2>
 800c078:	2970      	cmp	r1, #112	; 0x70
 800c07a:	d1dd      	bne.n	800c038 <_printf_i+0x30>
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	f043 0320 	orr.w	r3, r3, #32
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	e003      	b.n	800c08e <_printf_i+0x86>
 800c086:	2975      	cmp	r1, #117	; 0x75
 800c088:	d017      	beq.n	800c0ba <_printf_i+0xb2>
 800c08a:	2978      	cmp	r1, #120	; 0x78
 800c08c:	d1d4      	bne.n	800c038 <_printf_i+0x30>
 800c08e:	2378      	movs	r3, #120	; 0x78
 800c090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c094:	4864      	ldr	r0, [pc, #400]	; (800c228 <_printf_i+0x220>)
 800c096:	e055      	b.n	800c144 <_printf_i+0x13c>
 800c098:	6813      	ldr	r3, [r2, #0]
 800c09a:	1d19      	adds	r1, r3, #4
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	6011      	str	r1, [r2, #0]
 800c0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e08c      	b.n	800c1c6 <_printf_i+0x1be>
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6011      	str	r1, [r2, #0]
 800c0b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c0b4:	bf18      	it	ne
 800c0b6:	b21b      	sxthne	r3, r3
 800c0b8:	e7cf      	b.n	800c05a <_printf_i+0x52>
 800c0ba:	6813      	ldr	r3, [r2, #0]
 800c0bc:	6825      	ldr	r5, [r4, #0]
 800c0be:	1d18      	adds	r0, r3, #4
 800c0c0:	6010      	str	r0, [r2, #0]
 800c0c2:	0628      	lsls	r0, r5, #24
 800c0c4:	d501      	bpl.n	800c0ca <_printf_i+0xc2>
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	e002      	b.n	800c0d0 <_printf_i+0xc8>
 800c0ca:	0668      	lsls	r0, r5, #25
 800c0cc:	d5fb      	bpl.n	800c0c6 <_printf_i+0xbe>
 800c0ce:	881b      	ldrh	r3, [r3, #0]
 800c0d0:	4854      	ldr	r0, [pc, #336]	; (800c224 <_printf_i+0x21c>)
 800c0d2:	296f      	cmp	r1, #111	; 0x6f
 800c0d4:	bf14      	ite	ne
 800c0d6:	220a      	movne	r2, #10
 800c0d8:	2208      	moveq	r2, #8
 800c0da:	2100      	movs	r1, #0
 800c0dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0e0:	6865      	ldr	r5, [r4, #4]
 800c0e2:	60a5      	str	r5, [r4, #8]
 800c0e4:	2d00      	cmp	r5, #0
 800c0e6:	f2c0 8095 	blt.w	800c214 <_printf_i+0x20c>
 800c0ea:	6821      	ldr	r1, [r4, #0]
 800c0ec:	f021 0104 	bic.w	r1, r1, #4
 800c0f0:	6021      	str	r1, [r4, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d13d      	bne.n	800c172 <_printf_i+0x16a>
 800c0f6:	2d00      	cmp	r5, #0
 800c0f8:	f040 808e 	bne.w	800c218 <_printf_i+0x210>
 800c0fc:	4665      	mov	r5, ip
 800c0fe:	2a08      	cmp	r2, #8
 800c100:	d10b      	bne.n	800c11a <_printf_i+0x112>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	07db      	lsls	r3, r3, #31
 800c106:	d508      	bpl.n	800c11a <_printf_i+0x112>
 800c108:	6923      	ldr	r3, [r4, #16]
 800c10a:	6862      	ldr	r2, [r4, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	bfde      	ittt	le
 800c110:	2330      	movle	r3, #48	; 0x30
 800c112:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c11a:	ebac 0305 	sub.w	r3, ip, r5
 800c11e:	6123      	str	r3, [r4, #16]
 800c120:	f8cd 8000 	str.w	r8, [sp]
 800c124:	463b      	mov	r3, r7
 800c126:	aa03      	add	r2, sp, #12
 800c128:	4621      	mov	r1, r4
 800c12a:	4630      	mov	r0, r6
 800c12c:	f7ff fef6 	bl	800bf1c <_printf_common>
 800c130:	3001      	adds	r0, #1
 800c132:	d14d      	bne.n	800c1d0 <_printf_i+0x1c8>
 800c134:	f04f 30ff 	mov.w	r0, #4294967295
 800c138:	b005      	add	sp, #20
 800c13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c13e:	4839      	ldr	r0, [pc, #228]	; (800c224 <_printf_i+0x21c>)
 800c140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c144:	6813      	ldr	r3, [r2, #0]
 800c146:	6821      	ldr	r1, [r4, #0]
 800c148:	1d1d      	adds	r5, r3, #4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6015      	str	r5, [r2, #0]
 800c14e:	060a      	lsls	r2, r1, #24
 800c150:	d50b      	bpl.n	800c16a <_printf_i+0x162>
 800c152:	07ca      	lsls	r2, r1, #31
 800c154:	bf44      	itt	mi
 800c156:	f041 0120 	orrmi.w	r1, r1, #32
 800c15a:	6021      	strmi	r1, [r4, #0]
 800c15c:	b91b      	cbnz	r3, 800c166 <_printf_i+0x15e>
 800c15e:	6822      	ldr	r2, [r4, #0]
 800c160:	f022 0220 	bic.w	r2, r2, #32
 800c164:	6022      	str	r2, [r4, #0]
 800c166:	2210      	movs	r2, #16
 800c168:	e7b7      	b.n	800c0da <_printf_i+0xd2>
 800c16a:	064d      	lsls	r5, r1, #25
 800c16c:	bf48      	it	mi
 800c16e:	b29b      	uxthmi	r3, r3
 800c170:	e7ef      	b.n	800c152 <_printf_i+0x14a>
 800c172:	4665      	mov	r5, ip
 800c174:	fbb3 f1f2 	udiv	r1, r3, r2
 800c178:	fb02 3311 	mls	r3, r2, r1, r3
 800c17c:	5cc3      	ldrb	r3, [r0, r3]
 800c17e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c182:	460b      	mov	r3, r1
 800c184:	2900      	cmp	r1, #0
 800c186:	d1f5      	bne.n	800c174 <_printf_i+0x16c>
 800c188:	e7b9      	b.n	800c0fe <_printf_i+0xf6>
 800c18a:	6813      	ldr	r3, [r2, #0]
 800c18c:	6825      	ldr	r5, [r4, #0]
 800c18e:	6961      	ldr	r1, [r4, #20]
 800c190:	1d18      	adds	r0, r3, #4
 800c192:	6010      	str	r0, [r2, #0]
 800c194:	0628      	lsls	r0, r5, #24
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	d501      	bpl.n	800c19e <_printf_i+0x196>
 800c19a:	6019      	str	r1, [r3, #0]
 800c19c:	e002      	b.n	800c1a4 <_printf_i+0x19c>
 800c19e:	066a      	lsls	r2, r5, #25
 800c1a0:	d5fb      	bpl.n	800c19a <_printf_i+0x192>
 800c1a2:	8019      	strh	r1, [r3, #0]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	6123      	str	r3, [r4, #16]
 800c1a8:	4665      	mov	r5, ip
 800c1aa:	e7b9      	b.n	800c120 <_printf_i+0x118>
 800c1ac:	6813      	ldr	r3, [r2, #0]
 800c1ae:	1d19      	adds	r1, r3, #4
 800c1b0:	6011      	str	r1, [r2, #0]
 800c1b2:	681d      	ldr	r5, [r3, #0]
 800c1b4:	6862      	ldr	r2, [r4, #4]
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f7f4 f819 	bl	80001f0 <memchr>
 800c1be:	b108      	cbz	r0, 800c1c4 <_printf_i+0x1bc>
 800c1c0:	1b40      	subs	r0, r0, r5
 800c1c2:	6060      	str	r0, [r4, #4]
 800c1c4:	6863      	ldr	r3, [r4, #4]
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1ce:	e7a7      	b.n	800c120 <_printf_i+0x118>
 800c1d0:	6923      	ldr	r3, [r4, #16]
 800c1d2:	462a      	mov	r2, r5
 800c1d4:	4639      	mov	r1, r7
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	47c0      	blx	r8
 800c1da:	3001      	adds	r0, #1
 800c1dc:	d0aa      	beq.n	800c134 <_printf_i+0x12c>
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	079b      	lsls	r3, r3, #30
 800c1e2:	d413      	bmi.n	800c20c <_printf_i+0x204>
 800c1e4:	68e0      	ldr	r0, [r4, #12]
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	4298      	cmp	r0, r3
 800c1ea:	bfb8      	it	lt
 800c1ec:	4618      	movlt	r0, r3
 800c1ee:	e7a3      	b.n	800c138 <_printf_i+0x130>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	464a      	mov	r2, r9
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	47c0      	blx	r8
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	d09a      	beq.n	800c134 <_printf_i+0x12c>
 800c1fe:	3501      	adds	r5, #1
 800c200:	68e3      	ldr	r3, [r4, #12]
 800c202:	9a03      	ldr	r2, [sp, #12]
 800c204:	1a9b      	subs	r3, r3, r2
 800c206:	42ab      	cmp	r3, r5
 800c208:	dcf2      	bgt.n	800c1f0 <_printf_i+0x1e8>
 800c20a:	e7eb      	b.n	800c1e4 <_printf_i+0x1dc>
 800c20c:	2500      	movs	r5, #0
 800c20e:	f104 0919 	add.w	r9, r4, #25
 800c212:	e7f5      	b.n	800c200 <_printf_i+0x1f8>
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1ac      	bne.n	800c172 <_printf_i+0x16a>
 800c218:	7803      	ldrb	r3, [r0, #0]
 800c21a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c21e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c222:	e76c      	b.n	800c0fe <_printf_i+0xf6>
 800c224:	0800e4e2 	.word	0x0800e4e2
 800c228:	0800e4f3 	.word	0x0800e4f3

0800c22c <siprintf>:
 800c22c:	b40e      	push	{r1, r2, r3}
 800c22e:	b500      	push	{lr}
 800c230:	b09c      	sub	sp, #112	; 0x70
 800c232:	ab1d      	add	r3, sp, #116	; 0x74
 800c234:	9002      	str	r0, [sp, #8]
 800c236:	9006      	str	r0, [sp, #24]
 800c238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c23c:	4809      	ldr	r0, [pc, #36]	; (800c264 <siprintf+0x38>)
 800c23e:	9107      	str	r1, [sp, #28]
 800c240:	9104      	str	r1, [sp, #16]
 800c242:	4909      	ldr	r1, [pc, #36]	; (800c268 <siprintf+0x3c>)
 800c244:	f853 2b04 	ldr.w	r2, [r3], #4
 800c248:	9105      	str	r1, [sp, #20]
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	a902      	add	r1, sp, #8
 800c250:	f001 fb80 	bl	800d954 <_svfiprintf_r>
 800c254:	9b02      	ldr	r3, [sp, #8]
 800c256:	2200      	movs	r2, #0
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	b01c      	add	sp, #112	; 0x70
 800c25c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c260:	b003      	add	sp, #12
 800c262:	4770      	bx	lr
 800c264:	2000008c 	.word	0x2000008c
 800c268:	ffff0208 	.word	0xffff0208

0800c26c <strncmp>:
 800c26c:	b510      	push	{r4, lr}
 800c26e:	b16a      	cbz	r2, 800c28c <strncmp+0x20>
 800c270:	3901      	subs	r1, #1
 800c272:	1884      	adds	r4, r0, r2
 800c274:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c278:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d103      	bne.n	800c288 <strncmp+0x1c>
 800c280:	42a0      	cmp	r0, r4
 800c282:	d001      	beq.n	800c288 <strncmp+0x1c>
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1f5      	bne.n	800c274 <strncmp+0x8>
 800c288:	1a98      	subs	r0, r3, r2
 800c28a:	bd10      	pop	{r4, pc}
 800c28c:	4610      	mov	r0, r2
 800c28e:	e7fc      	b.n	800c28a <strncmp+0x1e>

0800c290 <strncpy>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	3901      	subs	r1, #1
 800c294:	4604      	mov	r4, r0
 800c296:	b902      	cbnz	r2, 800c29a <strncpy+0xa>
 800c298:	bd70      	pop	{r4, r5, r6, pc}
 800c29a:	4623      	mov	r3, r4
 800c29c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c2a0:	f803 5b01 	strb.w	r5, [r3], #1
 800c2a4:	1e56      	subs	r6, r2, #1
 800c2a6:	b92d      	cbnz	r5, 800c2b4 <strncpy+0x24>
 800c2a8:	4414      	add	r4, r2
 800c2aa:	42a3      	cmp	r3, r4
 800c2ac:	d0f4      	beq.n	800c298 <strncpy+0x8>
 800c2ae:	f803 5b01 	strb.w	r5, [r3], #1
 800c2b2:	e7fa      	b.n	800c2aa <strncpy+0x1a>
 800c2b4:	461c      	mov	r4, r3
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	e7ed      	b.n	800c296 <strncpy+0x6>
	...

0800c2bc <strtok>:
 800c2bc:	4b13      	ldr	r3, [pc, #76]	; (800c30c <strtok+0x50>)
 800c2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c2:	681d      	ldr	r5, [r3, #0]
 800c2c4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800c2c6:	4606      	mov	r6, r0
 800c2c8:	460f      	mov	r7, r1
 800c2ca:	b9b4      	cbnz	r4, 800c2fa <strtok+0x3e>
 800c2cc:	2050      	movs	r0, #80	; 0x50
 800c2ce:	f000 ff31 	bl	800d134 <malloc>
 800c2d2:	65a8      	str	r0, [r5, #88]	; 0x58
 800c2d4:	e9c0 4400 	strd	r4, r4, [r0]
 800c2d8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c2dc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c2e0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c2e4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c2e8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c2ec:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c2f0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c2f4:	6184      	str	r4, [r0, #24]
 800c2f6:	7704      	strb	r4, [r0, #28]
 800c2f8:	6244      	str	r4, [r0, #36]	; 0x24
 800c2fa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4630      	mov	r0, r6
 800c300:	2301      	movs	r3, #1
 800c302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c306:	f000 b803 	b.w	800c310 <__strtok_r>
 800c30a:	bf00      	nop
 800c30c:	2000008c 	.word	0x2000008c

0800c310 <__strtok_r>:
 800c310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c312:	b918      	cbnz	r0, 800c31c <__strtok_r+0xc>
 800c314:	6810      	ldr	r0, [r2, #0]
 800c316:	b908      	cbnz	r0, 800c31c <__strtok_r+0xc>
 800c318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31a:	4620      	mov	r0, r4
 800c31c:	4604      	mov	r4, r0
 800c31e:	460f      	mov	r7, r1
 800c320:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c324:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c328:	b91e      	cbnz	r6, 800c332 <__strtok_r+0x22>
 800c32a:	b96d      	cbnz	r5, 800c348 <__strtok_r+0x38>
 800c32c:	6015      	str	r5, [r2, #0]
 800c32e:	4628      	mov	r0, r5
 800c330:	e7f2      	b.n	800c318 <__strtok_r+0x8>
 800c332:	42b5      	cmp	r5, r6
 800c334:	d1f6      	bne.n	800c324 <__strtok_r+0x14>
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1ef      	bne.n	800c31a <__strtok_r+0xa>
 800c33a:	6014      	str	r4, [r2, #0]
 800c33c:	7003      	strb	r3, [r0, #0]
 800c33e:	e7eb      	b.n	800c318 <__strtok_r+0x8>
 800c340:	462b      	mov	r3, r5
 800c342:	e00d      	b.n	800c360 <__strtok_r+0x50>
 800c344:	b926      	cbnz	r6, 800c350 <__strtok_r+0x40>
 800c346:	461c      	mov	r4, r3
 800c348:	4623      	mov	r3, r4
 800c34a:	460f      	mov	r7, r1
 800c34c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800c350:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c354:	42b5      	cmp	r5, r6
 800c356:	d1f5      	bne.n	800c344 <__strtok_r+0x34>
 800c358:	2d00      	cmp	r5, #0
 800c35a:	d0f1      	beq.n	800c340 <__strtok_r+0x30>
 800c35c:	2100      	movs	r1, #0
 800c35e:	7021      	strb	r1, [r4, #0]
 800c360:	6013      	str	r3, [r2, #0]
 800c362:	e7d9      	b.n	800c318 <__strtok_r+0x8>

0800c364 <_strtol_l.isra.0>:
 800c364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c368:	4680      	mov	r8, r0
 800c36a:	4689      	mov	r9, r1
 800c36c:	4692      	mov	sl, r2
 800c36e:	461e      	mov	r6, r3
 800c370:	460f      	mov	r7, r1
 800c372:	463d      	mov	r5, r7
 800c374:	9808      	ldr	r0, [sp, #32]
 800c376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c37a:	f000 fec9 	bl	800d110 <__locale_ctype_ptr_l>
 800c37e:	4420      	add	r0, r4
 800c380:	7843      	ldrb	r3, [r0, #1]
 800c382:	f013 0308 	ands.w	r3, r3, #8
 800c386:	d132      	bne.n	800c3ee <_strtol_l.isra.0+0x8a>
 800c388:	2c2d      	cmp	r4, #45	; 0x2d
 800c38a:	d132      	bne.n	800c3f2 <_strtol_l.isra.0+0x8e>
 800c38c:	787c      	ldrb	r4, [r7, #1]
 800c38e:	1cbd      	adds	r5, r7, #2
 800c390:	2201      	movs	r2, #1
 800c392:	2e00      	cmp	r6, #0
 800c394:	d05d      	beq.n	800c452 <_strtol_l.isra.0+0xee>
 800c396:	2e10      	cmp	r6, #16
 800c398:	d109      	bne.n	800c3ae <_strtol_l.isra.0+0x4a>
 800c39a:	2c30      	cmp	r4, #48	; 0x30
 800c39c:	d107      	bne.n	800c3ae <_strtol_l.isra.0+0x4a>
 800c39e:	782b      	ldrb	r3, [r5, #0]
 800c3a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c3a4:	2b58      	cmp	r3, #88	; 0x58
 800c3a6:	d14f      	bne.n	800c448 <_strtol_l.isra.0+0xe4>
 800c3a8:	786c      	ldrb	r4, [r5, #1]
 800c3aa:	2610      	movs	r6, #16
 800c3ac:	3502      	adds	r5, #2
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	bf14      	ite	ne
 800c3b2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c3b6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c3ba:	2700      	movs	r7, #0
 800c3bc:	fbb1 fcf6 	udiv	ip, r1, r6
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c3c6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c3ca:	2b09      	cmp	r3, #9
 800c3cc:	d817      	bhi.n	800c3fe <_strtol_l.isra.0+0x9a>
 800c3ce:	461c      	mov	r4, r3
 800c3d0:	42a6      	cmp	r6, r4
 800c3d2:	dd23      	ble.n	800c41c <_strtol_l.isra.0+0xb8>
 800c3d4:	1c7b      	adds	r3, r7, #1
 800c3d6:	d007      	beq.n	800c3e8 <_strtol_l.isra.0+0x84>
 800c3d8:	4584      	cmp	ip, r0
 800c3da:	d31c      	bcc.n	800c416 <_strtol_l.isra.0+0xb2>
 800c3dc:	d101      	bne.n	800c3e2 <_strtol_l.isra.0+0x7e>
 800c3de:	45a6      	cmp	lr, r4
 800c3e0:	db19      	blt.n	800c416 <_strtol_l.isra.0+0xb2>
 800c3e2:	fb00 4006 	mla	r0, r0, r6, r4
 800c3e6:	2701      	movs	r7, #1
 800c3e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3ec:	e7eb      	b.n	800c3c6 <_strtol_l.isra.0+0x62>
 800c3ee:	462f      	mov	r7, r5
 800c3f0:	e7bf      	b.n	800c372 <_strtol_l.isra.0+0xe>
 800c3f2:	2c2b      	cmp	r4, #43	; 0x2b
 800c3f4:	bf04      	itt	eq
 800c3f6:	1cbd      	addeq	r5, r7, #2
 800c3f8:	787c      	ldrbeq	r4, [r7, #1]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	e7c9      	b.n	800c392 <_strtol_l.isra.0+0x2e>
 800c3fe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c402:	2b19      	cmp	r3, #25
 800c404:	d801      	bhi.n	800c40a <_strtol_l.isra.0+0xa6>
 800c406:	3c37      	subs	r4, #55	; 0x37
 800c408:	e7e2      	b.n	800c3d0 <_strtol_l.isra.0+0x6c>
 800c40a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c40e:	2b19      	cmp	r3, #25
 800c410:	d804      	bhi.n	800c41c <_strtol_l.isra.0+0xb8>
 800c412:	3c57      	subs	r4, #87	; 0x57
 800c414:	e7dc      	b.n	800c3d0 <_strtol_l.isra.0+0x6c>
 800c416:	f04f 37ff 	mov.w	r7, #4294967295
 800c41a:	e7e5      	b.n	800c3e8 <_strtol_l.isra.0+0x84>
 800c41c:	1c7b      	adds	r3, r7, #1
 800c41e:	d108      	bne.n	800c432 <_strtol_l.isra.0+0xce>
 800c420:	2322      	movs	r3, #34	; 0x22
 800c422:	f8c8 3000 	str.w	r3, [r8]
 800c426:	4608      	mov	r0, r1
 800c428:	f1ba 0f00 	cmp.w	sl, #0
 800c42c:	d107      	bne.n	800c43e <_strtol_l.isra.0+0xda>
 800c42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c432:	b102      	cbz	r2, 800c436 <_strtol_l.isra.0+0xd2>
 800c434:	4240      	negs	r0, r0
 800c436:	f1ba 0f00 	cmp.w	sl, #0
 800c43a:	d0f8      	beq.n	800c42e <_strtol_l.isra.0+0xca>
 800c43c:	b10f      	cbz	r7, 800c442 <_strtol_l.isra.0+0xde>
 800c43e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c442:	f8ca 9000 	str.w	r9, [sl]
 800c446:	e7f2      	b.n	800c42e <_strtol_l.isra.0+0xca>
 800c448:	2430      	movs	r4, #48	; 0x30
 800c44a:	2e00      	cmp	r6, #0
 800c44c:	d1af      	bne.n	800c3ae <_strtol_l.isra.0+0x4a>
 800c44e:	2608      	movs	r6, #8
 800c450:	e7ad      	b.n	800c3ae <_strtol_l.isra.0+0x4a>
 800c452:	2c30      	cmp	r4, #48	; 0x30
 800c454:	d0a3      	beq.n	800c39e <_strtol_l.isra.0+0x3a>
 800c456:	260a      	movs	r6, #10
 800c458:	e7a9      	b.n	800c3ae <_strtol_l.isra.0+0x4a>
	...

0800c45c <strtol>:
 800c45c:	4b08      	ldr	r3, [pc, #32]	; (800c480 <strtol+0x24>)
 800c45e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c460:	681c      	ldr	r4, [r3, #0]
 800c462:	4d08      	ldr	r5, [pc, #32]	; (800c484 <strtol+0x28>)
 800c464:	6a23      	ldr	r3, [r4, #32]
 800c466:	2b00      	cmp	r3, #0
 800c468:	bf08      	it	eq
 800c46a:	462b      	moveq	r3, r5
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	4613      	mov	r3, r2
 800c470:	460a      	mov	r2, r1
 800c472:	4601      	mov	r1, r0
 800c474:	4620      	mov	r0, r4
 800c476:	f7ff ff75 	bl	800c364 <_strtol_l.isra.0>
 800c47a:	b003      	add	sp, #12
 800c47c:	bd30      	pop	{r4, r5, pc}
 800c47e:	bf00      	nop
 800c480:	2000008c 	.word	0x2000008c
 800c484:	200000f0 	.word	0x200000f0

0800c488 <quorem>:
 800c488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	6903      	ldr	r3, [r0, #16]
 800c48e:	690c      	ldr	r4, [r1, #16]
 800c490:	42a3      	cmp	r3, r4
 800c492:	4680      	mov	r8, r0
 800c494:	f2c0 8082 	blt.w	800c59c <quorem+0x114>
 800c498:	3c01      	subs	r4, #1
 800c49a:	f101 0714 	add.w	r7, r1, #20
 800c49e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c4a2:	f100 0614 	add.w	r6, r0, #20
 800c4a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c4aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c4ae:	eb06 030c 	add.w	r3, r6, ip
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	eb07 090c 	add.w	r9, r7, ip
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	fbb0 f5f5 	udiv	r5, r0, r5
 800c4be:	b395      	cbz	r5, 800c526 <quorem+0x9e>
 800c4c0:	f04f 0a00 	mov.w	sl, #0
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	46b6      	mov	lr, r6
 800c4c8:	46d3      	mov	fp, sl
 800c4ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800c4ce:	b293      	uxth	r3, r2
 800c4d0:	fb05 a303 	mla	r3, r5, r3, sl
 800c4d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	ebab 0303 	sub.w	r3, fp, r3
 800c4de:	0c12      	lsrs	r2, r2, #16
 800c4e0:	f8de b000 	ldr.w	fp, [lr]
 800c4e4:	fb05 a202 	mla	r2, r5, r2, sl
 800c4e8:	fa13 f38b 	uxtah	r3, r3, fp
 800c4ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c4f0:	fa1f fb82 	uxth.w	fp, r2
 800c4f4:	f8de 2000 	ldr.w	r2, [lr]
 800c4f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c4fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c500:	b29b      	uxth	r3, r3
 800c502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c506:	4581      	cmp	r9, r0
 800c508:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c50c:	f84e 3b04 	str.w	r3, [lr], #4
 800c510:	d2db      	bcs.n	800c4ca <quorem+0x42>
 800c512:	f856 300c 	ldr.w	r3, [r6, ip]
 800c516:	b933      	cbnz	r3, 800c526 <quorem+0x9e>
 800c518:	9b01      	ldr	r3, [sp, #4]
 800c51a:	3b04      	subs	r3, #4
 800c51c:	429e      	cmp	r6, r3
 800c51e:	461a      	mov	r2, r3
 800c520:	d330      	bcc.n	800c584 <quorem+0xfc>
 800c522:	f8c8 4010 	str.w	r4, [r8, #16]
 800c526:	4640      	mov	r0, r8
 800c528:	f001 f83e 	bl	800d5a8 <__mcmp>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	db25      	blt.n	800c57c <quorem+0xf4>
 800c530:	3501      	adds	r5, #1
 800c532:	4630      	mov	r0, r6
 800c534:	f04f 0c00 	mov.w	ip, #0
 800c538:	f857 2b04 	ldr.w	r2, [r7], #4
 800c53c:	f8d0 e000 	ldr.w	lr, [r0]
 800c540:	b293      	uxth	r3, r2
 800c542:	ebac 0303 	sub.w	r3, ip, r3
 800c546:	0c12      	lsrs	r2, r2, #16
 800c548:	fa13 f38e 	uxtah	r3, r3, lr
 800c54c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c554:	b29b      	uxth	r3, r3
 800c556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c55a:	45b9      	cmp	r9, r7
 800c55c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c560:	f840 3b04 	str.w	r3, [r0], #4
 800c564:	d2e8      	bcs.n	800c538 <quorem+0xb0>
 800c566:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c56a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c56e:	b92a      	cbnz	r2, 800c57c <quorem+0xf4>
 800c570:	3b04      	subs	r3, #4
 800c572:	429e      	cmp	r6, r3
 800c574:	461a      	mov	r2, r3
 800c576:	d30b      	bcc.n	800c590 <quorem+0x108>
 800c578:	f8c8 4010 	str.w	r4, [r8, #16]
 800c57c:	4628      	mov	r0, r5
 800c57e:	b003      	add	sp, #12
 800c580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c584:	6812      	ldr	r2, [r2, #0]
 800c586:	3b04      	subs	r3, #4
 800c588:	2a00      	cmp	r2, #0
 800c58a:	d1ca      	bne.n	800c522 <quorem+0x9a>
 800c58c:	3c01      	subs	r4, #1
 800c58e:	e7c5      	b.n	800c51c <quorem+0x94>
 800c590:	6812      	ldr	r2, [r2, #0]
 800c592:	3b04      	subs	r3, #4
 800c594:	2a00      	cmp	r2, #0
 800c596:	d1ef      	bne.n	800c578 <quorem+0xf0>
 800c598:	3c01      	subs	r4, #1
 800c59a:	e7ea      	b.n	800c572 <quorem+0xea>
 800c59c:	2000      	movs	r0, #0
 800c59e:	e7ee      	b.n	800c57e <quorem+0xf6>

0800c5a0 <_dtoa_r>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	ec57 6b10 	vmov	r6, r7, d0
 800c5a8:	b097      	sub	sp, #92	; 0x5c
 800c5aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c5ac:	9106      	str	r1, [sp, #24]
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800c5b2:	9312      	str	r3, [sp, #72]	; 0x48
 800c5b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c5b8:	e9cd 6700 	strd	r6, r7, [sp]
 800c5bc:	b93d      	cbnz	r5, 800c5ce <_dtoa_r+0x2e>
 800c5be:	2010      	movs	r0, #16
 800c5c0:	f000 fdb8 	bl	800d134 <malloc>
 800c5c4:	6260      	str	r0, [r4, #36]	; 0x24
 800c5c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c5ca:	6005      	str	r5, [r0, #0]
 800c5cc:	60c5      	str	r5, [r0, #12]
 800c5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5d0:	6819      	ldr	r1, [r3, #0]
 800c5d2:	b151      	cbz	r1, 800c5ea <_dtoa_r+0x4a>
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	604a      	str	r2, [r1, #4]
 800c5d8:	2301      	movs	r3, #1
 800c5da:	4093      	lsls	r3, r2
 800c5dc:	608b      	str	r3, [r1, #8]
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f000 fe01 	bl	800d1e6 <_Bfree>
 800c5e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	601a      	str	r2, [r3, #0]
 800c5ea:	1e3b      	subs	r3, r7, #0
 800c5ec:	bfbb      	ittet	lt
 800c5ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c5f2:	9301      	strlt	r3, [sp, #4]
 800c5f4:	2300      	movge	r3, #0
 800c5f6:	2201      	movlt	r2, #1
 800c5f8:	bfac      	ite	ge
 800c5fa:	f8c8 3000 	strge.w	r3, [r8]
 800c5fe:	f8c8 2000 	strlt.w	r2, [r8]
 800c602:	4baf      	ldr	r3, [pc, #700]	; (800c8c0 <_dtoa_r+0x320>)
 800c604:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c608:	ea33 0308 	bics.w	r3, r3, r8
 800c60c:	d114      	bne.n	800c638 <_dtoa_r+0x98>
 800c60e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c610:	f242 730f 	movw	r3, #9999	; 0x270f
 800c614:	6013      	str	r3, [r2, #0]
 800c616:	9b00      	ldr	r3, [sp, #0]
 800c618:	b923      	cbnz	r3, 800c624 <_dtoa_r+0x84>
 800c61a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c61e:	2800      	cmp	r0, #0
 800c620:	f000 8542 	beq.w	800d0a8 <_dtoa_r+0xb08>
 800c624:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c626:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c8d4 <_dtoa_r+0x334>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 8544 	beq.w	800d0b8 <_dtoa_r+0xb18>
 800c630:	f10b 0303 	add.w	r3, fp, #3
 800c634:	f000 bd3e 	b.w	800d0b4 <_dtoa_r+0xb14>
 800c638:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c63c:	2200      	movs	r2, #0
 800c63e:	2300      	movs	r3, #0
 800c640:	4630      	mov	r0, r6
 800c642:	4639      	mov	r1, r7
 800c644:	f7f4 fa48 	bl	8000ad8 <__aeabi_dcmpeq>
 800c648:	4681      	mov	r9, r0
 800c64a:	b168      	cbz	r0, 800c668 <_dtoa_r+0xc8>
 800c64c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c64e:	2301      	movs	r3, #1
 800c650:	6013      	str	r3, [r2, #0]
 800c652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c654:	2b00      	cmp	r3, #0
 800c656:	f000 8524 	beq.w	800d0a2 <_dtoa_r+0xb02>
 800c65a:	4b9a      	ldr	r3, [pc, #616]	; (800c8c4 <_dtoa_r+0x324>)
 800c65c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c65e:	f103 3bff 	add.w	fp, r3, #4294967295
 800c662:	6013      	str	r3, [r2, #0]
 800c664:	f000 bd28 	b.w	800d0b8 <_dtoa_r+0xb18>
 800c668:	aa14      	add	r2, sp, #80	; 0x50
 800c66a:	a915      	add	r1, sp, #84	; 0x54
 800c66c:	ec47 6b10 	vmov	d0, r6, r7
 800c670:	4620      	mov	r0, r4
 800c672:	f001 f810 	bl	800d696 <__d2b>
 800c676:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c67a:	9004      	str	r0, [sp, #16]
 800c67c:	2d00      	cmp	r5, #0
 800c67e:	d07c      	beq.n	800c77a <_dtoa_r+0x1da>
 800c680:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c684:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c688:	46b2      	mov	sl, r6
 800c68a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c68e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c692:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c696:	2200      	movs	r2, #0
 800c698:	4b8b      	ldr	r3, [pc, #556]	; (800c8c8 <_dtoa_r+0x328>)
 800c69a:	4650      	mov	r0, sl
 800c69c:	4659      	mov	r1, fp
 800c69e:	f7f3 fdfb 	bl	8000298 <__aeabi_dsub>
 800c6a2:	a381      	add	r3, pc, #516	; (adr r3, 800c8a8 <_dtoa_r+0x308>)
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f7f3 ffae 	bl	8000608 <__aeabi_dmul>
 800c6ac:	a380      	add	r3, pc, #512	; (adr r3, 800c8b0 <_dtoa_r+0x310>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	f7f3 fdf3 	bl	800029c <__adddf3>
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	460f      	mov	r7, r1
 800c6bc:	f7f3 ff3a 	bl	8000534 <__aeabi_i2d>
 800c6c0:	a37d      	add	r3, pc, #500	; (adr r3, 800c8b8 <_dtoa_r+0x318>)
 800c6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c6:	f7f3 ff9f 	bl	8000608 <__aeabi_dmul>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	4639      	mov	r1, r7
 800c6d2:	f7f3 fde3 	bl	800029c <__adddf3>
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	460f      	mov	r7, r1
 800c6da:	f7f4 fa45 	bl	8000b68 <__aeabi_d2iz>
 800c6de:	2200      	movs	r2, #0
 800c6e0:	4682      	mov	sl, r0
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	4639      	mov	r1, r7
 800c6e8:	f7f4 fa00 	bl	8000aec <__aeabi_dcmplt>
 800c6ec:	b148      	cbz	r0, 800c702 <_dtoa_r+0x162>
 800c6ee:	4650      	mov	r0, sl
 800c6f0:	f7f3 ff20 	bl	8000534 <__aeabi_i2d>
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	463b      	mov	r3, r7
 800c6f8:	f7f4 f9ee 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6fc:	b908      	cbnz	r0, 800c702 <_dtoa_r+0x162>
 800c6fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c702:	f1ba 0f16 	cmp.w	sl, #22
 800c706:	d859      	bhi.n	800c7bc <_dtoa_r+0x21c>
 800c708:	4970      	ldr	r1, [pc, #448]	; (800c8cc <_dtoa_r+0x32c>)
 800c70a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c70e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c712:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c716:	f7f4 fa07 	bl	8000b28 <__aeabi_dcmpgt>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d050      	beq.n	800c7c0 <_dtoa_r+0x220>
 800c71e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c722:	2300      	movs	r3, #0
 800c724:	930f      	str	r3, [sp, #60]	; 0x3c
 800c726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c728:	1b5d      	subs	r5, r3, r5
 800c72a:	f1b5 0801 	subs.w	r8, r5, #1
 800c72e:	bf49      	itett	mi
 800c730:	f1c5 0301 	rsbmi	r3, r5, #1
 800c734:	2300      	movpl	r3, #0
 800c736:	9305      	strmi	r3, [sp, #20]
 800c738:	f04f 0800 	movmi.w	r8, #0
 800c73c:	bf58      	it	pl
 800c73e:	9305      	strpl	r3, [sp, #20]
 800c740:	f1ba 0f00 	cmp.w	sl, #0
 800c744:	db3e      	blt.n	800c7c4 <_dtoa_r+0x224>
 800c746:	2300      	movs	r3, #0
 800c748:	44d0      	add	r8, sl
 800c74a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c74e:	9307      	str	r3, [sp, #28]
 800c750:	9b06      	ldr	r3, [sp, #24]
 800c752:	2b09      	cmp	r3, #9
 800c754:	f200 8090 	bhi.w	800c878 <_dtoa_r+0x2d8>
 800c758:	2b05      	cmp	r3, #5
 800c75a:	bfc4      	itt	gt
 800c75c:	3b04      	subgt	r3, #4
 800c75e:	9306      	strgt	r3, [sp, #24]
 800c760:	9b06      	ldr	r3, [sp, #24]
 800c762:	f1a3 0302 	sub.w	r3, r3, #2
 800c766:	bfcc      	ite	gt
 800c768:	2500      	movgt	r5, #0
 800c76a:	2501      	movle	r5, #1
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	f200 808f 	bhi.w	800c890 <_dtoa_r+0x2f0>
 800c772:	e8df f003 	tbb	[pc, r3]
 800c776:	7f7d      	.short	0x7f7d
 800c778:	7131      	.short	0x7131
 800c77a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c77e:	441d      	add	r5, r3
 800c780:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c784:	2820      	cmp	r0, #32
 800c786:	dd13      	ble.n	800c7b0 <_dtoa_r+0x210>
 800c788:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c78c:	9b00      	ldr	r3, [sp, #0]
 800c78e:	fa08 f800 	lsl.w	r8, r8, r0
 800c792:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c796:	fa23 f000 	lsr.w	r0, r3, r0
 800c79a:	ea48 0000 	orr.w	r0, r8, r0
 800c79e:	f7f3 feb9 	bl	8000514 <__aeabi_ui2d>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	4682      	mov	sl, r0
 800c7a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c7aa:	3d01      	subs	r5, #1
 800c7ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7ae:	e772      	b.n	800c696 <_dtoa_r+0xf6>
 800c7b0:	9b00      	ldr	r3, [sp, #0]
 800c7b2:	f1c0 0020 	rsb	r0, r0, #32
 800c7b6:	fa03 f000 	lsl.w	r0, r3, r0
 800c7ba:	e7f0      	b.n	800c79e <_dtoa_r+0x1fe>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e7b1      	b.n	800c724 <_dtoa_r+0x184>
 800c7c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800c7c2:	e7b0      	b.n	800c726 <_dtoa_r+0x186>
 800c7c4:	9b05      	ldr	r3, [sp, #20]
 800c7c6:	eba3 030a 	sub.w	r3, r3, sl
 800c7ca:	9305      	str	r3, [sp, #20]
 800c7cc:	f1ca 0300 	rsb	r3, sl, #0
 800c7d0:	9307      	str	r3, [sp, #28]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	930e      	str	r3, [sp, #56]	; 0x38
 800c7d6:	e7bb      	b.n	800c750 <_dtoa_r+0x1b0>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	930a      	str	r3, [sp, #40]	; 0x28
 800c7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	dd59      	ble.n	800c896 <_dtoa_r+0x2f6>
 800c7e2:	9302      	str	r3, [sp, #8]
 800c7e4:	4699      	mov	r9, r3
 800c7e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	6072      	str	r2, [r6, #4]
 800c7ec:	2204      	movs	r2, #4
 800c7ee:	f102 0014 	add.w	r0, r2, #20
 800c7f2:	4298      	cmp	r0, r3
 800c7f4:	6871      	ldr	r1, [r6, #4]
 800c7f6:	d953      	bls.n	800c8a0 <_dtoa_r+0x300>
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f000 fcc0 	bl	800d17e <_Balloc>
 800c7fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c800:	6030      	str	r0, [r6, #0]
 800c802:	f1b9 0f0e 	cmp.w	r9, #14
 800c806:	f8d3 b000 	ldr.w	fp, [r3]
 800c80a:	f200 80e6 	bhi.w	800c9da <_dtoa_r+0x43a>
 800c80e:	2d00      	cmp	r5, #0
 800c810:	f000 80e3 	beq.w	800c9da <_dtoa_r+0x43a>
 800c814:	ed9d 7b00 	vldr	d7, [sp]
 800c818:	f1ba 0f00 	cmp.w	sl, #0
 800c81c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c820:	dd74      	ble.n	800c90c <_dtoa_r+0x36c>
 800c822:	4a2a      	ldr	r2, [pc, #168]	; (800c8cc <_dtoa_r+0x32c>)
 800c824:	f00a 030f 	and.w	r3, sl, #15
 800c828:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c82c:	ed93 7b00 	vldr	d7, [r3]
 800c830:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c834:	06f0      	lsls	r0, r6, #27
 800c836:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c83a:	d565      	bpl.n	800c908 <_dtoa_r+0x368>
 800c83c:	4b24      	ldr	r3, [pc, #144]	; (800c8d0 <_dtoa_r+0x330>)
 800c83e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c842:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c846:	f7f4 f809 	bl	800085c <__aeabi_ddiv>
 800c84a:	e9cd 0100 	strd	r0, r1, [sp]
 800c84e:	f006 060f 	and.w	r6, r6, #15
 800c852:	2503      	movs	r5, #3
 800c854:	4f1e      	ldr	r7, [pc, #120]	; (800c8d0 <_dtoa_r+0x330>)
 800c856:	e04c      	b.n	800c8f2 <_dtoa_r+0x352>
 800c858:	2301      	movs	r3, #1
 800c85a:	930a      	str	r3, [sp, #40]	; 0x28
 800c85c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c85e:	4453      	add	r3, sl
 800c860:	f103 0901 	add.w	r9, r3, #1
 800c864:	9302      	str	r3, [sp, #8]
 800c866:	464b      	mov	r3, r9
 800c868:	2b01      	cmp	r3, #1
 800c86a:	bfb8      	it	lt
 800c86c:	2301      	movlt	r3, #1
 800c86e:	e7ba      	b.n	800c7e6 <_dtoa_r+0x246>
 800c870:	2300      	movs	r3, #0
 800c872:	e7b2      	b.n	800c7da <_dtoa_r+0x23a>
 800c874:	2300      	movs	r3, #0
 800c876:	e7f0      	b.n	800c85a <_dtoa_r+0x2ba>
 800c878:	2501      	movs	r5, #1
 800c87a:	2300      	movs	r3, #0
 800c87c:	9306      	str	r3, [sp, #24]
 800c87e:	950a      	str	r5, [sp, #40]	; 0x28
 800c880:	f04f 33ff 	mov.w	r3, #4294967295
 800c884:	9302      	str	r3, [sp, #8]
 800c886:	4699      	mov	r9, r3
 800c888:	2200      	movs	r2, #0
 800c88a:	2312      	movs	r3, #18
 800c88c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c88e:	e7aa      	b.n	800c7e6 <_dtoa_r+0x246>
 800c890:	2301      	movs	r3, #1
 800c892:	930a      	str	r3, [sp, #40]	; 0x28
 800c894:	e7f4      	b.n	800c880 <_dtoa_r+0x2e0>
 800c896:	2301      	movs	r3, #1
 800c898:	9302      	str	r3, [sp, #8]
 800c89a:	4699      	mov	r9, r3
 800c89c:	461a      	mov	r2, r3
 800c89e:	e7f5      	b.n	800c88c <_dtoa_r+0x2ec>
 800c8a0:	3101      	adds	r1, #1
 800c8a2:	6071      	str	r1, [r6, #4]
 800c8a4:	0052      	lsls	r2, r2, #1
 800c8a6:	e7a2      	b.n	800c7ee <_dtoa_r+0x24e>
 800c8a8:	636f4361 	.word	0x636f4361
 800c8ac:	3fd287a7 	.word	0x3fd287a7
 800c8b0:	8b60c8b3 	.word	0x8b60c8b3
 800c8b4:	3fc68a28 	.word	0x3fc68a28
 800c8b8:	509f79fb 	.word	0x509f79fb
 800c8bc:	3fd34413 	.word	0x3fd34413
 800c8c0:	7ff00000 	.word	0x7ff00000
 800c8c4:	0800e4e1 	.word	0x0800e4e1
 800c8c8:	3ff80000 	.word	0x3ff80000
 800c8cc:	0800e548 	.word	0x0800e548
 800c8d0:	0800e520 	.word	0x0800e520
 800c8d4:	0800e50d 	.word	0x0800e50d
 800c8d8:	07f1      	lsls	r1, r6, #31
 800c8da:	d508      	bpl.n	800c8ee <_dtoa_r+0x34e>
 800c8dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8e4:	f7f3 fe90 	bl	8000608 <__aeabi_dmul>
 800c8e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c8ec:	3501      	adds	r5, #1
 800c8ee:	1076      	asrs	r6, r6, #1
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	2e00      	cmp	r6, #0
 800c8f4:	d1f0      	bne.n	800c8d8 <_dtoa_r+0x338>
 800c8f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c8fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8fe:	f7f3 ffad 	bl	800085c <__aeabi_ddiv>
 800c902:	e9cd 0100 	strd	r0, r1, [sp]
 800c906:	e01a      	b.n	800c93e <_dtoa_r+0x39e>
 800c908:	2502      	movs	r5, #2
 800c90a:	e7a3      	b.n	800c854 <_dtoa_r+0x2b4>
 800c90c:	f000 80a0 	beq.w	800ca50 <_dtoa_r+0x4b0>
 800c910:	f1ca 0600 	rsb	r6, sl, #0
 800c914:	4b9f      	ldr	r3, [pc, #636]	; (800cb94 <_dtoa_r+0x5f4>)
 800c916:	4fa0      	ldr	r7, [pc, #640]	; (800cb98 <_dtoa_r+0x5f8>)
 800c918:	f006 020f 	and.w	r2, r6, #15
 800c91c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c928:	f7f3 fe6e 	bl	8000608 <__aeabi_dmul>
 800c92c:	e9cd 0100 	strd	r0, r1, [sp]
 800c930:	1136      	asrs	r6, r6, #4
 800c932:	2300      	movs	r3, #0
 800c934:	2502      	movs	r5, #2
 800c936:	2e00      	cmp	r6, #0
 800c938:	d17f      	bne.n	800ca3a <_dtoa_r+0x49a>
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1e1      	bne.n	800c902 <_dtoa_r+0x362>
 800c93e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 8087 	beq.w	800ca54 <_dtoa_r+0x4b4>
 800c946:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c94a:	2200      	movs	r2, #0
 800c94c:	4b93      	ldr	r3, [pc, #588]	; (800cb9c <_dtoa_r+0x5fc>)
 800c94e:	4630      	mov	r0, r6
 800c950:	4639      	mov	r1, r7
 800c952:	f7f4 f8cb 	bl	8000aec <__aeabi_dcmplt>
 800c956:	2800      	cmp	r0, #0
 800c958:	d07c      	beq.n	800ca54 <_dtoa_r+0x4b4>
 800c95a:	f1b9 0f00 	cmp.w	r9, #0
 800c95e:	d079      	beq.n	800ca54 <_dtoa_r+0x4b4>
 800c960:	9b02      	ldr	r3, [sp, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	dd35      	ble.n	800c9d2 <_dtoa_r+0x432>
 800c966:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c96a:	9308      	str	r3, [sp, #32]
 800c96c:	4639      	mov	r1, r7
 800c96e:	2200      	movs	r2, #0
 800c970:	4b8b      	ldr	r3, [pc, #556]	; (800cba0 <_dtoa_r+0x600>)
 800c972:	4630      	mov	r0, r6
 800c974:	f7f3 fe48 	bl	8000608 <__aeabi_dmul>
 800c978:	e9cd 0100 	strd	r0, r1, [sp]
 800c97c:	9f02      	ldr	r7, [sp, #8]
 800c97e:	3501      	adds	r5, #1
 800c980:	4628      	mov	r0, r5
 800c982:	f7f3 fdd7 	bl	8000534 <__aeabi_i2d>
 800c986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c98a:	f7f3 fe3d 	bl	8000608 <__aeabi_dmul>
 800c98e:	2200      	movs	r2, #0
 800c990:	4b84      	ldr	r3, [pc, #528]	; (800cba4 <_dtoa_r+0x604>)
 800c992:	f7f3 fc83 	bl	800029c <__adddf3>
 800c996:	4605      	mov	r5, r0
 800c998:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c99c:	2f00      	cmp	r7, #0
 800c99e:	d15d      	bne.n	800ca5c <_dtoa_r+0x4bc>
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	4b81      	ldr	r3, [pc, #516]	; (800cba8 <_dtoa_r+0x608>)
 800c9a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9a8:	f7f3 fc76 	bl	8000298 <__aeabi_dsub>
 800c9ac:	462a      	mov	r2, r5
 800c9ae:	4633      	mov	r3, r6
 800c9b0:	e9cd 0100 	strd	r0, r1, [sp]
 800c9b4:	f7f4 f8b8 	bl	8000b28 <__aeabi_dcmpgt>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	f040 8288 	bne.w	800cece <_dtoa_r+0x92e>
 800c9be:	462a      	mov	r2, r5
 800c9c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c9c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9c8:	f7f4 f890 	bl	8000aec <__aeabi_dcmplt>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	f040 827c 	bne.w	800ceca <_dtoa_r+0x92a>
 800c9d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c9d6:	e9cd 2300 	strd	r2, r3, [sp]
 800c9da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f2c0 8150 	blt.w	800cc82 <_dtoa_r+0x6e2>
 800c9e2:	f1ba 0f0e 	cmp.w	sl, #14
 800c9e6:	f300 814c 	bgt.w	800cc82 <_dtoa_r+0x6e2>
 800c9ea:	4b6a      	ldr	r3, [pc, #424]	; (800cb94 <_dtoa_r+0x5f4>)
 800c9ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c9f0:	ed93 7b00 	vldr	d7, [r3]
 800c9f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c9fc:	f280 80d8 	bge.w	800cbb0 <_dtoa_r+0x610>
 800ca00:	f1b9 0f00 	cmp.w	r9, #0
 800ca04:	f300 80d4 	bgt.w	800cbb0 <_dtoa_r+0x610>
 800ca08:	f040 825e 	bne.w	800cec8 <_dtoa_r+0x928>
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	4b66      	ldr	r3, [pc, #408]	; (800cba8 <_dtoa_r+0x608>)
 800ca10:	ec51 0b17 	vmov	r0, r1, d7
 800ca14:	f7f3 fdf8 	bl	8000608 <__aeabi_dmul>
 800ca18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca1c:	f7f4 f87a 	bl	8000b14 <__aeabi_dcmpge>
 800ca20:	464f      	mov	r7, r9
 800ca22:	464e      	mov	r6, r9
 800ca24:	2800      	cmp	r0, #0
 800ca26:	f040 8234 	bne.w	800ce92 <_dtoa_r+0x8f2>
 800ca2a:	2331      	movs	r3, #49	; 0x31
 800ca2c:	f10b 0501 	add.w	r5, fp, #1
 800ca30:	f88b 3000 	strb.w	r3, [fp]
 800ca34:	f10a 0a01 	add.w	sl, sl, #1
 800ca38:	e22f      	b.n	800ce9a <_dtoa_r+0x8fa>
 800ca3a:	07f2      	lsls	r2, r6, #31
 800ca3c:	d505      	bpl.n	800ca4a <_dtoa_r+0x4aa>
 800ca3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca42:	f7f3 fde1 	bl	8000608 <__aeabi_dmul>
 800ca46:	3501      	adds	r5, #1
 800ca48:	2301      	movs	r3, #1
 800ca4a:	1076      	asrs	r6, r6, #1
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	e772      	b.n	800c936 <_dtoa_r+0x396>
 800ca50:	2502      	movs	r5, #2
 800ca52:	e774      	b.n	800c93e <_dtoa_r+0x39e>
 800ca54:	f8cd a020 	str.w	sl, [sp, #32]
 800ca58:	464f      	mov	r7, r9
 800ca5a:	e791      	b.n	800c980 <_dtoa_r+0x3e0>
 800ca5c:	4b4d      	ldr	r3, [pc, #308]	; (800cb94 <_dtoa_r+0x5f4>)
 800ca5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ca66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d047      	beq.n	800cafc <_dtoa_r+0x55c>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	2000      	movs	r0, #0
 800ca72:	494e      	ldr	r1, [pc, #312]	; (800cbac <_dtoa_r+0x60c>)
 800ca74:	f7f3 fef2 	bl	800085c <__aeabi_ddiv>
 800ca78:	462a      	mov	r2, r5
 800ca7a:	4633      	mov	r3, r6
 800ca7c:	f7f3 fc0c 	bl	8000298 <__aeabi_dsub>
 800ca80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca84:	465d      	mov	r5, fp
 800ca86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca8a:	f7f4 f86d 	bl	8000b68 <__aeabi_d2iz>
 800ca8e:	4606      	mov	r6, r0
 800ca90:	f7f3 fd50 	bl	8000534 <__aeabi_i2d>
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca9c:	f7f3 fbfc 	bl	8000298 <__aeabi_dsub>
 800caa0:	3630      	adds	r6, #48	; 0x30
 800caa2:	f805 6b01 	strb.w	r6, [r5], #1
 800caa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800caaa:	e9cd 0100 	strd	r0, r1, [sp]
 800caae:	f7f4 f81d 	bl	8000aec <__aeabi_dcmplt>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d163      	bne.n	800cb7e <_dtoa_r+0x5de>
 800cab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caba:	2000      	movs	r0, #0
 800cabc:	4937      	ldr	r1, [pc, #220]	; (800cb9c <_dtoa_r+0x5fc>)
 800cabe:	f7f3 fbeb 	bl	8000298 <__aeabi_dsub>
 800cac2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cac6:	f7f4 f811 	bl	8000aec <__aeabi_dcmplt>
 800caca:	2800      	cmp	r0, #0
 800cacc:	f040 80b7 	bne.w	800cc3e <_dtoa_r+0x69e>
 800cad0:	eba5 030b 	sub.w	r3, r5, fp
 800cad4:	429f      	cmp	r7, r3
 800cad6:	f77f af7c 	ble.w	800c9d2 <_dtoa_r+0x432>
 800cada:	2200      	movs	r2, #0
 800cadc:	4b30      	ldr	r3, [pc, #192]	; (800cba0 <_dtoa_r+0x600>)
 800cade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cae2:	f7f3 fd91 	bl	8000608 <__aeabi_dmul>
 800cae6:	2200      	movs	r2, #0
 800cae8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800caec:	4b2c      	ldr	r3, [pc, #176]	; (800cba0 <_dtoa_r+0x600>)
 800caee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caf2:	f7f3 fd89 	bl	8000608 <__aeabi_dmul>
 800caf6:	e9cd 0100 	strd	r0, r1, [sp]
 800cafa:	e7c4      	b.n	800ca86 <_dtoa_r+0x4e6>
 800cafc:	462a      	mov	r2, r5
 800cafe:	4633      	mov	r3, r6
 800cb00:	f7f3 fd82 	bl	8000608 <__aeabi_dmul>
 800cb04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cb08:	eb0b 0507 	add.w	r5, fp, r7
 800cb0c:	465e      	mov	r6, fp
 800cb0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb12:	f7f4 f829 	bl	8000b68 <__aeabi_d2iz>
 800cb16:	4607      	mov	r7, r0
 800cb18:	f7f3 fd0c 	bl	8000534 <__aeabi_i2d>
 800cb1c:	3730      	adds	r7, #48	; 0x30
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb26:	f7f3 fbb7 	bl	8000298 <__aeabi_dsub>
 800cb2a:	f806 7b01 	strb.w	r7, [r6], #1
 800cb2e:	42ae      	cmp	r6, r5
 800cb30:	e9cd 0100 	strd	r0, r1, [sp]
 800cb34:	f04f 0200 	mov.w	r2, #0
 800cb38:	d126      	bne.n	800cb88 <_dtoa_r+0x5e8>
 800cb3a:	4b1c      	ldr	r3, [pc, #112]	; (800cbac <_dtoa_r+0x60c>)
 800cb3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb40:	f7f3 fbac 	bl	800029c <__adddf3>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb4c:	f7f3 ffec 	bl	8000b28 <__aeabi_dcmpgt>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d174      	bne.n	800cc3e <_dtoa_r+0x69e>
 800cb54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cb58:	2000      	movs	r0, #0
 800cb5a:	4914      	ldr	r1, [pc, #80]	; (800cbac <_dtoa_r+0x60c>)
 800cb5c:	f7f3 fb9c 	bl	8000298 <__aeabi_dsub>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb68:	f7f3 ffc0 	bl	8000aec <__aeabi_dcmplt>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	f43f af30 	beq.w	800c9d2 <_dtoa_r+0x432>
 800cb72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb76:	2b30      	cmp	r3, #48	; 0x30
 800cb78:	f105 32ff 	add.w	r2, r5, #4294967295
 800cb7c:	d002      	beq.n	800cb84 <_dtoa_r+0x5e4>
 800cb7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cb82:	e04a      	b.n	800cc1a <_dtoa_r+0x67a>
 800cb84:	4615      	mov	r5, r2
 800cb86:	e7f4      	b.n	800cb72 <_dtoa_r+0x5d2>
 800cb88:	4b05      	ldr	r3, [pc, #20]	; (800cba0 <_dtoa_r+0x600>)
 800cb8a:	f7f3 fd3d 	bl	8000608 <__aeabi_dmul>
 800cb8e:	e9cd 0100 	strd	r0, r1, [sp]
 800cb92:	e7bc      	b.n	800cb0e <_dtoa_r+0x56e>
 800cb94:	0800e548 	.word	0x0800e548
 800cb98:	0800e520 	.word	0x0800e520
 800cb9c:	3ff00000 	.word	0x3ff00000
 800cba0:	40240000 	.word	0x40240000
 800cba4:	401c0000 	.word	0x401c0000
 800cba8:	40140000 	.word	0x40140000
 800cbac:	3fe00000 	.word	0x3fe00000
 800cbb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cbb4:	465d      	mov	r5, fp
 800cbb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbba:	4630      	mov	r0, r6
 800cbbc:	4639      	mov	r1, r7
 800cbbe:	f7f3 fe4d 	bl	800085c <__aeabi_ddiv>
 800cbc2:	f7f3 ffd1 	bl	8000b68 <__aeabi_d2iz>
 800cbc6:	4680      	mov	r8, r0
 800cbc8:	f7f3 fcb4 	bl	8000534 <__aeabi_i2d>
 800cbcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbd0:	f7f3 fd1a 	bl	8000608 <__aeabi_dmul>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4630      	mov	r0, r6
 800cbda:	4639      	mov	r1, r7
 800cbdc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cbe0:	f7f3 fb5a 	bl	8000298 <__aeabi_dsub>
 800cbe4:	f805 6b01 	strb.w	r6, [r5], #1
 800cbe8:	eba5 060b 	sub.w	r6, r5, fp
 800cbec:	45b1      	cmp	r9, r6
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	d139      	bne.n	800cc68 <_dtoa_r+0x6c8>
 800cbf4:	f7f3 fb52 	bl	800029c <__adddf3>
 800cbf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	460f      	mov	r7, r1
 800cc00:	f7f3 ff92 	bl	8000b28 <__aeabi_dcmpgt>
 800cc04:	b9c8      	cbnz	r0, 800cc3a <_dtoa_r+0x69a>
 800cc06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	4639      	mov	r1, r7
 800cc0e:	f7f3 ff63 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc12:	b110      	cbz	r0, 800cc1a <_dtoa_r+0x67a>
 800cc14:	f018 0f01 	tst.w	r8, #1
 800cc18:	d10f      	bne.n	800cc3a <_dtoa_r+0x69a>
 800cc1a:	9904      	ldr	r1, [sp, #16]
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 fae2 	bl	800d1e6 <_Bfree>
 800cc22:	2300      	movs	r3, #0
 800cc24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc26:	702b      	strb	r3, [r5, #0]
 800cc28:	f10a 0301 	add.w	r3, sl, #1
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f000 8241 	beq.w	800d0b8 <_dtoa_r+0xb18>
 800cc36:	601d      	str	r5, [r3, #0]
 800cc38:	e23e      	b.n	800d0b8 <_dtoa_r+0xb18>
 800cc3a:	f8cd a020 	str.w	sl, [sp, #32]
 800cc3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cc42:	2a39      	cmp	r2, #57	; 0x39
 800cc44:	f105 33ff 	add.w	r3, r5, #4294967295
 800cc48:	d108      	bne.n	800cc5c <_dtoa_r+0x6bc>
 800cc4a:	459b      	cmp	fp, r3
 800cc4c:	d10a      	bne.n	800cc64 <_dtoa_r+0x6c4>
 800cc4e:	9b08      	ldr	r3, [sp, #32]
 800cc50:	3301      	adds	r3, #1
 800cc52:	9308      	str	r3, [sp, #32]
 800cc54:	2330      	movs	r3, #48	; 0x30
 800cc56:	f88b 3000 	strb.w	r3, [fp]
 800cc5a:	465b      	mov	r3, fp
 800cc5c:	781a      	ldrb	r2, [r3, #0]
 800cc5e:	3201      	adds	r2, #1
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	e78c      	b.n	800cb7e <_dtoa_r+0x5de>
 800cc64:	461d      	mov	r5, r3
 800cc66:	e7ea      	b.n	800cc3e <_dtoa_r+0x69e>
 800cc68:	2200      	movs	r2, #0
 800cc6a:	4b9b      	ldr	r3, [pc, #620]	; (800ced8 <_dtoa_r+0x938>)
 800cc6c:	f7f3 fccc 	bl	8000608 <__aeabi_dmul>
 800cc70:	2200      	movs	r2, #0
 800cc72:	2300      	movs	r3, #0
 800cc74:	4606      	mov	r6, r0
 800cc76:	460f      	mov	r7, r1
 800cc78:	f7f3 ff2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d09a      	beq.n	800cbb6 <_dtoa_r+0x616>
 800cc80:	e7cb      	b.n	800cc1a <_dtoa_r+0x67a>
 800cc82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc84:	2a00      	cmp	r2, #0
 800cc86:	f000 808b 	beq.w	800cda0 <_dtoa_r+0x800>
 800cc8a:	9a06      	ldr	r2, [sp, #24]
 800cc8c:	2a01      	cmp	r2, #1
 800cc8e:	dc6e      	bgt.n	800cd6e <_dtoa_r+0x7ce>
 800cc90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cc92:	2a00      	cmp	r2, #0
 800cc94:	d067      	beq.n	800cd66 <_dtoa_r+0x7c6>
 800cc96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc9a:	9f07      	ldr	r7, [sp, #28]
 800cc9c:	9d05      	ldr	r5, [sp, #20]
 800cc9e:	9a05      	ldr	r2, [sp, #20]
 800cca0:	2101      	movs	r1, #1
 800cca2:	441a      	add	r2, r3
 800cca4:	4620      	mov	r0, r4
 800cca6:	9205      	str	r2, [sp, #20]
 800cca8:	4498      	add	r8, r3
 800ccaa:	f000 fb3c 	bl	800d326 <__i2b>
 800ccae:	4606      	mov	r6, r0
 800ccb0:	2d00      	cmp	r5, #0
 800ccb2:	dd0c      	ble.n	800ccce <_dtoa_r+0x72e>
 800ccb4:	f1b8 0f00 	cmp.w	r8, #0
 800ccb8:	dd09      	ble.n	800ccce <_dtoa_r+0x72e>
 800ccba:	4545      	cmp	r5, r8
 800ccbc:	9a05      	ldr	r2, [sp, #20]
 800ccbe:	462b      	mov	r3, r5
 800ccc0:	bfa8      	it	ge
 800ccc2:	4643      	movge	r3, r8
 800ccc4:	1ad2      	subs	r2, r2, r3
 800ccc6:	9205      	str	r2, [sp, #20]
 800ccc8:	1aed      	subs	r5, r5, r3
 800ccca:	eba8 0803 	sub.w	r8, r8, r3
 800ccce:	9b07      	ldr	r3, [sp, #28]
 800ccd0:	b1eb      	cbz	r3, 800cd0e <_dtoa_r+0x76e>
 800ccd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d067      	beq.n	800cda8 <_dtoa_r+0x808>
 800ccd8:	b18f      	cbz	r7, 800ccfe <_dtoa_r+0x75e>
 800ccda:	4631      	mov	r1, r6
 800ccdc:	463a      	mov	r2, r7
 800ccde:	4620      	mov	r0, r4
 800cce0:	f000 fbc0 	bl	800d464 <__pow5mult>
 800cce4:	9a04      	ldr	r2, [sp, #16]
 800cce6:	4601      	mov	r1, r0
 800cce8:	4606      	mov	r6, r0
 800ccea:	4620      	mov	r0, r4
 800ccec:	f000 fb24 	bl	800d338 <__multiply>
 800ccf0:	9904      	ldr	r1, [sp, #16]
 800ccf2:	9008      	str	r0, [sp, #32]
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 fa76 	bl	800d1e6 <_Bfree>
 800ccfa:	9b08      	ldr	r3, [sp, #32]
 800ccfc:	9304      	str	r3, [sp, #16]
 800ccfe:	9b07      	ldr	r3, [sp, #28]
 800cd00:	1bda      	subs	r2, r3, r7
 800cd02:	d004      	beq.n	800cd0e <_dtoa_r+0x76e>
 800cd04:	9904      	ldr	r1, [sp, #16]
 800cd06:	4620      	mov	r0, r4
 800cd08:	f000 fbac 	bl	800d464 <__pow5mult>
 800cd0c:	9004      	str	r0, [sp, #16]
 800cd0e:	2101      	movs	r1, #1
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 fb08 	bl	800d326 <__i2b>
 800cd16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd18:	4607      	mov	r7, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 81d0 	beq.w	800d0c0 <_dtoa_r+0xb20>
 800cd20:	461a      	mov	r2, r3
 800cd22:	4601      	mov	r1, r0
 800cd24:	4620      	mov	r0, r4
 800cd26:	f000 fb9d 	bl	800d464 <__pow5mult>
 800cd2a:	9b06      	ldr	r3, [sp, #24]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	4607      	mov	r7, r0
 800cd30:	dc40      	bgt.n	800cdb4 <_dtoa_r+0x814>
 800cd32:	9b00      	ldr	r3, [sp, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d139      	bne.n	800cdac <_dtoa_r+0x80c>
 800cd38:	9b01      	ldr	r3, [sp, #4]
 800cd3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d136      	bne.n	800cdb0 <_dtoa_r+0x810>
 800cd42:	9b01      	ldr	r3, [sp, #4]
 800cd44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd48:	0d1b      	lsrs	r3, r3, #20
 800cd4a:	051b      	lsls	r3, r3, #20
 800cd4c:	b12b      	cbz	r3, 800cd5a <_dtoa_r+0x7ba>
 800cd4e:	9b05      	ldr	r3, [sp, #20]
 800cd50:	3301      	adds	r3, #1
 800cd52:	9305      	str	r3, [sp, #20]
 800cd54:	f108 0801 	add.w	r8, r8, #1
 800cd58:	2301      	movs	r3, #1
 800cd5a:	9307      	str	r3, [sp, #28]
 800cd5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d12a      	bne.n	800cdb8 <_dtoa_r+0x818>
 800cd62:	2001      	movs	r0, #1
 800cd64:	e030      	b.n	800cdc8 <_dtoa_r+0x828>
 800cd66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cd6c:	e795      	b.n	800cc9a <_dtoa_r+0x6fa>
 800cd6e:	9b07      	ldr	r3, [sp, #28]
 800cd70:	f109 37ff 	add.w	r7, r9, #4294967295
 800cd74:	42bb      	cmp	r3, r7
 800cd76:	bfbf      	itttt	lt
 800cd78:	9b07      	ldrlt	r3, [sp, #28]
 800cd7a:	9707      	strlt	r7, [sp, #28]
 800cd7c:	1afa      	sublt	r2, r7, r3
 800cd7e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cd80:	bfbb      	ittet	lt
 800cd82:	189b      	addlt	r3, r3, r2
 800cd84:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cd86:	1bdf      	subge	r7, r3, r7
 800cd88:	2700      	movlt	r7, #0
 800cd8a:	f1b9 0f00 	cmp.w	r9, #0
 800cd8e:	bfb5      	itete	lt
 800cd90:	9b05      	ldrlt	r3, [sp, #20]
 800cd92:	9d05      	ldrge	r5, [sp, #20]
 800cd94:	eba3 0509 	sublt.w	r5, r3, r9
 800cd98:	464b      	movge	r3, r9
 800cd9a:	bfb8      	it	lt
 800cd9c:	2300      	movlt	r3, #0
 800cd9e:	e77e      	b.n	800cc9e <_dtoa_r+0x6fe>
 800cda0:	9f07      	ldr	r7, [sp, #28]
 800cda2:	9d05      	ldr	r5, [sp, #20]
 800cda4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cda6:	e783      	b.n	800ccb0 <_dtoa_r+0x710>
 800cda8:	9a07      	ldr	r2, [sp, #28]
 800cdaa:	e7ab      	b.n	800cd04 <_dtoa_r+0x764>
 800cdac:	2300      	movs	r3, #0
 800cdae:	e7d4      	b.n	800cd5a <_dtoa_r+0x7ba>
 800cdb0:	9b00      	ldr	r3, [sp, #0]
 800cdb2:	e7d2      	b.n	800cd5a <_dtoa_r+0x7ba>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	9307      	str	r3, [sp, #28]
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cdbe:	6918      	ldr	r0, [r3, #16]
 800cdc0:	f000 fa63 	bl	800d28a <__hi0bits>
 800cdc4:	f1c0 0020 	rsb	r0, r0, #32
 800cdc8:	4440      	add	r0, r8
 800cdca:	f010 001f 	ands.w	r0, r0, #31
 800cdce:	d047      	beq.n	800ce60 <_dtoa_r+0x8c0>
 800cdd0:	f1c0 0320 	rsb	r3, r0, #32
 800cdd4:	2b04      	cmp	r3, #4
 800cdd6:	dd3b      	ble.n	800ce50 <_dtoa_r+0x8b0>
 800cdd8:	9b05      	ldr	r3, [sp, #20]
 800cdda:	f1c0 001c 	rsb	r0, r0, #28
 800cdde:	4403      	add	r3, r0
 800cde0:	9305      	str	r3, [sp, #20]
 800cde2:	4405      	add	r5, r0
 800cde4:	4480      	add	r8, r0
 800cde6:	9b05      	ldr	r3, [sp, #20]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	dd05      	ble.n	800cdf8 <_dtoa_r+0x858>
 800cdec:	461a      	mov	r2, r3
 800cdee:	9904      	ldr	r1, [sp, #16]
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 fb85 	bl	800d500 <__lshift>
 800cdf6:	9004      	str	r0, [sp, #16]
 800cdf8:	f1b8 0f00 	cmp.w	r8, #0
 800cdfc:	dd05      	ble.n	800ce0a <_dtoa_r+0x86a>
 800cdfe:	4639      	mov	r1, r7
 800ce00:	4642      	mov	r2, r8
 800ce02:	4620      	mov	r0, r4
 800ce04:	f000 fb7c 	bl	800d500 <__lshift>
 800ce08:	4607      	mov	r7, r0
 800ce0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce0c:	b353      	cbz	r3, 800ce64 <_dtoa_r+0x8c4>
 800ce0e:	4639      	mov	r1, r7
 800ce10:	9804      	ldr	r0, [sp, #16]
 800ce12:	f000 fbc9 	bl	800d5a8 <__mcmp>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	da24      	bge.n	800ce64 <_dtoa_r+0x8c4>
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	220a      	movs	r2, #10
 800ce1e:	9904      	ldr	r1, [sp, #16]
 800ce20:	4620      	mov	r0, r4
 800ce22:	f000 f9f7 	bl	800d214 <__multadd>
 800ce26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce28:	9004      	str	r0, [sp, #16]
 800ce2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f000 814d 	beq.w	800d0ce <_dtoa_r+0xb2e>
 800ce34:	2300      	movs	r3, #0
 800ce36:	4631      	mov	r1, r6
 800ce38:	220a      	movs	r2, #10
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 f9ea 	bl	800d214 <__multadd>
 800ce40:	9b02      	ldr	r3, [sp, #8]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	4606      	mov	r6, r0
 800ce46:	dc4f      	bgt.n	800cee8 <_dtoa_r+0x948>
 800ce48:	9b06      	ldr	r3, [sp, #24]
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	dd4c      	ble.n	800cee8 <_dtoa_r+0x948>
 800ce4e:	e011      	b.n	800ce74 <_dtoa_r+0x8d4>
 800ce50:	d0c9      	beq.n	800cde6 <_dtoa_r+0x846>
 800ce52:	9a05      	ldr	r2, [sp, #20]
 800ce54:	331c      	adds	r3, #28
 800ce56:	441a      	add	r2, r3
 800ce58:	9205      	str	r2, [sp, #20]
 800ce5a:	441d      	add	r5, r3
 800ce5c:	4498      	add	r8, r3
 800ce5e:	e7c2      	b.n	800cde6 <_dtoa_r+0x846>
 800ce60:	4603      	mov	r3, r0
 800ce62:	e7f6      	b.n	800ce52 <_dtoa_r+0x8b2>
 800ce64:	f1b9 0f00 	cmp.w	r9, #0
 800ce68:	dc38      	bgt.n	800cedc <_dtoa_r+0x93c>
 800ce6a:	9b06      	ldr	r3, [sp, #24]
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	dd35      	ble.n	800cedc <_dtoa_r+0x93c>
 800ce70:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	b963      	cbnz	r3, 800ce92 <_dtoa_r+0x8f2>
 800ce78:	4639      	mov	r1, r7
 800ce7a:	2205      	movs	r2, #5
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f000 f9c9 	bl	800d214 <__multadd>
 800ce82:	4601      	mov	r1, r0
 800ce84:	4607      	mov	r7, r0
 800ce86:	9804      	ldr	r0, [sp, #16]
 800ce88:	f000 fb8e 	bl	800d5a8 <__mcmp>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	f73f adcc 	bgt.w	800ca2a <_dtoa_r+0x48a>
 800ce92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce94:	465d      	mov	r5, fp
 800ce96:	ea6f 0a03 	mvn.w	sl, r3
 800ce9a:	f04f 0900 	mov.w	r9, #0
 800ce9e:	4639      	mov	r1, r7
 800cea0:	4620      	mov	r0, r4
 800cea2:	f000 f9a0 	bl	800d1e6 <_Bfree>
 800cea6:	2e00      	cmp	r6, #0
 800cea8:	f43f aeb7 	beq.w	800cc1a <_dtoa_r+0x67a>
 800ceac:	f1b9 0f00 	cmp.w	r9, #0
 800ceb0:	d005      	beq.n	800cebe <_dtoa_r+0x91e>
 800ceb2:	45b1      	cmp	r9, r6
 800ceb4:	d003      	beq.n	800cebe <_dtoa_r+0x91e>
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f000 f994 	bl	800d1e6 <_Bfree>
 800cebe:	4631      	mov	r1, r6
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 f990 	bl	800d1e6 <_Bfree>
 800cec6:	e6a8      	b.n	800cc1a <_dtoa_r+0x67a>
 800cec8:	2700      	movs	r7, #0
 800ceca:	463e      	mov	r6, r7
 800cecc:	e7e1      	b.n	800ce92 <_dtoa_r+0x8f2>
 800cece:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ced2:	463e      	mov	r6, r7
 800ced4:	e5a9      	b.n	800ca2a <_dtoa_r+0x48a>
 800ced6:	bf00      	nop
 800ced8:	40240000 	.word	0x40240000
 800cedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cede:	f8cd 9008 	str.w	r9, [sp, #8]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 80fa 	beq.w	800d0dc <_dtoa_r+0xb3c>
 800cee8:	2d00      	cmp	r5, #0
 800ceea:	dd05      	ble.n	800cef8 <_dtoa_r+0x958>
 800ceec:	4631      	mov	r1, r6
 800ceee:	462a      	mov	r2, r5
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 fb05 	bl	800d500 <__lshift>
 800cef6:	4606      	mov	r6, r0
 800cef8:	9b07      	ldr	r3, [sp, #28]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d04c      	beq.n	800cf98 <_dtoa_r+0x9f8>
 800cefe:	6871      	ldr	r1, [r6, #4]
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 f93c 	bl	800d17e <_Balloc>
 800cf06:	6932      	ldr	r2, [r6, #16]
 800cf08:	3202      	adds	r2, #2
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	0092      	lsls	r2, r2, #2
 800cf0e:	f106 010c 	add.w	r1, r6, #12
 800cf12:	300c      	adds	r0, #12
 800cf14:	f000 f928 	bl	800d168 <memcpy>
 800cf18:	2201      	movs	r2, #1
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	f000 faef 	bl	800d500 <__lshift>
 800cf22:	9b00      	ldr	r3, [sp, #0]
 800cf24:	f8cd b014 	str.w	fp, [sp, #20]
 800cf28:	f003 0301 	and.w	r3, r3, #1
 800cf2c:	46b1      	mov	r9, r6
 800cf2e:	9307      	str	r3, [sp, #28]
 800cf30:	4606      	mov	r6, r0
 800cf32:	4639      	mov	r1, r7
 800cf34:	9804      	ldr	r0, [sp, #16]
 800cf36:	f7ff faa7 	bl	800c488 <quorem>
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	4605      	mov	r5, r0
 800cf3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cf42:	9804      	ldr	r0, [sp, #16]
 800cf44:	f000 fb30 	bl	800d5a8 <__mcmp>
 800cf48:	4632      	mov	r2, r6
 800cf4a:	9000      	str	r0, [sp, #0]
 800cf4c:	4639      	mov	r1, r7
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f000 fb44 	bl	800d5dc <__mdiff>
 800cf54:	68c3      	ldr	r3, [r0, #12]
 800cf56:	4602      	mov	r2, r0
 800cf58:	bb03      	cbnz	r3, 800cf9c <_dtoa_r+0x9fc>
 800cf5a:	4601      	mov	r1, r0
 800cf5c:	9008      	str	r0, [sp, #32]
 800cf5e:	9804      	ldr	r0, [sp, #16]
 800cf60:	f000 fb22 	bl	800d5a8 <__mcmp>
 800cf64:	9a08      	ldr	r2, [sp, #32]
 800cf66:	4603      	mov	r3, r0
 800cf68:	4611      	mov	r1, r2
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	9308      	str	r3, [sp, #32]
 800cf6e:	f000 f93a 	bl	800d1e6 <_Bfree>
 800cf72:	9b08      	ldr	r3, [sp, #32]
 800cf74:	b9a3      	cbnz	r3, 800cfa0 <_dtoa_r+0xa00>
 800cf76:	9a06      	ldr	r2, [sp, #24]
 800cf78:	b992      	cbnz	r2, 800cfa0 <_dtoa_r+0xa00>
 800cf7a:	9a07      	ldr	r2, [sp, #28]
 800cf7c:	b982      	cbnz	r2, 800cfa0 <_dtoa_r+0xa00>
 800cf7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf82:	d029      	beq.n	800cfd8 <_dtoa_r+0xa38>
 800cf84:	9b00      	ldr	r3, [sp, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	dd01      	ble.n	800cf8e <_dtoa_r+0x9ee>
 800cf8a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cf8e:	9b05      	ldr	r3, [sp, #20]
 800cf90:	1c5d      	adds	r5, r3, #1
 800cf92:	f883 8000 	strb.w	r8, [r3]
 800cf96:	e782      	b.n	800ce9e <_dtoa_r+0x8fe>
 800cf98:	4630      	mov	r0, r6
 800cf9a:	e7c2      	b.n	800cf22 <_dtoa_r+0x982>
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e7e3      	b.n	800cf68 <_dtoa_r+0x9c8>
 800cfa0:	9a00      	ldr	r2, [sp, #0]
 800cfa2:	2a00      	cmp	r2, #0
 800cfa4:	db04      	blt.n	800cfb0 <_dtoa_r+0xa10>
 800cfa6:	d125      	bne.n	800cff4 <_dtoa_r+0xa54>
 800cfa8:	9a06      	ldr	r2, [sp, #24]
 800cfaa:	bb1a      	cbnz	r2, 800cff4 <_dtoa_r+0xa54>
 800cfac:	9a07      	ldr	r2, [sp, #28]
 800cfae:	bb0a      	cbnz	r2, 800cff4 <_dtoa_r+0xa54>
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	ddec      	ble.n	800cf8e <_dtoa_r+0x9ee>
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	9904      	ldr	r1, [sp, #16]
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 faa1 	bl	800d500 <__lshift>
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	9004      	str	r0, [sp, #16]
 800cfc2:	f000 faf1 	bl	800d5a8 <__mcmp>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	dc03      	bgt.n	800cfd2 <_dtoa_r+0xa32>
 800cfca:	d1e0      	bne.n	800cf8e <_dtoa_r+0x9ee>
 800cfcc:	f018 0f01 	tst.w	r8, #1
 800cfd0:	d0dd      	beq.n	800cf8e <_dtoa_r+0x9ee>
 800cfd2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cfd6:	d1d8      	bne.n	800cf8a <_dtoa_r+0x9ea>
 800cfd8:	9b05      	ldr	r3, [sp, #20]
 800cfda:	9a05      	ldr	r2, [sp, #20]
 800cfdc:	1c5d      	adds	r5, r3, #1
 800cfde:	2339      	movs	r3, #57	; 0x39
 800cfe0:	7013      	strb	r3, [r2, #0]
 800cfe2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cfe6:	2b39      	cmp	r3, #57	; 0x39
 800cfe8:	f105 32ff 	add.w	r2, r5, #4294967295
 800cfec:	d04f      	beq.n	800d08e <_dtoa_r+0xaee>
 800cfee:	3301      	adds	r3, #1
 800cff0:	7013      	strb	r3, [r2, #0]
 800cff2:	e754      	b.n	800ce9e <_dtoa_r+0x8fe>
 800cff4:	9a05      	ldr	r2, [sp, #20]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f102 0501 	add.w	r5, r2, #1
 800cffc:	dd06      	ble.n	800d00c <_dtoa_r+0xa6c>
 800cffe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d002:	d0e9      	beq.n	800cfd8 <_dtoa_r+0xa38>
 800d004:	f108 0801 	add.w	r8, r8, #1
 800d008:	9b05      	ldr	r3, [sp, #20]
 800d00a:	e7c2      	b.n	800cf92 <_dtoa_r+0x9f2>
 800d00c:	9a02      	ldr	r2, [sp, #8]
 800d00e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d012:	eba5 030b 	sub.w	r3, r5, fp
 800d016:	4293      	cmp	r3, r2
 800d018:	d021      	beq.n	800d05e <_dtoa_r+0xabe>
 800d01a:	2300      	movs	r3, #0
 800d01c:	220a      	movs	r2, #10
 800d01e:	9904      	ldr	r1, [sp, #16]
 800d020:	4620      	mov	r0, r4
 800d022:	f000 f8f7 	bl	800d214 <__multadd>
 800d026:	45b1      	cmp	r9, r6
 800d028:	9004      	str	r0, [sp, #16]
 800d02a:	f04f 0300 	mov.w	r3, #0
 800d02e:	f04f 020a 	mov.w	r2, #10
 800d032:	4649      	mov	r1, r9
 800d034:	4620      	mov	r0, r4
 800d036:	d105      	bne.n	800d044 <_dtoa_r+0xaa4>
 800d038:	f000 f8ec 	bl	800d214 <__multadd>
 800d03c:	4681      	mov	r9, r0
 800d03e:	4606      	mov	r6, r0
 800d040:	9505      	str	r5, [sp, #20]
 800d042:	e776      	b.n	800cf32 <_dtoa_r+0x992>
 800d044:	f000 f8e6 	bl	800d214 <__multadd>
 800d048:	4631      	mov	r1, r6
 800d04a:	4681      	mov	r9, r0
 800d04c:	2300      	movs	r3, #0
 800d04e:	220a      	movs	r2, #10
 800d050:	4620      	mov	r0, r4
 800d052:	f000 f8df 	bl	800d214 <__multadd>
 800d056:	4606      	mov	r6, r0
 800d058:	e7f2      	b.n	800d040 <_dtoa_r+0xaa0>
 800d05a:	f04f 0900 	mov.w	r9, #0
 800d05e:	2201      	movs	r2, #1
 800d060:	9904      	ldr	r1, [sp, #16]
 800d062:	4620      	mov	r0, r4
 800d064:	f000 fa4c 	bl	800d500 <__lshift>
 800d068:	4639      	mov	r1, r7
 800d06a:	9004      	str	r0, [sp, #16]
 800d06c:	f000 fa9c 	bl	800d5a8 <__mcmp>
 800d070:	2800      	cmp	r0, #0
 800d072:	dcb6      	bgt.n	800cfe2 <_dtoa_r+0xa42>
 800d074:	d102      	bne.n	800d07c <_dtoa_r+0xadc>
 800d076:	f018 0f01 	tst.w	r8, #1
 800d07a:	d1b2      	bne.n	800cfe2 <_dtoa_r+0xa42>
 800d07c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d080:	2b30      	cmp	r3, #48	; 0x30
 800d082:	f105 32ff 	add.w	r2, r5, #4294967295
 800d086:	f47f af0a 	bne.w	800ce9e <_dtoa_r+0x8fe>
 800d08a:	4615      	mov	r5, r2
 800d08c:	e7f6      	b.n	800d07c <_dtoa_r+0xadc>
 800d08e:	4593      	cmp	fp, r2
 800d090:	d105      	bne.n	800d09e <_dtoa_r+0xafe>
 800d092:	2331      	movs	r3, #49	; 0x31
 800d094:	f10a 0a01 	add.w	sl, sl, #1
 800d098:	f88b 3000 	strb.w	r3, [fp]
 800d09c:	e6ff      	b.n	800ce9e <_dtoa_r+0x8fe>
 800d09e:	4615      	mov	r5, r2
 800d0a0:	e79f      	b.n	800cfe2 <_dtoa_r+0xa42>
 800d0a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d108 <_dtoa_r+0xb68>
 800d0a6:	e007      	b.n	800d0b8 <_dtoa_r+0xb18>
 800d0a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d10c <_dtoa_r+0xb6c>
 800d0ae:	b11b      	cbz	r3, 800d0b8 <_dtoa_r+0xb18>
 800d0b0:	f10b 0308 	add.w	r3, fp, #8
 800d0b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d0b6:	6013      	str	r3, [r2, #0]
 800d0b8:	4658      	mov	r0, fp
 800d0ba:	b017      	add	sp, #92	; 0x5c
 800d0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c0:	9b06      	ldr	r3, [sp, #24]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	f77f ae35 	ble.w	800cd32 <_dtoa_r+0x792>
 800d0c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0ca:	9307      	str	r3, [sp, #28]
 800d0cc:	e649      	b.n	800cd62 <_dtoa_r+0x7c2>
 800d0ce:	9b02      	ldr	r3, [sp, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	dc03      	bgt.n	800d0dc <_dtoa_r+0xb3c>
 800d0d4:	9b06      	ldr	r3, [sp, #24]
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	f73f aecc 	bgt.w	800ce74 <_dtoa_r+0x8d4>
 800d0dc:	465d      	mov	r5, fp
 800d0de:	4639      	mov	r1, r7
 800d0e0:	9804      	ldr	r0, [sp, #16]
 800d0e2:	f7ff f9d1 	bl	800c488 <quorem>
 800d0e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d0ea:	f805 8b01 	strb.w	r8, [r5], #1
 800d0ee:	9a02      	ldr	r2, [sp, #8]
 800d0f0:	eba5 030b 	sub.w	r3, r5, fp
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	ddb0      	ble.n	800d05a <_dtoa_r+0xaba>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	220a      	movs	r2, #10
 800d0fc:	9904      	ldr	r1, [sp, #16]
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 f888 	bl	800d214 <__multadd>
 800d104:	9004      	str	r0, [sp, #16]
 800d106:	e7ea      	b.n	800d0de <_dtoa_r+0xb3e>
 800d108:	0800e4e0 	.word	0x0800e4e0
 800d10c:	0800e504 	.word	0x0800e504

0800d110 <__locale_ctype_ptr_l>:
 800d110:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d114:	4770      	bx	lr
	...

0800d118 <_localeconv_r>:
 800d118:	4b04      	ldr	r3, [pc, #16]	; (800d12c <_localeconv_r+0x14>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	6a18      	ldr	r0, [r3, #32]
 800d11e:	4b04      	ldr	r3, [pc, #16]	; (800d130 <_localeconv_r+0x18>)
 800d120:	2800      	cmp	r0, #0
 800d122:	bf08      	it	eq
 800d124:	4618      	moveq	r0, r3
 800d126:	30f0      	adds	r0, #240	; 0xf0
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	2000008c 	.word	0x2000008c
 800d130:	200000f0 	.word	0x200000f0

0800d134 <malloc>:
 800d134:	4b02      	ldr	r3, [pc, #8]	; (800d140 <malloc+0xc>)
 800d136:	4601      	mov	r1, r0
 800d138:	6818      	ldr	r0, [r3, #0]
 800d13a:	f000 bb57 	b.w	800d7ec <_malloc_r>
 800d13e:	bf00      	nop
 800d140:	2000008c 	.word	0x2000008c

0800d144 <__ascii_mbtowc>:
 800d144:	b082      	sub	sp, #8
 800d146:	b901      	cbnz	r1, 800d14a <__ascii_mbtowc+0x6>
 800d148:	a901      	add	r1, sp, #4
 800d14a:	b142      	cbz	r2, 800d15e <__ascii_mbtowc+0x1a>
 800d14c:	b14b      	cbz	r3, 800d162 <__ascii_mbtowc+0x1e>
 800d14e:	7813      	ldrb	r3, [r2, #0]
 800d150:	600b      	str	r3, [r1, #0]
 800d152:	7812      	ldrb	r2, [r2, #0]
 800d154:	1c10      	adds	r0, r2, #0
 800d156:	bf18      	it	ne
 800d158:	2001      	movne	r0, #1
 800d15a:	b002      	add	sp, #8
 800d15c:	4770      	bx	lr
 800d15e:	4610      	mov	r0, r2
 800d160:	e7fb      	b.n	800d15a <__ascii_mbtowc+0x16>
 800d162:	f06f 0001 	mvn.w	r0, #1
 800d166:	e7f8      	b.n	800d15a <__ascii_mbtowc+0x16>

0800d168 <memcpy>:
 800d168:	b510      	push	{r4, lr}
 800d16a:	1e43      	subs	r3, r0, #1
 800d16c:	440a      	add	r2, r1
 800d16e:	4291      	cmp	r1, r2
 800d170:	d100      	bne.n	800d174 <memcpy+0xc>
 800d172:	bd10      	pop	{r4, pc}
 800d174:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d178:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d17c:	e7f7      	b.n	800d16e <memcpy+0x6>

0800d17e <_Balloc>:
 800d17e:	b570      	push	{r4, r5, r6, lr}
 800d180:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d182:	4604      	mov	r4, r0
 800d184:	460e      	mov	r6, r1
 800d186:	b93d      	cbnz	r5, 800d198 <_Balloc+0x1a>
 800d188:	2010      	movs	r0, #16
 800d18a:	f7ff ffd3 	bl	800d134 <malloc>
 800d18e:	6260      	str	r0, [r4, #36]	; 0x24
 800d190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d194:	6005      	str	r5, [r0, #0]
 800d196:	60c5      	str	r5, [r0, #12]
 800d198:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d19a:	68eb      	ldr	r3, [r5, #12]
 800d19c:	b183      	cbz	r3, 800d1c0 <_Balloc+0x42>
 800d19e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d1a6:	b9b8      	cbnz	r0, 800d1d8 <_Balloc+0x5a>
 800d1a8:	2101      	movs	r1, #1
 800d1aa:	fa01 f506 	lsl.w	r5, r1, r6
 800d1ae:	1d6a      	adds	r2, r5, #5
 800d1b0:	0092      	lsls	r2, r2, #2
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f000 fabe 	bl	800d734 <_calloc_r>
 800d1b8:	b160      	cbz	r0, 800d1d4 <_Balloc+0x56>
 800d1ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d1be:	e00e      	b.n	800d1de <_Balloc+0x60>
 800d1c0:	2221      	movs	r2, #33	; 0x21
 800d1c2:	2104      	movs	r1, #4
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f000 fab5 	bl	800d734 <_calloc_r>
 800d1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1cc:	60e8      	str	r0, [r5, #12]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1e4      	bne.n	800d19e <_Balloc+0x20>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	bd70      	pop	{r4, r5, r6, pc}
 800d1d8:	6802      	ldr	r2, [r0, #0]
 800d1da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1e4:	e7f7      	b.n	800d1d6 <_Balloc+0x58>

0800d1e6 <_Bfree>:
 800d1e6:	b570      	push	{r4, r5, r6, lr}
 800d1e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d1ea:	4606      	mov	r6, r0
 800d1ec:	460d      	mov	r5, r1
 800d1ee:	b93c      	cbnz	r4, 800d200 <_Bfree+0x1a>
 800d1f0:	2010      	movs	r0, #16
 800d1f2:	f7ff ff9f 	bl	800d134 <malloc>
 800d1f6:	6270      	str	r0, [r6, #36]	; 0x24
 800d1f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1fc:	6004      	str	r4, [r0, #0]
 800d1fe:	60c4      	str	r4, [r0, #12]
 800d200:	b13d      	cbz	r5, 800d212 <_Bfree+0x2c>
 800d202:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d204:	686a      	ldr	r2, [r5, #4]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d20c:	6029      	str	r1, [r5, #0]
 800d20e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d212:	bd70      	pop	{r4, r5, r6, pc}

0800d214 <__multadd>:
 800d214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d218:	690d      	ldr	r5, [r1, #16]
 800d21a:	461f      	mov	r7, r3
 800d21c:	4606      	mov	r6, r0
 800d21e:	460c      	mov	r4, r1
 800d220:	f101 0c14 	add.w	ip, r1, #20
 800d224:	2300      	movs	r3, #0
 800d226:	f8dc 0000 	ldr.w	r0, [ip]
 800d22a:	b281      	uxth	r1, r0
 800d22c:	fb02 7101 	mla	r1, r2, r1, r7
 800d230:	0c0f      	lsrs	r7, r1, #16
 800d232:	0c00      	lsrs	r0, r0, #16
 800d234:	fb02 7000 	mla	r0, r2, r0, r7
 800d238:	b289      	uxth	r1, r1
 800d23a:	3301      	adds	r3, #1
 800d23c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d240:	429d      	cmp	r5, r3
 800d242:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d246:	f84c 1b04 	str.w	r1, [ip], #4
 800d24a:	dcec      	bgt.n	800d226 <__multadd+0x12>
 800d24c:	b1d7      	cbz	r7, 800d284 <__multadd+0x70>
 800d24e:	68a3      	ldr	r3, [r4, #8]
 800d250:	42ab      	cmp	r3, r5
 800d252:	dc12      	bgt.n	800d27a <__multadd+0x66>
 800d254:	6861      	ldr	r1, [r4, #4]
 800d256:	4630      	mov	r0, r6
 800d258:	3101      	adds	r1, #1
 800d25a:	f7ff ff90 	bl	800d17e <_Balloc>
 800d25e:	6922      	ldr	r2, [r4, #16]
 800d260:	3202      	adds	r2, #2
 800d262:	f104 010c 	add.w	r1, r4, #12
 800d266:	4680      	mov	r8, r0
 800d268:	0092      	lsls	r2, r2, #2
 800d26a:	300c      	adds	r0, #12
 800d26c:	f7ff ff7c 	bl	800d168 <memcpy>
 800d270:	4621      	mov	r1, r4
 800d272:	4630      	mov	r0, r6
 800d274:	f7ff ffb7 	bl	800d1e6 <_Bfree>
 800d278:	4644      	mov	r4, r8
 800d27a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d27e:	3501      	adds	r5, #1
 800d280:	615f      	str	r7, [r3, #20]
 800d282:	6125      	str	r5, [r4, #16]
 800d284:	4620      	mov	r0, r4
 800d286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d28a <__hi0bits>:
 800d28a:	0c02      	lsrs	r2, r0, #16
 800d28c:	0412      	lsls	r2, r2, #16
 800d28e:	4603      	mov	r3, r0
 800d290:	b9b2      	cbnz	r2, 800d2c0 <__hi0bits+0x36>
 800d292:	0403      	lsls	r3, r0, #16
 800d294:	2010      	movs	r0, #16
 800d296:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d29a:	bf04      	itt	eq
 800d29c:	021b      	lsleq	r3, r3, #8
 800d29e:	3008      	addeq	r0, #8
 800d2a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d2a4:	bf04      	itt	eq
 800d2a6:	011b      	lsleq	r3, r3, #4
 800d2a8:	3004      	addeq	r0, #4
 800d2aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2ae:	bf04      	itt	eq
 800d2b0:	009b      	lsleq	r3, r3, #2
 800d2b2:	3002      	addeq	r0, #2
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	db06      	blt.n	800d2c6 <__hi0bits+0x3c>
 800d2b8:	005b      	lsls	r3, r3, #1
 800d2ba:	d503      	bpl.n	800d2c4 <__hi0bits+0x3a>
 800d2bc:	3001      	adds	r0, #1
 800d2be:	4770      	bx	lr
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	e7e8      	b.n	800d296 <__hi0bits+0xc>
 800d2c4:	2020      	movs	r0, #32
 800d2c6:	4770      	bx	lr

0800d2c8 <__lo0bits>:
 800d2c8:	6803      	ldr	r3, [r0, #0]
 800d2ca:	f013 0207 	ands.w	r2, r3, #7
 800d2ce:	4601      	mov	r1, r0
 800d2d0:	d00b      	beq.n	800d2ea <__lo0bits+0x22>
 800d2d2:	07da      	lsls	r2, r3, #31
 800d2d4:	d423      	bmi.n	800d31e <__lo0bits+0x56>
 800d2d6:	0798      	lsls	r0, r3, #30
 800d2d8:	bf49      	itett	mi
 800d2da:	085b      	lsrmi	r3, r3, #1
 800d2dc:	089b      	lsrpl	r3, r3, #2
 800d2de:	2001      	movmi	r0, #1
 800d2e0:	600b      	strmi	r3, [r1, #0]
 800d2e2:	bf5c      	itt	pl
 800d2e4:	600b      	strpl	r3, [r1, #0]
 800d2e6:	2002      	movpl	r0, #2
 800d2e8:	4770      	bx	lr
 800d2ea:	b298      	uxth	r0, r3
 800d2ec:	b9a8      	cbnz	r0, 800d31a <__lo0bits+0x52>
 800d2ee:	0c1b      	lsrs	r3, r3, #16
 800d2f0:	2010      	movs	r0, #16
 800d2f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d2f6:	bf04      	itt	eq
 800d2f8:	0a1b      	lsreq	r3, r3, #8
 800d2fa:	3008      	addeq	r0, #8
 800d2fc:	071a      	lsls	r2, r3, #28
 800d2fe:	bf04      	itt	eq
 800d300:	091b      	lsreq	r3, r3, #4
 800d302:	3004      	addeq	r0, #4
 800d304:	079a      	lsls	r2, r3, #30
 800d306:	bf04      	itt	eq
 800d308:	089b      	lsreq	r3, r3, #2
 800d30a:	3002      	addeq	r0, #2
 800d30c:	07da      	lsls	r2, r3, #31
 800d30e:	d402      	bmi.n	800d316 <__lo0bits+0x4e>
 800d310:	085b      	lsrs	r3, r3, #1
 800d312:	d006      	beq.n	800d322 <__lo0bits+0x5a>
 800d314:	3001      	adds	r0, #1
 800d316:	600b      	str	r3, [r1, #0]
 800d318:	4770      	bx	lr
 800d31a:	4610      	mov	r0, r2
 800d31c:	e7e9      	b.n	800d2f2 <__lo0bits+0x2a>
 800d31e:	2000      	movs	r0, #0
 800d320:	4770      	bx	lr
 800d322:	2020      	movs	r0, #32
 800d324:	4770      	bx	lr

0800d326 <__i2b>:
 800d326:	b510      	push	{r4, lr}
 800d328:	460c      	mov	r4, r1
 800d32a:	2101      	movs	r1, #1
 800d32c:	f7ff ff27 	bl	800d17e <_Balloc>
 800d330:	2201      	movs	r2, #1
 800d332:	6144      	str	r4, [r0, #20]
 800d334:	6102      	str	r2, [r0, #16]
 800d336:	bd10      	pop	{r4, pc}

0800d338 <__multiply>:
 800d338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33c:	4614      	mov	r4, r2
 800d33e:	690a      	ldr	r2, [r1, #16]
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	429a      	cmp	r2, r3
 800d344:	bfb8      	it	lt
 800d346:	460b      	movlt	r3, r1
 800d348:	4688      	mov	r8, r1
 800d34a:	bfbc      	itt	lt
 800d34c:	46a0      	movlt	r8, r4
 800d34e:	461c      	movlt	r4, r3
 800d350:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d354:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d358:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d35c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d360:	eb07 0609 	add.w	r6, r7, r9
 800d364:	42b3      	cmp	r3, r6
 800d366:	bfb8      	it	lt
 800d368:	3101      	addlt	r1, #1
 800d36a:	f7ff ff08 	bl	800d17e <_Balloc>
 800d36e:	f100 0514 	add.w	r5, r0, #20
 800d372:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d376:	462b      	mov	r3, r5
 800d378:	2200      	movs	r2, #0
 800d37a:	4573      	cmp	r3, lr
 800d37c:	d316      	bcc.n	800d3ac <__multiply+0x74>
 800d37e:	f104 0214 	add.w	r2, r4, #20
 800d382:	f108 0114 	add.w	r1, r8, #20
 800d386:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d38a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	9b00      	ldr	r3, [sp, #0]
 800d392:	9201      	str	r2, [sp, #4]
 800d394:	4293      	cmp	r3, r2
 800d396:	d80c      	bhi.n	800d3b2 <__multiply+0x7a>
 800d398:	2e00      	cmp	r6, #0
 800d39a:	dd03      	ble.n	800d3a4 <__multiply+0x6c>
 800d39c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d05d      	beq.n	800d460 <__multiply+0x128>
 800d3a4:	6106      	str	r6, [r0, #16]
 800d3a6:	b003      	add	sp, #12
 800d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ac:	f843 2b04 	str.w	r2, [r3], #4
 800d3b0:	e7e3      	b.n	800d37a <__multiply+0x42>
 800d3b2:	f8b2 b000 	ldrh.w	fp, [r2]
 800d3b6:	f1bb 0f00 	cmp.w	fp, #0
 800d3ba:	d023      	beq.n	800d404 <__multiply+0xcc>
 800d3bc:	4689      	mov	r9, r1
 800d3be:	46ac      	mov	ip, r5
 800d3c0:	f04f 0800 	mov.w	r8, #0
 800d3c4:	f859 4b04 	ldr.w	r4, [r9], #4
 800d3c8:	f8dc a000 	ldr.w	sl, [ip]
 800d3cc:	b2a3      	uxth	r3, r4
 800d3ce:	fa1f fa8a 	uxth.w	sl, sl
 800d3d2:	fb0b a303 	mla	r3, fp, r3, sl
 800d3d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d3da:	f8dc 4000 	ldr.w	r4, [ip]
 800d3de:	4443      	add	r3, r8
 800d3e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d3e4:	fb0b 840a 	mla	r4, fp, sl, r8
 800d3e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d3ec:	46e2      	mov	sl, ip
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d3f4:	454f      	cmp	r7, r9
 800d3f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d3fa:	f84a 3b04 	str.w	r3, [sl], #4
 800d3fe:	d82b      	bhi.n	800d458 <__multiply+0x120>
 800d400:	f8cc 8004 	str.w	r8, [ip, #4]
 800d404:	9b01      	ldr	r3, [sp, #4]
 800d406:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d40a:	3204      	adds	r2, #4
 800d40c:	f1ba 0f00 	cmp.w	sl, #0
 800d410:	d020      	beq.n	800d454 <__multiply+0x11c>
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	4689      	mov	r9, r1
 800d416:	46a8      	mov	r8, r5
 800d418:	f04f 0b00 	mov.w	fp, #0
 800d41c:	f8b9 c000 	ldrh.w	ip, [r9]
 800d420:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d424:	fb0a 440c 	mla	r4, sl, ip, r4
 800d428:	445c      	add	r4, fp
 800d42a:	46c4      	mov	ip, r8
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d432:	f84c 3b04 	str.w	r3, [ip], #4
 800d436:	f859 3b04 	ldr.w	r3, [r9], #4
 800d43a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d43e:	0c1b      	lsrs	r3, r3, #16
 800d440:	fb0a b303 	mla	r3, sl, r3, fp
 800d444:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d448:	454f      	cmp	r7, r9
 800d44a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d44e:	d805      	bhi.n	800d45c <__multiply+0x124>
 800d450:	f8c8 3004 	str.w	r3, [r8, #4]
 800d454:	3504      	adds	r5, #4
 800d456:	e79b      	b.n	800d390 <__multiply+0x58>
 800d458:	46d4      	mov	ip, sl
 800d45a:	e7b3      	b.n	800d3c4 <__multiply+0x8c>
 800d45c:	46e0      	mov	r8, ip
 800d45e:	e7dd      	b.n	800d41c <__multiply+0xe4>
 800d460:	3e01      	subs	r6, #1
 800d462:	e799      	b.n	800d398 <__multiply+0x60>

0800d464 <__pow5mult>:
 800d464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d468:	4615      	mov	r5, r2
 800d46a:	f012 0203 	ands.w	r2, r2, #3
 800d46e:	4606      	mov	r6, r0
 800d470:	460f      	mov	r7, r1
 800d472:	d007      	beq.n	800d484 <__pow5mult+0x20>
 800d474:	3a01      	subs	r2, #1
 800d476:	4c21      	ldr	r4, [pc, #132]	; (800d4fc <__pow5mult+0x98>)
 800d478:	2300      	movs	r3, #0
 800d47a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d47e:	f7ff fec9 	bl	800d214 <__multadd>
 800d482:	4607      	mov	r7, r0
 800d484:	10ad      	asrs	r5, r5, #2
 800d486:	d035      	beq.n	800d4f4 <__pow5mult+0x90>
 800d488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d48a:	b93c      	cbnz	r4, 800d49c <__pow5mult+0x38>
 800d48c:	2010      	movs	r0, #16
 800d48e:	f7ff fe51 	bl	800d134 <malloc>
 800d492:	6270      	str	r0, [r6, #36]	; 0x24
 800d494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d498:	6004      	str	r4, [r0, #0]
 800d49a:	60c4      	str	r4, [r0, #12]
 800d49c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4a4:	b94c      	cbnz	r4, 800d4ba <__pow5mult+0x56>
 800d4a6:	f240 2171 	movw	r1, #625	; 0x271
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	f7ff ff3b 	bl	800d326 <__i2b>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	6003      	str	r3, [r0, #0]
 800d4ba:	f04f 0800 	mov.w	r8, #0
 800d4be:	07eb      	lsls	r3, r5, #31
 800d4c0:	d50a      	bpl.n	800d4d8 <__pow5mult+0x74>
 800d4c2:	4639      	mov	r1, r7
 800d4c4:	4622      	mov	r2, r4
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f7ff ff36 	bl	800d338 <__multiply>
 800d4cc:	4639      	mov	r1, r7
 800d4ce:	4681      	mov	r9, r0
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f7ff fe88 	bl	800d1e6 <_Bfree>
 800d4d6:	464f      	mov	r7, r9
 800d4d8:	106d      	asrs	r5, r5, #1
 800d4da:	d00b      	beq.n	800d4f4 <__pow5mult+0x90>
 800d4dc:	6820      	ldr	r0, [r4, #0]
 800d4de:	b938      	cbnz	r0, 800d4f0 <__pow5mult+0x8c>
 800d4e0:	4622      	mov	r2, r4
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7ff ff27 	bl	800d338 <__multiply>
 800d4ea:	6020      	str	r0, [r4, #0]
 800d4ec:	f8c0 8000 	str.w	r8, [r0]
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	e7e4      	b.n	800d4be <__pow5mult+0x5a>
 800d4f4:	4638      	mov	r0, r7
 800d4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4fa:	bf00      	nop
 800d4fc:	0800e610 	.word	0x0800e610

0800d500 <__lshift>:
 800d500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d504:	460c      	mov	r4, r1
 800d506:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d50a:	6923      	ldr	r3, [r4, #16]
 800d50c:	6849      	ldr	r1, [r1, #4]
 800d50e:	eb0a 0903 	add.w	r9, sl, r3
 800d512:	68a3      	ldr	r3, [r4, #8]
 800d514:	4607      	mov	r7, r0
 800d516:	4616      	mov	r6, r2
 800d518:	f109 0501 	add.w	r5, r9, #1
 800d51c:	42ab      	cmp	r3, r5
 800d51e:	db32      	blt.n	800d586 <__lshift+0x86>
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff fe2c 	bl	800d17e <_Balloc>
 800d526:	2300      	movs	r3, #0
 800d528:	4680      	mov	r8, r0
 800d52a:	f100 0114 	add.w	r1, r0, #20
 800d52e:	461a      	mov	r2, r3
 800d530:	4553      	cmp	r3, sl
 800d532:	db2b      	blt.n	800d58c <__lshift+0x8c>
 800d534:	6920      	ldr	r0, [r4, #16]
 800d536:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d53a:	f104 0314 	add.w	r3, r4, #20
 800d53e:	f016 021f 	ands.w	r2, r6, #31
 800d542:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d546:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d54a:	d025      	beq.n	800d598 <__lshift+0x98>
 800d54c:	f1c2 0e20 	rsb	lr, r2, #32
 800d550:	2000      	movs	r0, #0
 800d552:	681e      	ldr	r6, [r3, #0]
 800d554:	468a      	mov	sl, r1
 800d556:	4096      	lsls	r6, r2
 800d558:	4330      	orrs	r0, r6
 800d55a:	f84a 0b04 	str.w	r0, [sl], #4
 800d55e:	f853 0b04 	ldr.w	r0, [r3], #4
 800d562:	459c      	cmp	ip, r3
 800d564:	fa20 f00e 	lsr.w	r0, r0, lr
 800d568:	d814      	bhi.n	800d594 <__lshift+0x94>
 800d56a:	6048      	str	r0, [r1, #4]
 800d56c:	b108      	cbz	r0, 800d572 <__lshift+0x72>
 800d56e:	f109 0502 	add.w	r5, r9, #2
 800d572:	3d01      	subs	r5, #1
 800d574:	4638      	mov	r0, r7
 800d576:	f8c8 5010 	str.w	r5, [r8, #16]
 800d57a:	4621      	mov	r1, r4
 800d57c:	f7ff fe33 	bl	800d1e6 <_Bfree>
 800d580:	4640      	mov	r0, r8
 800d582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d586:	3101      	adds	r1, #1
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	e7c7      	b.n	800d51c <__lshift+0x1c>
 800d58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d590:	3301      	adds	r3, #1
 800d592:	e7cd      	b.n	800d530 <__lshift+0x30>
 800d594:	4651      	mov	r1, sl
 800d596:	e7dc      	b.n	800d552 <__lshift+0x52>
 800d598:	3904      	subs	r1, #4
 800d59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d59e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5a2:	459c      	cmp	ip, r3
 800d5a4:	d8f9      	bhi.n	800d59a <__lshift+0x9a>
 800d5a6:	e7e4      	b.n	800d572 <__lshift+0x72>

0800d5a8 <__mcmp>:
 800d5a8:	6903      	ldr	r3, [r0, #16]
 800d5aa:	690a      	ldr	r2, [r1, #16]
 800d5ac:	1a9b      	subs	r3, r3, r2
 800d5ae:	b530      	push	{r4, r5, lr}
 800d5b0:	d10c      	bne.n	800d5cc <__mcmp+0x24>
 800d5b2:	0092      	lsls	r2, r2, #2
 800d5b4:	3014      	adds	r0, #20
 800d5b6:	3114      	adds	r1, #20
 800d5b8:	1884      	adds	r4, r0, r2
 800d5ba:	4411      	add	r1, r2
 800d5bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d5c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d5c4:	4295      	cmp	r5, r2
 800d5c6:	d003      	beq.n	800d5d0 <__mcmp+0x28>
 800d5c8:	d305      	bcc.n	800d5d6 <__mcmp+0x2e>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	bd30      	pop	{r4, r5, pc}
 800d5d0:	42a0      	cmp	r0, r4
 800d5d2:	d3f3      	bcc.n	800d5bc <__mcmp+0x14>
 800d5d4:	e7fa      	b.n	800d5cc <__mcmp+0x24>
 800d5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5da:	e7f7      	b.n	800d5cc <__mcmp+0x24>

0800d5dc <__mdiff>:
 800d5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e0:	460d      	mov	r5, r1
 800d5e2:	4607      	mov	r7, r0
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	4614      	mov	r4, r2
 800d5ea:	f7ff ffdd 	bl	800d5a8 <__mcmp>
 800d5ee:	1e06      	subs	r6, r0, #0
 800d5f0:	d108      	bne.n	800d604 <__mdiff+0x28>
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	4638      	mov	r0, r7
 800d5f6:	f7ff fdc2 	bl	800d17e <_Balloc>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d604:	bfa4      	itt	ge
 800d606:	4623      	movge	r3, r4
 800d608:	462c      	movge	r4, r5
 800d60a:	4638      	mov	r0, r7
 800d60c:	6861      	ldr	r1, [r4, #4]
 800d60e:	bfa6      	itte	ge
 800d610:	461d      	movge	r5, r3
 800d612:	2600      	movge	r6, #0
 800d614:	2601      	movlt	r6, #1
 800d616:	f7ff fdb2 	bl	800d17e <_Balloc>
 800d61a:	692b      	ldr	r3, [r5, #16]
 800d61c:	60c6      	str	r6, [r0, #12]
 800d61e:	6926      	ldr	r6, [r4, #16]
 800d620:	f105 0914 	add.w	r9, r5, #20
 800d624:	f104 0214 	add.w	r2, r4, #20
 800d628:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d62c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d630:	f100 0514 	add.w	r5, r0, #20
 800d634:	f04f 0e00 	mov.w	lr, #0
 800d638:	f852 ab04 	ldr.w	sl, [r2], #4
 800d63c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d640:	fa1e f18a 	uxtah	r1, lr, sl
 800d644:	b2a3      	uxth	r3, r4
 800d646:	1ac9      	subs	r1, r1, r3
 800d648:	0c23      	lsrs	r3, r4, #16
 800d64a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d64e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d652:	b289      	uxth	r1, r1
 800d654:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d658:	45c8      	cmp	r8, r9
 800d65a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d65e:	4694      	mov	ip, r2
 800d660:	f845 3b04 	str.w	r3, [r5], #4
 800d664:	d8e8      	bhi.n	800d638 <__mdiff+0x5c>
 800d666:	45bc      	cmp	ip, r7
 800d668:	d304      	bcc.n	800d674 <__mdiff+0x98>
 800d66a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d66e:	b183      	cbz	r3, 800d692 <__mdiff+0xb6>
 800d670:	6106      	str	r6, [r0, #16]
 800d672:	e7c5      	b.n	800d600 <__mdiff+0x24>
 800d674:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d678:	fa1e f381 	uxtah	r3, lr, r1
 800d67c:	141a      	asrs	r2, r3, #16
 800d67e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d682:	b29b      	uxth	r3, r3
 800d684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d688:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d68c:	f845 3b04 	str.w	r3, [r5], #4
 800d690:	e7e9      	b.n	800d666 <__mdiff+0x8a>
 800d692:	3e01      	subs	r6, #1
 800d694:	e7e9      	b.n	800d66a <__mdiff+0x8e>

0800d696 <__d2b>:
 800d696:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d69a:	460e      	mov	r6, r1
 800d69c:	2101      	movs	r1, #1
 800d69e:	ec59 8b10 	vmov	r8, r9, d0
 800d6a2:	4615      	mov	r5, r2
 800d6a4:	f7ff fd6b 	bl	800d17e <_Balloc>
 800d6a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d6ac:	4607      	mov	r7, r0
 800d6ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6b2:	bb34      	cbnz	r4, 800d702 <__d2b+0x6c>
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	f1b8 0300 	subs.w	r3, r8, #0
 800d6ba:	d027      	beq.n	800d70c <__d2b+0x76>
 800d6bc:	a802      	add	r0, sp, #8
 800d6be:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d6c2:	f7ff fe01 	bl	800d2c8 <__lo0bits>
 800d6c6:	9900      	ldr	r1, [sp, #0]
 800d6c8:	b1f0      	cbz	r0, 800d708 <__d2b+0x72>
 800d6ca:	9a01      	ldr	r2, [sp, #4]
 800d6cc:	f1c0 0320 	rsb	r3, r0, #32
 800d6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d4:	430b      	orrs	r3, r1
 800d6d6:	40c2      	lsrs	r2, r0
 800d6d8:	617b      	str	r3, [r7, #20]
 800d6da:	9201      	str	r2, [sp, #4]
 800d6dc:	9b01      	ldr	r3, [sp, #4]
 800d6de:	61bb      	str	r3, [r7, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	bf14      	ite	ne
 800d6e4:	2102      	movne	r1, #2
 800d6e6:	2101      	moveq	r1, #1
 800d6e8:	6139      	str	r1, [r7, #16]
 800d6ea:	b1c4      	cbz	r4, 800d71e <__d2b+0x88>
 800d6ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d6f0:	4404      	add	r4, r0
 800d6f2:	6034      	str	r4, [r6, #0]
 800d6f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d6f8:	6028      	str	r0, [r5, #0]
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	b003      	add	sp, #12
 800d6fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d706:	e7d5      	b.n	800d6b4 <__d2b+0x1e>
 800d708:	6179      	str	r1, [r7, #20]
 800d70a:	e7e7      	b.n	800d6dc <__d2b+0x46>
 800d70c:	a801      	add	r0, sp, #4
 800d70e:	f7ff fddb 	bl	800d2c8 <__lo0bits>
 800d712:	9b01      	ldr	r3, [sp, #4]
 800d714:	617b      	str	r3, [r7, #20]
 800d716:	2101      	movs	r1, #1
 800d718:	6139      	str	r1, [r7, #16]
 800d71a:	3020      	adds	r0, #32
 800d71c:	e7e5      	b.n	800d6ea <__d2b+0x54>
 800d71e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d722:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d726:	6030      	str	r0, [r6, #0]
 800d728:	6918      	ldr	r0, [r3, #16]
 800d72a:	f7ff fdae 	bl	800d28a <__hi0bits>
 800d72e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d732:	e7e1      	b.n	800d6f8 <__d2b+0x62>

0800d734 <_calloc_r>:
 800d734:	b538      	push	{r3, r4, r5, lr}
 800d736:	fb02 f401 	mul.w	r4, r2, r1
 800d73a:	4621      	mov	r1, r4
 800d73c:	f000 f856 	bl	800d7ec <_malloc_r>
 800d740:	4605      	mov	r5, r0
 800d742:	b118      	cbz	r0, 800d74c <_calloc_r+0x18>
 800d744:	4622      	mov	r2, r4
 800d746:	2100      	movs	r1, #0
 800d748:	f7fe f90c 	bl	800b964 <memset>
 800d74c:	4628      	mov	r0, r5
 800d74e:	bd38      	pop	{r3, r4, r5, pc}

0800d750 <_free_r>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	4605      	mov	r5, r0
 800d754:	2900      	cmp	r1, #0
 800d756:	d045      	beq.n	800d7e4 <_free_r+0x94>
 800d758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d75c:	1f0c      	subs	r4, r1, #4
 800d75e:	2b00      	cmp	r3, #0
 800d760:	bfb8      	it	lt
 800d762:	18e4      	addlt	r4, r4, r3
 800d764:	f000 fa24 	bl	800dbb0 <__malloc_lock>
 800d768:	4a1f      	ldr	r2, [pc, #124]	; (800d7e8 <_free_r+0x98>)
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	4610      	mov	r0, r2
 800d76e:	b933      	cbnz	r3, 800d77e <_free_r+0x2e>
 800d770:	6063      	str	r3, [r4, #4]
 800d772:	6014      	str	r4, [r2, #0]
 800d774:	4628      	mov	r0, r5
 800d776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d77a:	f000 ba1a 	b.w	800dbb2 <__malloc_unlock>
 800d77e:	42a3      	cmp	r3, r4
 800d780:	d90c      	bls.n	800d79c <_free_r+0x4c>
 800d782:	6821      	ldr	r1, [r4, #0]
 800d784:	1862      	adds	r2, r4, r1
 800d786:	4293      	cmp	r3, r2
 800d788:	bf04      	itt	eq
 800d78a:	681a      	ldreq	r2, [r3, #0]
 800d78c:	685b      	ldreq	r3, [r3, #4]
 800d78e:	6063      	str	r3, [r4, #4]
 800d790:	bf04      	itt	eq
 800d792:	1852      	addeq	r2, r2, r1
 800d794:	6022      	streq	r2, [r4, #0]
 800d796:	6004      	str	r4, [r0, #0]
 800d798:	e7ec      	b.n	800d774 <_free_r+0x24>
 800d79a:	4613      	mov	r3, r2
 800d79c:	685a      	ldr	r2, [r3, #4]
 800d79e:	b10a      	cbz	r2, 800d7a4 <_free_r+0x54>
 800d7a0:	42a2      	cmp	r2, r4
 800d7a2:	d9fa      	bls.n	800d79a <_free_r+0x4a>
 800d7a4:	6819      	ldr	r1, [r3, #0]
 800d7a6:	1858      	adds	r0, r3, r1
 800d7a8:	42a0      	cmp	r0, r4
 800d7aa:	d10b      	bne.n	800d7c4 <_free_r+0x74>
 800d7ac:	6820      	ldr	r0, [r4, #0]
 800d7ae:	4401      	add	r1, r0
 800d7b0:	1858      	adds	r0, r3, r1
 800d7b2:	4282      	cmp	r2, r0
 800d7b4:	6019      	str	r1, [r3, #0]
 800d7b6:	d1dd      	bne.n	800d774 <_free_r+0x24>
 800d7b8:	6810      	ldr	r0, [r2, #0]
 800d7ba:	6852      	ldr	r2, [r2, #4]
 800d7bc:	605a      	str	r2, [r3, #4]
 800d7be:	4401      	add	r1, r0
 800d7c0:	6019      	str	r1, [r3, #0]
 800d7c2:	e7d7      	b.n	800d774 <_free_r+0x24>
 800d7c4:	d902      	bls.n	800d7cc <_free_r+0x7c>
 800d7c6:	230c      	movs	r3, #12
 800d7c8:	602b      	str	r3, [r5, #0]
 800d7ca:	e7d3      	b.n	800d774 <_free_r+0x24>
 800d7cc:	6820      	ldr	r0, [r4, #0]
 800d7ce:	1821      	adds	r1, r4, r0
 800d7d0:	428a      	cmp	r2, r1
 800d7d2:	bf04      	itt	eq
 800d7d4:	6811      	ldreq	r1, [r2, #0]
 800d7d6:	6852      	ldreq	r2, [r2, #4]
 800d7d8:	6062      	str	r2, [r4, #4]
 800d7da:	bf04      	itt	eq
 800d7dc:	1809      	addeq	r1, r1, r0
 800d7de:	6021      	streq	r1, [r4, #0]
 800d7e0:	605c      	str	r4, [r3, #4]
 800d7e2:	e7c7      	b.n	800d774 <_free_r+0x24>
 800d7e4:	bd38      	pop	{r3, r4, r5, pc}
 800d7e6:	bf00      	nop
 800d7e8:	200006dc 	.word	0x200006dc

0800d7ec <_malloc_r>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	1ccd      	adds	r5, r1, #3
 800d7f0:	f025 0503 	bic.w	r5, r5, #3
 800d7f4:	3508      	adds	r5, #8
 800d7f6:	2d0c      	cmp	r5, #12
 800d7f8:	bf38      	it	cc
 800d7fa:	250c      	movcc	r5, #12
 800d7fc:	2d00      	cmp	r5, #0
 800d7fe:	4606      	mov	r6, r0
 800d800:	db01      	blt.n	800d806 <_malloc_r+0x1a>
 800d802:	42a9      	cmp	r1, r5
 800d804:	d903      	bls.n	800d80e <_malloc_r+0x22>
 800d806:	230c      	movs	r3, #12
 800d808:	6033      	str	r3, [r6, #0]
 800d80a:	2000      	movs	r0, #0
 800d80c:	bd70      	pop	{r4, r5, r6, pc}
 800d80e:	f000 f9cf 	bl	800dbb0 <__malloc_lock>
 800d812:	4a21      	ldr	r2, [pc, #132]	; (800d898 <_malloc_r+0xac>)
 800d814:	6814      	ldr	r4, [r2, #0]
 800d816:	4621      	mov	r1, r4
 800d818:	b991      	cbnz	r1, 800d840 <_malloc_r+0x54>
 800d81a:	4c20      	ldr	r4, [pc, #128]	; (800d89c <_malloc_r+0xb0>)
 800d81c:	6823      	ldr	r3, [r4, #0]
 800d81e:	b91b      	cbnz	r3, 800d828 <_malloc_r+0x3c>
 800d820:	4630      	mov	r0, r6
 800d822:	f000 f98f 	bl	800db44 <_sbrk_r>
 800d826:	6020      	str	r0, [r4, #0]
 800d828:	4629      	mov	r1, r5
 800d82a:	4630      	mov	r0, r6
 800d82c:	f000 f98a 	bl	800db44 <_sbrk_r>
 800d830:	1c43      	adds	r3, r0, #1
 800d832:	d124      	bne.n	800d87e <_malloc_r+0x92>
 800d834:	230c      	movs	r3, #12
 800d836:	6033      	str	r3, [r6, #0]
 800d838:	4630      	mov	r0, r6
 800d83a:	f000 f9ba 	bl	800dbb2 <__malloc_unlock>
 800d83e:	e7e4      	b.n	800d80a <_malloc_r+0x1e>
 800d840:	680b      	ldr	r3, [r1, #0]
 800d842:	1b5b      	subs	r3, r3, r5
 800d844:	d418      	bmi.n	800d878 <_malloc_r+0x8c>
 800d846:	2b0b      	cmp	r3, #11
 800d848:	d90f      	bls.n	800d86a <_malloc_r+0x7e>
 800d84a:	600b      	str	r3, [r1, #0]
 800d84c:	50cd      	str	r5, [r1, r3]
 800d84e:	18cc      	adds	r4, r1, r3
 800d850:	4630      	mov	r0, r6
 800d852:	f000 f9ae 	bl	800dbb2 <__malloc_unlock>
 800d856:	f104 000b 	add.w	r0, r4, #11
 800d85a:	1d23      	adds	r3, r4, #4
 800d85c:	f020 0007 	bic.w	r0, r0, #7
 800d860:	1ac3      	subs	r3, r0, r3
 800d862:	d0d3      	beq.n	800d80c <_malloc_r+0x20>
 800d864:	425a      	negs	r2, r3
 800d866:	50e2      	str	r2, [r4, r3]
 800d868:	e7d0      	b.n	800d80c <_malloc_r+0x20>
 800d86a:	428c      	cmp	r4, r1
 800d86c:	684b      	ldr	r3, [r1, #4]
 800d86e:	bf16      	itet	ne
 800d870:	6063      	strne	r3, [r4, #4]
 800d872:	6013      	streq	r3, [r2, #0]
 800d874:	460c      	movne	r4, r1
 800d876:	e7eb      	b.n	800d850 <_malloc_r+0x64>
 800d878:	460c      	mov	r4, r1
 800d87a:	6849      	ldr	r1, [r1, #4]
 800d87c:	e7cc      	b.n	800d818 <_malloc_r+0x2c>
 800d87e:	1cc4      	adds	r4, r0, #3
 800d880:	f024 0403 	bic.w	r4, r4, #3
 800d884:	42a0      	cmp	r0, r4
 800d886:	d005      	beq.n	800d894 <_malloc_r+0xa8>
 800d888:	1a21      	subs	r1, r4, r0
 800d88a:	4630      	mov	r0, r6
 800d88c:	f000 f95a 	bl	800db44 <_sbrk_r>
 800d890:	3001      	adds	r0, #1
 800d892:	d0cf      	beq.n	800d834 <_malloc_r+0x48>
 800d894:	6025      	str	r5, [r4, #0]
 800d896:	e7db      	b.n	800d850 <_malloc_r+0x64>
 800d898:	200006dc 	.word	0x200006dc
 800d89c:	200006e0 	.word	0x200006e0

0800d8a0 <__ssputs_r>:
 800d8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a4:	688e      	ldr	r6, [r1, #8]
 800d8a6:	429e      	cmp	r6, r3
 800d8a8:	4682      	mov	sl, r0
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	4690      	mov	r8, r2
 800d8ae:	4699      	mov	r9, r3
 800d8b0:	d837      	bhi.n	800d922 <__ssputs_r+0x82>
 800d8b2:	898a      	ldrh	r2, [r1, #12]
 800d8b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8b8:	d031      	beq.n	800d91e <__ssputs_r+0x7e>
 800d8ba:	6825      	ldr	r5, [r4, #0]
 800d8bc:	6909      	ldr	r1, [r1, #16]
 800d8be:	1a6f      	subs	r7, r5, r1
 800d8c0:	6965      	ldr	r5, [r4, #20]
 800d8c2:	2302      	movs	r3, #2
 800d8c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8c8:	fb95 f5f3 	sdiv	r5, r5, r3
 800d8cc:	f109 0301 	add.w	r3, r9, #1
 800d8d0:	443b      	add	r3, r7
 800d8d2:	429d      	cmp	r5, r3
 800d8d4:	bf38      	it	cc
 800d8d6:	461d      	movcc	r5, r3
 800d8d8:	0553      	lsls	r3, r2, #21
 800d8da:	d530      	bpl.n	800d93e <__ssputs_r+0x9e>
 800d8dc:	4629      	mov	r1, r5
 800d8de:	f7ff ff85 	bl	800d7ec <_malloc_r>
 800d8e2:	4606      	mov	r6, r0
 800d8e4:	b950      	cbnz	r0, 800d8fc <__ssputs_r+0x5c>
 800d8e6:	230c      	movs	r3, #12
 800d8e8:	f8ca 3000 	str.w	r3, [sl]
 800d8ec:	89a3      	ldrh	r3, [r4, #12]
 800d8ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8f2:	81a3      	strh	r3, [r4, #12]
 800d8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8fc:	463a      	mov	r2, r7
 800d8fe:	6921      	ldr	r1, [r4, #16]
 800d900:	f7ff fc32 	bl	800d168 <memcpy>
 800d904:	89a3      	ldrh	r3, [r4, #12]
 800d906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d90e:	81a3      	strh	r3, [r4, #12]
 800d910:	6126      	str	r6, [r4, #16]
 800d912:	6165      	str	r5, [r4, #20]
 800d914:	443e      	add	r6, r7
 800d916:	1bed      	subs	r5, r5, r7
 800d918:	6026      	str	r6, [r4, #0]
 800d91a:	60a5      	str	r5, [r4, #8]
 800d91c:	464e      	mov	r6, r9
 800d91e:	454e      	cmp	r6, r9
 800d920:	d900      	bls.n	800d924 <__ssputs_r+0x84>
 800d922:	464e      	mov	r6, r9
 800d924:	4632      	mov	r2, r6
 800d926:	4641      	mov	r1, r8
 800d928:	6820      	ldr	r0, [r4, #0]
 800d92a:	f000 f928 	bl	800db7e <memmove>
 800d92e:	68a3      	ldr	r3, [r4, #8]
 800d930:	1b9b      	subs	r3, r3, r6
 800d932:	60a3      	str	r3, [r4, #8]
 800d934:	6823      	ldr	r3, [r4, #0]
 800d936:	441e      	add	r6, r3
 800d938:	6026      	str	r6, [r4, #0]
 800d93a:	2000      	movs	r0, #0
 800d93c:	e7dc      	b.n	800d8f8 <__ssputs_r+0x58>
 800d93e:	462a      	mov	r2, r5
 800d940:	f000 f938 	bl	800dbb4 <_realloc_r>
 800d944:	4606      	mov	r6, r0
 800d946:	2800      	cmp	r0, #0
 800d948:	d1e2      	bne.n	800d910 <__ssputs_r+0x70>
 800d94a:	6921      	ldr	r1, [r4, #16]
 800d94c:	4650      	mov	r0, sl
 800d94e:	f7ff feff 	bl	800d750 <_free_r>
 800d952:	e7c8      	b.n	800d8e6 <__ssputs_r+0x46>

0800d954 <_svfiprintf_r>:
 800d954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d958:	461d      	mov	r5, r3
 800d95a:	898b      	ldrh	r3, [r1, #12]
 800d95c:	061f      	lsls	r7, r3, #24
 800d95e:	b09d      	sub	sp, #116	; 0x74
 800d960:	4680      	mov	r8, r0
 800d962:	460c      	mov	r4, r1
 800d964:	4616      	mov	r6, r2
 800d966:	d50f      	bpl.n	800d988 <_svfiprintf_r+0x34>
 800d968:	690b      	ldr	r3, [r1, #16]
 800d96a:	b96b      	cbnz	r3, 800d988 <_svfiprintf_r+0x34>
 800d96c:	2140      	movs	r1, #64	; 0x40
 800d96e:	f7ff ff3d 	bl	800d7ec <_malloc_r>
 800d972:	6020      	str	r0, [r4, #0]
 800d974:	6120      	str	r0, [r4, #16]
 800d976:	b928      	cbnz	r0, 800d984 <_svfiprintf_r+0x30>
 800d978:	230c      	movs	r3, #12
 800d97a:	f8c8 3000 	str.w	r3, [r8]
 800d97e:	f04f 30ff 	mov.w	r0, #4294967295
 800d982:	e0c8      	b.n	800db16 <_svfiprintf_r+0x1c2>
 800d984:	2340      	movs	r3, #64	; 0x40
 800d986:	6163      	str	r3, [r4, #20]
 800d988:	2300      	movs	r3, #0
 800d98a:	9309      	str	r3, [sp, #36]	; 0x24
 800d98c:	2320      	movs	r3, #32
 800d98e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d992:	2330      	movs	r3, #48	; 0x30
 800d994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d998:	9503      	str	r5, [sp, #12]
 800d99a:	f04f 0b01 	mov.w	fp, #1
 800d99e:	4637      	mov	r7, r6
 800d9a0:	463d      	mov	r5, r7
 800d9a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d9a6:	b10b      	cbz	r3, 800d9ac <_svfiprintf_r+0x58>
 800d9a8:	2b25      	cmp	r3, #37	; 0x25
 800d9aa:	d13e      	bne.n	800da2a <_svfiprintf_r+0xd6>
 800d9ac:	ebb7 0a06 	subs.w	sl, r7, r6
 800d9b0:	d00b      	beq.n	800d9ca <_svfiprintf_r+0x76>
 800d9b2:	4653      	mov	r3, sl
 800d9b4:	4632      	mov	r2, r6
 800d9b6:	4621      	mov	r1, r4
 800d9b8:	4640      	mov	r0, r8
 800d9ba:	f7ff ff71 	bl	800d8a0 <__ssputs_r>
 800d9be:	3001      	adds	r0, #1
 800d9c0:	f000 80a4 	beq.w	800db0c <_svfiprintf_r+0x1b8>
 800d9c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c6:	4453      	add	r3, sl
 800d9c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d9ca:	783b      	ldrb	r3, [r7, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f000 809d 	beq.w	800db0c <_svfiprintf_r+0x1b8>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9dc:	9304      	str	r3, [sp, #16]
 800d9de:	9307      	str	r3, [sp, #28]
 800d9e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d9e6:	462f      	mov	r7, r5
 800d9e8:	2205      	movs	r2, #5
 800d9ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d9ee:	4850      	ldr	r0, [pc, #320]	; (800db30 <_svfiprintf_r+0x1dc>)
 800d9f0:	f7f2 fbfe 	bl	80001f0 <memchr>
 800d9f4:	9b04      	ldr	r3, [sp, #16]
 800d9f6:	b9d0      	cbnz	r0, 800da2e <_svfiprintf_r+0xda>
 800d9f8:	06d9      	lsls	r1, r3, #27
 800d9fa:	bf44      	itt	mi
 800d9fc:	2220      	movmi	r2, #32
 800d9fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da02:	071a      	lsls	r2, r3, #28
 800da04:	bf44      	itt	mi
 800da06:	222b      	movmi	r2, #43	; 0x2b
 800da08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da0c:	782a      	ldrb	r2, [r5, #0]
 800da0e:	2a2a      	cmp	r2, #42	; 0x2a
 800da10:	d015      	beq.n	800da3e <_svfiprintf_r+0xea>
 800da12:	9a07      	ldr	r2, [sp, #28]
 800da14:	462f      	mov	r7, r5
 800da16:	2000      	movs	r0, #0
 800da18:	250a      	movs	r5, #10
 800da1a:	4639      	mov	r1, r7
 800da1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da20:	3b30      	subs	r3, #48	; 0x30
 800da22:	2b09      	cmp	r3, #9
 800da24:	d94d      	bls.n	800dac2 <_svfiprintf_r+0x16e>
 800da26:	b1b8      	cbz	r0, 800da58 <_svfiprintf_r+0x104>
 800da28:	e00f      	b.n	800da4a <_svfiprintf_r+0xf6>
 800da2a:	462f      	mov	r7, r5
 800da2c:	e7b8      	b.n	800d9a0 <_svfiprintf_r+0x4c>
 800da2e:	4a40      	ldr	r2, [pc, #256]	; (800db30 <_svfiprintf_r+0x1dc>)
 800da30:	1a80      	subs	r0, r0, r2
 800da32:	fa0b f000 	lsl.w	r0, fp, r0
 800da36:	4318      	orrs	r0, r3
 800da38:	9004      	str	r0, [sp, #16]
 800da3a:	463d      	mov	r5, r7
 800da3c:	e7d3      	b.n	800d9e6 <_svfiprintf_r+0x92>
 800da3e:	9a03      	ldr	r2, [sp, #12]
 800da40:	1d11      	adds	r1, r2, #4
 800da42:	6812      	ldr	r2, [r2, #0]
 800da44:	9103      	str	r1, [sp, #12]
 800da46:	2a00      	cmp	r2, #0
 800da48:	db01      	blt.n	800da4e <_svfiprintf_r+0xfa>
 800da4a:	9207      	str	r2, [sp, #28]
 800da4c:	e004      	b.n	800da58 <_svfiprintf_r+0x104>
 800da4e:	4252      	negs	r2, r2
 800da50:	f043 0302 	orr.w	r3, r3, #2
 800da54:	9207      	str	r2, [sp, #28]
 800da56:	9304      	str	r3, [sp, #16]
 800da58:	783b      	ldrb	r3, [r7, #0]
 800da5a:	2b2e      	cmp	r3, #46	; 0x2e
 800da5c:	d10c      	bne.n	800da78 <_svfiprintf_r+0x124>
 800da5e:	787b      	ldrb	r3, [r7, #1]
 800da60:	2b2a      	cmp	r3, #42	; 0x2a
 800da62:	d133      	bne.n	800dacc <_svfiprintf_r+0x178>
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	1d1a      	adds	r2, r3, #4
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	9203      	str	r2, [sp, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	bfb8      	it	lt
 800da70:	f04f 33ff 	movlt.w	r3, #4294967295
 800da74:	3702      	adds	r7, #2
 800da76:	9305      	str	r3, [sp, #20]
 800da78:	4d2e      	ldr	r5, [pc, #184]	; (800db34 <_svfiprintf_r+0x1e0>)
 800da7a:	7839      	ldrb	r1, [r7, #0]
 800da7c:	2203      	movs	r2, #3
 800da7e:	4628      	mov	r0, r5
 800da80:	f7f2 fbb6 	bl	80001f0 <memchr>
 800da84:	b138      	cbz	r0, 800da96 <_svfiprintf_r+0x142>
 800da86:	2340      	movs	r3, #64	; 0x40
 800da88:	1b40      	subs	r0, r0, r5
 800da8a:	fa03 f000 	lsl.w	r0, r3, r0
 800da8e:	9b04      	ldr	r3, [sp, #16]
 800da90:	4303      	orrs	r3, r0
 800da92:	3701      	adds	r7, #1
 800da94:	9304      	str	r3, [sp, #16]
 800da96:	7839      	ldrb	r1, [r7, #0]
 800da98:	4827      	ldr	r0, [pc, #156]	; (800db38 <_svfiprintf_r+0x1e4>)
 800da9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da9e:	2206      	movs	r2, #6
 800daa0:	1c7e      	adds	r6, r7, #1
 800daa2:	f7f2 fba5 	bl	80001f0 <memchr>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d038      	beq.n	800db1c <_svfiprintf_r+0x1c8>
 800daaa:	4b24      	ldr	r3, [pc, #144]	; (800db3c <_svfiprintf_r+0x1e8>)
 800daac:	bb13      	cbnz	r3, 800daf4 <_svfiprintf_r+0x1a0>
 800daae:	9b03      	ldr	r3, [sp, #12]
 800dab0:	3307      	adds	r3, #7
 800dab2:	f023 0307 	bic.w	r3, r3, #7
 800dab6:	3308      	adds	r3, #8
 800dab8:	9303      	str	r3, [sp, #12]
 800daba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dabc:	444b      	add	r3, r9
 800dabe:	9309      	str	r3, [sp, #36]	; 0x24
 800dac0:	e76d      	b.n	800d99e <_svfiprintf_r+0x4a>
 800dac2:	fb05 3202 	mla	r2, r5, r2, r3
 800dac6:	2001      	movs	r0, #1
 800dac8:	460f      	mov	r7, r1
 800daca:	e7a6      	b.n	800da1a <_svfiprintf_r+0xc6>
 800dacc:	2300      	movs	r3, #0
 800dace:	3701      	adds	r7, #1
 800dad0:	9305      	str	r3, [sp, #20]
 800dad2:	4619      	mov	r1, r3
 800dad4:	250a      	movs	r5, #10
 800dad6:	4638      	mov	r0, r7
 800dad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dadc:	3a30      	subs	r2, #48	; 0x30
 800dade:	2a09      	cmp	r2, #9
 800dae0:	d903      	bls.n	800daea <_svfiprintf_r+0x196>
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d0c8      	beq.n	800da78 <_svfiprintf_r+0x124>
 800dae6:	9105      	str	r1, [sp, #20]
 800dae8:	e7c6      	b.n	800da78 <_svfiprintf_r+0x124>
 800daea:	fb05 2101 	mla	r1, r5, r1, r2
 800daee:	2301      	movs	r3, #1
 800daf0:	4607      	mov	r7, r0
 800daf2:	e7f0      	b.n	800dad6 <_svfiprintf_r+0x182>
 800daf4:	ab03      	add	r3, sp, #12
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	4622      	mov	r2, r4
 800dafa:	4b11      	ldr	r3, [pc, #68]	; (800db40 <_svfiprintf_r+0x1ec>)
 800dafc:	a904      	add	r1, sp, #16
 800dafe:	4640      	mov	r0, r8
 800db00:	f7fd ffcc 	bl	800ba9c <_printf_float>
 800db04:	f1b0 3fff 	cmp.w	r0, #4294967295
 800db08:	4681      	mov	r9, r0
 800db0a:	d1d6      	bne.n	800daba <_svfiprintf_r+0x166>
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	065b      	lsls	r3, r3, #25
 800db10:	f53f af35 	bmi.w	800d97e <_svfiprintf_r+0x2a>
 800db14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db16:	b01d      	add	sp, #116	; 0x74
 800db18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db1c:	ab03      	add	r3, sp, #12
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	4622      	mov	r2, r4
 800db22:	4b07      	ldr	r3, [pc, #28]	; (800db40 <_svfiprintf_r+0x1ec>)
 800db24:	a904      	add	r1, sp, #16
 800db26:	4640      	mov	r0, r8
 800db28:	f7fe fa6e 	bl	800c008 <_printf_i>
 800db2c:	e7ea      	b.n	800db04 <_svfiprintf_r+0x1b0>
 800db2e:	bf00      	nop
 800db30:	0800e61c 	.word	0x0800e61c
 800db34:	0800e622 	.word	0x0800e622
 800db38:	0800e626 	.word	0x0800e626
 800db3c:	0800ba9d 	.word	0x0800ba9d
 800db40:	0800d8a1 	.word	0x0800d8a1

0800db44 <_sbrk_r>:
 800db44:	b538      	push	{r3, r4, r5, lr}
 800db46:	4c06      	ldr	r4, [pc, #24]	; (800db60 <_sbrk_r+0x1c>)
 800db48:	2300      	movs	r3, #0
 800db4a:	4605      	mov	r5, r0
 800db4c:	4608      	mov	r0, r1
 800db4e:	6023      	str	r3, [r4, #0]
 800db50:	f7fd face 	bl	800b0f0 <_sbrk>
 800db54:	1c43      	adds	r3, r0, #1
 800db56:	d102      	bne.n	800db5e <_sbrk_r+0x1a>
 800db58:	6823      	ldr	r3, [r4, #0]
 800db5a:	b103      	cbz	r3, 800db5e <_sbrk_r+0x1a>
 800db5c:	602b      	str	r3, [r5, #0]
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	200008c4 	.word	0x200008c4

0800db64 <__ascii_wctomb>:
 800db64:	b149      	cbz	r1, 800db7a <__ascii_wctomb+0x16>
 800db66:	2aff      	cmp	r2, #255	; 0xff
 800db68:	bf85      	ittet	hi
 800db6a:	238a      	movhi	r3, #138	; 0x8a
 800db6c:	6003      	strhi	r3, [r0, #0]
 800db6e:	700a      	strbls	r2, [r1, #0]
 800db70:	f04f 30ff 	movhi.w	r0, #4294967295
 800db74:	bf98      	it	ls
 800db76:	2001      	movls	r0, #1
 800db78:	4770      	bx	lr
 800db7a:	4608      	mov	r0, r1
 800db7c:	4770      	bx	lr

0800db7e <memmove>:
 800db7e:	4288      	cmp	r0, r1
 800db80:	b510      	push	{r4, lr}
 800db82:	eb01 0302 	add.w	r3, r1, r2
 800db86:	d807      	bhi.n	800db98 <memmove+0x1a>
 800db88:	1e42      	subs	r2, r0, #1
 800db8a:	4299      	cmp	r1, r3
 800db8c:	d00a      	beq.n	800dba4 <memmove+0x26>
 800db8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db92:	f802 4f01 	strb.w	r4, [r2, #1]!
 800db96:	e7f8      	b.n	800db8a <memmove+0xc>
 800db98:	4283      	cmp	r3, r0
 800db9a:	d9f5      	bls.n	800db88 <memmove+0xa>
 800db9c:	1881      	adds	r1, r0, r2
 800db9e:	1ad2      	subs	r2, r2, r3
 800dba0:	42d3      	cmn	r3, r2
 800dba2:	d100      	bne.n	800dba6 <memmove+0x28>
 800dba4:	bd10      	pop	{r4, pc}
 800dba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbaa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dbae:	e7f7      	b.n	800dba0 <memmove+0x22>

0800dbb0 <__malloc_lock>:
 800dbb0:	4770      	bx	lr

0800dbb2 <__malloc_unlock>:
 800dbb2:	4770      	bx	lr

0800dbb4 <_realloc_r>:
 800dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb6:	4607      	mov	r7, r0
 800dbb8:	4614      	mov	r4, r2
 800dbba:	460e      	mov	r6, r1
 800dbbc:	b921      	cbnz	r1, 800dbc8 <_realloc_r+0x14>
 800dbbe:	4611      	mov	r1, r2
 800dbc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbc4:	f7ff be12 	b.w	800d7ec <_malloc_r>
 800dbc8:	b922      	cbnz	r2, 800dbd4 <_realloc_r+0x20>
 800dbca:	f7ff fdc1 	bl	800d750 <_free_r>
 800dbce:	4625      	mov	r5, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbd4:	f000 f814 	bl	800dc00 <_malloc_usable_size_r>
 800dbd8:	42a0      	cmp	r0, r4
 800dbda:	d20f      	bcs.n	800dbfc <_realloc_r+0x48>
 800dbdc:	4621      	mov	r1, r4
 800dbde:	4638      	mov	r0, r7
 800dbe0:	f7ff fe04 	bl	800d7ec <_malloc_r>
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d0f2      	beq.n	800dbd0 <_realloc_r+0x1c>
 800dbea:	4631      	mov	r1, r6
 800dbec:	4622      	mov	r2, r4
 800dbee:	f7ff fabb 	bl	800d168 <memcpy>
 800dbf2:	4631      	mov	r1, r6
 800dbf4:	4638      	mov	r0, r7
 800dbf6:	f7ff fdab 	bl	800d750 <_free_r>
 800dbfa:	e7e9      	b.n	800dbd0 <_realloc_r+0x1c>
 800dbfc:	4635      	mov	r5, r6
 800dbfe:	e7e7      	b.n	800dbd0 <_realloc_r+0x1c>

0800dc00 <_malloc_usable_size_r>:
 800dc00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc04:	1f18      	subs	r0, r3, #4
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	bfbc      	itt	lt
 800dc0a:	580b      	ldrlt	r3, [r1, r0]
 800dc0c:	18c0      	addlt	r0, r0, r3
 800dc0e:	4770      	bx	lr

0800dc10 <_init>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	bf00      	nop
 800dc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc16:	bc08      	pop	{r3}
 800dc18:	469e      	mov	lr, r3
 800dc1a:	4770      	bx	lr

0800dc1c <_fini>:
 800dc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1e:	bf00      	nop
 800dc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc22:	bc08      	pop	{r3}
 800dc24:	469e      	mov	lr, r3
 800dc26:	4770      	bx	lr
