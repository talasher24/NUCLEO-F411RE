
NUCLEO-F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c68  08011888  08011888  00021888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124f0  080124f0  00030264  2**0
                  CONTENTS
  4 .ARM          00000008  080124f0  080124f0  000224f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124f8  080124f8  00030264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124f8  080124f8  000224f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124fc  080124fc  000224fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000080  08012500  00030080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noinit       00000044  20000000  20000000  00040000  2**2
                  ALLOC
 10 .ip_code      00000000  08060000  08060000  00030264  2**0
                  CONTENTS
 11 .bss          000010a4  20000264  20000264  00030264  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001308  20001308  00030264  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 14 .debug_info   00032b90  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005c68  00000000  00000000  00062e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000025f8  00000000  00000000  00068a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002360  00000000  00000000  0006b088  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001e333  00000000  00000000  0006d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00021a3a  00000000  00000000  0008b71b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000a6afb  00000000  00000000  000ad155  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00153c50  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a918  00000000  00000000  00153ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000264 	.word	0x20000264
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011870 	.word	0x08011870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000268 	.word	0x20000268
 80001dc:	08011870 	.word	0x08011870

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f8fb 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f00d fdea 	bl	800eac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f00d fdbc 	bl	800ea68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000084 	.word	0x20000084
 8000f20:	2000108c 	.word	0x2000108c

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	2000108c 	.word	0x2000108c

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_Delay+0x40>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000084 	.word	0x20000084

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	d00f      	beq.n	800110a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	d00c      	beq.n	800110a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b05      	cmp	r3, #5
 80010f4:	d009      	beq.n	800110a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d006      	beq.n	800110a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d003      	beq.n	800110a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001102:	2192      	movs	r1, #146	; 0x92
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001106:	f00d fba5 	bl	800e854 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff38 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08011888 	.word	0x08011888

0800111c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d903      	bls.n	800113c <HAL_NVIC_SetPriority+0x20>
 8001134:	21aa      	movs	r1, #170	; 0xaa
 8001136:	480e      	ldr	r0, [pc, #56]	; (8001170 <HAL_NVIC_SetPriority+0x54>)
 8001138:	f00d fb8c 	bl	800e854 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	d903      	bls.n	800114a <HAL_NVIC_SetPriority+0x2e>
 8001142:	21ab      	movs	r1, #171	; 0xab
 8001144:	480a      	ldr	r0, [pc, #40]	; (8001170 <HAL_NVIC_SetPriority+0x54>)
 8001146:	f00d fb85 	bl	800e854 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114a:	f7ff ff3d 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800114e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	6978      	ldr	r0, [r7, #20]
 8001156:	f7ff ff8d 	bl	8001074 <NVIC_EncodePriority>
 800115a:	4602      	mov	r2, r0
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff5c 	bl	8001020 <__NVIC_SetPriority>
}
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	08011888 	.word	0x08011888

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	da03      	bge.n	800118e <HAL_NVIC_EnableIRQ+0x1a>
 8001186:	21be      	movs	r1, #190	; 0xbe
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_NVIC_EnableIRQ+0x2c>)
 800118a:	f00d fb63 	bl	800e854 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff26 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	08011888 	.word	0x08011888

080011a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e017      	b.n	80011e6 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_CRC_Init+0x4c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d003      	beq.n	80011c8 <HAL_CRC_Init+0x24>
 80011c0:	2168      	movs	r1, #104	; 0x68
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <HAL_CRC_Init+0x50>)
 80011c4:	f00d fb46 	bl	800e854 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	795b      	ldrb	r3, [r3, #5]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f00b fa3b 	bl	800c654 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023000 	.word	0x40023000
 80011f4:	080118c4 	.word	0x080118c4

080011f8 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2202      	movs	r2, #2
 800120c:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0201 	orr.w	r2, r2, #1
 800121c:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e00a      	b.n	800123a <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	441a      	add	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	d3f0      	bcc.n	8001224 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2201      	movs	r2, #1
 800124e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001250:	693b      	ldr	r3, [r7, #16]
}
 8001252:	4618      	mov	r0, r3
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff fe5a 	bl	8000f24 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e204      	b.n	8001686 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a97      	ldr	r2, [pc, #604]	; (80014e0 <HAL_DMA_Init+0x280>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d04e      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a96      	ldr	r2, [pc, #600]	; (80014e4 <HAL_DMA_Init+0x284>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d049      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a94      	ldr	r2, [pc, #592]	; (80014e8 <HAL_DMA_Init+0x288>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d044      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a93      	ldr	r2, [pc, #588]	; (80014ec <HAL_DMA_Init+0x28c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d03f      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a91      	ldr	r2, [pc, #580]	; (80014f0 <HAL_DMA_Init+0x290>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d03a      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a90      	ldr	r2, [pc, #576]	; (80014f4 <HAL_DMA_Init+0x294>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d035      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a8e      	ldr	r2, [pc, #568]	; (80014f8 <HAL_DMA_Init+0x298>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d030      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a8d      	ldr	r2, [pc, #564]	; (80014fc <HAL_DMA_Init+0x29c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d02b      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a8b      	ldr	r2, [pc, #556]	; (8001500 <HAL_DMA_Init+0x2a0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d026      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a8a      	ldr	r2, [pc, #552]	; (8001504 <HAL_DMA_Init+0x2a4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d021      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a88      	ldr	r2, [pc, #544]	; (8001508 <HAL_DMA_Init+0x2a8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01c      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a87      	ldr	r2, [pc, #540]	; (800150c <HAL_DMA_Init+0x2ac>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d017      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a85      	ldr	r2, [pc, #532]	; (8001510 <HAL_DMA_Init+0x2b0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d012      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a84      	ldr	r2, [pc, #528]	; (8001514 <HAL_DMA_Init+0x2b4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00d      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a82      	ldr	r2, [pc, #520]	; (8001518 <HAL_DMA_Init+0x2b8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d008      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a81      	ldr	r2, [pc, #516]	; (800151c <HAL_DMA_Init+0x2bc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d003      	beq.n	8001324 <HAL_DMA_Init+0xc4>
 800131c:	21b8      	movs	r1, #184	; 0xb8
 800131e:	4880      	ldr	r0, [pc, #512]	; (8001520 <HAL_DMA_Init+0x2c0>)
 8001320:	f00d fa98 	bl	800e854 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d026      	beq.n	800137a <HAL_DMA_Init+0x11a>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001334:	d021      	beq.n	800137a <HAL_DMA_Init+0x11a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800133e:	d01c      	beq.n	800137a <HAL_DMA_Init+0x11a>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001348:	d017      	beq.n	800137a <HAL_DMA_Init+0x11a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001352:	d012      	beq.n	800137a <HAL_DMA_Init+0x11a>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800135c:	d00d      	beq.n	800137a <HAL_DMA_Init+0x11a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001366:	d008      	beq.n	800137a <HAL_DMA_Init+0x11a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001370:	d003      	beq.n	800137a <HAL_DMA_Init+0x11a>
 8001372:	21b9      	movs	r1, #185	; 0xb9
 8001374:	486a      	ldr	r0, [pc, #424]	; (8001520 <HAL_DMA_Init+0x2c0>)
 8001376:	f00d fa6d 	bl	800e854 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_DMA_Init+0x13a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b40      	cmp	r3, #64	; 0x40
 8001388:	d007      	beq.n	800139a <HAL_DMA_Init+0x13a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b80      	cmp	r3, #128	; 0x80
 8001390:	d003      	beq.n	800139a <HAL_DMA_Init+0x13a>
 8001392:	21ba      	movs	r1, #186	; 0xba
 8001394:	4862      	ldr	r0, [pc, #392]	; (8001520 <HAL_DMA_Init+0x2c0>)
 8001396:	f00d fa5d 	bl	800e854 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a2:	d007      	beq.n	80013b4 <HAL_DMA_Init+0x154>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_DMA_Init+0x154>
 80013ac:	21bb      	movs	r1, #187	; 0xbb
 80013ae:	485c      	ldr	r0, [pc, #368]	; (8001520 <HAL_DMA_Init+0x2c0>)
 80013b0:	f00d fa50 	bl	800e854 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013bc:	d007      	beq.n	80013ce <HAL_DMA_Init+0x16e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_DMA_Init+0x16e>
 80013c6:	21bc      	movs	r1, #188	; 0xbc
 80013c8:	4855      	ldr	r0, [pc, #340]	; (8001520 <HAL_DMA_Init+0x2c0>)
 80013ca:	f00d fa43 	bl	800e854 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00d      	beq.n	80013f2 <HAL_DMA_Init+0x192>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013de:	d008      	beq.n	80013f2 <HAL_DMA_Init+0x192>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013e8:	d003      	beq.n	80013f2 <HAL_DMA_Init+0x192>
 80013ea:	21bd      	movs	r1, #189	; 0xbd
 80013ec:	484c      	ldr	r0, [pc, #304]	; (8001520 <HAL_DMA_Init+0x2c0>)
 80013ee:	f00d fa31 	bl	800e854 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00d      	beq.n	8001416 <HAL_DMA_Init+0x1b6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001402:	d008      	beq.n	8001416 <HAL_DMA_Init+0x1b6>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800140c:	d003      	beq.n	8001416 <HAL_DMA_Init+0x1b6>
 800140e:	21be      	movs	r1, #190	; 0xbe
 8001410:	4843      	ldr	r0, [pc, #268]	; (8001520 <HAL_DMA_Init+0x2c0>)
 8001412:	f00d fa1f 	bl	800e854 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00c      	beq.n	8001438 <HAL_DMA_Init+0x1d8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001426:	d007      	beq.n	8001438 <HAL_DMA_Init+0x1d8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	2b20      	cmp	r3, #32
 800142e:	d003      	beq.n	8001438 <HAL_DMA_Init+0x1d8>
 8001430:	21bf      	movs	r1, #191	; 0xbf
 8001432:	483b      	ldr	r0, [pc, #236]	; (8001520 <HAL_DMA_Init+0x2c0>)
 8001434:	f00d fa0e 	bl	800e854 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d012      	beq.n	8001466 <HAL_DMA_Init+0x206>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001448:	d00d      	beq.n	8001466 <HAL_DMA_Init+0x206>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001452:	d008      	beq.n	8001466 <HAL_DMA_Init+0x206>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800145c:	d003      	beq.n	8001466 <HAL_DMA_Init+0x206>
 800145e:	21c0      	movs	r1, #192	; 0xc0
 8001460:	482f      	ldr	r0, [pc, #188]	; (8001520 <HAL_DMA_Init+0x2c0>)
 8001462:	f00d f9f7 	bl	800e854 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_DMA_Init+0x21e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	2b04      	cmp	r3, #4
 8001474:	d003      	beq.n	800147e <HAL_DMA_Init+0x21e>
 8001476:	21c1      	movs	r1, #193	; 0xc1
 8001478:	4829      	ldr	r0, [pc, #164]	; (8001520 <HAL_DMA_Init+0x2c0>)
 800147a:	f00d f9eb 	bl	800e854 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	2b00      	cmp	r3, #0
 8001484:	d065      	beq.n	8001552 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00f      	beq.n	80014ae <HAL_DMA_Init+0x24e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	2b01      	cmp	r3, #1
 8001494:	d00b      	beq.n	80014ae <HAL_DMA_Init+0x24e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	2b02      	cmp	r3, #2
 800149c:	d007      	beq.n	80014ae <HAL_DMA_Init+0x24e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d003      	beq.n	80014ae <HAL_DMA_Init+0x24e>
 80014a6:	21c6      	movs	r1, #198	; 0xc6
 80014a8:	481d      	ldr	r0, [pc, #116]	; (8001520 <HAL_DMA_Init+0x2c0>)
 80014aa:	f00d f9d3 	bl	800e854 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d036      	beq.n	8001524 <HAL_DMA_Init+0x2c4>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80014be:	d031      	beq.n	8001524 <HAL_DMA_Init+0x2c4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d02c      	beq.n	8001524 <HAL_DMA_Init+0x2c4>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014d2:	d027      	beq.n	8001524 <HAL_DMA_Init+0x2c4>
 80014d4:	21c7      	movs	r1, #199	; 0xc7
 80014d6:	4812      	ldr	r0, [pc, #72]	; (8001520 <HAL_DMA_Init+0x2c0>)
 80014d8:	f00d f9bc 	bl	800e854 <assert_failed>
 80014dc:	e022      	b.n	8001524 <HAL_DMA_Init+0x2c4>
 80014de:	bf00      	nop
 80014e0:	40026010 	.word	0x40026010
 80014e4:	40026028 	.word	0x40026028
 80014e8:	40026040 	.word	0x40026040
 80014ec:	40026058 	.word	0x40026058
 80014f0:	40026070 	.word	0x40026070
 80014f4:	40026088 	.word	0x40026088
 80014f8:	400260a0 	.word	0x400260a0
 80014fc:	400260b8 	.word	0x400260b8
 8001500:	40026410 	.word	0x40026410
 8001504:	40026428 	.word	0x40026428
 8001508:	40026440 	.word	0x40026440
 800150c:	40026458 	.word	0x40026458
 8001510:	40026470 	.word	0x40026470
 8001514:	40026488 	.word	0x40026488
 8001518:	400264a0 	.word	0x400264a0
 800151c:	400264b8 	.word	0x400264b8
 8001520:	080118fc 	.word	0x080118fc
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	2b00      	cmp	r3, #0
 800152a:	d012      	beq.n	8001552 <HAL_DMA_Init+0x2f2>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001534:	d00d      	beq.n	8001552 <HAL_DMA_Init+0x2f2>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800153e:	d008      	beq.n	8001552 <HAL_DMA_Init+0x2f2>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001548:	d003      	beq.n	8001552 <HAL_DMA_Init+0x2f2>
 800154a:	21c8      	movs	r1, #200	; 0xc8
 800154c:	4850      	ldr	r0, [pc, #320]	; (8001690 <HAL_DMA_Init+0x430>)
 800154e:	f00d f981 	bl	800e854 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0201 	bic.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001572:	e00f      	b.n	8001594 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001574:	f7ff fcd6 	bl	8000f24 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b05      	cmp	r3, #5
 8001580:	d908      	bls.n	8001594 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2220      	movs	r2, #32
 8001586:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e078      	b.n	8001686 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e8      	bne.n	8001574 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4b39      	ldr	r3, [pc, #228]	; (8001694 <HAL_DMA_Init+0x434>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d107      	bne.n	80015fe <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4313      	orrs	r3, r2
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f023 0307 	bic.w	r3, r3, #7
 8001614:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	2b04      	cmp	r3, #4
 8001626:	d117      	bne.n	8001658 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00e      	beq.n	8001658 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 faa2 	bl	8001b84 <DMA_CheckFifoParam>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2240      	movs	r2, #64	; 0x40
 800164a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001654:	2301      	movs	r3, #1
 8001656:	e016      	b.n	8001686 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 fa59 	bl	8001b18 <DMA_CalcBaseAndBitshift>
 8001666:	4603      	mov	r3, r0
 8001668:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	223f      	movs	r2, #63	; 0x3f
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	080118fc 	.word	0x080118fc
 8001694:	f010803f 	.word	0xf010803f

08001698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_DMA_Start_IT+0x26>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016bc:	d304      	bcc.n	80016c8 <HAL_DMA_Start_IT+0x30>
 80016be:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80016c2:	4827      	ldr	r0, [pc, #156]	; (8001760 <HAL_DMA_Start_IT+0xc8>)
 80016c4:	f00d f8c6 	bl	800e854 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_DMA_Start_IT+0x3e>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e040      	b.n	8001758 <HAL_DMA_Start_IT+0xc0>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d12f      	bne.n	800174a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2202      	movs	r2, #2
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f9dc 	bl	8001abc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	223f      	movs	r2, #63	; 0x3f
 800170a:	409a      	lsls	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0216 	orr.w	r2, r2, #22
 800171e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0208 	orr.w	r2, r2, #8
 8001736:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e005      	b.n	8001756 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001752:	2302      	movs	r3, #2
 8001754:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001756:	7dfb      	ldrb	r3, [r7, #23]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	080118fc 	.word	0x080118fc

08001764 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d004      	beq.n	8001782 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00c      	b.n	800179c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2205      	movs	r2, #5
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017b4:	4b92      	ldr	r3, [pc, #584]	; (8001a00 <HAL_DMA_IRQHandler+0x258>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a92      	ldr	r2, [pc, #584]	; (8001a04 <HAL_DMA_IRQHandler+0x25c>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0a9b      	lsrs	r3, r3, #10
 80017c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2208      	movs	r2, #8
 80017d4:	409a      	lsls	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01a      	beq.n	8001814 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	2208      	movs	r2, #8
 8001802:	409a      	lsls	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	2201      	movs	r2, #1
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d012      	beq.n	800184a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2201      	movs	r2, #1
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	f043 0202 	orr.w	r2, r3, #2
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184e:	2204      	movs	r2, #4
 8001850:	409a      	lsls	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d012      	beq.n	8001880 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	2204      	movs	r2, #4
 800186e:	409a      	lsls	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	f043 0204 	orr.w	r2, r3, #4
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	2210      	movs	r2, #16
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d043      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03c      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2210      	movs	r2, #16
 80018a4:	409a      	lsls	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d018      	beq.n	80018ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d108      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d024      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
 80018d6:	e01f      	b.n	8001918 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01b      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
 80018e8:	e016      	b.n	8001918 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d107      	bne.n	8001908 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0208 	bic.w	r2, r2, #8
 8001906:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191c:	2220      	movs	r2, #32
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 808e 	beq.w	8001a46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 8086 	beq.w	8001a46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	2220      	movs	r2, #32
 8001940:	409a      	lsls	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b05      	cmp	r3, #5
 8001950:	d136      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0216 	bic.w	r2, r2, #22
 8001960:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001970:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <HAL_DMA_IRQHandler+0x1da>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0208 	bic.w	r2, r2, #8
 8001990:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	223f      	movs	r2, #63	; 0x3f
 8001998:	409a      	lsls	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d07d      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
        }
        return;
 80019be:	e078      	b.n	8001ab2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01c      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d108      	bne.n	80019ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d030      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
 80019ec:	e02b      	b.n	8001a46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d027      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
 80019fe:	e022      	b.n	8001a46 <HAL_DMA_IRQHandler+0x29e>
 8001a00:	20000090 	.word	0x20000090
 8001a04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10f      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0210 	bic.w	r2, r2, #16
 8001a24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d032      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d022      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3301      	adds	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d307      	bcc.n	8001a8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f2      	bne.n	8001a72 <HAL_DMA_IRQHandler+0x2ca>
 8001a8c:	e000      	b.n	8001a90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
 8001ab0:	e000      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ab2:	bf00      	nop
    }
  }
}
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop

08001abc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b40      	cmp	r3, #64	; 0x40
 8001ae8:	d108      	bne.n	8001afc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001afa:	e007      	b.n	8001b0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	60da      	str	r2, [r3, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	3b10      	subs	r3, #16
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <DMA_CalcBaseAndBitshift+0x64>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <DMA_CalcBaseAndBitshift+0x68>)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d909      	bls.n	8001b5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b4e:	f023 0303 	bic.w	r3, r3, #3
 8001b52:	1d1a      	adds	r2, r3, #4
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	659a      	str	r2, [r3, #88]	; 0x58
 8001b58:	e007      	b.n	8001b6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	aaaaaaab 	.word	0xaaaaaaab
 8001b80:	08012114 	.word	0x08012114

08001b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d11f      	bne.n	8001bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d855      	bhi.n	8001c50 <DMA_CheckFifoParam+0xcc>
 8001ba4:	a201      	add	r2, pc, #4	; (adr r2, 8001bac <DMA_CheckFifoParam+0x28>)
 8001ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001baa:	bf00      	nop
 8001bac:	08001bbd 	.word	0x08001bbd
 8001bb0:	08001bcf 	.word	0x08001bcf
 8001bb4:	08001bbd 	.word	0x08001bbd
 8001bb8:	08001c51 	.word	0x08001c51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d045      	beq.n	8001c54 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bcc:	e042      	b.n	8001c54 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd6:	d13f      	bne.n	8001c58 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bdc:	e03c      	b.n	8001c58 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be6:	d121      	bne.n	8001c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d836      	bhi.n	8001c5c <DMA_CheckFifoParam+0xd8>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <DMA_CheckFifoParam+0x70>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c05 	.word	0x08001c05
 8001bf8:	08001c0b 	.word	0x08001c0b
 8001bfc:	08001c05 	.word	0x08001c05
 8001c00:	08001c1d 	.word	0x08001c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
      break;
 8001c08:	e02f      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d024      	beq.n	8001c60 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c1a:	e021      	b.n	8001c60 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c24:	d11e      	bne.n	8001c64 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c2a:	e01b      	b.n	8001c64 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d902      	bls.n	8001c38 <DMA_CheckFifoParam+0xb4>
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d003      	beq.n	8001c3e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c36:	e018      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c3c:	e015      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00e      	beq.n	8001c68 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c4e:	e00b      	b.n	8001c68 <DMA_CheckFifoParam+0xe4>
      break;
 8001c50:	bf00      	nop
 8001c52:	e00a      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
      break;
 8001c54:	bf00      	nop
 8001c56:	e008      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
      break;
 8001c58:	bf00      	nop
 8001c5a:	e006      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
      break;
 8001c5c:	bf00      	nop
 8001c5e:	e004      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
      break;
 8001c60:	bf00      	nop
 8001c62:	e002      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
      break;   
 8001c64:	bf00      	nop
 8001c66:	e000      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
      break;
 8001c68:	bf00      	nop
    }
  } 
  
  return status; 
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c8a:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_FLASH_Program+0xc0>)
 8001c8c:	7e1b      	ldrb	r3, [r3, #24]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_FLASH_Program+0x1e>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e04b      	b.n	8001d2e <HAL_FLASH_Program+0xb6>
 8001c96:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_FLASH_Program+0xc0>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <HAL_FLASH_Program+0x44>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d009      	beq.n	8001cbc <HAL_FLASH_Program+0x44>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d006      	beq.n	8001cbc <HAL_FLASH_Program+0x44>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d003      	beq.n	8001cbc <HAL_FLASH_Program+0x44>
 8001cb4:	21a4      	movs	r1, #164	; 0xa4
 8001cb6:	4821      	ldr	r0, [pc, #132]	; (8001d3c <HAL_FLASH_Program+0xc4>)
 8001cb8:	f00c fdcc 	bl	800e854 <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cc0:	f000 f8b2 	bl	8001e28 <FLASH_WaitForLastOperation>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d12b      	bne.n	8001d26 <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001cd4:	783b      	ldrb	r3, [r7, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	68b8      	ldr	r0, [r7, #8]
 8001cda:	f000 f9ad 	bl	8002038 <FLASH_Program_Byte>
 8001cde:	e016      	b.n	8001d0e <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001ce6:	883b      	ldrh	r3, [r7, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	f000 f966 	bl	8001fbc <FLASH_Program_HalfWord>
 8001cf0:	e00d      	b.n	8001d0e <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d105      	bne.n	8001d04 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	68b8      	ldr	r0, [r7, #8]
 8001cfe:	f000 f91f 	bl	8001f40 <FLASH_Program_Word>
 8001d02:	e004      	b.n	8001d0e <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d08:	68b8      	ldr	r0, [r7, #8]
 8001d0a:	f000 f8cd 	bl	8001ea8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d12:	f000 f889 	bl	8001e28 <FLASH_WaitForLastOperation>
 8001d16:	4603      	mov	r3, r0
 8001d18:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_FLASH_Program+0xc8>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_FLASH_Program+0xc8>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_FLASH_Program+0xc0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20001090 	.word	0x20001090
 8001d3c:	08011934 	.word	0x08011934
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_FLASH_Unlock+0x38>)
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da0b      	bge.n	8001d6e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_FLASH_Unlock+0x38>)
 8001d58:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_FLASH_Unlock+0x3c>)
 8001d5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_FLASH_Unlock+0x38>)
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_FLASH_Unlock+0x40>)
 8001d60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_FLASH_Unlock+0x38>)
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	da01      	bge.n	8001d6e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40023c00 	.word	0x40023c00
 8001d80:	45670123 	.word	0x45670123
 8001d84:	cdef89ab 	.word	0xcdef89ab

08001d88 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_FLASH_Lock+0x1c>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_FLASH_Lock+0x1c>)
 8001d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d96:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_FLASH_OB_Unlock+0x2c>)
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_FLASH_OB_Unlock+0x2c>)
 8001dba:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_FLASH_OB_Unlock+0x30>)
 8001dbc:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_FLASH_OB_Unlock+0x2c>)
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <HAL_FLASH_OB_Unlock+0x34>)
 8001dc2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40023c00 	.word	0x40023c00
 8001dd8:	08192a3b 	.word	0x08192a3b
 8001ddc:	4c5d6e7f 	.word	0x4c5d6e7f

08001de0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_FLASH_OB_Lock+0x1c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_FLASH_OB_Lock+0x1c>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_FLASH_OB_Launch+0x24>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_FLASH_OB_Launch+0x24>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001e14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e18:	f000 f806 	bl	8001e28 <FLASH_WaitForLastOperation>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023c14 	.word	0x40023c14

08001e28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <FLASH_WaitForLastOperation+0x78>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3a:	f7ff f873 	bl	8000f24 <HAL_GetTick>
 8001e3e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e40:	e010      	b.n	8001e64 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d00c      	beq.n	8001e64 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <FLASH_WaitForLastOperation+0x38>
 8001e50:	f7ff f868 	bl	8000f24 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d201      	bcs.n	8001e64 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e019      	b.n	8001e98 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <FLASH_WaitForLastOperation+0x7c>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e8      	bne.n	8001e42 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <FLASH_WaitForLastOperation+0x7c>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <FLASH_WaitForLastOperation+0x7c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <FLASH_WaitForLastOperation+0x7c>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e8e:	f000 f90f 	bl	80020b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
  
}  
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20001090 	.word	0x20001090
 8001ea4:	40023c00 	.word	0x40023c00

08001ea8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eba:	d303      	bcc.n	8001ec4 <FLASH_Program_DoubleWord+0x1c>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <FLASH_Program_DoubleWord+0x84>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d90c      	bls.n	8001ede <FLASH_Program_DoubleWord+0x36>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <FLASH_Program_DoubleWord+0x88>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d903      	bls.n	8001ed4 <FLASH_Program_DoubleWord+0x2c>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <FLASH_Program_DoubleWord+0x8c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d904      	bls.n	8001ede <FLASH_Program_DoubleWord+0x36>
 8001ed4:	f240 2167 	movw	r1, #615	; 0x267
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <FLASH_Program_DoubleWord+0x90>)
 8001eda:	f00c fcbb 	bl	800e854 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <FLASH_Program_DoubleWord+0x94>)
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <FLASH_Program_DoubleWord+0x94>)
 8001ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <FLASH_Program_DoubleWord+0x94>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <FLASH_Program_DoubleWord+0x94>)
 8001ef0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ef4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <FLASH_Program_DoubleWord+0x94>)
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <FLASH_Program_DoubleWord+0x94>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001f08:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001f0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	f04f 0400 	mov.w	r4, #0
 8001f18:	0013      	movs	r3, r2
 8001f1a:	2400      	movs	r4, #0
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	3204      	adds	r2, #4
 8001f20:	6013      	str	r3, [r2, #0]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	0807ffff 	.word	0x0807ffff
 8001f30:	1fff77ff 	.word	0x1fff77ff
 8001f34:	1fff7a0f 	.word	0x1fff7a0f
 8001f38:	08011934 	.word	0x08011934
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f50:	d303      	bcc.n	8001f5a <FLASH_Program_Word+0x1a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <FLASH_Program_Word+0x68>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d90c      	bls.n	8001f74 <FLASH_Program_Word+0x34>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <FLASH_Program_Word+0x6c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d903      	bls.n	8001f6a <FLASH_Program_Word+0x2a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <FLASH_Program_Word+0x70>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d904      	bls.n	8001f74 <FLASH_Program_Word+0x34>
 8001f6a:	f240 2189 	movw	r1, #649	; 0x289
 8001f6e:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <FLASH_Program_Word+0x74>)
 8001f70:	f00c fc70 	bl	800e854 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <FLASH_Program_Word+0x78>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <FLASH_Program_Word+0x78>)
 8001f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <FLASH_Program_Word+0x78>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <FLASH_Program_Word+0x78>)
 8001f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <FLASH_Program_Word+0x78>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <FLASH_Program_Word+0x78>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	601a      	str	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	0807ffff 	.word	0x0807ffff
 8001fac:	1fff77ff 	.word	0x1fff77ff
 8001fb0:	1fff7a0f 	.word	0x1fff7a0f
 8001fb4:	08011934 	.word	0x08011934
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fce:	d303      	bcc.n	8001fd8 <FLASH_Program_HalfWord+0x1c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <FLASH_Program_HalfWord+0x68>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d90c      	bls.n	8001ff2 <FLASH_Program_HalfWord+0x36>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <FLASH_Program_HalfWord+0x6c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d903      	bls.n	8001fe8 <FLASH_Program_HalfWord+0x2c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <FLASH_Program_HalfWord+0x70>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d904      	bls.n	8001ff2 <FLASH_Program_HalfWord+0x36>
 8001fe8:	f240 21a2 	movw	r1, #674	; 0x2a2
 8001fec:	4810      	ldr	r0, [pc, #64]	; (8002030 <FLASH_Program_HalfWord+0x74>)
 8001fee:	f00c fc31 	bl	800e854 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <FLASH_Program_HalfWord+0x78>)
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <FLASH_Program_HalfWord+0x78>)
 8001ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <FLASH_Program_HalfWord+0x78>)
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <FLASH_Program_HalfWord+0x78>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002008:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <FLASH_Program_HalfWord+0x78>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <FLASH_Program_HalfWord+0x78>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	801a      	strh	r2, [r3, #0]
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	0807ffff 	.word	0x0807ffff
 8002028:	1fff77ff 	.word	0x1fff77ff
 800202c:	1fff7a0f 	.word	0x1fff7a0f
 8002030:	08011934 	.word	0x08011934
 8002034:	40023c00 	.word	0x40023c00

08002038 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800204a:	d303      	bcc.n	8002054 <FLASH_Program_Byte+0x1c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <FLASH_Program_Byte+0x64>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d90c      	bls.n	800206e <FLASH_Program_Byte+0x36>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <FLASH_Program_Byte+0x68>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d903      	bls.n	8002064 <FLASH_Program_Byte+0x2c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <FLASH_Program_Byte+0x6c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d904      	bls.n	800206e <FLASH_Program_Byte+0x36>
 8002064:	f240 21bb 	movw	r1, #699	; 0x2bb
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <FLASH_Program_Byte+0x70>)
 800206a:	f00c fbf3 	bl	800e854 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <FLASH_Program_Byte+0x74>)
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <FLASH_Program_Byte+0x74>)
 8002074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002078:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <FLASH_Program_Byte+0x74>)
 800207c:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <FLASH_Program_Byte+0x74>)
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <FLASH_Program_Byte+0x74>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <FLASH_Program_Byte+0x74>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	701a      	strb	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	0807ffff 	.word	0x0807ffff
 80020a0:	1fff77ff 	.word	0x1fff77ff
 80020a4:	1fff7a0f 	.word	0x1fff7a0f
 80020a8:	08011934 	.word	0x08011934
 80020ac:	40023c00 	.word	0x40023c00

080020b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f043 0310 	orr.w	r3, r3, #16
 80020c8:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 80020ca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 80020ce:	2210      	movs	r2, #16
 80020d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f043 0308 	orr.w	r3, r3, #8
 80020e6:	4a24      	ldr	r2, [pc, #144]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 80020e8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 80020ec:	2220      	movs	r2, #32
 80020ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 8002106:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 800210a:	2240      	movs	r2, #64	; 0x40
 800210c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	4a15      	ldr	r2, [pc, #84]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 8002124:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 8002142:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 8002146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800214a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	4a05      	ldr	r2, [pc, #20]	; (8002178 <FLASH_SetErrorCode+0xc8>)
 8002162:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <FLASH_SetErrorCode+0xc4>)
 8002166:	2202      	movs	r2, #2
 8002168:	60da      	str	r2, [r3, #12]
  }
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40023c00 	.word	0x40023c00
 8002178:	20001090 	.word	0x20001090

0800217c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002188:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_FLASHEx_OBProgram+0x104>)
 800218a:	7e1b      	ldrb	r3, [r3, #24]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_FLASHEx_OBProgram+0x18>
 8002190:	2302      	movs	r3, #2
 8002192:	e071      	b.n	8002278 <HAL_FLASHEx_OBProgram+0xfc>
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_FLASHEx_OBProgram+0x104>)
 8002196:	2201      	movs	r2, #1
 8002198:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b0f      	cmp	r3, #15
 80021a0:	d904      	bls.n	80021ac <HAL_FLASHEx_OBProgram+0x30>
 80021a2:	f44f 7193 	mov.w	r1, #294	; 0x126
 80021a6:	4837      	ldr	r0, [pc, #220]	; (8002284 <HAL_FLASHEx_OBProgram+0x108>)
 80021a8:	f00c fb54 	bl	800e854 <assert_failed>

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d025      	beq.n	8002204 <HAL_FLASHEx_OBProgram+0x88>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_FLASHEx_OBProgram+0x56>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d004      	beq.n	80021d2 <HAL_FLASHEx_OBProgram+0x56>
 80021c8:	f240 112b 	movw	r1, #299	; 0x12b
 80021cc:	482d      	ldr	r0, [pc, #180]	; (8002284 <HAL_FLASHEx_OBProgram+0x108>)
 80021ce:	f00c fb41 	bl	800e854 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10a      	bne.n	80021f0 <HAL_FLASHEx_OBProgram+0x74>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	4619      	mov	r1, r3
 80021e4:	4610      	mov	r0, r2
 80021e6:	f000 f8e9 	bl	80023bc <FLASH_OB_EnableWRP>
 80021ea:	4603      	mov	r3, r0
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	e009      	b.n	8002204 <HAL_FLASHEx_OBProgram+0x88>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 f91a 	bl	8002434 <FLASH_OB_DisableWRP>
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_FLASHEx_OBProgram+0xa4>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f946 	bl	80024a8 <FLASH_OB_RDP_LevelConfig>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_FLASHEx_OBProgram+0xd8>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7e1b      	ldrb	r3, [r3, #24]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8002244:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	f000 f956 	bl	80024fc <FLASH_OB_UserConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_FLASHEx_OBProgram+0xf4>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f99a 	bl	80025a0 <FLASH_OB_BOR_LevelConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_FLASHEx_OBProgram+0x104>)
 8002272:	2200      	movs	r2, #0
 8002274:	761a      	strb	r2, [r3, #24]

  return status;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20001090 	.word	0x20001090
 8002284:	08011970 	.word	0x08011970

08002288 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	220f      	movs	r2, #15
 8002294:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002296:	f000 f9c3 	bl	8002620 <FLASH_OB_GetWRP>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80022a2:	f000 f9c9 	bl	8002638 <FLASH_OB_GetRDP>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80022ae:	f000 f9a7 	bl	8002600 <FLASH_OB_GetUser>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80022ba:	f000 f9dd 	bl	8002678 <FLASH_OB_GetBOR>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	615a      	str	r2, [r3, #20]
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <FLASH_Erase_Sector+0x4a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d016      	beq.n	800231a <FLASH_Erase_Sector+0x4a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d013      	beq.n	800231a <FLASH_Erase_Sector+0x4a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d010      	beq.n	800231a <FLASH_Erase_Sector+0x4a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d00d      	beq.n	800231a <FLASH_Erase_Sector+0x4a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d00a      	beq.n	800231a <FLASH_Erase_Sector+0x4a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b06      	cmp	r3, #6
 8002308:	d007      	beq.n	800231a <FLASH_Erase_Sector+0x4a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b07      	cmp	r3, #7
 800230e:	d004      	beq.n	800231a <FLASH_Erase_Sector+0x4a>
 8002310:	f240 31db 	movw	r1, #987	; 0x3db
 8002314:	4827      	ldr	r0, [pc, #156]	; (80023b4 <FLASH_Erase_Sector+0xe4>)
 8002316:	f00c fa9d 	bl	800e854 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <FLASH_Erase_Sector+0x6c>
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d00a      	beq.n	800233c <FLASH_Erase_Sector+0x6c>
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d007      	beq.n	800233c <FLASH_Erase_Sector+0x6c>
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d004      	beq.n	800233c <FLASH_Erase_Sector+0x6c>
 8002332:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8002336:	481f      	ldr	r0, [pc, #124]	; (80023b4 <FLASH_Erase_Sector+0xe4>)
 8002338:	f00c fa8c 	bl	800e854 <assert_failed>
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <FLASH_Erase_Sector+0x78>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e010      	b.n	800236a <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d103      	bne.n	8002356 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800234e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e009      	b.n	800236a <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d103      	bne.n	8002364 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800235c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e002      	b.n	800236a <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002364:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002368:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 8002370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002374:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	490f      	ldr	r1, [pc, #60]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 8002388:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800238c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4313      	orrs	r3, r2
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <FLASH_Erase_Sector+0xe8>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023aa:	6113      	str	r3, [r2, #16]
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	08011970 	.word	0x08011970
 80023b8:	40023c00 	.word	0x40023c00

080023bc <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023d0:	f023 030f 	bic.w	r3, r3, #15
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <FLASH_OB_EnableWRP+0x22>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <FLASH_OB_EnableWRP+0x2c>
 80023de:	f240 410d 	movw	r1, #1037	; 0x40d
 80023e2:	4812      	ldr	r0, [pc, #72]	; (800242c <FLASH_OB_EnableWRP+0x70>)
 80023e4:	f00c fa36 	bl	800e854 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d004      	beq.n	80023f8 <FLASH_OB_EnableWRP+0x3c>
 80023ee:	f240 410e 	movw	r1, #1038	; 0x40e
 80023f2:	480e      	ldr	r0, [pc, #56]	; (800242c <FLASH_OB_EnableWRP+0x70>)
 80023f4:	f00c fa2e 	bl	800e854 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023fc:	f7ff fd14 	bl	8001e28 <FLASH_WaitForLastOperation>
 8002400:	4603      	mov	r3, r0
 8002402:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <FLASH_OB_EnableWRP+0x64>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <FLASH_OB_EnableWRP+0x74>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29a      	uxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	b29b      	uxth	r3, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	b29b      	uxth	r3, r3
 8002418:	4905      	ldr	r1, [pc, #20]	; (8002430 <FLASH_OB_EnableWRP+0x74>)
 800241a:	4013      	ands	r3, r2
 800241c:	b29b      	uxth	r3, r3
 800241e:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	08011970 	.word	0x08011970
 8002430:	40023c16 	.word	0x40023c16

08002434 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002448:	f023 030f 	bic.w	r3, r3, #15
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <FLASH_OB_DisableWRP+0x22>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <FLASH_OB_DisableWRP+0x2c>
 8002456:	f240 4131 	movw	r1, #1073	; 0x431
 800245a:	4811      	ldr	r0, [pc, #68]	; (80024a0 <FLASH_OB_DisableWRP+0x6c>)
 800245c:	f00c f9fa 	bl	800e854 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d004      	beq.n	8002470 <FLASH_OB_DisableWRP+0x3c>
 8002466:	f240 4132 	movw	r1, #1074	; 0x432
 800246a:	480d      	ldr	r0, [pc, #52]	; (80024a0 <FLASH_OB_DisableWRP+0x6c>)
 800246c:	f00c f9f2 	bl	800e854 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002470:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002474:	f7ff fcd8 	bl	8001e28 <FLASH_WaitForLastOperation>
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d108      	bne.n	8002494 <FLASH_OB_DisableWRP+0x60>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <FLASH_OB_DisableWRP+0x70>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29a      	uxth	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4905      	ldr	r1, [pc, #20]	; (80024a4 <FLASH_OB_DisableWRP+0x70>)
 800248e:	4313      	orrs	r3, r2
 8002490:	b29b      	uxth	r3, r3
 8002492:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	08011970 	.word	0x08011970
 80024a4:	40023c16 	.word	0x40023c16

080024a8 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2baa      	cmp	r3, #170	; 0xaa
 80024ba:	d00a      	beq.n	80024d2 <FLASH_OB_RDP_LevelConfig+0x2a>
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b55      	cmp	r3, #85	; 0x55
 80024c0:	d007      	beq.n	80024d2 <FLASH_OB_RDP_LevelConfig+0x2a>
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	2bcc      	cmp	r3, #204	; 0xcc
 80024c6:	d004      	beq.n	80024d2 <FLASH_OB_RDP_LevelConfig+0x2a>
 80024c8:	f240 418f 	movw	r1, #1167	; 0x48f
 80024cc:	4809      	ldr	r0, [pc, #36]	; (80024f4 <FLASH_OB_RDP_LevelConfig+0x4c>)
 80024ce:	f00c f9c1 	bl	800e854 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024d6:	f7ff fca7 	bl	8001e28 <FLASH_WaitForLastOperation>
 80024da:	4603      	mov	r3, r0
 80024dc:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <FLASH_OB_RDP_LevelConfig+0x42>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <FLASH_OB_RDP_LevelConfig+0x50>)
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	08011970 	.word	0x08011970
 80024f8:	40023c15 	.word	0x40023c15

080024fc <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	460b      	mov	r3, r1
 8002508:	71bb      	strb	r3, [r7, #6]
 800250a:	4613      	mov	r3, r2
 800250c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800250e:	23ff      	movs	r3, #255	; 0xff
 8002510:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b20      	cmp	r3, #32
 800251a:	d007      	beq.n	800252c <FLASH_OB_UserConfig+0x30>
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <FLASH_OB_UserConfig+0x30>
 8002522:	f240 41b2 	movw	r1, #1202	; 0x4b2
 8002526:	481c      	ldr	r0, [pc, #112]	; (8002598 <FLASH_OB_UserConfig+0x9c>)
 8002528:	f00c f994 	bl	800e854 <assert_failed>
  assert_param(IS_OB_STOP_SOURCE(Stop));
 800252c:	79bb      	ldrb	r3, [r7, #6]
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	d007      	beq.n	8002542 <FLASH_OB_UserConfig+0x46>
 8002532:	79bb      	ldrb	r3, [r7, #6]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <FLASH_OB_UserConfig+0x46>
 8002538:	f240 41b3 	movw	r1, #1203	; 0x4b3
 800253c:	4816      	ldr	r0, [pc, #88]	; (8002598 <FLASH_OB_UserConfig+0x9c>)
 800253e:	f00c f989 	bl	800e854 <assert_failed>
  assert_param(IS_OB_STDBY_SOURCE(Stdby));
 8002542:	797b      	ldrb	r3, [r7, #5]
 8002544:	2b80      	cmp	r3, #128	; 0x80
 8002546:	d007      	beq.n	8002558 <FLASH_OB_UserConfig+0x5c>
 8002548:	797b      	ldrb	r3, [r7, #5]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <FLASH_OB_UserConfig+0x5c>
 800254e:	f240 41b4 	movw	r1, #1204	; 0x4b4
 8002552:	4811      	ldr	r0, [pc, #68]	; (8002598 <FLASH_OB_UserConfig+0x9c>)
 8002554:	f00c f97e 	bl	800e854 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002558:	f24c 3050 	movw	r0, #50000	; 0xc350
 800255c:	f7ff fc64 	bl	8001e28 <FLASH_WaitForLastOperation>
 8002560:	4603      	mov	r3, r0
 8002562:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d111      	bne.n	800258e <FLASH_OB_UserConfig+0x92>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <FLASH_OB_UserConfig+0xa0>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8002576:	79ba      	ldrb	r2, [r7, #6]
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	4313      	orrs	r3, r2
 800257c:	b2da      	uxtb	r2, r3
 800257e:	797b      	ldrb	r3, [r7, #5]
 8002580:	4313      	orrs	r3, r2
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4905      	ldr	r1, [pc, #20]	; (800259c <FLASH_OB_UserConfig+0xa0>)
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	4313      	orrs	r3, r2
 800258a:	b2db      	uxtb	r3, r3
 800258c:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 800258e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	08011970 	.word	0x08011970
 800259c:	40023c14 	.word	0x40023c14

080025a0 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d00d      	beq.n	80025cc <FLASH_OB_BOR_LevelConfig+0x2c>
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d00a      	beq.n	80025cc <FLASH_OB_BOR_LevelConfig+0x2c>
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <FLASH_OB_BOR_LevelConfig+0x2c>
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d004      	beq.n	80025cc <FLASH_OB_BOR_LevelConfig+0x2c>
 80025c2:	f240 41d2 	movw	r1, #1234	; 0x4d2
 80025c6:	480c      	ldr	r0, [pc, #48]	; (80025f8 <FLASH_OB_BOR_LevelConfig+0x58>)
 80025c8:	f00c f944 	bl	800e854 <assert_failed>

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <FLASH_OB_BOR_LevelConfig+0x5c>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <FLASH_OB_BOR_LevelConfig+0x5c>)
 80025d4:	f023 030c 	bic.w	r3, r3, #12
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <FLASH_OB_BOR_LevelConfig+0x5c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4906      	ldr	r1, [pc, #24]	; (80025fc <FLASH_OB_BOR_LevelConfig+0x5c>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
  
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	08011970 	.word	0x08011970
 80025fc:	40023c14 	.word	0x40023c14

08002600 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <FLASH_OB_GetUser+0x1c>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f023 031f 	bic.w	r3, r3, #31
 800260e:	b2db      	uxtb	r3, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00

08002620 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <FLASH_OB_GetWRP+0x14>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40023c16 	.word	0x40023c16

08002638 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800263e:	23aa      	movs	r3, #170	; 0xaa
 8002640:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <FLASH_OB_GetRDP+0x3c>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2bcc      	cmp	r3, #204	; 0xcc
 800264a:	d102      	bne.n	8002652 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800264c:	23cc      	movs	r3, #204	; 0xcc
 800264e:	71fb      	strb	r3, [r7, #7]
 8002650:	e009      	b.n	8002666 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <FLASH_OB_GetRDP+0x3c>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2baa      	cmp	r3, #170	; 0xaa
 800265a:	d102      	bne.n	8002662 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800265c:	23aa      	movs	r3, #170	; 0xaa
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	e001      	b.n	8002666 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8002662:	2355      	movs	r3, #85	; 0x55
 8002664:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002666:	79fb      	ldrb	r3, [r7, #7]
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40023c15 	.word	0x40023c15

08002678 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <FLASH_OB_GetBOR+0x1c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	b2db      	uxtb	r3, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40023c14 	.word	0x40023c14

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a3b      	ldr	r2, [pc, #236]	; (80027a0 <HAL_GPIO_Init+0x108>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d017      	beq.n	80026e6 <HAL_GPIO_Init+0x4e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a3a      	ldr	r2, [pc, #232]	; (80027a4 <HAL_GPIO_Init+0x10c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x4e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a39      	ldr	r2, [pc, #228]	; (80027a8 <HAL_GPIO_Init+0x110>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00f      	beq.n	80026e6 <HAL_GPIO_Init+0x4e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a38      	ldr	r2, [pc, #224]	; (80027ac <HAL_GPIO_Init+0x114>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00b      	beq.n	80026e6 <HAL_GPIO_Init+0x4e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <HAL_GPIO_Init+0x118>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x4e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a36      	ldr	r2, [pc, #216]	; (80027b4 <HAL_GPIO_Init+0x11c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x4e>
 80026de:	21b3      	movs	r1, #179	; 0xb3
 80026e0:	4835      	ldr	r0, [pc, #212]	; (80027b8 <HAL_GPIO_Init+0x120>)
 80026e2:	f00c f8b7 	bl	800e854 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_GPIO_Init+0x64>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x6c>
 80026fc:	21b4      	movs	r1, #180	; 0xb4
 80026fe:	482e      	ldr	r0, [pc, #184]	; (80027b8 <HAL_GPIO_Init+0x120>)
 8002700:	f00c f8a8 	bl	800e854 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d035      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d031      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b11      	cmp	r3, #17
 800271a:	d02d      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d029      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b12      	cmp	r3, #18
 800272a:	d025      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a22      	ldr	r2, [pc, #136]	; (80027bc <HAL_GPIO_Init+0x124>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d020      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <HAL_GPIO_Init+0x128>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d01b      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <HAL_GPIO_Init+0x12c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d016      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <HAL_GPIO_Init+0x130>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d011      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_GPIO_Init+0x134>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00c      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <HAL_GPIO_Init+0x138>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0xe0>
 8002770:	21b5      	movs	r1, #181	; 0xb5
 8002772:	4811      	ldr	r0, [pc, #68]	; (80027b8 <HAL_GPIO_Init+0x120>)
 8002774:	f00c f86e 	bl	800e854 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_GPIO_Init+0x100>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d007      	beq.n	8002798 <HAL_GPIO_Init+0x100>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x100>
 8002790:	21b6      	movs	r1, #182	; 0xb6
 8002792:	4809      	ldr	r0, [pc, #36]	; (80027b8 <HAL_GPIO_Init+0x120>)
 8002794:	f00c f85e 	bl	800e854 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	e211      	b.n	8002bc2 <HAL_GPIO_Init+0x52a>
 800279e:	bf00      	nop
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40021c00 	.word	0x40021c00
 80027b8:	080119b0 	.word	0x080119b0
 80027bc:	10110000 	.word	0x10110000
 80027c0:	10210000 	.word	0x10210000
 80027c4:	10310000 	.word	0x10310000
 80027c8:	10120000 	.word	0x10120000
 80027cc:	10220000 	.word	0x10220000
 80027d0:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f040 81e5 	bne.w	8002bbc <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d00b      	beq.n	8002812 <HAL_GPIO_Init+0x17a>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d007      	beq.n	8002812 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002806:	2b11      	cmp	r3, #17
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b12      	cmp	r3, #18
 8002810:	d144      	bne.n	800289c <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00f      	beq.n	800283a <HAL_GPIO_Init+0x1a2>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d00b      	beq.n	800283a <HAL_GPIO_Init+0x1a2>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0x1a2>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x1a2>
 8002832:	21c8      	movs	r1, #200	; 0xc8
 8002834:	489f      	ldr	r0, [pc, #636]	; (8002ab4 <HAL_GPIO_Init+0x41c>)
 8002836:	f00c f80d 	bl	800e854 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002870:	2201      	movs	r2, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 0201 	and.w	r2, r3, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d004      	beq.n	80028de <HAL_GPIO_Init+0x246>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b12      	cmp	r3, #18
 80028da:	f040 80a0 	bne.w	8002a1e <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d077      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	d073      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d06f      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d06b      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d067      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d063      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d05f      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d05b      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d057      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d053      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d04f      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d04b      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d047      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b04      	cmp	r3, #4
 800294c:	d043      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b05      	cmp	r3, #5
 8002954:	d03f      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d03b      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d037      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d033      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b06      	cmp	r3, #6
 8002974:	d02f      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d02b      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b06      	cmp	r3, #6
 8002984:	d027      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b07      	cmp	r3, #7
 800298c:	d023      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b07      	cmp	r3, #7
 8002994:	d01f      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b07      	cmp	r3, #7
 800299c:	d01b      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d017      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b0a      	cmp	r3, #10
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b09      	cmp	r3, #9
 80029b4:	d00f      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b09      	cmp	r3, #9
 80029bc:	d00b      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d007      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x33e>
 80029ce:	21e0      	movs	r1, #224	; 0xe0
 80029d0:	4838      	ldr	r0, [pc, #224]	; (8002ab4 <HAL_GPIO_Init+0x41c>)
 80029d2:	f00b ff3f 	bl	800e854 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	08da      	lsrs	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3208      	adds	r2, #8
 80029de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	08da      	lsrs	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3208      	adds	r2, #8
 8002a18:	69b9      	ldr	r1, [r7, #24]
 8002a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0203 	and.w	r2, r3, #3
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80ae 	beq.w	8002bbc <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_GPIO_Init+0x420>)
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <HAL_GPIO_Init+0x420>)
 8002a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_GPIO_Init+0x420>)
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_GPIO_Init+0x424>)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	220f      	movs	r2, #15
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <HAL_GPIO_Init+0x428>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d025      	beq.n	8002af4 <HAL_GPIO_Init+0x45c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <HAL_GPIO_Init+0x42c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d01f      	beq.n	8002af0 <HAL_GPIO_Init+0x458>
 8002ab0:	e00a      	b.n	8002ac8 <HAL_GPIO_Init+0x430>
 8002ab2:	bf00      	nop
 8002ab4:	080119b0 	.word	0x080119b0
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40013800 	.word	0x40013800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40020400 	.word	0x40020400
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a42      	ldr	r2, [pc, #264]	; (8002bd4 <HAL_GPIO_Init+0x53c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00d      	beq.n	8002aec <HAL_GPIO_Init+0x454>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a41      	ldr	r2, [pc, #260]	; (8002bd8 <HAL_GPIO_Init+0x540>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d007      	beq.n	8002ae8 <HAL_GPIO_Init+0x450>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a40      	ldr	r2, [pc, #256]	; (8002bdc <HAL_GPIO_Init+0x544>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_GPIO_Init+0x44c>
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	e008      	b.n	8002af6 <HAL_GPIO_Init+0x45e>
 8002ae4:	2307      	movs	r3, #7
 8002ae6:	e006      	b.n	8002af6 <HAL_GPIO_Init+0x45e>
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e004      	b.n	8002af6 <HAL_GPIO_Init+0x45e>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e002      	b.n	8002af6 <HAL_GPIO_Init+0x45e>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_GPIO_Init+0x45e>
 8002af4:	2300      	movs	r3, #0
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	f002 0203 	and.w	r2, r2, #3
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	4093      	lsls	r3, r2
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b06:	4936      	ldr	r1, [pc, #216]	; (8002be0 <HAL_GPIO_Init+0x548>)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b14:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_GPIO_Init+0x54c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b38:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <HAL_GPIO_Init+0x54c>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <HAL_GPIO_Init+0x54c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b62:	4a20      	ldr	r2, [pc, #128]	; (8002be4 <HAL_GPIO_Init+0x54c>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b68:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_GPIO_Init+0x54c>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b8c:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <HAL_GPIO_Init+0x54c>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_GPIO_Init+0x54c>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_GPIO_Init+0x54c>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	f67f ae05 	bls.w	80027d4 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40020800 	.word	0x40020800
 8002bd8:	40020c00 	.word	0x40020c00
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40013c00 	.word	0x40013c00

08002be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d004      	beq.n	8002c08 <HAL_GPIO_WritePin+0x20>
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <HAL_GPIO_WritePin+0x2a>
 8002c08:	f240 119f 	movw	r1, #415	; 0x19f
 8002c0c:	480e      	ldr	r0, [pc, #56]	; (8002c48 <HAL_GPIO_WritePin+0x60>)
 8002c0e:	f00b fe21 	bl	800e854 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002c12:	787b      	ldrb	r3, [r7, #1]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_GPIO_WritePin+0x40>
 8002c18:	787b      	ldrb	r3, [r7, #1]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d004      	beq.n	8002c28 <HAL_GPIO_WritePin+0x40>
 8002c1e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002c22:	4809      	ldr	r0, [pc, #36]	; (8002c48 <HAL_GPIO_WritePin+0x60>)
 8002c24:	f00b fe16 	bl	800e854 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	619a      	str	r2, [r3, #24]
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	080119b0 	.word	0x080119b0

08002c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f00c f9fe 	bl	800f06c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40013c00 	.word	0x40013c00

08002c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1b1      	b.n	8002ff2 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4aa2      	ldr	r2, [pc, #648]	; (8002f1c <HAL_I2C_Init+0x2a0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_I2C_Init+0x3a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4aa0      	ldr	r2, [pc, #640]	; (8002f20 <HAL_I2C_Init+0x2a4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_I2C_Init+0x3a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a9f      	ldr	r2, [pc, #636]	; (8002f24 <HAL_I2C_Init+0x2a8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_I2C_Init+0x3a>
 8002cac:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002cb0:	489d      	ldr	r0, [pc, #628]	; (8002f28 <HAL_I2C_Init+0x2ac>)
 8002cb2:	f00b fdcf 	bl	800e854 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <HAL_I2C_Init+0x4c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a9a      	ldr	r2, [pc, #616]	; (8002f2c <HAL_I2C_Init+0x2b0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d904      	bls.n	8002cd2 <HAL_I2C_Init+0x56>
 8002cc8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002ccc:	4896      	ldr	r0, [pc, #600]	; (8002f28 <HAL_I2C_Init+0x2ac>)
 8002cce:	f00b fdc1 	bl	800e854 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_I2C_Init+0x72>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ce2:	d004      	beq.n	8002cee <HAL_I2C_Init+0x72>
 8002ce4:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002ce8:	488f      	ldr	r0, [pc, #572]	; (8002f28 <HAL_I2C_Init+0x2ac>)
 8002cea:	f00b fdb3 	bl	800e854 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_I2C_Init+0x8c>
 8002cfe:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002d02:	4889      	ldr	r0, [pc, #548]	; (8002f28 <HAL_I2C_Init+0x2ac>)
 8002d04:	f00b fda6 	bl	800e854 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d10:	d009      	beq.n	8002d26 <HAL_I2C_Init+0xaa>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d1a:	d004      	beq.n	8002d26 <HAL_I2C_Init+0xaa>
 8002d1c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002d20:	4881      	ldr	r0, [pc, #516]	; (8002f28 <HAL_I2C_Init+0x2ac>)
 8002d22:	f00b fd97 	bl	800e854 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_I2C_Init+0xc4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d004      	beq.n	8002d40 <HAL_I2C_Init+0xc4>
 8002d36:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002d3a:	487b      	ldr	r0, [pc, #492]	; (8002f28 <HAL_I2C_Init+0x2ac>)
 8002d3c:	f00b fd8a 	bl	800e854 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <HAL_I2C_Init+0xda>
 8002d4c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002d50:	4875      	ldr	r0, [pc, #468]	; (8002f28 <HAL_I2C_Init+0x2ac>)
 8002d52:	f00b fd7f 	bl	800e854 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_I2C_Init+0xf4>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d004      	beq.n	8002d70 <HAL_I2C_Init+0xf4>
 8002d66:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002d6a:	486f      	ldr	r0, [pc, #444]	; (8002f28 <HAL_I2C_Init+0x2ac>)
 8002d6c:	f00b fd72 	bl	800e854 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_I2C_Init+0x10e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	2b80      	cmp	r3, #128	; 0x80
 8002d7e:	d004      	beq.n	8002d8a <HAL_I2C_Init+0x10e>
 8002d80:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002d84:	4868      	ldr	r0, [pc, #416]	; (8002f28 <HAL_I2C_Init+0x2ac>)
 8002d86:	f00b fd65 	bl	800e854 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f00a f850 	bl	800ce44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f001 fdc2 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 8002de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <HAL_I2C_Init+0x2b4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d807      	bhi.n	8002dfc <HAL_I2C_Init+0x180>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a51      	ldr	r2, [pc, #324]	; (8002f34 <HAL_I2C_Init+0x2b8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bf94      	ite	ls
 8002df4:	2301      	movls	r3, #1
 8002df6:	2300      	movhi	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e006      	b.n	8002e0a <HAL_I2C_Init+0x18e>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a4e      	ldr	r2, [pc, #312]	; (8002f38 <HAL_I2C_Init+0x2bc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf94      	ite	ls
 8002e04:	2301      	movls	r3, #1
 8002e06:	2300      	movhi	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0ef      	b.n	8002ff2 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a49      	ldr	r2, [pc, #292]	; (8002f3c <HAL_I2C_Init+0x2c0>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0c9b      	lsrs	r3, r3, #18
 8002e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_I2C_Init+0x2b4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d802      	bhi.n	8002e4c <HAL_I2C_Init+0x1d0>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	e009      	b.n	8002e60 <HAL_I2C_Init+0x1e4>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	4a3a      	ldr	r2, [pc, #232]	; (8002f40 <HAL_I2C_Init+0x2c4>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	3301      	adds	r3, #1
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	492d      	ldr	r1, [pc, #180]	; (8002f30 <HAL_I2C_Init+0x2b4>)
 8002e7c:	428b      	cmp	r3, r1
 8002e7e:	d80d      	bhi.n	8002e9c <HAL_I2C_Init+0x220>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e59      	subs	r1, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	bf38      	it	cc
 8002e98:	2304      	movcc	r3, #4
 8002e9a:	e063      	b.n	8002f64 <HAL_I2C_Init+0x2e8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d111      	bne.n	8002ec8 <HAL_I2C_Init+0x24c>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1e58      	subs	r0, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e012      	b.n	8002eee <HAL_I2C_Init+0x272>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	0099      	lsls	r1, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Init+0x27a>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e036      	b.n	8002f64 <HAL_I2C_Init+0x2e8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d122      	bne.n	8002f44 <HAL_I2C_Init+0x2c8>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e58      	subs	r0, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	440b      	add	r3, r1
 8002f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1a:	e023      	b.n	8002f64 <HAL_I2C_Init+0x2e8>
 8002f1c:	40005400 	.word	0x40005400
 8002f20:	40005800 	.word	0x40005800
 8002f24:	40005c00 	.word	0x40005c00
 8002f28:	080119ec 	.word	0x080119ec
 8002f2c:	00061a80 	.word	0x00061a80
 8002f30:	000186a0 	.word	0x000186a0
 8002f34:	001e847f 	.word	0x001e847f
 8002f38:	003d08ff 	.word	0x003d08ff
 8002f3c:	431bde83 	.word	0x431bde83
 8002f40:	10624dd3 	.word	0x10624dd3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	6809      	ldr	r1, [r1, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6911      	ldr	r1, [r2, #16]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop

08002ffc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	4608      	mov	r0, r1
 8003006:	4611      	mov	r1, r2
 8003008:	461a      	mov	r2, r3
 800300a:	4603      	mov	r3, r0
 800300c:	817b      	strh	r3, [r7, #10]
 800300e:	460b      	mov	r3, r1
 8003010:	813b      	strh	r3, [r7, #8]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003016:	f7fd ff85 	bl	8000f24 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d007      	beq.n	8003032 <HAL_I2C_Mem_Write+0x36>
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	2b10      	cmp	r3, #16
 8003026:	d004      	beq.n	8003032 <HAL_I2C_Mem_Write+0x36>
 8003028:	f640 1173 	movw	r1, #2419	; 0x973
 800302c:	4873      	ldr	r0, [pc, #460]	; (80031fc <HAL_I2C_Mem_Write+0x200>)
 800302e:	f00b fc11 	bl	800e854 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 80d9 	bne.w	80031f2 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2319      	movs	r3, #25
 8003046:	2201      	movs	r2, #1
 8003048:	496d      	ldr	r1, [pc, #436]	; (8003200 <HAL_I2C_Mem_Write+0x204>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fc88 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	e0cc      	b.n	80031f4 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_I2C_Mem_Write+0x6c>
 8003064:	2302      	movs	r3, #2
 8003066:	e0c5      	b.n	80031f4 <HAL_I2C_Mem_Write+0x1f8>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d007      	beq.n	800308e <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2221      	movs	r2, #33	; 0x21
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2240      	movs	r2, #64	; 0x40
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a4d      	ldr	r2, [pc, #308]	; (8003204 <HAL_I2C_Mem_Write+0x208>)
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030d0:	88f8      	ldrh	r0, [r7, #6]
 80030d2:	893a      	ldrh	r2, [r7, #8]
 80030d4:	8979      	ldrh	r1, [r7, #10]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4603      	mov	r3, r0
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fac3 	bl	800366c <I2C_RequestMemoryWrite>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d052      	beq.n	8003192 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e081      	b.n	80031f4 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fd09 	bl	8003b0c <I2C_WaitOnTXEFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	2b04      	cmp	r3, #4
 8003106:	d107      	bne.n	8003118 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e06b      	b.n	80031f4 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	781a      	ldrb	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b04      	cmp	r3, #4
 8003158:	d11b      	bne.n	8003192 <HAL_I2C_Mem_Write+0x196>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	2b00      	cmp	r3, #0
 8003160:	d017      	beq.n	8003192 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1aa      	bne.n	80030f0 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fcf5 	bl	8003b8e <I2C_WaitOnBTFFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d107      	bne.n	80031c2 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e016      	b.n	80031f4 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	080119ec 	.word	0x080119ec
 8003200:	00100002 	.word	0x00100002
 8003204:	ffff0000 	.word	0xffff0000

08003208 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	; 0x30
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	461a      	mov	r2, r3
 8003216:	4603      	mov	r3, r0
 8003218:	817b      	strh	r3, [r7, #10]
 800321a:	460b      	mov	r3, r1
 800321c:	813b      	strh	r3, [r7, #8]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003222:	f7fd fe7f 	bl	8000f24 <HAL_GetTick>
 8003226:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d007      	beq.n	800323e <HAL_I2C_Mem_Read+0x36>
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2b10      	cmp	r3, #16
 8003232:	d004      	beq.n	800323e <HAL_I2C_Mem_Read+0x36>
 8003234:	f640 11ee 	movw	r1, #2542	; 0x9ee
 8003238:	4881      	ldr	r0, [pc, #516]	; (8003440 <HAL_I2C_Mem_Read+0x238>)
 800323a:	f00b fb0b 	bl	800e854 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	f040 8209 	bne.w	800365e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2319      	movs	r3, #25
 8003252:	2201      	movs	r2, #1
 8003254:	497b      	ldr	r1, [pc, #492]	; (8003444 <HAL_I2C_Mem_Read+0x23c>)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fb82 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	e1fc      	b.n	8003660 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2C_Mem_Read+0x6c>
 8003270:	2302      	movs	r3, #2
 8003272:	e1f5      	b.n	8003660 <HAL_I2C_Mem_Read+0x458>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d007      	beq.n	800329a <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2222      	movs	r2, #34	; 0x22
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2240      	movs	r2, #64	; 0x40
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a5b      	ldr	r2, [pc, #364]	; (8003448 <HAL_I2C_Mem_Read+0x240>)
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032dc:	88f8      	ldrh	r0, [r7, #6]
 80032de:	893a      	ldrh	r2, [r7, #8]
 80032e0:	8979      	ldrh	r1, [r7, #10]
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	4603      	mov	r3, r0
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fa51 	bl	8003794 <I2C_RequestMemoryRead>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e1b1      	b.n	8003660 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	d113      	bne.n	800332c <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003304:	2300      	movs	r3, #0
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e185      	b.n	8003638 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	2b01      	cmp	r3, #1
 8003332:	d11b      	bne.n	800336c <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e165      	b.n	8003638 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b02      	cmp	r3, #2
 8003372:	d11b      	bne.n	80033ac <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003392:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	e145      	b.n	8003638 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033c2:	e139      	b.n	8003638 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	f200 80f2 	bhi.w	80035b2 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d123      	bne.n	800341e <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fc18 	bl	8003c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e13a      	b.n	8003660 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800341c:	e10c      	b.n	8003638 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	2b02      	cmp	r3, #2
 8003424:	d14f      	bne.n	80034c6 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	2200      	movs	r2, #0
 800342e:	4907      	ldr	r1, [pc, #28]	; (800344c <HAL_I2C_Mem_Read+0x244>)
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fa95 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e10f      	b.n	8003660 <HAL_I2C_Mem_Read+0x458>
 8003440:	080119ec 	.word	0x080119ec
 8003444:	00100002 	.word	0x00100002
 8003448:	ffff0000 	.word	0xffff0000
 800344c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034c4:	e0b8      	b.n	8003638 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	2200      	movs	r2, #0
 80034ce:	4966      	ldr	r1, [pc, #408]	; (8003668 <HAL_I2C_Mem_Read+0x460>)
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fa45 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0bf      	b.n	8003660 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003528:	2200      	movs	r2, #0
 800352a:	494f      	ldr	r1, [pc, #316]	; (8003668 <HAL_I2C_Mem_Read+0x460>)
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fa17 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e091      	b.n	8003660 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035b0:	e042      	b.n	8003638 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fb2a 	bl	8003c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e04c      	b.n	8003660 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d118      	bne.n	8003638 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	2b00      	cmp	r3, #0
 800363e:	f47f aec1 	bne.w	80033c4 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
  }
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	00010004 	.word	0x00010004

0800366c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	4603      	mov	r3, r0
 800367c:	817b      	strh	r3, [r7, #10]
 800367e:	460b      	mov	r3, r1
 8003680:	813b      	strh	r3, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	2200      	movs	r2, #0
 800369e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f95c 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00c      	beq.n	80036c8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e05f      	b.n	8003788 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c8:	897b      	ldrh	r3, [r7, #10]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	6a3a      	ldr	r2, [r7, #32]
 80036dc:	492c      	ldr	r1, [pc, #176]	; (8003790 <I2C_RequestMemoryWrite+0x124>)
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f995 	bl	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e04c      	b.n	8003788 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003706:	6a39      	ldr	r1, [r7, #32]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f9ff 	bl	8003b0c <I2C_WaitOnTXEFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	2b04      	cmp	r3, #4
 800371a:	d107      	bne.n	800372c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e02b      	b.n	8003788 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003736:	893b      	ldrh	r3, [r7, #8]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]
 8003740:	e021      	b.n	8003786 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003742:	893b      	ldrh	r3, [r7, #8]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003752:	6a39      	ldr	r1, [r7, #32]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f9d9 	bl	8003b0c <I2C_WaitOnTXEFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	2b04      	cmp	r3, #4
 8003766:	d107      	bne.n	8003778 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003776:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e005      	b.n	8003788 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800377c:	893b      	ldrh	r3, [r7, #8]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	00010002 	.word	0x00010002

08003794 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	817b      	strh	r3, [r7, #10]
 80037a6:	460b      	mov	r3, r1
 80037a8:	813b      	strh	r3, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f8c0 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00c      	beq.n	8003800 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0a9      	b.n	8003954 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003800:	897b      	ldrh	r3, [r7, #10]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800380e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	4951      	ldr	r1, [pc, #324]	; (800395c <I2C_RequestMemoryRead+0x1c8>)
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f8f9 	bl	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e096      	b.n	8003954 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383e:	6a39      	ldr	r1, [r7, #32]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f963 	bl	8003b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00d      	beq.n	8003868 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	2b04      	cmp	r3, #4
 8003852:	d107      	bne.n	8003864 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e075      	b.n	8003954 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d105      	bne.n	800387a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800386e:	893b      	ldrh	r3, [r7, #8]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]
 8003878:	e021      	b.n	80038be <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800387a:	893b      	ldrh	r3, [r7, #8]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	b29b      	uxth	r3, r3
 8003880:	b2da      	uxtb	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	6a39      	ldr	r1, [r7, #32]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f93d 	bl	8003b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00d      	beq.n	80038b4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2b04      	cmp	r3, #4
 800389e:	d107      	bne.n	80038b0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e04f      	b.n	8003954 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b4:	893b      	ldrh	r3, [r7, #8]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	6a39      	ldr	r1, [r7, #32]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f922 	bl	8003b0c <I2C_WaitOnTXEFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d107      	bne.n	80038e6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e034      	b.n	8003954 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2200      	movs	r2, #0
 8003902:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f82a 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e013      	b.n	8003954 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800392c:	897b      	ldrh	r3, [r7, #10]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	4906      	ldr	r1, [pc, #24]	; (800395c <I2C_RequestMemoryRead+0x1c8>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f863 	bl	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	00010002 	.word	0x00010002

08003960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003970:	e025      	b.n	80039be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d021      	beq.n	80039be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7fd fad3 	bl	8000f24 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d116      	bne.n	80039be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e023      	b.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10d      	bne.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	43da      	mvns	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	e00c      	b.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d0b6      	beq.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a1c:	e051      	b.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2c:	d123      	bne.n	8003a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e046      	b.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d021      	beq.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7e:	f7fd fa51 	bl	8000f24 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d302      	bcc.n	8003a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d116      	bne.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e020      	b.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d10c      	bne.n	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	e00b      	b.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	43da      	mvns	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d18d      	bne.n	8003a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b18:	e02d      	b.n	8003b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f8ce 	bl	8003cbc <I2C_IsAcknowledgeFailed>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e02d      	b.n	8003b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d021      	beq.n	8003b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fd f9f7 	bl	8000f24 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d116      	bne.n	8003b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e007      	b.n	8003b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b80      	cmp	r3, #128	; 0x80
 8003b82:	d1ca      	bne.n	8003b1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b9a:	e02d      	b.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f88d 	bl	8003cbc <I2C_IsAcknowledgeFailed>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e02d      	b.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d021      	beq.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb4:	f7fd f9b6 	bl	8000f24 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d116      	bne.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e007      	b.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d1ca      	bne.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c1c:	e042      	b.n	8003ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d119      	bne.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0210 	mvn.w	r2, #16
 8003c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e029      	b.n	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c60:	f7fd f960 	bl	8000f24 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d302      	bcc.n	8003c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d116      	bne.n	8003ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e007      	b.n	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d1b5      	bne.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	d11b      	bne.n	8003d0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f043 0204 	orr.w	r2, r3, #4
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2a:	d004      	beq.n	8003d36 <HAL_PWR_EnableWakeUpPin+0x1a>
 8003d2c:	f240 1141 	movw	r1, #321	; 0x141
 8003d30:	4806      	ldr	r0, [pc, #24]	; (8003d4c <HAL_PWR_EnableWakeUpPin+0x30>)
 8003d32:	f00a fd8f 	bl	800e854 <assert_failed>

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_PWR_EnableWakeUpPin+0x34>)
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	4905      	ldr	r1, [pc, #20]	; (8003d50 <HAL_PWR_EnableWakeUpPin+0x34>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	08011a24 	.word	0x08011a24
 8003d50:	40007000 	.word	0x40007000

08003d54 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d004      	beq.n	8003d6e <HAL_PWR_DisableWakeUpPin+0x1a>
 8003d64:	f240 1153 	movw	r1, #339	; 0x153
 8003d68:	4806      	ldr	r0, [pc, #24]	; (8003d84 <HAL_PWR_DisableWakeUpPin+0x30>)
 8003d6a:	f00a fd73 	bl	800e854 <assert_failed>

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_PWR_DisableWakeUpPin+0x34>)
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	4904      	ldr	r1, [pc, #16]	; (8003d88 <HAL_PWR_DisableWakeUpPin+0x34>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	08011a24 	.word	0x08011a24
 8003d88:	40007000 	.word	0x40007000

08003d8c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <HAL_PWR_EnterSTOPMode+0x22>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d004      	beq.n	8003dae <HAL_PWR_EnterSTOPMode+0x22>
 8003da4:	f240 119b 	movw	r1, #411	; 0x19b
 8003da8:	4816      	ldr	r0, [pc, #88]	; (8003e04 <HAL_PWR_EnterSTOPMode+0x78>)
 8003daa:	f00a fd53 	bl	800e854 <assert_failed>
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d007      	beq.n	8003dc4 <HAL_PWR_EnterSTOPMode+0x38>
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d004      	beq.n	8003dc4 <HAL_PWR_EnterSTOPMode+0x38>
 8003dba:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003dbe:	4811      	ldr	r0, [pc, #68]	; (8003e04 <HAL_PWR_EnterSTOPMode+0x78>)
 8003dc0:	f00a fd48 	bl	800e854 <assert_failed>
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8003dc4:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 0203 	bic.w	r2, r3, #3
 8003dcc:	490e      	ldr	r1, [pc, #56]	; (8003e08 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_PWR_EnterSTOPMode+0x80>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <HAL_PWR_EnterSTOPMode+0x80>)
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_PWR_EnterSTOPMode+0x5e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8003de6:	bf30      	wfi
 8003de8:	e002      	b.n	8003df0 <HAL_PWR_EnterSTOPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003dea:	bf40      	sev
    __WFE();
 8003dec:	bf20      	wfe
    __WFE();
 8003dee:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_PWR_EnterSTOPMode+0x80>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <HAL_PWR_EnterSTOPMode+0x80>)
 8003df6:	f023 0304 	bic.w	r3, r3, #4
 8003dfa:	6113      	str	r3, [r2, #16]
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	08011a24 	.word	0x08011a24
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003e2c:	bf30      	wfi
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	e000ed00 	.word	0xe000ed00

08003e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e30d      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b0f      	cmp	r3, #15
 8003e58:	d903      	bls.n	8003e62 <HAL_RCC_OscConfig+0x22>
 8003e5a:	21e8      	movs	r1, #232	; 0xe8
 8003e5c:	48a3      	ldr	r0, [pc, #652]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	f00a fcf9 	bl	800e854 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8088 	beq.w	8003f80 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <HAL_RCC_OscConfig+0x54>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d008      	beq.n	8003e94 <HAL_RCC_OscConfig+0x54>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCC_OscConfig+0x54>
 8003e8c:	21ed      	movs	r1, #237	; 0xed
 8003e8e:	4897      	ldr	r0, [pc, #604]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	f00a fce0 	bl	800e854 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e94:	4b96      	ldr	r3, [pc, #600]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d00c      	beq.n	8003eba <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea0:	4b93      	ldr	r3, [pc, #588]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d112      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eac:	4b90      	ldr	r3, [pc, #576]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eba:	4b8d      	ldr	r3, [pc, #564]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d05b      	beq.n	8003f7e <HAL_RCC_OscConfig+0x13e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d157      	bne.n	8003f7e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e2cd      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eda:	d106      	bne.n	8003eea <HAL_RCC_OscConfig+0xaa>
 8003edc:	4b84      	ldr	r3, [pc, #528]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a83      	ldr	r2, [pc, #524]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	e01d      	b.n	8003f26 <HAL_RCC_OscConfig+0xe6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef2:	d10c      	bne.n	8003f0e <HAL_RCC_OscConfig+0xce>
 8003ef4:	4b7e      	ldr	r3, [pc, #504]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a7d      	ldr	r2, [pc, #500]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b7b      	ldr	r3, [pc, #492]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a7a      	ldr	r2, [pc, #488]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	e00b      	b.n	8003f26 <HAL_RCC_OscConfig+0xe6>
 8003f0e:	4b78      	ldr	r3, [pc, #480]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a77      	ldr	r2, [pc, #476]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b75      	ldr	r3, [pc, #468]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a74      	ldr	r2, [pc, #464]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d013      	beq.n	8003f56 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fc fff9 	bl	8000f24 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f36:	f7fc fff5 	bl	8000f24 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e292      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f48:	4b69      	ldr	r3, [pc, #420]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0xf6>
 8003f54:	e014      	b.n	8003f80 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fc ffe5 	bl	8000f24 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f5e:	f7fc ffe1 	bl	8000f24 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b64      	cmp	r3, #100	; 0x64
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e27e      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f70:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x11e>
 8003f7c:	e000      	b.n	8003f80 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d079      	beq.n	8004080 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x166>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d004      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x166>
 8003f9c:	f240 111f 	movw	r1, #287	; 0x11f
 8003fa0:	4852      	ldr	r0, [pc, #328]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	f00a fc57 	bl	800e854 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b1f      	cmp	r3, #31
 8003fac:	d904      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x178>
 8003fae:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003fb2:	484e      	ldr	r0, [pc, #312]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	f00a fc4e 	bl	800e854 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fb8:	4b4d      	ldr	r3, [pc, #308]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc4:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d11c      	bne.n	800400a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd0:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d116      	bne.n	800400a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fdc:	4b44      	ldr	r3, [pc, #272]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x1b4>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e23c      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff4:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	493b      	ldr	r1, [pc, #236]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004008:	e03a      	b.n	8004080 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d020      	beq.n	8004054 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004012:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <HAL_RCC_OscConfig+0x2b4>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fc ff84 	bl	8000f24 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004020:	f7fc ff80 	bl	8000f24 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e21d      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4928      	ldr	r1, [pc, #160]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
 8004052:	e015      	b.n	8004080 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <HAL_RCC_OscConfig+0x2b4>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fc ff63 	bl	8000f24 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004062:	f7fc ff5f 	bl	8000f24 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e1fc      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004074:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d046      	beq.n	800411a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_OscConfig+0x266>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d004      	beq.n	80040a6 <HAL_RCC_OscConfig+0x266>
 800409c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80040a0:	4812      	ldr	r0, [pc, #72]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 80040a2:	f00a fbd7 	bl	800e854 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_OscConfig+0x2b8>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fc ff36 	bl	8000f24 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040bc:	f7fc ff32 	bl	8000f24 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1cf      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 80040d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x27c>
 80040da:	e01e      	b.n	800411a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_OscConfig+0x2b8>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fc ff1f 	bl	8000f24 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e8:	e011      	b.n	800410e <HAL_RCC_OscConfig+0x2ce>
 80040ea:	bf00      	nop
 80040ec:	08011a5c 	.word	0x08011a5c
 80040f0:	40023800 	.word	0x40023800
 80040f4:	42470000 	.word	0x42470000
 80040f8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fc ff12 	bl	8000f24 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1af      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410e:	4b97      	ldr	r3, [pc, #604]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80a8 	beq.w	8004278 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00c      	beq.n	800414e <HAL_RCC_OscConfig+0x30e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d008      	beq.n	800414e <HAL_RCC_OscConfig+0x30e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d004      	beq.n	800414e <HAL_RCC_OscConfig+0x30e>
 8004144:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004148:	4889      	ldr	r0, [pc, #548]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 800414a:	f00a fb83 	bl	800e854 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414e:	4b87      	ldr	r3, [pc, #540]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	4b83      	ldr	r3, [pc, #524]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a82      	ldr	r2, [pc, #520]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
 800416a:	4b80      	ldr	r3, [pc, #512]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004176:	2301      	movs	r3, #1
 8004178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417a:	4b7e      	ldr	r3, [pc, #504]	; (8004374 <HAL_RCC_OscConfig+0x534>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d118      	bne.n	80041b8 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004186:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCC_OscConfig+0x534>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7a      	ldr	r2, [pc, #488]	; (8004374 <HAL_RCC_OscConfig+0x534>)
 800418c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004192:	f7fc fec7 	bl	8000f24 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419a:	f7fc fec3 	bl	8000f24 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e160      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ac:	4b71      	ldr	r3, [pc, #452]	; (8004374 <HAL_RCC_OscConfig+0x534>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d106      	bne.n	80041ce <HAL_RCC_OscConfig+0x38e>
 80041c0:	4b6a      	ldr	r3, [pc, #424]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	4a69      	ldr	r2, [pc, #420]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6713      	str	r3, [r2, #112]	; 0x70
 80041cc:	e01c      	b.n	8004208 <HAL_RCC_OscConfig+0x3c8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3b0>
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a64      	ldr	r2, [pc, #400]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4a61      	ldr	r2, [pc, #388]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6713      	str	r3, [r2, #112]	; 0x70
 80041ee:	e00b      	b.n	8004208 <HAL_RCC_OscConfig+0x3c8>
 80041f0:	4b5e      	ldr	r3, [pc, #376]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a5d      	ldr	r2, [pc, #372]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
 80041fc:	4b5b      	ldr	r3, [pc, #364]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	4a5a      	ldr	r2, [pc, #360]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004202:	f023 0304 	bic.w	r3, r3, #4
 8004206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fc fe88 	bl	8000f24 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004216:	e00a      	b.n	800422e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004218:	f7fc fe84 	bl	8000f24 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e11f      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422e:	4b4f      	ldr	r3, [pc, #316]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0ee      	beq.n	8004218 <HAL_RCC_OscConfig+0x3d8>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423c:	f7fc fe72 	bl	8000f24 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004242:	e00a      	b.n	800425a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004244:	f7fc fe6e 	bl	8000f24 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e109      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425a:	4b44      	ldr	r3, [pc, #272]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1ee      	bne.n	8004244 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004266:	7dfb      	ldrb	r3, [r7, #23]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426c:	4b3f      	ldr	r3, [pc, #252]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4a3e      	ldr	r2, [pc, #248]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004276:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_RCC_OscConfig+0x45a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d008      	beq.n	800429a <HAL_RCC_OscConfig+0x45a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d004      	beq.n	800429a <HAL_RCC_OscConfig+0x45a>
 8004290:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004294:	4836      	ldr	r0, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 8004296:	f00a fadd 	bl	800e854 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80e4 	beq.w	800446c <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	f000 80ae 	beq.w	800440e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	f040 8092 	bne.w	80043e0 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_RCC_OscConfig+0x498>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042cc:	d004      	beq.n	80042d8 <HAL_RCC_OscConfig+0x498>
 80042ce:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80042d2:	4827      	ldr	r0, [pc, #156]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 80042d4:	f00a fabe 	bl	800e854 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	2b3f      	cmp	r3, #63	; 0x3f
 80042de:	d904      	bls.n	80042ea <HAL_RCC_OscConfig+0x4aa>
 80042e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80042e4:	4822      	ldr	r0, [pc, #136]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 80042e6:	f00a fab5 	bl	800e854 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2bbf      	cmp	r3, #191	; 0xbf
 80042f0:	d904      	bls.n	80042fc <HAL_RCC_OscConfig+0x4bc>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80042fa:	d904      	bls.n	8004306 <HAL_RCC_OscConfig+0x4c6>
 80042fc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004300:	481b      	ldr	r0, [pc, #108]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 8004302:	f00a faa7 	bl	800e854 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	2b02      	cmp	r3, #2
 800430c:	d010      	beq.n	8004330 <HAL_RCC_OscConfig+0x4f0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	2b04      	cmp	r3, #4
 8004314:	d00c      	beq.n	8004330 <HAL_RCC_OscConfig+0x4f0>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	2b06      	cmp	r3, #6
 800431c:	d008      	beq.n	8004330 <HAL_RCC_OscConfig+0x4f0>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	2b08      	cmp	r3, #8
 8004324:	d004      	beq.n	8004330 <HAL_RCC_OscConfig+0x4f0>
 8004326:	f240 11db 	movw	r1, #475	; 0x1db
 800432a:	4811      	ldr	r0, [pc, #68]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 800432c:	f00a fa92 	bl	800e854 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d903      	bls.n	8004340 <HAL_RCC_OscConfig+0x500>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d904      	bls.n	800434a <HAL_RCC_OscConfig+0x50a>
 8004340:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004344:	480a      	ldr	r0, [pc, #40]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 8004346:	f00a fa85 	bl	800e854 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_OscConfig+0x538>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fc fde8 	bl	8000f24 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	e011      	b.n	800437c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004358:	f7fc fde4 	bl	8000f24 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d90a      	bls.n	800437c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e081      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
 800436a:	bf00      	nop
 800436c:	40023800 	.word	0x40023800
 8004370:	08011a5c 	.word	0x08011a5c
 8004374:	40007000 	.word	0x40007000
 8004378:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <HAL_RCC_OscConfig+0x638>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e7      	bne.n	8004358 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	019b      	lsls	r3, r3, #6
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	3b01      	subs	r3, #1
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	061b      	lsls	r3, r3, #24
 80043ac:	4932      	ldr	r1, [pc, #200]	; (8004478 <HAL_RCC_OscConfig+0x638>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b2:	4b32      	ldr	r3, [pc, #200]	; (800447c <HAL_RCC_OscConfig+0x63c>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fc fdb4 	bl	8000f24 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fc fdb0 	bl	8000f24 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e04d      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_RCC_OscConfig+0x638>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x580>
 80043de:	e045      	b.n	800446c <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e0:	4b26      	ldr	r3, [pc, #152]	; (800447c <HAL_RCC_OscConfig+0x63c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fc fd9d 	bl	8000f24 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ee:	f7fc fd99 	bl	8000f24 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e036      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004400:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <HAL_RCC_OscConfig+0x638>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <HAL_RCC_OscConfig+0x5ae>
 800440c:	e02e      	b.n	800446c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e029      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800441a:	4b17      	ldr	r3, [pc, #92]	; (8004478 <HAL_RCC_OscConfig+0x638>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	429a      	cmp	r2, r3
 800442c:	d11c      	bne.n	8004468 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d115      	bne.n	8004468 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004442:	4013      	ands	r3, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004448:	4293      	cmp	r3, r2
 800444a:	d10d      	bne.n	8004468 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d106      	bne.n	8004468 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	42470060 	.word	0x42470060

08004480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e174      	b.n	800477e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x24>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b0f      	cmp	r3, #15
 80044a2:	d904      	bls.n	80044ae <HAL_RCC_ClockConfig+0x2e>
 80044a4:	f240 2151 	movw	r1, #593	; 0x251
 80044a8:	487b      	ldr	r0, [pc, #492]	; (8004698 <HAL_RCC_ClockConfig+0x218>)
 80044aa:	f00a f9d3 	bl	800e854 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d019      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d016      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d013      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d010      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d00d      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d007      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b07      	cmp	r3, #7
 80044dc:	d004      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
 80044de:	f240 2152 	movw	r1, #594	; 0x252
 80044e2:	486d      	ldr	r0, [pc, #436]	; (8004698 <HAL_RCC_ClockConfig+0x218>)
 80044e4:	f00a f9b6 	bl	800e854 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b6c      	ldr	r3, [pc, #432]	; (800469c <HAL_RCC_ClockConfig+0x21c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d90c      	bls.n	8004510 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b69      	ldr	r3, [pc, #420]	; (800469c <HAL_RCC_ClockConfig+0x21c>)
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b67      	ldr	r3, [pc, #412]	; (800469c <HAL_RCC_ClockConfig+0x21c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e136      	b.n	800477e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d049      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004528:	4b5d      	ldr	r3, [pc, #372]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a5c      	ldr	r2, [pc, #368]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 800452e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004540:	4b57      	ldr	r3, [pc, #348]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a56      	ldr	r2, [pc, #344]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 8004546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800454a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d024      	beq.n	800459e <HAL_RCC_ClockConfig+0x11e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b80      	cmp	r3, #128	; 0x80
 800455a:	d020      	beq.n	800459e <HAL_RCC_ClockConfig+0x11e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b90      	cmp	r3, #144	; 0x90
 8004562:	d01c      	beq.n	800459e <HAL_RCC_ClockConfig+0x11e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2ba0      	cmp	r3, #160	; 0xa0
 800456a:	d018      	beq.n	800459e <HAL_RCC_ClockConfig+0x11e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2bb0      	cmp	r3, #176	; 0xb0
 8004572:	d014      	beq.n	800459e <HAL_RCC_ClockConfig+0x11e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2bc0      	cmp	r3, #192	; 0xc0
 800457a:	d010      	beq.n	800459e <HAL_RCC_ClockConfig+0x11e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2bd0      	cmp	r3, #208	; 0xd0
 8004582:	d00c      	beq.n	800459e <HAL_RCC_ClockConfig+0x11e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2be0      	cmp	r3, #224	; 0xe0
 800458a:	d008      	beq.n	800459e <HAL_RCC_ClockConfig+0x11e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2bf0      	cmp	r3, #240	; 0xf0
 8004592:	d004      	beq.n	800459e <HAL_RCC_ClockConfig+0x11e>
 8004594:	f240 2175 	movw	r1, #629	; 0x275
 8004598:	483f      	ldr	r0, [pc, #252]	; (8004698 <HAL_RCC_ClockConfig+0x218>)
 800459a:	f00a f95b 	bl	800e854 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459e:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	493d      	ldr	r1, [pc, #244]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d059      	beq.n	8004670 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d010      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x166>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d00c      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x166>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d008      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x166>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d004      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x166>
 80045dc:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80045e0:	482d      	ldr	r0, [pc, #180]	; (8004698 <HAL_RCC_ClockConfig+0x218>)
 80045e2:	f00a f937 	bl	800e854 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ee:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d119      	bne.n	800462e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0bf      	b.n	800477e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d003      	beq.n	800460e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460a:	2b03      	cmp	r3, #3
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0af      	b.n	800477e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0a7      	b.n	800477e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800462e:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f023 0203 	bic.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4919      	ldr	r1, [pc, #100]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 800463c:	4313      	orrs	r3, r2
 800463e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004640:	f7fc fc70 	bl	8000f24 <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	e00a      	b.n	800465e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fc fc6c 	bl	8000f24 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e08f      	b.n	800477e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_RCC_ClockConfig+0x220>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 020c 	and.w	r2, r3, #12
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	429a      	cmp	r2, r3
 800466e:	d1eb      	bne.n	8004648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x21c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d212      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <HAL_RCC_ClockConfig+0x21c>)
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCC_ClockConfig+0x21c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d007      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e072      	b.n	800477e <HAL_RCC_ClockConfig+0x2fe>
 8004698:	08011a5c 	.word	0x08011a5c
 800469c:	40023c00 	.word	0x40023c00
 80046a0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d025      	beq.n	80046fc <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d018      	beq.n	80046ea <HAL_RCC_ClockConfig+0x26a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d013      	beq.n	80046ea <HAL_RCC_ClockConfig+0x26a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046ca:	d00e      	beq.n	80046ea <HAL_RCC_ClockConfig+0x26a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80046d4:	d009      	beq.n	80046ea <HAL_RCC_ClockConfig+0x26a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80046de:	d004      	beq.n	80046ea <HAL_RCC_ClockConfig+0x26a>
 80046e0:	f240 21ba 	movw	r1, #698	; 0x2ba
 80046e4:	4828      	ldr	r0, [pc, #160]	; (8004788 <HAL_RCC_ClockConfig+0x308>)
 80046e6:	f00a f8b5 	bl	800e854 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ea:	4b28      	ldr	r3, [pc, #160]	; (800478c <HAL_RCC_ClockConfig+0x30c>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	4925      	ldr	r1, [pc, #148]	; (800478c <HAL_RCC_ClockConfig+0x30c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d026      	beq.n	8004756 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d018      	beq.n	8004742 <HAL_RCC_ClockConfig+0x2c2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d013      	beq.n	8004742 <HAL_RCC_ClockConfig+0x2c2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004722:	d00e      	beq.n	8004742 <HAL_RCC_ClockConfig+0x2c2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x2c2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004736:	d004      	beq.n	8004742 <HAL_RCC_ClockConfig+0x2c2>
 8004738:	f240 21c1 	movw	r1, #705	; 0x2c1
 800473c:	4812      	ldr	r0, [pc, #72]	; (8004788 <HAL_RCC_ClockConfig+0x308>)
 800473e:	f00a f889 	bl	800e854 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <HAL_RCC_ClockConfig+0x30c>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	490e      	ldr	r1, [pc, #56]	; (800478c <HAL_RCC_ClockConfig+0x30c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004756:	f000 f821 	bl	800479c <HAL_RCC_GetSysClockFreq>
 800475a:	4601      	mov	r1, r0
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_RCC_ClockConfig+0x30c>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_RCC_ClockConfig+0x310>)
 8004768:	5cd3      	ldrb	r3, [r2, r3]
 800476a:	fa21 f303 	lsr.w	r3, r1, r3
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x314>)
 8004770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <HAL_RCC_ClockConfig+0x318>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f00a f9a2 	bl	800eac0 <HAL_InitTick>

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	08011a5c 	.word	0x08011a5c
 800478c:	40023800 	.word	0x40023800
 8004790:	08012218 	.word	0x08012218
 8004794:	20000090 	.word	0x20000090
 8004798:	20000080 	.word	0x20000080

0800479c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	2300      	movs	r3, #0
 80047ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b2:	4b63      	ldr	r3, [pc, #396]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d007      	beq.n	80047ce <HAL_RCC_GetSysClockFreq+0x32>
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d008      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0x38>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f040 80b4 	bne.w	8004930 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c8:	4b5e      	ldr	r3, [pc, #376]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047ca:	60bb      	str	r3, [r7, #8]
       break;
 80047cc:	e0b3      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ce:	4b5e      	ldr	r3, [pc, #376]	; (8004948 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80047d0:	60bb      	str	r3, [r7, #8]
      break;
 80047d2:	e0b0      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d4:	4b5a      	ldr	r3, [pc, #360]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047de:	4b58      	ldr	r3, [pc, #352]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04a      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ea:	4b55      	ldr	r3, [pc, #340]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	099b      	lsrs	r3, r3, #6
 80047f0:	f04f 0400 	mov.w	r4, #0
 80047f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	ea03 0501 	and.w	r5, r3, r1
 8004800:	ea04 0602 	and.w	r6, r4, r2
 8004804:	4629      	mov	r1, r5
 8004806:	4632      	mov	r2, r6
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	f04f 0400 	mov.w	r4, #0
 8004810:	0154      	lsls	r4, r2, #5
 8004812:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004816:	014b      	lsls	r3, r1, #5
 8004818:	4619      	mov	r1, r3
 800481a:	4622      	mov	r2, r4
 800481c:	1b49      	subs	r1, r1, r5
 800481e:	eb62 0206 	sbc.w	r2, r2, r6
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	f04f 0400 	mov.w	r4, #0
 800482a:	0194      	lsls	r4, r2, #6
 800482c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004830:	018b      	lsls	r3, r1, #6
 8004832:	1a5b      	subs	r3, r3, r1
 8004834:	eb64 0402 	sbc.w	r4, r4, r2
 8004838:	f04f 0100 	mov.w	r1, #0
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	00e2      	lsls	r2, r4, #3
 8004842:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004846:	00d9      	lsls	r1, r3, #3
 8004848:	460b      	mov	r3, r1
 800484a:	4614      	mov	r4, r2
 800484c:	195b      	adds	r3, r3, r5
 800484e:	eb44 0406 	adc.w	r4, r4, r6
 8004852:	f04f 0100 	mov.w	r1, #0
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	0262      	lsls	r2, r4, #9
 800485c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004860:	0259      	lsls	r1, r3, #9
 8004862:	460b      	mov	r3, r1
 8004864:	4614      	mov	r4, r2
 8004866:	4618      	mov	r0, r3
 8004868:	4621      	mov	r1, r4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f04f 0400 	mov.w	r4, #0
 8004870:	461a      	mov	r2, r3
 8004872:	4623      	mov	r3, r4
 8004874:	f7fc f9a0 	bl	8000bb8 <__aeabi_uldivmod>
 8004878:	4603      	mov	r3, r0
 800487a:	460c      	mov	r4, r1
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e049      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004880:	4b2f      	ldr	r3, [pc, #188]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	f04f 0400 	mov.w	r4, #0
 800488a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	ea03 0501 	and.w	r5, r3, r1
 8004896:	ea04 0602 	and.w	r6, r4, r2
 800489a:	4629      	mov	r1, r5
 800489c:	4632      	mov	r2, r6
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	f04f 0400 	mov.w	r4, #0
 80048a6:	0154      	lsls	r4, r2, #5
 80048a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048ac:	014b      	lsls	r3, r1, #5
 80048ae:	4619      	mov	r1, r3
 80048b0:	4622      	mov	r2, r4
 80048b2:	1b49      	subs	r1, r1, r5
 80048b4:	eb62 0206 	sbc.w	r2, r2, r6
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	f04f 0400 	mov.w	r4, #0
 80048c0:	0194      	lsls	r4, r2, #6
 80048c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048c6:	018b      	lsls	r3, r1, #6
 80048c8:	1a5b      	subs	r3, r3, r1
 80048ca:	eb64 0402 	sbc.w	r4, r4, r2
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	00e2      	lsls	r2, r4, #3
 80048d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048dc:	00d9      	lsls	r1, r3, #3
 80048de:	460b      	mov	r3, r1
 80048e0:	4614      	mov	r4, r2
 80048e2:	195b      	adds	r3, r3, r5
 80048e4:	eb44 0406 	adc.w	r4, r4, r6
 80048e8:	f04f 0100 	mov.w	r1, #0
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	02a2      	lsls	r2, r4, #10
 80048f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048f6:	0299      	lsls	r1, r3, #10
 80048f8:	460b      	mov	r3, r1
 80048fa:	4614      	mov	r4, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	4621      	mov	r1, r4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f04f 0400 	mov.w	r4, #0
 8004906:	461a      	mov	r2, r3
 8004908:	4623      	mov	r3, r4
 800490a:	f7fc f955 	bl	8000bb8 <__aeabi_uldivmod>
 800490e:	4603      	mov	r3, r0
 8004910:	460c      	mov	r4, r1
 8004912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	3301      	adds	r3, #1
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	60bb      	str	r3, [r7, #8]
      break;
 800492e:	e002      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004932:	60bb      	str	r3, [r7, #8]
      break;
 8004934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004936:	68bb      	ldr	r3, [r7, #8]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004940:	40023800 	.word	0x40023800
 8004944:	00f42400 	.word	0x00f42400
 8004948:	007a1200 	.word	0x007a1200

0800494c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <HAL_RCC_GetHCLKFreq+0x14>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000090 	.word	0x20000090

08004964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004968:	f7ff fff0 	bl	800494c <HAL_RCC_GetHCLKFreq>
 800496c:	4601      	mov	r1, r0
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	0a9b      	lsrs	r3, r3, #10
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4a03      	ldr	r2, [pc, #12]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40023800 	.word	0x40023800
 8004988:	08012228 	.word	0x08012228

0800498c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004990:	f7ff ffdc 	bl	800494c <HAL_RCC_GetHCLKFreq>
 8004994:	4601      	mov	r1, r0
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	0b5b      	lsrs	r3, r3, #13
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	4a03      	ldr	r2, [pc, #12]	; (80049b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a2:	5cd3      	ldrb	r3, [r2, r3]
 80049a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40023800 	.word	0x40023800
 80049b0:	08012228 	.word	0x08012228

080049b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	220f      	movs	r2, #15
 80049c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049c4:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <HAL_RCC_GetClockConfig+0x5c>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0203 	and.w	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049d0:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <HAL_RCC_GetClockConfig+0x5c>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <HAL_RCC_GetClockConfig+0x5c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCC_GetClockConfig+0x5c>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	08db      	lsrs	r3, r3, #3
 80049ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <HAL_RCC_GetClockConfig+0x60>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 020f 	and.w	r2, r3, #15
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	601a      	str	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40023c00 	.word	0x40023c00

08004a18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b0f      	cmp	r3, #15
 8004a36:	d904      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004a38:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004a3c:	489d      	ldr	r0, [pc, #628]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004a3e:	f009 ff09 	bl	800e854 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d105      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d060      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d903      	bls.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b07      	cmp	r3, #7
 8004a68:	d904      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004a6a:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004a6e:	4891      	ldr	r0, [pc, #580]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004a70:	f009 fef0 	bl	800e854 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2bbf      	cmp	r3, #191	; 0xbf
 8004a7a:	d904      	bls.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004a84:	d904      	bls.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004a86:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004a8a:	488a      	ldr	r0, [pc, #552]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004a8c:	f009 fee2 	bl	800e854 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d903      	bls.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b3f      	cmp	r3, #63	; 0x3f
 8004a9e:	d904      	bls.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004aa0:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8004aa4:	4883      	ldr	r0, [pc, #524]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004aa6:	f009 fed5 	bl	800e854 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aaa:	4b83      	ldr	r3, [pc, #524]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab0:	f7fc fa38 	bl	8000f24 <HAL_GetTick>
 8004ab4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ab8:	f7fc fa34 	bl	8000f24 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e1ae      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aca:	4b7c      	ldr	r3, [pc, #496]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	019b      	lsls	r3, r3, #6
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	071b      	lsls	r3, r3, #28
 8004ae8:	4974      	ldr	r1, [pc, #464]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af0:	4b71      	ldr	r3, [pc, #452]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004af6:	f7fc fa15 	bl	8000f24 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004afe:	f7fc fa11 	bl	8000f24 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e18b      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b10:	4b6a      	ldr	r3, [pc, #424]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8174 	beq.w	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b32:	f000 80a6 	beq.w	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3e:	f000 80a0 	beq.w	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	4a5e      	ldr	r2, [pc, #376]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	f000 809a 	beq.w	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	4a5c      	ldr	r2, [pc, #368]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	f000 8094 	beq.w	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	4a5a      	ldr	r2, [pc, #360]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	f000 808e 	beq.w	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	4a58      	ldr	r2, [pc, #352]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	f000 8088 	beq.w	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	4a56      	ldr	r2, [pc, #344]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f000 8082 	beq.w	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4a54      	ldr	r2, [pc, #336]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d07c      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	4a52      	ldr	r2, [pc, #328]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d077      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	4a51      	ldr	r2, [pc, #324]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d072      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	4a4f      	ldr	r2, [pc, #316]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d06d      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	4a4e      	ldr	r2, [pc, #312]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d068      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	4a4c      	ldr	r2, [pc, #304]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d063      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	4a4b      	ldr	r2, [pc, #300]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d05e      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	4a49      	ldr	r2, [pc, #292]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d059      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	4a48      	ldr	r2, [pc, #288]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d054      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	4a46      	ldr	r2, [pc, #280]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d04f      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	4a45      	ldr	r2, [pc, #276]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d04a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	4a43      	ldr	r2, [pc, #268]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d045      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	4a42      	ldr	r2, [pc, #264]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d040      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	4a40      	ldr	r2, [pc, #256]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d03b      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	4a3f      	ldr	r2, [pc, #252]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d036      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	4a3d      	ldr	r2, [pc, #244]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d031      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	4a3c      	ldr	r2, [pc, #240]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d02c      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	4a3a      	ldr	r2, [pc, #232]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d027      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01d      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	4a36      	ldr	r2, [pc, #216]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4a34      	ldr	r2, [pc, #208]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	4a33      	ldr	r2, [pc, #204]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	4a31      	ldr	r2, [pc, #196]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	4a30      	ldr	r2, [pc, #192]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c78:	f640 2112 	movw	r1, #2578	; 0xa12
 8004c7c:	480d      	ldr	r0, [pc, #52]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c7e:	f009 fde9 	bl	800e854 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c90:	6413      	str	r3, [r2, #64]	; 0x40
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c9e:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004caa:	f7fc f93b 	bl	8000f24 <HAL_GetTick>
 8004cae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cb0:	e04d      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004cb2:	bf00      	nop
 8004cb4:	08011a94 	.word	0x08011a94
 8004cb8:	42470068 	.word	0x42470068
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	00020300 	.word	0x00020300
 8004cc4:	00030300 	.word	0x00030300
 8004cc8:	00040300 	.word	0x00040300
 8004ccc:	00050300 	.word	0x00050300
 8004cd0:	00060300 	.word	0x00060300
 8004cd4:	00070300 	.word	0x00070300
 8004cd8:	00080300 	.word	0x00080300
 8004cdc:	00090300 	.word	0x00090300
 8004ce0:	000a0300 	.word	0x000a0300
 8004ce4:	000b0300 	.word	0x000b0300
 8004ce8:	000c0300 	.word	0x000c0300
 8004cec:	000d0300 	.word	0x000d0300
 8004cf0:	000e0300 	.word	0x000e0300
 8004cf4:	000f0300 	.word	0x000f0300
 8004cf8:	00100300 	.word	0x00100300
 8004cfc:	00110300 	.word	0x00110300
 8004d00:	00120300 	.word	0x00120300
 8004d04:	00130300 	.word	0x00130300
 8004d08:	00140300 	.word	0x00140300
 8004d0c:	00150300 	.word	0x00150300
 8004d10:	00160300 	.word	0x00160300
 8004d14:	00170300 	.word	0x00170300
 8004d18:	00180300 	.word	0x00180300
 8004d1c:	00190300 	.word	0x00190300
 8004d20:	001a0300 	.word	0x001a0300
 8004d24:	001b0300 	.word	0x001b0300
 8004d28:	001c0300 	.word	0x001c0300
 8004d2c:	001d0300 	.word	0x001d0300
 8004d30:	001e0300 	.word	0x001e0300
 8004d34:	001f0300 	.word	0x001f0300
 8004d38:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d3c:	f7fc f8f2 	bl	8000f24 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e06c      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d4e:	4b38      	ldr	r3, [pc, #224]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d5a:	4b36      	ldr	r3, [pc, #216]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d62:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d02f      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d028      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d78:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d82:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d88:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d8e:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d94:	4b27      	ldr	r3, [pc, #156]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d114      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fc f8c0 	bl	8000f24 <HAL_GetTick>
 8004da4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da6:	e00a      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7fc f8bc 	bl	8000f24 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e034      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ee      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd6:	d10d      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004dd8:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dec:	4911      	ldr	r1, [pc, #68]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
 8004df2:	e005      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004df4:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dfa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dfe:	6093      	str	r3, [r2, #8]
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0c:	4909      	ldr	r1, [pc, #36]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7d1a      	ldrb	r2, [r3, #20]
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e24:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40007000 	.word	0x40007000
 8004e34:	40023800 	.word	0x40023800
 8004e38:	42470e40 	.word	0x42470e40
 8004e3c:	424711e0 	.word	0x424711e0

08004e40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e0d6      	b.n	8005000 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b40      	cmp	r3, #64	; 0x40
 8004e58:	d007      	beq.n	8004e6a <HAL_RTC_Init+0x2a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_RTC_Init+0x2a>
 8004e62:	21ff      	movs	r1, #255	; 0xff
 8004e64:	4868      	ldr	r0, [pc, #416]	; (8005008 <HAL_RTC_Init+0x1c8>)
 8004e66:	f009 fcf5 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e70:	d904      	bls.n	8004e7c <HAL_RTC_Init+0x3c>
 8004e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e76:	4864      	ldr	r0, [pc, #400]	; (8005008 <HAL_RTC_Init+0x1c8>)
 8004e78:	f009 fcec 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e84:	d304      	bcc.n	8004e90 <HAL_RTC_Init+0x50>
 8004e86:	f240 1101 	movw	r1, #257	; 0x101
 8004e8a:	485f      	ldr	r0, [pc, #380]	; (8005008 <HAL_RTC_Init+0x1c8>)
 8004e8c:	f009 fce2 	bl	800e854 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RTC_Init+0x80>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_RTC_Init+0x80>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eaa:	d009      	beq.n	8004ec0 <HAL_RTC_Init+0x80>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004eb4:	d004      	beq.n	8004ec0 <HAL_RTC_Init+0x80>
 8004eb6:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004eba:	4853      	ldr	r0, [pc, #332]	; (8005008 <HAL_RTC_Init+0x1c8>)
 8004ebc:	f009 fcca 	bl	800e854 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <HAL_RTC_Init+0x9c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed0:	d004      	beq.n	8004edc <HAL_RTC_Init+0x9c>
 8004ed2:	f240 1103 	movw	r1, #259	; 0x103
 8004ed6:	484c      	ldr	r0, [pc, #304]	; (8005008 <HAL_RTC_Init+0x1c8>)
 8004ed8:	f009 fcbc 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <HAL_RTC_Init+0xb8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eec:	d004      	beq.n	8004ef8 <HAL_RTC_Init+0xb8>
 8004eee:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004ef2:	4845      	ldr	r0, [pc, #276]	; (8005008 <HAL_RTC_Init+0x1c8>)
 8004ef4:	f009 fcae 	bl	800e854 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	7f5b      	ldrb	r3, [r3, #29]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d105      	bne.n	8004f0e <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f009 fd49 	bl	800e9a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	22ca      	movs	r2, #202	; 0xca
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2253      	movs	r2, #83	; 0x53
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 ff01 	bl	8005d2c <RTC_EnterInitMode>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	22ff      	movs	r2, #255	; 0xff
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2204      	movs	r2, #4
 8004f3c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e05e      	b.n	8005000 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6899      	ldr	r1, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68d2      	ldr	r2, [r2, #12]
 8004f7c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6919      	ldr	r1, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	041a      	lsls	r2, r3, #16
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fa0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10e      	bne.n	8004fce <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fe93 	bl	8005cdc <HAL_RTC_WaitForSynchro>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	22ff      	movs	r2, #255	; 0xff
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e018      	b.n	8005000 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	22ff      	movs	r2, #255	; 0xff
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
  }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08011ad0 	.word	0x08011ad0

0800500c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <HAL_RTC_SetTime+0x26>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d004      	beq.n	8005032 <HAL_RTC_SetTime+0x26>
 8005028:	f240 21da 	movw	r1, #730	; 0x2da
 800502c:	48a4      	ldr	r0, [pc, #656]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 800502e:	f009 fc11 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800503a:	d00d      	beq.n	8005058 <HAL_RTC_SetTime+0x4c>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d008      	beq.n	8005058 <HAL_RTC_SetTime+0x4c>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <HAL_RTC_SetTime+0x4c>
 800504e:	f240 21db 	movw	r1, #731	; 0x2db
 8005052:	489b      	ldr	r0, [pc, #620]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 8005054:	f009 fbfe 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d009      	beq.n	8005074 <HAL_RTC_SetTime+0x68>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005068:	d004      	beq.n	8005074 <HAL_RTC_SetTime+0x68>
 800506a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800506e:	4894      	ldr	r0, [pc, #592]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 8005070:	f009 fbf0 	bl	800e854 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	7f1b      	ldrb	r3, [r3, #28]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_RTC_SetTime+0x74>
 800507c:	2302      	movs	r3, #2
 800507e:	e12c      	b.n	80052da <HAL_RTC_SetTime+0x2ce>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2202      	movs	r2, #2
 800508a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d15c      	bne.n	800514c <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01a      	beq.n	80050d6 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_RTC_SetTime+0xa4>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d904      	bls.n	80050ba <HAL_RTC_SetTime+0xae>
 80050b0:	f240 21e7 	movw	r1, #743	; 0x2e7
 80050b4:	4882      	ldr	r0, [pc, #520]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 80050b6:	f009 fbcd 	bl	800e854 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	78db      	ldrb	r3, [r3, #3]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d015      	beq.n	80050ee <HAL_RTC_SetTime+0xe2>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	78db      	ldrb	r3, [r3, #3]
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	d011      	beq.n	80050ee <HAL_RTC_SetTime+0xe2>
 80050ca:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80050ce:	487c      	ldr	r0, [pc, #496]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 80050d0:	f009 fbc0 	bl	800e854 <assert_failed>
 80050d4:	e00b      	b.n	80050ee <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2200      	movs	r2, #0
 80050da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b17      	cmp	r3, #23
 80050e2:	d904      	bls.n	80050ee <HAL_RTC_SetTime+0xe2>
 80050e4:	f240 21ed 	movw	r1, #749	; 0x2ed
 80050e8:	4875      	ldr	r0, [pc, #468]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 80050ea:	f009 fbb3 	bl	800e854 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	2b3b      	cmp	r3, #59	; 0x3b
 80050f4:	d904      	bls.n	8005100 <HAL_RTC_SetTime+0xf4>
 80050f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80050fa:	4871      	ldr	r0, [pc, #452]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 80050fc:	f009 fbaa 	bl	800e854 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	789b      	ldrb	r3, [r3, #2]
 8005104:	2b3b      	cmp	r3, #59	; 0x3b
 8005106:	d904      	bls.n	8005112 <HAL_RTC_SetTime+0x106>
 8005108:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800510c:	486c      	ldr	r0, [pc, #432]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 800510e:	f009 fba1 	bl	800e854 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fe34 	bl	8005d84 <RTC_ByteToBcd2>
 800511c:	4603      	mov	r3, r0
 800511e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fe2d 	bl	8005d84 <RTC_ByteToBcd2>
 800512a:	4603      	mov	r3, r0
 800512c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800512e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	789b      	ldrb	r3, [r3, #2]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fe25 	bl	8005d84 <RTC_ByteToBcd2>
 800513a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800513c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e062      	b.n	8005212 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d022      	beq.n	80051a0 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fe2e 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <HAL_RTC_SetTime+0x16e>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fe26 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005174:	4603      	mov	r3, r0
 8005176:	2b0c      	cmp	r3, #12
 8005178:	d904      	bls.n	8005184 <HAL_RTC_SetTime+0x178>
 800517a:	f240 21fb 	movw	r1, #763	; 0x2fb
 800517e:	4850      	ldr	r0, [pc, #320]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 8005180:	f009 fb68 	bl	800e854 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	78db      	ldrb	r3, [r3, #3]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d019      	beq.n	80051c0 <HAL_RTC_SetTime+0x1b4>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	78db      	ldrb	r3, [r3, #3]
 8005190:	2b40      	cmp	r3, #64	; 0x40
 8005192:	d015      	beq.n	80051c0 <HAL_RTC_SetTime+0x1b4>
 8005194:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8005198:	4849      	ldr	r0, [pc, #292]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 800519a:	f009 fb5b 	bl	800e854 <assert_failed>
 800519e:	e00f      	b.n	80051c0 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2200      	movs	r2, #0
 80051a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fe08 	bl	8005dc0 <RTC_Bcd2ToByte>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b17      	cmp	r3, #23
 80051b4:	d904      	bls.n	80051c0 <HAL_RTC_SetTime+0x1b4>
 80051b6:	f240 3101 	movw	r1, #769	; 0x301
 80051ba:	4841      	ldr	r0, [pc, #260]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 80051bc:	f009 fb4a 	bl	800e854 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fdfb 	bl	8005dc0 <RTC_Bcd2ToByte>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b3b      	cmp	r3, #59	; 0x3b
 80051ce:	d904      	bls.n	80051da <HAL_RTC_SetTime+0x1ce>
 80051d0:	f240 3103 	movw	r1, #771	; 0x303
 80051d4:	483a      	ldr	r0, [pc, #232]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 80051d6:	f009 fb3d 	bl	800e854 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	789b      	ldrb	r3, [r3, #2]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fdee 	bl	8005dc0 <RTC_Bcd2ToByte>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b3b      	cmp	r3, #59	; 0x3b
 80051e8:	d904      	bls.n	80051f4 <HAL_RTC_SetTime+0x1e8>
 80051ea:	f44f 7141 	mov.w	r1, #772	; 0x304
 80051ee:	4834      	ldr	r0, [pc, #208]	; (80052c0 <HAL_RTC_SetTime+0x2b4>)
 80051f0:	f009 fb30 	bl	800e854 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005200:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005206:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	78db      	ldrb	r3, [r3, #3]
 800520c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	22ca      	movs	r2, #202	; 0xca
 8005218:	625a      	str	r2, [r3, #36]	; 0x24
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2253      	movs	r2, #83	; 0x53
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fd82 	bl	8005d2c <RTC_EnterInitMode>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	22ff      	movs	r2, #255	; 0xff
 8005234:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2204      	movs	r2, #4
 800523a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e049      	b.n	80052da <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005250:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005254:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005264:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6899      	ldr	r1, [r3, #8]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800528c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d113      	bne.n	80052c4 <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fd1d 	bl	8005cdc <HAL_RTC_WaitForSynchro>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00d      	beq.n	80052c4 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	22ff      	movs	r2, #255	; 0xff
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2204      	movs	r2, #4
 80052b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e00c      	b.n	80052da <HAL_RTC_SetTime+0x2ce>
 80052c0:	08011ad0 	.word	0x08011ad0
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	22ff      	movs	r2, #255	; 0xff
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80052d8:	2300      	movs	r3, #0
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd90      	pop	{r4, r7, pc}
 80052e2:	bf00      	nop

080052e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <HAL_RTC_SetDate+0x26>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d004      	beq.n	800530a <HAL_RTC_SetDate+0x26>
 8005300:	f240 318a 	movw	r1, #906	; 0x38a
 8005304:	488e      	ldr	r0, [pc, #568]	; (8005540 <HAL_RTC_SetDate+0x25c>)
 8005306:	f009 faa5 	bl	800e854 <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	7f1b      	ldrb	r3, [r3, #28]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_RTC_SetDate+0x32>
 8005312:	2302      	movs	r3, #2
 8005314:	e10f      	b.n	8005536 <HAL_RTC_SetDate+0x252>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2202      	movs	r2, #2
 8005320:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10e      	bne.n	8005346 <HAL_RTC_SetDate+0x62>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	f023 0310 	bic.w	r3, r3, #16
 800533c:	b2db      	uxtb	r3, r3
 800533e:	330a      	adds	r3, #10
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d01c      	beq.n	8005388 <HAL_RTC_SetDate+0xa4>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d018      	beq.n	8005388 <HAL_RTC_SetDate+0xa4>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d014      	beq.n	8005388 <HAL_RTC_SetDate+0xa4>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b04      	cmp	r3, #4
 8005364:	d010      	beq.n	8005388 <HAL_RTC_SetDate+0xa4>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b05      	cmp	r3, #5
 800536c:	d00c      	beq.n	8005388 <HAL_RTC_SetDate+0xa4>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b06      	cmp	r3, #6
 8005374:	d008      	beq.n	8005388 <HAL_RTC_SetDate+0xa4>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b07      	cmp	r3, #7
 800537c:	d004      	beq.n	8005388 <HAL_RTC_SetDate+0xa4>
 800537e:	f240 3196 	movw	r1, #918	; 0x396
 8005382:	486f      	ldr	r0, [pc, #444]	; (8005540 <HAL_RTC_SetDate+0x25c>)
 8005384:	f009 fa66 	bl	800e854 <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d13f      	bne.n	800540e <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	78db      	ldrb	r3, [r3, #3]
 8005392:	2b63      	cmp	r3, #99	; 0x63
 8005394:	d904      	bls.n	80053a0 <HAL_RTC_SetDate+0xbc>
 8005396:	f240 319a 	movw	r1, #922	; 0x39a
 800539a:	4869      	ldr	r0, [pc, #420]	; (8005540 <HAL_RTC_SetDate+0x25c>)
 800539c:	f009 fa5a 	bl	800e854 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_RTC_SetDate+0xcc>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b0c      	cmp	r3, #12
 80053ae:	d904      	bls.n	80053ba <HAL_RTC_SetDate+0xd6>
 80053b0:	f240 319b 	movw	r1, #923	; 0x39b
 80053b4:	4862      	ldr	r0, [pc, #392]	; (8005540 <HAL_RTC_SetDate+0x25c>)
 80053b6:	f009 fa4d 	bl	800e854 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	789b      	ldrb	r3, [r3, #2]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_RTC_SetDate+0xe6>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	789b      	ldrb	r3, [r3, #2]
 80053c6:	2b1f      	cmp	r3, #31
 80053c8:	d904      	bls.n	80053d4 <HAL_RTC_SetDate+0xf0>
 80053ca:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80053ce:	485c      	ldr	r0, [pc, #368]	; (8005540 <HAL_RTC_SetDate+0x25c>)
 80053d0:	f009 fa40 	bl	800e854 <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	78db      	ldrb	r3, [r3, #3]
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fcd3 	bl	8005d84 <RTC_ByteToBcd2>
 80053de:	4603      	mov	r3, r0
 80053e0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fccc 	bl	8005d84 <RTC_ByteToBcd2>
 80053ec:	4603      	mov	r3, r0
 80053ee:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80053f0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	789b      	ldrb	r3, [r3, #2]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fcc4 	bl	8005d84 <RTC_ByteToBcd2>
 80053fc:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80053fe:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e045      	b.n	800549a <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	78db      	ldrb	r3, [r3, #3]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fcd4 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005418:	4603      	mov	r3, r0
 800541a:	2b63      	cmp	r3, #99	; 0x63
 800541c:	d904      	bls.n	8005428 <HAL_RTC_SetDate+0x144>
 800541e:	f240 31a5 	movw	r1, #933	; 0x3a5
 8005422:	4847      	ldr	r0, [pc, #284]	; (8005540 <HAL_RTC_SetDate+0x25c>)
 8005424:	f009 fa16 	bl	800e854 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fcc7 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <HAL_RTC_SetDate+0x164>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fcbf 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005442:	4603      	mov	r3, r0
 8005444:	2b0c      	cmp	r3, #12
 8005446:	d904      	bls.n	8005452 <HAL_RTC_SetDate+0x16e>
 8005448:	f240 31a6 	movw	r1, #934	; 0x3a6
 800544c:	483c      	ldr	r0, [pc, #240]	; (8005540 <HAL_RTC_SetDate+0x25c>)
 800544e:	f009 fa01 	bl	800e854 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	789b      	ldrb	r3, [r3, #2]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fcb2 	bl	8005dc0 <RTC_Bcd2ToByte>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d007      	beq.n	8005472 <HAL_RTC_SetDate+0x18e>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	789b      	ldrb	r3, [r3, #2]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fcaa 	bl	8005dc0 <RTC_Bcd2ToByte>
 800546c:	4603      	mov	r3, r0
 800546e:	2b1f      	cmp	r3, #31
 8005470:	d904      	bls.n	800547c <HAL_RTC_SetDate+0x198>
 8005472:	f240 31a7 	movw	r1, #935	; 0x3a7
 8005476:	4832      	ldr	r0, [pc, #200]	; (8005540 <HAL_RTC_SetDate+0x25c>)
 8005478:	f009 f9ec 	bl	800e854 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	78db      	ldrb	r3, [r3, #3]
 8005480:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005488:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800548e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	22ca      	movs	r2, #202	; 0xca
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2253      	movs	r2, #83	; 0x53
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fc3e 	bl	8005d2c <RTC_EnterInitMode>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	22ff      	movs	r2, #255	; 0xff
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2204      	movs	r2, #4
 80054c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e033      	b.n	8005536 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054ec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d111      	bne.n	8005520 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fbed 	bl	8005cdc <HAL_RTC_WaitForSynchro>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	22ff      	movs	r2, #255	; 0xff
 800550e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2204      	movs	r2, #4
 8005514:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e00a      	b.n	8005536 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	22ff      	movs	r2, #255	; 0xff
 8005526:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005534:	2300      	movs	r3, #0
  }
}
 8005536:	4618      	mov	r0, r3
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	bd90      	pop	{r4, r7, pc}
 800553e:	bf00      	nop
 8005540:	08011ad0 	.word	0x08011ad0

08005544 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	2300      	movs	r3, #0
 8005556:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005558:	4baa      	ldr	r3, [pc, #680]	; (8005804 <HAL_RTC_SetAlarm_IT+0x2c0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4aaa      	ldr	r2, [pc, #680]	; (8005808 <HAL_RTC_SetAlarm_IT+0x2c4>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	0adb      	lsrs	r3, r3, #11
 8005564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005568:	fb02 f303 	mul.w	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <HAL_RTC_SetAlarm_IT+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d004      	beq.n	8005584 <HAL_RTC_SetAlarm_IT+0x40>
 800557a:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800557e:	48a3      	ldr	r0, [pc, #652]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005580:	f009 f968 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558c:	d009      	beq.n	80055a2 <HAL_RTC_SetAlarm_IT+0x5e>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005596:	d004      	beq.n	80055a2 <HAL_RTC_SetAlarm_IT+0x5e>
 8005598:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 800559c:	489b      	ldr	r0, [pc, #620]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 800559e:	f009 f959 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <HAL_RTC_SetAlarm_IT+0x74>
 80055ae:	f240 41e9 	movw	r1, #1257	; 0x4e9
 80055b2:	4896      	ldr	r0, [pc, #600]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80055b4:	f009 f94e 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <HAL_RTC_SetAlarm_IT+0x90>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c8:	d004      	beq.n	80055d4 <HAL_RTC_SetAlarm_IT+0x90>
 80055ca:	f240 41ea 	movw	r1, #1258	; 0x4ea
 80055ce:	488f      	ldr	r0, [pc, #572]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80055d0:	f009 f940 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055dc:	d304      	bcc.n	80055e8 <HAL_RTC_SetAlarm_IT+0xa4>
 80055de:	f240 41eb 	movw	r1, #1259	; 0x4eb
 80055e2:	488a      	ldr	r0, [pc, #552]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80055e4:	f009 f936 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d04f      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055f8:	d04a      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005602:	d045      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800560c:	d040      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005616:	d03b      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005620:	d036      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800562a:	d031      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8005634:	d02c      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800563e:	d027      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8005648:	d022      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005652:	d01d      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800565c:	d018      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005666:	d013      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8005670:	d00e      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800567a:	d009      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005684:	d004      	beq.n	8005690 <HAL_RTC_SetAlarm_IT+0x14c>
 8005686:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800568a:	4860      	ldr	r0, [pc, #384]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 800568c:	f009 f8e2 	bl	800e854 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	7f1b      	ldrb	r3, [r3, #28]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_RTC_SetAlarm_IT+0x158>
 8005698:	2302      	movs	r3, #2
 800569a:	e237      	b.n	8005b0c <HAL_RTC_SetAlarm_IT+0x5c8>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2202      	movs	r2, #2
 80056a6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f040 80b0 	bne.w	8005810 <HAL_RTC_SetAlarm_IT+0x2cc>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01a      	beq.n	80056f4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_RTC_SetAlarm_IT+0x18a>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b0c      	cmp	r3, #12
 80056cc:	d904      	bls.n	80056d8 <HAL_RTC_SetAlarm_IT+0x194>
 80056ce:	f240 41f7 	movw	r1, #1271	; 0x4f7
 80056d2:	484e      	ldr	r0, [pc, #312]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80056d4:	f009 f8be 	bl	800e854 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	78db      	ldrb	r3, [r3, #3]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <HAL_RTC_SetAlarm_IT+0x1c8>
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d011      	beq.n	800570c <HAL_RTC_SetAlarm_IT+0x1c8>
 80056e8:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 80056ec:	4847      	ldr	r0, [pc, #284]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80056ee:	f009 f8b1 	bl	800e854 <assert_failed>
 80056f2:	e00b      	b.n	800570c <HAL_RTC_SetAlarm_IT+0x1c8>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b17      	cmp	r3, #23
 8005700:	d904      	bls.n	800570c <HAL_RTC_SetAlarm_IT+0x1c8>
 8005702:	f240 41fd 	movw	r1, #1277	; 0x4fd
 8005706:	4841      	ldr	r0, [pc, #260]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005708:	f009 f8a4 	bl	800e854 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b3b      	cmp	r3, #59	; 0x3b
 8005712:	d904      	bls.n	800571e <HAL_RTC_SetAlarm_IT+0x1da>
 8005714:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005718:	483c      	ldr	r0, [pc, #240]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 800571a:	f009 f89b 	bl	800e854 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	789b      	ldrb	r3, [r3, #2]
 8005722:	2b3b      	cmp	r3, #59	; 0x3b
 8005724:	d904      	bls.n	8005730 <HAL_RTC_SetAlarm_IT+0x1ec>
 8005726:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800572a:	4838      	ldr	r0, [pc, #224]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 800572c:	f009 f892 	bl	800e854 <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10f      	bne.n	8005758 <HAL_RTC_SetAlarm_IT+0x214>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <HAL_RTC_SetAlarm_IT+0x208>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005748:	2b1f      	cmp	r3, #31
 800574a:	d92d      	bls.n	80057a8 <HAL_RTC_SetAlarm_IT+0x264>
 800574c:	f240 5104 	movw	r1, #1284	; 0x504
 8005750:	482e      	ldr	r0, [pc, #184]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005752:	f009 f87f 	bl	800e854 <assert_failed>
 8005756:	e027      	b.n	80057a8 <HAL_RTC_SetAlarm_IT+0x264>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d022      	beq.n	80057a8 <HAL_RTC_SetAlarm_IT+0x264>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d01d      	beq.n	80057a8 <HAL_RTC_SetAlarm_IT+0x264>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d018      	beq.n	80057a8 <HAL_RTC_SetAlarm_IT+0x264>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d013      	beq.n	80057a8 <HAL_RTC_SetAlarm_IT+0x264>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005786:	2b05      	cmp	r3, #5
 8005788:	d00e      	beq.n	80057a8 <HAL_RTC_SetAlarm_IT+0x264>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005790:	2b06      	cmp	r3, #6
 8005792:	d009      	beq.n	80057a8 <HAL_RTC_SetAlarm_IT+0x264>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800579a:	2b07      	cmp	r3, #7
 800579c:	d004      	beq.n	80057a8 <HAL_RTC_SetAlarm_IT+0x264>
 800579e:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 80057a2:	481a      	ldr	r0, [pc, #104]	; (800580c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057a4:	f009 f856 	bl	800e854 <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fae9 	bl	8005d84 <RTC_ByteToBcd2>
 80057b2:	4603      	mov	r3, r0
 80057b4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fae2 	bl	8005d84 <RTC_ByteToBcd2>
 80057c0:	4603      	mov	r3, r0
 80057c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057c4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	789b      	ldrb	r3, [r3, #2]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fada 	bl	8005d84 <RTC_ByteToBcd2>
 80057d0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80057d2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	78db      	ldrb	r3, [r3, #3]
 80057da:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80057dc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 facc 	bl	8005d84 <RTC_ByteToBcd2>
 80057ec:	4603      	mov	r3, r0
 80057ee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80057f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80057f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057fe:	4313      	orrs	r3, r2
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	e0d3      	b.n	80059ac <HAL_RTC_SetAlarm_IT+0x468>
 8005804:	20000090 	.word	0x20000090
 8005808:	10624dd3 	.word	0x10624dd3
 800580c:	08011ad0 	.word	0x08011ad0
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d022      	beq.n	8005864 <HAL_RTC_SetAlarm_IT+0x320>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 facc 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <HAL_RTC_SetAlarm_IT+0x2fa>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fac4 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005838:	4603      	mov	r3, r0
 800583a:	2b0c      	cmp	r3, #12
 800583c:	d904      	bls.n	8005848 <HAL_RTC_SetAlarm_IT+0x304>
 800583e:	f240 5116 	movw	r1, #1302	; 0x516
 8005842:	4896      	ldr	r0, [pc, #600]	; (8005a9c <HAL_RTC_SetAlarm_IT+0x558>)
 8005844:	f009 f806 	bl	800e854 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	78db      	ldrb	r3, [r3, #3]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d019      	beq.n	8005884 <HAL_RTC_SetAlarm_IT+0x340>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	78db      	ldrb	r3, [r3, #3]
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d015      	beq.n	8005884 <HAL_RTC_SetAlarm_IT+0x340>
 8005858:	f240 5117 	movw	r1, #1303	; 0x517
 800585c:	488f      	ldr	r0, [pc, #572]	; (8005a9c <HAL_RTC_SetAlarm_IT+0x558>)
 800585e:	f008 fff9 	bl	800e854 <assert_failed>
 8005862:	e00f      	b.n	8005884 <HAL_RTC_SetAlarm_IT+0x340>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2200      	movs	r2, #0
 8005868:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 faa6 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005874:	4603      	mov	r3, r0
 8005876:	2b17      	cmp	r3, #23
 8005878:	d904      	bls.n	8005884 <HAL_RTC_SetAlarm_IT+0x340>
 800587a:	f240 511c 	movw	r1, #1308	; 0x51c
 800587e:	4887      	ldr	r0, [pc, #540]	; (8005a9c <HAL_RTC_SetAlarm_IT+0x558>)
 8005880:	f008 ffe8 	bl	800e854 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	785b      	ldrb	r3, [r3, #1]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fa99 	bl	8005dc0 <RTC_Bcd2ToByte>
 800588e:	4603      	mov	r3, r0
 8005890:	2b3b      	cmp	r3, #59	; 0x3b
 8005892:	d904      	bls.n	800589e <HAL_RTC_SetAlarm_IT+0x35a>
 8005894:	f240 511f 	movw	r1, #1311	; 0x51f
 8005898:	4880      	ldr	r0, [pc, #512]	; (8005a9c <HAL_RTC_SetAlarm_IT+0x558>)
 800589a:	f008 ffdb 	bl	800e854 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	789b      	ldrb	r3, [r3, #2]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fa8c 	bl	8005dc0 <RTC_Bcd2ToByte>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b3b      	cmp	r3, #59	; 0x3b
 80058ac:	d904      	bls.n	80058b8 <HAL_RTC_SetAlarm_IT+0x374>
 80058ae:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80058b2:	487a      	ldr	r0, [pc, #488]	; (8005a9c <HAL_RTC_SetAlarm_IT+0x558>)
 80058b4:	f008 ffce 	bl	800e854 <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d117      	bne.n	80058f0 <HAL_RTC_SetAlarm_IT+0x3ac>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fa7a 	bl	8005dc0 <RTC_Bcd2ToByte>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_RTC_SetAlarm_IT+0x3a0>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fa71 	bl	8005dc0 <RTC_Bcd2ToByte>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b1f      	cmp	r3, #31
 80058e2:	d949      	bls.n	8005978 <HAL_RTC_SetAlarm_IT+0x434>
 80058e4:	f240 5124 	movw	r1, #1316	; 0x524
 80058e8:	486c      	ldr	r0, [pc, #432]	; (8005a9c <HAL_RTC_SetAlarm_IT+0x558>)
 80058ea:	f008 ffb3 	bl	800e854 <assert_failed>
 80058ee:	e043      	b.n	8005978 <HAL_RTC_SetAlarm_IT+0x434>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fa62 	bl	8005dc0 <RTC_Bcd2ToByte>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d03a      	beq.n	8005978 <HAL_RTC_SetAlarm_IT+0x434>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fa59 	bl	8005dc0 <RTC_Bcd2ToByte>
 800590e:	4603      	mov	r3, r0
 8005910:	2b02      	cmp	r3, #2
 8005912:	d031      	beq.n	8005978 <HAL_RTC_SetAlarm_IT+0x434>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fa50 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005920:	4603      	mov	r3, r0
 8005922:	2b03      	cmp	r3, #3
 8005924:	d028      	beq.n	8005978 <HAL_RTC_SetAlarm_IT+0x434>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fa47 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005932:	4603      	mov	r3, r0
 8005934:	2b04      	cmp	r3, #4
 8005936:	d01f      	beq.n	8005978 <HAL_RTC_SetAlarm_IT+0x434>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fa3e 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005944:	4603      	mov	r3, r0
 8005946:	2b05      	cmp	r3, #5
 8005948:	d016      	beq.n	8005978 <HAL_RTC_SetAlarm_IT+0x434>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fa35 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005956:	4603      	mov	r3, r0
 8005958:	2b06      	cmp	r3, #6
 800595a:	d00d      	beq.n	8005978 <HAL_RTC_SetAlarm_IT+0x434>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fa2c 	bl	8005dc0 <RTC_Bcd2ToByte>
 8005968:	4603      	mov	r3, r0
 800596a:	2b07      	cmp	r3, #7
 800596c:	d004      	beq.n	8005978 <HAL_RTC_SetAlarm_IT+0x434>
 800596e:	f44f 61a5 	mov.w	r1, #1320	; 0x528
 8005972:	484a      	ldr	r0, [pc, #296]	; (8005a9c <HAL_RTC_SetAlarm_IT+0x558>)
 8005974:	f008 ff6e 	bl	800e854 <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005984:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800598a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	78db      	ldrb	r3, [r3, #3]
 8005990:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005992:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800599a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800599c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80059a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	22ca      	movs	r2, #202	; 0xca
 80059be:	625a      	str	r2, [r3, #36]	; 0x24
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2253      	movs	r2, #83	; 0x53
 80059c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d0:	d141      	bne.n	8005a56 <HAL_RTC_SetAlarm_IT+0x512>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059e0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80059f2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	1e5a      	subs	r2, r3, #1
 80059f8:	617a      	str	r2, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <HAL_RTC_SetAlarm_IT+0x4d2>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	22ff      	movs	r2, #255	; 0xff
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2203      	movs	r2, #3
 8005a0a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e07a      	b.n	8005b0c <HAL_RTC_SetAlarm_IT+0x5c8>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0e7      	beq.n	80059f4 <HAL_RTC_SetAlarm_IT+0x4b0>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a42:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	e043      	b.n	8005ade <HAL_RTC_SetAlarm_IT+0x59a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a64:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005a76:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1e5a      	subs	r2, r3, #1
 8005a7c:	617a      	str	r2, [r7, #20]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10e      	bne.n	8005aa0 <HAL_RTC_SetAlarm_IT+0x55c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	22ff      	movs	r2, #255	; 0xff
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e038      	b.n	8005b0c <HAL_RTC_SetAlarm_IT+0x5c8>
 8005a9a:	bf00      	nop
 8005a9c:	08011ad0 	.word	0x08011ad0
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0e4      	beq.n	8005a78 <HAL_RTC_SetAlarm_IT+0x534>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005acc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005adc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005ade:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	4a09      	ldr	r2, [pc, #36]	; (8005b14 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3724      	adds	r7, #36	; 0x24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd90      	pop	{r4, r7, pc}
 8005b14:	40013c00 	.word	0x40013c00

08005b18 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2c:	d008      	beq.n	8005b40 <HAL_RTC_DeactivateAlarm+0x28>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b34:	d004      	beq.n	8005b40 <HAL_RTC_DeactivateAlarm+0x28>
 8005b36:	f240 519d 	movw	r1, #1437	; 0x59d
 8005b3a:	4844      	ldr	r0, [pc, #272]	; (8005c4c <HAL_RTC_DeactivateAlarm+0x134>)
 8005b3c:	f008 fe8a 	bl	800e854 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	7f1b      	ldrb	r3, [r3, #28]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_RTC_DeactivateAlarm+0x34>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e07b      	b.n	8005c44 <HAL_RTC_DeactivateAlarm+0x12c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	22ca      	movs	r2, #202	; 0xca
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2253      	movs	r2, #83	; 0x53
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6e:	d12f      	bne.n	8005bd0 <HAL_RTC_DeactivateAlarm+0xb8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b7e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b8e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b90:	f7fb f9c8 	bl	8000f24 <HAL_GetTick>
 8005b94:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005b96:	e013      	b.n	8005bc0 <HAL_RTC_DeactivateAlarm+0xa8>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b98:	f7fb f9c4 	bl	8000f24 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba6:	d90b      	bls.n	8005bc0 <HAL_RTC_DeactivateAlarm+0xa8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	22ff      	movs	r2, #255	; 0xff
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e041      	b.n	8005c44 <HAL_RTC_DeactivateAlarm+0x12c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0e4      	beq.n	8005b98 <HAL_RTC_DeactivateAlarm+0x80>
 8005bce:	e02e      	b.n	8005c2e <HAL_RTC_DeactivateAlarm+0x116>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bde:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bee:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bf0:	f7fb f998 	bl	8000f24 <HAL_GetTick>
 8005bf4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005bf6:	e013      	b.n	8005c20 <HAL_RTC_DeactivateAlarm+0x108>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bf8:	f7fb f994 	bl	8000f24 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c06:	d90b      	bls.n	8005c20 <HAL_RTC_DeactivateAlarm+0x108>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	22ff      	movs	r2, #255	; 0xff
 8005c0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2203      	movs	r2, #3
 8005c14:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e011      	b.n	8005c44 <HAL_RTC_DeactivateAlarm+0x12c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0e4      	beq.n	8005bf8 <HAL_RTC_DeactivateAlarm+0xe0>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	22ff      	movs	r2, #255	; 0xff
 8005c34:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	08011ad0 	.word	0x08011ad0

08005c50 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d012      	beq.n	8005c8c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f009 fa0d 	bl	800f094 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005c8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d012      	beq.n	8005cc0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fa0d 	bl	80060c8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005cbe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005cc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cc6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	775a      	strb	r2, [r3, #29]
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40013c00 	.word	0x40013c00

08005cdc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cf6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf8:	f7fb f914 	bl	8000f24 <HAL_GetTick>
 8005cfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005cfe:	e009      	b.n	8005d14 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d00:	f7fb f910 	bl	8000f24 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d0e:	d901      	bls.n	8005d14 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e007      	b.n	8005d24 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0ee      	beq.n	8005d00 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d119      	bne.n	8005d7a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d50:	f7fb f8e8 	bl	8000f24 <HAL_GetTick>
 8005d54:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d56:	e009      	b.n	8005d6c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d58:	f7fb f8e4 	bl	8000f24 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d66:	d901      	bls.n	8005d6c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e007      	b.n	8005d7c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0ee      	beq.n	8005d58 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005d92:	e005      	b.n	8005da0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	3b0a      	subs	r3, #10
 8005d9e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	2b09      	cmp	r3, #9
 8005da4:	d8f6      	bhi.n	8005d94 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	79fb      	ldrb	r3, [r7, #7]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	b2db      	uxtb	r3, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	091b      	lsrs	r3, r3, #4
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	4413      	add	r3, r2
 8005dee:	b2db      	uxtb	r3, r3
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d013      	beq.n	8005e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d010      	beq.n	8005e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d00d      	beq.n	8005e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d007      	beq.n	8005e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b06      	cmp	r3, #6
 8005e2a:	d004      	beq.n	8005e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e2c:	f240 314d 	movw	r1, #845	; 0x34d
 8005e30:	485e      	ldr	r0, [pc, #376]	; (8005fac <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 8005e32:	f008 fd0f 	bl	800e854 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d304      	bcc.n	8005e48 <HAL_RTCEx_SetWakeUpTimer_IT+0x4c>
 8005e3e:	f240 314e 	movw	r1, #846	; 0x34e
 8005e42:	485a      	ldr	r0, [pc, #360]	; (8005fac <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 8005e44:	f008 fd06 	bl	800e854 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	7f1b      	ldrb	r3, [r3, #28]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e0a6      	b.n	8005fa2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	22ca      	movs	r2, #202	; 0xca
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2253      	movs	r2, #83	; 0x53
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d022      	beq.n	8005ec4 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005e7e:	4b4c      	ldr	r3, [pc, #304]	; (8005fb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a4c      	ldr	r2, [pc, #304]	; (8005fb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 8005e84:	fba2 2303 	umull	r2, r3, r2, r3
 8005e88:	0adb      	lsrs	r3, r3, #11
 8005e8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	1e5a      	subs	r2, r3, #1
 8005e98:	617a      	str	r2, [r7, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10b      	bne.n	8005eb6 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	22ff      	movs	r2, #255	; 0xff
 8005ea4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e075      	b.n	8005fa2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e7      	bne.n	8005e94 <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005ed4:	4b36      	ldr	r3, [pc, #216]	; (8005fb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a36      	ldr	r2, [pc, #216]	; (8005fb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	0adb      	lsrs	r3, r3, #11
 8005ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ee4:	fb02 f303 	mul.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	1e5a      	subs	r2, r3, #1
 8005eee:	617a      	str	r2, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x110>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	22ff      	movs	r2, #255	; 0xff
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2203      	movs	r2, #3
 8005f00:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e04a      	b.n	8005fa2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0e7      	beq.n	8005eea <HAL_RTCEx_SetWakeUpTimer_IT+0xee>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0207 	bic.w	r2, r2, #7
 8005f30:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6899      	ldr	r1, [r3, #8]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005f42:	4b1d      	ldr	r3, [pc, #116]	; (8005fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1c      	ldr	r2, [pc, #112]	; (8005fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f4c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8005f4e:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f58:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005f6a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f7a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f8a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	22ff      	movs	r2, #255	; 0xff
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	08011b08 	.word	0x08011b08
 8005fb0:	20000090 	.word	0x20000090
 8005fb4:	10624dd3 	.word	0x10624dd3
 8005fb8:	40013c00 	.word	0x40013c00

08005fbc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	7f1b      	ldrb	r3, [r3, #28]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e047      	b.n	8006064 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	22ca      	movs	r2, #202	; 0xca
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2253      	movs	r2, #83	; 0x53
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffe:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800600e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006010:	f7fa ff88 	bl	8000f24 <HAL_GetTick>
 8006014:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006016:	e013      	b.n	8006040 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006018:	f7fa ff84 	bl	8000f24 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006026:	d90b      	bls.n	8006040 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	22ff      	movs	r2, #255	; 0xff
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2203      	movs	r2, #3
 8006034:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e011      	b.n	8006064 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0e4      	beq.n	8006018 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	22ff      	movs	r2, #255	; 0xff
 8006054:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00b      	beq.n	800609a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f816 	bl	80060b4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006098:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800609c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80060a0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	775a      	strb	r2, [r3, #29]
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40013c00 	.word	0x40013c00

080060b4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e083      	b.n	80061f6 <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a43      	ldr	r2, [pc, #268]	; (8006200 <HAL_TIM_Base_Init+0x124>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d027      	beq.n	8006148 <HAL_TIM_Base_Init+0x6c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d022      	beq.n	8006148 <HAL_TIM_Base_Init+0x6c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3f      	ldr	r2, [pc, #252]	; (8006204 <HAL_TIM_Base_Init+0x128>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d01d      	beq.n	8006148 <HAL_TIM_Base_Init+0x6c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3d      	ldr	r2, [pc, #244]	; (8006208 <HAL_TIM_Base_Init+0x12c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_TIM_Base_Init+0x6c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3c      	ldr	r2, [pc, #240]	; (800620c <HAL_TIM_Base_Init+0x130>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_TIM_Base_Init+0x6c>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3a      	ldr	r2, [pc, #232]	; (8006210 <HAL_TIM_Base_Init+0x134>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_TIM_Base_Init+0x6c>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a39      	ldr	r2, [pc, #228]	; (8006214 <HAL_TIM_Base_Init+0x138>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_TIM_Base_Init+0x6c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a37      	ldr	r2, [pc, #220]	; (8006218 <HAL_TIM_Base_Init+0x13c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_TIM_Base_Init+0x6c>
 800613e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8006142:	4836      	ldr	r0, [pc, #216]	; (800621c <HAL_TIM_Base_Init+0x140>)
 8006144:	f008 fb86 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d014      	beq.n	800617a <HAL_TIM_Base_Init+0x9e>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b10      	cmp	r3, #16
 8006156:	d010      	beq.n	800617a <HAL_TIM_Base_Init+0x9e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b20      	cmp	r3, #32
 800615e:	d00c      	beq.n	800617a <HAL_TIM_Base_Init+0x9e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d008      	beq.n	800617a <HAL_TIM_Base_Init+0x9e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b60      	cmp	r3, #96	; 0x60
 800616e:	d004      	beq.n	800617a <HAL_TIM_Base_Init+0x9e>
 8006170:	f240 1113 	movw	r1, #275	; 0x113
 8006174:	4829      	ldr	r0, [pc, #164]	; (800621c <HAL_TIM_Base_Init+0x140>)
 8006176:	f008 fb6d 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00e      	beq.n	80061a0 <HAL_TIM_Base_Init+0xc4>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800618a:	d009      	beq.n	80061a0 <HAL_TIM_Base_Init+0xc4>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006194:	d004      	beq.n	80061a0 <HAL_TIM_Base_Init+0xc4>
 8006196:	f44f 718a 	mov.w	r1, #276	; 0x114
 800619a:	4820      	ldr	r0, [pc, #128]	; (800621c <HAL_TIM_Base_Init+0x140>)
 800619c:	f008 fb5a 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d008      	beq.n	80061ba <HAL_TIM_Base_Init+0xde>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d004      	beq.n	80061ba <HAL_TIM_Base_Init+0xde>
 80061b0:	f240 1115 	movw	r1, #277	; 0x115
 80061b4:	4819      	ldr	r0, [pc, #100]	; (800621c <HAL_TIM_Base_Init+0x140>)
 80061b6:	f008 fb4d 	bl	800e854 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f009 f808 	bl	800f1e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4610      	mov	r0, r2
 80061e8:	f001 f87c 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40014000 	.word	0x40014000
 8006214:	40014400 	.word	0x40014400
 8006218:	40014800 	.word	0x40014800
 800621c:	08011b44 	.word	0x08011b44

08006220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d027      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0x62>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623a:	d022      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0x62>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a20      	ldr	r2, [pc, #128]	; (80062c4 <HAL_TIM_Base_Start_IT+0xa4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01d      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0x62>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1f      	ldr	r2, [pc, #124]	; (80062c8 <HAL_TIM_Base_Start_IT+0xa8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d018      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0x62>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <HAL_TIM_Base_Start_IT+0xac>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0x62>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1c      	ldr	r2, [pc, #112]	; (80062d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0x62>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1a      	ldr	r2, [pc, #104]	; (80062d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0x62>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a19      	ldr	r2, [pc, #100]	; (80062d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0x62>
 8006278:	f240 11b9 	movw	r1, #441	; 0x1b9
 800627c:	4817      	ldr	r0, [pc, #92]	; (80062dc <HAL_TIM_Base_Start_IT+0xbc>)
 800627e:	f008 fae9 	bl	800e854 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b06      	cmp	r3, #6
 80062a2:	d007      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x94>
  {
    __HAL_TIM_ENABLE(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40000800 	.word	0x40000800
 80062cc:	40000c00 	.word	0x40000c00
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40014400 	.word	0x40014400
 80062d8:	40014800 	.word	0x40014800
 80062dc:	08011b44 	.word	0x08011b44

080062e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e083      	b.n	80063fa <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a43      	ldr	r2, [pc, #268]	; (8006404 <HAL_TIM_PWM_Init+0x124>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d027      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006304:	d022      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a3f      	ldr	r2, [pc, #252]	; (8006408 <HAL_TIM_PWM_Init+0x128>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d01d      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a3d      	ldr	r2, [pc, #244]	; (800640c <HAL_TIM_PWM_Init+0x12c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d018      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a3c      	ldr	r2, [pc, #240]	; (8006410 <HAL_TIM_PWM_Init+0x130>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d013      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a3a      	ldr	r2, [pc, #232]	; (8006414 <HAL_TIM_PWM_Init+0x134>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00e      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a39      	ldr	r2, [pc, #228]	; (8006418 <HAL_TIM_PWM_Init+0x138>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d009      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a37      	ldr	r2, [pc, #220]	; (800641c <HAL_TIM_PWM_Init+0x13c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d004      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006342:	f240 419b 	movw	r1, #1179	; 0x49b
 8006346:	4836      	ldr	r0, [pc, #216]	; (8006420 <HAL_TIM_PWM_Init+0x140>)
 8006348:	f008 fa84 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d014      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b10      	cmp	r3, #16
 800635a:	d010      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b20      	cmp	r3, #32
 8006362:	d00c      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d008      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b60      	cmp	r3, #96	; 0x60
 8006372:	d004      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 8006374:	f240 419c 	movw	r1, #1180	; 0x49c
 8006378:	4829      	ldr	r0, [pc, #164]	; (8006420 <HAL_TIM_PWM_Init+0x140>)
 800637a:	f008 fa6b 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00e      	beq.n	80063a4 <HAL_TIM_PWM_Init+0xc4>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638e:	d009      	beq.n	80063a4 <HAL_TIM_PWM_Init+0xc4>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006398:	d004      	beq.n	80063a4 <HAL_TIM_PWM_Init+0xc4>
 800639a:	f240 419d 	movw	r1, #1181	; 0x49d
 800639e:	4820      	ldr	r0, [pc, #128]	; (8006420 <HAL_TIM_PWM_Init+0x140>)
 80063a0:	f008 fa58 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_TIM_PWM_Init+0xde>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	2b80      	cmp	r3, #128	; 0x80
 80063b2:	d004      	beq.n	80063be <HAL_TIM_PWM_Init+0xde>
 80063b4:	f240 419e 	movw	r1, #1182	; 0x49e
 80063b8:	4819      	ldr	r0, [pc, #100]	; (8006420 <HAL_TIM_PWM_Init+0x140>)
 80063ba:	f008 fa4b 	bl	800e854 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f826 	bl	8006424 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f000 ff7a 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	40010000 	.word	0x40010000
 8006408:	40000400 	.word	0x40000400
 800640c:	40000800 	.word	0x40000800
 8006410:	40000c00 	.word	0x40000c00
 8006414:	40014000 	.word	0x40014000
 8006418:	40014400 	.word	0x40014400
 800641c:	40014800 	.word	0x40014800
 8006420:	08011b44 	.word	0x08011b44

08006424 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a4e      	ldr	r2, [pc, #312]	; (8006580 <HAL_TIM_PWM_Start+0x148>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d10b      	bne.n	8006464 <HAL_TIM_PWM_Start+0x2c>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d06c      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d069      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b08      	cmp	r3, #8
 800645c:	d066      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b0c      	cmp	r3, #12
 8006462:	d063      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646c:	d10b      	bne.n	8006486 <HAL_TIM_PWM_Start+0x4e>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d05b      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b04      	cmp	r3, #4
 8006478:	d058      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d055      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d052      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a3e      	ldr	r2, [pc, #248]	; (8006584 <HAL_TIM_PWM_Start+0x14c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10b      	bne.n	80064a8 <HAL_TIM_PWM_Start+0x70>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d04a      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d047      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d044      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d041      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a36      	ldr	r2, [pc, #216]	; (8006588 <HAL_TIM_PWM_Start+0x150>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10b      	bne.n	80064ca <HAL_TIM_PWM_Start+0x92>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d039      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d036      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d033      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b0c      	cmp	r3, #12
 80064c8:	d030      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2f      	ldr	r2, [pc, #188]	; (800658c <HAL_TIM_PWM_Start+0x154>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d10b      	bne.n	80064ec <HAL_TIM_PWM_Start+0xb4>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d028      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d025      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d022      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b0c      	cmp	r3, #12
 80064ea:	d01f      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a27      	ldr	r2, [pc, #156]	; (8006590 <HAL_TIM_PWM_Start+0x158>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d105      	bne.n	8006502 <HAL_TIM_PWM_Start+0xca>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d014      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a23      	ldr	r2, [pc, #140]	; (8006594 <HAL_TIM_PWM_Start+0x15c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d102      	bne.n	8006512 <HAL_TIM_PWM_Start+0xda>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00c      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a20      	ldr	r2, [pc, #128]	; (8006598 <HAL_TIM_PWM_Start+0x160>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d102      	bne.n	8006522 <HAL_TIM_PWM_Start+0xea>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <HAL_TIM_PWM_Start+0xf4>
 8006522:	f240 5113 	movw	r1, #1299	; 0x513
 8006526:	481d      	ldr	r0, [pc, #116]	; (800659c <HAL_TIM_PWM_Start+0x164>)
 8006528:	f008 f994 	bl	800e854 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2201      	movs	r2, #1
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f001 fa05 	bl	8007944 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a10      	ldr	r2, [pc, #64]	; (8006580 <HAL_TIM_PWM_Start+0x148>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d107      	bne.n	8006554 <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006552:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b06      	cmp	r3, #6
 8006564:	d007      	beq.n	8006576 <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0201 	orr.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40010000 	.word	0x40010000
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40000c00 	.word	0x40000c00
 8006590:	40014000 	.word	0x40014000
 8006594:	40014400 	.word	0x40014400
 8006598:	40014800 	.word	0x40014800
 800659c:	08011b44 	.word	0x08011b44

080065a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5c      	ldr	r2, [pc, #368]	; (8006720 <HAL_TIM_PWM_Stop+0x180>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d10b      	bne.n	80065cc <HAL_TIM_PWM_Stop+0x2c>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d06c      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d069      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d066      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b0c      	cmp	r3, #12
 80065ca:	d063      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d4:	d10b      	bne.n	80065ee <HAL_TIM_PWM_Stop+0x4e>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d05b      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d058      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d055      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b0c      	cmp	r3, #12
 80065ec:	d052      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a4c      	ldr	r2, [pc, #304]	; (8006724 <HAL_TIM_PWM_Stop+0x184>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10b      	bne.n	8006610 <HAL_TIM_PWM_Stop+0x70>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d04a      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d047      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b08      	cmp	r3, #8
 8006608:	d044      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b0c      	cmp	r3, #12
 800660e:	d041      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a44      	ldr	r2, [pc, #272]	; (8006728 <HAL_TIM_PWM_Stop+0x188>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d10b      	bne.n	8006632 <HAL_TIM_PWM_Stop+0x92>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d039      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b04      	cmp	r3, #4
 8006624:	d036      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d033      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b0c      	cmp	r3, #12
 8006630:	d030      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a3d      	ldr	r2, [pc, #244]	; (800672c <HAL_TIM_PWM_Stop+0x18c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d10b      	bne.n	8006654 <HAL_TIM_PWM_Stop+0xb4>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d028      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b04      	cmp	r3, #4
 8006646:	d025      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b08      	cmp	r3, #8
 800664c:	d022      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b0c      	cmp	r3, #12
 8006652:	d01f      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a35      	ldr	r2, [pc, #212]	; (8006730 <HAL_TIM_PWM_Stop+0x190>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d105      	bne.n	800666a <HAL_TIM_PWM_Stop+0xca>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d017      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b04      	cmp	r3, #4
 8006668:	d014      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a31      	ldr	r2, [pc, #196]	; (8006734 <HAL_TIM_PWM_Stop+0x194>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d102      	bne.n	800667a <HAL_TIM_PWM_Stop+0xda>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2e      	ldr	r2, [pc, #184]	; (8006738 <HAL_TIM_PWM_Stop+0x198>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d102      	bne.n	800668a <HAL_TIM_PWM_Stop+0xea>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <HAL_TIM_PWM_Stop+0xf4>
 800668a:	f240 5137 	movw	r1, #1335	; 0x537
 800668e:	482b      	ldr	r0, [pc, #172]	; (800673c <HAL_TIM_PWM_Stop+0x19c>)
 8006690:	f008 f8e0 	bl	800e854 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2200      	movs	r2, #0
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f951 	bl	8007944 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_TIM_PWM_Stop+0x180>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d117      	bne.n	80066dc <HAL_TIM_PWM_Stop+0x13c>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6a1a      	ldr	r2, [r3, #32]
 80066b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10f      	bne.n	80066dc <HAL_TIM_PWM_Stop+0x13c>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	f240 4344 	movw	r3, #1092	; 0x444
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d107      	bne.n	80066dc <HAL_TIM_PWM_Stop+0x13c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10f      	bne.n	800670c <HAL_TIM_PWM_Stop+0x16c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a1a      	ldr	r2, [r3, #32]
 80066f2:	f240 4344 	movw	r3, #1092	; 0x444
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d107      	bne.n	800670c <HAL_TIM_PWM_Stop+0x16c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0201 	bic.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40010000 	.word	0x40010000
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800
 800672c:	40000c00 	.word	0x40000c00
 8006730:	40014000 	.word	0x40014000
 8006734:	40014400 	.word	0x40014400
 8006738:	40014800 	.word	0x40014800
 800673c:	08011b44 	.word	0x08011b44

08006740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b02      	cmp	r3, #2
 8006754:	d122      	bne.n	800679c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b02      	cmp	r3, #2
 8006762:	d11b      	bne.n	800679c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0202 	mvn.w	r2, #2
 800676c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fd90 	bl	80072a8 <HAL_TIM_IC_CaptureCallback>
 8006788:	e005      	b.n	8006796 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fd82 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fd93 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d122      	bne.n	80067f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d11b      	bne.n	80067f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0204 	mvn.w	r2, #4
 80067c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fd66 	bl	80072a8 <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fd58 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fd69 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d122      	bne.n	8006844 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b08      	cmp	r3, #8
 800680a:	d11b      	bne.n	8006844 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0208 	mvn.w	r2, #8
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2204      	movs	r2, #4
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fd3c 	bl	80072a8 <HAL_TIM_IC_CaptureCallback>
 8006830:	e005      	b.n	800683e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fd2e 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fd3f 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0310 	and.w	r3, r3, #16
 800684e:	2b10      	cmp	r3, #16
 8006850:	d122      	bne.n	8006898 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	2b10      	cmp	r3, #16
 800685e:	d11b      	bne.n	8006898 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0210 	mvn.w	r2, #16
 8006868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2208      	movs	r2, #8
 800686e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fd12 	bl	80072a8 <HAL_TIM_IC_CaptureCallback>
 8006884:	e005      	b.n	8006892 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fd04 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fd15 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d10e      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d107      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0201 	mvn.w	r2, #1
 80068bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f007 ffae 	bl	800e820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b80      	cmp	r3, #128	; 0x80
 80068d0:	d10e      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068dc:	2b80      	cmp	r3, #128	; 0x80
 80068de:	d107      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f95e 	bl	8007bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b40      	cmp	r3, #64	; 0x40
 80068fc:	d10e      	bne.n	800691c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	d107      	bne.n	800691c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fcda 	bl	80072d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b20      	cmp	r3, #32
 8006928:	d10e      	bne.n	8006948 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b20      	cmp	r3, #32
 8006936:	d107      	bne.n	8006948 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0220 	mvn.w	r2, #32
 8006940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 f928 	bl	8007b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d010      	beq.n	8006984 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b04      	cmp	r3, #4
 8006966:	d00d      	beq.n	8006984 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b08      	cmp	r3, #8
 800696c:	d00a      	beq.n	8006984 <HAL_TIM_PWM_ConfigChannel+0x34>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b0c      	cmp	r3, #12
 8006972:	d007      	beq.n	8006984 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b3c      	cmp	r3, #60	; 0x3c
 8006978:	d004      	beq.n	8006984 <HAL_TIM_PWM_ConfigChannel+0x34>
 800697a:	f640 51ec 	movw	r1, #3564	; 0xdec
 800697e:	4895      	ldr	r0, [pc, #596]	; (8006bd4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006980:	f007 ff68 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b60      	cmp	r3, #96	; 0x60
 800698a:	d008      	beq.n	800699e <HAL_TIM_PWM_ConfigChannel+0x4e>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b70      	cmp	r3, #112	; 0x70
 8006992:	d004      	beq.n	800699e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006994:	f640 51ed 	movw	r1, #3565	; 0xded
 8006998:	488e      	ldr	r0, [pc, #568]	; (8006bd4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800699a:	f007 ff5b 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d008      	beq.n	80069b8 <HAL_TIM_PWM_ConfigChannel+0x68>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d004      	beq.n	80069b8 <HAL_TIM_PWM_ConfigChannel+0x68>
 80069ae:	f640 51ee 	movw	r1, #3566	; 0xdee
 80069b2:	4888      	ldr	r0, [pc, #544]	; (8006bd4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80069b4:	f007 ff4e 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d004      	beq.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80069c8:	f640 51ef 	movw	r1, #3567	; 0xdef
 80069cc:	4881      	ldr	r0, [pc, #516]	; (8006bd4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80069ce:	f007 ff41 	bl	800e854 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x90>
 80069dc:	2302      	movs	r3, #2
 80069de:	e152      	b.n	8006c86 <HAL_TIM_PWM_ConfigChannel+0x336>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b0c      	cmp	r3, #12
 80069f4:	f200 813d 	bhi.w	8006c72 <HAL_TIM_PWM_ConfigChannel+0x322>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006c73 	.word	0x08006c73
 8006a08:	08006c73 	.word	0x08006c73
 8006a0c:	08006c73 	.word	0x08006c73
 8006a10:	08006acf 	.word	0x08006acf
 8006a14:	08006c73 	.word	0x08006c73
 8006a18:	08006c73 	.word	0x08006c73
 8006a1c:	08006c73 	.word	0x08006c73
 8006a20:	08006b57 	.word	0x08006b57
 8006a24:	08006c73 	.word	0x08006c73
 8006a28:	08006c73 	.word	0x08006c73
 8006a2c:	08006c73 	.word	0x08006c73
 8006a30:	08006bf5 	.word	0x08006bf5
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a67      	ldr	r2, [pc, #412]	; (8006bd8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d027      	beq.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a46:	d022      	beq.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a63      	ldr	r2, [pc, #396]	; (8006bdc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d01d      	beq.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a62      	ldr	r2, [pc, #392]	; (8006be0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d018      	beq.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a60      	ldr	r2, [pc, #384]	; (8006be4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a5f      	ldr	r2, [pc, #380]	; (8006be8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00e      	beq.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a5d      	ldr	r2, [pc, #372]	; (8006bec <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d009      	beq.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a5c      	ldr	r2, [pc, #368]	; (8006bf0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d004      	beq.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a84:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8006a88:	4852      	ldr	r0, [pc, #328]	; (8006bd4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006a8a:	f007 fee3 	bl	800e854 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fca5 	bl	80073e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699a      	ldr	r2, [r3, #24]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0208 	orr.w	r2, r2, #8
 8006aa8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0204 	bic.w	r2, r2, #4
 8006ab8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6999      	ldr	r1, [r3, #24]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	619a      	str	r2, [r3, #24]
      break;
 8006acc:	e0d2      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a41      	ldr	r2, [pc, #260]	; (8006bd8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d01d      	beq.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae0:	d018      	beq.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a3d      	ldr	r2, [pc, #244]	; (8006bdc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a3b      	ldr	r2, [pc, #236]	; (8006be0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00e      	beq.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a3a      	ldr	r2, [pc, #232]	; (8006be4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d009      	beq.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a38      	ldr	r2, [pc, #224]	; (8006be8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006b0a:	f640 610c 	movw	r1, #3596	; 0xe0c
 8006b0e:	4831      	ldr	r0, [pc, #196]	; (8006bd4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006b10:	f007 fea0 	bl	800e854 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fcf2 	bl	8007504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6999      	ldr	r1, [r3, #24]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	021a      	lsls	r2, r3, #8
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	619a      	str	r2, [r3, #24]
      break;
 8006b54:	e08e      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d018      	beq.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b68:	d013      	beq.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00e      	beq.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d009      	beq.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d004      	beq.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b88:	f640 611d 	movw	r1, #3613	; 0xe1d
 8006b8c:	4811      	ldr	r0, [pc, #68]	; (8006bd4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006b8e:	f007 fe61 	bl	800e854 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fd47 	bl	800762c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69da      	ldr	r2, [r3, #28]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0208 	orr.w	r2, r2, #8
 8006bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0204 	bic.w	r2, r2, #4
 8006bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69d9      	ldr	r1, [r3, #28]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	61da      	str	r2, [r3, #28]
      break;
 8006bd0:	e050      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x324>
 8006bd2:	bf00      	nop
 8006bd4:	08011b44 	.word	0x08011b44
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40000800 	.word	0x40000800
 8006be4:	40000c00 	.word	0x40000c00
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a25      	ldr	r2, [pc, #148]	; (8006c90 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d018      	beq.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c06:	d013      	beq.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a21      	ldr	r2, [pc, #132]	; (8006c94 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00e      	beq.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a20      	ldr	r2, [pc, #128]	; (8006c98 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d009      	beq.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1e      	ldr	r2, [pc, #120]	; (8006c9c <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006c26:	f640 612e 	movw	r1, #3630	; 0xe2e
 8006c2a:	481d      	ldr	r0, [pc, #116]	; (8006ca0 <HAL_TIM_PWM_ConfigChannel+0x350>)
 8006c2c:	f007 fe12 	bl	800e854 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fd8c 	bl	8007754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69da      	ldr	r2, [r3, #28]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69da      	ldr	r2, [r3, #28]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69d9      	ldr	r1, [r3, #28]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	61da      	str	r2, [r3, #28]
      break;
 8006c70:	e000      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 8006c72:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	08011b44 	.word	0x08011b44

08006ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIM_ConfigClockSource+0x18>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e2db      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x5d0>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd4:	d029      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cde:	d024      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d020      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d01c      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d018      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b30      	cmp	r3, #48	; 0x30
 8006cfe:	d014      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	d010      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b50      	cmp	r3, #80	; 0x50
 8006d0e:	d00c      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b60      	cmp	r3, #96	; 0x60
 8006d16:	d008      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b70      	cmp	r3, #112	; 0x70
 8006d1e:	d004      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x86>
 8006d20:	f241 118b 	movw	r1, #4491	; 0x118b
 8006d24:	4873      	ldr	r0, [pc, #460]	; (8006ef4 <HAL_TIM_ConfigClockSource+0x250>)
 8006d26:	f007 fd95 	bl	800e854 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d40:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b40      	cmp	r3, #64	; 0x40
 8006d50:	f000 8204 	beq.w	800715c <HAL_TIM_ConfigClockSource+0x4b8>
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d80f      	bhi.n	8006d78 <HAL_TIM_ConfigClockSource+0xd4>
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	f000 8255 	beq.w	8007208 <HAL_TIM_ConfigClockSource+0x564>
 8006d5e:	2b10      	cmp	r3, #16
 8006d60:	d803      	bhi.n	8006d6a <HAL_TIM_ConfigClockSource+0xc6>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 8250 	beq.w	8007208 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d68:	e27b      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	f000 824c 	beq.w	8007208 <HAL_TIM_ConfigClockSource+0x564>
 8006d70:	2b30      	cmp	r3, #48	; 0x30
 8006d72:	f000 8249 	beq.w	8007208 <HAL_TIM_ConfigClockSource+0x564>
      break;
 8006d76:	e274      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006d78:	2b70      	cmp	r3, #112	; 0x70
 8006d7a:	d046      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x166>
 8006d7c:	2b70      	cmp	r3, #112	; 0x70
 8006d7e:	d806      	bhi.n	8006d8e <HAL_TIM_ConfigClockSource+0xea>
 8006d80:	2b50      	cmp	r3, #80	; 0x50
 8006d82:	f000 8133 	beq.w	8006fec <HAL_TIM_ConfigClockSource+0x348>
 8006d86:	2b60      	cmp	r3, #96	; 0x60
 8006d88:	f000 8186 	beq.w	8007098 <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8006d8c:	e269      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d92:	d004      	beq.n	8006d9e <HAL_TIM_ConfigClockSource+0xfa>
 8006d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d98:	f000 80bc 	beq.w	8006f14 <HAL_TIM_ConfigClockSource+0x270>
      break;
 8006d9c:	e261      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a55      	ldr	r2, [pc, #340]	; (8006ef8 <HAL_TIM_ConfigClockSource+0x254>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	f000 825b 	beq.w	8007260 <HAL_TIM_ConfigClockSource+0x5bc>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db2:	f000 8255 	beq.w	8007260 <HAL_TIM_ConfigClockSource+0x5bc>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a50      	ldr	r2, [pc, #320]	; (8006efc <HAL_TIM_ConfigClockSource+0x258>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	f000 824f 	beq.w	8007260 <HAL_TIM_ConfigClockSource+0x5bc>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a4e      	ldr	r2, [pc, #312]	; (8006f00 <HAL_TIM_ConfigClockSource+0x25c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	f000 8249 	beq.w	8007260 <HAL_TIM_ConfigClockSource+0x5bc>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a4c      	ldr	r2, [pc, #304]	; (8006f04 <HAL_TIM_ConfigClockSource+0x260>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	f000 8243 	beq.w	8007260 <HAL_TIM_ConfigClockSource+0x5bc>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a4a      	ldr	r2, [pc, #296]	; (8006f08 <HAL_TIM_ConfigClockSource+0x264>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	f000 823d 	beq.w	8007260 <HAL_TIM_ConfigClockSource+0x5bc>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a48      	ldr	r2, [pc, #288]	; (8006f0c <HAL_TIM_ConfigClockSource+0x268>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	f000 8237 	beq.w	8007260 <HAL_TIM_ConfigClockSource+0x5bc>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a46      	ldr	r2, [pc, #280]	; (8006f10 <HAL_TIM_ConfigClockSource+0x26c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	f000 8231 	beq.w	8007260 <HAL_TIM_ConfigClockSource+0x5bc>
 8006dfe:	f241 1197 	movw	r1, #4503	; 0x1197
 8006e02:	483c      	ldr	r0, [pc, #240]	; (8006ef4 <HAL_TIM_ConfigClockSource+0x250>)
 8006e04:	f007 fd26 	bl	800e854 <assert_failed>
      break;
 8006e08:	e22a      	b.n	8007260 <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a3a      	ldr	r2, [pc, #232]	; (8006ef8 <HAL_TIM_ConfigClockSource+0x254>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d01d      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1c:	d018      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a36      	ldr	r2, [pc, #216]	; (8006efc <HAL_TIM_ConfigClockSource+0x258>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a34      	ldr	r2, [pc, #208]	; (8006f00 <HAL_TIM_ConfigClockSource+0x25c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00e      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a33      	ldr	r2, [pc, #204]	; (8006f04 <HAL_TIM_ConfigClockSource+0x260>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d009      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a31      	ldr	r2, [pc, #196]	; (8006f08 <HAL_TIM_ConfigClockSource+0x264>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d004      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e46:	f241 119e 	movw	r1, #4510	; 0x119e
 8006e4a:	482a      	ldr	r0, [pc, #168]	; (8006ef4 <HAL_TIM_ConfigClockSource+0x250>)
 8006e4c:	f007 fd02 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d013      	beq.n	8006e80 <HAL_TIM_ConfigClockSource+0x1dc>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e60:	d00e      	beq.n	8006e80 <HAL_TIM_ConfigClockSource+0x1dc>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6a:	d009      	beq.n	8006e80 <HAL_TIM_ConfigClockSource+0x1dc>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e74:	d004      	beq.n	8006e80 <HAL_TIM_ConfigClockSource+0x1dc>
 8006e76:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8006e7a:	481e      	ldr	r0, [pc, #120]	; (8006ef4 <HAL_TIM_ConfigClockSource+0x250>)
 8006e7c:	f007 fcea 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e88:	d014      	beq.n	8006eb4 <HAL_TIM_ConfigClockSource+0x210>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <HAL_TIM_ConfigClockSource+0x210>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00c      	beq.n	8006eb4 <HAL_TIM_ConfigClockSource+0x210>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d008      	beq.n	8006eb4 <HAL_TIM_ConfigClockSource+0x210>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2b0a      	cmp	r3, #10
 8006ea8:	d004      	beq.n	8006eb4 <HAL_TIM_ConfigClockSource+0x210>
 8006eaa:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8006eae:	4811      	ldr	r0, [pc, #68]	; (8006ef4 <HAL_TIM_ConfigClockSource+0x250>)
 8006eb0:	f007 fcd0 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b0f      	cmp	r3, #15
 8006eba:	d904      	bls.n	8006ec6 <HAL_TIM_ConfigClockSource+0x222>
 8006ebc:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8006ec0:	480c      	ldr	r0, [pc, #48]	; (8006ef4 <HAL_TIM_ConfigClockSource+0x250>)
 8006ec2:	f007 fcc7 	bl	800e854 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6899      	ldr	r1, [r3, #8]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f000 fd15 	bl	8007904 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ee8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	609a      	str	r2, [r3, #8]
      break;
 8006ef2:	e1b6      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
 8006ef4:	08011b44 	.word	0x08011b44
 8006ef8:	40010000 	.word	0x40010000
 8006efc:	40000400 	.word	0x40000400
 8006f00:	40000800 	.word	0x40000800
 8006f04:	40000c00 	.word	0x40000c00
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40014400 	.word	0x40014400
 8006f10:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a8a      	ldr	r2, [pc, #552]	; (8007144 <HAL_TIM_ConfigClockSource+0x4a0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d018      	beq.n	8006f50 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f26:	d013      	beq.n	8006f50 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a86      	ldr	r2, [pc, #536]	; (8007148 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00e      	beq.n	8006f50 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a85      	ldr	r2, [pc, #532]	; (800714c <HAL_TIM_ConfigClockSource+0x4a8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d009      	beq.n	8006f50 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a83      	ldr	r2, [pc, #524]	; (8007150 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d004      	beq.n	8006f50 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f46:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8006f4a:	4882      	ldr	r0, [pc, #520]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f4c:	f007 fc82 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d013      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x2dc>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f60:	d00e      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x2dc>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f6a:	d009      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x2dc>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f74:	d004      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x2dc>
 8006f76:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8006f7a:	4876      	ldr	r0, [pc, #472]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f7c:	f007 fc6a 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f88:	d014      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x310>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d010      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x310>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00c      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x310>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d008      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x310>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b0a      	cmp	r3, #10
 8006fa8:	d004      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x310>
 8006faa:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8006fae:	4869      	ldr	r0, [pc, #420]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006fb0:	f007 fc50 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b0f      	cmp	r3, #15
 8006fba:	d904      	bls.n	8006fc6 <HAL_TIM_ConfigClockSource+0x322>
 8006fbc:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8006fc0:	4864      	ldr	r0, [pc, #400]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006fc2:	f007 fc47 	bl	800e854 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6899      	ldr	r1, [r3, #8]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f000 fc95 	bl	8007904 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fe8:	609a      	str	r2, [r3, #8]
      break;
 8006fea:	e13a      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a54      	ldr	r2, [pc, #336]	; (8007144 <HAL_TIM_ConfigClockSource+0x4a0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x38e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffe:	d018      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x38e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a50      	ldr	r2, [pc, #320]	; (8007148 <HAL_TIM_ConfigClockSource+0x4a4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x38e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a4f      	ldr	r2, [pc, #316]	; (800714c <HAL_TIM_ConfigClockSource+0x4a8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x38e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a4d      	ldr	r2, [pc, #308]	; (8007150 <HAL_TIM_ConfigClockSource+0x4ac>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x38e>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a4d      	ldr	r2, [pc, #308]	; (8007158 <HAL_TIM_ConfigClockSource+0x4b4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x38e>
 8007028:	f241 11ca 	movw	r1, #4554	; 0x11ca
 800702c:	4849      	ldr	r0, [pc, #292]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 800702e:	f007 fc11 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703a:	d014      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x3c2>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d010      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x3c2>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00c      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x3c2>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d008      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x3c2>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b0a      	cmp	r3, #10
 800705a:	d004      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x3c2>
 800705c:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8007060:	483c      	ldr	r0, [pc, #240]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007062:	f007 fbf7 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	2b0f      	cmp	r3, #15
 800706c:	d904      	bls.n	8007078 <HAL_TIM_ConfigClockSource+0x3d4>
 800706e:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8007072:	4838      	ldr	r0, [pc, #224]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007074:	f007 fbee 	bl	800e854 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	6859      	ldr	r1, [r3, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	461a      	mov	r2, r3
 8007086:	f000 fbc3 	bl	8007810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2150      	movs	r1, #80	; 0x50
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fc1c 	bl	80078ce <TIM_ITRx_SetConfig>
      break;
 8007096:	e0e4      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a29      	ldr	r2, [pc, #164]	; (8007144 <HAL_TIM_ConfigClockSource+0x4a0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d01d      	beq.n	80070de <HAL_TIM_ConfigClockSource+0x43a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070aa:	d018      	beq.n	80070de <HAL_TIM_ConfigClockSource+0x43a>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a25      	ldr	r2, [pc, #148]	; (8007148 <HAL_TIM_ConfigClockSource+0x4a4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d013      	beq.n	80070de <HAL_TIM_ConfigClockSource+0x43a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a24      	ldr	r2, [pc, #144]	; (800714c <HAL_TIM_ConfigClockSource+0x4a8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00e      	beq.n	80070de <HAL_TIM_ConfigClockSource+0x43a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a22      	ldr	r2, [pc, #136]	; (8007150 <HAL_TIM_ConfigClockSource+0x4ac>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d009      	beq.n	80070de <HAL_TIM_ConfigClockSource+0x43a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a22      	ldr	r2, [pc, #136]	; (8007158 <HAL_TIM_ConfigClockSource+0x4b4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d004      	beq.n	80070de <HAL_TIM_ConfigClockSource+0x43a>
 80070d4:	f241 11da 	movw	r1, #4570	; 0x11da
 80070d8:	481e      	ldr	r0, [pc, #120]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 80070da:	f007 fbbb 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e6:	d014      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x46e>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d010      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x46e>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00c      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x46e>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d008      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x46e>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b0a      	cmp	r3, #10
 8007106:	d004      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x46e>
 8007108:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800710c:	4811      	ldr	r0, [pc, #68]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 800710e:	f007 fba1 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	2b0f      	cmp	r3, #15
 8007118:	d904      	bls.n	8007124 <HAL_TIM_ConfigClockSource+0x480>
 800711a:	f241 11de 	movw	r1, #4574	; 0x11de
 800711e:	480d      	ldr	r0, [pc, #52]	; (8007154 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007120:	f007 fb98 	bl	800e854 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6859      	ldr	r1, [r3, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	461a      	mov	r2, r3
 8007132:	f000 fb9c 	bl	800786e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2160      	movs	r1, #96	; 0x60
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fbc6 	bl	80078ce <TIM_ITRx_SetConfig>
      break;
 8007142:	e08e      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	08011b44 	.word	0x08011b44
 8007158:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a46      	ldr	r2, [pc, #280]	; (800727c <HAL_TIM_ConfigClockSource+0x5d8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d01d      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x4fe>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716e:	d018      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x4fe>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a42      	ldr	r2, [pc, #264]	; (8007280 <HAL_TIM_ConfigClockSource+0x5dc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d013      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x4fe>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a41      	ldr	r2, [pc, #260]	; (8007284 <HAL_TIM_ConfigClockSource+0x5e0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00e      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x4fe>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a3f      	ldr	r2, [pc, #252]	; (8007288 <HAL_TIM_ConfigClockSource+0x5e4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d009      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x4fe>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a3e      	ldr	r2, [pc, #248]	; (800728c <HAL_TIM_ConfigClockSource+0x5e8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d004      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x4fe>
 8007198:	f241 11ea 	movw	r1, #4586	; 0x11ea
 800719c:	483c      	ldr	r0, [pc, #240]	; (8007290 <HAL_TIM_ConfigClockSource+0x5ec>)
 800719e:	f007 fb59 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071aa:	d014      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x532>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d010      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x532>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00c      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x532>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d008      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x532>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2b0a      	cmp	r3, #10
 80071ca:	d004      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x532>
 80071cc:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80071d0:	482f      	ldr	r0, [pc, #188]	; (8007290 <HAL_TIM_ConfigClockSource+0x5ec>)
 80071d2:	f007 fb3f 	bl	800e854 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	2b0f      	cmp	r3, #15
 80071dc:	d904      	bls.n	80071e8 <HAL_TIM_ConfigClockSource+0x544>
 80071de:	f241 11ee 	movw	r1, #4590	; 0x11ee
 80071e2:	482b      	ldr	r0, [pc, #172]	; (8007290 <HAL_TIM_ConfigClockSource+0x5ec>)
 80071e4:	f007 fb36 	bl	800e854 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	6859      	ldr	r1, [r3, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f000 fb0b 	bl	8007810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2140      	movs	r1, #64	; 0x40
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fb64 	bl	80078ce <TIM_ITRx_SetConfig>
      break;
 8007206:	e02c      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1b      	ldr	r2, [pc, #108]	; (800727c <HAL_TIM_ConfigClockSource+0x5d8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01d      	beq.n	800724e <HAL_TIM_ConfigClockSource+0x5aa>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d018      	beq.n	800724e <HAL_TIM_ConfigClockSource+0x5aa>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a17      	ldr	r2, [pc, #92]	; (8007280 <HAL_TIM_ConfigClockSource+0x5dc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_TIM_ConfigClockSource+0x5aa>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a16      	ldr	r2, [pc, #88]	; (8007284 <HAL_TIM_ConfigClockSource+0x5e0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00e      	beq.n	800724e <HAL_TIM_ConfigClockSource+0x5aa>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a14      	ldr	r2, [pc, #80]	; (8007288 <HAL_TIM_ConfigClockSource+0x5e4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d009      	beq.n	800724e <HAL_TIM_ConfigClockSource+0x5aa>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a13      	ldr	r2, [pc, #76]	; (800728c <HAL_TIM_ConfigClockSource+0x5e8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d004      	beq.n	800724e <HAL_TIM_ConfigClockSource+0x5aa>
 8007244:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8007248:	4811      	ldr	r0, [pc, #68]	; (8007290 <HAL_TIM_ConfigClockSource+0x5ec>)
 800724a:	f007 fb03 	bl	800e854 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f000 fb38 	bl	80078ce <TIM_ITRx_SetConfig>
      break;
 800725e:	e000      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x5be>
      break;
 8007260:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40010000 	.word	0x40010000
 8007280:	40000400 	.word	0x40000400
 8007284:	40000800 	.word	0x40000800
 8007288:	40000c00 	.word	0x40000c00
 800728c:	40014000 	.word	0x40014000
 8007290:	08011b44 	.word	0x08011b44

08007294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a34      	ldr	r2, [pc, #208]	; (80073c8 <TIM_Base_SetConfig+0xe4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00f      	beq.n	800731c <TIM_Base_SetConfig+0x38>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007302:	d00b      	beq.n	800731c <TIM_Base_SetConfig+0x38>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a31      	ldr	r2, [pc, #196]	; (80073cc <TIM_Base_SetConfig+0xe8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d007      	beq.n	800731c <TIM_Base_SetConfig+0x38>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a30      	ldr	r2, [pc, #192]	; (80073d0 <TIM_Base_SetConfig+0xec>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_Base_SetConfig+0x38>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a2f      	ldr	r2, [pc, #188]	; (80073d4 <TIM_Base_SetConfig+0xf0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d108      	bne.n	800732e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a25      	ldr	r2, [pc, #148]	; (80073c8 <TIM_Base_SetConfig+0xe4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d01b      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733c:	d017      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a22      	ldr	r2, [pc, #136]	; (80073cc <TIM_Base_SetConfig+0xe8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d013      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <TIM_Base_SetConfig+0xec>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00f      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a20      	ldr	r2, [pc, #128]	; (80073d4 <TIM_Base_SetConfig+0xf0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00b      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <TIM_Base_SetConfig+0xf4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d007      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a1e      	ldr	r2, [pc, #120]	; (80073dc <TIM_Base_SetConfig+0xf8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d003      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a1d      	ldr	r2, [pc, #116]	; (80073e0 <TIM_Base_SetConfig+0xfc>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d108      	bne.n	8007380 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a08      	ldr	r2, [pc, #32]	; (80073c8 <TIM_Base_SetConfig+0xe4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d103      	bne.n	80073b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	615a      	str	r2, [r3, #20]
}
 80073ba:	bf00      	nop
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40010000 	.word	0x40010000
 80073cc:	40000400 	.word	0x40000400
 80073d0:	40000800 	.word	0x40000800
 80073d4:	40000c00 	.word	0x40000c00
 80073d8:	40014000 	.word	0x40014000
 80073dc:	40014400 	.word	0x40014400
 80073e0:	40014800 	.word	0x40014800

080073e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f023 0201 	bic.w	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0303 	bic.w	r3, r3, #3
 800741a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f023 0302 	bic.w	r3, r3, #2
 800742c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a30      	ldr	r2, [pc, #192]	; (80074fc <TIM_OC1_SetConfig+0x118>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d119      	bne.n	8007474 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d008      	beq.n	800745a <TIM_OC1_SetConfig+0x76>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	2b08      	cmp	r3, #8
 800744e:	d004      	beq.n	800745a <TIM_OC1_SetConfig+0x76>
 8007450:	f241 7102 	movw	r1, #5890	; 0x1702
 8007454:	482a      	ldr	r0, [pc, #168]	; (8007500 <TIM_OC1_SetConfig+0x11c>)
 8007456:	f007 f9fd 	bl	800e854 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f023 0308 	bic.w	r3, r3, #8
 8007460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f023 0304 	bic.w	r3, r3, #4
 8007472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a21      	ldr	r2, [pc, #132]	; (80074fc <TIM_OC1_SetConfig+0x118>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d12d      	bne.n	80074d8 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007484:	d008      	beq.n	8007498 <TIM_OC1_SetConfig+0xb4>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d004      	beq.n	8007498 <TIM_OC1_SetConfig+0xb4>
 800748e:	f241 710f 	movw	r1, #5903	; 0x170f
 8007492:	481b      	ldr	r0, [pc, #108]	; (8007500 <TIM_OC1_SetConfig+0x11c>)
 8007494:	f007 f9de 	bl	800e854 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a0:	d008      	beq.n	80074b4 <TIM_OC1_SetConfig+0xd0>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <TIM_OC1_SetConfig+0xd0>
 80074aa:	f241 7110 	movw	r1, #5904	; 0x1710
 80074ae:	4814      	ldr	r0, [pc, #80]	; (8007500 <TIM_OC1_SetConfig+0x11c>)
 80074b0:	f007 f9d0 	bl	800e854 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	621a      	str	r2, [r3, #32]
}
 80074f2:	bf00      	nop
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	40010000 	.word	0x40010000
 8007500:	08011b44 	.word	0x08011b44

08007504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	f023 0210 	bic.w	r2, r3, #16
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800753a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f023 0320 	bic.w	r3, r3, #32
 800754e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	011b      	lsls	r3, r3, #4
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4313      	orrs	r3, r2
 800755a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a31      	ldr	r2, [pc, #196]	; (8007624 <TIM_OC2_SetConfig+0x120>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d11a      	bne.n	800759a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d008      	beq.n	800757e <TIM_OC2_SetConfig+0x7a>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b08      	cmp	r3, #8
 8007572:	d004      	beq.n	800757e <TIM_OC2_SetConfig+0x7a>
 8007574:	f241 714d 	movw	r1, #5965	; 0x174d
 8007578:	482b      	ldr	r0, [pc, #172]	; (8007628 <TIM_OC2_SetConfig+0x124>)
 800757a:	f007 f96b 	bl	800e854 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007598:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a21      	ldr	r2, [pc, #132]	; (8007624 <TIM_OC2_SetConfig+0x120>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d12f      	bne.n	8007602 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075aa:	d008      	beq.n	80075be <TIM_OC2_SetConfig+0xba>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d004      	beq.n	80075be <TIM_OC2_SetConfig+0xba>
 80075b4:	f241 715b 	movw	r1, #5979	; 0x175b
 80075b8:	481b      	ldr	r0, [pc, #108]	; (8007628 <TIM_OC2_SetConfig+0x124>)
 80075ba:	f007 f94b 	bl	800e854 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c6:	d008      	beq.n	80075da <TIM_OC2_SetConfig+0xd6>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <TIM_OC2_SetConfig+0xd6>
 80075d0:	f241 715c 	movw	r1, #5980	; 0x175c
 80075d4:	4814      	ldr	r0, [pc, #80]	; (8007628 <TIM_OC2_SetConfig+0x124>)
 80075d6:	f007 f93d 	bl	800e854 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40010000 	.word	0x40010000
 8007628:	08011b44 	.word	0x08011b44

0800762c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 0303 	bic.w	r3, r3, #3
 8007662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a31      	ldr	r2, [pc, #196]	; (800774c <TIM_OC3_SetConfig+0x120>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d11a      	bne.n	80076c0 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d008      	beq.n	80076a4 <TIM_OC3_SetConfig+0x78>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	2b08      	cmp	r3, #8
 8007698:	d004      	beq.n	80076a4 <TIM_OC3_SetConfig+0x78>
 800769a:	f241 7198 	movw	r1, #6040	; 0x1798
 800769e:	482c      	ldr	r0, [pc, #176]	; (8007750 <TIM_OC3_SetConfig+0x124>)
 80076a0:	f007 f8d8 	bl	800e854 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a22      	ldr	r2, [pc, #136]	; (800774c <TIM_OC3_SetConfig+0x120>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d12f      	bne.n	8007728 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d0:	d008      	beq.n	80076e4 <TIM_OC3_SetConfig+0xb8>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <TIM_OC3_SetConfig+0xb8>
 80076da:	f241 71a5 	movw	r1, #6053	; 0x17a5
 80076de:	481c      	ldr	r0, [pc, #112]	; (8007750 <TIM_OC3_SetConfig+0x124>)
 80076e0:	f007 f8b8 	bl	800e854 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ec:	d008      	beq.n	8007700 <TIM_OC3_SetConfig+0xd4>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <TIM_OC3_SetConfig+0xd4>
 80076f6:	f241 71a6 	movw	r1, #6054	; 0x17a6
 80076fa:	4815      	ldr	r0, [pc, #84]	; (8007750 <TIM_OC3_SetConfig+0x124>)
 80076fc:	f007 f8aa 	bl	800e854 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800770e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	621a      	str	r2, [r3, #32]
}
 8007742:	bf00      	nop
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40010000 	.word	0x40010000
 8007750:	08011b44 	.word	0x08011b44

08007754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800778a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4313      	orrs	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800779e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	031b      	lsls	r3, r3, #12
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a16      	ldr	r2, [pc, #88]	; (8007808 <TIM_OC4_SetConfig+0xb4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d117      	bne.n	80077e4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077bc:	d008      	beq.n	80077d0 <TIM_OC4_SetConfig+0x7c>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <TIM_OC4_SetConfig+0x7c>
 80077c6:	f241 71e4 	movw	r1, #6116	; 0x17e4
 80077ca:	4810      	ldr	r0, [pc, #64]	; (800780c <TIM_OC4_SetConfig+0xb8>)
 80077cc:	f007 f842 	bl	800e854 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	019b      	lsls	r3, r3, #6
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	621a      	str	r2, [r3, #32]
}
 80077fe:	bf00      	nop
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	40010000 	.word	0x40010000
 800780c:	08011b44 	.word	0x08011b44

08007810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	f023 0201 	bic.w	r2, r3, #1
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800783a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 030a 	bic.w	r3, r3, #10
 800784c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	621a      	str	r2, [r3, #32]
}
 8007862:	bf00      	nop
 8007864:	371c      	adds	r7, #28
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800786e:	b480      	push	{r7}
 8007870:	b087      	sub	sp, #28
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	f023 0210 	bic.w	r2, r3, #16
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	031b      	lsls	r3, r3, #12
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f043 0307 	orr.w	r3, r3, #7
 80078f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	609a      	str	r2, [r3, #8]
}
 80078f8:	bf00      	nop
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800791e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	021a      	lsls	r2, r3, #8
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	431a      	orrs	r2, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4313      	orrs	r3, r2
 8007930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	609a      	str	r2, [r3, #8]
}
 8007938:	bf00      	nop
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a2a      	ldr	r2, [pc, #168]	; (80079fc <TIM_CCxChannelCmd+0xb8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d020      	beq.n	800799a <TIM_CCxChannelCmd+0x56>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795e:	d01c      	beq.n	800799a <TIM_CCxChannelCmd+0x56>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4a27      	ldr	r2, [pc, #156]	; (8007a00 <TIM_CCxChannelCmd+0xbc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d018      	beq.n	800799a <TIM_CCxChannelCmd+0x56>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4a26      	ldr	r2, [pc, #152]	; (8007a04 <TIM_CCxChannelCmd+0xc0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d014      	beq.n	800799a <TIM_CCxChannelCmd+0x56>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a25      	ldr	r2, [pc, #148]	; (8007a08 <TIM_CCxChannelCmd+0xc4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d010      	beq.n	800799a <TIM_CCxChannelCmd+0x56>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4a24      	ldr	r2, [pc, #144]	; (8007a0c <TIM_CCxChannelCmd+0xc8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00c      	beq.n	800799a <TIM_CCxChannelCmd+0x56>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a23      	ldr	r2, [pc, #140]	; (8007a10 <TIM_CCxChannelCmd+0xcc>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d008      	beq.n	800799a <TIM_CCxChannelCmd+0x56>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a22      	ldr	r2, [pc, #136]	; (8007a14 <TIM_CCxChannelCmd+0xd0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d004      	beq.n	800799a <TIM_CCxChannelCmd+0x56>
 8007990:	f641 11cc 	movw	r1, #6604	; 0x19cc
 8007994:	4820      	ldr	r0, [pc, #128]	; (8007a18 <TIM_CCxChannelCmd+0xd4>)
 8007996:	f006 ff5d 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d010      	beq.n	80079c2 <TIM_CCxChannelCmd+0x7e>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d00d      	beq.n	80079c2 <TIM_CCxChannelCmd+0x7e>
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d00a      	beq.n	80079c2 <TIM_CCxChannelCmd+0x7e>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b0c      	cmp	r3, #12
 80079b0:	d007      	beq.n	80079c2 <TIM_CCxChannelCmd+0x7e>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b3c      	cmp	r3, #60	; 0x3c
 80079b6:	d004      	beq.n	80079c2 <TIM_CCxChannelCmd+0x7e>
 80079b8:	f641 11cd 	movw	r1, #6605	; 0x19cd
 80079bc:	4816      	ldr	r0, [pc, #88]	; (8007a18 <TIM_CCxChannelCmd+0xd4>)
 80079be:	f006 ff49 	bl	800e854 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f003 031f 	and.w	r3, r3, #31
 80079c8:	2201      	movs	r2, #1
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1a      	ldr	r2, [r3, #32]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	43db      	mvns	r3, r3
 80079d8:	401a      	ands	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a1a      	ldr	r2, [r3, #32]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	fa01 f303 	lsl.w	r3, r1, r3
 80079ee:	431a      	orrs	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	621a      	str	r2, [r3, #32]
}
 80079f4:	bf00      	nop
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40014400 	.word	0x40014400
 8007a14:	40014800 	.word	0x40014800
 8007a18:	08011b44 	.word	0x08011b44

08007a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a55      	ldr	r2, [pc, #340]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d018      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d013      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a51      	ldr	r2, [pc, #324]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00e      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a4f      	ldr	r2, [pc, #316]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d009      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a4e      	ldr	r2, [pc, #312]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d004      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a58:	f240 6164 	movw	r1, #1636	; 0x664
 8007a5c:	484c      	ldr	r0, [pc, #304]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007a5e:	f006 fef9 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d020      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b10      	cmp	r3, #16
 8007a70:	d01c      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	d018      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b30      	cmp	r3, #48	; 0x30
 8007a80:	d014      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d010      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b50      	cmp	r3, #80	; 0x50
 8007a90:	d00c      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b60      	cmp	r3, #96	; 0x60
 8007a98:	d008      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b70      	cmp	r3, #112	; 0x70
 8007aa0:	d004      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007aa2:	f240 6165 	movw	r1, #1637	; 0x665
 8007aa6:	483a      	ldr	r0, [pc, #232]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007aa8:	f006 fed4 	bl	800e854 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	2b80      	cmp	r3, #128	; 0x80
 8007ab2:	d008      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007abc:	f240 6166 	movw	r1, #1638	; 0x666
 8007ac0:	4833      	ldr	r0, [pc, #204]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007ac2:	f006 fec7 	bl	800e854 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e050      	b.n	8007b76 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a1b      	ldr	r2, [pc, #108]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d018      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b20:	d013      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a17      	ldr	r2, [pc, #92]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d00e      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d009      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a14      	ldr	r2, [pc, #80]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d004      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d10c      	bne.n	8007b64 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40000400 	.word	0x40000400
 8007b88:	40000800 	.word	0x40000800
 8007b8c:	40000c00 	.word	0x40000c00
 8007b90:	08011b7c 	.word	0x08011b7c
 8007b94:	40014000 	.word	0x40014000

08007b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e0a0      	b.n	8007d14 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d02c      	beq.n	8007c34 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a4f      	ldr	r2, [pc, #316]	; (8007d1c <HAL_UART_Init+0x15c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00e      	beq.n	8007c02 <HAL_UART_Init+0x42>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a4d      	ldr	r2, [pc, #308]	; (8007d20 <HAL_UART_Init+0x160>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d009      	beq.n	8007c02 <HAL_UART_Init+0x42>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a4c      	ldr	r2, [pc, #304]	; (8007d24 <HAL_UART_Init+0x164>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d004      	beq.n	8007c02 <HAL_UART_Init+0x42>
 8007bf8:	f240 114b 	movw	r1, #331	; 0x14b
 8007bfc:	484a      	ldr	r0, [pc, #296]	; (8007d28 <HAL_UART_Init+0x168>)
 8007bfe:	f006 fe29 	bl	800e854 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d028      	beq.n	8007c5c <HAL_UART_Init+0x9c>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c12:	d023      	beq.n	8007c5c <HAL_UART_Init+0x9c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c1c:	d01e      	beq.n	8007c5c <HAL_UART_Init+0x9c>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c26:	d019      	beq.n	8007c5c <HAL_UART_Init+0x9c>
 8007c28:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007c2c:	483e      	ldr	r0, [pc, #248]	; (8007d28 <HAL_UART_Init+0x168>)
 8007c2e:	f006 fe11 	bl	800e854 <assert_failed>
 8007c32:	e013      	b.n	8007c5c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a38      	ldr	r2, [pc, #224]	; (8007d1c <HAL_UART_Init+0x15c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00e      	beq.n	8007c5c <HAL_UART_Init+0x9c>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a37      	ldr	r2, [pc, #220]	; (8007d20 <HAL_UART_Init+0x160>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d009      	beq.n	8007c5c <HAL_UART_Init+0x9c>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a35      	ldr	r2, [pc, #212]	; (8007d24 <HAL_UART_Init+0x164>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d004      	beq.n	8007c5c <HAL_UART_Init+0x9c>
 8007c52:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007c56:	4834      	ldr	r0, [pc, #208]	; (8007d28 <HAL_UART_Init+0x168>)
 8007c58:	f006 fdfc 	bl	800e854 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d009      	beq.n	8007c78 <HAL_UART_Init+0xb8>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6c:	d004      	beq.n	8007c78 <HAL_UART_Init+0xb8>
 8007c6e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007c72:	482d      	ldr	r0, [pc, #180]	; (8007d28 <HAL_UART_Init+0x168>)
 8007c74:	f006 fdee 	bl	800e854 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d009      	beq.n	8007c94 <HAL_UART_Init+0xd4>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c88:	d004      	beq.n	8007c94 <HAL_UART_Init+0xd4>
 8007c8a:	f240 1153 	movw	r1, #339	; 0x153
 8007c8e:	4826      	ldr	r0, [pc, #152]	; (8007d28 <HAL_UART_Init+0x168>)
 8007c90:	f006 fde0 	bl	800e854 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d106      	bne.n	8007cae <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f007 fb21 	bl	800f2f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2224      	movs	r2, #36	; 0x24
 8007cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cc4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fc34 	bl	8008534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691a      	ldr	r2, [r3, #16]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cfa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	40011000 	.word	0x40011000
 8007d20:	40004400 	.word	0x40004400
 8007d24:	40011400 	.word	0x40011400
 8007d28:	08011bb8 	.word	0x08011bb8

08007d2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d153      	bne.n	8007dee <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_UART_Transmit_DMA+0x26>
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e04c      	b.n	8007df0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_UART_Transmit_DMA+0x38>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e045      	b.n	8007df0 <HAL_UART_Transmit_DMA+0xc4>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	88fa      	ldrh	r2, [r7, #6]
 8007d76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2221      	movs	r2, #33	; 0x21
 8007d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <HAL_UART_Transmit_DMA+0xcc>)
 8007d92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d98:	4a18      	ldr	r2, [pc, #96]	; (8007dfc <HAL_UART_Transmit_DMA+0xd0>)
 8007d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	4a17      	ldr	r2, [pc, #92]	; (8007e00 <HAL_UART_Transmit_DMA+0xd4>)
 8007da2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da8:	2200      	movs	r2, #0
 8007daa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007dac:	f107 0308 	add.w	r3, r7, #8
 8007db0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	6819      	ldr	r1, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	f7f9 fc68 	bl	8001698 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dd0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	695a      	ldr	r2, [r3, #20]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007de8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e000      	b.n	8007df0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007dee:	2302      	movs	r3, #2
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	08008141 	.word	0x08008141
 8007dfc:	08008193 	.word	0x08008193
 8007e00:	08008233 	.word	0x08008233

08007e04 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d166      	bne.n	8007eec <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <HAL_UART_Receive_DMA+0x26>
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e05f      	b.n	8007eee <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_UART_Receive_DMA+0x38>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e058      	b.n	8007eee <HAL_UART_Receive_DMA+0xea>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	88fa      	ldrh	r2, [r7, #6]
 8007e4e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2222      	movs	r2, #34	; 0x22
 8007e5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e62:	4a25      	ldr	r2, [pc, #148]	; (8007ef8 <HAL_UART_Receive_DMA+0xf4>)
 8007e64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6a:	4a24      	ldr	r2, [pc, #144]	; (8007efc <HAL_UART_Receive_DMA+0xf8>)
 8007e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e72:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <HAL_UART_Receive_DMA+0xfc>)
 8007e74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007e7e:	f107 0308 	add.w	r3, r7, #8
 8007e82:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	4619      	mov	r1, r3
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	f7f9 fbff 	bl	8001698 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	613b      	str	r3, [r7, #16]
 8007eae:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ec6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	695a      	ldr	r2, [r3, #20]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0201 	orr.w	r2, r2, #1
 8007ed6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ee6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e000      	b.n	8007eee <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007eec:	2302      	movs	r3, #2
  }
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	080081af 	.word	0x080081af
 8007efc:	08008217 	.word	0x08008217
 8007f00:	08008233 	.word	0x08008233

08007f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10d      	bne.n	8007f56 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	f003 0320 	and.w	r3, r3, #32
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d008      	beq.n	8007f56 <HAL_UART_IRQHandler+0x52>
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa6f 	bl	8008432 <UART_Receive_IT>
      return;
 8007f54:	e0d1      	b.n	80080fa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80b0 	beq.w	80080be <HAL_UART_IRQHandler+0x1ba>
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d105      	bne.n	8007f74 <HAL_UART_IRQHandler+0x70>
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 80a5 	beq.w	80080be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <HAL_UART_IRQHandler+0x90>
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8c:	f043 0201 	orr.w	r2, r3, #1
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f003 0304 	and.w	r3, r3, #4
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <HAL_UART_IRQHandler+0xb0>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fac:	f043 0202 	orr.w	r2, r3, #2
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xd0>
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fcc:	f043 0204 	orr.w	r2, r3, #4
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f003 0308 	and.w	r3, r3, #8
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00f      	beq.n	8007ffe <HAL_UART_IRQHandler+0xfa>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	f003 0320 	and.w	r3, r3, #32
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d104      	bne.n	8007ff2 <HAL_UART_IRQHandler+0xee>
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	f043 0208 	orr.w	r2, r3, #8
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d078      	beq.n	80080f8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	f003 0320 	and.w	r3, r3, #32
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <HAL_UART_IRQHandler+0x11c>
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa09 	bl	8008432 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802a:	2b40      	cmp	r3, #64	; 0x40
 800802c:	bf0c      	ite	eq
 800802e:	2301      	moveq	r3, #1
 8008030:	2300      	movne	r3, #0
 8008032:	b2db      	uxtb	r3, r3
 8008034:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <HAL_UART_IRQHandler+0x144>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d031      	beq.n	80080ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f952 	bl	80082f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d123      	bne.n	80080a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695a      	ldr	r2, [r3, #20]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800806a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008070:	2b00      	cmp	r3, #0
 8008072:	d013      	beq.n	800809c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008078:	4a21      	ldr	r2, [pc, #132]	; (8008100 <HAL_UART_IRQHandler+0x1fc>)
 800807a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008080:	4618      	mov	r0, r3
 8008082:	f7f9 fb6f 	bl	8001764 <HAL_DMA_Abort_IT>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d016      	beq.n	80080ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008096:	4610      	mov	r0, r2
 8008098:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809a:	e00e      	b.n	80080ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f845 	bl	800812c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a2:	e00a      	b.n	80080ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f841 	bl	800812c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080aa:	e006      	b.n	80080ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f83d 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80080b8:	e01e      	b.n	80080f8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ba:	bf00      	nop
    return;
 80080bc:	e01c      	b.n	80080f8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <HAL_UART_IRQHandler+0x1d6>
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f93f 	bl	8008356 <UART_Transmit_IT>
    return;
 80080d8:	e00f      	b.n	80080fa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00a      	beq.n	80080fa <HAL_UART_IRQHandler+0x1f6>
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f987 	bl	8008402 <UART_EndTransmit_IT>
    return;
 80080f4:	bf00      	nop
 80080f6:	e000      	b.n	80080fa <HAL_UART_IRQHandler+0x1f6>
    return;
 80080f8:	bf00      	nop
  }
}
 80080fa:	3720      	adds	r7, #32
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	0800832f 	.word	0x0800832f

08008104 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d113      	bne.n	8008184 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	695a      	ldr	r2, [r3, #20]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008170:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008180:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008182:	e002      	b.n	800818a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f004 f845 	bl	800c214 <HAL_UART_TxCpltCallback>
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff ffaf 	bl	8008104 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081a6:	bf00      	nop
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d11e      	bne.n	8008208 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081de:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695a      	ldr	r2, [r3, #20]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0201 	bic.w	r2, r2, #1
 80081ee:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	695a      	ldr	r2, [r3, #20]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081fe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f003 ff99 	bl	800c140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff ff77 	bl	8008118 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800823a:	2300      	movs	r3, #0
 800823c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824e:	2b80      	cmp	r3, #128	; 0x80
 8008250:	bf0c      	ite	eq
 8008252:	2301      	moveq	r3, #1
 8008254:	2300      	movne	r3, #0
 8008256:	b2db      	uxtb	r3, r3
 8008258:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b21      	cmp	r3, #33	; 0x21
 8008264:	d108      	bne.n	8008278 <UART_DMAError+0x46>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2200      	movs	r2, #0
 8008270:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008272:	68b8      	ldr	r0, [r7, #8]
 8008274:	f000 f827 	bl	80082c6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008282:	2b40      	cmp	r3, #64	; 0x40
 8008284:	bf0c      	ite	eq
 8008286:	2301      	moveq	r3, #1
 8008288:	2300      	movne	r3, #0
 800828a:	b2db      	uxtb	r3, r3
 800828c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b22      	cmp	r3, #34	; 0x22
 8008298:	d108      	bne.n	80082ac <UART_DMAError+0x7a>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2200      	movs	r2, #0
 80082a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80082a6:	68b8      	ldr	r0, [r7, #8]
 80082a8:	f000 f823 	bl	80082f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b0:	f043 0210 	orr.w	r2, r3, #16
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082b8:	68b8      	ldr	r0, [r7, #8]
 80082ba:	f7ff ff37 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80082dc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008308:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	695a      	ldr	r2, [r3, #20]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0201 	bic.w	r2, r2, #1
 8008318:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2220      	movs	r2, #32
 800831e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f7ff feef 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b21      	cmp	r3, #33	; 0x21
 8008368:	d144      	bne.n	80083f4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008372:	d11a      	bne.n	80083aa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008388:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	1c9a      	adds	r2, r3, #2
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	621a      	str	r2, [r3, #32]
 800839c:	e00e      	b.n	80083bc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	621a      	str	r2, [r3, #32]
 80083a8:	e008      	b.n	80083bc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	1c59      	adds	r1, r3, #1
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	6211      	str	r1, [r2, #32]
 80083b4:	781a      	ldrb	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	4619      	mov	r1, r3
 80083ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10f      	bne.n	80083f0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e000      	b.n	80083f6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80083f4:	2302      	movs	r3, #2
  }
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008418:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f003 fef6 	bl	800c214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b22      	cmp	r3, #34	; 0x22
 8008444:	d171      	bne.n	800852a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800844e:	d123      	bne.n	8008498 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10e      	bne.n	800847c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846a:	b29a      	uxth	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008474:	1c9a      	adds	r2, r3, #2
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	629a      	str	r2, [r3, #40]	; 0x28
 800847a:	e029      	b.n	80084d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	b29b      	uxth	r3, r3
 8008484:	b2db      	uxtb	r3, r3
 8008486:	b29a      	uxth	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	629a      	str	r2, [r3, #40]	; 0x28
 8008496:	e01b      	b.n	80084d0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6858      	ldr	r0, [r3, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084aa:	1c59      	adds	r1, r3, #1
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6291      	str	r1, [r2, #40]	; 0x28
 80084b0:	b2c2      	uxtb	r2, r0
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	e00c      	b.n	80084d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	1c58      	adds	r0, r3, #1
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	6288      	str	r0, [r1, #40]	; 0x28
 80084c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80084cc:	b2d2      	uxtb	r2, r2
 80084ce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29b      	uxth	r3, r3
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	4619      	mov	r1, r3
 80084de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d120      	bne.n	8008526 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0220 	bic.w	r2, r2, #32
 80084f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008502:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695a      	ldr	r2, [r3, #20]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f003 fe0f 	bl	800c140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	e002      	b.n	800852c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800852a:	2302      	movs	r3, #2
  }
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	b085      	sub	sp, #20
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	4a9a      	ldr	r2, [pc, #616]	; (80087ac <UART_SetConfig+0x278>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d904      	bls.n	8008552 <UART_SetConfig+0x1e>
 8008548:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800854c:	4898      	ldr	r0, [pc, #608]	; (80087b0 <UART_SetConfig+0x27c>)
 800854e:	f006 f981 	bl	800e854 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <UART_SetConfig+0x3a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008562:	d004      	beq.n	800856e <UART_SetConfig+0x3a>
 8008564:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8008568:	4891      	ldr	r0, [pc, #580]	; (80087b0 <UART_SetConfig+0x27c>)
 800856a:	f006 f973 	bl	800e854 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00e      	beq.n	8008594 <UART_SetConfig+0x60>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800857e:	d009      	beq.n	8008594 <UART_SetConfig+0x60>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008588:	d004      	beq.n	8008594 <UART_SetConfig+0x60>
 800858a:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800858e:	4888      	ldr	r0, [pc, #544]	; (80087b0 <UART_SetConfig+0x27c>)
 8008590:	f006 f960 	bl	800e854 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800859c:	4013      	ands	r3, r2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d103      	bne.n	80085aa <UART_SetConfig+0x76>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d104      	bne.n	80085b4 <UART_SetConfig+0x80>
 80085aa:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80085ae:	4880      	ldr	r0, [pc, #512]	; (80087b0 <UART_SetConfig+0x27c>)
 80085b0:	f006 f950 	bl	800e854 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	431a      	orrs	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80085ec:	f023 030c 	bic.w	r3, r3, #12
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	430b      	orrs	r3, r1
 80085f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	430a      	orrs	r2, r1
 800860e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008618:	f040 818f 	bne.w	800893a <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a64      	ldr	r2, [pc, #400]	; (80087b4 <UART_SetConfig+0x280>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d005      	beq.n	8008632 <UART_SetConfig+0xfe>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a63      	ldr	r2, [pc, #396]	; (80087b8 <UART_SetConfig+0x284>)
 800862c:	4293      	cmp	r3, r2
 800862e:	f040 80c7 	bne.w	80087c0 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008632:	f7fc f9ab 	bl	800498c <HAL_RCC_GetPCLK2Freq>
 8008636:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	461d      	mov	r5, r3
 800863c:	f04f 0600 	mov.w	r6, #0
 8008640:	46a8      	mov	r8, r5
 8008642:	46b1      	mov	r9, r6
 8008644:	eb18 0308 	adds.w	r3, r8, r8
 8008648:	eb49 0409 	adc.w	r4, r9, r9
 800864c:	4698      	mov	r8, r3
 800864e:	46a1      	mov	r9, r4
 8008650:	eb18 0805 	adds.w	r8, r8, r5
 8008654:	eb49 0906 	adc.w	r9, r9, r6
 8008658:	f04f 0100 	mov.w	r1, #0
 800865c:	f04f 0200 	mov.w	r2, #0
 8008660:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008664:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008668:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800866c:	4688      	mov	r8, r1
 800866e:	4691      	mov	r9, r2
 8008670:	eb18 0005 	adds.w	r0, r8, r5
 8008674:	eb49 0106 	adc.w	r1, r9, r6
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	461d      	mov	r5, r3
 800867e:	f04f 0600 	mov.w	r6, #0
 8008682:	196b      	adds	r3, r5, r5
 8008684:	eb46 0406 	adc.w	r4, r6, r6
 8008688:	461a      	mov	r2, r3
 800868a:	4623      	mov	r3, r4
 800868c:	f7f8 fa94 	bl	8000bb8 <__aeabi_uldivmod>
 8008690:	4603      	mov	r3, r0
 8008692:	460c      	mov	r4, r1
 8008694:	461a      	mov	r2, r3
 8008696:	4b49      	ldr	r3, [pc, #292]	; (80087bc <UART_SetConfig+0x288>)
 8008698:	fba3 2302 	umull	r2, r3, r3, r2
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	461d      	mov	r5, r3
 80086a6:	f04f 0600 	mov.w	r6, #0
 80086aa:	46a9      	mov	r9, r5
 80086ac:	46b2      	mov	sl, r6
 80086ae:	eb19 0309 	adds.w	r3, r9, r9
 80086b2:	eb4a 040a 	adc.w	r4, sl, sl
 80086b6:	4699      	mov	r9, r3
 80086b8:	46a2      	mov	sl, r4
 80086ba:	eb19 0905 	adds.w	r9, r9, r5
 80086be:	eb4a 0a06 	adc.w	sl, sl, r6
 80086c2:	f04f 0100 	mov.w	r1, #0
 80086c6:	f04f 0200 	mov.w	r2, #0
 80086ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086d6:	4689      	mov	r9, r1
 80086d8:	4692      	mov	sl, r2
 80086da:	eb19 0005 	adds.w	r0, r9, r5
 80086de:	eb4a 0106 	adc.w	r1, sl, r6
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	461d      	mov	r5, r3
 80086e8:	f04f 0600 	mov.w	r6, #0
 80086ec:	196b      	adds	r3, r5, r5
 80086ee:	eb46 0406 	adc.w	r4, r6, r6
 80086f2:	461a      	mov	r2, r3
 80086f4:	4623      	mov	r3, r4
 80086f6:	f7f8 fa5f 	bl	8000bb8 <__aeabi_uldivmod>
 80086fa:	4603      	mov	r3, r0
 80086fc:	460c      	mov	r4, r1
 80086fe:	461a      	mov	r2, r3
 8008700:	4b2e      	ldr	r3, [pc, #184]	; (80087bc <UART_SetConfig+0x288>)
 8008702:	fba3 1302 	umull	r1, r3, r3, r2
 8008706:	095b      	lsrs	r3, r3, #5
 8008708:	2164      	movs	r1, #100	; 0x64
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	3332      	adds	r3, #50	; 0x32
 8008714:	4a29      	ldr	r2, [pc, #164]	; (80087bc <UART_SetConfig+0x288>)
 8008716:	fba2 2303 	umull	r2, r3, r2, r3
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008722:	4498      	add	r8, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	461d      	mov	r5, r3
 8008728:	f04f 0600 	mov.w	r6, #0
 800872c:	46a9      	mov	r9, r5
 800872e:	46b2      	mov	sl, r6
 8008730:	eb19 0309 	adds.w	r3, r9, r9
 8008734:	eb4a 040a 	adc.w	r4, sl, sl
 8008738:	4699      	mov	r9, r3
 800873a:	46a2      	mov	sl, r4
 800873c:	eb19 0905 	adds.w	r9, r9, r5
 8008740:	eb4a 0a06 	adc.w	sl, sl, r6
 8008744:	f04f 0100 	mov.w	r1, #0
 8008748:	f04f 0200 	mov.w	r2, #0
 800874c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008758:	4689      	mov	r9, r1
 800875a:	4692      	mov	sl, r2
 800875c:	eb19 0005 	adds.w	r0, r9, r5
 8008760:	eb4a 0106 	adc.w	r1, sl, r6
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	461d      	mov	r5, r3
 800876a:	f04f 0600 	mov.w	r6, #0
 800876e:	196b      	adds	r3, r5, r5
 8008770:	eb46 0406 	adc.w	r4, r6, r6
 8008774:	461a      	mov	r2, r3
 8008776:	4623      	mov	r3, r4
 8008778:	f7f8 fa1e 	bl	8000bb8 <__aeabi_uldivmod>
 800877c:	4603      	mov	r3, r0
 800877e:	460c      	mov	r4, r1
 8008780:	461a      	mov	r2, r3
 8008782:	4b0e      	ldr	r3, [pc, #56]	; (80087bc <UART_SetConfig+0x288>)
 8008784:	fba3 1302 	umull	r1, r3, r3, r2
 8008788:	095b      	lsrs	r3, r3, #5
 800878a:	2164      	movs	r1, #100	; 0x64
 800878c:	fb01 f303 	mul.w	r3, r1, r3
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	3332      	adds	r3, #50	; 0x32
 8008796:	4a09      	ldr	r2, [pc, #36]	; (80087bc <UART_SetConfig+0x288>)
 8008798:	fba2 2303 	umull	r2, r3, r2, r3
 800879c:	095b      	lsrs	r3, r3, #5
 800879e:	f003 0207 	and.w	r2, r3, #7
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4442      	add	r2, r8
 80087a8:	609a      	str	r2, [r3, #8]
 80087aa:	e27a      	b.n	8008ca2 <UART_SetConfig+0x76e>
 80087ac:	00a037a0 	.word	0x00a037a0
 80087b0:	08011bb8 	.word	0x08011bb8
 80087b4:	40011000 	.word	0x40011000
 80087b8:	40011400 	.word	0x40011400
 80087bc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087c0:	f7fc f8d0 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 80087c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	461d      	mov	r5, r3
 80087ca:	f04f 0600 	mov.w	r6, #0
 80087ce:	46a8      	mov	r8, r5
 80087d0:	46b1      	mov	r9, r6
 80087d2:	eb18 0308 	adds.w	r3, r8, r8
 80087d6:	eb49 0409 	adc.w	r4, r9, r9
 80087da:	4698      	mov	r8, r3
 80087dc:	46a1      	mov	r9, r4
 80087de:	eb18 0805 	adds.w	r8, r8, r5
 80087e2:	eb49 0906 	adc.w	r9, r9, r6
 80087e6:	f04f 0100 	mov.w	r1, #0
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087fa:	4688      	mov	r8, r1
 80087fc:	4691      	mov	r9, r2
 80087fe:	eb18 0005 	adds.w	r0, r8, r5
 8008802:	eb49 0106 	adc.w	r1, r9, r6
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	461d      	mov	r5, r3
 800880c:	f04f 0600 	mov.w	r6, #0
 8008810:	196b      	adds	r3, r5, r5
 8008812:	eb46 0406 	adc.w	r4, r6, r6
 8008816:	461a      	mov	r2, r3
 8008818:	4623      	mov	r3, r4
 800881a:	f7f8 f9cd 	bl	8000bb8 <__aeabi_uldivmod>
 800881e:	4603      	mov	r3, r0
 8008820:	460c      	mov	r4, r1
 8008822:	461a      	mov	r2, r3
 8008824:	4bb3      	ldr	r3, [pc, #716]	; (8008af4 <UART_SetConfig+0x5c0>)
 8008826:	fba3 2302 	umull	r2, r3, r3, r2
 800882a:	095b      	lsrs	r3, r3, #5
 800882c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	461d      	mov	r5, r3
 8008834:	f04f 0600 	mov.w	r6, #0
 8008838:	46a9      	mov	r9, r5
 800883a:	46b2      	mov	sl, r6
 800883c:	eb19 0309 	adds.w	r3, r9, r9
 8008840:	eb4a 040a 	adc.w	r4, sl, sl
 8008844:	4699      	mov	r9, r3
 8008846:	46a2      	mov	sl, r4
 8008848:	eb19 0905 	adds.w	r9, r9, r5
 800884c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008850:	f04f 0100 	mov.w	r1, #0
 8008854:	f04f 0200 	mov.w	r2, #0
 8008858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800885c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008860:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008864:	4689      	mov	r9, r1
 8008866:	4692      	mov	sl, r2
 8008868:	eb19 0005 	adds.w	r0, r9, r5
 800886c:	eb4a 0106 	adc.w	r1, sl, r6
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	461d      	mov	r5, r3
 8008876:	f04f 0600 	mov.w	r6, #0
 800887a:	196b      	adds	r3, r5, r5
 800887c:	eb46 0406 	adc.w	r4, r6, r6
 8008880:	461a      	mov	r2, r3
 8008882:	4623      	mov	r3, r4
 8008884:	f7f8 f998 	bl	8000bb8 <__aeabi_uldivmod>
 8008888:	4603      	mov	r3, r0
 800888a:	460c      	mov	r4, r1
 800888c:	461a      	mov	r2, r3
 800888e:	4b99      	ldr	r3, [pc, #612]	; (8008af4 <UART_SetConfig+0x5c0>)
 8008890:	fba3 1302 	umull	r1, r3, r3, r2
 8008894:	095b      	lsrs	r3, r3, #5
 8008896:	2164      	movs	r1, #100	; 0x64
 8008898:	fb01 f303 	mul.w	r3, r1, r3
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	3332      	adds	r3, #50	; 0x32
 80088a2:	4a94      	ldr	r2, [pc, #592]	; (8008af4 <UART_SetConfig+0x5c0>)
 80088a4:	fba2 2303 	umull	r2, r3, r2, r3
 80088a8:	095b      	lsrs	r3, r3, #5
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088b0:	4498      	add	r8, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	461d      	mov	r5, r3
 80088b6:	f04f 0600 	mov.w	r6, #0
 80088ba:	46a9      	mov	r9, r5
 80088bc:	46b2      	mov	sl, r6
 80088be:	eb19 0309 	adds.w	r3, r9, r9
 80088c2:	eb4a 040a 	adc.w	r4, sl, sl
 80088c6:	4699      	mov	r9, r3
 80088c8:	46a2      	mov	sl, r4
 80088ca:	eb19 0905 	adds.w	r9, r9, r5
 80088ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80088d2:	f04f 0100 	mov.w	r1, #0
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088e6:	4689      	mov	r9, r1
 80088e8:	4692      	mov	sl, r2
 80088ea:	eb19 0005 	adds.w	r0, r9, r5
 80088ee:	eb4a 0106 	adc.w	r1, sl, r6
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	461d      	mov	r5, r3
 80088f8:	f04f 0600 	mov.w	r6, #0
 80088fc:	196b      	adds	r3, r5, r5
 80088fe:	eb46 0406 	adc.w	r4, r6, r6
 8008902:	461a      	mov	r2, r3
 8008904:	4623      	mov	r3, r4
 8008906:	f7f8 f957 	bl	8000bb8 <__aeabi_uldivmod>
 800890a:	4603      	mov	r3, r0
 800890c:	460c      	mov	r4, r1
 800890e:	461a      	mov	r2, r3
 8008910:	4b78      	ldr	r3, [pc, #480]	; (8008af4 <UART_SetConfig+0x5c0>)
 8008912:	fba3 1302 	umull	r1, r3, r3, r2
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	2164      	movs	r1, #100	; 0x64
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	00db      	lsls	r3, r3, #3
 8008922:	3332      	adds	r3, #50	; 0x32
 8008924:	4a73      	ldr	r2, [pc, #460]	; (8008af4 <UART_SetConfig+0x5c0>)
 8008926:	fba2 2303 	umull	r2, r3, r2, r3
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	f003 0207 	and.w	r2, r3, #7
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4442      	add	r2, r8
 8008936:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008938:	e1b3      	b.n	8008ca2 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a6e      	ldr	r2, [pc, #440]	; (8008af8 <UART_SetConfig+0x5c4>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d005      	beq.n	8008950 <UART_SetConfig+0x41c>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a6c      	ldr	r2, [pc, #432]	; (8008afc <UART_SetConfig+0x5c8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	f040 80d8 	bne.w	8008b00 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008950:	f7fc f81c 	bl	800498c <HAL_RCC_GetPCLK2Freq>
 8008954:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	469a      	mov	sl, r3
 800895a:	f04f 0b00 	mov.w	fp, #0
 800895e:	46d0      	mov	r8, sl
 8008960:	46d9      	mov	r9, fp
 8008962:	eb18 0308 	adds.w	r3, r8, r8
 8008966:	eb49 0409 	adc.w	r4, r9, r9
 800896a:	4698      	mov	r8, r3
 800896c:	46a1      	mov	r9, r4
 800896e:	eb18 080a 	adds.w	r8, r8, sl
 8008972:	eb49 090b 	adc.w	r9, r9, fp
 8008976:	f04f 0100 	mov.w	r1, #0
 800897a:	f04f 0200 	mov.w	r2, #0
 800897e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008982:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008986:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800898a:	4688      	mov	r8, r1
 800898c:	4691      	mov	r9, r2
 800898e:	eb1a 0508 	adds.w	r5, sl, r8
 8008992:	eb4b 0609 	adc.w	r6, fp, r9
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	4619      	mov	r1, r3
 800899c:	f04f 0200 	mov.w	r2, #0
 80089a0:	f04f 0300 	mov.w	r3, #0
 80089a4:	f04f 0400 	mov.w	r4, #0
 80089a8:	0094      	lsls	r4, r2, #2
 80089aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089ae:	008b      	lsls	r3, r1, #2
 80089b0:	461a      	mov	r2, r3
 80089b2:	4623      	mov	r3, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	4631      	mov	r1, r6
 80089b8:	f7f8 f8fe 	bl	8000bb8 <__aeabi_uldivmod>
 80089bc:	4603      	mov	r3, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	461a      	mov	r2, r3
 80089c2:	4b4c      	ldr	r3, [pc, #304]	; (8008af4 <UART_SetConfig+0x5c0>)
 80089c4:	fba3 2302 	umull	r2, r3, r3, r2
 80089c8:	095b      	lsrs	r3, r3, #5
 80089ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	469b      	mov	fp, r3
 80089d2:	f04f 0c00 	mov.w	ip, #0
 80089d6:	46d9      	mov	r9, fp
 80089d8:	46e2      	mov	sl, ip
 80089da:	eb19 0309 	adds.w	r3, r9, r9
 80089de:	eb4a 040a 	adc.w	r4, sl, sl
 80089e2:	4699      	mov	r9, r3
 80089e4:	46a2      	mov	sl, r4
 80089e6:	eb19 090b 	adds.w	r9, r9, fp
 80089ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80089ee:	f04f 0100 	mov.w	r1, #0
 80089f2:	f04f 0200 	mov.w	r2, #0
 80089f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a02:	4689      	mov	r9, r1
 8008a04:	4692      	mov	sl, r2
 8008a06:	eb1b 0509 	adds.w	r5, fp, r9
 8008a0a:	eb4c 060a 	adc.w	r6, ip, sl
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	4619      	mov	r1, r3
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	f04f 0300 	mov.w	r3, #0
 8008a1c:	f04f 0400 	mov.w	r4, #0
 8008a20:	0094      	lsls	r4, r2, #2
 8008a22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a26:	008b      	lsls	r3, r1, #2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4623      	mov	r3, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	4631      	mov	r1, r6
 8008a30:	f7f8 f8c2 	bl	8000bb8 <__aeabi_uldivmod>
 8008a34:	4603      	mov	r3, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4b2e      	ldr	r3, [pc, #184]	; (8008af4 <UART_SetConfig+0x5c0>)
 8008a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	2164      	movs	r1, #100	; 0x64
 8008a44:	fb01 f303 	mul.w	r3, r1, r3
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	3332      	adds	r3, #50	; 0x32
 8008a4e:	4a29      	ldr	r2, [pc, #164]	; (8008af4 <UART_SetConfig+0x5c0>)
 8008a50:	fba2 2303 	umull	r2, r3, r2, r3
 8008a54:	095b      	lsrs	r3, r3, #5
 8008a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a5a:	4498      	add	r8, r3
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	469b      	mov	fp, r3
 8008a60:	f04f 0c00 	mov.w	ip, #0
 8008a64:	46d9      	mov	r9, fp
 8008a66:	46e2      	mov	sl, ip
 8008a68:	eb19 0309 	adds.w	r3, r9, r9
 8008a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8008a70:	4699      	mov	r9, r3
 8008a72:	46a2      	mov	sl, r4
 8008a74:	eb19 090b 	adds.w	r9, r9, fp
 8008a78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a7c:	f04f 0100 	mov.w	r1, #0
 8008a80:	f04f 0200 	mov.w	r2, #0
 8008a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a90:	4689      	mov	r9, r1
 8008a92:	4692      	mov	sl, r2
 8008a94:	eb1b 0509 	adds.w	r5, fp, r9
 8008a98:	eb4c 060a 	adc.w	r6, ip, sl
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	f04f 0300 	mov.w	r3, #0
 8008aaa:	f04f 0400 	mov.w	r4, #0
 8008aae:	0094      	lsls	r4, r2, #2
 8008ab0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ab4:	008b      	lsls	r3, r1, #2
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	4623      	mov	r3, r4
 8008aba:	4628      	mov	r0, r5
 8008abc:	4631      	mov	r1, r6
 8008abe:	f7f8 f87b 	bl	8000bb8 <__aeabi_uldivmod>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <UART_SetConfig+0x5c0>)
 8008aca:	fba3 1302 	umull	r1, r3, r3, r2
 8008ace:	095b      	lsrs	r3, r3, #5
 8008ad0:	2164      	movs	r1, #100	; 0x64
 8008ad2:	fb01 f303 	mul.w	r3, r1, r3
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	011b      	lsls	r3, r3, #4
 8008ada:	3332      	adds	r3, #50	; 0x32
 8008adc:	4a05      	ldr	r2, [pc, #20]	; (8008af4 <UART_SetConfig+0x5c0>)
 8008ade:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	f003 020f 	and.w	r2, r3, #15
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4442      	add	r2, r8
 8008aee:	609a      	str	r2, [r3, #8]
 8008af0:	e0d7      	b.n	8008ca2 <UART_SetConfig+0x76e>
 8008af2:	bf00      	nop
 8008af4:	51eb851f 	.word	0x51eb851f
 8008af8:	40011000 	.word	0x40011000
 8008afc:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b00:	f7fb ff30 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 8008b04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	469a      	mov	sl, r3
 8008b0a:	f04f 0b00 	mov.w	fp, #0
 8008b0e:	46d0      	mov	r8, sl
 8008b10:	46d9      	mov	r9, fp
 8008b12:	eb18 0308 	adds.w	r3, r8, r8
 8008b16:	eb49 0409 	adc.w	r4, r9, r9
 8008b1a:	4698      	mov	r8, r3
 8008b1c:	46a1      	mov	r9, r4
 8008b1e:	eb18 080a 	adds.w	r8, r8, sl
 8008b22:	eb49 090b 	adc.w	r9, r9, fp
 8008b26:	f04f 0100 	mov.w	r1, #0
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b3a:	4688      	mov	r8, r1
 8008b3c:	4691      	mov	r9, r2
 8008b3e:	eb1a 0508 	adds.w	r5, sl, r8
 8008b42:	eb4b 0609 	adc.w	r6, fp, r9
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	f04f 0300 	mov.w	r3, #0
 8008b54:	f04f 0400 	mov.w	r4, #0
 8008b58:	0094      	lsls	r4, r2, #2
 8008b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b5e:	008b      	lsls	r3, r1, #2
 8008b60:	461a      	mov	r2, r3
 8008b62:	4623      	mov	r3, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	4631      	mov	r1, r6
 8008b68:	f7f8 f826 	bl	8000bb8 <__aeabi_uldivmod>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	461a      	mov	r2, r3
 8008b72:	4b4e      	ldr	r3, [pc, #312]	; (8008cac <UART_SetConfig+0x778>)
 8008b74:	fba3 2302 	umull	r2, r3, r3, r2
 8008b78:	095b      	lsrs	r3, r3, #5
 8008b7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	469b      	mov	fp, r3
 8008b82:	f04f 0c00 	mov.w	ip, #0
 8008b86:	46d9      	mov	r9, fp
 8008b88:	46e2      	mov	sl, ip
 8008b8a:	eb19 0309 	adds.w	r3, r9, r9
 8008b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8008b92:	4699      	mov	r9, r3
 8008b94:	46a2      	mov	sl, r4
 8008b96:	eb19 090b 	adds.w	r9, r9, fp
 8008b9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b9e:	f04f 0100 	mov.w	r1, #0
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bb2:	4689      	mov	r9, r1
 8008bb4:	4692      	mov	sl, r2
 8008bb6:	eb1b 0509 	adds.w	r5, fp, r9
 8008bba:	eb4c 060a 	adc.w	r6, ip, sl
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	f04f 0400 	mov.w	r4, #0
 8008bd0:	0094      	lsls	r4, r2, #2
 8008bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bd6:	008b      	lsls	r3, r1, #2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4623      	mov	r3, r4
 8008bdc:	4628      	mov	r0, r5
 8008bde:	4631      	mov	r1, r6
 8008be0:	f7f7 ffea 	bl	8000bb8 <__aeabi_uldivmod>
 8008be4:	4603      	mov	r3, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	461a      	mov	r2, r3
 8008bea:	4b30      	ldr	r3, [pc, #192]	; (8008cac <UART_SetConfig+0x778>)
 8008bec:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf0:	095b      	lsrs	r3, r3, #5
 8008bf2:	2164      	movs	r1, #100	; 0x64
 8008bf4:	fb01 f303 	mul.w	r3, r1, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	3332      	adds	r3, #50	; 0x32
 8008bfe:	4a2b      	ldr	r2, [pc, #172]	; (8008cac <UART_SetConfig+0x778>)
 8008c00:	fba2 2303 	umull	r2, r3, r2, r3
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c0a:	4498      	add	r8, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	469b      	mov	fp, r3
 8008c10:	f04f 0c00 	mov.w	ip, #0
 8008c14:	46d9      	mov	r9, fp
 8008c16:	46e2      	mov	sl, ip
 8008c18:	eb19 0309 	adds.w	r3, r9, r9
 8008c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8008c20:	4699      	mov	r9, r3
 8008c22:	46a2      	mov	sl, r4
 8008c24:	eb19 090b 	adds.w	r9, r9, fp
 8008c28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c2c:	f04f 0100 	mov.w	r1, #0
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c40:	4689      	mov	r9, r1
 8008c42:	4692      	mov	sl, r2
 8008c44:	eb1b 0509 	adds.w	r5, fp, r9
 8008c48:	eb4c 060a 	adc.w	r6, ip, sl
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	4619      	mov	r1, r3
 8008c52:	f04f 0200 	mov.w	r2, #0
 8008c56:	f04f 0300 	mov.w	r3, #0
 8008c5a:	f04f 0400 	mov.w	r4, #0
 8008c5e:	0094      	lsls	r4, r2, #2
 8008c60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c64:	008b      	lsls	r3, r1, #2
 8008c66:	461a      	mov	r2, r3
 8008c68:	4623      	mov	r3, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	f7f7 ffa3 	bl	8000bb8 <__aeabi_uldivmod>
 8008c72:	4603      	mov	r3, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	461a      	mov	r2, r3
 8008c78:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <UART_SetConfig+0x778>)
 8008c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c7e:	095b      	lsrs	r3, r3, #5
 8008c80:	2164      	movs	r1, #100	; 0x64
 8008c82:	fb01 f303 	mul.w	r3, r1, r3
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	3332      	adds	r3, #50	; 0x32
 8008c8c:	4a07      	ldr	r2, [pc, #28]	; (8008cac <UART_SetConfig+0x778>)
 8008c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	f003 020f 	and.w	r2, r3, #15
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4442      	add	r2, r8
 8008c9e:	609a      	str	r2, [r3, #8]
}
 8008ca0:	e7ff      	b.n	8008ca2 <UART_SetConfig+0x76e>
 8008ca2:	bf00      	nop
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cac:	51eb851f 	.word	0x51eb851f

08008cb0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cc2:	2b84      	cmp	r3, #132	; 0x84
 8008cc4:	d005      	beq.n	8008cd2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008cc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4413      	add	r3, r2
 8008cce:	3303      	adds	r3, #3
 8008cd0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ce6:	f3ef 8305 	mrs	r3, IPSR
 8008cea:	607b      	str	r3, [r7, #4]
  return(result);
 8008cec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bf14      	ite	ne
 8008cf2:	2301      	movne	r3, #1
 8008cf4:	2300      	moveq	r3, #0
 8008cf6:	b2db      	uxtb	r3, r3
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d08:	f001 fc4c 	bl	800a5a4 <vTaskStartScheduler>
  
  return osOK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d14:	b089      	sub	sp, #36	; 0x24
 8008d16:	af04      	add	r7, sp, #16
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d020      	beq.n	8008d66 <osThreadCreate+0x54>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d01c      	beq.n	8008d66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685c      	ldr	r4, [r3, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681d      	ldr	r5, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691e      	ldr	r6, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff ffb6 	bl	8008cb0 <makeFreeRtosPriority>
 8008d44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d4e:	9202      	str	r2, [sp, #8]
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	9100      	str	r1, [sp, #0]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	4632      	mov	r2, r6
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f001 f9ec 	bl	800a138 <xTaskCreateStatic>
 8008d60:	4603      	mov	r3, r0
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e01c      	b.n	8008da0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685c      	ldr	r4, [r3, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d72:	b29e      	uxth	r6, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff ff98 	bl	8008cb0 <makeFreeRtosPriority>
 8008d80:	4602      	mov	r2, r0
 8008d82:	f107 030c 	add.w	r3, r7, #12
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	9200      	str	r2, [sp, #0]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4620      	mov	r0, r4
 8008d92:	f001 fa2b 	bl	800a1ec <xTaskCreate>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d001      	beq.n	8008da0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e000      	b.n	8008da2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008da0:	68fb      	ldr	r3, [r7, #12]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008daa <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fb68 	bl	800a488 <vTaskDelete>
  return osOK;
 8008db8:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d013      	beq.n	8008e02 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d101      	bne.n	8008de4 <osTimerCreate+0x20>
 8008de0:	2101      	movs	r1, #1
 8008de2:	e000      	b.n	8008de6 <osTimerCreate+0x22>
 8008de4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8008dee:	9201      	str	r2, [sp, #4]
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	460a      	mov	r2, r1
 8008df6:	2101      	movs	r1, #1
 8008df8:	480b      	ldr	r0, [pc, #44]	; (8008e28 <osTimerCreate+0x64>)
 8008dfa:	f002 fb8a 	bl	800b512 <xTimerCreateStatic>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	e00e      	b.n	8008e20 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <osTimerCreate+0x48>
 8008e08:	2201      	movs	r2, #1
 8008e0a:	e000      	b.n	8008e0e <osTimerCreate+0x4a>
 8008e0c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2101      	movs	r1, #1
 8008e18:	4803      	ldr	r0, [pc, #12]	; (8008e28 <osTimerCreate+0x64>)
 8008e1a:	f002 fb59 	bl	800b4d0 <xTimerCreate>
 8008e1e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	08011bf4 	.word	0x08011bf4

08008e2c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <osTimerStart+0x20>
    ticks = 1;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8008e4c:	f7ff ff48 	bl	8008ce0 <inHandlerMode>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d01b      	beq.n	8008e8e <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8008e56:	f107 020c 	add.w	r2, r7, #12
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	2109      	movs	r1, #9
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f002 fbcb 	bl	800b600 <xTimerGenericCommand>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d002      	beq.n	8008e76 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8008e70:	23ff      	movs	r3, #255	; 0xff
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	e018      	b.n	8008ea8 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d015      	beq.n	8008ea8 <osTimerStart+0x7c>
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <osTimerStart+0x88>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	e00c      	b.n	8008ea8 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	2300      	movs	r3, #0
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	2104      	movs	r1, #4
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f002 fbb1 	bl	800b600 <xTimerGenericCommand>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d001      	beq.n	8008ea8 <osTimerStart+0x7c>
      result = osErrorOS;
 8008ea4:	23ff      	movs	r3, #255	; 0xff
 8008ea6:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8008ea8:	697b      	ldr	r3, [r7, #20]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8008ec8:	f7ff ff0a 	bl	8008ce0 <inHandlerMode>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d01a      	beq.n	8008f08 <osTimerStop+0x50>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8008ed2:	f107 0208 	add.w	r2, r7, #8
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	4613      	mov	r3, r2
 8008edc:	2200      	movs	r2, #0
 8008ede:	2108      	movs	r1, #8
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f002 fb8d 	bl	800b600 <xTimerGenericCommand>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d001      	beq.n	8008ef0 <osTimerStop+0x38>
      return osErrorOS;
 8008eec:	23ff      	movs	r3, #255	; 0xff
 8008eee:	e019      	b.n	8008f24 <osTimerStop+0x6c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d015      	beq.n	8008f22 <osTimerStop+0x6a>
 8008ef6:	4b0d      	ldr	r3, [pc, #52]	; (8008f2c <osTimerStop+0x74>)
 8008ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	e00c      	b.n	8008f22 <osTimerStop+0x6a>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2103      	movs	r1, #3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f002 fb74 	bl	800b600 <xTimerGenericCommand>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d001      	beq.n	8008f22 <osTimerStop+0x6a>
      result = osErrorOS;
 8008f1e:	23ff      	movs	r3, #255	; 0xff
 8008f20:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8008f22:	68fb      	ldr	r3, [r7, #12]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8008f42:	f7ff fecd 	bl	8008ce0 <inHandlerMode>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01c      	beq.n	8008f86 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	f107 0208 	add.w	r2, r7, #8
 8008f52:	f107 030c 	add.w	r3, r7, #12
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f002 f92b 	bl	800b1b8 <xTaskGenericNotifyFromISR>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d002      	beq.n	8008f6e <osSignalSet+0x3e>
      return 0x80000000;
 8008f68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f6c:	e019      	b.n	8008fa2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d015      	beq.n	8008fa0 <osSignalSet+0x70>
 8008f74:	4b0d      	ldr	r3, [pc, #52]	; (8008fac <osSignalSet+0x7c>)
 8008f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	e00c      	b.n	8008fa0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	f107 0308 	add.w	r3, r7, #8
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f002 f856 	bl	800b040 <xTaskGenericNotify>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d002      	beq.n	8008fa0 <osSignalSet+0x70>
    return 0x80000000;
 8008f9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f9e:	e000      	b.n	8008fa2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008fb0:	b590      	push	{r4, r7, lr}
 8008fb2:	b089      	sub	sp, #36	; 0x24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fca:	d103      	bne.n	8008fd4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8008fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd0:	61fb      	str	r3, [r7, #28]
 8008fd2:	e009      	b.n	8008fe8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d006      	beq.n	8008fe8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <osSignalWait+0x38>
      ticks = 1;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8008fe8:	f7ff fe7a 	bl	8008ce0 <inHandlerMode>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8008ff2:	2382      	movs	r3, #130	; 0x82
 8008ff4:	613b      	str	r3, [r7, #16]
 8008ff6:	e01b      	b.n	8009030 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8008ff8:	68b9      	ldr	r1, [r7, #8]
 8008ffa:	f107 0310 	add.w	r3, r7, #16
 8008ffe:	1d1a      	adds	r2, r3, #4
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	2000      	movs	r0, #0
 8009004:	f001 ffbc 	bl	800af80 <xTaskNotifyWait>
 8009008:	4603      	mov	r3, r0
 800900a:	2b01      	cmp	r3, #1
 800900c:	d008      	beq.n	8009020 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <osSignalWait+0x6a>
 8009014:	2300      	movs	r3, #0
 8009016:	613b      	str	r3, [r7, #16]
 8009018:	e00a      	b.n	8009030 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800901a:	2340      	movs	r3, #64	; 0x40
 800901c:	613b      	str	r3, [r7, #16]
 800901e:	e007      	b.n	8009030 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	da02      	bge.n	800902c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8009026:	2386      	movs	r3, #134	; 0x86
 8009028:	613b      	str	r3, [r7, #16]
 800902a:	e001      	b.n	8009030 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800902c:	2308      	movs	r3, #8
 800902e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	461c      	mov	r4, r3
 8009034:	f107 0310 	add.w	r3, r7, #16
 8009038:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800903c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	3724      	adds	r7, #36	; 0x24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd90      	pop	{r4, r7, pc}

08009048 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	3303      	adds	r3, #3
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800905c:	2014      	movs	r0, #20
 800905e:	f003 fea9 	bl	800cdb4 <pvPortMalloc>
 8009062:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d046      	beq.n	80090f8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2200      	movs	r2, #0
 800907c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4618      	mov	r0, r3
 8009084:	f003 fe96 	bl	800cdb4 <pvPortMalloc>
 8009088:	4602      	mov	r2, r0
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d02b      	beq.n	80090ee <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	fb02 f303 	mul.w	r3, r2, r3
 80090a0:	4618      	mov	r0, r3
 80090a2:	f003 fe87 	bl	800cdb4 <pvPortMalloc>
 80090a6:	4602      	mov	r2, r0
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d011      	beq.n	80090d8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80090b4:	2300      	movs	r3, #0
 80090b6:	613b      	str	r3, [r7, #16]
 80090b8:	e008      	b.n	80090cc <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	4413      	add	r3, r2
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	3301      	adds	r3, #1
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d3f1      	bcc.n	80090ba <osPoolCreate+0x72>
 80090d6:	e00f      	b.n	80090f8 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4618      	mov	r0, r3
 80090de:	f003 fe77 	bl	800cdd0 <vPortFree>
        vPortFree(thePool);
 80090e2:	6978      	ldr	r0, [r7, #20]
 80090e4:	f003 fe74 	bl	800cdd0 <vPortFree>
        thePool = NULL;
 80090e8:	2300      	movs	r3, #0
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	e004      	b.n	80090f8 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80090ee:	6978      	ldr	r0, [r7, #20]
 80090f0:	f003 fe6e 	bl	800cdd0 <vPortFree>
      thePool = NULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80090f8:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b08a      	sub	sp, #40	; 0x28
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800910e:	2300      	movs	r3, #0
 8009110:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8009112:	f7ff fde5 	bl	8008ce0 <inHandlerMode>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00e      	beq.n	800913a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800911c:	f3ef 8211 	mrs	r2, BASEPRI
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	617a      	str	r2, [r7, #20]
 8009132:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009134:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8009136:	627b      	str	r3, [r7, #36]	; 0x24
 8009138:	e001      	b.n	800913e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800913a:	f002 fe6f 	bl	800be1c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	e029      	b.n	8009198 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	4413      	add	r3, r2
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6892      	ldr	r2, [r2, #8]
 8009150:	fbb3 f1f2 	udiv	r1, r3, r2
 8009154:	fb02 f201 	mul.w	r2, r2, r1
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	4413      	add	r3, r2
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d113      	bne.n	8009192 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	4413      	add	r3, r2
 8009172:	2201      	movs	r2, #1
 8009174:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4619      	mov	r1, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	fb02 f303 	mul.w	r3, r2, r3
 8009186:	440b      	add	r3, r1
 8009188:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	611a      	str	r2, [r3, #16]
      break;
 8009190:	e007      	b.n	80091a2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	3301      	adds	r3, #1
 8009196:	61fb      	str	r3, [r7, #28]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d3d0      	bcc.n	8009144 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80091a2:	f7ff fd9d 	bl	8008ce0 <inHandlerMode>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d005      	beq.n	80091b8 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	e001      	b.n	80091bc <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80091b8:	f002 fe5e 	bl	800be78 <vPortExitCritical>
  }
  
  return p;
 80091bc:	6a3b      	ldr	r3, [r7, #32]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3728      	adds	r7, #40	; 0x28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b085      	sub	sp, #20
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <osPoolFree+0x14>
    return osErrorParameter;
 80091d6:	2380      	movs	r3, #128	; 0x80
 80091d8:	e030      	b.n	800923c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <osPoolFree+0x1e>
    return osErrorParameter;
 80091e0:	2380      	movs	r3, #128	; 0x80
 80091e2:	e02b      	b.n	800923c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d201      	bcs.n	80091f2 <osPoolFree+0x2c>
    return osErrorParameter;
 80091ee:	2380      	movs	r3, #128	; 0x80
 80091f0:	e024      	b.n	800923c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	1a9b      	subs	r3, r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68da      	ldr	r2, [r3, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	fbb3 f1f2 	udiv	r1, r3, r2
 8009206:	fb02 f201 	mul.w	r2, r2, r1
 800920a:	1a9b      	subs	r3, r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <osPoolFree+0x4e>
    return osErrorParameter;
 8009210:	2380      	movs	r3, #128	; 0x80
 8009212:	e013      	b.n	800923c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	fbb2 f3f3 	udiv	r3, r2, r3
 800921e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	429a      	cmp	r2, r3
 8009228:	d301      	bcc.n	800922e <osPoolFree+0x68>
    return osErrorParameter;
 800922a:	2380      	movs	r3, #128	; 0x80
 800922c:	e006      	b.n	800923c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	2200      	movs	r2, #0
 8009238:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8009248:	b590      	push	{r4, r7, lr}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	613b      	str	r3, [r7, #16]
 800925e:	2300      	movs	r3, #0
 8009260:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689c      	ldr	r4, [r3, #8]
 8009266:	200c      	movs	r0, #12
 8009268:	f003 fda4 	bl	800cdb4 <pvPortMalloc>
 800926c:	4603      	mov	r3, r0
 800926e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <osMailCreate+0x36>
    return NULL;
 800927a:	2300      	movs	r3, #0
 800927c:	e038      	b.n	80092f0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	681c      	ldr	r4, [r3, #0]
 8009292:	2200      	movs	r2, #0
 8009294:	2104      	movs	r1, #4
 8009296:	f000 fa9c 	bl	80097d2 <xQueueGenericCreate>
 800929a:	4603      	mov	r3, r0
 800929c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d107      	bne.n	80092ba <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f003 fd8d 	bl	800cdd0 <vPortFree>
    return NULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	e01a      	b.n	80092f0 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	681c      	ldr	r4, [r3, #0]
 80092c0:	f107 030c 	add.w	r3, r7, #12
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff febf 	bl	8009048 <osPoolCreate>
 80092ca:	4603      	mov	r3, r0
 80092cc:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d107      	bne.n	80092ea <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f003 fd75 	bl	800cdd0 <vPortFree>
    return NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e002      	b.n	80092f0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	371c      	adds	r7, #28
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd90      	pop	{r4, r7, pc}

080092f8 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <osMailAlloc+0x14>
    return NULL;
 8009308:	2300      	movs	r3, #0
 800930a:	e006      	b.n	800931a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff fef6 	bl	8009102 <osPoolAlloc>
 8009316:	60f8      	str	r0, [r7, #12]
  
  return p;
 8009318:	68fb      	ldr	r3, [r7, #12]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d101      	bne.n	8009338 <osMailPut+0x14>
    return osErrorParameter;
 8009334:	2380      	movs	r3, #128	; 0x80
 8009336:	e02c      	b.n	8009392 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8009338:	2300      	movs	r3, #0
 800933a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800933c:	f7ff fcd0 	bl	8008ce0 <inHandlerMode>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d018      	beq.n	8009378 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6858      	ldr	r0, [r3, #4]
 800934a:	f107 020c 	add.w	r2, r7, #12
 800934e:	4639      	mov	r1, r7
 8009350:	2300      	movs	r3, #0
 8009352:	f000 fb97 	bl	8009a84 <xQueueGenericSendFromISR>
 8009356:	4603      	mov	r3, r0
 8009358:	2b01      	cmp	r3, #1
 800935a:	d001      	beq.n	8009360 <osMailPut+0x3c>
      return osErrorOS;
 800935c:	23ff      	movs	r3, #255	; 0xff
 800935e:	e018      	b.n	8009392 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d014      	beq.n	8009390 <osMailPut+0x6c>
 8009366:	4b0d      	ldr	r3, [pc, #52]	; (800939c <osMailPut+0x78>)
 8009368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	e00b      	b.n	8009390 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6858      	ldr	r0, [r3, #4]
 800937c:	4639      	mov	r1, r7
 800937e:	2300      	movs	r3, #0
 8009380:	2200      	movs	r2, #0
 8009382:	f000 fa85 	bl	8009890 <xQueueGenericSend>
 8009386:	4603      	mov	r3, r0
 8009388:	2b01      	cmp	r3, #1
 800938a:	d001      	beq.n	8009390 <osMailPut+0x6c>
      return osErrorOS;
 800938c:	23ff      	movs	r3, #255	; 0xff
 800938e:	e000      	b.n	8009392 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80093a0:	b590      	push	{r4, r7, lr}
 80093a2:	b08b      	sub	sp, #44	; 0x2c
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <osMailGet+0x2c>
    event.status = osErrorParameter;
 80093b6:	2380      	movs	r3, #128	; 0x80
 80093b8:	617b      	str	r3, [r7, #20]
    return event;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	461c      	mov	r4, r3
 80093be:	f107 0314 	add.w	r3, r7, #20
 80093c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093ca:	e056      	b.n	800947a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093da:	d103      	bne.n	80093e4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80093dc:	f04f 33ff 	mov.w	r3, #4294967295
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24
 80093e2:	e009      	b.n	80093f8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d006      	beq.n	80093f8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <osMailGet+0x58>
      ticks = 1;
 80093f4:	2301      	movs	r3, #1
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80093f8:	f7ff fc72 	bl	8008ce0 <inHandlerMode>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d01d      	beq.n	800943e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6858      	ldr	r0, [r3, #4]
 8009406:	f107 0220 	add.w	r2, r7, #32
 800940a:	f107 0314 	add.w	r3, r7, #20
 800940e:	3304      	adds	r3, #4
 8009410:	4619      	mov	r1, r3
 8009412:	f000 fca7 	bl	8009d64 <xQueueReceiveFromISR>
 8009416:	4603      	mov	r3, r0
 8009418:	2b01      	cmp	r3, #1
 800941a:	d102      	bne.n	8009422 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800941c:	2320      	movs	r3, #32
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	e001      	b.n	8009426 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01e      	beq.n	800946a <osMailGet+0xca>
 800942c:	4b15      	ldr	r3, [pc, #84]	; (8009484 <osMailGet+0xe4>)
 800942e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	e015      	b.n	800946a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6858      	ldr	r0, [r3, #4]
 8009442:	f107 0314 	add.w	r3, r7, #20
 8009446:	3304      	adds	r3, #4
 8009448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944a:	4619      	mov	r1, r3
 800944c:	f000 fbae 	bl	8009bac <xQueueReceive>
 8009450:	4603      	mov	r3, r0
 8009452:	2b01      	cmp	r3, #1
 8009454:	d102      	bne.n	800945c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8009456:	2320      	movs	r3, #32
 8009458:	617b      	str	r3, [r7, #20]
 800945a:	e006      	b.n	800946a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <osMailGet+0xc6>
 8009462:	2300      	movs	r3, #0
 8009464:	e000      	b.n	8009468 <osMailGet+0xc8>
 8009466:	2340      	movs	r3, #64	; 0x40
 8009468:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	461c      	mov	r4, r3
 800946e:	f107 0314 	add.w	r3, r7, #20
 8009472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009476:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	372c      	adds	r7, #44	; 0x2c
 800947e:	46bd      	mov	sp, r7
 8009480:	bd90      	pop	{r4, r7, pc}
 8009482:	bf00      	nop
 8009484:	e000ed04 	.word	0xe000ed04

08009488 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <osMailFree+0x14>
    return osErrorParameter;
 8009498:	2380      	movs	r3, #128	; 0x80
 800949a:	e006      	b.n	80094aa <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fe8f 	bl	80091c6 <osPoolFree>
 80094a8:	4603      	mov	r3, r0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f103 0208 	add.w	r2, r3, #8
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f103 0208 	add.w	r2, r3, #8
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f103 0208 	add.w	r2, r3, #8
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
}
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956a:	d103      	bne.n	8009574 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e00c      	b.n	800958e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3308      	adds	r3, #8
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	e002      	b.n	8009582 <vListInsert+0x2e>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	429a      	cmp	r2, r3
 800958c:	d2f6      	bcs.n	800957c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	601a      	str	r2, [r3, #0]
}
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095c6:	b480      	push	{r7}
 80095c8:	b085      	sub	sp, #20
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	6892      	ldr	r2, [r2, #8]
 80095dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	6852      	ldr	r2, [r2, #4]
 80095e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d103      	bne.n	80095fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	1e5a      	subs	r2, r3, #1
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
	...

0800961c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d109      	bne.n	8009644 <xQueueGenericReset+0x28>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	60bb      	str	r3, [r7, #8]
 8009642:	e7fe      	b.n	8009642 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009644:	f002 fbea 	bl	800be1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009650:	68f9      	ldr	r1, [r7, #12]
 8009652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009654:	fb01 f303 	mul.w	r3, r1, r3
 8009658:	441a      	add	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009674:	3b01      	subs	r3, #1
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800967a:	fb01 f303 	mul.w	r3, r1, r3
 800967e:	441a      	add	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	22ff      	movs	r2, #255	; 0xff
 8009688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	22ff      	movs	r2, #255	; 0xff
 8009690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d114      	bne.n	80096c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d01a      	beq.n	80096d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3310      	adds	r3, #16
 80096a6:	4618      	mov	r0, r3
 80096a8:	f001 fa0c 	bl	800aac4 <xTaskRemoveFromEventList>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d012      	beq.n	80096d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80096b2:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <xQueueGenericReset+0xcc>)
 80096b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	e009      	b.n	80096d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3310      	adds	r3, #16
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff fef2 	bl	80094b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3324      	adds	r3, #36	; 0x24
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff feed 	bl	80094b2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096d8:	f002 fbce 	bl	800be78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096dc:	2301      	movs	r3, #1
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08e      	sub	sp, #56	; 0x38
 80096f0:	af02      	add	r7, sp, #8
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d109      	bne.n	8009714 <xQueueGenericCreateStatic+0x28>
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	62bb      	str	r3, [r7, #40]	; 0x28
 8009712:	e7fe      	b.n	8009712 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d109      	bne.n	800972e <xQueueGenericCreateStatic+0x42>
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	627b      	str	r3, [r7, #36]	; 0x24
 800972c:	e7fe      	b.n	800972c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <xQueueGenericCreateStatic+0x4e>
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <xQueueGenericCreateStatic+0x52>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <xQueueGenericCreateStatic+0x54>
 800973e:	2300      	movs	r3, #0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d109      	bne.n	8009758 <xQueueGenericCreateStatic+0x6c>
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	623b      	str	r3, [r7, #32]
 8009756:	e7fe      	b.n	8009756 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d102      	bne.n	8009764 <xQueueGenericCreateStatic+0x78>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <xQueueGenericCreateStatic+0x7c>
 8009764:	2301      	movs	r3, #1
 8009766:	e000      	b.n	800976a <xQueueGenericCreateStatic+0x7e>
 8009768:	2300      	movs	r3, #0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <xQueueGenericCreateStatic+0x96>
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	61fb      	str	r3, [r7, #28]
 8009780:	e7fe      	b.n	8009780 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009782:	2348      	movs	r3, #72	; 0x48
 8009784:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b48      	cmp	r3, #72	; 0x48
 800978a:	d009      	beq.n	80097a0 <xQueueGenericCreateStatic+0xb4>
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	e7fe      	b.n	800979e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80097a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80097a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00d      	beq.n	80097c8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80097ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	4613      	mov	r3, r2
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	68b9      	ldr	r1, [r7, #8]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 f844 	bl	8009850 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3730      	adds	r7, #48	; 0x30
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b08a      	sub	sp, #40	; 0x28
 80097d6:	af02      	add	r7, sp, #8
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	4613      	mov	r3, r2
 80097de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <xQueueGenericCreate+0x28>
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	613b      	str	r3, [r7, #16]
 80097f8:	e7fe      	b.n	80097f8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d102      	bne.n	8009806 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009800:	2300      	movs	r3, #0
 8009802:	61fb      	str	r3, [r7, #28]
 8009804:	e004      	b.n	8009810 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	fb02 f303 	mul.w	r3, r2, r3
 800980e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	3348      	adds	r3, #72	; 0x48
 8009814:	4618      	mov	r0, r3
 8009816:	f003 facd 	bl	800cdb4 <pvPortMalloc>
 800981a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d011      	beq.n	8009846 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	3348      	adds	r3, #72	; 0x48
 800982a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009834:	79fa      	ldrb	r2, [r7, #7]
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4613      	mov	r3, r2
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 f805 	bl	8009850 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009846:	69bb      	ldr	r3, [r7, #24]
	}
 8009848:	4618      	mov	r0, r3
 800984a:	3720      	adds	r7, #32
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d103      	bne.n	800986c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	e002      	b.n	8009872 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800987e:	2101      	movs	r1, #1
 8009880:	69b8      	ldr	r0, [r7, #24]
 8009882:	f7ff fecb 	bl	800961c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009886:	bf00      	nop
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08e      	sub	sp, #56	; 0x38
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
 800989c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800989e:	2300      	movs	r3, #0
 80098a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <xQueueGenericSend+0x30>
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80098be:	e7fe      	b.n	80098be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d103      	bne.n	80098ce <xQueueGenericSend+0x3e>
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <xQueueGenericSend+0x42>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <xQueueGenericSend+0x44>
 80098d2:	2300      	movs	r3, #0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d109      	bne.n	80098ec <xQueueGenericSend+0x5c>
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	627b      	str	r3, [r7, #36]	; 0x24
 80098ea:	e7fe      	b.n	80098ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d103      	bne.n	80098fa <xQueueGenericSend+0x6a>
 80098f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d101      	bne.n	80098fe <xQueueGenericSend+0x6e>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e000      	b.n	8009900 <xQueueGenericSend+0x70>
 80098fe:	2300      	movs	r3, #0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d109      	bne.n	8009918 <xQueueGenericSend+0x88>
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	623b      	str	r3, [r7, #32]
 8009916:	e7fe      	b.n	8009916 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009918:	f001 fa90 	bl	800ae3c <xTaskGetSchedulerState>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d102      	bne.n	8009928 <xQueueGenericSend+0x98>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <xQueueGenericSend+0x9c>
 8009928:	2301      	movs	r3, #1
 800992a:	e000      	b.n	800992e <xQueueGenericSend+0x9e>
 800992c:	2300      	movs	r3, #0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d109      	bne.n	8009946 <xQueueGenericSend+0xb6>
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	e7fe      	b.n	8009944 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009946:	f002 fa69 	bl	800be1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009952:	429a      	cmp	r2, r3
 8009954:	d302      	bcc.n	800995c <xQueueGenericSend+0xcc>
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b02      	cmp	r3, #2
 800995a:	d129      	bne.n	80099b0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	68b9      	ldr	r1, [r7, #8]
 8009960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009962:	f000 fa7c 	bl	8009e5e <prvCopyDataToQueue>
 8009966:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	2b00      	cmp	r3, #0
 800996e:	d010      	beq.n	8009992 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	3324      	adds	r3, #36	; 0x24
 8009974:	4618      	mov	r0, r3
 8009976:	f001 f8a5 	bl	800aac4 <xTaskRemoveFromEventList>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d013      	beq.n	80099a8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009980:	4b3f      	ldr	r3, [pc, #252]	; (8009a80 <xQueueGenericSend+0x1f0>)
 8009982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	e00a      	b.n	80099a8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d007      	beq.n	80099a8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009998:	4b39      	ldr	r3, [pc, #228]	; (8009a80 <xQueueGenericSend+0x1f0>)
 800999a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80099a8:	f002 fa66 	bl	800be78 <vPortExitCritical>
				return pdPASS;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e063      	b.n	8009a78 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d103      	bne.n	80099be <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099b6:	f002 fa5f 	bl	800be78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	e05c      	b.n	8009a78 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d106      	bne.n	80099d2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099c4:	f107 0314 	add.w	r3, r7, #20
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 f8dd 	bl	800ab88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099ce:	2301      	movs	r3, #1
 80099d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099d2:	f002 fa51 	bl	800be78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099d6:	f000 fe53 	bl	800a680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099da:	f002 fa1f 	bl	800be1c <vPortEnterCritical>
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099e4:	b25b      	sxtb	r3, r3
 80099e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ea:	d103      	bne.n	80099f4 <xQueueGenericSend+0x164>
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099fa:	b25b      	sxtb	r3, r3
 80099fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a00:	d103      	bne.n	8009a0a <xQueueGenericSend+0x17a>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a0a:	f002 fa35 	bl	800be78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a0e:	1d3a      	adds	r2, r7, #4
 8009a10:	f107 0314 	add.w	r3, r7, #20
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f001 f8cc 	bl	800abb4 <xTaskCheckForTimeOut>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d124      	bne.n	8009a6c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a24:	f000 fb13 	bl	800a04e <prvIsQueueFull>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d018      	beq.n	8009a60 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	3310      	adds	r3, #16
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fff6 	bl	800aa28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a3e:	f000 fa9e 	bl	8009f7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a42:	f000 fe2b 	bl	800a69c <xTaskResumeAll>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f47f af7c 	bne.w	8009946 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009a4e:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <xQueueGenericSend+0x1f0>)
 8009a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	e772      	b.n	8009946 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a62:	f000 fa8c 	bl	8009f7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a66:	f000 fe19 	bl	800a69c <xTaskResumeAll>
 8009a6a:	e76c      	b.n	8009946 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a6e:	f000 fa86 	bl	8009f7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a72:	f000 fe13 	bl	800a69c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3738      	adds	r7, #56	; 0x38
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08e      	sub	sp, #56	; 0x38
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d109      	bne.n	8009ab0 <xQueueGenericSendFromISR+0x2c>
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
 8009aae:	e7fe      	b.n	8009aae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d103      	bne.n	8009abe <xQueueGenericSendFromISR+0x3a>
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <xQueueGenericSendFromISR+0x3e>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e000      	b.n	8009ac4 <xQueueGenericSendFromISR+0x40>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d109      	bne.n	8009adc <xQueueGenericSendFromISR+0x58>
 8009ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	623b      	str	r3, [r7, #32]
 8009ada:	e7fe      	b.n	8009ada <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d103      	bne.n	8009aea <xQueueGenericSendFromISR+0x66>
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d101      	bne.n	8009aee <xQueueGenericSendFromISR+0x6a>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <xQueueGenericSendFromISR+0x6c>
 8009aee:	2300      	movs	r3, #0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d109      	bne.n	8009b08 <xQueueGenericSendFromISR+0x84>
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	61fb      	str	r3, [r7, #28]
 8009b06:	e7fe      	b.n	8009b06 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b08:	f002 fa64 	bl	800bfd4 <vPortValidateInterruptPriority>
	__asm volatile
 8009b0c:	f3ef 8211 	mrs	r2, BASEPRI
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	61ba      	str	r2, [r7, #24]
 8009b22:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b24:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b26:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d302      	bcc.n	8009b3a <xQueueGenericSendFromISR+0xb6>
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d12c      	bne.n	8009b94 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b4a:	f000 f988 	bl	8009e5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b4e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b56:	d112      	bne.n	8009b7e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d016      	beq.n	8009b8e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	3324      	adds	r3, #36	; 0x24
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 ffad 	bl	800aac4 <xTaskRemoveFromEventList>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00e      	beq.n	8009b8e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00b      	beq.n	8009b8e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e007      	b.n	8009b8e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b82:	3301      	adds	r3, #1
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	b25a      	sxtb	r2, r3
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009b92:	e001      	b.n	8009b98 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b94:	2300      	movs	r3, #0
 8009b96:	637b      	str	r3, [r7, #52]	; 0x34
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3738      	adds	r7, #56	; 0x38
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08c      	sub	sp, #48	; 0x30
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d109      	bne.n	8009bda <xQueueReceive+0x2e>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	623b      	str	r3, [r7, #32]
 8009bd8:	e7fe      	b.n	8009bd8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d103      	bne.n	8009be8 <xQueueReceive+0x3c>
 8009be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <xQueueReceive+0x40>
 8009be8:	2301      	movs	r3, #1
 8009bea:	e000      	b.n	8009bee <xQueueReceive+0x42>
 8009bec:	2300      	movs	r3, #0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d109      	bne.n	8009c06 <xQueueReceive+0x5a>
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	61fb      	str	r3, [r7, #28]
 8009c04:	e7fe      	b.n	8009c04 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c06:	f001 f919 	bl	800ae3c <xTaskGetSchedulerState>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d102      	bne.n	8009c16 <xQueueReceive+0x6a>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <xQueueReceive+0x6e>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e000      	b.n	8009c1c <xQueueReceive+0x70>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d109      	bne.n	8009c34 <xQueueReceive+0x88>
 8009c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	61bb      	str	r3, [r7, #24]
 8009c32:	e7fe      	b.n	8009c32 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c34:	f002 f8f2 	bl	800be1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01f      	beq.n	8009c84 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c48:	f000 f973 	bl	8009f32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	1e5a      	subs	r2, r3, #1
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00f      	beq.n	8009c7c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5e:	3310      	adds	r3, #16
 8009c60:	4618      	mov	r0, r3
 8009c62:	f000 ff2f 	bl	800aac4 <xTaskRemoveFromEventList>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d007      	beq.n	8009c7c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c6c:	4b3c      	ldr	r3, [pc, #240]	; (8009d60 <xQueueReceive+0x1b4>)
 8009c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c7c:	f002 f8fc 	bl	800be78 <vPortExitCritical>
				return pdPASS;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e069      	b.n	8009d58 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d103      	bne.n	8009c92 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c8a:	f002 f8f5 	bl	800be78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e062      	b.n	8009d58 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d106      	bne.n	8009ca6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c98:	f107 0310 	add.w	r3, r7, #16
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 ff73 	bl	800ab88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ca6:	f002 f8e7 	bl	800be78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009caa:	f000 fce9 	bl	800a680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cae:	f002 f8b5 	bl	800be1c <vPortEnterCritical>
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cb8:	b25b      	sxtb	r3, r3
 8009cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbe:	d103      	bne.n	8009cc8 <xQueueReceive+0x11c>
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cce:	b25b      	sxtb	r3, r3
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd4:	d103      	bne.n	8009cde <xQueueReceive+0x132>
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cde:	f002 f8cb 	bl	800be78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ce2:	1d3a      	adds	r2, r7, #4
 8009ce4:	f107 0310 	add.w	r3, r7, #16
 8009ce8:	4611      	mov	r1, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 ff62 	bl	800abb4 <xTaskCheckForTimeOut>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d123      	bne.n	8009d3e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cf8:	f000 f993 	bl	800a022 <prvIsQueueEmpty>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d017      	beq.n	8009d32 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d04:	3324      	adds	r3, #36	; 0x24
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 fe8c 	bl	800aa28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d12:	f000 f934 	bl	8009f7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d16:	f000 fcc1 	bl	800a69c <xTaskResumeAll>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d189      	bne.n	8009c34 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009d20:	4b0f      	ldr	r3, [pc, #60]	; (8009d60 <xQueueReceive+0x1b4>)
 8009d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	e780      	b.n	8009c34 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d34:	f000 f923 	bl	8009f7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d38:	f000 fcb0 	bl	800a69c <xTaskResumeAll>
 8009d3c:	e77a      	b.n	8009c34 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d40:	f000 f91d 	bl	8009f7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d44:	f000 fcaa 	bl	800a69c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d4a:	f000 f96a 	bl	800a022 <prvIsQueueEmpty>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f43f af6f 	beq.w	8009c34 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3730      	adds	r7, #48	; 0x30
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	e000ed04 	.word	0xe000ed04

08009d64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08e      	sub	sp, #56	; 0x38
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <xQueueReceiveFromISR+0x2a>
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	623b      	str	r3, [r7, #32]
 8009d8c:	e7fe      	b.n	8009d8c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d103      	bne.n	8009d9c <xQueueReceiveFromISR+0x38>
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <xQueueReceiveFromISR+0x3c>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e000      	b.n	8009da2 <xQueueReceiveFromISR+0x3e>
 8009da0:	2300      	movs	r3, #0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d109      	bne.n	8009dba <xQueueReceiveFromISR+0x56>
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	e7fe      	b.n	8009db8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dba:	f002 f90b 	bl	800bfd4 <vPortValidateInterruptPriority>
	__asm volatile
 8009dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	61ba      	str	r2, [r7, #24]
 8009dd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009dd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d02f      	beq.n	8009e46 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009df0:	68b9      	ldr	r1, [r7, #8]
 8009df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009df4:	f000 f89d 	bl	8009f32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	1e5a      	subs	r2, r3, #1
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e08:	d112      	bne.n	8009e30 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d016      	beq.n	8009e40 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	3310      	adds	r3, #16
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 fe54 	bl	800aac4 <xTaskRemoveFromEventList>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00e      	beq.n	8009e40 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	e007      	b.n	8009e40 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e34:	3301      	adds	r3, #1
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	b25a      	sxtb	r2, r3
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009e40:	2301      	movs	r3, #1
 8009e42:	637b      	str	r3, [r7, #52]	; 0x34
 8009e44:	e001      	b.n	8009e4a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3738      	adds	r7, #56	; 0x38
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60f8      	str	r0, [r7, #12]
 8009e66:	60b9      	str	r1, [r7, #8]
 8009e68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10d      	bne.n	8009e98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d14d      	bne.n	8009f20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fff5 	bl	800ae78 <xTaskPriorityDisinherit>
 8009e8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	609a      	str	r2, [r3, #8]
 8009e96:	e043      	b.n	8009f20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d119      	bne.n	8009ed2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6858      	ldr	r0, [r3, #4]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	f005 fb37 	bl	800f51c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	441a      	add	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d32b      	bcc.n	8009f20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	605a      	str	r2, [r3, #4]
 8009ed0:	e026      	b.n	8009f20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68d8      	ldr	r0, [r3, #12]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eda:	461a      	mov	r2, r3
 8009edc:	68b9      	ldr	r1, [r7, #8]
 8009ede:	f005 fb1d 	bl	800f51c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	425b      	negs	r3, r3
 8009eec:	441a      	add	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	68da      	ldr	r2, [r3, #12]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d207      	bcs.n	8009f0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	689a      	ldr	r2, [r3, #8]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f06:	425b      	negs	r3, r3
 8009f08:	441a      	add	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d105      	bne.n	8009f20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009f28:	697b      	ldr	r3, [r7, #20]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b082      	sub	sp, #8
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d018      	beq.n	8009f76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	68da      	ldr	r2, [r3, #12]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4c:	441a      	add	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d303      	bcc.n	8009f66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68d9      	ldr	r1, [r3, #12]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6e:	461a      	mov	r2, r3
 8009f70:	6838      	ldr	r0, [r7, #0]
 8009f72:	f005 fad3 	bl	800f51c <memcpy>
	}
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f86:	f001 ff49 	bl	800be1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f92:	e011      	b.n	8009fb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d012      	beq.n	8009fc2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3324      	adds	r3, #36	; 0x24
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fd8f 	bl	800aac4 <xTaskRemoveFromEventList>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fac:	f000 fe62 	bl	800ac74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	dce9      	bgt.n	8009f94 <prvUnlockQueue+0x16>
 8009fc0:	e000      	b.n	8009fc4 <prvUnlockQueue+0x46>
					break;
 8009fc2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	22ff      	movs	r2, #255	; 0xff
 8009fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009fcc:	f001 ff54 	bl	800be78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009fd0:	f001 ff24 	bl	800be1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fdc:	e011      	b.n	800a002 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d012      	beq.n	800a00c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3310      	adds	r3, #16
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fd6a 	bl	800aac4 <xTaskRemoveFromEventList>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ff6:	f000 fe3d 	bl	800ac74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a006:	2b00      	cmp	r3, #0
 800a008:	dce9      	bgt.n	8009fde <prvUnlockQueue+0x60>
 800a00a:	e000      	b.n	800a00e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a00c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	22ff      	movs	r2, #255	; 0xff
 800a012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a016:	f001 ff2f 	bl	800be78 <vPortExitCritical>
}
 800a01a:	bf00      	nop
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b084      	sub	sp, #16
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a02a:	f001 fef7 	bl	800be1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a032:	2b00      	cmp	r3, #0
 800a034:	d102      	bne.n	800a03c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a036:	2301      	movs	r3, #1
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	e001      	b.n	800a040 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a040:	f001 ff1a 	bl	800be78 <vPortExitCritical>

	return xReturn;
 800a044:	68fb      	ldr	r3, [r7, #12]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a056:	f001 fee1 	bl	800be1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a062:	429a      	cmp	r2, r3
 800a064:	d102      	bne.n	800a06c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a066:	2301      	movs	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e001      	b.n	800a070 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a06c:	2300      	movs	r3, #0
 800a06e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a070:	f001 ff02 	bl	800be78 <vPortExitCritical>

	return xReturn;
 800a074:	68fb      	ldr	r3, [r7, #12]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a08a:	2300      	movs	r3, #0
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	e014      	b.n	800a0ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a090:	4a0e      	ldr	r2, [pc, #56]	; (800a0cc <vQueueAddToRegistry+0x4c>)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10b      	bne.n	800a0b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a09c:	490b      	ldr	r1, [pc, #44]	; (800a0cc <vQueueAddToRegistry+0x4c>)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0a6:	4a09      	ldr	r2, [pc, #36]	; (800a0cc <vQueueAddToRegistry+0x4c>)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	4413      	add	r3, r2
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0b2:	e005      	b.n	800a0c0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b07      	cmp	r3, #7
 800a0be:	d9e7      	bls.n	800a090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0c0:	bf00      	nop
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	200010b0 	.word	0x200010b0

0800a0d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0e0:	f001 fe9c 	bl	800be1c <vPortEnterCritical>
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0ea:	b25b      	sxtb	r3, r3
 800a0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f0:	d103      	bne.n	800a0fa <vQueueWaitForMessageRestricted+0x2a>
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a100:	b25b      	sxtb	r3, r3
 800a102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a106:	d103      	bne.n	800a110 <vQueueWaitForMessageRestricted+0x40>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a110:	f001 feb2 	bl	800be78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d106      	bne.n	800a12a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	3324      	adds	r3, #36	; 0x24
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	4618      	mov	r0, r3
 800a126:	f000 fca3 	bl	800aa70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a12a:	6978      	ldr	r0, [r7, #20]
 800a12c:	f7ff ff27 	bl	8009f7e <prvUnlockQueue>
	}
 800a130:	bf00      	nop
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b08e      	sub	sp, #56	; 0x38
 800a13c:	af04      	add	r7, sp, #16
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
 800a144:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d109      	bne.n	800a160 <xTaskCreateStatic+0x28>
	__asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	623b      	str	r3, [r7, #32]
 800a15e:	e7fe      	b.n	800a15e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	2b00      	cmp	r3, #0
 800a164:	d109      	bne.n	800a17a <xTaskCreateStatic+0x42>
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	61fb      	str	r3, [r7, #28]
 800a178:	e7fe      	b.n	800a178 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a17a:	23b4      	movs	r3, #180	; 0xb4
 800a17c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2bb4      	cmp	r3, #180	; 0xb4
 800a182:	d009      	beq.n	800a198 <xTaskCreateStatic+0x60>
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	61bb      	str	r3, [r7, #24]
 800a196:	e7fe      	b.n	800a196 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a198:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d01e      	beq.n	800a1de <xTaskCreateStatic+0xa6>
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d01b      	beq.n	800a1de <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	9302      	str	r3, [sp, #8]
 800a1c0:	f107 0314 	add.w	r3, r7, #20
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	68b9      	ldr	r1, [r7, #8]
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 f851 	bl	800a278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1d8:	f000 f8ec 	bl	800a3b4 <prvAddNewTaskToReadyList>
 800a1dc:	e001      	b.n	800a1e2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1e2:	697b      	ldr	r3, [r7, #20]
	}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3728      	adds	r7, #40	; 0x28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08c      	sub	sp, #48	; 0x30
 800a1f0:	af04      	add	r7, sp, #16
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1fc:	88fb      	ldrh	r3, [r7, #6]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4618      	mov	r0, r3
 800a202:	f002 fdd7 	bl	800cdb4 <pvPortMalloc>
 800a206:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00e      	beq.n	800a22c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a20e:	20b4      	movs	r0, #180	; 0xb4
 800a210:	f002 fdd0 	bl	800cdb4 <pvPortMalloc>
 800a214:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	631a      	str	r2, [r3, #48]	; 0x30
 800a222:	e005      	b.n	800a230 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a224:	6978      	ldr	r0, [r7, #20]
 800a226:	f002 fdd3 	bl	800cdd0 <vPortFree>
 800a22a:	e001      	b.n	800a230 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a22c:	2300      	movs	r3, #0
 800a22e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d017      	beq.n	800a266 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a23e:	88fa      	ldrh	r2, [r7, #6]
 800a240:	2300      	movs	r3, #0
 800a242:	9303      	str	r3, [sp, #12]
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	9302      	str	r3, [sp, #8]
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	9301      	str	r3, [sp, #4]
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	68b9      	ldr	r1, [r7, #8]
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 f80f 	bl	800a278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a25a:	69f8      	ldr	r0, [r7, #28]
 800a25c:	f000 f8aa 	bl	800a3b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a260:	2301      	movs	r3, #1
 800a262:	61bb      	str	r3, [r7, #24]
 800a264:	e002      	b.n	800a26c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a266:	f04f 33ff 	mov.w	r3, #4294967295
 800a26a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a26c:	69bb      	ldr	r3, [r7, #24]
	}
 800a26e:	4618      	mov	r0, r3
 800a270:	3720      	adds	r7, #32
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a290:	3b01      	subs	r3, #1
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	f023 0307 	bic.w	r3, r3, #7
 800a29e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	f003 0307 	and.w	r3, r3, #7
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d009      	beq.n	800a2be <prvInitialiseNewTask+0x46>
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	e7fe      	b.n	800a2bc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d01f      	beq.n	800a304 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]
 800a2c8:	e012      	b.n	800a2f0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	7819      	ldrb	r1, [r3, #0]
 800a2d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	3334      	adds	r3, #52	; 0x34
 800a2da:	460a      	mov	r2, r1
 800a2dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d006      	beq.n	800a2f8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	61fb      	str	r3, [r7, #28]
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	2b0f      	cmp	r3, #15
 800a2f4:	d9e9      	bls.n	800a2ca <prvInitialiseNewTask+0x52>
 800a2f6:	e000      	b.n	800a2fa <prvInitialiseNewTask+0x82>
			{
				break;
 800a2f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a302:	e003      	b.n	800a30c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	2b06      	cmp	r3, #6
 800a310:	d901      	bls.n	800a316 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a312:	2306      	movs	r3, #6
 800a314:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a31a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a320:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	2200      	movs	r2, #0
 800a326:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	3304      	adds	r3, #4
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff f8e0 	bl	80094f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	3318      	adds	r3, #24
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff f8db 	bl	80094f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a340:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	f1c3 0207 	rsb	r2, r3, #7
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a350:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	2200      	movs	r2, #0
 800a356:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	334c      	adds	r3, #76	; 0x4c
 800a366:	2260      	movs	r2, #96	; 0x60
 800a368:	2100      	movs	r1, #0
 800a36a:	4618      	mov	r0, r3
 800a36c:	f005 f8e1 	bl	800f532 <memset>
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	4a0d      	ldr	r2, [pc, #52]	; (800a3a8 <prvInitialiseNewTask+0x130>)
 800a374:	651a      	str	r2, [r3, #80]	; 0x50
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	4a0c      	ldr	r2, [pc, #48]	; (800a3ac <prvInitialiseNewTask+0x134>)
 800a37a:	655a      	str	r2, [r3, #84]	; 0x54
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	4a0c      	ldr	r2, [pc, #48]	; (800a3b0 <prvInitialiseNewTask+0x138>)
 800a380:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	68f9      	ldr	r1, [r7, #12]
 800a386:	69b8      	ldr	r0, [r7, #24]
 800a388:	f001 fc20 	bl	800bbcc <pxPortInitialiseStack>
 800a38c:	4602      	mov	r2, r0
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <prvInitialiseNewTask+0x126>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a39e:	bf00      	nop
 800a3a0:	3720      	adds	r7, #32
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	08012250 	.word	0x08012250
 800a3ac:	08012270 	.word	0x08012270
 800a3b0:	08012230 	.word	0x08012230

0800a3b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3bc:	f001 fd2e 	bl	800be1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3c0:	4b2a      	ldr	r3, [pc, #168]	; (800a46c <prvAddNewTaskToReadyList+0xb8>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	4a29      	ldr	r2, [pc, #164]	; (800a46c <prvAddNewTaskToReadyList+0xb8>)
 800a3c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3ca:	4b29      	ldr	r3, [pc, #164]	; (800a470 <prvAddNewTaskToReadyList+0xbc>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d109      	bne.n	800a3e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3d2:	4a27      	ldr	r2, [pc, #156]	; (800a470 <prvAddNewTaskToReadyList+0xbc>)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3d8:	4b24      	ldr	r3, [pc, #144]	; (800a46c <prvAddNewTaskToReadyList+0xb8>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d110      	bne.n	800a402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3e0:	f000 fc6c 	bl	800acbc <prvInitialiseTaskLists>
 800a3e4:	e00d      	b.n	800a402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3e6:	4b23      	ldr	r3, [pc, #140]	; (800a474 <prvAddNewTaskToReadyList+0xc0>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d109      	bne.n	800a402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3ee:	4b20      	ldr	r3, [pc, #128]	; (800a470 <prvAddNewTaskToReadyList+0xbc>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d802      	bhi.n	800a402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3fc:	4a1c      	ldr	r2, [pc, #112]	; (800a470 <prvAddNewTaskToReadyList+0xbc>)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a402:	4b1d      	ldr	r3, [pc, #116]	; (800a478 <prvAddNewTaskToReadyList+0xc4>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3301      	adds	r3, #1
 800a408:	4a1b      	ldr	r2, [pc, #108]	; (800a478 <prvAddNewTaskToReadyList+0xc4>)
 800a40a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	2201      	movs	r2, #1
 800a412:	409a      	lsls	r2, r3
 800a414:	4b19      	ldr	r3, [pc, #100]	; (800a47c <prvAddNewTaskToReadyList+0xc8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4313      	orrs	r3, r2
 800a41a:	4a18      	ldr	r2, [pc, #96]	; (800a47c <prvAddNewTaskToReadyList+0xc8>)
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a422:	4613      	mov	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4413      	add	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4a15      	ldr	r2, [pc, #84]	; (800a480 <prvAddNewTaskToReadyList+0xcc>)
 800a42c:	441a      	add	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3304      	adds	r3, #4
 800a432:	4619      	mov	r1, r3
 800a434:	4610      	mov	r0, r2
 800a436:	f7ff f869 	bl	800950c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a43a:	f001 fd1d 	bl	800be78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a43e:	4b0d      	ldr	r3, [pc, #52]	; (800a474 <prvAddNewTaskToReadyList+0xc0>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00e      	beq.n	800a464 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a446:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <prvAddNewTaskToReadyList+0xbc>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	429a      	cmp	r2, r3
 800a452:	d207      	bcs.n	800a464 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a454:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <prvAddNewTaskToReadyList+0xd0>)
 800a456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20000380 	.word	0x20000380
 800a470:	20000280 	.word	0x20000280
 800a474:	2000038c 	.word	0x2000038c
 800a478:	2000039c 	.word	0x2000039c
 800a47c:	20000388 	.word	0x20000388
 800a480:	20000284 	.word	0x20000284
 800a484:	e000ed04 	.word	0xe000ed04

0800a488 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a490:	f001 fcc4 	bl	800be1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d102      	bne.n	800a4a0 <vTaskDelete+0x18>
 800a49a:	4b38      	ldr	r3, [pc, #224]	; (800a57c <vTaskDelete+0xf4>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	e000      	b.n	800a4a2 <vTaskDelete+0x1a>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff f88c 	bl	80095c6 <uxListRemove>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d115      	bne.n	800a4e0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b8:	4931      	ldr	r1, [pc, #196]	; (800a580 <vTaskDelete+0xf8>)
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	440b      	add	r3, r1
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10a      	bne.n	800a4e0 <vTaskDelete+0x58>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d4:	43da      	mvns	r2, r3
 800a4d6:	4b2b      	ldr	r3, [pc, #172]	; (800a584 <vTaskDelete+0xfc>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	4a29      	ldr	r2, [pc, #164]	; (800a584 <vTaskDelete+0xfc>)
 800a4de:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d004      	beq.n	800a4f2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3318      	adds	r3, #24
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff f86a 	bl	80095c6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a4f2:	4b25      	ldr	r3, [pc, #148]	; (800a588 <vTaskDelete+0x100>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	4a23      	ldr	r2, [pc, #140]	; (800a588 <vTaskDelete+0x100>)
 800a4fa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a4fc:	4b1f      	ldr	r3, [pc, #124]	; (800a57c <vTaskDelete+0xf4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	429a      	cmp	r2, r3
 800a504:	d10b      	bne.n	800a51e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3304      	adds	r3, #4
 800a50a:	4619      	mov	r1, r3
 800a50c:	481f      	ldr	r0, [pc, #124]	; (800a58c <vTaskDelete+0x104>)
 800a50e:	f7fe fffd 	bl	800950c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a512:	4b1f      	ldr	r3, [pc, #124]	; (800a590 <vTaskDelete+0x108>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3301      	adds	r3, #1
 800a518:	4a1d      	ldr	r2, [pc, #116]	; (800a590 <vTaskDelete+0x108>)
 800a51a:	6013      	str	r3, [r2, #0]
 800a51c:	e009      	b.n	800a532 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a51e:	4b1d      	ldr	r3, [pc, #116]	; (800a594 <vTaskDelete+0x10c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	3b01      	subs	r3, #1
 800a524:	4a1b      	ldr	r2, [pc, #108]	; (800a594 <vTaskDelete+0x10c>)
 800a526:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 fc33 	bl	800ad94 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a52e:	f000 fc65 	bl	800adfc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800a532:	f001 fca1 	bl	800be78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a536:	4b18      	ldr	r3, [pc, #96]	; (800a598 <vTaskDelete+0x110>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01a      	beq.n	800a574 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800a53e:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <vTaskDelete+0xf4>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	429a      	cmp	r2, r3
 800a546:	d115      	bne.n	800a574 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a548:	4b14      	ldr	r3, [pc, #80]	; (800a59c <vTaskDelete+0x114>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d009      	beq.n	800a564 <vTaskDelete+0xdc>
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	60bb      	str	r3, [r7, #8]
 800a562:	e7fe      	b.n	800a562 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800a564:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <vTaskDelete+0x118>)
 800a566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a574:	bf00      	nop
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20000280 	.word	0x20000280
 800a580:	20000284 	.word	0x20000284
 800a584:	20000388 	.word	0x20000388
 800a588:	2000039c 	.word	0x2000039c
 800a58c:	20000354 	.word	0x20000354
 800a590:	20000368 	.word	0x20000368
 800a594:	20000380 	.word	0x20000380
 800a598:	2000038c 	.word	0x2000038c
 800a59c:	200003a8 	.word	0x200003a8
 800a5a0:	e000ed04 	.word	0xe000ed04

0800a5a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b08a      	sub	sp, #40	; 0x28
 800a5a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5b2:	463a      	mov	r2, r7
 800a5b4:	1d39      	adds	r1, r7, #4
 800a5b6:	f107 0308 	add.w	r3, r7, #8
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f002 fa24 	bl	800ca08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	9202      	str	r2, [sp, #8]
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	460a      	mov	r2, r1
 800a5d2:	4923      	ldr	r1, [pc, #140]	; (800a660 <vTaskStartScheduler+0xbc>)
 800a5d4:	4823      	ldr	r0, [pc, #140]	; (800a664 <vTaskStartScheduler+0xc0>)
 800a5d6:	f7ff fdaf 	bl	800a138 <xTaskCreateStatic>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	4b22      	ldr	r3, [pc, #136]	; (800a668 <vTaskStartScheduler+0xc4>)
 800a5de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5e0:	4b21      	ldr	r3, [pc, #132]	; (800a668 <vTaskStartScheduler+0xc4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	617b      	str	r3, [r7, #20]
 800a5ec:	e001      	b.n	800a5f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d102      	bne.n	800a5fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a5f8:	f000 ff22 	bl	800b440 <xTimerCreateTimerTask>
 800a5fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d11a      	bne.n	800a63a <vTaskStartScheduler+0x96>
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a616:	4b15      	ldr	r3, [pc, #84]	; (800a66c <vTaskStartScheduler+0xc8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	334c      	adds	r3, #76	; 0x4c
 800a61c:	4a14      	ldr	r2, [pc, #80]	; (800a670 <vTaskStartScheduler+0xcc>)
 800a61e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a620:	4b14      	ldr	r3, [pc, #80]	; (800a674 <vTaskStartScheduler+0xd0>)
 800a622:	f04f 32ff 	mov.w	r2, #4294967295
 800a626:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a628:	4b13      	ldr	r3, [pc, #76]	; (800a678 <vTaskStartScheduler+0xd4>)
 800a62a:	2201      	movs	r2, #1
 800a62c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a62e:	4b13      	ldr	r3, [pc, #76]	; (800a67c <vTaskStartScheduler+0xd8>)
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a634:	f001 fb54 	bl	800bce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a638:	e00d      	b.n	800a656 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d109      	bne.n	800a656 <vTaskStartScheduler+0xb2>
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e7fe      	b.n	800a654 <vTaskStartScheduler+0xb0>
}
 800a656:	bf00      	nop
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	08011bf8 	.word	0x08011bf8
 800a664:	0800ac8d 	.word	0x0800ac8d
 800a668:	200003a4 	.word	0x200003a4
 800a66c:	20000280 	.word	0x20000280
 800a670:	20000094 	.word	0x20000094
 800a674:	200003a0 	.word	0x200003a0
 800a678:	2000038c 	.word	0x2000038c
 800a67c:	20000384 	.word	0x20000384

0800a680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a684:	4b04      	ldr	r3, [pc, #16]	; (800a698 <vTaskSuspendAll+0x18>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3301      	adds	r3, #1
 800a68a:	4a03      	ldr	r2, [pc, #12]	; (800a698 <vTaskSuspendAll+0x18>)
 800a68c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a68e:	bf00      	nop
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr
 800a698:	200003a8 	.word	0x200003a8

0800a69c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6aa:	4b41      	ldr	r3, [pc, #260]	; (800a7b0 <xTaskResumeAll+0x114>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <xTaskResumeAll+0x2a>
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	e7fe      	b.n	800a6c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6c6:	f001 fba9 	bl	800be1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6ca:	4b39      	ldr	r3, [pc, #228]	; (800a7b0 <xTaskResumeAll+0x114>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4a37      	ldr	r2, [pc, #220]	; (800a7b0 <xTaskResumeAll+0x114>)
 800a6d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6d4:	4b36      	ldr	r3, [pc, #216]	; (800a7b0 <xTaskResumeAll+0x114>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d161      	bne.n	800a7a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6dc:	4b35      	ldr	r3, [pc, #212]	; (800a7b4 <xTaskResumeAll+0x118>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d05d      	beq.n	800a7a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6e4:	e02e      	b.n	800a744 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e6:	4b34      	ldr	r3, [pc, #208]	; (800a7b8 <xTaskResumeAll+0x11c>)
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3318      	adds	r3, #24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe ff67 	bl	80095c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fe ff62 	bl	80095c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a706:	2201      	movs	r2, #1
 800a708:	409a      	lsls	r2, r3
 800a70a:	4b2c      	ldr	r3, [pc, #176]	; (800a7bc <xTaskResumeAll+0x120>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4313      	orrs	r3, r2
 800a710:	4a2a      	ldr	r2, [pc, #168]	; (800a7bc <xTaskResumeAll+0x120>)
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a718:	4613      	mov	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4a27      	ldr	r2, [pc, #156]	; (800a7c0 <xTaskResumeAll+0x124>)
 800a722:	441a      	add	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3304      	adds	r3, #4
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f7fe feee 	bl	800950c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a734:	4b23      	ldr	r3, [pc, #140]	; (800a7c4 <xTaskResumeAll+0x128>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d302      	bcc.n	800a744 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a73e:	4b22      	ldr	r3, [pc, #136]	; (800a7c8 <xTaskResumeAll+0x12c>)
 800a740:	2201      	movs	r2, #1
 800a742:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a744:	4b1c      	ldr	r3, [pc, #112]	; (800a7b8 <xTaskResumeAll+0x11c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1cc      	bne.n	800a6e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a752:	f000 fb53 	bl	800adfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a756:	4b1d      	ldr	r3, [pc, #116]	; (800a7cc <xTaskResumeAll+0x130>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d010      	beq.n	800a784 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a762:	f000 f847 	bl	800a7f4 <xTaskIncrementTick>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a76c:	4b16      	ldr	r3, [pc, #88]	; (800a7c8 <xTaskResumeAll+0x12c>)
 800a76e:	2201      	movs	r2, #1
 800a770:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3b01      	subs	r3, #1
 800a776:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1f1      	bne.n	800a762 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a77e:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <xTaskResumeAll+0x130>)
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a784:	4b10      	ldr	r3, [pc, #64]	; (800a7c8 <xTaskResumeAll+0x12c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d009      	beq.n	800a7a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a78c:	2301      	movs	r3, #1
 800a78e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a790:	4b0f      	ldr	r3, [pc, #60]	; (800a7d0 <xTaskResumeAll+0x134>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7a0:	f001 fb6a 	bl	800be78 <vPortExitCritical>

	return xAlreadyYielded;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200003a8 	.word	0x200003a8
 800a7b4:	20000380 	.word	0x20000380
 800a7b8:	20000340 	.word	0x20000340
 800a7bc:	20000388 	.word	0x20000388
 800a7c0:	20000284 	.word	0x20000284
 800a7c4:	20000280 	.word	0x20000280
 800a7c8:	20000394 	.word	0x20000394
 800a7cc:	20000390 	.word	0x20000390
 800a7d0:	e000ed04 	.word	0xe000ed04

0800a7d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7da:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <xTaskGetTickCount+0x1c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7e0:	687b      	ldr	r3, [r7, #4]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	20000384 	.word	0x20000384

0800a7f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7fe:	4b4e      	ldr	r3, [pc, #312]	; (800a938 <xTaskIncrementTick+0x144>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f040 8087 	bne.w	800a916 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a808:	4b4c      	ldr	r3, [pc, #304]	; (800a93c <xTaskIncrementTick+0x148>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3301      	adds	r3, #1
 800a80e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a810:	4a4a      	ldr	r2, [pc, #296]	; (800a93c <xTaskIncrementTick+0x148>)
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d11f      	bne.n	800a85c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a81c:	4b48      	ldr	r3, [pc, #288]	; (800a940 <xTaskIncrementTick+0x14c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d009      	beq.n	800a83a <xTaskIncrementTick+0x46>
 800a826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	e7fe      	b.n	800a838 <xTaskIncrementTick+0x44>
 800a83a:	4b41      	ldr	r3, [pc, #260]	; (800a940 <xTaskIncrementTick+0x14c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	4b40      	ldr	r3, [pc, #256]	; (800a944 <xTaskIncrementTick+0x150>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a3e      	ldr	r2, [pc, #248]	; (800a940 <xTaskIncrementTick+0x14c>)
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	4a3e      	ldr	r2, [pc, #248]	; (800a944 <xTaskIncrementTick+0x150>)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	4b3e      	ldr	r3, [pc, #248]	; (800a948 <xTaskIncrementTick+0x154>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	4a3c      	ldr	r2, [pc, #240]	; (800a948 <xTaskIncrementTick+0x154>)
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	f000 fad0 	bl	800adfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a85c:	4b3b      	ldr	r3, [pc, #236]	; (800a94c <xTaskIncrementTick+0x158>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	429a      	cmp	r2, r3
 800a864:	d348      	bcc.n	800a8f8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a866:	4b36      	ldr	r3, [pc, #216]	; (800a940 <xTaskIncrementTick+0x14c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d104      	bne.n	800a87a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a870:	4b36      	ldr	r3, [pc, #216]	; (800a94c <xTaskIncrementTick+0x158>)
 800a872:	f04f 32ff 	mov.w	r2, #4294967295
 800a876:	601a      	str	r2, [r3, #0]
					break;
 800a878:	e03e      	b.n	800a8f8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a87a:	4b31      	ldr	r3, [pc, #196]	; (800a940 <xTaskIncrementTick+0x14c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d203      	bcs.n	800a89a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a892:	4a2e      	ldr	r2, [pc, #184]	; (800a94c <xTaskIncrementTick+0x158>)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a898:	e02e      	b.n	800a8f8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	3304      	adds	r3, #4
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fe fe91 	bl	80095c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d004      	beq.n	800a8b6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	3318      	adds	r3, #24
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fe88 	bl	80095c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	409a      	lsls	r2, r3
 800a8be:	4b24      	ldr	r3, [pc, #144]	; (800a950 <xTaskIncrementTick+0x15c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	4a22      	ldr	r2, [pc, #136]	; (800a950 <xTaskIncrementTick+0x15c>)
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	4a1f      	ldr	r2, [pc, #124]	; (800a954 <xTaskIncrementTick+0x160>)
 800a8d6:	441a      	add	r2, r3
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	f7fe fe14 	bl	800950c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e8:	4b1b      	ldr	r3, [pc, #108]	; (800a958 <xTaskIncrementTick+0x164>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d3b9      	bcc.n	800a866 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8f6:	e7b6      	b.n	800a866 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8f8:	4b17      	ldr	r3, [pc, #92]	; (800a958 <xTaskIncrementTick+0x164>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fe:	4915      	ldr	r1, [pc, #84]	; (800a954 <xTaskIncrementTick+0x160>)
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	440b      	add	r3, r1
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d907      	bls.n	800a920 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800a910:	2301      	movs	r3, #1
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	e004      	b.n	800a920 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a916:	4b11      	ldr	r3, [pc, #68]	; (800a95c <xTaskIncrementTick+0x168>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3301      	adds	r3, #1
 800a91c:	4a0f      	ldr	r2, [pc, #60]	; (800a95c <xTaskIncrementTick+0x168>)
 800a91e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a920:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <xTaskIncrementTick+0x16c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800a928:	2301      	movs	r3, #1
 800a92a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a92c:	697b      	ldr	r3, [r7, #20]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	200003a8 	.word	0x200003a8
 800a93c:	20000384 	.word	0x20000384
 800a940:	20000338 	.word	0x20000338
 800a944:	2000033c 	.word	0x2000033c
 800a948:	20000398 	.word	0x20000398
 800a94c:	200003a0 	.word	0x200003a0
 800a950:	20000388 	.word	0x20000388
 800a954:	20000284 	.word	0x20000284
 800a958:	20000280 	.word	0x20000280
 800a95c:	20000390 	.word	0x20000390
 800a960:	20000394 	.word	0x20000394

0800a964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a964:	b480      	push	{r7}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a96a:	4b29      	ldr	r3, [pc, #164]	; (800aa10 <vTaskSwitchContext+0xac>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a972:	4b28      	ldr	r3, [pc, #160]	; (800aa14 <vTaskSwitchContext+0xb0>)
 800a974:	2201      	movs	r2, #1
 800a976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a978:	e043      	b.n	800aa02 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800a97a:	4b26      	ldr	r3, [pc, #152]	; (800aa14 <vTaskSwitchContext+0xb0>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a980:	4b25      	ldr	r3, [pc, #148]	; (800aa18 <vTaskSwitchContext+0xb4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	fab3 f383 	clz	r3, r3
 800a98c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a98e:	7afb      	ldrb	r3, [r7, #11]
 800a990:	f1c3 031f 	rsb	r3, r3, #31
 800a994:	617b      	str	r3, [r7, #20]
 800a996:	4921      	ldr	r1, [pc, #132]	; (800aa1c <vTaskSwitchContext+0xb8>)
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	440b      	add	r3, r1
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d109      	bne.n	800a9be <vTaskSwitchContext+0x5a>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	607b      	str	r3, [r7, #4]
 800a9bc:	e7fe      	b.n	800a9bc <vTaskSwitchContext+0x58>
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4413      	add	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4a14      	ldr	r2, [pc, #80]	; (800aa1c <vTaskSwitchContext+0xb8>)
 800a9ca:	4413      	add	r3, r2
 800a9cc:	613b      	str	r3, [r7, #16]
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	605a      	str	r2, [r3, #4]
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	3308      	adds	r3, #8
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d104      	bne.n	800a9ee <vTaskSwitchContext+0x8a>
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	605a      	str	r2, [r3, #4]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	4a0a      	ldr	r2, [pc, #40]	; (800aa20 <vTaskSwitchContext+0xbc>)
 800a9f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9f8:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <vTaskSwitchContext+0xbc>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	334c      	adds	r3, #76	; 0x4c
 800a9fe:	4a09      	ldr	r2, [pc, #36]	; (800aa24 <vTaskSwitchContext+0xc0>)
 800aa00:	6013      	str	r3, [r2, #0]
}
 800aa02:	bf00      	nop
 800aa04:	371c      	adds	r7, #28
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	200003a8 	.word	0x200003a8
 800aa14:	20000394 	.word	0x20000394
 800aa18:	20000388 	.word	0x20000388
 800aa1c:	20000284 	.word	0x20000284
 800aa20:	20000280 	.word	0x20000280
 800aa24:	20000094 	.word	0x20000094

0800aa28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d109      	bne.n	800aa4c <vTaskPlaceOnEventList+0x24>
 800aa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e7fe      	b.n	800aa4a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa4c:	4b07      	ldr	r3, [pc, #28]	; (800aa6c <vTaskPlaceOnEventList+0x44>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3318      	adds	r3, #24
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7fe fd7d 	bl	8009554 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	6838      	ldr	r0, [r7, #0]
 800aa5e:	f000 fc89 	bl	800b374 <prvAddCurrentTaskToDelayedList>
}
 800aa62:	bf00      	nop
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20000280 	.word	0x20000280

0800aa70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d109      	bne.n	800aa96 <vTaskPlaceOnEventListRestricted+0x26>
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	617b      	str	r3, [r7, #20]
 800aa94:	e7fe      	b.n	800aa94 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa96:	4b0a      	ldr	r3, [pc, #40]	; (800aac0 <vTaskPlaceOnEventListRestricted+0x50>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	3318      	adds	r3, #24
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f7fe fd34 	bl	800950c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d002      	beq.n	800aab0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800aaaa:	f04f 33ff 	mov.w	r3, #4294967295
 800aaae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aab0:	6879      	ldr	r1, [r7, #4]
 800aab2:	68b8      	ldr	r0, [r7, #8]
 800aab4:	f000 fc5e 	bl	800b374 <prvAddCurrentTaskToDelayedList>
	}
 800aab8:	bf00      	nop
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000280 	.word	0x20000280

0800aac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d109      	bne.n	800aaee <xTaskRemoveFromEventList+0x2a>
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	e7fe      	b.n	800aaec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	3318      	adds	r3, #24
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe fd67 	bl	80095c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaf8:	4b1d      	ldr	r3, [pc, #116]	; (800ab70 <xTaskRemoveFromEventList+0xac>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d11c      	bne.n	800ab3a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	3304      	adds	r3, #4
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe fd5e 	bl	80095c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0e:	2201      	movs	r2, #1
 800ab10:	409a      	lsls	r2, r3
 800ab12:	4b18      	ldr	r3, [pc, #96]	; (800ab74 <xTaskRemoveFromEventList+0xb0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	4a16      	ldr	r2, [pc, #88]	; (800ab74 <xTaskRemoveFromEventList+0xb0>)
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab20:	4613      	mov	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4a13      	ldr	r2, [pc, #76]	; (800ab78 <xTaskRemoveFromEventList+0xb4>)
 800ab2a:	441a      	add	r2, r3
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	f7fe fcea 	bl	800950c <vListInsertEnd>
 800ab38:	e005      	b.n	800ab46 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	3318      	adds	r3, #24
 800ab3e:	4619      	mov	r1, r3
 800ab40:	480e      	ldr	r0, [pc, #56]	; (800ab7c <xTaskRemoveFromEventList+0xb8>)
 800ab42:	f7fe fce3 	bl	800950c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	; (800ab80 <xTaskRemoveFromEventList+0xbc>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d905      	bls.n	800ab60 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab54:	2301      	movs	r3, #1
 800ab56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab58:	4b0a      	ldr	r3, [pc, #40]	; (800ab84 <xTaskRemoveFromEventList+0xc0>)
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	e001      	b.n	800ab64 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ab60:	2300      	movs	r3, #0
 800ab62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab64:	697b      	ldr	r3, [r7, #20]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	200003a8 	.word	0x200003a8
 800ab74:	20000388 	.word	0x20000388
 800ab78:	20000284 	.word	0x20000284
 800ab7c:	20000340 	.word	0x20000340
 800ab80:	20000280 	.word	0x20000280
 800ab84:	20000394 	.word	0x20000394

0800ab88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab90:	4b06      	ldr	r3, [pc, #24]	; (800abac <vTaskInternalSetTimeOutState+0x24>)
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab98:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <vTaskInternalSetTimeOutState+0x28>)
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	605a      	str	r2, [r3, #4]
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	20000398 	.word	0x20000398
 800abb0:	20000384 	.word	0x20000384

0800abb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b088      	sub	sp, #32
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d109      	bne.n	800abd8 <xTaskCheckForTimeOut+0x24>
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	613b      	str	r3, [r7, #16]
 800abd6:	e7fe      	b.n	800abd6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d109      	bne.n	800abf2 <xTaskCheckForTimeOut+0x3e>
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	e7fe      	b.n	800abf0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800abf2:	f001 f913 	bl	800be1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abf6:	4b1d      	ldr	r3, [pc, #116]	; (800ac6c <xTaskCheckForTimeOut+0xb8>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	69ba      	ldr	r2, [r7, #24]
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0e:	d102      	bne.n	800ac16 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	61fb      	str	r3, [r7, #28]
 800ac14:	e023      	b.n	800ac5e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4b15      	ldr	r3, [pc, #84]	; (800ac70 <xTaskCheckForTimeOut+0xbc>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d007      	beq.n	800ac32 <xTaskCheckForTimeOut+0x7e>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	69ba      	ldr	r2, [r7, #24]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d302      	bcc.n	800ac32 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	61fb      	str	r3, [r7, #28]
 800ac30:	e015      	b.n	800ac5e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d20b      	bcs.n	800ac54 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	1ad2      	subs	r2, r2, r3
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff ff9d 	bl	800ab88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	61fb      	str	r3, [r7, #28]
 800ac52:	e004      	b.n	800ac5e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2200      	movs	r2, #0
 800ac58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac5e:	f001 f90b 	bl	800be78 <vPortExitCritical>

	return xReturn;
 800ac62:	69fb      	ldr	r3, [r7, #28]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3720      	adds	r7, #32
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	20000384 	.word	0x20000384
 800ac70:	20000398 	.word	0x20000398

0800ac74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac74:	b480      	push	{r7}
 800ac76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac78:	4b03      	ldr	r3, [pc, #12]	; (800ac88 <vTaskMissedYield+0x14>)
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	601a      	str	r2, [r3, #0]
}
 800ac7e:	bf00      	nop
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	20000394 	.word	0x20000394

0800ac8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac94:	f000 f852 	bl	800ad3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac98:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <prvIdleTask+0x28>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d9f9      	bls.n	800ac94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aca0:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <prvIdleTask+0x2c>)
 800aca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800acb0:	e7f0      	b.n	800ac94 <prvIdleTask+0x8>
 800acb2:	bf00      	nop
 800acb4:	20000284 	.word	0x20000284
 800acb8:	e000ed04 	.word	0xe000ed04

0800acbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acc2:	2300      	movs	r3, #0
 800acc4:	607b      	str	r3, [r7, #4]
 800acc6:	e00c      	b.n	800ace2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4a12      	ldr	r2, [pc, #72]	; (800ad1c <prvInitialiseTaskLists+0x60>)
 800acd4:	4413      	add	r3, r2
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe fbeb 	bl	80094b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3301      	adds	r3, #1
 800ace0:	607b      	str	r3, [r7, #4]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b06      	cmp	r3, #6
 800ace6:	d9ef      	bls.n	800acc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ace8:	480d      	ldr	r0, [pc, #52]	; (800ad20 <prvInitialiseTaskLists+0x64>)
 800acea:	f7fe fbe2 	bl	80094b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acee:	480d      	ldr	r0, [pc, #52]	; (800ad24 <prvInitialiseTaskLists+0x68>)
 800acf0:	f7fe fbdf 	bl	80094b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acf4:	480c      	ldr	r0, [pc, #48]	; (800ad28 <prvInitialiseTaskLists+0x6c>)
 800acf6:	f7fe fbdc 	bl	80094b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acfa:	480c      	ldr	r0, [pc, #48]	; (800ad2c <prvInitialiseTaskLists+0x70>)
 800acfc:	f7fe fbd9 	bl	80094b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad00:	480b      	ldr	r0, [pc, #44]	; (800ad30 <prvInitialiseTaskLists+0x74>)
 800ad02:	f7fe fbd6 	bl	80094b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad06:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <prvInitialiseTaskLists+0x78>)
 800ad08:	4a05      	ldr	r2, [pc, #20]	; (800ad20 <prvInitialiseTaskLists+0x64>)
 800ad0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <prvInitialiseTaskLists+0x7c>)
 800ad0e:	4a05      	ldr	r2, [pc, #20]	; (800ad24 <prvInitialiseTaskLists+0x68>)
 800ad10:	601a      	str	r2, [r3, #0]
}
 800ad12:	bf00      	nop
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20000284 	.word	0x20000284
 800ad20:	20000310 	.word	0x20000310
 800ad24:	20000324 	.word	0x20000324
 800ad28:	20000340 	.word	0x20000340
 800ad2c:	20000354 	.word	0x20000354
 800ad30:	2000036c 	.word	0x2000036c
 800ad34:	20000338 	.word	0x20000338
 800ad38:	2000033c 	.word	0x2000033c

0800ad3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad42:	e019      	b.n	800ad78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad44:	f001 f86a 	bl	800be1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad48:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <prvCheckTasksWaitingTermination+0x4c>)
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	3304      	adds	r3, #4
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe fc36 	bl	80095c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad5a:	4b0c      	ldr	r3, [pc, #48]	; (800ad8c <prvCheckTasksWaitingTermination+0x50>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	4a0a      	ldr	r2, [pc, #40]	; (800ad8c <prvCheckTasksWaitingTermination+0x50>)
 800ad62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad64:	4b0a      	ldr	r3, [pc, #40]	; (800ad90 <prvCheckTasksWaitingTermination+0x54>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	4a09      	ldr	r2, [pc, #36]	; (800ad90 <prvCheckTasksWaitingTermination+0x54>)
 800ad6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad6e:	f001 f883 	bl	800be78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f80e 	bl	800ad94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad78:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <prvCheckTasksWaitingTermination+0x54>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1e1      	bne.n	800ad44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20000354 	.word	0x20000354
 800ad8c:	20000380 	.word	0x20000380
 800ad90:	20000368 	.word	0x20000368

0800ad94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	334c      	adds	r3, #76	; 0x4c
 800ada0:	4618      	mov	r0, r3
 800ada2:	f005 f8e1 	bl	800ff68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d108      	bne.n	800adc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb4:	4618      	mov	r0, r3
 800adb6:	f002 f80b 	bl	800cdd0 <vPortFree>
				vPortFree( pxTCB );
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f002 f808 	bl	800cdd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800adc0:	e017      	b.n	800adf2 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d103      	bne.n	800add4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f001 ffff 	bl	800cdd0 <vPortFree>
	}
 800add2:	e00e      	b.n	800adf2 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800adda:	2b02      	cmp	r3, #2
 800addc:	d009      	beq.n	800adf2 <prvDeleteTCB+0x5e>
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	e7fe      	b.n	800adf0 <prvDeleteTCB+0x5c>
	}
 800adf2:	bf00      	nop
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
	...

0800adfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae02:	4b0c      	ldr	r3, [pc, #48]	; (800ae34 <prvResetNextTaskUnblockTime+0x38>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d104      	bne.n	800ae16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <prvResetNextTaskUnblockTime+0x3c>)
 800ae0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae14:	e008      	b.n	800ae28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae16:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <prvResetNextTaskUnblockTime+0x38>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	4a04      	ldr	r2, [pc, #16]	; (800ae38 <prvResetNextTaskUnblockTime+0x3c>)
 800ae26:	6013      	str	r3, [r2, #0]
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	20000338 	.word	0x20000338
 800ae38:	200003a0 	.word	0x200003a0

0800ae3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae42:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <xTaskGetSchedulerState+0x34>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d102      	bne.n	800ae50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	607b      	str	r3, [r7, #4]
 800ae4e:	e008      	b.n	800ae62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae50:	4b08      	ldr	r3, [pc, #32]	; (800ae74 <xTaskGetSchedulerState+0x38>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d102      	bne.n	800ae5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae58:	2302      	movs	r3, #2
 800ae5a:	607b      	str	r3, [r7, #4]
 800ae5c:	e001      	b.n	800ae62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae62:	687b      	ldr	r3, [r7, #4]
	}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	2000038c 	.word	0x2000038c
 800ae74:	200003a8 	.word	0x200003a8

0800ae78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae84:	2300      	movs	r3, #0
 800ae86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d06c      	beq.n	800af68 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae8e:	4b39      	ldr	r3, [pc, #228]	; (800af74 <xTaskPriorityDisinherit+0xfc>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d009      	beq.n	800aeac <xTaskPriorityDisinherit+0x34>
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	e7fe      	b.n	800aeaa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d109      	bne.n	800aec8 <xTaskPriorityDisinherit+0x50>
 800aeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb8:	f383 8811 	msr	BASEPRI, r3
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	60bb      	str	r3, [r7, #8]
 800aec6:	e7fe      	b.n	800aec6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aecc:	1e5a      	subs	r2, r3, #1
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d044      	beq.n	800af68 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d140      	bne.n	800af68 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	3304      	adds	r3, #4
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe fb6b 	bl	80095c6 <uxListRemove>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d115      	bne.n	800af22 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefa:	491f      	ldr	r1, [pc, #124]	; (800af78 <xTaskPriorityDisinherit+0x100>)
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10a      	bne.n	800af22 <xTaskPriorityDisinherit+0xaa>
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af10:	2201      	movs	r2, #1
 800af12:	fa02 f303 	lsl.w	r3, r2, r3
 800af16:	43da      	mvns	r2, r3
 800af18:	4b18      	ldr	r3, [pc, #96]	; (800af7c <xTaskPriorityDisinherit+0x104>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4013      	ands	r3, r2
 800af1e:	4a17      	ldr	r2, [pc, #92]	; (800af7c <xTaskPriorityDisinherit+0x104>)
 800af20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2e:	f1c3 0207 	rsb	r2, r3, #7
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3a:	2201      	movs	r2, #1
 800af3c:	409a      	lsls	r2, r3
 800af3e:	4b0f      	ldr	r3, [pc, #60]	; (800af7c <xTaskPriorityDisinherit+0x104>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4313      	orrs	r3, r2
 800af44:	4a0d      	ldr	r2, [pc, #52]	; (800af7c <xTaskPriorityDisinherit+0x104>)
 800af46:	6013      	str	r3, [r2, #0]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4c:	4613      	mov	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4a08      	ldr	r2, [pc, #32]	; (800af78 <xTaskPriorityDisinherit+0x100>)
 800af56:	441a      	add	r2, r3
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	3304      	adds	r3, #4
 800af5c:	4619      	mov	r1, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	f7fe fad4 	bl	800950c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af64:	2301      	movs	r3, #1
 800af66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af68:	697b      	ldr	r3, [r7, #20]
	}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	20000280 	.word	0x20000280
 800af78:	20000284 	.word	0x20000284
 800af7c:	20000388 	.word	0x20000388

0800af80 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800af8e:	f000 ff45 	bl	800be1c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800af92:	4b29      	ldr	r3, [pc, #164]	; (800b038 <xTaskNotifyWait+0xb8>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d01c      	beq.n	800afda <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800afa0:	4b25      	ldr	r3, [pc, #148]	; (800b038 <xTaskNotifyWait+0xb8>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	43d2      	mvns	r2, r2
 800afac:	400a      	ands	r2, r1
 800afae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800afb2:	4b21      	ldr	r3, [pc, #132]	; (800b038 <xTaskNotifyWait+0xb8>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00b      	beq.n	800afda <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800afc2:	2101      	movs	r1, #1
 800afc4:	6838      	ldr	r0, [r7, #0]
 800afc6:	f000 f9d5 	bl	800b374 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800afca:	4b1c      	ldr	r3, [pc, #112]	; (800b03c <xTaskNotifyWait+0xbc>)
 800afcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800afda:	f000 ff4d 	bl	800be78 <vPortExitCritical>

		taskENTER_CRITICAL();
 800afde:	f000 ff1d 	bl	800be1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d005      	beq.n	800aff4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800afe8:	4b13      	ldr	r3, [pc, #76]	; (800b038 <xTaskNotifyWait+0xb8>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800aff4:	4b10      	ldr	r3, [pc, #64]	; (800b038 <xTaskNotifyWait+0xb8>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b02      	cmp	r3, #2
 800b000:	d002      	beq.n	800b008 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b002:	2300      	movs	r3, #0
 800b004:	617b      	str	r3, [r7, #20]
 800b006:	e00a      	b.n	800b01e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b008:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <xTaskNotifyWait+0xb8>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	43d2      	mvns	r2, r2
 800b014:	400a      	ands	r2, r1
 800b016:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 800b01a:	2301      	movs	r3, #1
 800b01c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b01e:	4b06      	ldr	r3, [pc, #24]	; (800b038 <xTaskNotifyWait+0xb8>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 800b028:	f000 ff26 	bl	800be78 <vPortExitCritical>

		return xReturn;
 800b02c:	697b      	ldr	r3, [r7, #20]
	}
 800b02e:	4618      	mov	r0, r3
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20000280 	.word	0x20000280
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08a      	sub	sp, #40	; 0x28
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	4613      	mov	r3, r2
 800b04e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b050:	2301      	movs	r3, #1
 800b052:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d109      	bne.n	800b06e <xTaskGenericNotify+0x2e>
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	61bb      	str	r3, [r7, #24]
 800b06c:	e7fe      	b.n	800b06c <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b072:	f000 fed3 	bl	800be1c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b08c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	2202      	movs	r2, #2
 800b092:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800b096:	79fb      	ldrb	r3, [r7, #7]
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d82e      	bhi.n	800b0fa <xTaskGenericNotify+0xba>
 800b09c:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <xTaskGenericNotify+0x64>)
 800b09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a2:	bf00      	nop
 800b0a4:	0800b11b 	.word	0x0800b11b
 800b0a8:	0800b0b9 	.word	0x0800b0b9
 800b0ac:	0800b0cb 	.word	0x0800b0cb
 800b0b0:	0800b0db 	.word	0x0800b0db
 800b0b4:	0800b0e5 	.word	0x0800b0e5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800b0c8:	e02a      	b.n	800b120 <xTaskGenericNotify+0xe0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0d0:	1c5a      	adds	r2, r3, #1
 800b0d2:	6a3b      	ldr	r3, [r7, #32]
 800b0d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800b0d8:	e022      	b.n	800b120 <xTaskGenericNotify+0xe0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800b0e2:	e01d      	b.n	800b120 <xTaskGenericNotify+0xe0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b0e4:	7ffb      	ldrb	r3, [r7, #31]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d004      	beq.n	800b0f4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b0f2:	e015      	b.n	800b120 <xTaskGenericNotify+0xe0>
						xReturn = pdFAIL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b0f8:	e012      	b.n	800b120 <xTaskGenericNotify+0xe0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b104:	d00b      	beq.n	800b11e <xTaskGenericNotify+0xde>
 800b106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	e7fe      	b.n	800b118 <xTaskGenericNotify+0xd8>
					break;
 800b11a:	bf00      	nop
 800b11c:	e000      	b.n	800b120 <xTaskGenericNotify+0xe0>

					break;
 800b11e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b120:	7ffb      	ldrb	r3, [r7, #31]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d138      	bne.n	800b198 <xTaskGenericNotify+0x158>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	3304      	adds	r3, #4
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7fe fa4b 	bl	80095c6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b134:	2201      	movs	r2, #1
 800b136:	409a      	lsls	r2, r3
 800b138:	4b1b      	ldr	r3, [pc, #108]	; (800b1a8 <xTaskGenericNotify+0x168>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	4a1a      	ldr	r2, [pc, #104]	; (800b1a8 <xTaskGenericNotify+0x168>)
 800b140:	6013      	str	r3, [r2, #0]
 800b142:	6a3b      	ldr	r3, [r7, #32]
 800b144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b146:	4613      	mov	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4a17      	ldr	r2, [pc, #92]	; (800b1ac <xTaskGenericNotify+0x16c>)
 800b150:	441a      	add	r2, r3
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	3304      	adds	r3, #4
 800b156:	4619      	mov	r1, r3
 800b158:	4610      	mov	r0, r2
 800b15a:	f7fe f9d7 	bl	800950c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b162:	2b00      	cmp	r3, #0
 800b164:	d009      	beq.n	800b17a <xTaskGenericNotify+0x13a>
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	613b      	str	r3, [r7, #16]
 800b178:	e7fe      	b.n	800b178 <xTaskGenericNotify+0x138>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17e:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <xTaskGenericNotify+0x170>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	429a      	cmp	r2, r3
 800b186:	d907      	bls.n	800b198 <xTaskGenericNotify+0x158>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b188:	4b0a      	ldr	r3, [pc, #40]	; (800b1b4 <xTaskGenericNotify+0x174>)
 800b18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b198:	f000 fe6e 	bl	800be78 <vPortExitCritical>

		return xReturn;
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3728      	adds	r7, #40	; 0x28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20000388 	.word	0x20000388
 800b1ac:	20000284 	.word	0x20000284
 800b1b0:	20000280 	.word	0x20000280
 800b1b4:	e000ed04 	.word	0xe000ed04

0800b1b8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08e      	sub	sp, #56	; 0x38
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d109      	bne.n	800b1e6 <xTaskGenericNotifyFromISR+0x2e>
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
 800b1e4:	e7fe      	b.n	800b1e4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1e6:	f000 fef5 	bl	800bfd4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b1ee:	f3ef 8211 	mrs	r2, BASEPRI
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	623a      	str	r2, [r7, #32]
 800b204:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b206:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b208:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d004      	beq.n	800b21a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b212:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	2202      	movs	r2, #2
 800b228:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800b22c:	79fb      	ldrb	r3, [r7, #7]
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d82e      	bhi.n	800b290 <xTaskGenericNotifyFromISR+0xd8>
 800b232:	a201      	add	r2, pc, #4	; (adr r2, 800b238 <xTaskGenericNotifyFromISR+0x80>)
 800b234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b238:	0800b2b1 	.word	0x0800b2b1
 800b23c:	0800b24d 	.word	0x0800b24d
 800b240:	0800b25f 	.word	0x0800b25f
 800b244:	0800b26f 	.word	0x0800b26f
 800b248:	0800b279 	.word	0x0800b279
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	431a      	orrs	r2, r3
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800b25c:	e02b      	b.n	800b2b6 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800b26c:	e023      	b.n	800b2b6 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800b276:	e01e      	b.n	800b2b6 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b278:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d004      	beq.n	800b28a <xTaskGenericNotifyFromISR+0xd2>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b288:	e015      	b.n	800b2b6 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b28e:	e012      	b.n	800b2b6 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29a:	d00b      	beq.n	800b2b4 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	61bb      	str	r3, [r7, #24]
 800b2ae:	e7fe      	b.n	800b2ae <xTaskGenericNotifyFromISR+0xf6>
					break;
 800b2b0:	bf00      	nop
 800b2b2:	e000      	b.n	800b2b6 <xTaskGenericNotifyFromISR+0xfe>
					break;
 800b2b4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b2b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d144      	bne.n	800b348 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d009      	beq.n	800b2da <xTaskGenericNotifyFromISR+0x122>
 800b2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	e7fe      	b.n	800b2d8 <xTaskGenericNotifyFromISR+0x120>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2da:	4b20      	ldr	r3, [pc, #128]	; (800b35c <xTaskGenericNotifyFromISR+0x1a4>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d11c      	bne.n	800b31c <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fe f96d 	bl	80095c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	409a      	lsls	r2, r3
 800b2f4:	4b1a      	ldr	r3, [pc, #104]	; (800b360 <xTaskGenericNotifyFromISR+0x1a8>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	4a19      	ldr	r2, [pc, #100]	; (800b360 <xTaskGenericNotifyFromISR+0x1a8>)
 800b2fc:	6013      	str	r3, [r2, #0]
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b302:	4613      	mov	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4a16      	ldr	r2, [pc, #88]	; (800b364 <xTaskGenericNotifyFromISR+0x1ac>)
 800b30c:	441a      	add	r2, r3
 800b30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b310:	3304      	adds	r3, #4
 800b312:	4619      	mov	r1, r3
 800b314:	4610      	mov	r0, r2
 800b316:	f7fe f8f9 	bl	800950c <vListInsertEnd>
 800b31a:	e005      	b.n	800b328 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	3318      	adds	r3, #24
 800b320:	4619      	mov	r1, r3
 800b322:	4811      	ldr	r0, [pc, #68]	; (800b368 <xTaskGenericNotifyFromISR+0x1b0>)
 800b324:	f7fe f8f2 	bl	800950c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32c:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <xTaskGenericNotifyFromISR+0x1b4>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b332:	429a      	cmp	r2, r3
 800b334:	d908      	bls.n	800b348 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b33e:	2201      	movs	r2, #1
 800b340:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b342:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <xTaskGenericNotifyFromISR+0x1b8>)
 800b344:	2201      	movs	r2, #1
 800b346:	601a      	str	r2, [r3, #0]
 800b348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b354:	4618      	mov	r0, r3
 800b356:	3738      	adds	r7, #56	; 0x38
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	200003a8 	.word	0x200003a8
 800b360:	20000388 	.word	0x20000388
 800b364:	20000284 	.word	0x20000284
 800b368:	20000340 	.word	0x20000340
 800b36c:	20000280 	.word	0x20000280
 800b370:	20000394 	.word	0x20000394

0800b374 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b37e:	4b29      	ldr	r3, [pc, #164]	; (800b424 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b384:	4b28      	ldr	r3, [pc, #160]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3304      	adds	r3, #4
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fe f91b 	bl	80095c6 <uxListRemove>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10b      	bne.n	800b3ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39c:	2201      	movs	r2, #1
 800b39e:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a2:	43da      	mvns	r2, r3
 800b3a4:	4b21      	ldr	r3, [pc, #132]	; (800b42c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	4a20      	ldr	r2, [pc, #128]	; (800b42c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b4:	d10a      	bne.n	800b3cc <prvAddCurrentTaskToDelayedList+0x58>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d007      	beq.n	800b3cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3bc:	4b1a      	ldr	r3, [pc, #104]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	481a      	ldr	r0, [pc, #104]	; (800b430 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b3c6:	f7fe f8a1 	bl	800950c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3ca:	e026      	b.n	800b41a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3d4:	4b14      	ldr	r3, [pc, #80]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d209      	bcs.n	800b3f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3e4:	4b13      	ldr	r3, [pc, #76]	; (800b434 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	f7fe f8af 	bl	8009554 <vListInsert>
}
 800b3f6:	e010      	b.n	800b41a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3f8:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3304      	adds	r3, #4
 800b402:	4619      	mov	r1, r3
 800b404:	4610      	mov	r0, r2
 800b406:	f7fe f8a5 	bl	8009554 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b40a:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	429a      	cmp	r2, r3
 800b412:	d202      	bcs.n	800b41a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b414:	4a09      	ldr	r2, [pc, #36]	; (800b43c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	6013      	str	r3, [r2, #0]
}
 800b41a:	bf00      	nop
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	20000384 	.word	0x20000384
 800b428:	20000280 	.word	0x20000280
 800b42c:	20000388 	.word	0x20000388
 800b430:	2000036c 	.word	0x2000036c
 800b434:	2000033c 	.word	0x2000033c
 800b438:	20000338 	.word	0x20000338
 800b43c:	200003a0 	.word	0x200003a0

0800b440 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08a      	sub	sp, #40	; 0x28
 800b444:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b446:	2300      	movs	r3, #0
 800b448:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b44a:	f000 fb7f 	bl	800bb4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b44e:	4b1c      	ldr	r3, [pc, #112]	; (800b4c0 <xTimerCreateTimerTask+0x80>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d021      	beq.n	800b49a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b45e:	1d3a      	adds	r2, r7, #4
 800b460:	f107 0108 	add.w	r1, r7, #8
 800b464:	f107 030c 	add.w	r3, r7, #12
 800b468:	4618      	mov	r0, r3
 800b46a:	f001 fae7 	bl	800ca3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b46e:	6879      	ldr	r1, [r7, #4]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	9202      	str	r2, [sp, #8]
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	2302      	movs	r3, #2
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	2300      	movs	r3, #0
 800b47e:	460a      	mov	r2, r1
 800b480:	4910      	ldr	r1, [pc, #64]	; (800b4c4 <xTimerCreateTimerTask+0x84>)
 800b482:	4811      	ldr	r0, [pc, #68]	; (800b4c8 <xTimerCreateTimerTask+0x88>)
 800b484:	f7fe fe58 	bl	800a138 <xTaskCreateStatic>
 800b488:	4602      	mov	r2, r0
 800b48a:	4b10      	ldr	r3, [pc, #64]	; (800b4cc <xTimerCreateTimerTask+0x8c>)
 800b48c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <xTimerCreateTimerTask+0x8c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b496:	2301      	movs	r3, #1
 800b498:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d109      	bne.n	800b4b4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	613b      	str	r3, [r7, #16]
 800b4b2:	e7fe      	b.n	800b4b2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b4b4:	697b      	ldr	r3, [r7, #20]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	200003dc 	.word	0x200003dc
 800b4c4:	08011c00 	.word	0x08011c00
 800b4c8:	0800b731 	.word	0x0800b731
 800b4cc:	200003e0 	.word	0x200003e0

0800b4d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af02      	add	r7, sp, #8
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b4de:	2028      	movs	r0, #40	; 0x28
 800b4e0:	f001 fc68 	bl	800cdb4 <pvPortMalloc>
 800b4e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00d      	beq.n	800b508 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	9301      	str	r3, [sp, #4]
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	68b9      	ldr	r1, [r7, #8]
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f000 f841 	bl	800b58a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b508:	697b      	ldr	r3, [r7, #20]
	}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3718      	adds	r7, #24
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b512:	b580      	push	{r7, lr}
 800b514:	b08a      	sub	sp, #40	; 0x28
 800b516:	af02      	add	r7, sp, #8
 800b518:	60f8      	str	r0, [r7, #12]
 800b51a:	60b9      	str	r1, [r7, #8]
 800b51c:	607a      	str	r2, [r7, #4]
 800b51e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b520:	2328      	movs	r3, #40	; 0x28
 800b522:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	2b28      	cmp	r3, #40	; 0x28
 800b528:	d009      	beq.n	800b53e <xTimerCreateStatic+0x2c>
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	61bb      	str	r3, [r7, #24]
 800b53c:	e7fe      	b.n	800b53c <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b53e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d109      	bne.n	800b55a <xTimerCreateStatic+0x48>
 800b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	617b      	str	r3, [r7, #20]
 800b558:	e7fe      	b.n	800b558 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00d      	beq.n	800b580 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	2202      	movs	r2, #2
 800b568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	68b9      	ldr	r1, [r7, #8]
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f000 f805 	bl	800b58a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b580:	69fb      	ldr	r3, [r7, #28]
	}
 800b582:	4618      	mov	r0, r3
 800b584:	3720      	adds	r7, #32
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b086      	sub	sp, #24
 800b58e:	af00      	add	r7, sp, #0
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	607a      	str	r2, [r7, #4]
 800b596:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d109      	bne.n	800b5b2 <prvInitialiseNewTimer+0x28>
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	e7fe      	b.n	800b5b0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01e      	beq.n	800b5f6 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b5b8:	f000 fac8 	bl	800bb4c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	6a3a      	ldr	r2, [r7, #32]
 800b5d2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fd ff8a 	bl	80094f2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d008      	beq.n	800b5f6 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b5ea:	f043 0304 	orr.w	r3, r3, #4
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b5f6:	bf00      	nop
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
	...

0800b600 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08a      	sub	sp, #40	; 0x28
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b60e:	2300      	movs	r3, #0
 800b610:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d109      	bne.n	800b62c <xTimerGenericCommand+0x2c>
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	623b      	str	r3, [r7, #32]
 800b62a:	e7fe      	b.n	800b62a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b62c:	4b19      	ldr	r3, [pc, #100]	; (800b694 <xTimerGenericCommand+0x94>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d02a      	beq.n	800b68a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2b05      	cmp	r3, #5
 800b644:	dc18      	bgt.n	800b678 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b646:	f7ff fbf9 	bl	800ae3c <xTaskGetSchedulerState>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d109      	bne.n	800b664 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b650:	4b10      	ldr	r3, [pc, #64]	; (800b694 <xTimerGenericCommand+0x94>)
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	f107 0114 	add.w	r1, r7, #20
 800b658:	2300      	movs	r3, #0
 800b65a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b65c:	f7fe f918 	bl	8009890 <xQueueGenericSend>
 800b660:	6278      	str	r0, [r7, #36]	; 0x24
 800b662:	e012      	b.n	800b68a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b664:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <xTimerGenericCommand+0x94>)
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	f107 0114 	add.w	r1, r7, #20
 800b66c:	2300      	movs	r3, #0
 800b66e:	2200      	movs	r2, #0
 800b670:	f7fe f90e 	bl	8009890 <xQueueGenericSend>
 800b674:	6278      	str	r0, [r7, #36]	; 0x24
 800b676:	e008      	b.n	800b68a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b678:	4b06      	ldr	r3, [pc, #24]	; (800b694 <xTimerGenericCommand+0x94>)
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	f107 0114 	add.w	r1, r7, #20
 800b680:	2300      	movs	r3, #0
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	f7fe f9fe 	bl	8009a84 <xQueueGenericSendFromISR>
 800b688:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3728      	adds	r7, #40	; 0x28
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	200003dc 	.word	0x200003dc

0800b698 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a2:	4b22      	ldr	r3, [pc, #136]	; (800b72c <prvProcessExpiredTimer+0x94>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fd ff88 	bl	80095c6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b6bc:	f003 0304 	and.w	r3, r3, #4
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d021      	beq.n	800b708 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	699a      	ldr	r2, [r3, #24]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	18d1      	adds	r1, r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	6978      	ldr	r0, [r7, #20]
 800b6d2:	f000 f8d1 	bl	800b878 <prvInsertTimerInActiveList>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d01e      	beq.n	800b71a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	6978      	ldr	r0, [r7, #20]
 800b6e8:	f7ff ff8a 	bl	800b600 <xTimerGenericCommand>
 800b6ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d112      	bne.n	800b71a <prvProcessExpiredTimer+0x82>
 800b6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	60fb      	str	r3, [r7, #12]
 800b706:	e7fe      	b.n	800b706 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b70e:	f023 0301 	bic.w	r3, r3, #1
 800b712:	b2da      	uxtb	r2, r3
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	6978      	ldr	r0, [r7, #20]
 800b720:	4798      	blx	r3
}
 800b722:	bf00      	nop
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	200003d4 	.word	0x200003d4

0800b730 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b738:	f107 0308 	add.w	r3, r7, #8
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 f857 	bl	800b7f0 <prvGetNextExpireTime>
 800b742:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	4619      	mov	r1, r3
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f000 f803 	bl	800b754 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b74e:	f000 f8d5 	bl	800b8fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b752:	e7f1      	b.n	800b738 <prvTimerTask+0x8>

0800b754 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b75e:	f7fe ff8f 	bl	800a680 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b762:	f107 0308 	add.w	r3, r7, #8
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f866 	bl	800b838 <prvSampleTimeNow>
 800b76c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d130      	bne.n	800b7d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <prvProcessTimerOrBlockTask+0x3c>
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d806      	bhi.n	800b790 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b782:	f7fe ff8b 	bl	800a69c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b786:	68f9      	ldr	r1, [r7, #12]
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff ff85 	bl	800b698 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b78e:	e024      	b.n	800b7da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d008      	beq.n	800b7a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b796:	4b13      	ldr	r3, [pc, #76]	; (800b7e4 <prvProcessTimerOrBlockTask+0x90>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <prvProcessTimerOrBlockTask+0x50>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e000      	b.n	800b7a6 <prvProcessTimerOrBlockTask+0x52>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b7a8:	4b0f      	ldr	r3, [pc, #60]	; (800b7e8 <prvProcessTimerOrBlockTask+0x94>)
 800b7aa:	6818      	ldr	r0, [r3, #0]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	f7fe fc8b 	bl	800a0d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b7ba:	f7fe ff6f 	bl	800a69c <xTaskResumeAll>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b7c4:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <prvProcessTimerOrBlockTask+0x98>)
 800b7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	f3bf 8f6f 	isb	sy
}
 800b7d4:	e001      	b.n	800b7da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7d6:	f7fe ff61 	bl	800a69c <xTaskResumeAll>
}
 800b7da:	bf00      	nop
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	200003d8 	.word	0x200003d8
 800b7e8:	200003dc 	.word	0x200003dc
 800b7ec:	e000ed04 	.word	0xe000ed04

0800b7f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7f8:	4b0e      	ldr	r3, [pc, #56]	; (800b834 <prvGetNextExpireTime+0x44>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <prvGetNextExpireTime+0x16>
 800b802:	2201      	movs	r2, #1
 800b804:	e000      	b.n	800b808 <prvGetNextExpireTime+0x18>
 800b806:	2200      	movs	r2, #0
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d105      	bne.n	800b820 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b814:	4b07      	ldr	r3, [pc, #28]	; (800b834 <prvGetNextExpireTime+0x44>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	e001      	b.n	800b824 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b824:	68fb      	ldr	r3, [r7, #12]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	200003d4 	.word	0x200003d4

0800b838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b840:	f7fe ffc8 	bl	800a7d4 <xTaskGetTickCount>
 800b844:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b846:	4b0b      	ldr	r3, [pc, #44]	; (800b874 <prvSampleTimeNow+0x3c>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d205      	bcs.n	800b85c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b850:	f000 f918 	bl	800ba84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	e002      	b.n	800b862 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b862:	4a04      	ldr	r2, [pc, #16]	; (800b874 <prvSampleTimeNow+0x3c>)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b868:	68fb      	ldr	r3, [r7, #12]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	200003e4 	.word	0x200003e4

0800b878 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b886:	2300      	movs	r3, #0
 800b888:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d812      	bhi.n	800b8c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	1ad2      	subs	r2, r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d302      	bcc.n	800b8b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	617b      	str	r3, [r7, #20]
 800b8b0:	e01b      	b.n	800b8ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b8b2:	4b10      	ldr	r3, [pc, #64]	; (800b8f4 <prvInsertTimerInActiveList+0x7c>)
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	4610      	mov	r0, r2
 800b8be:	f7fd fe49 	bl	8009554 <vListInsert>
 800b8c2:	e012      	b.n	800b8ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d206      	bcs.n	800b8da <prvInsertTimerInActiveList+0x62>
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d302      	bcc.n	800b8da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	617b      	str	r3, [r7, #20]
 800b8d8:	e007      	b.n	800b8ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8da:	4b07      	ldr	r3, [pc, #28]	; (800b8f8 <prvInsertTimerInActiveList+0x80>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	f7fd fe35 	bl	8009554 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8ea:	697b      	ldr	r3, [r7, #20]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	200003d8 	.word	0x200003d8
 800b8f8:	200003d4 	.word	0x200003d4

0800b8fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08c      	sub	sp, #48	; 0x30
 800b900:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b902:	e0ac      	b.n	800ba5e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	f2c0 80a8 	blt.w	800ba5c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d004      	beq.n	800b922 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	3304      	adds	r3, #4
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fd fe52 	bl	80095c6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b922:	1d3b      	adds	r3, r7, #4
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff ff87 	bl	800b838 <prvSampleTimeNow>
 800b92a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2b09      	cmp	r3, #9
 800b930:	f200 8095 	bhi.w	800ba5e <prvProcessReceivedCommands+0x162>
 800b934:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <prvProcessReceivedCommands+0x40>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b965 	.word	0x0800b965
 800b940:	0800b965 	.word	0x0800b965
 800b944:	0800b965 	.word	0x0800b965
 800b948:	0800b9d7 	.word	0x0800b9d7
 800b94c:	0800b9eb 	.word	0x0800b9eb
 800b950:	0800ba33 	.word	0x0800ba33
 800b954:	0800b965 	.word	0x0800b965
 800b958:	0800b965 	.word	0x0800b965
 800b95c:	0800b9d7 	.word	0x0800b9d7
 800b960:	0800b9eb 	.word	0x0800b9eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b96a:	f043 0301 	orr.w	r3, r3, #1
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	18d1      	adds	r1, r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6a3a      	ldr	r2, [r7, #32]
 800b982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b984:	f7ff ff78 	bl	800b878 <prvInsertTimerInActiveList>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d067      	beq.n	800ba5e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b994:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b99c:	f003 0304 	and.w	r3, r3, #4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d05c      	beq.n	800ba5e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	441a      	add	r2, r3
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9b6:	f7ff fe23 	bl	800b600 <xTimerGenericCommand>
 800b9ba:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d14d      	bne.n	800ba5e <prvProcessReceivedCommands+0x162>
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	61bb      	str	r3, [r7, #24]
 800b9d4:	e7fe      	b.n	800b9d4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9dc:	f023 0301 	bic.w	r3, r3, #1
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800b9e8:	e039      	b.n	800ba5e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9f0:	f043 0301 	orr.w	r3, r3, #1
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d109      	bne.n	800ba1e <prvProcessReceivedCommands+0x122>
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	e7fe      	b.n	800ba1c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	699a      	ldr	r2, [r3, #24]
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	18d1      	adds	r1, r2, r3
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	6a3a      	ldr	r2, [r7, #32]
 800ba2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba2c:	f7ff ff24 	bl	800b878 <prvInsertTimerInActiveList>
					break;
 800ba30:	e015      	b.n	800ba5e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba38:	f003 0302 	and.w	r3, r3, #2
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d103      	bne.n	800ba48 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800ba40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba42:	f001 f9c5 	bl	800cdd0 <vPortFree>
 800ba46:	e00a      	b.n	800ba5e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba4e:	f023 0301 	bic.w	r3, r3, #1
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba5a:	e000      	b.n	800ba5e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba5e:	4b08      	ldr	r3, [pc, #32]	; (800ba80 <prvProcessReceivedCommands+0x184>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f107 0108 	add.w	r1, r7, #8
 800ba66:	2200      	movs	r2, #0
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fe f89f 	bl	8009bac <xQueueReceive>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f47f af47 	bne.w	800b904 <prvProcessReceivedCommands+0x8>
	}
}
 800ba76:	bf00      	nop
 800ba78:	3728      	adds	r7, #40	; 0x28
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	200003dc 	.word	0x200003dc

0800ba84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba8a:	e047      	b.n	800bb1c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba8c:	4b2d      	ldr	r3, [pc, #180]	; (800bb44 <prvSwitchTimerLists+0xc0>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba96:	4b2b      	ldr	r3, [pc, #172]	; (800bb44 <prvSwitchTimerLists+0xc0>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3304      	adds	r3, #4
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fd fd8e 	bl	80095c6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bab8:	f003 0304 	and.w	r3, r3, #4
 800babc:	2b00      	cmp	r3, #0
 800babe:	d02d      	beq.n	800bb1c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	4413      	add	r3, r2
 800bac8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d90e      	bls.n	800baf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bade:	4b19      	ldr	r3, [pc, #100]	; (800bb44 <prvSwitchTimerLists+0xc0>)
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	3304      	adds	r3, #4
 800bae6:	4619      	mov	r1, r3
 800bae8:	4610      	mov	r0, r2
 800baea:	f7fd fd33 	bl	8009554 <vListInsert>
 800baee:	e015      	b.n	800bb1c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800baf0:	2300      	movs	r3, #0
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	2300      	movs	r3, #0
 800baf6:	693a      	ldr	r2, [r7, #16]
 800baf8:	2100      	movs	r1, #0
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f7ff fd80 	bl	800b600 <xTimerGenericCommand>
 800bb00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d109      	bne.n	800bb1c <prvSwitchTimerLists+0x98>
 800bb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	603b      	str	r3, [r7, #0]
 800bb1a:	e7fe      	b.n	800bb1a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb1c:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <prvSwitchTimerLists+0xc0>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1b2      	bne.n	800ba8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb26:	4b07      	ldr	r3, [pc, #28]	; (800bb44 <prvSwitchTimerLists+0xc0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb2c:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <prvSwitchTimerLists+0xc4>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a04      	ldr	r2, [pc, #16]	; (800bb44 <prvSwitchTimerLists+0xc0>)
 800bb32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb34:	4a04      	ldr	r2, [pc, #16]	; (800bb48 <prvSwitchTimerLists+0xc4>)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	6013      	str	r3, [r2, #0]
}
 800bb3a:	bf00      	nop
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	200003d4 	.word	0x200003d4
 800bb48:	200003d8 	.word	0x200003d8

0800bb4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb52:	f000 f963 	bl	800be1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb56:	4b15      	ldr	r3, [pc, #84]	; (800bbac <prvCheckForValidListAndQueue+0x60>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d120      	bne.n	800bba0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb5e:	4814      	ldr	r0, [pc, #80]	; (800bbb0 <prvCheckForValidListAndQueue+0x64>)
 800bb60:	f7fd fca7 	bl	80094b2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb64:	4813      	ldr	r0, [pc, #76]	; (800bbb4 <prvCheckForValidListAndQueue+0x68>)
 800bb66:	f7fd fca4 	bl	80094b2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb6a:	4b13      	ldr	r3, [pc, #76]	; (800bbb8 <prvCheckForValidListAndQueue+0x6c>)
 800bb6c:	4a10      	ldr	r2, [pc, #64]	; (800bbb0 <prvCheckForValidListAndQueue+0x64>)
 800bb6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb70:	4b12      	ldr	r3, [pc, #72]	; (800bbbc <prvCheckForValidListAndQueue+0x70>)
 800bb72:	4a10      	ldr	r2, [pc, #64]	; (800bbb4 <prvCheckForValidListAndQueue+0x68>)
 800bb74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb76:	2300      	movs	r3, #0
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	4b11      	ldr	r3, [pc, #68]	; (800bbc0 <prvCheckForValidListAndQueue+0x74>)
 800bb7c:	4a11      	ldr	r2, [pc, #68]	; (800bbc4 <prvCheckForValidListAndQueue+0x78>)
 800bb7e:	210c      	movs	r1, #12
 800bb80:	200a      	movs	r0, #10
 800bb82:	f7fd fdb3 	bl	80096ec <xQueueGenericCreateStatic>
 800bb86:	4602      	mov	r2, r0
 800bb88:	4b08      	ldr	r3, [pc, #32]	; (800bbac <prvCheckForValidListAndQueue+0x60>)
 800bb8a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb8c:	4b07      	ldr	r3, [pc, #28]	; (800bbac <prvCheckForValidListAndQueue+0x60>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d005      	beq.n	800bba0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb94:	4b05      	ldr	r3, [pc, #20]	; (800bbac <prvCheckForValidListAndQueue+0x60>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	490b      	ldr	r1, [pc, #44]	; (800bbc8 <prvCheckForValidListAndQueue+0x7c>)
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe fa70 	bl	800a080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bba0:	f000 f96a 	bl	800be78 <vPortExitCritical>
}
 800bba4:	bf00      	nop
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	200003dc 	.word	0x200003dc
 800bbb0:	200003ac 	.word	0x200003ac
 800bbb4:	200003c0 	.word	0x200003c0
 800bbb8:	200003d4 	.word	0x200003d4
 800bbbc:	200003d8 	.word	0x200003d8
 800bbc0:	20000460 	.word	0x20000460
 800bbc4:	200003e8 	.word	0x200003e8
 800bbc8:	08011c08 	.word	0x08011c08

0800bbcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	3b04      	subs	r3, #4
 800bbdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3b04      	subs	r3, #4
 800bbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f023 0201 	bic.w	r2, r3, #1
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbfc:	4a0c      	ldr	r2, [pc, #48]	; (800bc30 <pxPortInitialiseStack+0x64>)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3b14      	subs	r3, #20
 800bc06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3b04      	subs	r3, #4
 800bc12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f06f 0202 	mvn.w	r2, #2
 800bc1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3b20      	subs	r3, #32
 800bc20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc22:	68fb      	ldr	r3, [r7, #12]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	0800bc35 	.word	0x0800bc35

0800bc34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc3e:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <prvTaskExitError+0x50>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc46:	d009      	beq.n	800bc5c <prvTaskExitError+0x28>
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	60fb      	str	r3, [r7, #12]
 800bc5a:	e7fe      	b.n	800bc5a <prvTaskExitError+0x26>
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc6e:	bf00      	nop
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0fc      	beq.n	800bc70 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc76:	bf00      	nop
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	20000088 	.word	0x20000088
	...

0800bc90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc90:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <pxCurrentTCBConst2>)
 800bc92:	6819      	ldr	r1, [r3, #0]
 800bc94:	6808      	ldr	r0, [r1, #0]
 800bc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9a:	f380 8809 	msr	PSP, r0
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f04f 0000 	mov.w	r0, #0
 800bca6:	f380 8811 	msr	BASEPRI, r0
 800bcaa:	4770      	bx	lr
 800bcac:	f3af 8000 	nop.w

0800bcb0 <pxCurrentTCBConst2>:
 800bcb0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bcb4:	bf00      	nop
 800bcb6:	bf00      	nop

0800bcb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bcb8:	4808      	ldr	r0, [pc, #32]	; (800bcdc <prvPortStartFirstTask+0x24>)
 800bcba:	6800      	ldr	r0, [r0, #0]
 800bcbc:	6800      	ldr	r0, [r0, #0]
 800bcbe:	f380 8808 	msr	MSP, r0
 800bcc2:	f04f 0000 	mov.w	r0, #0
 800bcc6:	f380 8814 	msr	CONTROL, r0
 800bcca:	b662      	cpsie	i
 800bccc:	b661      	cpsie	f
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	df00      	svc	0
 800bcd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcda:	bf00      	nop
 800bcdc:	e000ed08 	.word	0xe000ed08

0800bce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bce6:	4b44      	ldr	r3, [pc, #272]	; (800bdf8 <xPortStartScheduler+0x118>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a44      	ldr	r2, [pc, #272]	; (800bdfc <xPortStartScheduler+0x11c>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d109      	bne.n	800bd04 <xPortStartScheduler+0x24>
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	613b      	str	r3, [r7, #16]
 800bd02:	e7fe      	b.n	800bd02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd04:	4b3c      	ldr	r3, [pc, #240]	; (800bdf8 <xPortStartScheduler+0x118>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a3d      	ldr	r2, [pc, #244]	; (800be00 <xPortStartScheduler+0x120>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d109      	bne.n	800bd22 <xPortStartScheduler+0x42>
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e7fe      	b.n	800bd20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd22:	4b38      	ldr	r3, [pc, #224]	; (800be04 <xPortStartScheduler+0x124>)
 800bd24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	22ff      	movs	r2, #255	; 0xff
 800bd32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd3c:	78fb      	ldrb	r3, [r7, #3]
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	4b30      	ldr	r3, [pc, #192]	; (800be08 <xPortStartScheduler+0x128>)
 800bd48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd4a:	4b30      	ldr	r3, [pc, #192]	; (800be0c <xPortStartScheduler+0x12c>)
 800bd4c:	2207      	movs	r2, #7
 800bd4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd50:	e009      	b.n	800bd66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bd52:	4b2e      	ldr	r3, [pc, #184]	; (800be0c <xPortStartScheduler+0x12c>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	4a2c      	ldr	r2, [pc, #176]	; (800be0c <xPortStartScheduler+0x12c>)
 800bd5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd5c:	78fb      	ldrb	r3, [r7, #3]
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	005b      	lsls	r3, r3, #1
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd66:	78fb      	ldrb	r3, [r7, #3]
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd6e:	2b80      	cmp	r3, #128	; 0x80
 800bd70:	d0ef      	beq.n	800bd52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd72:	4b26      	ldr	r3, [pc, #152]	; (800be0c <xPortStartScheduler+0x12c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f1c3 0307 	rsb	r3, r3, #7
 800bd7a:	2b04      	cmp	r3, #4
 800bd7c:	d009      	beq.n	800bd92 <xPortStartScheduler+0xb2>
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	60bb      	str	r3, [r7, #8]
 800bd90:	e7fe      	b.n	800bd90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd92:	4b1e      	ldr	r3, [pc, #120]	; (800be0c <xPortStartScheduler+0x12c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	021b      	lsls	r3, r3, #8
 800bd98:	4a1c      	ldr	r2, [pc, #112]	; (800be0c <xPortStartScheduler+0x12c>)
 800bd9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd9c:	4b1b      	ldr	r3, [pc, #108]	; (800be0c <xPortStartScheduler+0x12c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bda4:	4a19      	ldr	r2, [pc, #100]	; (800be0c <xPortStartScheduler+0x12c>)
 800bda6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdb0:	4b17      	ldr	r3, [pc, #92]	; (800be10 <xPortStartScheduler+0x130>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a16      	ldr	r2, [pc, #88]	; (800be10 <xPortStartScheduler+0x130>)
 800bdb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdbc:	4b14      	ldr	r3, [pc, #80]	; (800be10 <xPortStartScheduler+0x130>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a13      	ldr	r2, [pc, #76]	; (800be10 <xPortStartScheduler+0x130>)
 800bdc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdc8:	f000 f8d6 	bl	800bf78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdcc:	4b11      	ldr	r3, [pc, #68]	; (800be14 <xPortStartScheduler+0x134>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdd2:	f000 f8f5 	bl	800bfc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdd6:	4b10      	ldr	r3, [pc, #64]	; (800be18 <xPortStartScheduler+0x138>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a0f      	ldr	r2, [pc, #60]	; (800be18 <xPortStartScheduler+0x138>)
 800bddc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bde0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bde2:	f7ff ff69 	bl	800bcb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bde6:	f7fe fdbd 	bl	800a964 <vTaskSwitchContext>
	prvTaskExitError();
 800bdea:	f7ff ff23 	bl	800bc34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	e000ed00 	.word	0xe000ed00
 800bdfc:	410fc271 	.word	0x410fc271
 800be00:	410fc270 	.word	0x410fc270
 800be04:	e000e400 	.word	0xe000e400
 800be08:	200004a8 	.word	0x200004a8
 800be0c:	200004ac 	.word	0x200004ac
 800be10:	e000ed20 	.word	0xe000ed20
 800be14:	20000088 	.word	0x20000088
 800be18:	e000ef34 	.word	0xe000ef34

0800be1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be26:	f383 8811 	msr	BASEPRI, r3
 800be2a:	f3bf 8f6f 	isb	sy
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be34:	4b0e      	ldr	r3, [pc, #56]	; (800be70 <vPortEnterCritical+0x54>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	3301      	adds	r3, #1
 800be3a:	4a0d      	ldr	r2, [pc, #52]	; (800be70 <vPortEnterCritical+0x54>)
 800be3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be3e:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <vPortEnterCritical+0x54>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d10e      	bne.n	800be64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be46:	4b0b      	ldr	r3, [pc, #44]	; (800be74 <vPortEnterCritical+0x58>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d009      	beq.n	800be64 <vPortEnterCritical+0x48>
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	603b      	str	r3, [r7, #0]
 800be62:	e7fe      	b.n	800be62 <vPortEnterCritical+0x46>
	}
}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	20000088 	.word	0x20000088
 800be74:	e000ed04 	.word	0xe000ed04

0800be78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be7e:	4b11      	ldr	r3, [pc, #68]	; (800bec4 <vPortExitCritical+0x4c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d109      	bne.n	800be9a <vPortExitCritical+0x22>
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	607b      	str	r3, [r7, #4]
 800be98:	e7fe      	b.n	800be98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800be9a:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <vPortExitCritical+0x4c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	4a08      	ldr	r2, [pc, #32]	; (800bec4 <vPortExitCritical+0x4c>)
 800bea2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bea4:	4b07      	ldr	r3, [pc, #28]	; (800bec4 <vPortExitCritical+0x4c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d104      	bne.n	800beb6 <vPortExitCritical+0x3e>
 800beac:	2300      	movs	r3, #0
 800beae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800beb6:	bf00      	nop
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	20000088 	.word	0x20000088
	...

0800bed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bed0:	f3ef 8009 	mrs	r0, PSP
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <pxCurrentTCBConst>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	f01e 0f10 	tst.w	lr, #16
 800bee0:	bf08      	it	eq
 800bee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	6010      	str	r0, [r2, #0]
 800beec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bef4:	f380 8811 	msr	BASEPRI, r0
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f7fe fd30 	bl	800a964 <vTaskSwitchContext>
 800bf04:	f04f 0000 	mov.w	r0, #0
 800bf08:	f380 8811 	msr	BASEPRI, r0
 800bf0c:	bc09      	pop	{r0, r3}
 800bf0e:	6819      	ldr	r1, [r3, #0]
 800bf10:	6808      	ldr	r0, [r1, #0]
 800bf12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf16:	f01e 0f10 	tst.w	lr, #16
 800bf1a:	bf08      	it	eq
 800bf1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf20:	f380 8809 	msr	PSP, r0
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	f3af 8000 	nop.w

0800bf30 <pxCurrentTCBConst>:
 800bf30:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop

0800bf38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf50:	f7fe fc50 	bl	800a7f4 <xTaskIncrementTick>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf5a:	4b06      	ldr	r3, [pc, #24]	; (800bf74 <SysTick_Handler+0x3c>)
 800bf5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	2300      	movs	r3, #0
 800bf64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	e000ed04 	.word	0xe000ed04

0800bf78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf7c:	4b0b      	ldr	r3, [pc, #44]	; (800bfac <vPortSetupTimerInterrupt+0x34>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf82:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <vPortSetupTimerInterrupt+0x38>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf88:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <vPortSetupTimerInterrupt+0x3c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a0a      	ldr	r2, [pc, #40]	; (800bfb8 <vPortSetupTimerInterrupt+0x40>)
 800bf8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf92:	099b      	lsrs	r3, r3, #6
 800bf94:	4a09      	ldr	r2, [pc, #36]	; (800bfbc <vPortSetupTimerInterrupt+0x44>)
 800bf96:	3b01      	subs	r3, #1
 800bf98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf9a:	4b04      	ldr	r3, [pc, #16]	; (800bfac <vPortSetupTimerInterrupt+0x34>)
 800bf9c:	2207      	movs	r2, #7
 800bf9e:	601a      	str	r2, [r3, #0]
}
 800bfa0:	bf00      	nop
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	e000e010 	.word	0xe000e010
 800bfb0:	e000e018 	.word	0xe000e018
 800bfb4:	20000090 	.word	0x20000090
 800bfb8:	10624dd3 	.word	0x10624dd3
 800bfbc:	e000e014 	.word	0xe000e014

0800bfc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfd0 <vPortEnableVFP+0x10>
 800bfc4:	6801      	ldr	r1, [r0, #0]
 800bfc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfca:	6001      	str	r1, [r0, #0]
 800bfcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfce:	bf00      	nop
 800bfd0:	e000ed88 	.word	0xe000ed88

0800bfd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfda:	f3ef 8305 	mrs	r3, IPSR
 800bfde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b0f      	cmp	r3, #15
 800bfe4:	d913      	bls.n	800c00e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfe6:	4a16      	ldr	r2, [pc, #88]	; (800c040 <vPortValidateInterruptPriority+0x6c>)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	4413      	add	r3, r2
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bff0:	4b14      	ldr	r3, [pc, #80]	; (800c044 <vPortValidateInterruptPriority+0x70>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	7afa      	ldrb	r2, [r7, #11]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d209      	bcs.n	800c00e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	607b      	str	r3, [r7, #4]
 800c00c:	e7fe      	b.n	800c00c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c00e:	4b0e      	ldr	r3, [pc, #56]	; (800c048 <vPortValidateInterruptPriority+0x74>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c016:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <vPortValidateInterruptPriority+0x78>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d909      	bls.n	800c032 <vPortValidateInterruptPriority+0x5e>
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	603b      	str	r3, [r7, #0]
 800c030:	e7fe      	b.n	800c030 <vPortValidateInterruptPriority+0x5c>
	}
 800c032:	bf00      	nop
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	e000e3f0 	.word	0xe000e3f0
 800c044:	200004a8 	.word	0x200004a8
 800c048:	e000ed0c 	.word	0xe000ed0c
 800c04c:	200004ac 	.word	0x200004ac

0800c050 <COM_init>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COM_init(void)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b088      	sub	sp, #32
 800c054:	af00      	add	r7, sp, #0
	osMailQDef(txMailQueue, 16, queue_message_t);
 800c056:	2310      	movs	r3, #16
 800c058:	613b      	str	r3, [r7, #16]
 800c05a:	2364      	movs	r3, #100	; 0x64
 800c05c:	617b      	str	r3, [r7, #20]
 800c05e:	f107 031c 	add.w	r3, r7, #28
 800c062:	61bb      	str	r3, [r7, #24]
	txMailQueueHandle = osMailCreate(osMailQ(txMailQueue), NULL);
 800c064:	f107 0310 	add.w	r3, r7, #16
 800c068:	2100      	movs	r1, #0
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fd f8ec 	bl	8009248 <osMailCreate>
 800c070:	4602      	mov	r2, r0
 800c072:	4b0a      	ldr	r3, [pc, #40]	; (800c09c <COM_init+0x4c>)
 800c074:	601a      	str	r2, [r3, #0]

	osMailQDef(rxMailQueue, 16, queue_message_t);
 800c076:	2310      	movs	r3, #16
 800c078:	603b      	str	r3, [r7, #0]
 800c07a:	2364      	movs	r3, #100	; 0x64
 800c07c:	607b      	str	r3, [r7, #4]
 800c07e:	f107 030c 	add.w	r3, r7, #12
 800c082:	60bb      	str	r3, [r7, #8]
	rxMailQueueHandle = osMailCreate(osMailQ(rxMailQueue), NULL);
 800c084:	463b      	mov	r3, r7
 800c086:	2100      	movs	r1, #0
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fd f8dd 	bl	8009248 <osMailCreate>
 800c08e:	4602      	mov	r2, r0
 800c090:	4b03      	ldr	r3, [pc, #12]	; (800c0a0 <COM_init+0x50>)
 800c092:	601a      	str	r2, [r3, #0]
}
 800c094:	bf00      	nop
 800c096:	3720      	adds	r7, #32
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	2000057c 	.word	0x2000057c
 800c0a0:	20000580 	.word	0x20000580

0800c0a4 <COM_getReadyCommandFlag>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
bool COM_getReadyCommandFlag(void)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	af00      	add	r7, sp, #0
	return Uart_Buffer.rx_ready_command;
 800c0a8:	4b03      	ldr	r3, [pc, #12]	; (800c0b8 <COM_getReadyCommandFlag+0x14>)
 800c0aa:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	200004b0 	.word	0x200004b0

0800c0bc <COM_setReadyCommandFlagOn>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void COM_setReadyCommandFlagOn(void)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	af00      	add	r7, sp, #0
	Uart_Buffer.rx_ready_command = true;
 800c0c0:	4b04      	ldr	r3, [pc, #16]	; (800c0d4 <COM_setReadyCommandFlagOn+0x18>)
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 800c0c8:	bf00      	nop
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	200004b0 	.word	0x200004b0

0800c0d8 <COM_setReadyCommandFlagOff>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void COM_setReadyCommandFlagOff(void)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	af00      	add	r7, sp, #0
	Uart_Buffer.rx_ready_command = false;
 800c0dc:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <COM_setReadyCommandFlagOff+0x18>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 800c0e4:	bf00      	nop
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	200004b0 	.word	0x200004b0

0800c0f4 <COM_readyCommandProcess>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COM_readyCommandProcess(void)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
	osEvent evt;
	evt = osMailGet(rxMailQueueHandle, 0);
 800c0fa:	4b0f      	ldr	r3, [pc, #60]	; (800c138 <COM_readyCommandProcess+0x44>)
 800c0fc:	6819      	ldr	r1, [r3, #0]
 800c0fe:	1d3b      	adds	r3, r7, #4
 800c100:	2200      	movs	r2, #0
 800c102:	4618      	mov	r0, r3
 800c104:	f7fd f94c 	bl	80093a0 <osMailGet>
	if (evt.status == osEventMail)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b20      	cmp	r3, #32
 800c10c:	d110      	bne.n	800c130 <COM_readyCommandProcess+0x3c>
	{
		queue_message_t *queue_msg_get;
		queue_msg_get = evt.value.p;
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	617b      	str	r3, [r7, #20]
		char* token = strtok((char*)queue_msg_get->p_buffer, " ");
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	4909      	ldr	r1, [pc, #36]	; (800c13c <COM_readyCommandProcess+0x48>)
 800c116:	4618      	mov	r0, r3
 800c118:	f003 ffca 	bl	80100b0 <strtok>
 800c11c:	6138      	str	r0, [r7, #16]
		COMMAND_findAndExecuteCommand(token);
 800c11e:	6938      	ldr	r0, [r7, #16]
 800c120:	f000 f926 	bl	800c370 <COMMAND_findAndExecuteCommand>
		osMailFree(rxMailQueueHandle, queue_msg_get);
 800c124:	4b04      	ldr	r3, [pc, #16]	; (800c138 <COM_readyCommandProcess+0x44>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6979      	ldr	r1, [r7, #20]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fd f9ac 	bl	8009488 <osMailFree>
	}
}
 800c130:	bf00      	nop
 800c132:	3718      	adds	r7, #24
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	20000580 	.word	0x20000580
 800c13c:	08011c10 	.word	0x08011c10

0800c140 <HAL_UART_RxCpltCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
	 */
	COM_halUartReceiveDma();
 800c148:	f000 f898 	bl	800c27c <COM_halUartReceiveDma>

	if (COM_charHandler())
 800c14c:	f000 f8cc 	bl	800c2e8 <COM_charHandler>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d020      	beq.n	800c198 <HAL_UART_RxCpltCallback+0x58>
	{
		queue_message_t *queue_msg_set;
		queue_msg_set = osMailAlloc(rxMailQueueHandle, 0);
 800c156:	4b12      	ldr	r3, [pc, #72]	; (800c1a0 <HAL_UART_RxCpltCallback+0x60>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2100      	movs	r1, #0
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fd f8cb 	bl	80092f8 <osMailAlloc>
 800c162:	60f8      	str	r0, [r7, #12]
		if (queue_msg_set == NULL)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d105      	bne.n	800c176 <HAL_UART_RxCpltCallback+0x36>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800c16a:	2201      	movs	r2, #1
 800c16c:	2120      	movs	r1, #32
 800c16e:	480d      	ldr	r0, [pc, #52]	; (800c1a4 <HAL_UART_RxCpltCallback+0x64>)
 800c170:	f7f6 fd3a 	bl	8002be8 <HAL_GPIO_WritePin>
			return;
 800c174:	e010      	b.n	800c198 <HAL_UART_RxCpltCallback+0x58>
		}
		strncpy((char*)queue_msg_set->p_buffer, (char*)Uart_Buffer.p_rx_buffer, sizeof(queue_msg_set->p_buffer));
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2264      	movs	r2, #100	; 0x64
 800c17a:	490b      	ldr	r1, [pc, #44]	; (800c1a8 <HAL_UART_RxCpltCallback+0x68>)
 800c17c:	4618      	mov	r0, r3
 800c17e:	f003 ff81 	bl	8010084 <strncpy>
		COM_bufferInit(Uart_Buffer.p_rx_buffer);
 800c182:	4809      	ldr	r0, [pc, #36]	; (800c1a8 <HAL_UART_RxCpltCallback+0x68>)
 800c184:	f000 f8de 	bl	800c344 <COM_bufferInit>
		COM_setReadyCommandFlagOff();
 800c188:	f7ff ffa6 	bl	800c0d8 <COM_setReadyCommandFlagOff>
		osMailPut(rxMailQueueHandle, queue_msg_set);
 800c18c:	4b04      	ldr	r3, [pc, #16]	; (800c1a0 <HAL_UART_RxCpltCallback+0x60>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68f9      	ldr	r1, [r7, #12]
 800c192:	4618      	mov	r0, r3
 800c194:	f7fd f8c6 	bl	8009324 <osMailPut>
	}
}
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	20000580 	.word	0x20000580
 800c1a4:	40020000 	.word	0x40020000
 800c1a8:	200004b0 	.word	0x200004b0

0800c1ac <COM_uartPrint>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COM_uartPrint(char* token)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
	queue_message_t *queue_msg_set;
	queue_msg_set = osMailAlloc(txMailQueueHandle, 0);
 800c1b4:	4b14      	ldr	r3, [pc, #80]	; (800c208 <COM_uartPrint+0x5c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fd f89c 	bl	80092f8 <osMailAlloc>
 800c1c0:	60f8      	str	r0, [r7, #12]
	if (queue_msg_set == NULL)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d105      	bne.n	800c1d4 <COM_uartPrint+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	2120      	movs	r1, #32
 800c1cc:	480f      	ldr	r0, [pc, #60]	; (800c20c <COM_uartPrint+0x60>)
 800c1ce:	f7f6 fd0b 	bl	8002be8 <HAL_GPIO_WritePin>
		return;
 800c1d2:	e016      	b.n	800c202 <COM_uartPrint+0x56>
	}
	strncpy((char*)queue_msg_set->p_buffer, token, sizeof(queue_msg_set->p_buffer));
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2264      	movs	r2, #100	; 0x64
 800c1d8:	6879      	ldr	r1, [r7, #4]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f003 ff52 	bl	8010084 <strncpy>
	osMailPut(txMailQueueHandle, queue_msg_set);
 800c1e0:	4b09      	ldr	r3, [pc, #36]	; (800c208 <COM_uartPrint+0x5c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68f9      	ldr	r1, [r7, #12]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fd f89c 	bl	8009324 <osMailPut>
	if (!COM_getTxBusyFlag())
 800c1ec:	f000 f870 	bl	800c2d0 <COM_getTxBusyFlag>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f083 0301 	eor.w	r3, r3, #1
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d002      	beq.n	800c202 <COM_uartPrint+0x56>
	{
		HAL_UART_TxCpltCallback(&huart2);
 800c1fc:	4804      	ldr	r0, [pc, #16]	; (800c210 <COM_uartPrint+0x64>)
 800c1fe:	f000 f809 	bl	800c214 <HAL_UART_TxCpltCallback>
	}
}
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	2000057c 	.word	0x2000057c
 800c20c:	40020000 	.word	0x40020000
 800c210:	200012c8 	.word	0x200012c8

0800c214 <HAL_UART_TxCpltCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
	osEvent evt;
	evt = osMailGet(txMailQueueHandle, 0);
 800c21c:	4b15      	ldr	r3, [pc, #84]	; (800c274 <HAL_UART_TxCpltCallback+0x60>)
 800c21e:	6819      	ldr	r1, [r3, #0]
 800c220:	f107 0308 	add.w	r3, r7, #8
 800c224:	2200      	movs	r2, #0
 800c226:	4618      	mov	r0, r3
 800c228:	f7fd f8ba 	bl	80093a0 <osMailGet>
	if (evt.status != osEventMail)
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2b20      	cmp	r3, #32
 800c230:	d002      	beq.n	800c238 <HAL_UART_TxCpltCallback+0x24>
	{
		COM_setTxBusyFlagOff();
 800c232:	f000 f83f 	bl	800c2b4 <COM_setTxBusyFlagOff>
		strncpy((char*)Uart_Buffer.p_tx_buffer, (char*)queue_msg_get->p_buffer, sizeof(Uart_Buffer.p_tx_buffer));
		osMailFree(txMailQueueHandle, queue_msg_get);
		HAL_UART_Transmit_DMA(huart, Uart_Buffer.p_tx_buffer, strlen((char*)Uart_Buffer.p_tx_buffer));
		COM_setTxBusyFlagOn();
	}
}
 800c236:	e019      	b.n	800c26c <HAL_UART_TxCpltCallback+0x58>
		queue_msg_get = evt.value.p;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	617b      	str	r3, [r7, #20]
		strncpy((char*)Uart_Buffer.p_tx_buffer, (char*)queue_msg_get->p_buffer, sizeof(Uart_Buffer.p_tx_buffer));
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	2264      	movs	r2, #100	; 0x64
 800c240:	4619      	mov	r1, r3
 800c242:	480d      	ldr	r0, [pc, #52]	; (800c278 <HAL_UART_TxCpltCallback+0x64>)
 800c244:	f003 ff1e 	bl	8010084 <strncpy>
		osMailFree(txMailQueueHandle, queue_msg_get);
 800c248:	4b0a      	ldr	r3, [pc, #40]	; (800c274 <HAL_UART_TxCpltCallback+0x60>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6979      	ldr	r1, [r7, #20]
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fd f91a 	bl	8009488 <osMailFree>
		HAL_UART_Transmit_DMA(huart, Uart_Buffer.p_tx_buffer, strlen((char*)Uart_Buffer.p_tx_buffer));
 800c254:	4808      	ldr	r0, [pc, #32]	; (800c278 <HAL_UART_TxCpltCallback+0x64>)
 800c256:	f7f3 ffc3 	bl	80001e0 <strlen>
 800c25a:	4603      	mov	r3, r0
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	461a      	mov	r2, r3
 800c260:	4905      	ldr	r1, [pc, #20]	; (800c278 <HAL_UART_TxCpltCallback+0x64>)
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7fb fd62 	bl	8007d2c <HAL_UART_Transmit_DMA>
		COM_setTxBusyFlagOn();
 800c268:	f000 f816 	bl	800c298 <COM_setTxBusyFlagOn>
}
 800c26c:	bf00      	nop
 800c26e:	3718      	adds	r7, #24
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	2000057c 	.word	0x2000057c
 800c278:	20000517 	.word	0x20000517

0800c27c <COM_halUartReceiveDma>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COM_halUartReceiveDma(void)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, &Uart_Buffer.rx_single_char, 1);
 800c280:	2201      	movs	r2, #1
 800c282:	4903      	ldr	r1, [pc, #12]	; (800c290 <COM_halUartReceiveDma+0x14>)
 800c284:	4803      	ldr	r0, [pc, #12]	; (800c294 <COM_halUartReceiveDma+0x18>)
 800c286:	f7fb fdbd 	bl	8007e04 <HAL_UART_Receive_DMA>
}
 800c28a:	bf00      	nop
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	20000515 	.word	0x20000515
 800c294:	200012c8 	.word	0x200012c8

0800c298 <COM_setTxBusyFlagOn>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void COM_setTxBusyFlagOn(void)
{
 800c298:	b480      	push	{r7}
 800c29a:	af00      	add	r7, sp, #0
	Uart_Buffer.tx_busy = true;
 800c29c:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <COM_setTxBusyFlagOn+0x18>)
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 800c2a4:	bf00      	nop
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	200004b0 	.word	0x200004b0

0800c2b4 <COM_setTxBusyFlagOff>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COM_setTxBusyFlagOff(void)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	af00      	add	r7, sp, #0
	Uart_Buffer.tx_busy = false;
 800c2b8:	4b04      	ldr	r3, [pc, #16]	; (800c2cc <COM_setTxBusyFlagOff+0x18>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 800c2c0:	bf00      	nop
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	200004b0 	.word	0x200004b0

0800c2d0 <COM_getTxBusyFlag>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
bool COM_getTxBusyFlag(void)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	af00      	add	r7, sp, #0
	return Uart_Buffer.tx_busy;
 800c2d4:	4b03      	ldr	r3, [pc, #12]	; (800c2e4 <COM_getTxBusyFlag+0x14>)
 800c2d6:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	200004b0 	.word	0x200004b0

0800c2e8 <COM_charHandler>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
bool COM_charHandler(void)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	af00      	add	r7, sp, #0
	if (COM_getReadyCommandFlag())
 800c2ec:	f7ff feda 	bl	800c0a4 <COM_getReadyCommandFlag>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <COM_charHandler+0x12>
	{
		return false;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e020      	b.n	800c33c <COM_charHandler+0x54>
	}

	if (Uart_Buffer.rx_single_char != '\n')
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <COM_charHandler+0x58>)
 800c2fc:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800c300:	2b0a      	cmp	r3, #10
 800c302:	d016      	beq.n	800c332 <COM_charHandler+0x4a>
	{
		if(Uart_Buffer.rx_index < BUFFER_SIZE)
 800c304:	4b0e      	ldr	r3, [pc, #56]	; (800c340 <COM_charHandler+0x58>)
 800c306:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800c30a:	2b63      	cmp	r3, #99	; 0x63
 800c30c:	d815      	bhi.n	800c33a <COM_charHandler+0x52>
		{
			Uart_Buffer.p_rx_buffer[Uart_Buffer.rx_index] = Uart_Buffer.rx_single_char;
 800c30e:	4b0c      	ldr	r3, [pc, #48]	; (800c340 <COM_charHandler+0x58>)
 800c310:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800c314:	461a      	mov	r2, r3
 800c316:	4b0a      	ldr	r3, [pc, #40]	; (800c340 <COM_charHandler+0x58>)
 800c318:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 800c31c:	4b08      	ldr	r3, [pc, #32]	; (800c340 <COM_charHandler+0x58>)
 800c31e:	5499      	strb	r1, [r3, r2]
			Uart_Buffer.rx_index++;
 800c320:	4b07      	ldr	r3, [pc, #28]	; (800c340 <COM_charHandler+0x58>)
 800c322:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800c326:	3301      	adds	r3, #1
 800c328:	b2da      	uxtb	r2, r3
 800c32a:	4b05      	ldr	r3, [pc, #20]	; (800c340 <COM_charHandler+0x58>)
 800c32c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800c330:	e003      	b.n	800c33a <COM_charHandler+0x52>
		}
	}
	else
	{
		COM_setReadyCommandFlagOn();
 800c332:	f7ff fec3 	bl	800c0bc <COM_setReadyCommandFlagOn>
		return true;
 800c336:	2301      	movs	r3, #1
 800c338:	e000      	b.n	800c33c <COM_charHandler+0x54>
	}
	return false;
 800c33a:	2300      	movs	r3, #0
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	200004b0 	.word	0x200004b0

0800c344 <COM_bufferInit>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void COM_bufferInit(uint8_t* p_buffer)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
	memset(Uart_Buffer.p_rx_buffer, 0, sizeof(uint8_t) * Uart_Buffer.rx_index);
 800c34c:	4b07      	ldr	r3, [pc, #28]	; (800c36c <COM_bufferInit+0x28>)
 800c34e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800c352:	461a      	mov	r2, r3
 800c354:	2100      	movs	r1, #0
 800c356:	4805      	ldr	r0, [pc, #20]	; (800c36c <COM_bufferInit+0x28>)
 800c358:	f003 f8eb 	bl	800f532 <memset>
	Uart_Buffer.rx_index = 0;
 800c35c:	4b03      	ldr	r3, [pc, #12]	; (800c36c <COM_bufferInit+0x28>)
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 800c364:	bf00      	nop
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	200004b0 	.word	0x200004b0

0800c370 <COMMAND_findAndExecuteCommand>:
   * @brief 	XXX
   * @param 	XXX
   * @retval	XXX
   */
void COMMAND_findAndExecuteCommand(char* token)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
 800c37c:	e02a      	b.n	800c3d4 <COMMAND_findAndExecuteCommand+0x64>
	{
		if (strncmp(token, Commands[i].name, Commands[i].size)==0)
 800c37e:	7bfa      	ldrb	r2, [r7, #15]
 800c380:	4917      	ldr	r1, [pc, #92]	; (800c3e0 <COMMAND_findAndExecuteCommand+0x70>)
 800c382:	4613      	mov	r3, r2
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	440b      	add	r3, r1
 800c38c:	6818      	ldr	r0, [r3, #0]
 800c38e:	7bfa      	ldrb	r2, [r7, #15]
 800c390:	4913      	ldr	r1, [pc, #76]	; (800c3e0 <COMMAND_findAndExecuteCommand+0x70>)
 800c392:	4613      	mov	r3, r2
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	4413      	add	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	440b      	add	r3, r1
 800c39c:	3304      	adds	r3, #4
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	4601      	mov	r1, r0
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f003 fe5b 	bl	8010060 <strncmp>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10e      	bne.n	800c3ce <COMMAND_findAndExecuteCommand+0x5e>
		{
			COM_uartPrint(OK);
 800c3b0:	480c      	ldr	r0, [pc, #48]	; (800c3e4 <COMMAND_findAndExecuteCommand+0x74>)
 800c3b2:	f7ff fefb 	bl	800c1ac <COM_uartPrint>
			Commands[i].func_ptr(token);
 800c3b6:	7bfa      	ldrb	r2, [r7, #15]
 800c3b8:	4909      	ldr	r1, [pc, #36]	; (800c3e0 <COMMAND_findAndExecuteCommand+0x70>)
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	4413      	add	r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	440b      	add	r3, r1
 800c3c4:	3308      	adds	r3, #8
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	4798      	blx	r3
			return;
 800c3cc:	e005      	b.n	800c3da <COMMAND_findAndExecuteCommand+0x6a>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	73fb      	strb	r3, [r7, #15]
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
 800c3d6:	2b14      	cmp	r3, #20
 800c3d8:	d9d1      	bls.n	800c37e <COMMAND_findAndExecuteCommand+0xe>
		}
	}
}
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	0801211c 	.word	0x0801211c
 800c3e4:	08011d44 	.word	0x08011d44

0800c3e8 <COMMAND_pingCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_pingCallback(char* token)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
	COM_uartPrint(PING);
 800c3f0:	4803      	ldr	r0, [pc, #12]	; (800c400 <COMMAND_pingCallback+0x18>)
 800c3f2:	f7ff fedb 	bl	800c1ac <COM_uartPrint>
}
 800c3f6:	bf00      	nop
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	08011d48 	.word	0x08011d48

0800c404 <COMMAND_getVersionCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_getVersionCallback(char* token)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	COM_uartPrint(VERSION);
 800c40c:	4803      	ldr	r0, [pc, #12]	; (800c41c <COMMAND_getVersionCallback+0x18>)
 800c40e:	f7ff fecd 	bl	800c1ac <COM_uartPrint>
}
 800c412:	bf00      	nop
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	08011d50 	.word	0x08011d50

0800c420 <COMMAND_pwmStartCallback>:

void COMMAND_pwmStartCallback(char* token)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800c428:	2100      	movs	r1, #0
 800c42a:	4803      	ldr	r0, [pc, #12]	; (800c438 <COMMAND_pwmStartCallback+0x18>)
 800c42c:	f7fa f804 	bl	8006438 <HAL_TIM_PWM_Start>
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	200011c8 	.word	0x200011c8

0800c43c <COMMAND_pwmStopCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_pwmStopCallback(char* token)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800c444:	2100      	movs	r1, #0
 800c446:	4803      	ldr	r0, [pc, #12]	; (800c454 <COMMAND_pwmStopCallback+0x18>)
 800c448:	f7fa f8aa 	bl	80065a0 <HAL_TIM_PWM_Stop>
}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	200011c8 	.word	0x200011c8

0800c458 <COMMAND_pwmDcCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_pwmDcCallback(char* token)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 800c460:	490d      	ldr	r1, [pc, #52]	; (800c498 <COMMAND_pwmDcCallback+0x40>)
 800c462:	2000      	movs	r0, #0
 800c464:	f003 fe24 	bl	80100b0 <strtok>
 800c468:	6078      	str	r0, [r7, #4]
	int32_t dc = atoi(token);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f003 f81d 	bl	800f4aa <atoi>
 800c470:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2b64      	cmp	r3, #100	; 0x64
 800c476:	dd01      	ble.n	800c47c <COMMAND_pwmDcCallback+0x24>
 800c478:	2364      	movs	r3, #100	; 0x64
 800c47a:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	da01      	bge.n	800c486 <COMMAND_pwmDcCallback+0x2e>
 800c482:	2300      	movs	r3, #0
 800c484:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 800c486:	4b05      	ldr	r3, [pc, #20]	; (800c49c <COMMAND_pwmDcCallback+0x44>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c48e:	bf00      	nop
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	08011d58 	.word	0x08011d58
 800c49c:	200011c8 	.word	0x200011c8

0800c4a0 <COMMAND_crcWholeFlashCalcCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_crcWholeFlashCalcCallback(char* token)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
	FLASH_crcWholeFlashCalc();
 800c4a8:	f000 fa10 	bl	800c8cc <FLASH_crcWholeFlashCalc>
}
 800c4ac:	bf00      	nop
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <COMMAND_iwdgTestCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_iwdgTestCallback(char* token)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
#ifdef IWDG_ENABLE
	while(1);
#endif
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <COMMAND_flashLockCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_flashLockCallback(char* token)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
	FLASH_lock();
 800c4d0:	f000 fa1e 	bl	800c910 <FLASH_lock>
}
 800c4d4:	bf00      	nop
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <COMMAND_setSNCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_setSNCallback(char* token)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	FLASH_setSerialNumberInSector7();
 800c4e4:	f000 fa52 	bl	800c98c <FLASH_setSerialNumberInSector7>
}
 800c4e8:	bf00      	nop
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <COMMAND_getSNCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_getSNCallback(char* token)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
	FLASH_getSerialNumberFromSector7();
 800c4f8:	f000 fa62 	bl	800c9c0 <FLASH_getSerialNumberFromSector7>
}
 800c4fc:	bf00      	nop
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <COMMAND_startTickCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_startTickCallback(char* token)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	RTC_activateAlarmA();
 800c50c:	f002 fa6c 	bl	800e9e8 <RTC_activateAlarmA>
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <COMMAND_stopTickCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_stopTickCallback(char* token)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
	RTC_deactivateAlarmA();
 800c520:	f002 fa96 	bl	800ea50 <RTC_deactivateAlarmA>
}
 800c524:	bf00      	nop
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <COMMAND_assert0Callback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_assert0Callback(char* token)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
	assert_param(0);
 800c534:	f44f 7188 	mov.w	r1, #272	; 0x110
 800c538:	4803      	ldr	r0, [pc, #12]	; (800c548 <COMMAND_assert0Callback+0x1c>)
 800c53a:	f002 f98b 	bl	800e854 <assert_failed>
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	08011d5c 	.word	0x08011d5c

0800c54c <COMMAND_clearAssertFlagCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_clearAssertFlagCallback(char* token)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
	SYSTEM_DEBUG_assertResetFlag();
 800c554:	f002 fbf2 	bl	800ed3c <SYSTEM_DEBUG_assertResetFlag>
}
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <COMMAND_lsm6dslPerSampleEnableCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_lsm6dslPerSampleEnableCallback(char* token)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
	LSM6DSL_perSampleInit();
 800c568:	f000 fd64 	bl	800d034 <LSM6DSL_perSampleInit>
}
 800c56c:	bf00      	nop
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <COMMAND_lsm6dslFifoEnableCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_lsm6dslFifoEnableCallback(char* token)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
	LSM6DSL_fifoInit();
 800c57c:	f000 fe72 	bl	800d264 <LSM6DSL_fifoInit>
}
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <COMMAND_lsm6dslDisableCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_lsm6dslDisableCallback(char* token)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
	LSM6DSL_modesDisable();
 800c590:	f001 f91e 	bl	800d7d0 <LSM6DSL_modesDisable>
}
 800c594:	bf00      	nop
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <COMMAND_enterStopModeCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_enterStopModeCallback(char* token)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 800c5a4:	4908      	ldr	r1, [pc, #32]	; (800c5c8 <COMMAND_enterStopModeCallback+0x2c>)
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	f003 fd82 	bl	80100b0 <strtok>
 800c5ac:	6078      	str	r0, [r7, #4]
	uint32_t wake_up_time = atoi(token);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f002 ff7b 	bl	800f4aa <atoi>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	60fb      	str	r3, [r7, #12]
	SYSTEM_DEBUG_enterStopMode(wake_up_time);
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f002 fc8f 	bl	800eedc <SYSTEM_DEBUG_enterStopMode>
}
 800c5be:	bf00      	nop
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	08011d58 	.word	0x08011d58

0800c5cc <COMMAND_enterStandbyModeCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_enterStandbyModeCallback(char* token)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
	SYSTEM_DEBUG_enterStandbyMode();
 800c5d4:	f002 fcc6 	bl	800ef64 <SYSTEM_DEBUG_enterStandbyMode>
}
 800c5d8:	bf00      	nop
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <COMMAND_startOsTimerCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_startOsTimerCallback(char* token)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 800c5e8:	490a      	ldr	r1, [pc, #40]	; (800c614 <COMMAND_startOsTimerCallback+0x34>)
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	f003 fd60 	bl	80100b0 <strtok>
 800c5f0:	6078      	str	r0, [r7, #4]
	uint32_t timer_period_milisec = atoi(token) * 1000;
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f002 ff59 	bl	800f4aa <atoi>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c5fe:	fb03 f302 	mul.w	r3, r3, r2
 800c602:	60fb      	str	r3, [r7, #12]
	SYSTEM_ISR_osTimer01Start(timer_period_milisec);
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f002 fd15 	bl	800f034 <SYSTEM_ISR_osTimer01Start>
}
 800c60a:	bf00      	nop
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	08011d58 	.word	0x08011d58

0800c618 <COMMAND_stopOsTimerCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void COMMAND_stopOsTimerCallback(char* token)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
	SYSTEM_ISR_osTimer01Stop();
 800c620:	f002 fd18 	bl	800f054 <SYSTEM_ISR_osTimer01Stop>
}
 800c624:	bf00      	nop
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800c630:	4b06      	ldr	r3, [pc, #24]	; (800c64c <MX_CRC_Init+0x20>)
 800c632:	4a07      	ldr	r2, [pc, #28]	; (800c650 <MX_CRC_Init+0x24>)
 800c634:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800c636:	4805      	ldr	r0, [pc, #20]	; (800c64c <MX_CRC_Init+0x20>)
 800c638:	f7f4 fdb4 	bl	80011a4 <HAL_CRC_Init>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d001      	beq.n	800c646 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800c642:	f002 f8ff 	bl	800e844 <Error_Handler>
  }

}
 800c646:	bf00      	nop
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	200010f0 	.word	0x200010f0
 800c650:	40023000 	.word	0x40023000

0800c654 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a0b      	ldr	r2, [pc, #44]	; (800c690 <HAL_CRC_MspInit+0x3c>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d10d      	bne.n	800c682 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800c666:	2300      	movs	r3, #0
 800c668:	60fb      	str	r3, [r7, #12]
 800c66a:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <HAL_CRC_MspInit+0x40>)
 800c66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66e:	4a09      	ldr	r2, [pc, #36]	; (800c694 <HAL_CRC_MspInit+0x40>)
 800c670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c674:	6313      	str	r3, [r2, #48]	; 0x30
 800c676:	4b07      	ldr	r3, [pc, #28]	; (800c694 <HAL_CRC_MspInit+0x40>)
 800c678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c67e:	60fb      	str	r3, [r7, #12]
 800c680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800c682:	bf00      	nop
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	40023000 	.word	0x40023000
 800c694:	40023800 	.word	0x40023800

0800c698 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c69e:	2300      	movs	r3, #0
 800c6a0:	607b      	str	r3, [r7, #4]
 800c6a2:	4b10      	ldr	r3, [pc, #64]	; (800c6e4 <MX_DMA_Init+0x4c>)
 800c6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a6:	4a0f      	ldr	r2, [pc, #60]	; (800c6e4 <MX_DMA_Init+0x4c>)
 800c6a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c6ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c6ae:	4b0d      	ldr	r3, [pc, #52]	; (800c6e4 <MX_DMA_Init+0x4c>)
 800c6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6b6:	607b      	str	r3, [r7, #4]
 800c6b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	2105      	movs	r1, #5
 800c6be:	2010      	movs	r0, #16
 800c6c0:	f7f4 fd2c 	bl	800111c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800c6c4:	2010      	movs	r0, #16
 800c6c6:	f7f4 fd55 	bl	8001174 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2105      	movs	r1, #5
 800c6ce:	2011      	movs	r0, #17
 800c6d0:	f7f4 fd24 	bl	800111c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800c6d4:	2011      	movs	r0, #17
 800c6d6:	f7f4 fd4d 	bl	8001174 <HAL_NVIC_EnableIRQ>

}
 800c6da:	bf00      	nop
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	40023800 	.word	0x40023800

0800c6e8 <FLASH_eraseSector>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void FLASH_eraseSector(void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800c6ec:	f7f5 fb2a 	bl	8001d44 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(Sector_Num, FLASH_VOLTAGE_RANGE_3);
 800c6f0:	4b04      	ldr	r3, [pc, #16]	; (800c704 <FLASH_eraseSector+0x1c>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2102      	movs	r1, #2
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7f5 fdea 	bl	80022d0 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 800c6fc:	f7f5 fb44 	bl	8001d88 <HAL_FLASH_Lock>
}
 800c700:	bf00      	nop
 800c702:	bd80      	pop	{r7, pc}
 800c704:	20000588 	.word	0x20000588

0800c708 <FLASH_setSectorAddress>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void FLASH_setSectorAddress(uint8_t sector, uint32_t addrs)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4603      	mov	r3, r0
 800c710:	6039      	str	r1, [r7, #0]
 800c712:	71fb      	strb	r3, [r7, #7]
	Sector_Num = sector;
 800c714:	4a05      	ldr	r2, [pc, #20]	; (800c72c <FLASH_setSectorAddress+0x24>)
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	7013      	strb	r3, [r2, #0]
	Sector_Addrs = addrs;
 800c71a:	4a05      	ldr	r2, [pc, #20]	; (800c730 <FLASH_setSectorAddress+0x28>)
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	6013      	str	r3, [r2, #0]
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	20000588 	.word	0x20000588
 800c730:	20000584 	.word	0x20000584

0800c734 <FLASH_writeN>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void FLASH_writeN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800c734:	b590      	push	{r4, r7, lr}
 800c736:	b089      	sub	sp, #36	; 0x24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = Sector_Addrs + idx;
 800c742:	4b34      	ldr	r3, [pc, #208]	; (800c814 <FLASH_writeN+0xe0>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	4413      	add	r3, r2
 800c74a:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	FLASH_eraseSector();
 800c74c:	f7ff ffcc 	bl	800c6e8 <FLASH_eraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 800c750:	f7f5 faf8 	bl	8001d44 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d01e      	beq.n	800c798 <FLASH_writeN+0x64>
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d038      	beq.n	800c7d0 <FLASH_writeN+0x9c>
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d151      	bne.n	800c806 <FLASH_writeN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 800c762:	2300      	movs	r3, #0
 800c764:	61bb      	str	r3, [r7, #24]
 800c766:	e012      	b.n	800c78e <FLASH_writeN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	4413      	add	r3, r2
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	b2db      	uxtb	r3, r3
 800c772:	f04f 0400 	mov.w	r4, #0
 800c776:	461a      	mov	r2, r3
 800c778:	4623      	mov	r3, r4
 800c77a:	69f9      	ldr	r1, [r7, #28]
 800c77c:	2000      	movs	r0, #0
 800c77e:	f7f5 fa7b 	bl	8001c78 <HAL_FLASH_Program>
					flashAddress++;
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	3301      	adds	r3, #1
 800c786:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	3301      	adds	r3, #1
 800c78c:	61bb      	str	r3, [r7, #24]
 800c78e:	69ba      	ldr	r2, [r7, #24]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	429a      	cmp	r2, r3
 800c794:	d3e8      	bcc.n	800c768 <FLASH_writeN+0x34>
				}
			break;
 800c796:	e036      	b.n	800c806 <FLASH_writeN+0xd2>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 800c798:	2300      	movs	r3, #0
 800c79a:	617b      	str	r3, [r7, #20]
 800c79c:	e013      	b.n	800c7c6 <FLASH_writeN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	f04f 0400 	mov.w	r4, #0
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	4623      	mov	r3, r4
 800c7b2:	69f9      	ldr	r1, [r7, #28]
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	f7f5 fa5f 	bl	8001c78 <HAL_FLASH_Program>
					flashAddress+=2;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	3302      	adds	r3, #2
 800c7be:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	617b      	str	r3, [r7, #20]
 800c7c6:	697a      	ldr	r2, [r7, #20]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d3e7      	bcc.n	800c79e <FLASH_writeN+0x6a>
				}
			break;
 800c7ce:	e01a      	b.n	800c806 <FLASH_writeN+0xd2>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	613b      	str	r3, [r7, #16]
 800c7d4:	e012      	b.n	800c7fc <FLASH_writeN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	4413      	add	r3, r2
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f04f 0400 	mov.w	r4, #0
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	4623      	mov	r3, r4
 800c7e8:	69f9      	ldr	r1, [r7, #28]
 800c7ea:	2002      	movs	r0, #2
 800c7ec:	f7f5 fa44 	bl	8001c78 <HAL_FLASH_Program>
					flashAddress+=4;
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	613b      	str	r3, [r7, #16]
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	429a      	cmp	r2, r3
 800c802:	d3e8      	bcc.n	800c7d6 <FLASH_writeN+0xa2>
				}
			break;
 800c804:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800c806:	f7f5 fabf 	bl	8001d88 <HAL_FLASH_Lock>
}
 800c80a:	bf00      	nop
 800c80c:	3724      	adds	r7, #36	; 0x24
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd90      	pop	{r4, r7, pc}
 800c812:	bf00      	nop
 800c814:	20000584 	.word	0x20000584

0800c818 <FLASH_readN>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void FLASH_readN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800c818:	b480      	push	{r7}
 800c81a:	b089      	sub	sp, #36	; 0x24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
 800c824:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = Sector_Addrs + idx;
 800c826:	4b28      	ldr	r3, [pc, #160]	; (800c8c8 <FLASH_readN+0xb0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	4413      	add	r3, r2
 800c82e:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 800c830:	78fb      	ldrb	r3, [r7, #3]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d018      	beq.n	800c868 <FLASH_readN+0x50>
 800c836:	2b02      	cmp	r3, #2
 800c838:	d02b      	beq.n	800c892 <FLASH_readN+0x7a>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d000      	beq.n	800c840 <FLASH_readN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 800c83e:	e03d      	b.n	800c8bc <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800c840:	2300      	movs	r3, #0
 800c842:	61bb      	str	r3, [r7, #24]
 800c844:	e00b      	b.n	800c85e <FLASH_readN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 800c846:	69fa      	ldr	r2, [r7, #28]
 800c848:	68b9      	ldr	r1, [r7, #8]
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	440b      	add	r3, r1
 800c84e:	7812      	ldrb	r2, [r2, #0]
 800c850:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	3301      	adds	r3, #1
 800c856:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	3301      	adds	r3, #1
 800c85c:	61bb      	str	r3, [r7, #24]
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	429a      	cmp	r2, r3
 800c864:	d3ef      	bcc.n	800c846 <FLASH_readN+0x2e>
			break;
 800c866:	e029      	b.n	800c8bc <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800c868:	2300      	movs	r3, #0
 800c86a:	617b      	str	r3, [r7, #20]
 800c86c:	e00c      	b.n	800c888 <FLASH_readN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 800c86e:	69fa      	ldr	r2, [r7, #28]
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	68b9      	ldr	r1, [r7, #8]
 800c876:	440b      	add	r3, r1
 800c878:	8812      	ldrh	r2, [r2, #0]
 800c87a:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	3302      	adds	r3, #2
 800c880:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	3301      	adds	r3, #1
 800c886:	617b      	str	r3, [r7, #20]
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d3ee      	bcc.n	800c86e <FLASH_readN+0x56>
			break;
 800c890:	e014      	b.n	800c8bc <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800c892:	2300      	movs	r3, #0
 800c894:	613b      	str	r3, [r7, #16]
 800c896:	e00c      	b.n	800c8b2 <FLASH_readN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 800c898:	69fa      	ldr	r2, [r7, #28]
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	68b9      	ldr	r1, [r7, #8]
 800c8a0:	440b      	add	r3, r1
 800c8a2:	6812      	ldr	r2, [r2, #0]
 800c8a4:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	613b      	str	r3, [r7, #16]
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d3ee      	bcc.n	800c898 <FLASH_readN+0x80>
			break;
 800c8ba:	bf00      	nop
}
 800c8bc:	bf00      	nop
 800c8be:	3724      	adds	r7, #36	; 0x24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	20000584 	.word	0x20000584

0800c8cc <FLASH_crcWholeFlashCalc>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void FLASH_crcWholeFlashCalc(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
	char temp [9];
	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 800c8d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c8d6:	617b      	str	r3, [r7, #20]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 800c8d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8dc:	613b      	str	r3, [r7, #16]

	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	6939      	ldr	r1, [r7, #16]
 800c8e2:	4809      	ldr	r0, [pc, #36]	; (800c908 <FLASH_crcWholeFlashCalc+0x3c>)
 800c8e4:	f7f4 fc88 	bl	80011f8 <HAL_CRC_Calculate>
 800c8e8:	60f8      	str	r0, [r7, #12]

	sprintf(temp, "%x\n", (unsigned int)crcFlashResult);
 800c8ea:	463b      	mov	r3, r7
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	4907      	ldr	r1, [pc, #28]	; (800c90c <FLASH_crcWholeFlashCalc+0x40>)
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f003 fb95 	bl	8010020 <siprintf>
	COM_uartPrint(temp);
 800c8f6:	463b      	mov	r3, r7
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7ff fc57 	bl	800c1ac <COM_uartPrint>
}
 800c8fe:	bf00      	nop
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	200010f0 	.word	0x200010f0
 800c90c:	08011d98 	.word	0x08011d98

0800c910 <FLASH_lock>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void FLASH_lock(void)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af00      	add	r7, sp, #0
	 *It does not prevent one part of code to read another part, or even rewrite.
	 *PCROP allows you to use debugger to debug your code,
	 *but protects reading and rewriting the "secret" part.*/

	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 800c916:	1d3b      	adds	r3, r7, #4
 800c918:	4618      	mov	r0, r3
 800c91a:	f7f5 fcb5 	bl	8002288 <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0)
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2baa      	cmp	r3, #170	; 0xaa
 800c922:	d12f      	bne.n	800c984 <FLASH_lock+0x74>
	{
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 800c924:	2355      	movs	r3, #85	; 0x55
 800c926:	617b      	str	r3, [r7, #20]
		obConfig.OptionType = OPTIONBYTE_RDP;
 800c928:	2302      	movs	r3, #2
 800c92a:	607b      	str	r3, [r7, #4]

		if (HAL_FLASH_Unlock() != HAL_OK)
 800c92c:	f7f5 fa0a 	bl	8001d44 <HAL_FLASH_Unlock>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <FLASH_lock+0x2a>
		{
			Error_Handler();
 800c936:	f001 ff85 	bl	800e844 <Error_Handler>
		}
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 800c93a:	f7f5 fa35 	bl	8001da8 <HAL_FLASH_OB_Unlock>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <FLASH_lock+0x38>
		{
			Error_Handler();
 800c944:	f001 ff7e 	bl	800e844 <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 800c948:	1d3b      	adds	r3, r7, #4
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7f5 fc16 	bl	800217c <HAL_FLASHEx_OBProgram>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <FLASH_lock+0x4a>
		{
			Error_Handler();
 800c956:	f001 ff75 	bl	800e844 <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 800c95a:	f7f5 fa51 	bl	8001e00 <HAL_FLASH_OB_Launch>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <FLASH_lock+0x58>
		{
			Error_Handler();
 800c964:	f001 ff6e 	bl	800e844 <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 800c968:	f7f5 fa3a 	bl	8001de0 <HAL_FLASH_OB_Lock>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <FLASH_lock+0x66>
		{
			Error_Handler();
 800c972:	f001 ff67 	bl	800e844 <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 800c976:	f7f5 fa07 	bl	8001d88 <HAL_FLASH_Lock>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d001      	beq.n	800c984 <FLASH_lock+0x74>
		{
			Error_Handler();
 800c980:	f001 ff60 	bl	800e844 <Error_Handler>
		FLASH_setSectorAddress(7, sector_7_addr);
		uint32_t myTestWrite[1] = {0xDEADBEEF}; 		//0xFFFFFFFF, 0xDEADBEEF
		FLASH_writeN(131072-4, myTestWrite2, 1, DATA_TYPE_32);
		*/
	}
}
 800c984:	bf00      	nop
 800c986:	3720      	adds	r7, #32
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <FLASH_setSerialNumberInSector7>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void FLASH_setSerialNumberInSector7(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
	//if (FLASH_wrpSectorDisable();

	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 800c992:	4b09      	ldr	r3, [pc, #36]	; (800c9b8 <FLASH_setSerialNumberInSector7+0x2c>)
 800c994:	607b      	str	r3, [r7, #4]
	FLASH_setSectorAddress(7, sector_7_addr);
 800c996:	6879      	ldr	r1, [r7, #4]
 800c998:	2007      	movs	r0, #7
 800c99a:	f7ff feb5 	bl	800c708 <FLASH_setSectorAddress>
	uint32_t myTestWrite[1] = {0xDEADBEEF}; //0xFFFFFFFF, 0xDEADBEEF
 800c99e:	4b07      	ldr	r3, [pc, #28]	; (800c9bc <FLASH_setSerialNumberInSector7+0x30>)
 800c9a0:	603b      	str	r3, [r7, #0]
	FLASH_writeN(0, myTestWrite, 1, DATA_TYPE_32);
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	f7ff fec3 	bl	800c734 <FLASH_writeN>

	//FLASH_wrpSectorEnable();
}
 800c9ae:	bf00      	nop
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	08060000 	.word	0x08060000
 800c9bc:	deadbeef 	.word	0xdeadbeef

0800c9c0 <FLASH_getSerialNumberFromSector7>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void FLASH_getSerialNumberFromSector7(void)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
	char temp [9];
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 800c9c6:	4b0e      	ldr	r3, [pc, #56]	; (800ca00 <FLASH_getSerialNumberFromSector7+0x40>)
 800c9c8:	617b      	str	r3, [r7, #20]
	FLASH_setSectorAddress(7, sector_7_addr);
 800c9ca:	6979      	ldr	r1, [r7, #20]
 800c9cc:	2007      	movs	r0, #7
 800c9ce:	f7ff fe9b 	bl	800c708 <FLASH_setSectorAddress>
	uint32_t myTestRead[1];
	FLASH_readN(0, myTestRead, 1, DATA_TYPE_32);
 800c9d2:	1d39      	adds	r1, r7, #4
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	2000      	movs	r0, #0
 800c9da:	f7ff ff1d 	bl	800c818 <FLASH_readN>

	sprintf(temp, "%x\n", (unsigned int)myTestRead[0]);
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	f107 0308 	add.w	r3, r7, #8
 800c9e4:	4907      	ldr	r1, [pc, #28]	; (800ca04 <FLASH_getSerialNumberFromSector7+0x44>)
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f003 fb1a 	bl	8010020 <siprintf>
	COM_uartPrint(temp);
 800c9ec:	f107 0308 	add.w	r3, r7, #8
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff fbdb 	bl	800c1ac <COM_uartPrint>
}
 800c9f6:	bf00      	nop
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	08060000 	.word	0x08060000
 800ca04:	08011d98 	.word	0x08011d98

0800ca08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	4a07      	ldr	r2, [pc, #28]	; (800ca34 <vApplicationGetIdleTaskMemory+0x2c>)
 800ca18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	4a06      	ldr	r2, [pc, #24]	; (800ca38 <vApplicationGetIdleTaskMemory+0x30>)
 800ca1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2280      	movs	r2, #128	; 0x80
 800ca24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800ca26:	bf00      	nop
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	2000058c 	.word	0x2000058c
 800ca38:	20000640 	.word	0x20000640

0800ca3c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	4a07      	ldr	r2, [pc, #28]	; (800ca68 <vApplicationGetTimerTaskMemory+0x2c>)
 800ca4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	4a06      	ldr	r2, [pc, #24]	; (800ca6c <vApplicationGetTimerTaskMemory+0x30>)
 800ca52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca5a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800ca5c:	bf00      	nop
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	20000840 	.word	0x20000840
 800ca6c:	200008f4 	.word	0x200008f4

0800ca70 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800ca70:	b5b0      	push	{r4, r5, r7, lr}
 800ca72:	b096      	sub	sp, #88	; 0x58
 800ca74:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800ca76:	4b1d      	ldr	r3, [pc, #116]	; (800caec <MX_FREERTOS_Init+0x7c>)
 800ca78:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800ca7c:	461d      	mov	r5, r3
 800ca7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ca86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ca8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ca8e:	2100      	movs	r1, #0
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fc f93e 	bl	8008d12 <osThreadCreate>
 800ca96:	4602      	mov	r2, r0
 800ca98:	4b15      	ldr	r3, [pc, #84]	; (800caf0 <MX_FREERTOS_Init+0x80>)
 800ca9a:	601a      	str	r2, [r3, #0]

  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, StartTerminalTask, osPriorityIdle, 0, 128);
 800ca9c:	4b15      	ldr	r3, [pc, #84]	; (800caf4 <MX_FREERTOS_Init+0x84>)
 800ca9e:	f107 0420 	add.w	r4, r7, #32
 800caa2:	461d      	mov	r5, r3
 800caa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800caa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800caa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800caac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 800cab0:	f107 0320 	add.w	r3, r7, #32
 800cab4:	2100      	movs	r1, #0
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fc f92b 	bl	8008d12 <osThreadCreate>
 800cabc:	4602      	mov	r2, r0
 800cabe:	4b0e      	ldr	r3, [pc, #56]	; (800caf8 <MX_FREERTOS_Init+0x88>)
 800cac0:	601a      	str	r2, [r3, #0]

  /* definition and creation of lsm6dslTask */
  osThreadDef(lsm6dslTask, StartLsm6dslTask, osPriorityIdle, 0, 256);
 800cac2:	4b0e      	ldr	r3, [pc, #56]	; (800cafc <MX_FREERTOS_Init+0x8c>)
 800cac4:	1d3c      	adds	r4, r7, #4
 800cac6:	461d      	mov	r5, r3
 800cac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800caca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cacc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cad0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lsm6dslTaskHandle = osThreadCreate(osThread(lsm6dslTask), NULL);
 800cad4:	1d3b      	adds	r3, r7, #4
 800cad6:	2100      	movs	r1, #0
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fc f91a 	bl	8008d12 <osThreadCreate>
 800cade:	4602      	mov	r2, r0
 800cae0:	4b07      	ldr	r3, [pc, #28]	; (800cb00 <MX_FREERTOS_Init+0x90>)
 800cae2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800cae4:	bf00      	nop
 800cae6:	3758      	adds	r7, #88	; 0x58
 800cae8:	46bd      	mov	sp, r7
 800caea:	bdb0      	pop	{r4, r5, r7, pc}
 800caec:	08011da8 	.word	0x08011da8
 800caf0:	200010f8 	.word	0x200010f8
 800caf4:	08011dd4 	.word	0x08011dd4
 800caf8:	20001100 	.word	0x20001100
 800cafc:	08011dfc 	.word	0x08011dfc
 800cb00:	200010fc 	.word	0x200010fc

0800cb04 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	COM_init();
 800cb0c:	f7ff faa0 	bl	800c050 <COM_init>

	SYSTEM_ISR_init();
 800cb10:	f002 fa78 	bl	800f004 <SYSTEM_ISR_init>

	COM_halUartReceiveDma();
 800cb14:	f7ff fbb2 	bl	800c27c <COM_halUartReceiveDma>

	SYSTEM_DEBUG_wakeupStandbyMode();
 800cb18:	f002 fa54 	bl	800efc4 <SYSTEM_DEBUG_wakeupStandbyMode>

	COM_uartPrint(HELLO_WORLD);
 800cb1c:	480b      	ldr	r0, [pc, #44]	; (800cb4c <StartDefaultTask+0x48>)
 800cb1e:	f7ff fb45 	bl	800c1ac <COM_uartPrint>

	SYSTEM_DEBUG_assertMsgPrint();
 800cb22:	f002 f8ef 	bl	800ed04 <SYSTEM_DEBUG_assertMsgPrint>

	LSM6DSL_init();
 800cb26:	f000 fa23 	bl	800cf70 <LSM6DSL_init>

	SYSTEM_DEBUG_printResetCause();
 800cb2a:	f002 f915 	bl	800ed58 <SYSTEM_DEBUG_printResetCause>

	osStatus status;

	status = osThreadTerminate (defaultTaskHandle);
 800cb2e:	4b08      	ldr	r3, [pc, #32]	; (800cb50 <StartDefaultTask+0x4c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fc f939 	bl	8008daa <osThreadTerminate>
 800cb38:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d004      	beq.n	800cb4a <StartDefaultTask+0x46>
	{
	    // Thread was terminated successfully
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800cb40:	2201      	movs	r2, #1
 800cb42:	2120      	movs	r1, #32
 800cb44:	4803      	ldr	r0, [pc, #12]	; (800cb54 <StartDefaultTask+0x50>)
 800cb46:	f7f6 f84f 	bl	8002be8 <HAL_GPIO_WritePin>
		// Failed to terminate a thread
	}

  /* Infinite loop */

	for(;;)
 800cb4a:	e7fe      	b.n	800cb4a <StartDefaultTask+0x46>
 800cb4c:	08011e18 	.word	0x08011e18
 800cb50:	200010f8 	.word	0x200010f8
 800cb54:	40020000 	.word	0x40020000

0800cb58 <StartTerminalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTerminalTask */
void StartTerminalTask(void const * argument)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTerminalTask */
  /* Infinite loop */
  for(;;)
  {
	  COM_readyCommandProcess();
 800cb60:	f7ff fac8 	bl	800c0f4 <COM_readyCommandProcess>
 800cb64:	e7fc      	b.n	800cb60 <StartTerminalTask+0x8>

0800cb66 <StartLsm6dslTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLsm6dslTask */
void StartLsm6dslTask(void const * argument)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b086      	sub	sp, #24
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLsm6dslTask */
	osEvent evt;
  /* Infinite loop */
	for(;;)
	{
		evt = osSignalWait(LSM6DSL_SIGNAL, osWaitForever);
 800cb6e:	f107 030c 	add.w	r3, r7, #12
 800cb72:	f04f 32ff 	mov.w	r2, #4294967295
 800cb76:	2101      	movs	r1, #1
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fc fa19 	bl	8008fb0 <osSignalWait>
		if (evt.status == osEventSignal)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b08      	cmp	r3, #8
 800cb82:	d1f4      	bne.n	800cb6e <StartLsm6dslTask+0x8>
		{
			if (evt.value.signals & LSM6DSL_SIGNAL)
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	f003 0301 	and.w	r3, r3, #1
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d0ef      	beq.n	800cb6e <StartLsm6dslTask+0x8>
			{
				LSM6DSL_processHanlder();
 800cb8e:	f000 f9a1 	bl	800ced4 <LSM6DSL_processHanlder>
		evt = osSignalWait(LSM6DSL_SIGNAL, osWaitForever);
 800cb92:	e7ec      	b.n	800cb6e <StartLsm6dslTask+0x8>

0800cb94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb9a:	f107 030c 	add.w	r3, r7, #12
 800cb9e:	2200      	movs	r2, #0
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	605a      	str	r2, [r3, #4]
 800cba4:	609a      	str	r2, [r3, #8]
 800cba6:	60da      	str	r2, [r3, #12]
 800cba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60bb      	str	r3, [r7, #8]
 800cbae:	4b34      	ldr	r3, [pc, #208]	; (800cc80 <MX_GPIO_Init+0xec>)
 800cbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb2:	4a33      	ldr	r2, [pc, #204]	; (800cc80 <MX_GPIO_Init+0xec>)
 800cbb4:	f043 0304 	orr.w	r3, r3, #4
 800cbb8:	6313      	str	r3, [r2, #48]	; 0x30
 800cbba:	4b31      	ldr	r3, [pc, #196]	; (800cc80 <MX_GPIO_Init+0xec>)
 800cbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbbe:	f003 0304 	and.w	r3, r3, #4
 800cbc2:	60bb      	str	r3, [r7, #8]
 800cbc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	607b      	str	r3, [r7, #4]
 800cbca:	4b2d      	ldr	r3, [pc, #180]	; (800cc80 <MX_GPIO_Init+0xec>)
 800cbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbce:	4a2c      	ldr	r2, [pc, #176]	; (800cc80 <MX_GPIO_Init+0xec>)
 800cbd0:	f043 0301 	orr.w	r3, r3, #1
 800cbd4:	6313      	str	r3, [r2, #48]	; 0x30
 800cbd6:	4b2a      	ldr	r3, [pc, #168]	; (800cc80 <MX_GPIO_Init+0xec>)
 800cbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	607b      	str	r3, [r7, #4]
 800cbe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	603b      	str	r3, [r7, #0]
 800cbe6:	4b26      	ldr	r3, [pc, #152]	; (800cc80 <MX_GPIO_Init+0xec>)
 800cbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbea:	4a25      	ldr	r2, [pc, #148]	; (800cc80 <MX_GPIO_Init+0xec>)
 800cbec:	f043 0302 	orr.w	r3, r3, #2
 800cbf0:	6313      	str	r3, [r2, #48]	; 0x30
 800cbf2:	4b23      	ldr	r3, [pc, #140]	; (800cc80 <MX_GPIO_Init+0xec>)
 800cbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf6:	f003 0302 	and.w	r3, r3, #2
 800cbfa:	603b      	str	r3, [r7, #0]
 800cbfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2120      	movs	r1, #32
 800cc02:	4820      	ldr	r0, [pc, #128]	; (800cc84 <MX_GPIO_Init+0xf0>)
 800cc04:	f7f5 fff0 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800cc08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cc0e:	4b1e      	ldr	r3, [pc, #120]	; (800cc88 <MX_GPIO_Init+0xf4>)
 800cc10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc12:	2300      	movs	r3, #0
 800cc14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc16:	f107 030c 	add.w	r3, r7, #12
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	481b      	ldr	r0, [pc, #108]	; (800cc8c <MX_GPIO_Init+0xf8>)
 800cc1e:	f7f5 fd3b 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cc22:	2320      	movs	r3, #32
 800cc24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc26:	2301      	movs	r3, #1
 800cc28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc32:	f107 030c 	add.w	r3, r7, #12
 800cc36:	4619      	mov	r1, r3
 800cc38:	4812      	ldr	r0, [pc, #72]	; (800cc84 <MX_GPIO_Init+0xf0>)
 800cc3a:	f7f5 fd2d 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cc3e:	2320      	movs	r3, #32
 800cc40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800cc42:	4b13      	ldr	r3, [pc, #76]	; (800cc90 <MX_GPIO_Init+0xfc>)
 800cc44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc4a:	f107 030c 	add.w	r3, r7, #12
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4810      	ldr	r0, [pc, #64]	; (800cc94 <MX_GPIO_Init+0x100>)
 800cc52:	f7f5 fd21 	bl	8002698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800cc56:	2200      	movs	r2, #0
 800cc58:	2105      	movs	r1, #5
 800cc5a:	2017      	movs	r0, #23
 800cc5c:	f7f4 fa5e 	bl	800111c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800cc60:	2017      	movs	r0, #23
 800cc62:	f7f4 fa87 	bl	8001174 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800cc66:	2200      	movs	r2, #0
 800cc68:	2105      	movs	r1, #5
 800cc6a:	2028      	movs	r0, #40	; 0x28
 800cc6c:	f7f4 fa56 	bl	800111c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800cc70:	2028      	movs	r0, #40	; 0x28
 800cc72:	f7f4 fa7f 	bl	8001174 <HAL_NVIC_EnableIRQ>

}
 800cc76:	bf00      	nop
 800cc78:	3720      	adds	r7, #32
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	40023800 	.word	0x40023800
 800cc84:	40020000 	.word	0x40020000
 800cc88:	10110000 	.word	0x10110000
 800cc8c:	40020800 	.word	0x40020800
 800cc90:	10210000 	.word	0x10210000
 800cc94:	40020400 	.word	0x40020400

0800cc98 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 800cca2:	4b24      	ldr	r3, [pc, #144]	; (800cd34 <_sbrk_r+0x9c>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d10e      	bne.n	800ccc8 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 800ccaa:	4b23      	ldr	r3, [pc, #140]	; (800cd38 <_sbrk_r+0xa0>)
 800ccac:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800ccb0:	4a22      	ldr	r2, [pc, #136]	; (800cd3c <_sbrk_r+0xa4>)
 800ccb2:	1a9b      	subs	r3, r3, r2
 800ccb4:	4a22      	ldr	r2, [pc, #136]	; (800cd40 <_sbrk_r+0xa8>)
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	4b1f      	ldr	r3, [pc, #124]	; (800cd38 <_sbrk_r+0xa0>)
 800ccba:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800ccbe:	4a1f      	ldr	r2, [pc, #124]	; (800cd3c <_sbrk_r+0xa4>)
 800ccc0:	1a9b      	subs	r3, r3, r2
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	4b1b      	ldr	r3, [pc, #108]	; (800cd34 <_sbrk_r+0x9c>)
 800ccc6:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 800ccc8:	f7fe f8b8 	bl	800ae3c <xTaskGetSchedulerState>
 800cccc:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d101      	bne.n	800ccd6 <_sbrk_r+0x3e>
 800ccd2:	466b      	mov	r3, sp
 800ccd4:	e000      	b.n	800ccd8 <_sbrk_r+0x40>
 800ccd6:	4b1b      	ldr	r3, [pc, #108]	; (800cd44 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 800ccd8:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 800ccda:	f7fd fcd1 	bl	800a680 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 800ccde:	4b1a      	ldr	r3, [pc, #104]	; (800cd48 <_sbrk_r+0xb0>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 800cce4:	4b18      	ldr	r3, [pc, #96]	; (800cd48 <_sbrk_r+0xb0>)
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	4413      	add	r3, r2
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d207      	bcs.n	800cd02 <_sbrk_r+0x6a>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	220c      	movs	r2, #12
 800ccf6:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 800ccf8:	f7fd fcd0 	bl	800a69c <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 800ccfc:	f04f 33ff 	mov.w	r3, #4294967295
 800cd00:	e014      	b.n	800cd2c <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 800cd02:	4b11      	ldr	r3, [pc, #68]	; (800cd48 <_sbrk_r+0xb0>)
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	4413      	add	r3, r2
 800cd0a:	4a0f      	ldr	r2, [pc, #60]	; (800cd48 <_sbrk_r+0xb0>)
 800cd0c:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800cd0e:	4b0c      	ldr	r3, [pc, #48]	; (800cd40 <_sbrk_r+0xa8>)
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	4a0a      	ldr	r2, [pc, #40]	; (800cd40 <_sbrk_r+0xa8>)
 800cd18:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 800cd1a:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <_sbrk_r+0xb4>)
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	4413      	add	r3, r2
 800cd22:	4a0a      	ldr	r2, [pc, #40]	; (800cd4c <_sbrk_r+0xb4>)
 800cd24:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 800cd26:	f7fd fcb9 	bl	800a69c <xTaskResumeAll>
    return (char *) previousHeapEnd;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3710      	adds	r7, #16
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	20001108 	.word	0x20001108
 800cd38:	20020000 	.word	0x20020000
 800cd3c:	20001308 	.word	0x20001308
 800cd40:	20000cf4 	.word	0x20000cf4
 800cd44:	2001fe00 	.word	0x2001fe00
 800cd48:	2000008c 	.word	0x2000008c
 800cd4c:	20000cf8 	.word	0x20000cf8

0800cd50 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd58:	f3ef 8305 	mrs	r3, IPSR
 800cd5c:	613b      	str	r3, [r7, #16]
	if( ulCurrentInterrupt == 0 )
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d102      	bne.n	800cd6a <__malloc_lock+0x1a>
		xReturn = pdFALSE;
 800cd64:	2300      	movs	r3, #0
 800cd66:	60fb      	str	r3, [r7, #12]
 800cd68:	e001      	b.n	800cd6e <__malloc_lock+0x1e>
		xReturn = pdTRUE;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	60fb      	str	r3, [r7, #12]
	return xReturn;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	bf14      	ite	ne
 800cd74:	2301      	movne	r3, #1
 800cd76:	2300      	moveq	r3, #0
 800cd78:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d009      	beq.n	800cd94 <__malloc_lock+0x44>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	60bb      	str	r3, [r7, #8]
 800cd92:	e7fe      	b.n	800cd92 <__malloc_lock+0x42>
    vTaskSuspendAll();
 800cd94:	f7fd fc74 	bl	800a680 <vTaskSuspendAll>
  #endif
};
 800cd98:	bf00      	nop
 800cd9a:	3718      	adds	r7, #24
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 800cda8:	f7fd fc78 	bl	800a69c <xTaskResumeAll>
  #endif
};
 800cdac:	bf00      	nop
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f002 fb9d 	bl	800f4fc <malloc>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	60fb      	str	r3, [r7, #12]
    return p;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
    free(pv);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f002 fb97 	bl	800f50c <free>
};
 800cdde:	bf00      	nop
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800cdec:	4b12      	ldr	r3, [pc, #72]	; (800ce38 <MX_I2C1_Init+0x50>)
 800cdee:	4a13      	ldr	r2, [pc, #76]	; (800ce3c <MX_I2C1_Init+0x54>)
 800cdf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800cdf2:	4b11      	ldr	r3, [pc, #68]	; (800ce38 <MX_I2C1_Init+0x50>)
 800cdf4:	4a12      	ldr	r2, [pc, #72]	; (800ce40 <MX_I2C1_Init+0x58>)
 800cdf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800cdf8:	4b0f      	ldr	r3, [pc, #60]	; (800ce38 <MX_I2C1_Init+0x50>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800cdfe:	4b0e      	ldr	r3, [pc, #56]	; (800ce38 <MX_I2C1_Init+0x50>)
 800ce00:	2200      	movs	r2, #0
 800ce02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <MX_I2C1_Init+0x50>)
 800ce06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ce0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ce0c:	4b0a      	ldr	r3, [pc, #40]	; (800ce38 <MX_I2C1_Init+0x50>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800ce12:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <MX_I2C1_Init+0x50>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ce18:	4b07      	ldr	r3, [pc, #28]	; (800ce38 <MX_I2C1_Init+0x50>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ce1e:	4b06      	ldr	r3, [pc, #24]	; (800ce38 <MX_I2C1_Init+0x50>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ce24:	4804      	ldr	r0, [pc, #16]	; (800ce38 <MX_I2C1_Init+0x50>)
 800ce26:	f7f5 ff29 	bl	8002c7c <HAL_I2C_Init>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800ce30:	f001 fd08 	bl	800e844 <Error_Handler>
  }

}
 800ce34:	bf00      	nop
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20001110 	.word	0x20001110
 800ce3c:	40005400 	.word	0x40005400
 800ce40:	000186a0 	.word	0x000186a0

0800ce44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b08a      	sub	sp, #40	; 0x28
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce4c:	f107 0314 	add.w	r3, r7, #20
 800ce50:	2200      	movs	r2, #0
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	605a      	str	r2, [r3, #4]
 800ce56:	609a      	str	r2, [r3, #8]
 800ce58:	60da      	str	r2, [r3, #12]
 800ce5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a19      	ldr	r2, [pc, #100]	; (800cec8 <HAL_I2C_MspInit+0x84>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d12c      	bne.n	800cec0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce66:	2300      	movs	r3, #0
 800ce68:	613b      	str	r3, [r7, #16]
 800ce6a:	4b18      	ldr	r3, [pc, #96]	; (800cecc <HAL_I2C_MspInit+0x88>)
 800ce6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce6e:	4a17      	ldr	r2, [pc, #92]	; (800cecc <HAL_I2C_MspInit+0x88>)
 800ce70:	f043 0302 	orr.w	r3, r3, #2
 800ce74:	6313      	str	r3, [r2, #48]	; 0x30
 800ce76:	4b15      	ldr	r3, [pc, #84]	; (800cecc <HAL_I2C_MspInit+0x88>)
 800ce78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce7a:	f003 0302 	and.w	r3, r3, #2
 800ce7e:	613b      	str	r3, [r7, #16]
 800ce80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ce82:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ce86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ce88:	2312      	movs	r3, #18
 800ce8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce90:	2303      	movs	r3, #3
 800ce92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ce94:	2304      	movs	r3, #4
 800ce96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce98:	f107 0314 	add.w	r3, r7, #20
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	480c      	ldr	r0, [pc, #48]	; (800ced0 <HAL_I2C_MspInit+0x8c>)
 800cea0:	f7f5 fbfa 	bl	8002698 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800cea4:	2300      	movs	r3, #0
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	4b08      	ldr	r3, [pc, #32]	; (800cecc <HAL_I2C_MspInit+0x88>)
 800ceaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceac:	4a07      	ldr	r2, [pc, #28]	; (800cecc <HAL_I2C_MspInit+0x88>)
 800ceae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ceb2:	6413      	str	r3, [r2, #64]	; 0x40
 800ceb4:	4b05      	ldr	r3, [pc, #20]	; (800cecc <HAL_I2C_MspInit+0x88>)
 800ceb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cebc:	60fb      	str	r3, [r7, #12]
 800cebe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800cec0:	bf00      	nop
 800cec2:	3728      	adds	r7, #40	; 0x28
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	40005400 	.word	0x40005400
 800cecc:	40023800 	.word	0x40023800
 800ced0:	40020400 	.word	0x40020400

0800ced4 <LSM6DSL_processHanlder>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void LSM6DSL_processHanlder(void)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Mode == LSM6DSL_MODE_PER_SAMPLE)
 800ced8:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <LSM6DSL_processHanlder+0x24>)
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d102      	bne.n	800cee6 <LSM6DSL_processHanlder+0x12>
	{
		LSM6DSL_perSampleProcess();
 800cee0:	f000 f8e4 	bl	800d0ac <LSM6DSL_perSampleProcess>
	}
	else if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
	{
		LSM6DSL_fifoProcess();
	}
}
 800cee4:	e005      	b.n	800cef2 <LSM6DSL_processHanlder+0x1e>
	else if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
 800cee6:	4b04      	ldr	r3, [pc, #16]	; (800cef8 <LSM6DSL_processHanlder+0x24>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d101      	bne.n	800cef2 <LSM6DSL_processHanlder+0x1e>
		LSM6DSL_fifoProcess();
 800ceee:	f000 fa15 	bl	800d31c <LSM6DSL_fifoProcess>
}
 800cef2:	bf00      	nop
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20001080 	.word	0x20001080

0800cefc <LSM6DSL_write>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static int32_t LSM6DSL_write(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b088      	sub	sp, #32
 800cf00:	af04      	add	r7, sp, #16
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	607a      	str	r2, [r7, #4]
 800cf06:	461a      	mov	r2, r3
 800cf08:	460b      	mov	r3, r1
 800cf0a:	72fb      	strb	r3, [r7, #11]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 800cf10:	7afb      	ldrb	r3, [r7, #11]
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf18:	9302      	str	r3, [sp, #8]
 800cf1a:	893b      	ldrh	r3, [r7, #8]
 800cf1c:	9301      	str	r3, [sp, #4]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	2301      	movs	r3, #1
 800cf24:	21d7      	movs	r1, #215	; 0xd7
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f7f6 f868 	bl	8002ffc <HAL_I2C_Mem_Write>
    return 0;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <LSM6DSL_read>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static int32_t LSM6DSL_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b088      	sub	sp, #32
 800cf3a:	af04      	add	r7, sp, #16
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	461a      	mov	r2, r3
 800cf42:	460b      	mov	r3, r1
 800cf44:	72fb      	strb	r3, [r7, #11]
 800cf46:	4613      	mov	r3, r2
 800cf48:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 800cf4a:	7afb      	ldrb	r3, [r7, #11]
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf52:	9302      	str	r3, [sp, #8]
 800cf54:	893b      	ldrh	r3, [r7, #8]
 800cf56:	9301      	str	r3, [sp, #4]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	21d7      	movs	r1, #215	; 0xd7
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7f6 f951 	bl	8003208 <HAL_I2C_Mem_Read>
	return 0;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3710      	adds	r7, #16
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <LSM6DSL_init>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void LSM6DSL_init (void)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	af00      	add	r7, sp, #0
	Lsm6dsl_Is_Connected = LSM6DSL_DISCONNECTED;
 800cf74:	4b26      	ldr	r3, [pc, #152]	; (800d010 <LSM6DSL_init+0xa0>)
 800cf76:	2201      	movs	r2, #1
 800cf78:	701a      	strb	r2, [r3, #0]

	/* Initialize mems driver interface */
	Dev_Ctx.write_reg = LSM6DSL_write;
 800cf7a:	4b26      	ldr	r3, [pc, #152]	; (800d014 <LSM6DSL_init+0xa4>)
 800cf7c:	4a26      	ldr	r2, [pc, #152]	; (800d018 <LSM6DSL_init+0xa8>)
 800cf7e:	601a      	str	r2, [r3, #0]
	Dev_Ctx.read_reg = LSM6DSL_read;
 800cf80:	4b24      	ldr	r3, [pc, #144]	; (800d014 <LSM6DSL_init+0xa4>)
 800cf82:	4a26      	ldr	r2, [pc, #152]	; (800d01c <LSM6DSL_init+0xac>)
 800cf84:	605a      	str	r2, [r3, #4]
	Dev_Ctx.handle = &hi2c1;
 800cf86:	4b23      	ldr	r3, [pc, #140]	; (800d014 <LSM6DSL_init+0xa4>)
 800cf88:	4a25      	ldr	r2, [pc, #148]	; (800d020 <LSM6DSL_init+0xb0>)
 800cf8a:	609a      	str	r2, [r3, #8]

	/* Check device ID */
	Who_Am_I = 0;
 800cf8c:	4b25      	ldr	r3, [pc, #148]	; (800d024 <LSM6DSL_init+0xb4>)
 800cf8e:	2200      	movs	r2, #0
 800cf90:	701a      	strb	r2, [r3, #0]
	lsm6dsl_device_id_get(&Dev_Ctx, &Who_Am_I);
 800cf92:	4924      	ldr	r1, [pc, #144]	; (800d024 <LSM6DSL_init+0xb4>)
 800cf94:	481f      	ldr	r0, [pc, #124]	; (800d014 <LSM6DSL_init+0xa4>)
 800cf96:	f000 fdb4 	bl	800db02 <lsm6dsl_device_id_get>
	if ( Who_Am_I != LSM6DSL_ID )
 800cf9a:	4b22      	ldr	r3, [pc, #136]	; (800d024 <LSM6DSL_init+0xb4>)
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	2b6a      	cmp	r3, #106	; 0x6a
 800cfa0:	d003      	beq.n	800cfaa <LSM6DSL_init+0x3a>
	{
		COM_uartPrint("lsm6dsl device not found\n");
 800cfa2:	4821      	ldr	r0, [pc, #132]	; (800d028 <LSM6DSL_init+0xb8>)
 800cfa4:	f7ff f902 	bl	800c1ac <COM_uartPrint>
		return;
 800cfa8:	e031      	b.n	800d00e <LSM6DSL_init+0x9e>
		//while(1); /* device not found */
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&Dev_Ctx, PROPERTY_ENABLE);
 800cfaa:	2101      	movs	r1, #1
 800cfac:	4819      	ldr	r0, [pc, #100]	; (800d014 <LSM6DSL_init+0xa4>)
 800cfae:	f000 fdb9 	bl	800db24 <lsm6dsl_reset_set>
	do {
	lsm6dsl_reset_get(&Dev_Ctx, &Rst);
 800cfb2:	491e      	ldr	r1, [pc, #120]	; (800d02c <LSM6DSL_init+0xbc>)
 800cfb4:	4817      	ldr	r0, [pc, #92]	; (800d014 <LSM6DSL_init+0xa4>)
 800cfb6:	f000 fddb 	bl	800db70 <lsm6dsl_reset_get>
	} while (Rst);
 800cfba:	4b1c      	ldr	r3, [pc, #112]	; (800d02c <LSM6DSL_init+0xbc>)
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1f7      	bne.n	800cfb2 <LSM6DSL_init+0x42>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&Dev_Ctx, PROPERTY_ENABLE);
 800cfc2:	2101      	movs	r1, #1
 800cfc4:	4813      	ldr	r0, [pc, #76]	; (800d014 <LSM6DSL_init+0xa4>)
 800cfc6:	f000 fd09 	bl	800d9dc <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&Dev_Ctx, LSM6DSL_XL_ODR_12Hz5);
 800cfca:	2101      	movs	r1, #1
 800cfcc:	4811      	ldr	r0, [pc, #68]	; (800d014 <LSM6DSL_init+0xa4>)
 800cfce:	f000 fc93 	bl	800d8f8 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&Dev_Ctx, LSM6DSL_GY_ODR_12Hz5);
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	480f      	ldr	r0, [pc, #60]	; (800d014 <LSM6DSL_init+0xa4>)
 800cfd6:	f000 fcdb 	bl	800d990 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&Dev_Ctx, LSM6DSL_8g);
 800cfda:	2103      	movs	r1, #3
 800cfdc:	480d      	ldr	r0, [pc, #52]	; (800d014 <LSM6DSL_init+0xa4>)
 800cfde:	f000 fc65 	bl	800d8ac <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&Dev_Ctx, LSM6DSL_500dps);
 800cfe2:	2102      	movs	r1, #2
 800cfe4:	480b      	ldr	r0, [pc, #44]	; (800d014 <LSM6DSL_init+0xa4>)
 800cfe6:	f000 fcad 	bl	800d944 <lsm6dsl_gy_full_scale_set>

	/* Accelerometer - analog filter */
	lsm6dsl_xl_filter_analog_set(&Dev_Ctx, LSM6DSL_XL_ANA_BW_400Hz);
 800cfea:	2101      	movs	r1, #1
 800cfec:	4809      	ldr	r0, [pc, #36]	; (800d014 <LSM6DSL_init+0xa4>)
 800cfee:	f000 fdd8 	bl	800dba2 <lsm6dsl_xl_filter_analog_set>

	/* Accelerometer - LPF1 + LPF2 path */
	lsm6dsl_xl_lp2_bandwidth_set(&Dev_Ctx, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 800cff2:	2111      	movs	r1, #17
 800cff4:	4807      	ldr	r0, [pc, #28]	; (800d014 <LSM6DSL_init+0xa4>)
 800cff6:	f000 fdfa 	bl	800dbee <lsm6dsl_xl_lp2_bandwidth_set>

	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&Dev_Ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 800cffa:	21a8      	movs	r1, #168	; 0xa8
 800cffc:	4805      	ldr	r0, [pc, #20]	; (800d014 <LSM6DSL_init+0xa4>)
 800cffe:	f000 fe2d 	bl	800dc5c <lsm6dsl_gy_band_pass_set>

	Lsm6dsl_Mode = LSM6DSL_MODE_IDLE;
 800d002:	4b0b      	ldr	r3, [pc, #44]	; (800d030 <LSM6DSL_init+0xc0>)
 800d004:	2200      	movs	r2, #0
 800d006:	701a      	strb	r2, [r3, #0]

	Lsm6dsl_Is_Connected = LSM6DSL_CONNECTED;
 800d008:	4b01      	ldr	r3, [pc, #4]	; (800d010 <LSM6DSL_init+0xa0>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	701a      	strb	r2, [r3, #0]
}
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	20001081 	.word	0x20001081
 800d014:	20001010 	.word	0x20001010
 800d018:	0800cefd 	.word	0x0800cefd
 800d01c:	0800cf37 	.word	0x0800cf37
 800d020:	20001110 	.word	0x20001110
 800d024:	20000d24 	.word	0x20000d24
 800d028:	08011e28 	.word	0x08011e28
 800d02c:	20000d25 	.word	0x20000d25
 800d030:	20001080 	.word	0x20001080

0800d034 <LSM6DSL_perSampleInit>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void LSM6DSL_perSampleInit(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Is_Connected == LSM6DSL_DISCONNECTED)
 800d03a:	4b17      	ldr	r3, [pc, #92]	; (800d098 <LSM6DSL_perSampleInit+0x64>)
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d103      	bne.n	800d04a <LSM6DSL_perSampleInit+0x16>
	{
		COM_uartPrint("LSM6DSL is not connected!\n");
 800d042:	4816      	ldr	r0, [pc, #88]	; (800d09c <LSM6DSL_perSampleInit+0x68>)
 800d044:	f7ff f8b2 	bl	800c1ac <COM_uartPrint>
		return;
 800d048:	e023      	b.n	800d092 <LSM6DSL_perSampleInit+0x5e>
	}
	if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
 800d04a:	4b15      	ldr	r3, [pc, #84]	; (800d0a0 <LSM6DSL_perSampleInit+0x6c>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b02      	cmp	r3, #2
 800d050:	d103      	bne.n	800d05a <LSM6DSL_perSampleInit+0x26>
	{
		COM_uartPrint("Need to disable FIFO mode first\n");
 800d052:	4814      	ldr	r0, [pc, #80]	; (800d0a4 <LSM6DSL_perSampleInit+0x70>)
 800d054:	f7ff f8aa 	bl	800c1ac <COM_uartPrint>
		return;
 800d058:	e01b      	b.n	800d092 <LSM6DSL_perSampleInit+0x5e>
	}

	//LSM6DSL_ACC_Set_INT1_DRDY
	//LSM6DSL_GYRO_Set_INT1_DRDY

	lsm6dsl_pin_polarity_set(&Dev_Ctx, LSM6DSL_ACTIVE_LOW);
 800d05a:	2101      	movs	r1, #1
 800d05c:	4812      	ldr	r0, [pc, #72]	; (800d0a8 <LSM6DSL_perSampleInit+0x74>)
 800d05e:	f001 f8a4 	bl	800e1aa <lsm6dsl_pin_polarity_set>

	lsm6dsl_data_ready_mode_set(&Dev_Ctx, LSM6DSL_DRDY_PULSED);
 800d062:	2101      	movs	r1, #1
 800d064:	4810      	ldr	r0, [pc, #64]	; (800d0a8 <LSM6DSL_perSampleInit+0x74>)
 800d066:	f000 fd26 	bl	800dab6 <lsm6dsl_data_ready_mode_set>

	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 800d06a:	1d3b      	adds	r3, r7, #4
 800d06c:	4619      	mov	r1, r3
 800d06e:	480e      	ldr	r0, [pc, #56]	; (800d0a8 <LSM6DSL_perSampleInit+0x74>)
 800d070:	f000 ffc5 	bl	800dffe <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_ENABLE;
 800d074:	793b      	ldrb	r3, [r7, #4]
 800d076:	f043 0301 	orr.w	r3, r3, #1
 800d07a:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_ENABLE;
 800d07c:	793b      	ldrb	r3, [r7, #4]
 800d07e:	f043 0302 	orr.w	r3, r3, #2
 800d082:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 800d084:	6879      	ldr	r1, [r7, #4]
 800d086:	4808      	ldr	r0, [pc, #32]	; (800d0a8 <LSM6DSL_perSampleInit+0x74>)
 800d088:	f000 fe56 	bl	800dd38 <lsm6dsl_pin_int1_route_set>

	Lsm6dsl_Mode = LSM6DSL_MODE_PER_SAMPLE;
 800d08c:	4b04      	ldr	r3, [pc, #16]	; (800d0a0 <LSM6DSL_perSampleInit+0x6c>)
 800d08e:	2201      	movs	r2, #1
 800d090:	701a      	strb	r2, [r3, #0]
}
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20001081 	.word	0x20001081
 800d09c:	08011e44 	.word	0x08011e44
 800d0a0:	20001080 	.word	0x20001080
 800d0a4:	08011e60 	.word	0x08011e60
 800d0a8:	20001010 	.word	0x20001010

0800d0ac <LSM6DSL_perSampleProcess>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_perSampleProcess (void)
{
 800d0ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d0b0:	b086      	sub	sp, #24
 800d0b2:	af04      	add	r7, sp, #16
	/*
	 * Read output only if new value is available
	 */
	lsm6dsl_reg_t reg;
	lsm6dsl_status_reg_get(&Dev_Ctx, &reg.status_reg);
 800d0b4:	1d3b      	adds	r3, r7, #4
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	4855      	ldr	r0, [pc, #340]	; (800d210 <LSM6DSL_perSampleProcess+0x164>)
 800d0ba:	f000 fcb5 	bl	800da28 <lsm6dsl_status_reg_get>


	if (reg.status_reg.xlda)
 800d0be:	793b      	ldrb	r3, [r7, #4]
 800d0c0:	f003 0301 	and.w	r3, r3, #1
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d04b      	beq.n	800d162 <LSM6DSL_perSampleProcess+0xb6>
	{
	  memset(Data_Raw_Acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 800d0ca:	2206      	movs	r2, #6
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	4851      	ldr	r0, [pc, #324]	; (800d214 <LSM6DSL_perSampleProcess+0x168>)
 800d0d0:	f002 fa2f 	bl	800f532 <memset>
	  lsm6dsl_acceleration_raw_get(&Dev_Ctx, Data_Raw_Acceleration.u8bit);
 800d0d4:	494f      	ldr	r1, [pc, #316]	; (800d214 <LSM6DSL_perSampleProcess+0x168>)
 800d0d6:	484e      	ldr	r0, [pc, #312]	; (800d210 <LSM6DSL_perSampleProcess+0x164>)
 800d0d8:	f000 fcc8 	bl	800da6c <lsm6dsl_acceleration_raw_get>
	  P_Acceleration_Mg[0] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[0]);
 800d0dc:	4b4d      	ldr	r3, [pc, #308]	; (800d214 <LSM6DSL_perSampleProcess+0x168>)
 800d0de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f000 fbb2 	bl	800d84c <lsm6dsl_from_fs8g_to_mg>
 800d0e8:	eef0 7a40 	vmov.f32	s15, s0
 800d0ec:	4b4a      	ldr	r3, [pc, #296]	; (800d218 <LSM6DSL_perSampleProcess+0x16c>)
 800d0ee:	edc3 7a00 	vstr	s15, [r3]
	  P_Acceleration_Mg[1] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[1]);
 800d0f2:	4b48      	ldr	r3, [pc, #288]	; (800d214 <LSM6DSL_perSampleProcess+0x168>)
 800d0f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 fba7 	bl	800d84c <lsm6dsl_from_fs8g_to_mg>
 800d0fe:	eef0 7a40 	vmov.f32	s15, s0
 800d102:	4b45      	ldr	r3, [pc, #276]	; (800d218 <LSM6DSL_perSampleProcess+0x16c>)
 800d104:	edc3 7a01 	vstr	s15, [r3, #4]
	  P_Acceleration_Mg[2] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[2]);
 800d108:	4b42      	ldr	r3, [pc, #264]	; (800d214 <LSM6DSL_perSampleProcess+0x168>)
 800d10a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 fb9c 	bl	800d84c <lsm6dsl_from_fs8g_to_mg>
 800d114:	eef0 7a40 	vmov.f32	s15, s0
 800d118:	4b3f      	ldr	r3, [pc, #252]	; (800d218 <LSM6DSL_perSampleProcess+0x16c>)
 800d11a:	edc3 7a02 	vstr	s15, [r3, #8]

	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 800d11e:	4b3e      	ldr	r3, [pc, #248]	; (800d218 <LSM6DSL_perSampleProcess+0x16c>)
 800d120:	681b      	ldr	r3, [r3, #0]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 800d122:	4618      	mov	r0, r3
 800d124:	f7f3 fa18 	bl	8000558 <__aeabi_f2d>
 800d128:	4680      	mov	r8, r0
 800d12a:	4689      	mov	r9, r1
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 800d12c:	4b3a      	ldr	r3, [pc, #232]	; (800d218 <LSM6DSL_perSampleProcess+0x16c>)
 800d12e:	685b      	ldr	r3, [r3, #4]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 800d130:	4618      	mov	r0, r3
 800d132:	f7f3 fa11 	bl	8000558 <__aeabi_f2d>
 800d136:	4604      	mov	r4, r0
 800d138:	460d      	mov	r5, r1
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 800d13a:	4b37      	ldr	r3, [pc, #220]	; (800d218 <LSM6DSL_perSampleProcess+0x16c>)
 800d13c:	689b      	ldr	r3, [r3, #8]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 800d13e:	4618      	mov	r0, r3
 800d140:	f7f3 fa0a 	bl	8000558 <__aeabi_f2d>
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d14c:	e9cd 4500 	strd	r4, r5, [sp]
 800d150:	4642      	mov	r2, r8
 800d152:	464b      	mov	r3, r9
 800d154:	4931      	ldr	r1, [pc, #196]	; (800d21c <LSM6DSL_perSampleProcess+0x170>)
 800d156:	4832      	ldr	r0, [pc, #200]	; (800d220 <LSM6DSL_perSampleProcess+0x174>)
 800d158:	f002 ff62 	bl	8010020 <siprintf>

	  COM_uartPrint(Data);
 800d15c:	4830      	ldr	r0, [pc, #192]	; (800d220 <LSM6DSL_perSampleProcess+0x174>)
 800d15e:	f7ff f825 	bl	800c1ac <COM_uartPrint>
	}
	if (reg.status_reg.gda)
 800d162:	793b      	ldrb	r3, [r7, #4]
 800d164:	f003 0302 	and.w	r3, r3, #2
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d04b      	beq.n	800d206 <LSM6DSL_perSampleProcess+0x15a>
	{
	  memset(Data_Raw_Angular_Rate.u8bit, 0x00, 3*sizeof(int16_t));
 800d16e:	2206      	movs	r2, #6
 800d170:	2100      	movs	r1, #0
 800d172:	482c      	ldr	r0, [pc, #176]	; (800d224 <LSM6DSL_perSampleProcess+0x178>)
 800d174:	f002 f9dd 	bl	800f532 <memset>
	  lsm6dsl_angular_rate_raw_get(&Dev_Ctx, Data_Raw_Angular_Rate.u8bit);
 800d178:	492a      	ldr	r1, [pc, #168]	; (800d224 <LSM6DSL_perSampleProcess+0x178>)
 800d17a:	4825      	ldr	r0, [pc, #148]	; (800d210 <LSM6DSL_perSampleProcess+0x164>)
 800d17c:	f000 fc65 	bl	800da4a <lsm6dsl_angular_rate_raw_get>
	  P_Angular_Rate_Mdps[0] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[0]);
 800d180:	4b28      	ldr	r3, [pc, #160]	; (800d224 <LSM6DSL_perSampleProcess+0x178>)
 800d182:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fb78 	bl	800d87c <lsm6dsl_from_fs500dps_to_mdps>
 800d18c:	eef0 7a40 	vmov.f32	s15, s0
 800d190:	4b25      	ldr	r3, [pc, #148]	; (800d228 <LSM6DSL_perSampleProcess+0x17c>)
 800d192:	edc3 7a00 	vstr	s15, [r3]
	  P_Angular_Rate_Mdps[1] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[1]);
 800d196:	4b23      	ldr	r3, [pc, #140]	; (800d224 <LSM6DSL_perSampleProcess+0x178>)
 800d198:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 fb6d 	bl	800d87c <lsm6dsl_from_fs500dps_to_mdps>
 800d1a2:	eef0 7a40 	vmov.f32	s15, s0
 800d1a6:	4b20      	ldr	r3, [pc, #128]	; (800d228 <LSM6DSL_perSampleProcess+0x17c>)
 800d1a8:	edc3 7a01 	vstr	s15, [r3, #4]
	  P_Angular_Rate_Mdps[2] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[2]);
 800d1ac:	4b1d      	ldr	r3, [pc, #116]	; (800d224 <LSM6DSL_perSampleProcess+0x178>)
 800d1ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f000 fb62 	bl	800d87c <lsm6dsl_from_fs500dps_to_mdps>
 800d1b8:	eef0 7a40 	vmov.f32	s15, s0
 800d1bc:	4b1a      	ldr	r3, [pc, #104]	; (800d228 <LSM6DSL_perSampleProcess+0x17c>)
 800d1be:	edc3 7a02 	vstr	s15, [r3, #8]

	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 800d1c2:	4b19      	ldr	r3, [pc, #100]	; (800d228 <LSM6DSL_perSampleProcess+0x17c>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7f3 f9c6 	bl	8000558 <__aeabi_f2d>
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	4689      	mov	r9, r1
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 800d1d0:	4b15      	ldr	r3, [pc, #84]	; (800d228 <LSM6DSL_perSampleProcess+0x17c>)
 800d1d2:	685b      	ldr	r3, [r3, #4]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7f3 f9bf 	bl	8000558 <__aeabi_f2d>
 800d1da:	4604      	mov	r4, r0
 800d1dc:	460d      	mov	r5, r1
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 800d1de:	4b12      	ldr	r3, [pc, #72]	; (800d228 <LSM6DSL_perSampleProcess+0x17c>)
 800d1e0:	689b      	ldr	r3, [r3, #8]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7f3 f9b8 	bl	8000558 <__aeabi_f2d>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1f0:	e9cd 4500 	strd	r4, r5, [sp]
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	464b      	mov	r3, r9
 800d1f8:	490c      	ldr	r1, [pc, #48]	; (800d22c <LSM6DSL_perSampleProcess+0x180>)
 800d1fa:	4809      	ldr	r0, [pc, #36]	; (800d220 <LSM6DSL_perSampleProcess+0x174>)
 800d1fc:	f002 ff10 	bl	8010020 <siprintf>

	  COM_uartPrint(Data);
 800d200:	4807      	ldr	r0, [pc, #28]	; (800d220 <LSM6DSL_perSampleProcess+0x174>)
 800d202:	f7fe ffd3 	bl	800c1ac <COM_uartPrint>
	}
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d210:	20001010 	.word	0x20001010
 800d214:	20000cfc 	.word	0x20000cfc
 800d218:	20000d0c 	.word	0x20000d0c
 800d21c:	08011e84 	.word	0x08011e84
 800d220:	2000101c 	.word	0x2000101c
 800d224:	20000d04 	.word	0x20000d04
 800d228:	20000d18 	.word	0x20000d18
 800d22c:	08011eac 	.word	0x08011eac

0800d230 <LSM6DSL_perSampleDisable>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_perSampleDisable (void)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 800d236:	1d3b      	adds	r3, r7, #4
 800d238:	4619      	mov	r1, r3
 800d23a:	4809      	ldr	r0, [pc, #36]	; (800d260 <LSM6DSL_perSampleDisable+0x30>)
 800d23c:	f000 fedf 	bl	800dffe <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_DISABLE;
 800d240:	793b      	ldrb	r3, [r7, #4]
 800d242:	f36f 0300 	bfc	r3, #0, #1
 800d246:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_DISABLE;
 800d248:	793b      	ldrb	r3, [r7, #4]
 800d24a:	f36f 0341 	bfc	r3, #1, #1
 800d24e:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 800d250:	6879      	ldr	r1, [r7, #4]
 800d252:	4803      	ldr	r0, [pc, #12]	; (800d260 <LSM6DSL_perSampleDisable+0x30>)
 800d254:	f000 fd70 	bl	800dd38 <lsm6dsl_pin_int1_route_set>
}
 800d258:	bf00      	nop
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	20001010 	.word	0x20001010

0800d264 <LSM6DSL_fifoInit>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void LSM6DSL_fifoInit(void)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Is_Connected == LSM6DSL_DISCONNECTED)
 800d26a:	4b27      	ldr	r3, [pc, #156]	; (800d308 <LSM6DSL_fifoInit+0xa4>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d103      	bne.n	800d27a <LSM6DSL_fifoInit+0x16>
	{
		COM_uartPrint("LSM6DSL is not connected!\n");
 800d272:	4826      	ldr	r0, [pc, #152]	; (800d30c <LSM6DSL_fifoInit+0xa8>)
 800d274:	f7fe ff9a 	bl	800c1ac <COM_uartPrint>
		return;
 800d278:	e042      	b.n	800d300 <LSM6DSL_fifoInit+0x9c>
	}
	if (Lsm6dsl_Mode == LSM6DSL_MODE_PER_SAMPLE)
 800d27a:	4b25      	ldr	r3, [pc, #148]	; (800d310 <LSM6DSL_fifoInit+0xac>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d103      	bne.n	800d28a <LSM6DSL_fifoInit+0x26>
	{
		COM_uartPrint("Need to disable PER_SAMPLE mode first\n");
 800d282:	4824      	ldr	r0, [pc, #144]	; (800d314 <LSM6DSL_fifoInit+0xb0>)
 800d284:	f7fe ff92 	bl	800c1ac <COM_uartPrint>
		return;
 800d288:	e03a      	b.n	800d300 <LSM6DSL_fifoInit+0x9c>
	}

	lsm6dsl_pin_polarity_set(&Dev_Ctx, LSM6DSL_ACTIVE_LOW);
 800d28a:	2101      	movs	r1, #1
 800d28c:	4822      	ldr	r0, [pc, #136]	; (800d318 <LSM6DSL_fifoInit+0xb4>)
 800d28e:	f000 ff8c 	bl	800e1aa <lsm6dsl_pin_polarity_set>

	/* Set acc&gyro FIFO decimation */
	lsm6dsl_dec_fifo_xl_t valXl;
	lsm6dsl_dec_fifo_gyro_t valGy;

	lsm6dsl_fifo_xl_batch_get(&Dev_Ctx, &valXl);
 800d292:	1dfb      	adds	r3, r7, #7
 800d294:	4619      	mov	r1, r3
 800d296:	4820      	ldr	r0, [pc, #128]	; (800d318 <LSM6DSL_fifoInit+0xb4>)
 800d298:	f001 f85e 	bl	800e358 <lsm6dsl_fifo_xl_batch_get>
	valXl = LSM6DSL_FIFO_XL_NO_DEC;
 800d29c:	2301      	movs	r3, #1
 800d29e:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_xl_batch_set(&Dev_Ctx, valXl);
 800d2a0:	79fb      	ldrb	r3, [r7, #7]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	481c      	ldr	r0, [pc, #112]	; (800d318 <LSM6DSL_fifoInit+0xb4>)
 800d2a6:	f001 f830 	bl	800e30a <lsm6dsl_fifo_xl_batch_set>

	lsm6dsl_fifo_gy_batch_get(&Dev_Ctx, &valGy);
 800d2aa:	1dbb      	adds	r3, r7, #6
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	481a      	ldr	r0, [pc, #104]	; (800d318 <LSM6DSL_fifoInit+0xb4>)
 800d2b0:	f001 f8c8 	bl	800e444 <lsm6dsl_fifo_gy_batch_get>
	valGy = LSM6DSL_FIFO_GY_NO_DEC;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	71bb      	strb	r3, [r7, #6]
	lsm6dsl_fifo_gy_batch_set(&Dev_Ctx, valGy);
 800d2b8:	79bb      	ldrb	r3, [r7, #6]
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	4816      	ldr	r0, [pc, #88]	; (800d318 <LSM6DSL_fifoInit+0xb4>)
 800d2be:	f001 f89b 	bl	800e3f8 <lsm6dsl_fifo_gy_batch_set>

	/* Set FIFO ODR value */
	lsm6dsl_odr_fifo_t valOdr;
	lsm6dsl_fifo_data_rate_get(&Dev_Ctx, &valOdr);
 800d2c2:	1d7b      	adds	r3, r7, #5
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	4814      	ldr	r0, [pc, #80]	; (800d318 <LSM6DSL_fifoInit+0xb4>)
 800d2c8:	f001 f99a 	bl	800e600 <lsm6dsl_fifo_data_rate_get>
	valOdr = LSM6DSL_FIFO_12Hz5;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	717b      	strb	r3, [r7, #5]
	lsm6dsl_fifo_data_rate_set(&Dev_Ctx, valOdr);
 800d2d0:	797b      	ldrb	r3, [r7, #5]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4810      	ldr	r0, [pc, #64]	; (800d318 <LSM6DSL_fifoInit+0xb4>)
 800d2d6:	f001 f96d 	bl	800e5b4 <lsm6dsl_fifo_data_rate_set>

	LSM6DSL_fifoInterruptEnable();
 800d2da:	f000 fa4d 	bl	800d778 <LSM6DSL_fifoInterruptEnable>

	/* Set FIFO watermark */
	uint16_t valWtm;
	lsm6dsl_fifo_watermark_get(&Dev_Ctx, &valWtm);
 800d2de:	1cbb      	adds	r3, r7, #2
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	480d      	ldr	r0, [pc, #52]	; (800d318 <LSM6DSL_fifoInit+0xb4>)
 800d2e4:	f000 ffbd 	bl	800e262 <lsm6dsl_fifo_watermark_get>
	valWtm = ACC_AND_GYRO_FIFO_WATERMARK;
 800d2e8:	233c      	movs	r3, #60	; 0x3c
 800d2ea:	807b      	strh	r3, [r7, #2]
	lsm6dsl_fifo_watermark_set(&Dev_Ctx, valWtm);
 800d2ec:	887b      	ldrh	r3, [r7, #2]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	4809      	ldr	r0, [pc, #36]	; (800d318 <LSM6DSL_fifoInit+0xb4>)
 800d2f2:	f000 ff80 	bl	800e1f6 <lsm6dsl_fifo_watermark_set>
	/*uint8_t valStopOnWtm;
	lsm6dsl_fifo_stop_on_wtm_get(&Dev_Ctx, &valStopOnWtm);
	valStopOnWtm = PROPERTY_ENABLE;
	lsm6dsl_fifo_stop_on_wtm_set(&Dev_Ctx, valStopOnWtm);*/

	LSM6DSL_fifoSetFIFOMode();
 800d2f6:	f000 fa13 	bl	800d720 <LSM6DSL_fifoSetFIFOMode>

	Lsm6dsl_Mode = LSM6DSL_MODE_FIFO;
 800d2fa:	4b05      	ldr	r3, [pc, #20]	; (800d310 <LSM6DSL_fifoInit+0xac>)
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	701a      	strb	r2, [r3, #0]
}
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	20001081 	.word	0x20001081
 800d30c:	08011e44 	.word	0x08011e44
 800d310:	20001080 	.word	0x20001080
 800d314:	08011ed4 	.word	0x08011ed4
 800d318:	20001010 	.word	0x20001010

0800d31c <LSM6DSL_fifoProcess>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_fifoProcess(void)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	af00      	add	r7, sp, #0
	LSM6DSL_fifoReadAllData();
 800d320:	f000 f80a 	bl	800d338 <LSM6DSL_fifoReadAllData>
}
 800d324:	bf00      	nop
 800d326:	bd80      	pop	{r7, pc}

0800d328 <LSM6DSL_fifoDisable>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_fifoDisable(void)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
	LSM6DSL_fifoInterruptDisable();
 800d32c:	f000 fa3a 	bl	800d7a4 <LSM6DSL_fifoInterruptDisable>
	LSM6DSL_fifoSetBypassMode();
 800d330:	f000 fa0c 	bl	800d74c <LSM6DSL_fifoSetBypassMode>
}
 800d334:	bf00      	nop
 800d336:	bd80      	pop	{r7, pc}

0800d338 <LSM6DSL_fifoReadAllData>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_fifoReadAllData(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
	uint16_t unread_int16_fifo_samples = 0;
 800d33e:	2300      	movs	r3, #0
 800d340:	807b      	strh	r3, [r7, #2]

	for(int i = 0; i < 3; i++)
 800d342:	2300      	movs	r3, #0
 800d344:	60fb      	str	r3, [r7, #12]
 800d346:	e010      	b.n	800d36a <LSM6DSL_fifoReadAllData+0x32>
	{
		P_Acceleration_G_Sum[i] = 0;
 800d348:	4a2f      	ldr	r2, [pc, #188]	; (800d408 <LSM6DSL_fifoReadAllData+0xd0>)
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	f04f 0200 	mov.w	r2, #0
 800d354:	601a      	str	r2, [r3, #0]
		P_Angular_Rate_Dps_Sum[i] = 0;
 800d356:	4a2d      	ldr	r2, [pc, #180]	; (800d40c <LSM6DSL_fifoReadAllData+0xd4>)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	4413      	add	r3, r2
 800d35e:	f04f 0200 	mov.w	r2, #0
 800d362:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3301      	adds	r3, #1
 800d368:	60fb      	str	r3, [r7, #12]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	ddeb      	ble.n	800d348 <LSM6DSL_fifoReadAllData+0x10>
	}

	/* Get num of unread FIFO samples before reading Data */
	lsm6dsl_fifo_data_level_get(&Dev_Ctx, &unread_int16_fifo_samples);
 800d370:	1cbb      	adds	r3, r7, #2
 800d372:	4619      	mov	r1, r3
 800d374:	4826      	ldr	r0, [pc, #152]	; (800d410 <LSM6DSL_fifoReadAllData+0xd8>)
 800d376:	f000 ff9e 	bl	800e2b6 <lsm6dsl_fifo_data_level_get>

	uint16_t unread_acc_and_gyro_samples = unread_int16_fifo_samples / ACC_AND_GYRO_SINGLE_FIFO_SAMPLE;
 800d37a:	887b      	ldrh	r3, [r7, #2]
 800d37c:	4a25      	ldr	r2, [pc, #148]	; (800d414 <LSM6DSL_fifoReadAllData+0xdc>)
 800d37e:	fba2 2303 	umull	r2, r3, r2, r3
 800d382:	089b      	lsrs	r3, r3, #2
 800d384:	817b      	strh	r3, [r7, #10]
	sprintf(Data, "Number of unread ACC and Gyro samples each: %d\n", unread_acc_and_gyro_samples);
 800d386:	897b      	ldrh	r3, [r7, #10]
 800d388:	461a      	mov	r2, r3
 800d38a:	4923      	ldr	r1, [pc, #140]	; (800d418 <LSM6DSL_fifoReadAllData+0xe0>)
 800d38c:	4823      	ldr	r0, [pc, #140]	; (800d41c <LSM6DSL_fifoReadAllData+0xe4>)
 800d38e:	f002 fe47 	bl	8010020 <siprintf>
	COM_uartPrint(Data);
 800d392:	4822      	ldr	r0, [pc, #136]	; (800d41c <LSM6DSL_fifoReadAllData+0xe4>)
 800d394:	f7fe ff0a 	bl	800c1ac <COM_uartPrint>

	while (unread_acc_and_gyro_samples > 0)
 800d398:	e02f      	b.n	800d3fa <LSM6DSL_fifoReadAllData+0xc2>
	{
		uint16_t unread_acc_and_gyro_samples_cycle;
		if(unread_acc_and_gyro_samples >= SAMPLES_TO_READ)
 800d39a:	897b      	ldrh	r3, [r7, #10]
 800d39c:	2b09      	cmp	r3, #9
 800d39e:	d902      	bls.n	800d3a6 <LSM6DSL_fifoReadAllData+0x6e>
		{
			unread_acc_and_gyro_samples_cycle = SAMPLES_TO_READ;
 800d3a0:	230a      	movs	r3, #10
 800d3a2:	813b      	strh	r3, [r7, #8]
 800d3a4:	e001      	b.n	800d3aa <LSM6DSL_fifoReadAllData+0x72>
		}
		else
		{
			unread_acc_and_gyro_samples_cycle = unread_acc_and_gyro_samples;
 800d3a6:	897b      	ldrh	r3, [r7, #10]
 800d3a8:	813b      	strh	r3, [r7, #8]
		}

		lsm6dsl_fifo_raw_data_get(&Dev_Ctx, P_Data_Raw_Acc_Gy_Buf->u8bit, unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE * FIFO_SAMPLE_TO_BYTE_RATIO);
 800d3aa:	893b      	ldrh	r3, [r7, #8]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	0052      	lsls	r2, r2, #1
 800d3b2:	4413      	add	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	4919      	ldr	r1, [pc, #100]	; (800d420 <LSM6DSL_fifoReadAllData+0xe8>)
 800d3bc:	4814      	ldr	r0, [pc, #80]	; (800d410 <LSM6DSL_fifoReadAllData+0xd8>)
 800d3be:	f000 fb66 	bl	800da8e <lsm6dsl_fifo_raw_data_get>
		for (int i = 0; i < unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	607b      	str	r3, [r7, #4]
 800d3c6:	e007      	b.n	800d3d8 <LSM6DSL_fifoReadAllData+0xa0>
		{
			LSM6DSL_fifoAccAndGyroReadSingleSample(i);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 f829 	bl	800d424 <LSM6DSL_fifoAccAndGyroReadSingleSample>
		for (int i = 0; i < unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	3306      	adds	r3, #6
 800d3d6:	607b      	str	r3, [r7, #4]
 800d3d8:	893a      	ldrh	r2, [r7, #8]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	4413      	add	r3, r2
 800d3e0:	005b      	lsls	r3, r3, #1
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	dbee      	blt.n	800d3c8 <LSM6DSL_fifoReadAllData+0x90>
		}
		LSM6DSL_fifoCalcAccGyroAvgAndPrint(unread_acc_and_gyro_samples_cycle);
 800d3ea:	893b      	ldrh	r3, [r7, #8]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 f88f 	bl	800d510 <LSM6DSL_fifoCalcAccGyroAvgAndPrint>
		unread_acc_and_gyro_samples -= unread_acc_and_gyro_samples_cycle;
 800d3f2:	897a      	ldrh	r2, [r7, #10]
 800d3f4:	893b      	ldrh	r3, [r7, #8]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	817b      	strh	r3, [r7, #10]
	while (unread_acc_and_gyro_samples > 0)
 800d3fa:	897b      	ldrh	r3, [r7, #10]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1cc      	bne.n	800d39a <LSM6DSL_fifoReadAllData+0x62>
	}
}
 800d400:	bf00      	nop
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	20000ff8 	.word	0x20000ff8
 800d40c:	20001004 	.word	0x20001004
 800d410:	20001010 	.word	0x20001010
 800d414:	aaaaaaab 	.word	0xaaaaaaab
 800d418:	08011efc 	.word	0x08011efc
 800d41c:	2000101c 	.word	0x2000101c
 800d420:	20000d28 	.word	0x20000d28

0800d424 <LSM6DSL_fifoAccAndGyroReadSingleSample>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_fifoAccAndGyroReadSingleSample(uint16_t SampleIndex)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	80fb      	strh	r3, [r7, #6]
	P_Angular_Rate_Dps_Sum[0] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex];
 800d42e:	4b35      	ldr	r3, [pc, #212]	; (800d504 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800d430:	ed93 7a00 	vldr	s14, [r3]
 800d434:	88fb      	ldrh	r3, [r7, #6]
 800d436:	4a34      	ldr	r2, [pc, #208]	; (800d508 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800d438:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d43c:	ee07 3a90 	vmov	s15, r3
 800d440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d444:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d448:	4b2e      	ldr	r3, [pc, #184]	; (800d504 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800d44a:	edc3 7a00 	vstr	s15, [r3]
	P_Angular_Rate_Dps_Sum[1] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 1];
 800d44e:	4b2d      	ldr	r3, [pc, #180]	; (800d504 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800d450:	ed93 7a01 	vldr	s14, [r3, #4]
 800d454:	88fb      	ldrh	r3, [r7, #6]
 800d456:	3301      	adds	r3, #1
 800d458:	4a2b      	ldr	r2, [pc, #172]	; (800d508 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800d45a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d45e:	ee07 3a90 	vmov	s15, r3
 800d462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d46a:	4b26      	ldr	r3, [pc, #152]	; (800d504 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800d46c:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Angular_Rate_Dps_Sum[2] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 2];
 800d470:	4b24      	ldr	r3, [pc, #144]	; (800d504 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800d472:	ed93 7a02 	vldr	s14, [r3, #8]
 800d476:	88fb      	ldrh	r3, [r7, #6]
 800d478:	3302      	adds	r3, #2
 800d47a:	4a23      	ldr	r2, [pc, #140]	; (800d508 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800d47c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d480:	ee07 3a90 	vmov	s15, r3
 800d484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d48c:	4b1d      	ldr	r3, [pc, #116]	; (800d504 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800d48e:	edc3 7a02 	vstr	s15, [r3, #8]

	P_Acceleration_G_Sum[0] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 3];
 800d492:	4b1e      	ldr	r3, [pc, #120]	; (800d50c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800d494:	ed93 7a00 	vldr	s14, [r3]
 800d498:	88fb      	ldrh	r3, [r7, #6]
 800d49a:	3303      	adds	r3, #3
 800d49c:	4a1a      	ldr	r2, [pc, #104]	; (800d508 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800d49e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d4a2:	ee07 3a90 	vmov	s15, r3
 800d4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4ae:	4b17      	ldr	r3, [pc, #92]	; (800d50c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800d4b0:	edc3 7a00 	vstr	s15, [r3]
	P_Acceleration_G_Sum[1] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 4];
 800d4b4:	4b15      	ldr	r3, [pc, #84]	; (800d50c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800d4b6:	ed93 7a01 	vldr	s14, [r3, #4]
 800d4ba:	88fb      	ldrh	r3, [r7, #6]
 800d4bc:	3304      	adds	r3, #4
 800d4be:	4a12      	ldr	r2, [pc, #72]	; (800d508 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800d4c0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d4c4:	ee07 3a90 	vmov	s15, r3
 800d4c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4d0:	4b0e      	ldr	r3, [pc, #56]	; (800d50c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800d4d2:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Acceleration_G_Sum[2] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 5];
 800d4d6:	4b0d      	ldr	r3, [pc, #52]	; (800d50c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800d4d8:	ed93 7a02 	vldr	s14, [r3, #8]
 800d4dc:	88fb      	ldrh	r3, [r7, #6]
 800d4de:	3305      	adds	r3, #5
 800d4e0:	4a09      	ldr	r2, [pc, #36]	; (800d508 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800d4e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d4e6:	ee07 3a90 	vmov	s15, r3
 800d4ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4f2:	4b06      	ldr	r3, [pc, #24]	; (800d50c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800d4f4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr
 800d504:	20001004 	.word	0x20001004
 800d508:	20000d28 	.word	0x20000d28
 800d50c:	20000ff8 	.word	0x20000ff8

0800d510 <LSM6DSL_fifoCalcAccGyroAvgAndPrint>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_fifoCalcAccGyroAvgAndPrint(uint16_t divider)
{
 800d510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af04      	add	r7, sp, #16
 800d518:	4603      	mov	r3, r0
 800d51a:	80fb      	strh	r3, [r7, #6]
	sprintf(Data, "%d samples average:\n", divider);
 800d51c:	88fb      	ldrh	r3, [r7, #6]
 800d51e:	461a      	mov	r2, r3
 800d520:	4978      	ldr	r1, [pc, #480]	; (800d704 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f4>)
 800d522:	4879      	ldr	r0, [pc, #484]	; (800d708 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800d524:	f002 fd7c 	bl	8010020 <siprintf>
	COM_uartPrint(Data);
 800d528:	4877      	ldr	r0, [pc, #476]	; (800d708 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800d52a:	f7fe fe3f 	bl	800c1ac <COM_uartPrint>

	P_Acceleration_G_Sum[0] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[0] / divider )/1000;
 800d52e:	4b77      	ldr	r3, [pc, #476]	; (800d70c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800d530:	edd3 6a00 	vldr	s13, [r3]
 800d534:	88fb      	ldrh	r3, [r7, #6]
 800d536:	ee07 3a90 	vmov	s15, r3
 800d53a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d53e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d546:	ee17 3a90 	vmov	r3, s15
 800d54a:	b21b      	sxth	r3, r3
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 f97d 	bl	800d84c <lsm6dsl_from_fs8g_to_mg>
 800d552:	eef0 6a40 	vmov.f32	s13, s0
 800d556:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800d710 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800d55a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d55e:	4b6b      	ldr	r3, [pc, #428]	; (800d70c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800d560:	edc3 7a00 	vstr	s15, [r3]
	P_Acceleration_G_Sum[1] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[1] / divider )/1000;
 800d564:	4b69      	ldr	r3, [pc, #420]	; (800d70c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800d566:	edd3 6a01 	vldr	s13, [r3, #4]
 800d56a:	88fb      	ldrh	r3, [r7, #6]
 800d56c:	ee07 3a90 	vmov	s15, r3
 800d570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d57c:	ee17 3a90 	vmov	r3, s15
 800d580:	b21b      	sxth	r3, r3
 800d582:	4618      	mov	r0, r3
 800d584:	f000 f962 	bl	800d84c <lsm6dsl_from_fs8g_to_mg>
 800d588:	eef0 6a40 	vmov.f32	s13, s0
 800d58c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800d710 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800d590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d594:	4b5d      	ldr	r3, [pc, #372]	; (800d70c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800d596:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Acceleration_G_Sum[2] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[2] / divider )/1000;
 800d59a:	4b5c      	ldr	r3, [pc, #368]	; (800d70c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800d59c:	edd3 6a02 	vldr	s13, [r3, #8]
 800d5a0:	88fb      	ldrh	r3, [r7, #6]
 800d5a2:	ee07 3a90 	vmov	s15, r3
 800d5a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d5aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5b2:	ee17 3a90 	vmov	r3, s15
 800d5b6:	b21b      	sxth	r3, r3
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f000 f947 	bl	800d84c <lsm6dsl_from_fs8g_to_mg>
 800d5be:	eef0 6a40 	vmov.f32	s13, s0
 800d5c2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800d710 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800d5c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5ca:	4b50      	ldr	r3, [pc, #320]	; (800d70c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800d5cc:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 800d5d0:	4b4e      	ldr	r3, [pc, #312]	; (800d70c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f2 ffbf 	bl	8000558 <__aeabi_f2d>
 800d5da:	4680      	mov	r8, r0
 800d5dc:	4689      	mov	r9, r1
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 800d5de:	4b4b      	ldr	r3, [pc, #300]	; (800d70c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800d5e0:	685b      	ldr	r3, [r3, #4]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7f2 ffb8 	bl	8000558 <__aeabi_f2d>
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	460d      	mov	r5, r1
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 800d5ec:	4b47      	ldr	r3, [pc, #284]	; (800d70c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800d5ee:	689b      	ldr	r3, [r3, #8]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7f2 ffb1 	bl	8000558 <__aeabi_f2d>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5fe:	e9cd 4500 	strd	r4, r5, [sp]
 800d602:	4642      	mov	r2, r8
 800d604:	464b      	mov	r3, r9
 800d606:	4943      	ldr	r1, [pc, #268]	; (800d714 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x204>)
 800d608:	483f      	ldr	r0, [pc, #252]	; (800d708 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800d60a:	f002 fd09 	bl	8010020 <siprintf>

	COM_uartPrint(Data);
 800d60e:	483e      	ldr	r0, [pc, #248]	; (800d708 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800d610:	f7fe fdcc 	bl	800c1ac <COM_uartPrint>

	P_Angular_Rate_Dps_Sum[0] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[0] / divider )/1000;
 800d614:	4b40      	ldr	r3, [pc, #256]	; (800d718 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800d616:	edd3 6a00 	vldr	s13, [r3]
 800d61a:	88fb      	ldrh	r3, [r7, #6]
 800d61c:	ee07 3a90 	vmov	s15, r3
 800d620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d62c:	ee17 3a90 	vmov	r3, s15
 800d630:	b21b      	sxth	r3, r3
 800d632:	4618      	mov	r0, r3
 800d634:	f000 f922 	bl	800d87c <lsm6dsl_from_fs500dps_to_mdps>
 800d638:	eef0 6a40 	vmov.f32	s13, s0
 800d63c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d710 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800d640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d644:	4b34      	ldr	r3, [pc, #208]	; (800d718 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800d646:	edc3 7a00 	vstr	s15, [r3]
	P_Angular_Rate_Dps_Sum[1] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[1] / divider )/1000;
 800d64a:	4b33      	ldr	r3, [pc, #204]	; (800d718 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800d64c:	edd3 6a01 	vldr	s13, [r3, #4]
 800d650:	88fb      	ldrh	r3, [r7, #6]
 800d652:	ee07 3a90 	vmov	s15, r3
 800d656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d65a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d65e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d662:	ee17 3a90 	vmov	r3, s15
 800d666:	b21b      	sxth	r3, r3
 800d668:	4618      	mov	r0, r3
 800d66a:	f000 f907 	bl	800d87c <lsm6dsl_from_fs500dps_to_mdps>
 800d66e:	eef0 6a40 	vmov.f32	s13, s0
 800d672:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800d710 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800d676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d67a:	4b27      	ldr	r3, [pc, #156]	; (800d718 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800d67c:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Angular_Rate_Dps_Sum[2] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[2] / divider )/1000;
 800d680:	4b25      	ldr	r3, [pc, #148]	; (800d718 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800d682:	edd3 6a02 	vldr	s13, [r3, #8]
 800d686:	88fb      	ldrh	r3, [r7, #6]
 800d688:	ee07 3a90 	vmov	s15, r3
 800d68c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d698:	ee17 3a90 	vmov	r3, s15
 800d69c:	b21b      	sxth	r3, r3
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 f8ec 	bl	800d87c <lsm6dsl_from_fs500dps_to_mdps>
 800d6a4:	eef0 6a40 	vmov.f32	s13, s0
 800d6a8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d710 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800d6ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6b0:	4b19      	ldr	r3, [pc, #100]	; (800d718 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800d6b2:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 800d6b6:	4b18      	ldr	r3, [pc, #96]	; (800d718 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f2 ff4c 	bl	8000558 <__aeabi_f2d>
 800d6c0:	4680      	mov	r8, r0
 800d6c2:	4689      	mov	r9, r1
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 800d6c4:	4b14      	ldr	r3, [pc, #80]	; (800d718 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800d6c6:	685b      	ldr	r3, [r3, #4]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7f2 ff45 	bl	8000558 <__aeabi_f2d>
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	460d      	mov	r5, r1
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 800d6d2:	4b11      	ldr	r3, [pc, #68]	; (800d718 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800d6d4:	689b      	ldr	r3, [r3, #8]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7f2 ff3e 	bl	8000558 <__aeabi_f2d>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6e4:	e9cd 4500 	strd	r4, r5, [sp]
 800d6e8:	4642      	mov	r2, r8
 800d6ea:	464b      	mov	r3, r9
 800d6ec:	490b      	ldr	r1, [pc, #44]	; (800d71c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x20c>)
 800d6ee:	4806      	ldr	r0, [pc, #24]	; (800d708 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800d6f0:	f002 fc96 	bl	8010020 <siprintf>

	COM_uartPrint(Data);
 800d6f4:	4804      	ldr	r0, [pc, #16]	; (800d708 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800d6f6:	f7fe fd59 	bl	800c1ac <COM_uartPrint>

	//COM_uartPrint("test\n");
}
 800d6fa:	bf00      	nop
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d704:	08011f2c 	.word	0x08011f2c
 800d708:	2000101c 	.word	0x2000101c
 800d70c:	20000ff8 	.word	0x20000ff8
 800d710:	447a0000 	.word	0x447a0000
 800d714:	08011f44 	.word	0x08011f44
 800d718:	20001004 	.word	0x20001004
 800d71c:	08011f6c 	.word	0x08011f6c

0800d720 <LSM6DSL_fifoSetFIFOMode>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_fifoSetFIFOMode(void)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
	/* Set FIFO mode to FIFO */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&Dev_Ctx, &fifo_mode_t);
 800d726:	1dfb      	adds	r3, r7, #7
 800d728:	4619      	mov	r1, r3
 800d72a:	4807      	ldr	r0, [pc, #28]	; (800d748 <LSM6DSL_fifoSetFIFOMode+0x28>)
 800d72c:	f000 ff00 	bl	800e530 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_FIFO_MODE;
 800d730:	2301      	movs	r3, #1
 800d732:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&Dev_Ctx, fifo_mode_t);
 800d734:	79fb      	ldrb	r3, [r7, #7]
 800d736:	4619      	mov	r1, r3
 800d738:	4803      	ldr	r0, [pc, #12]	; (800d748 <LSM6DSL_fifoSetFIFOMode+0x28>)
 800d73a:	f000 fed3 	bl	800e4e4 <lsm6dsl_fifo_mode_set>
}
 800d73e:	bf00      	nop
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20001010 	.word	0x20001010

0800d74c <LSM6DSL_fifoSetBypassMode>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_fifoSetBypassMode(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
	/* Set FIFO mode to BYPASS */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&Dev_Ctx, &fifo_mode_t);
 800d752:	1dfb      	adds	r3, r7, #7
 800d754:	4619      	mov	r1, r3
 800d756:	4807      	ldr	r0, [pc, #28]	; (800d774 <LSM6DSL_fifoSetBypassMode+0x28>)
 800d758:	f000 feea 	bl	800e530 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_BYPASS_MODE;
 800d75c:	2300      	movs	r3, #0
 800d75e:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&Dev_Ctx, fifo_mode_t);
 800d760:	79fb      	ldrb	r3, [r7, #7]
 800d762:	4619      	mov	r1, r3
 800d764:	4803      	ldr	r0, [pc, #12]	; (800d774 <LSM6DSL_fifoSetBypassMode+0x28>)
 800d766:	f000 febd 	bl	800e4e4 <lsm6dsl_fifo_mode_set>

	//lsm6dsl_fifo_mode_set(&Dev_Ctx, LSM6DSL_BYPASS_MODE);
}
 800d76a:	bf00      	nop
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	20001010 	.word	0x20001010

0800d778 <LSM6DSL_fifoInterruptEnable>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_fifoInterruptEnable(void)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 800d77e:	1d3b      	adds	r3, r7, #4
 800d780:	4619      	mov	r1, r3
 800d782:	4807      	ldr	r0, [pc, #28]	; (800d7a0 <LSM6DSL_fifoInterruptEnable+0x28>)
 800d784:	f000 fc3b 	bl	800dffe <lsm6dsl_pin_int1_route_get>
	//reg.int1_full_flag = PROPERTY_ENABLE;
	reg.int1_fth = PROPERTY_ENABLE;
 800d788:	793b      	ldrb	r3, [r7, #4]
 800d78a:	f043 0308 	orr.w	r3, r3, #8
 800d78e:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 800d790:	6879      	ldr	r1, [r7, #4]
 800d792:	4803      	ldr	r0, [pc, #12]	; (800d7a0 <LSM6DSL_fifoInterruptEnable+0x28>)
 800d794:	f000 fad0 	bl	800dd38 <lsm6dsl_pin_int1_route_set>
}
 800d798:	bf00      	nop
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	20001010 	.word	0x20001010

0800d7a4 <LSM6DSL_fifoInterruptDisable>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
static void LSM6DSL_fifoInterruptDisable(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 800d7aa:	1d3b      	adds	r3, r7, #4
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4807      	ldr	r0, [pc, #28]	; (800d7cc <LSM6DSL_fifoInterruptDisable+0x28>)
 800d7b0:	f000 fc25 	bl	800dffe <lsm6dsl_pin_int1_route_get>
	reg.int1_fth = PROPERTY_DISABLE;
 800d7b4:	793b      	ldrb	r3, [r7, #4]
 800d7b6:	f36f 03c3 	bfc	r3, #3, #1
 800d7ba:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 800d7bc:	6879      	ldr	r1, [r7, #4]
 800d7be:	4803      	ldr	r0, [pc, #12]	; (800d7cc <LSM6DSL_fifoInterruptDisable+0x28>)
 800d7c0:	f000 faba 	bl	800dd38 <lsm6dsl_pin_int1_route_set>
}
 800d7c4:	bf00      	nop
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	20001010 	.word	0x20001010

0800d7d0 <LSM6DSL_modesDisable>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void LSM6DSL_modesDisable(void)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	af00      	add	r7, sp, #0
	LSM6DSL_perSampleDisable();
 800d7d4:	f7ff fd2c 	bl	800d230 <LSM6DSL_perSampleDisable>
	LSM6DSL_fifoDisable();
 800d7d8:	f7ff fda6 	bl	800d328 <LSM6DSL_fifoDisable>
	Lsm6dsl_Mode = LSM6DSL_MODE_IDLE;
 800d7dc:	4b02      	ldr	r3, [pc, #8]	; (800d7e8 <LSM6DSL_modesDisable+0x18>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	701a      	strb	r2, [r3, #0]
}
 800d7e2:	bf00      	nop
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	20001080 	.word	0x20001080

0800d7ec <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800d7ec:	b590      	push	{r4, r7, lr}
 800d7ee:	b087      	sub	sp, #28
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	607a      	str	r2, [r7, #4]
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	72fb      	strb	r3, [r7, #11]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	685c      	ldr	r4, [r3, #4]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6898      	ldr	r0, [r3, #8]
 800d808:	893b      	ldrh	r3, [r7, #8]
 800d80a:	7af9      	ldrb	r1, [r7, #11]
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	47a0      	blx	r4
 800d810:	6178      	str	r0, [r7, #20]
  return ret;
 800d812:	697b      	ldr	r3, [r7, #20]
}
 800d814:	4618      	mov	r0, r3
 800d816:	371c      	adds	r7, #28
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd90      	pop	{r4, r7, pc}

0800d81c <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800d81c:	b590      	push	{r4, r7, lr}
 800d81e:	b087      	sub	sp, #28
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	607a      	str	r2, [r7, #4]
 800d826:	461a      	mov	r2, r3
 800d828:	460b      	mov	r3, r1
 800d82a:	72fb      	strb	r3, [r7, #11]
 800d82c:	4613      	mov	r3, r2
 800d82e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681c      	ldr	r4, [r3, #0]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6898      	ldr	r0, [r3, #8]
 800d838:	893b      	ldrh	r3, [r7, #8]
 800d83a:	7af9      	ldrb	r1, [r7, #11]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	47a0      	blx	r4
 800d840:	6178      	str	r0, [r7, #20]
  return ret;
 800d842:	697b      	ldr	r3, [r7, #20]
}
 800d844:	4618      	mov	r0, r3
 800d846:	371c      	adds	r7, #28
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd90      	pop	{r4, r7, pc}

0800d84c <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 800d856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d85a:	ee07 3a90 	vmov	s15, r3
 800d85e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d862:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d878 <lsm6dsl_from_fs8g_to_mg+0x2c>
 800d866:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800d86a:	eeb0 0a67 	vmov.f32	s0, s15
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr
 800d878:	3e79db23 	.word	0x3e79db23

0800d87c <lsm6dsl_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6dsl_from_fs500dps_to_mdps(int16_t lsb)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 800d886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d88a:	ee07 3a90 	vmov	s15, r3
 800d88e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d892:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d8a8 <lsm6dsl_from_fs500dps_to_mdps+0x2c>
 800d896:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800d89a:	eeb0 0a67 	vmov.f32	s0, s15
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	418c0000 	.word	0x418c0000

0800d8ac <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800d8b8:	f107 0208 	add.w	r2, r7, #8
 800d8bc:	2301      	movs	r3, #1
 800d8be:	2110      	movs	r1, #16
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7ff ff93 	bl	800d7ec <lsm6dsl_read_reg>
 800d8c6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10f      	bne.n	800d8ee <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800d8ce:	78fb      	ldrb	r3, [r7, #3]
 800d8d0:	f003 0303 	and.w	r3, r3, #3
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	7a3b      	ldrb	r3, [r7, #8]
 800d8d8:	f362 0383 	bfi	r3, r2, #2, #2
 800d8dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800d8de:	f107 0208 	add.w	r2, r7, #8
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	2110      	movs	r1, #16
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff ff98 	bl	800d81c <lsm6dsl_write_reg>
 800d8ec:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800d904:	f107 0208 	add.w	r2, r7, #8
 800d908:	2301      	movs	r3, #1
 800d90a:	2110      	movs	r1, #16
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7ff ff6d 	bl	800d7ec <lsm6dsl_read_reg>
 800d912:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d10f      	bne.n	800d93a <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800d91a:	78fb      	ldrb	r3, [r7, #3]
 800d91c:	f003 030f 	and.w	r3, r3, #15
 800d920:	b2da      	uxtb	r2, r3
 800d922:	7a3b      	ldrb	r3, [r7, #8]
 800d924:	f362 1307 	bfi	r3, r2, #4, #4
 800d928:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800d92a:	f107 0208 	add.w	r2, r7, #8
 800d92e:	2301      	movs	r3, #1
 800d930:	2110      	movs	r1, #16
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f7ff ff72 	bl	800d81c <lsm6dsl_write_reg>
 800d938:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800d93a:	68fb      	ldr	r3, [r7, #12]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	460b      	mov	r3, r1
 800d94e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800d950:	f107 0208 	add.w	r2, r7, #8
 800d954:	2301      	movs	r3, #1
 800d956:	2111      	movs	r1, #17
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff ff47 	bl	800d7ec <lsm6dsl_read_reg>
 800d95e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10f      	bne.n	800d986 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800d966:	78fb      	ldrb	r3, [r7, #3]
 800d968:	f003 0307 	and.w	r3, r3, #7
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	7a3b      	ldrb	r3, [r7, #8]
 800d970:	f362 0343 	bfi	r3, r2, #1, #3
 800d974:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800d976:	f107 0208 	add.w	r2, r7, #8
 800d97a:	2301      	movs	r3, #1
 800d97c:	2111      	movs	r1, #17
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff ff4c 	bl	800d81c <lsm6dsl_write_reg>
 800d984:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800d986:	68fb      	ldr	r3, [r7, #12]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	460b      	mov	r3, r1
 800d99a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800d99c:	f107 0208 	add.w	r2, r7, #8
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	2111      	movs	r1, #17
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f7ff ff21 	bl	800d7ec <lsm6dsl_read_reg>
 800d9aa:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d10f      	bne.n	800d9d2 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800d9b2:	78fb      	ldrb	r3, [r7, #3]
 800d9b4:	f003 030f 	and.w	r3, r3, #15
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	7a3b      	ldrb	r3, [r7, #8]
 800d9bc:	f362 1307 	bfi	r3, r2, #4, #4
 800d9c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800d9c2:	f107 0208 	add.w	r2, r7, #8
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	2111      	movs	r1, #17
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f7ff ff26 	bl	800d81c <lsm6dsl_write_reg>
 800d9d0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800d9e8:	f107 0208 	add.w	r2, r7, #8
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	2112      	movs	r1, #18
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7ff fefb 	bl	800d7ec <lsm6dsl_read_reg>
 800d9f6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10f      	bne.n	800da1e <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800d9fe:	78fb      	ldrb	r3, [r7, #3]
 800da00:	f003 0301 	and.w	r3, r3, #1
 800da04:	b2da      	uxtb	r2, r3
 800da06:	7a3b      	ldrb	r3, [r7, #8]
 800da08:	f362 1386 	bfi	r3, r2, #6, #1
 800da0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800da0e:	f107 0208 	add.w	r2, r7, #8
 800da12:	2301      	movs	r3, #1
 800da14:	2112      	movs	r1, #18
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7ff ff00 	bl	800d81c <lsm6dsl_write_reg>
 800da1c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800da1e:	68fb      	ldr	r3, [r7, #12]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <lsm6dsl_status_reg_get>:
  * @param  val    Registers STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx, lsm6dsl_status_reg_t *val)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*) val, 1);
 800da32:	2301      	movs	r3, #1
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	211e      	movs	r1, #30
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7ff fed7 	bl	800d7ec <lsm6dsl_read_reg>
 800da3e:	60f8      	str	r0, [r7, #12]
  return ret;
 800da40:	68fb      	ldr	r3, [r7, #12]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b084      	sub	sp, #16
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800da54:	2306      	movs	r3, #6
 800da56:	683a      	ldr	r2, [r7, #0]
 800da58:	2122      	movs	r1, #34	; 0x22
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f7ff fec6 	bl	800d7ec <lsm6dsl_read_reg>
 800da60:	60f8      	str	r0, [r7, #12]
  return ret;
 800da62:	68fb      	ldr	r3, [r7, #12]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3710      	adds	r7, #16
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800da76:	2306      	movs	r3, #6
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	2128      	movs	r1, #40	; 0x28
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7ff feb5 	bl	800d7ec <lsm6dsl_read_reg>
 800da82:	60f8      	str	r0, [r7, #12]
  return ret;
 800da84:	68fb      	ldr	r3, [r7, #12]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <lsm6dsl_fifo_raw_data_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_raw_data_get(stmdev_ctx_t *ctx, uint8_t *buffer,
                                  uint8_t len)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b086      	sub	sp, #24
 800da92:	af00      	add	r7, sp, #0
 800da94:	60f8      	str	r0, [r7, #12]
 800da96:	60b9      	str	r1, [r7, #8]
 800da98:	4613      	mov	r3, r2
 800da9a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_DATA_OUT_L, buffer, len);
 800da9c:	79fb      	ldrb	r3, [r7, #7]
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	213e      	movs	r1, #62	; 0x3e
 800daa4:	68f8      	ldr	r0, [r7, #12]
 800daa6:	f7ff fea1 	bl	800d7ec <lsm6dsl_read_reg>
 800daaa:	6178      	str	r0, [r7, #20]
  return ret;
 800daac:	697b      	ldr	r3, [r7, #20]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3718      	adds	r7, #24
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <lsm6dsl_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsl_drdy_pulsed_g_t val)
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b084      	sub	sp, #16
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
 800dabe:	460b      	mov	r3, r1
 800dac0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800dac2:	f107 0208 	add.w	r2, r7, #8
 800dac6:	2301      	movs	r3, #1
 800dac8:	210b      	movs	r1, #11
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7ff fe8e 	bl	800d7ec <lsm6dsl_read_reg>
 800dad0:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&drdy_pulse_cfg_g, 1);
  if(ret == 0){
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10f      	bne.n	800daf8 <lsm6dsl_data_ready_mode_set+0x42>
    drdy_pulse_cfg_g.drdy_pulsed = (uint8_t) val;
 800dad8:	78fb      	ldrb	r3, [r7, #3]
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	7a3b      	ldrb	r3, [r7, #8]
 800dae2:	f362 13c7 	bfi	r3, r2, #7, #1
 800dae6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800dae8:	f107 0208 	add.w	r2, r7, #8
 800daec:	2301      	movs	r3, #1
 800daee:	210b      	movs	r1, #11
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7ff fe93 	bl	800d81c <lsm6dsl_write_reg>
 800daf6:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&drdy_pulse_cfg_g, 1);
  }
  return ret;
 800daf8:	68fb      	ldr	r3, [r7, #12]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b084      	sub	sp, #16
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
 800db0a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800db0c:	2301      	movs	r3, #1
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	210f      	movs	r1, #15
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff fe6a 	bl	800d7ec <lsm6dsl_read_reg>
 800db18:	60f8      	str	r0, [r7, #12]
  return ret;
 800db1a:	68fb      	ldr	r3, [r7, #12]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800db30:	f107 0208 	add.w	r2, r7, #8
 800db34:	2301      	movs	r3, #1
 800db36:	2112      	movs	r1, #18
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7ff fe57 	bl	800d7ec <lsm6dsl_read_reg>
 800db3e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10f      	bne.n	800db66 <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 800db46:	78fb      	ldrb	r3, [r7, #3]
 800db48:	f003 0301 	and.w	r3, r3, #1
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	7a3b      	ldrb	r3, [r7, #8]
 800db50:	f362 0300 	bfi	r3, r2, #0, #1
 800db54:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800db56:	f107 0208 	add.w	r2, r7, #8
 800db5a:	2301      	movs	r3, #1
 800db5c:	2112      	movs	r1, #18
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff fe5c 	bl	800d81c <lsm6dsl_write_reg>
 800db64:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800db66:	68fb      	ldr	r3, [r7, #12]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800db7a:	f107 0208 	add.w	r2, r7, #8
 800db7e:	2301      	movs	r3, #1
 800db80:	2112      	movs	r1, #18
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f7ff fe32 	bl	800d7ec <lsm6dsl_read_reg>
 800db88:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800db8a:	7a3b      	ldrb	r3, [r7, #8]
 800db8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800db90:	b2db      	uxtb	r3, r3
 800db92:	461a      	mov	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	701a      	strb	r2, [r3, #0]

  return ret;
 800db98:	68fb      	ldr	r3, [r7, #12]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <lsm6dsl_xl_filter_analog_set>:
  * @param  val    Change the values of bw0_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b084      	sub	sp, #16
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
 800dbaa:	460b      	mov	r3, r1
 800dbac:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800dbae:	f107 0208 	add.w	r2, r7, #8
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	2110      	movs	r1, #16
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff fe18 	bl	800d7ec <lsm6dsl_read_reg>
 800dbbc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10f      	bne.n	800dbe4 <lsm6dsl_xl_filter_analog_set+0x42>
    ctrl1_xl.bw0_xl = (uint8_t) val;
 800dbc4:	78fb      	ldrb	r3, [r7, #3]
 800dbc6:	f003 0301 	and.w	r3, r3, #1
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	7a3b      	ldrb	r3, [r7, #8]
 800dbce:	f362 0300 	bfi	r3, r2, #0, #1
 800dbd2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800dbd4:	f107 0208 	add.w	r2, r7, #8
 800dbd8:	2301      	movs	r3, #1
 800dbda:	2110      	movs	r1, #16
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7ff fe1d 	bl	800d81c <lsm6dsl_write_reg>
 800dbe2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800dbfa:	f107 0208 	add.w	r2, r7, #8
 800dbfe:	2301      	movs	r3, #1
 800dc00:	2117      	movs	r1, #23
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff fdf2 	bl	800d7ec <lsm6dsl_read_reg>
 800dc08:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d120      	bne.n	800dc52 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
    ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
 800dc10:	78fb      	ldrb	r3, [r7, #3]
 800dc12:	091b      	lsrs	r3, r3, #4
 800dc14:	f003 0301 	and.w	r3, r3, #1
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	7a3b      	ldrb	r3, [r7, #8]
 800dc1c:	f362 03c3 	bfi	r3, r2, #3, #1
 800dc20:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800dc22:	78fb      	ldrb	r3, [r7, #3]
 800dc24:	f003 0303 	and.w	r3, r3, #3
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	7a3b      	ldrb	r3, [r7, #8]
 800dc2c:	f362 1346 	bfi	r3, r2, #5, #2
 800dc30:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800dc32:	7a3b      	ldrb	r3, [r7, #8]
 800dc34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc38:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800dc3a:	7a3b      	ldrb	r3, [r7, #8]
 800dc3c:	f36f 0382 	bfc	r3, #2, #1
 800dc40:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800dc42:	f107 0208 	add.w	r2, r7, #8
 800dc46:	2301      	movs	r3, #1
 800dc48:	2117      	movs	r1, #23
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff fde6 	bl	800d81c <lsm6dsl_write_reg>
 800dc50:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800dc52:	68fb      	ldr	r3, [r7, #12]
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <lsm6dsl_gy_band_pass_set>:
  * @param  val    gyroscope filtering chain configuration.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	460b      	mov	r3, r1
 800dc66:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800dc68:	f107 0208 	add.w	r2, r7, #8
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	2116      	movs	r1, #22
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff fdbb 	bl	800d7ec <lsm6dsl_read_reg>
 800dc76:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d157      	bne.n	800dd2e <lsm6dsl_gy_band_pass_set+0xd2>
    ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
 800dc7e:	78fb      	ldrb	r3, [r7, #3]
 800dc80:	091b      	lsrs	r3, r3, #4
 800dc82:	f003 0303 	and.w	r3, r3, #3
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	7a3b      	ldrb	r3, [r7, #8]
 800dc8a:	f362 1305 	bfi	r3, r2, #4, #2
 800dc8e:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
 800dc90:	78fb      	ldrb	r3, [r7, #3]
 800dc92:	09db      	lsrs	r3, r3, #7
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	f003 0301 	and.w	r3, r3, #1
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	7a3b      	ldrb	r3, [r7, #8]
 800dc9e:	f362 1386 	bfi	r3, r2, #6, #1
 800dca2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800dca4:	f107 0208 	add.w	r2, r7, #8
 800dca8:	2301      	movs	r3, #1
 800dcaa:	2116      	movs	r1, #22
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7ff fdb5 	bl	800d81c <lsm6dsl_write_reg>
 800dcb2:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d139      	bne.n	800dd2e <lsm6dsl_gy_band_pass_set+0xd2>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800dcba:	f107 020c 	add.w	r2, r7, #12
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	2115      	movs	r1, #21
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f7ff fd92 	bl	800d7ec <lsm6dsl_read_reg>
 800dcc8:	6178      	str	r0, [r7, #20]
      if(ret == 0){
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d12e      	bne.n	800dd2e <lsm6dsl_gy_band_pass_set+0xd2>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800dcd0:	78fb      	ldrb	r3, [r7, #3]
 800dcd2:	f003 0303 	and.w	r3, r3, #3
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	7b3b      	ldrb	r3, [r7, #12]
 800dcda:	f362 0301 	bfi	r3, r2, #0, #2
 800dcde:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800dce0:	f107 020c 	add.w	r2, r7, #12
 800dce4:	2301      	movs	r3, #1
 800dce6:	2115      	movs	r1, #21
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f7ff fd97 	bl	800d81c <lsm6dsl_write_reg>
 800dcee:	6178      	str	r0, [r7, #20]
        if(ret == 0){
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d11b      	bne.n	800dd2e <lsm6dsl_gy_band_pass_set+0xd2>
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 800dcf6:	f107 0210 	add.w	r2, r7, #16
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	2113      	movs	r1, #19
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7ff fd74 	bl	800d7ec <lsm6dsl_read_reg>
 800dd04:	6178      	str	r0, [r7, #20]
                                 (uint8_t*)&ctrl4_c, 1);
          if(ret == 0){
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d110      	bne.n	800dd2e <lsm6dsl_gy_band_pass_set+0xd2>
            ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
 800dd0c:	78fb      	ldrb	r3, [r7, #3]
 800dd0e:	08db      	lsrs	r3, r3, #3
 800dd10:	f003 0301 	and.w	r3, r3, #1
 800dd14:	b2da      	uxtb	r2, r3
 800dd16:	7c3b      	ldrb	r3, [r7, #16]
 800dd18:	f362 0341 	bfi	r3, r2, #1, #1
 800dd1c:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 800dd1e:	f107 0210 	add.w	r2, r7, #16
 800dd22:	2301      	movs	r3, #1
 800dd24:	2113      	movs	r1, #19
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff fd78 	bl	800d81c <lsm6dsl_write_reg>
 800dd2c:	6178      	str	r0, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800dd2e:	697b      	ldr	r3, [r7, #20]
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3718      	adds	r7, #24
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b08a      	sub	sp, #40	; 0x28
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800dd42:	f107 021c 	add.w	r2, r7, #28
 800dd46:	2301      	movs	r3, #1
 800dd48:	210d      	movs	r1, #13
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff fd4e 	bl	800d7ec <lsm6dsl_read_reg>
 800dd50:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 800dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d147      	bne.n	800dde8 <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800dd58:	783b      	ldrb	r3, [r7, #0]
 800dd5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	7f3b      	ldrb	r3, [r7, #28]
 800dd62:	f362 0300 	bfi	r3, r2, #0, #1
 800dd66:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800dd68:	783b      	ldrb	r3, [r7, #0]
 800dd6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dd6e:	b2da      	uxtb	r2, r3
 800dd70:	7f3b      	ldrb	r3, [r7, #28]
 800dd72:	f362 0341 	bfi	r3, r2, #1, #1
 800dd76:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800dd78:	783b      	ldrb	r3, [r7, #0]
 800dd7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	7f3b      	ldrb	r3, [r7, #28]
 800dd82:	f362 0382 	bfi	r3, r2, #2, #1
 800dd86:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800dd88:	783b      	ldrb	r3, [r7, #0]
 800dd8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dd8e:	b2da      	uxtb	r2, r3
 800dd90:	7f3b      	ldrb	r3, [r7, #28]
 800dd92:	f362 03c3 	bfi	r3, r2, #3, #1
 800dd96:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800dd98:	783b      	ldrb	r3, [r7, #0]
 800dd9a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	7f3b      	ldrb	r3, [r7, #28]
 800dda2:	f362 1304 	bfi	r3, r2, #4, #1
 800dda6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800dda8:	783b      	ldrb	r3, [r7, #0]
 800ddaa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ddae:	b2da      	uxtb	r2, r3
 800ddb0:	7f3b      	ldrb	r3, [r7, #28]
 800ddb2:	f362 1345 	bfi	r3, r2, #5, #1
 800ddb6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 800ddb8:	783b      	ldrb	r3, [r7, #0]
 800ddba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	7f3b      	ldrb	r3, [r7, #28]
 800ddc2:	f362 1386 	bfi	r3, r2, #6, #1
 800ddc6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 800ddc8:	783b      	ldrb	r3, [r7, #0]
 800ddca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	7f3b      	ldrb	r3, [r7, #28]
 800ddd2:	f362 13c7 	bfi	r3, r2, #7, #1
 800ddd6:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800ddd8:	f107 021c 	add.w	r2, r7, #28
 800dddc:	2301      	movs	r3, #1
 800ddde:	210d      	movs	r1, #13
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff fd1b 	bl	800d81c <lsm6dsl_write_reg>
 800dde6:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d107      	bne.n	800ddfe <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800ddee:	f107 0218 	add.w	r2, r7, #24
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	215e      	movs	r1, #94	; 0x5e
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7ff fcf8 	bl	800d7ec <lsm6dsl_read_reg>
 800ddfc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	2b00      	cmp	r3, #0
 800de02:	d107      	bne.n	800de14 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 800de04:	f107 0214 	add.w	r2, r7, #20
 800de08:	2301      	movs	r3, #1
 800de0a:	215f      	movs	r1, #95	; 0x5f
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7ff fced 	bl	800d7ec <lsm6dsl_read_reg>
 800de12:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de16:	2b00      	cmp	r3, #0
 800de18:	d147      	bne.n	800deaa <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 800de1a:	787b      	ldrb	r3, [r7, #1]
 800de1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800de20:	b2da      	uxtb	r2, r3
 800de22:	7e3b      	ldrb	r3, [r7, #24]
 800de24:	f362 0300 	bfi	r3, r2, #0, #1
 800de28:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 800de2a:	787b      	ldrb	r3, [r7, #1]
 800de2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800de30:	b2da      	uxtb	r2, r3
 800de32:	7e3b      	ldrb	r3, [r7, #24]
 800de34:	f362 0341 	bfi	r3, r2, #1, #1
 800de38:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 800de3a:	787b      	ldrb	r3, [r7, #1]
 800de3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800de40:	b2da      	uxtb	r2, r3
 800de42:	7e3b      	ldrb	r3, [r7, #24]
 800de44:	f362 0382 	bfi	r3, r2, #2, #1
 800de48:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 800de4a:	787b      	ldrb	r3, [r7, #1]
 800de4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800de50:	b2da      	uxtb	r2, r3
 800de52:	7e3b      	ldrb	r3, [r7, #24]
 800de54:	f362 03c3 	bfi	r3, r2, #3, #1
 800de58:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 800de5a:	787b      	ldrb	r3, [r7, #1]
 800de5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800de60:	b2da      	uxtb	r2, r3
 800de62:	7e3b      	ldrb	r3, [r7, #24]
 800de64:	f362 1304 	bfi	r3, r2, #4, #1
 800de68:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 800de6a:	787b      	ldrb	r3, [r7, #1]
 800de6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de70:	b2da      	uxtb	r2, r3
 800de72:	7e3b      	ldrb	r3, [r7, #24]
 800de74:	f362 1345 	bfi	r3, r2, #5, #1
 800de78:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 800de7a:	787b      	ldrb	r3, [r7, #1]
 800de7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800de80:	b2da      	uxtb	r2, r3
 800de82:	7e3b      	ldrb	r3, [r7, #24]
 800de84:	f362 1386 	bfi	r3, r2, #6, #1
 800de88:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 800de8a:	787b      	ldrb	r3, [r7, #1]
 800de8c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800de90:	b2da      	uxtb	r2, r3
 800de92:	7e3b      	ldrb	r3, [r7, #24]
 800de94:	f362 13c7 	bfi	r3, r2, #7, #1
 800de98:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800de9a:	f107 0218 	add.w	r2, r7, #24
 800de9e:	2301      	movs	r3, #1
 800dea0:	215e      	movs	r1, #94	; 0x5e
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f7ff fcba 	bl	800d81c <lsm6dsl_write_reg>
 800dea8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deac:	2b00      	cmp	r3, #0
 800deae:	d107      	bne.n	800dec0 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800deb0:	f107 0210 	add.w	r2, r7, #16
 800deb4:	2301      	movs	r3, #1
 800deb6:	2113      	movs	r1, #19
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7ff fc97 	bl	800d7ec <lsm6dsl_read_reg>
 800debe:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d10f      	bne.n	800dee6 <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 800dec6:	78bb      	ldrb	r3, [r7, #2]
 800dec8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800decc:	b2da      	uxtb	r2, r3
 800dece:	7c3b      	ldrb	r3, [r7, #16]
 800ded0:	f362 1304 	bfi	r3, r2, #4, #1
 800ded4:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800ded6:	f107 0210 	add.w	r2, r7, #16
 800deda:	2301      	movs	r3, #1
 800dedc:	2113      	movs	r1, #19
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7ff fc9c 	bl	800d81c <lsm6dsl_write_reg>
 800dee4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800dee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d107      	bne.n	800defc <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800deec:	f107 0220 	add.w	r2, r7, #32
 800def0:	2301      	movs	r3, #1
 800def2:	211a      	movs	r1, #26
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7ff fc79 	bl	800d7ec <lsm6dsl_read_reg>
 800defa:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	2b00      	cmp	r3, #0
 800df00:	d111      	bne.n	800df26 <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 800df02:	78bb      	ldrb	r3, [r7, #2]
 800df04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df0e:	f362 13c7 	bfi	r3, r2, #7, #1
 800df12:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800df16:	f107 0220 	add.w	r2, r7, #32
 800df1a:	2301      	movs	r3, #1
 800df1c:	211a      	movs	r1, #26
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7ff fc7c 	bl	800d81c <lsm6dsl_write_reg>
 800df24:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d158      	bne.n	800dfde <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800df2c:	f107 020c 	add.w	r2, r7, #12
 800df30:	2301      	movs	r3, #1
 800df32:	2158      	movs	r1, #88	; 0x58
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff fc59 	bl	800d7ec <lsm6dsl_read_reg>
 800df3a:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 800df3c:	787b      	ldrb	r3, [r7, #1]
 800df3e:	f003 0304 	and.w	r3, r3, #4
 800df42:	b2db      	uxtb	r3, r3
 800df44:	2b00      	cmp	r3, #0
 800df46:	d141      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 800df48:	787b      	ldrb	r3, [r7, #1]
 800df4a:	f003 0310 	and.w	r3, r3, #16
 800df4e:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 800df50:	2b00      	cmp	r3, #0
 800df52:	d13b      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 800df54:	787b      	ldrb	r3, [r7, #1]
 800df56:	f003 0320 	and.w	r3, r3, #32
 800df5a:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d135      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 800df60:	787b      	ldrb	r3, [r7, #1]
 800df62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df66:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d12f      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800df6c:	787b      	ldrb	r3, [r7, #1]
 800df6e:	f003 0308 	and.w	r3, r3, #8
 800df72:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 800df74:	2b00      	cmp	r3, #0
 800df76:	d129      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 800df78:	787b      	ldrb	r3, [r7, #1]
 800df7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800df7e:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 800df80:	2b00      	cmp	r3, #0
 800df82:	d123      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 800df84:	7d3b      	ldrb	r3, [r7, #20]
 800df86:	f003 0304 	and.w	r3, r3, #4
 800df8a:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d11d      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 800df90:	7d3b      	ldrb	r3, [r7, #20]
 800df92:	f003 0310 	and.w	r3, r3, #16
 800df96:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d117      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800df9c:	7d3b      	ldrb	r3, [r7, #20]
 800df9e:	f003 0320 	and.w	r3, r3, #32
 800dfa2:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d111      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800dfa8:	7d3b      	ldrb	r3, [r7, #20]
 800dfaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfae:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10b      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 800dfb4:	7d3b      	ldrb	r3, [r7, #20]
 800dfb6:	f003 0308 	and.w	r3, r3, #8
 800dfba:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d105      	bne.n	800dfcc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 800dfc0:	7d3b      	ldrb	r3, [r7, #20]
 800dfc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dfc6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d004      	beq.n	800dfd6 <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800dfcc:	7b3b      	ldrb	r3, [r7, #12]
 800dfce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfd2:	733b      	strb	r3, [r7, #12]
 800dfd4:	e003      	b.n	800dfde <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 800dfd6:	7b3b      	ldrb	r3, [r7, #12]
 800dfd8:	f36f 13c7 	bfc	r3, #7, #1
 800dfdc:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 800dfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d107      	bne.n	800dff4 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800dfe4:	f107 020c 	add.w	r2, r7, #12
 800dfe8:	2301      	movs	r3, #1
 800dfea:	2158      	movs	r1, #88	; 0x58
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7ff fc15 	bl	800d81c <lsm6dsl_write_reg>
 800dff2:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3728      	adds	r7, #40	; 0x28
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b088      	sub	sp, #32
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
 800e006:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800e008:	f107 0214 	add.w	r2, r7, #20
 800e00c:	2301      	movs	r3, #1
 800e00e:	210d      	movs	r1, #13
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7ff fbeb 	bl	800d7ec <lsm6dsl_read_reg>
 800e016:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f040 80c0 	bne.w	800e1a0 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 800e020:	7d3b      	ldrb	r3, [r7, #20]
 800e022:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e026:	b2d9      	uxtb	r1, r3
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	7813      	ldrb	r3, [r2, #0]
 800e02c:	f361 0300 	bfi	r3, r1, #0, #1
 800e030:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 800e032:	7d3b      	ldrb	r3, [r7, #20]
 800e034:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e038:	b2d9      	uxtb	r1, r3
 800e03a:	683a      	ldr	r2, [r7, #0]
 800e03c:	7813      	ldrb	r3, [r2, #0]
 800e03e:	f361 0341 	bfi	r3, r1, #1, #1
 800e042:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 800e044:	7d3b      	ldrb	r3, [r7, #20]
 800e046:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e04a:	b2d9      	uxtb	r1, r3
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	7813      	ldrb	r3, [r2, #0]
 800e050:	f361 0382 	bfi	r3, r1, #2, #1
 800e054:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 800e056:	7d3b      	ldrb	r3, [r7, #20]
 800e058:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e05c:	b2d9      	uxtb	r1, r3
 800e05e:	683a      	ldr	r2, [r7, #0]
 800e060:	7813      	ldrb	r3, [r2, #0]
 800e062:	f361 03c3 	bfi	r3, r1, #3, #1
 800e066:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800e068:	7d3b      	ldrb	r3, [r7, #20]
 800e06a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e06e:	b2d9      	uxtb	r1, r3
 800e070:	683a      	ldr	r2, [r7, #0]
 800e072:	7813      	ldrb	r3, [r2, #0]
 800e074:	f361 1304 	bfi	r3, r1, #4, #1
 800e078:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800e07a:	7d3b      	ldrb	r3, [r7, #20]
 800e07c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e080:	b2d9      	uxtb	r1, r3
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	7813      	ldrb	r3, [r2, #0]
 800e086:	f361 1345 	bfi	r3, r1, #5, #1
 800e08a:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800e08c:	7d3b      	ldrb	r3, [r7, #20]
 800e08e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e092:	b2d9      	uxtb	r1, r3
 800e094:	683a      	ldr	r2, [r7, #0]
 800e096:	7813      	ldrb	r3, [r2, #0]
 800e098:	f361 1386 	bfi	r3, r1, #6, #1
 800e09c:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 800e09e:	7d3b      	ldrb	r3, [r7, #20]
 800e0a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e0a4:	b2d9      	uxtb	r1, r3
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	7813      	ldrb	r3, [r2, #0]
 800e0aa:	f361 13c7 	bfi	r3, r1, #7, #1
 800e0ae:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800e0b0:	f107 0210 	add.w	r2, r7, #16
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	215e      	movs	r1, #94	; 0x5e
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7ff fb97 	bl	800d7ec <lsm6dsl_read_reg>
 800e0be:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d16c      	bne.n	800e1a0 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 800e0c6:	7c3b      	ldrb	r3, [r7, #16]
 800e0c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e0cc:	b2d9      	uxtb	r1, r3
 800e0ce:	683a      	ldr	r2, [r7, #0]
 800e0d0:	7853      	ldrb	r3, [r2, #1]
 800e0d2:	f361 0300 	bfi	r3, r1, #0, #1
 800e0d6:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 800e0d8:	7c3b      	ldrb	r3, [r7, #16]
 800e0da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e0de:	b2d9      	uxtb	r1, r3
 800e0e0:	683a      	ldr	r2, [r7, #0]
 800e0e2:	7853      	ldrb	r3, [r2, #1]
 800e0e4:	f361 0341 	bfi	r3, r1, #1, #1
 800e0e8:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 800e0ea:	7c3b      	ldrb	r3, [r7, #16]
 800e0ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e0f0:	b2d9      	uxtb	r1, r3
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	7853      	ldrb	r3, [r2, #1]
 800e0f6:	f361 0382 	bfi	r3, r1, #2, #1
 800e0fa:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 800e0fc:	7c3b      	ldrb	r3, [r7, #16]
 800e0fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e102:	b2d9      	uxtb	r1, r3
 800e104:	683a      	ldr	r2, [r7, #0]
 800e106:	7853      	ldrb	r3, [r2, #1]
 800e108:	f361 03c3 	bfi	r3, r1, #3, #1
 800e10c:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 800e10e:	7c3b      	ldrb	r3, [r7, #16]
 800e110:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e114:	b2d9      	uxtb	r1, r3
 800e116:	683a      	ldr	r2, [r7, #0]
 800e118:	7853      	ldrb	r3, [r2, #1]
 800e11a:	f361 1304 	bfi	r3, r1, #4, #1
 800e11e:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 800e120:	7c3b      	ldrb	r3, [r7, #16]
 800e122:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e126:	b2d9      	uxtb	r1, r3
 800e128:	683a      	ldr	r2, [r7, #0]
 800e12a:	7853      	ldrb	r3, [r2, #1]
 800e12c:	f361 1345 	bfi	r3, r1, #5, #1
 800e130:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 800e132:	7c3b      	ldrb	r3, [r7, #16]
 800e134:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e138:	b2d9      	uxtb	r1, r3
 800e13a:	683a      	ldr	r2, [r7, #0]
 800e13c:	7853      	ldrb	r3, [r2, #1]
 800e13e:	f361 1386 	bfi	r3, r1, #6, #1
 800e142:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 800e144:	7c3b      	ldrb	r3, [r7, #16]
 800e146:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e14a:	b2d9      	uxtb	r1, r3
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	7853      	ldrb	r3, [r2, #1]
 800e150:	f361 13c7 	bfi	r3, r1, #7, #1
 800e154:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800e156:	f107 020c 	add.w	r2, r7, #12
 800e15a:	2301      	movs	r3, #1
 800e15c:	2113      	movs	r1, #19
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7ff fb44 	bl	800d7ec <lsm6dsl_read_reg>
 800e164:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d119      	bne.n	800e1a0 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800e16c:	7b3b      	ldrb	r3, [r7, #12]
 800e16e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e172:	b2d9      	uxtb	r1, r3
 800e174:	683a      	ldr	r2, [r7, #0]
 800e176:	7893      	ldrb	r3, [r2, #2]
 800e178:	f361 0300 	bfi	r3, r1, #0, #1
 800e17c:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800e17e:	f107 0218 	add.w	r2, r7, #24
 800e182:	2301      	movs	r3, #1
 800e184:	211a      	movs	r1, #26
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7ff fb30 	bl	800d7ec <lsm6dsl_read_reg>
 800e18c:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 800e18e:	7e3b      	ldrb	r3, [r7, #24]
 800e190:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e194:	b2d9      	uxtb	r1, r3
 800e196:	683a      	ldr	r2, [r7, #0]
 800e198:	7893      	ldrb	r3, [r2, #2]
 800e19a:	f361 0300 	bfi	r3, r1, #0, #1
 800e19e:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 800e1a0:	69fb      	ldr	r3, [r7, #28]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3720      	adds	r7, #32
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <lsm6dsl_pin_polarity_set>:
  * @param  val    Change the values of h_lactive in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_polarity_set(stmdev_ctx_t *ctx, lsm6dsl_h_lactive_t val)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b084      	sub	sp, #16
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800e1b6:	f107 0208 	add.w	r2, r7, #8
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	2112      	movs	r1, #18
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff fb14 	bl	800d7ec <lsm6dsl_read_reg>
 800e1c4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d10f      	bne.n	800e1ec <lsm6dsl_pin_polarity_set+0x42>
    ctrl3_c.h_lactive = (uint8_t) val;
 800e1cc:	78fb      	ldrb	r3, [r7, #3]
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	7a3b      	ldrb	r3, [r7, #8]
 800e1d6:	f362 1345 	bfi	r3, r2, #5, #1
 800e1da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800e1dc:	f107 0208 	add.w	r2, r7, #8
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	2112      	movs	r1, #18
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7ff fb19 	bl	800d81c <lsm6dsl_write_reg>
 800e1ea:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b086      	sub	sp, #24
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
 800e1fe:	460b      	mov	r3, r1
 800e200:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 800e202:	f107 020c 	add.w	r2, r7, #12
 800e206:	2301      	movs	r3, #1
 800e208:	2107      	movs	r1, #7
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7ff faee 	bl	800d7ec <lsm6dsl_read_reg>
 800e210:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d11f      	bne.n	800e258 <lsm6dsl_fifo_watermark_set+0x62>
    fifo_ctrl1.fth = (uint8_t) (0x00FFU & val);
 800e218:	887b      	ldrh	r3, [r7, #2]
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t) (( 0x0700U & val ) >> 8);
 800e21e:	887b      	ldrh	r3, [r7, #2]
 800e220:	0a1b      	lsrs	r3, r3, #8
 800e222:	b29b      	uxth	r3, r3
 800e224:	f003 0307 	and.w	r3, r3, #7
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	7b3b      	ldrb	r3, [r7, #12]
 800e22c:	f362 0302 	bfi	r3, r2, #0, #3
 800e230:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 800e232:	f107 0210 	add.w	r2, r7, #16
 800e236:	2301      	movs	r3, #1
 800e238:	2106      	movs	r1, #6
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f7ff faee 	bl	800d81c <lsm6dsl_write_reg>
 800e240:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d107      	bne.n	800e258 <lsm6dsl_fifo_watermark_set+0x62>
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 800e248:	f107 020c 	add.w	r2, r7, #12
 800e24c:	2301      	movs	r3, #1
 800e24e:	2107      	movs	r1, #7
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f7ff fae3 	bl	800d81c <lsm6dsl_write_reg>
 800e256:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
    }
  }
  return ret;
 800e258:	697b      	ldr	r3, [r7, #20]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3718      	adds	r7, #24
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <lsm6dsl_fifo_watermark_get>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b086      	sub	sp, #24
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 800e26c:	f107 0210 	add.w	r2, r7, #16
 800e270:	2301      	movs	r3, #1
 800e272:	2106      	movs	r1, #6
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f7ff fab9 	bl	800d7ec <lsm6dsl_read_reg>
 800e27a:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d107      	bne.n	800e292 <lsm6dsl_fifo_watermark_get+0x30>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 800e282:	f107 020c 	add.w	r2, r7, #12
 800e286:	2301      	movs	r3, #1
 800e288:	2107      	movs	r1, #7
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f7ff faae 	bl	800d7ec <lsm6dsl_read_reg>
 800e290:	6178      	str	r0, [r7, #20]
  }
  *val = ((uint16_t)fifo_ctrl2.fth << 8) + (uint16_t)fifo_ctrl1.fth;
 800e292:	7b3b      	ldrb	r3, [r7, #12]
 800e294:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	021b      	lsls	r3, r3, #8
 800e29e:	b29a      	uxth	r2, r3
 800e2a0:	7c3b      	ldrb	r3, [r7, #16]
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	4413      	add	r3, r2
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	801a      	strh	r2, [r3, #0]

  return ret;
 800e2ac:	697b      	ldr	r3, [r7, #20]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3718      	adds	r7, #24
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <lsm6dsl_fifo_data_level_get>:
  *                BDU bit.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b086      	sub	sp, #24
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_status1_t fifo_status1;
  lsm6dsl_fifo_status2_t fifo_status2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS1,
 800e2c0:	f107 0210 	add.w	r2, r7, #16
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	213a      	movs	r1, #58	; 0x3a
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7ff fa8f 	bl	800d7ec <lsm6dsl_read_reg>
 800e2ce:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&fifo_status1, 1);
  if(ret == 0){
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d114      	bne.n	800e300 <lsm6dsl_fifo_data_level_get+0x4a>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS2,
 800e2d6:	f107 020c 	add.w	r2, r7, #12
 800e2da:	2301      	movs	r3, #1
 800e2dc:	213b      	movs	r1, #59	; 0x3b
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fa84 	bl	800d7ec <lsm6dsl_read_reg>
 800e2e4:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_status2, 1);
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 800e2e6:	7b3b      	ldrb	r3, [r7, #12]
 800e2e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	021b      	lsls	r3, r3, #8
 800e2f2:	b29a      	uxth	r2, r3
             (uint16_t) fifo_status1.diff_fifo;
 800e2f4:	7c3b      	ldrb	r3, [r7, #16]
 800e2f6:	b29b      	uxth	r3, r3
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 800e2f8:	4413      	add	r3, r2
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800e300:	697b      	ldr	r3, [r7, #20]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3718      	adds	r7, #24
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b084      	sub	sp, #16
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	460b      	mov	r3, r1
 800e314:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800e316:	f107 0208 	add.w	r2, r7, #8
 800e31a:	2301      	movs	r3, #1
 800e31c:	2108      	movs	r1, #8
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7ff fa64 	bl	800d7ec <lsm6dsl_read_reg>
 800e324:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10f      	bne.n	800e34c <lsm6dsl_fifo_xl_batch_set+0x42>
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 800e32c:	78fb      	ldrb	r3, [r7, #3]
 800e32e:	f003 0307 	and.w	r3, r3, #7
 800e332:	b2da      	uxtb	r2, r3
 800e334:	7a3b      	ldrb	r3, [r7, #8]
 800e336:	f362 0302 	bfi	r3, r2, #0, #3
 800e33a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 800e33c:	f107 0208 	add.w	r2, r7, #8
 800e340:	2301      	movs	r3, #1
 800e342:	2108      	movs	r1, #8
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7ff fa69 	bl	800d81c <lsm6dsl_write_reg>
 800e34a:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 800e34c:	68fb      	ldr	r3, [r7, #12]
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
	...

0800e358 <lsm6dsl_fifo_xl_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t *val)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800e362:	f107 0208 	add.w	r2, r7, #8
 800e366:	2301      	movs	r3, #1
 800e368:	2108      	movs	r1, #8
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff fa3e 	bl	800d7ec <lsm6dsl_read_reg>
 800e370:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_xl) {
 800e372:	7a3b      	ldrb	r3, [r7, #8]
 800e374:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	2b07      	cmp	r3, #7
 800e37c:	d832      	bhi.n	800e3e4 <lsm6dsl_fifo_xl_batch_get+0x8c>
 800e37e:	a201      	add	r2, pc, #4	; (adr r2, 800e384 <lsm6dsl_fifo_xl_batch_get+0x2c>)
 800e380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e384:	0800e3a5 	.word	0x0800e3a5
 800e388:	0800e3ad 	.word	0x0800e3ad
 800e38c:	0800e3b5 	.word	0x0800e3b5
 800e390:	0800e3bd 	.word	0x0800e3bd
 800e394:	0800e3c5 	.word	0x0800e3c5
 800e398:	0800e3cd 	.word	0x0800e3cd
 800e39c:	0800e3d5 	.word	0x0800e3d5
 800e3a0:	0800e3dd 	.word	0x0800e3dd
    case LSM6DSL_FIFO_XL_DISABLE:
      *val = LSM6DSL_FIFO_XL_DISABLE;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	701a      	strb	r2, [r3, #0]
      break;
 800e3aa:	e01f      	b.n	800e3ec <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_NO_DEC:
      *val = LSM6DSL_FIFO_XL_NO_DEC;
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	701a      	strb	r2, [r3, #0]
      break;
 800e3b2:	e01b      	b.n	800e3ec <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_2:
      *val = LSM6DSL_FIFO_XL_DEC_2;
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	2202      	movs	r2, #2
 800e3b8:	701a      	strb	r2, [r3, #0]
      break;
 800e3ba:	e017      	b.n	800e3ec <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_3:
      *val = LSM6DSL_FIFO_XL_DEC_3;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2203      	movs	r2, #3
 800e3c0:	701a      	strb	r2, [r3, #0]
      break;
 800e3c2:	e013      	b.n	800e3ec <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_4:
      *val = LSM6DSL_FIFO_XL_DEC_4;
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	2204      	movs	r2, #4
 800e3c8:	701a      	strb	r2, [r3, #0]
      break;
 800e3ca:	e00f      	b.n	800e3ec <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_8:
      *val = LSM6DSL_FIFO_XL_DEC_8;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	2205      	movs	r2, #5
 800e3d0:	701a      	strb	r2, [r3, #0]
      break;
 800e3d2:	e00b      	b.n	800e3ec <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_16:
      *val = LSM6DSL_FIFO_XL_DEC_16;
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	2206      	movs	r2, #6
 800e3d8:	701a      	strb	r2, [r3, #0]
      break;
 800e3da:	e007      	b.n	800e3ec <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_32:
      *val = LSM6DSL_FIFO_XL_DEC_32;
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	2207      	movs	r2, #7
 800e3e0:	701a      	strb	r2, [r3, #0]
      break;
 800e3e2:	e003      	b.n	800e3ec <lsm6dsl_fifo_xl_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_XL_DEC_ND;
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	2208      	movs	r2, #8
 800e3e8:	701a      	strb	r2, [r3, #0]
      break;
 800e3ea:	bf00      	nop
  }

  return ret;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop

0800e3f8 <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	460b      	mov	r3, r1
 800e402:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800e404:	f107 0208 	add.w	r2, r7, #8
 800e408:	2301      	movs	r3, #1
 800e40a:	2108      	movs	r1, #8
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7ff f9ed 	bl	800d7ec <lsm6dsl_read_reg>
 800e412:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10f      	bne.n	800e43a <lsm6dsl_fifo_gy_batch_set+0x42>
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 800e41a:	78fb      	ldrb	r3, [r7, #3]
 800e41c:	f003 0307 	and.w	r3, r3, #7
 800e420:	b2da      	uxtb	r2, r3
 800e422:	7a3b      	ldrb	r3, [r7, #8]
 800e424:	f362 03c5 	bfi	r3, r2, #3, #3
 800e428:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800e42a:	f107 0208 	add.w	r2, r7, #8
 800e42e:	2301      	movs	r3, #1
 800e430:	2108      	movs	r1, #8
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7ff f9f2 	bl	800d81c <lsm6dsl_write_reg>
 800e438:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800e43a:	68fb      	ldr	r3, [r7, #12]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <lsm6dsl_fifo_gy_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t *val)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800e44e:	f107 0208 	add.w	r2, r7, #8
 800e452:	2301      	movs	r3, #1
 800e454:	2108      	movs	r1, #8
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7ff f9c8 	bl	800d7ec <lsm6dsl_read_reg>
 800e45c:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_gyro) {
 800e45e:	7a3b      	ldrb	r3, [r7, #8]
 800e460:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800e464:	b2db      	uxtb	r3, r3
 800e466:	2b07      	cmp	r3, #7
 800e468:	d832      	bhi.n	800e4d0 <lsm6dsl_fifo_gy_batch_get+0x8c>
 800e46a:	a201      	add	r2, pc, #4	; (adr r2, 800e470 <lsm6dsl_fifo_gy_batch_get+0x2c>)
 800e46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e470:	0800e491 	.word	0x0800e491
 800e474:	0800e499 	.word	0x0800e499
 800e478:	0800e4a1 	.word	0x0800e4a1
 800e47c:	0800e4a9 	.word	0x0800e4a9
 800e480:	0800e4b1 	.word	0x0800e4b1
 800e484:	0800e4b9 	.word	0x0800e4b9
 800e488:	0800e4c1 	.word	0x0800e4c1
 800e48c:	0800e4c9 	.word	0x0800e4c9
    case LSM6DSL_FIFO_GY_DISABLE:
      *val = LSM6DSL_FIFO_GY_DISABLE;
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	2200      	movs	r2, #0
 800e494:	701a      	strb	r2, [r3, #0]
      break;
 800e496:	e01f      	b.n	800e4d8 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_NO_DEC:
      *val = LSM6DSL_FIFO_GY_NO_DEC;
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	2201      	movs	r2, #1
 800e49c:	701a      	strb	r2, [r3, #0]
      break;
 800e49e:	e01b      	b.n	800e4d8 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_2:
      *val = LSM6DSL_FIFO_GY_DEC_2;
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	701a      	strb	r2, [r3, #0]
      break;
 800e4a6:	e017      	b.n	800e4d8 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_3:
      *val = LSM6DSL_FIFO_GY_DEC_3;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2203      	movs	r2, #3
 800e4ac:	701a      	strb	r2, [r3, #0]
      break;
 800e4ae:	e013      	b.n	800e4d8 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_4:
      *val = LSM6DSL_FIFO_GY_DEC_4;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2204      	movs	r2, #4
 800e4b4:	701a      	strb	r2, [r3, #0]
      break;
 800e4b6:	e00f      	b.n	800e4d8 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_8:
      *val = LSM6DSL_FIFO_GY_DEC_8;
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	2205      	movs	r2, #5
 800e4bc:	701a      	strb	r2, [r3, #0]
      break;
 800e4be:	e00b      	b.n	800e4d8 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_16:
      *val = LSM6DSL_FIFO_GY_DEC_16;
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	2206      	movs	r2, #6
 800e4c4:	701a      	strb	r2, [r3, #0]
      break;
 800e4c6:	e007      	b.n	800e4d8 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_32:
      *val = LSM6DSL_FIFO_GY_DEC_32;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	2207      	movs	r2, #7
 800e4cc:	701a      	strb	r2, [r3, #0]
      break;
 800e4ce:	e003      	b.n	800e4d8 <lsm6dsl_fifo_gy_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_GY_DEC_ND;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	2208      	movs	r2, #8
 800e4d4:	701a      	strb	r2, [r3, #0]
      break;
 800e4d6:	bf00      	nop
  }

  return ret;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop

0800e4e4 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800e4f0:	f107 0208 	add.w	r2, r7, #8
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	210a      	movs	r1, #10
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff f977 	bl	800d7ec <lsm6dsl_read_reg>
 800e4fe:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d10f      	bne.n	800e526 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800e506:	78fb      	ldrb	r3, [r7, #3]
 800e508:	f003 0307 	and.w	r3, r3, #7
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	7a3b      	ldrb	r3, [r7, #8]
 800e510:	f362 0302 	bfi	r3, r2, #0, #3
 800e514:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800e516:	f107 0208 	add.w	r2, r7, #8
 800e51a:	2301      	movs	r3, #1
 800e51c:	210a      	movs	r1, #10
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7ff f97c 	bl	800d81c <lsm6dsl_write_reg>
 800e524:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800e526:	68fb      	ldr	r3, [r7, #12]
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <lsm6dsl_fifo_mode_get>:
  * @param  val    Get the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_get(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t *val)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800e53a:	f107 0208 	add.w	r2, r7, #8
 800e53e:	2301      	movs	r3, #1
 800e540:	210a      	movs	r1, #10
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7ff f952 	bl	800d7ec <lsm6dsl_read_reg>
 800e548:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.fifo_mode) {
 800e54a:	7a3b      	ldrb	r3, [r7, #8]
 800e54c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800e550:	b2db      	uxtb	r3, r3
 800e552:	2b06      	cmp	r3, #6
 800e554:	d824      	bhi.n	800e5a0 <lsm6dsl_fifo_mode_get+0x70>
 800e556:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <lsm6dsl_fifo_mode_get+0x2c>)
 800e558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55c:	0800e579 	.word	0x0800e579
 800e560:	0800e581 	.word	0x0800e581
 800e564:	0800e5a1 	.word	0x0800e5a1
 800e568:	0800e589 	.word	0x0800e589
 800e56c:	0800e591 	.word	0x0800e591
 800e570:	0800e5a1 	.word	0x0800e5a1
 800e574:	0800e599 	.word	0x0800e599
    case LSM6DSL_BYPASS_MODE:
      *val = LSM6DSL_BYPASS_MODE;
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	2200      	movs	r2, #0
 800e57c:	701a      	strb	r2, [r3, #0]
      break;
 800e57e:	e013      	b.n	800e5a8 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_FIFO_MODE:
      *val = LSM6DSL_FIFO_MODE;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	2201      	movs	r2, #1
 800e584:	701a      	strb	r2, [r3, #0]
      break;
 800e586:	e00f      	b.n	800e5a8 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_TO_FIFO_MODE:
      *val = LSM6DSL_STREAM_TO_FIFO_MODE;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	2203      	movs	r2, #3
 800e58c:	701a      	strb	r2, [r3, #0]
      break;
 800e58e:	e00b      	b.n	800e5a8 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
      *val = LSM6DSL_BYPASS_TO_STREAM_MODE;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2204      	movs	r2, #4
 800e594:	701a      	strb	r2, [r3, #0]
      break;
 800e596:	e007      	b.n	800e5a8 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_MODE:
      *val = LSM6DSL_STREAM_MODE;
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2206      	movs	r2, #6
 800e59c:	701a      	strb	r2, [r3, #0]
      break;
 800e59e:	e003      	b.n	800e5a8 <lsm6dsl_fifo_mode_get+0x78>
    default:
      *val = LSM6DSL_FIFO_MODE_ND;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	2208      	movs	r2, #8
 800e5a4:	701a      	strb	r2, [r3, #0]
      break;
 800e5a6:	bf00      	nop
  }

  return ret;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop

0800e5b4 <lsm6dsl_fifo_data_rate_set>:
  * @param  val    Change the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t val)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	460b      	mov	r3, r1
 800e5be:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800e5c0:	f107 0208 	add.w	r2, r7, #8
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	210a      	movs	r1, #10
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7ff f90f 	bl	800d7ec <lsm6dsl_read_reg>
 800e5ce:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10f      	bne.n	800e5f6 <lsm6dsl_fifo_data_rate_set+0x42>
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 800e5d6:	78fb      	ldrb	r3, [r7, #3]
 800e5d8:	f003 030f 	and.w	r3, r3, #15
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	7a3b      	ldrb	r3, [r7, #8]
 800e5e0:	f362 03c6 	bfi	r3, r2, #3, #4
 800e5e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800e5e6:	f107 0208 	add.w	r2, r7, #8
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	210a      	movs	r1, #10
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff f914 	bl	800d81c <lsm6dsl_write_reg>
 800e5f4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3710      	adds	r7, #16
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <lsm6dsl_fifo_data_rate_get>:
  * @param  val    Get the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t *val)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800e60a:	f107 0208 	add.w	r2, r7, #8
 800e60e:	2301      	movs	r3, #1
 800e610:	210a      	movs	r1, #10
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7ff f8ea 	bl	800d7ec <lsm6dsl_read_reg>
 800e618:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.odr_fifo) {
 800e61a:	7a3b      	ldrb	r3, [r7, #8]
 800e61c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800e620:	b2db      	uxtb	r3, r3
 800e622:	2b0a      	cmp	r3, #10
 800e624:	d844      	bhi.n	800e6b0 <lsm6dsl_fifo_data_rate_get+0xb0>
 800e626:	a201      	add	r2, pc, #4	; (adr r2, 800e62c <lsm6dsl_fifo_data_rate_get+0x2c>)
 800e628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e62c:	0800e659 	.word	0x0800e659
 800e630:	0800e661 	.word	0x0800e661
 800e634:	0800e669 	.word	0x0800e669
 800e638:	0800e671 	.word	0x0800e671
 800e63c:	0800e679 	.word	0x0800e679
 800e640:	0800e681 	.word	0x0800e681
 800e644:	0800e689 	.word	0x0800e689
 800e648:	0800e691 	.word	0x0800e691
 800e64c:	0800e699 	.word	0x0800e699
 800e650:	0800e6a1 	.word	0x0800e6a1
 800e654:	0800e6a9 	.word	0x0800e6a9
    case LSM6DSL_FIFO_DISABLE:
      *val = LSM6DSL_FIFO_DISABLE;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2200      	movs	r2, #0
 800e65c:	701a      	strb	r2, [r3, #0]
      break;
 800e65e:	e02b      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_12Hz5:
      *val = LSM6DSL_FIFO_12Hz5;
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	2201      	movs	r2, #1
 800e664:	701a      	strb	r2, [r3, #0]
      break;
 800e666:	e027      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_26Hz:
      *val = LSM6DSL_FIFO_26Hz;
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2202      	movs	r2, #2
 800e66c:	701a      	strb	r2, [r3, #0]
      break;
 800e66e:	e023      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_52Hz:
      *val = LSM6DSL_FIFO_52Hz;
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	2203      	movs	r2, #3
 800e674:	701a      	strb	r2, [r3, #0]
      break;
 800e676:	e01f      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_104Hz:
      *val = LSM6DSL_FIFO_104Hz;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	2204      	movs	r2, #4
 800e67c:	701a      	strb	r2, [r3, #0]
      break;
 800e67e:	e01b      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_208Hz:
      *val = LSM6DSL_FIFO_208Hz;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	2205      	movs	r2, #5
 800e684:	701a      	strb	r2, [r3, #0]
      break;
 800e686:	e017      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_416Hz:
      *val = LSM6DSL_FIFO_416Hz;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2206      	movs	r2, #6
 800e68c:	701a      	strb	r2, [r3, #0]
      break;
 800e68e:	e013      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_833Hz:
      *val = LSM6DSL_FIFO_833Hz;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	2207      	movs	r2, #7
 800e694:	701a      	strb	r2, [r3, #0]
      break;
 800e696:	e00f      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_1k66Hz:
      *val = LSM6DSL_FIFO_1k66Hz;
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	2208      	movs	r2, #8
 800e69c:	701a      	strb	r2, [r3, #0]
      break;
 800e69e:	e00b      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_3k33Hz:
      *val = LSM6DSL_FIFO_3k33Hz;
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2209      	movs	r2, #9
 800e6a4:	701a      	strb	r2, [r3, #0]
      break;
 800e6a6:	e007      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_6k66Hz:
      *val = LSM6DSL_FIFO_6k66Hz;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	220a      	movs	r2, #10
 800e6ac:	701a      	strb	r2, [r3, #0]
      break;
 800e6ae:	e003      	b.n	800e6b8 <lsm6dsl_fifo_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_FIFO_RATE_ND;
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	220b      	movs	r2, #11
 800e6b4:	701a      	strb	r2, [r3, #0]
      break;
 800e6b6:	bf00      	nop
  }

  return ret;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3710      	adds	r7, #16
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop

0800e6c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uwTickPrio = TICK_INT_PRIORITY;
 800e6c8:	4b10      	ldr	r3, [pc, #64]	; (800e70c <main+0x48>)
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e6ce:	f7f2 fbf3 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e6d2:	f000 f81f 	bl	800e714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e6d6:	f7fe fa5d 	bl	800cb94 <MX_GPIO_Init>
  MX_DMA_Init();
 800e6da:	f7fd ffdd 	bl	800c698 <MX_DMA_Init>
  MX_CRC_Init();
 800e6de:	f7fd ffa5 	bl	800c62c <MX_CRC_Init>
  MX_RTC_Init();
 800e6e2:	f000 f8c5 	bl	800e870 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800e6e6:	f000 fdd9 	bl	800f29c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800e6ea:	f000 fd05 	bl	800f0f8 <MX_TIM3_Init>
  MX_I2C1_Init();
 800e6ee:	f7fe fb7b 	bl	800cde8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800e6f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e6f6:	4806      	ldr	r0, [pc, #24]	; (800e710 <main+0x4c>)
 800e6f8:	f7f7 fa0e 	bl	8005b18 <HAL_RTC_DeactivateAlarm>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800e6fc:	4804      	ldr	r0, [pc, #16]	; (800e710 <main+0x4c>)
 800e6fe:	f7f7 fc5d 	bl	8005fbc <HAL_RTCEx_DeactivateWakeUpTimer>
#endif

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800e702:	f7fe f9b5 	bl	800ca70 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800e706:	f7fa fafd 	bl	8008d04 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800e70a:	e7fe      	b.n	800e70a <main+0x46>
 800e70c:	20000080 	.word	0x20000080
 800e710:	20001164 	.word	0x20001164

0800e714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b09a      	sub	sp, #104	; 0x68
 800e718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e71a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e71e:	2230      	movs	r2, #48	; 0x30
 800e720:	2100      	movs	r1, #0
 800e722:	4618      	mov	r0, r3
 800e724:	f000 ff05 	bl	800f532 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e72c:	2200      	movs	r2, #0
 800e72e:	601a      	str	r2, [r3, #0]
 800e730:	605a      	str	r2, [r3, #4]
 800e732:	609a      	str	r2, [r3, #8]
 800e734:	60da      	str	r2, [r3, #12]
 800e736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e738:	f107 030c 	add.w	r3, r7, #12
 800e73c:	2200      	movs	r2, #0
 800e73e:	601a      	str	r2, [r3, #0]
 800e740:	605a      	str	r2, [r3, #4]
 800e742:	609a      	str	r2, [r3, #8]
 800e744:	60da      	str	r2, [r3, #12]
 800e746:	611a      	str	r2, [r3, #16]
 800e748:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e74a:	2300      	movs	r3, #0
 800e74c:	60bb      	str	r3, [r7, #8]
 800e74e:	4b32      	ldr	r3, [pc, #200]	; (800e818 <SystemClock_Config+0x104>)
 800e750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e752:	4a31      	ldr	r2, [pc, #196]	; (800e818 <SystemClock_Config+0x104>)
 800e754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e758:	6413      	str	r3, [r2, #64]	; 0x40
 800e75a:	4b2f      	ldr	r3, [pc, #188]	; (800e818 <SystemClock_Config+0x104>)
 800e75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e75e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e762:	60bb      	str	r3, [r7, #8]
 800e764:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e766:	2300      	movs	r3, #0
 800e768:	607b      	str	r3, [r7, #4]
 800e76a:	4b2c      	ldr	r3, [pc, #176]	; (800e81c <SystemClock_Config+0x108>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4a2b      	ldr	r2, [pc, #172]	; (800e81c <SystemClock_Config+0x108>)
 800e770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e774:	6013      	str	r3, [r2, #0]
 800e776:	4b29      	ldr	r3, [pc, #164]	; (800e81c <SystemClock_Config+0x108>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e77e:	607b      	str	r3, [r7, #4]
 800e780:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800e782:	230e      	movs	r3, #14
 800e784:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800e786:	2301      	movs	r3, #1
 800e788:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e78a:	2301      	movs	r3, #1
 800e78c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e78e:	2310      	movs	r3, #16
 800e790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800e792:	2301      	movs	r3, #1
 800e794:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e796:	2302      	movs	r3, #2
 800e798:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e79a:	2300      	movs	r3, #0
 800e79c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 800e79e:	2310      	movs	r3, #16
 800e7a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 800e7a2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800e7a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800e7a8:	2304      	movs	r3, #4
 800e7aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e7ac:	2304      	movs	r3, #4
 800e7ae:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e7b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7f5 fb43 	bl	8003e40 <HAL_RCC_OscConfig>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d001      	beq.n	800e7c4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800e7c0:	f000 f840 	bl	800e844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e7c4:	230f      	movs	r3, #15
 800e7c6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e7c8:	2302      	movs	r3, #2
 800e7ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e7d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800e7da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7de:	2102      	movs	r1, #2
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7f5 fe4d 	bl	8004480 <HAL_RCC_ClockConfig>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d001      	beq.n	800e7f0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800e7ec:	f000 f82a 	bl	800e844 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800e7f0:	2302      	movs	r3, #2
 800e7f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800e7f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e7f8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e7fa:	f107 030c 	add.w	r3, r7, #12
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7f6 f90a 	bl	8004a18 <HAL_RCCEx_PeriphCLKConfig>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d001      	beq.n	800e80e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800e80a:	f000 f81b 	bl	800e844 <Error_Handler>
  }
}
 800e80e:	bf00      	nop
 800e810:	3768      	adds	r7, #104	; 0x68
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	40023800 	.word	0x40023800
 800e81c:	40007000 	.word	0x40007000

0800e820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a04      	ldr	r2, [pc, #16]	; (800e840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d101      	bne.n	800e836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800e832:	f7f2 fb63 	bl	8000efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800e836:	bf00      	nop
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	40000c00 	.word	0x40000c00

0800e844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	COM_uartPrint("Error");
 800e848:	4801      	ldr	r0, [pc, #4]	; (800e850 <Error_Handler+0xc>)
 800e84a:	f7fd fcaf 	bl	800c1ac <COM_uartPrint>
	while(1);
 800e84e:	e7fe      	b.n	800e84e <Error_Handler+0xa>
 800e850:	08011f94 	.word	0x08011f94

0800e854 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	SYSTEM_DEBUG_assertRecord(file, line);
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 fa25 	bl	800ecb0 <SYSTEM_DEBUG_assertRecord>

  /* USER CODE END 6 */
}
 800e866:	bf00      	nop
 800e868:	3708      	adds	r7, #8
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
	...

0800e870 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b090      	sub	sp, #64	; 0x40
 800e874:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800e876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e87a:	2200      	movs	r2, #0
 800e87c:	601a      	str	r2, [r3, #0]
 800e87e:	605a      	str	r2, [r3, #4]
 800e880:	609a      	str	r2, [r3, #8]
 800e882:	60da      	str	r2, [r3, #12]
 800e884:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800e886:	2300      	movs	r3, #0
 800e888:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800e88a:	463b      	mov	r3, r7
 800e88c:	2228      	movs	r2, #40	; 0x28
 800e88e:	2100      	movs	r1, #0
 800e890:	4618      	mov	r0, r3
 800e892:	f000 fe4e 	bl	800f532 <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800e896:	4b40      	ldr	r3, [pc, #256]	; (800e998 <MX_RTC_Init+0x128>)
 800e898:	4a40      	ldr	r2, [pc, #256]	; (800e99c <MX_RTC_Init+0x12c>)
 800e89a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e89c:	4b3e      	ldr	r3, [pc, #248]	; (800e998 <MX_RTC_Init+0x128>)
 800e89e:	2200      	movs	r2, #0
 800e8a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e8a2:	4b3d      	ldr	r3, [pc, #244]	; (800e998 <MX_RTC_Init+0x128>)
 800e8a4:	227f      	movs	r2, #127	; 0x7f
 800e8a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e8a8:	4b3b      	ldr	r3, [pc, #236]	; (800e998 <MX_RTC_Init+0x128>)
 800e8aa:	22ff      	movs	r2, #255	; 0xff
 800e8ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e8ae:	4b3a      	ldr	r3, [pc, #232]	; (800e998 <MX_RTC_Init+0x128>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e8b4:	4b38      	ldr	r3, [pc, #224]	; (800e998 <MX_RTC_Init+0x128>)
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e8ba:	4b37      	ldr	r3, [pc, #220]	; (800e998 <MX_RTC_Init+0x128>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e8c0:	4835      	ldr	r0, [pc, #212]	; (800e998 <MX_RTC_Init+0x128>)
 800e8c2:	f7f6 fabd 	bl	8004e40 <HAL_RTC_Init>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800e8cc:	f7ff ffba 	bl	800e844 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e8ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4829      	ldr	r0, [pc, #164]	; (800e998 <MX_RTC_Init+0x128>)
 800e8f4:	f7f6 fb8a 	bl	800500c <HAL_RTC_SetTime>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d001      	beq.n	800e902 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800e8fe:	f7ff ffa1 	bl	800e844 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800e902:	2301      	movs	r3, #1
 800e904:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800e908:	2301      	movs	r3, #1
 800e90a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 800e90e:	2301      	movs	r3, #1
 800e910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e91a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e91e:	2200      	movs	r2, #0
 800e920:	4619      	mov	r1, r3
 800e922:	481d      	ldr	r0, [pc, #116]	; (800e998 <MX_RTC_Init+0x128>)
 800e924:	f7f6 fcde 	bl	80052e4 <HAL_RTC_SetDate>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d001      	beq.n	800e932 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800e92e:	f7ff ff89 	bl	800e844 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800e936:	2300      	movs	r3, #0
 800e938:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 800e93a:	2301      	movs	r3, #1
 800e93c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800e93e:	2300      	movs	r3, #0
 800e940:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e942:	2300      	movs	r3, #0
 800e944:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e946:	2300      	movs	r3, #0
 800e948:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800e94a:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800e94e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800e950:	2300      	movs	r3, #0
 800e952:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800e954:	2300      	movs	r3, #0
 800e956:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800e958:	2301      	movs	r3, #1
 800e95a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800e95e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e962:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800e964:	463b      	mov	r3, r7
 800e966:	2200      	movs	r2, #0
 800e968:	4619      	mov	r1, r3
 800e96a:	480b      	ldr	r0, [pc, #44]	; (800e998 <MX_RTC_Init+0x128>)
 800e96c:	f7f6 fdea 	bl	8005544 <HAL_RTC_SetAlarm_IT>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d001      	beq.n	800e97a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800e976:	f7ff ff65 	bl	800e844 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e97a:	2200      	movs	r2, #0
 800e97c:	2100      	movs	r1, #0
 800e97e:	4806      	ldr	r0, [pc, #24]	; (800e998 <MX_RTC_Init+0x128>)
 800e980:	f7f7 fa3c 	bl	8005dfc <HAL_RTCEx_SetWakeUpTimer_IT>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <MX_RTC_Init+0x11e>
  {
    Error_Handler();
 800e98a:	f7ff ff5b 	bl	800e844 <Error_Handler>
  }

}
 800e98e:	bf00      	nop
 800e990:	3740      	adds	r7, #64	; 0x40
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	20001164 	.word	0x20001164
 800e99c:	40002800 	.word	0x40002800

0800e9a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a0c      	ldr	r2, [pc, #48]	; (800e9e0 <HAL_RTC_MspInit+0x40>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d112      	bne.n	800e9d8 <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e9b2:	4b0c      	ldr	r3, [pc, #48]	; (800e9e4 <HAL_RTC_MspInit+0x44>)
 800e9b4:	2201      	movs	r2, #1
 800e9b6:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	2105      	movs	r1, #5
 800e9bc:	2003      	movs	r0, #3
 800e9be:	f7f2 fbad 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800e9c2:	2003      	movs	r0, #3
 800e9c4:	f7f2 fbd6 	bl	8001174 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	2105      	movs	r1, #5
 800e9cc:	2029      	movs	r0, #41	; 0x29
 800e9ce:	f7f2 fba5 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800e9d2:	2029      	movs	r0, #41	; 0x29
 800e9d4:	f7f2 fbce 	bl	8001174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e9d8:	bf00      	nop
 800e9da:	3708      	adds	r7, #8
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	40002800 	.word	0x40002800
 800e9e4:	42470e3c 	.word	0x42470e3c

0800e9e8 <RTC_activateAlarmA>:
  }
} 

/* USER CODE BEGIN 1 */
void RTC_activateAlarmA(void)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b08a      	sub	sp, #40	; 0x28
 800e9ec:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm = {0};
 800e9ee:	463b      	mov	r3, r7
 800e9f0:	2228      	movs	r2, #40	; 0x28
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f000 fd9c 	bl	800f532 <memset>
	/** Enable the Alarm A
	*/
	sAlarm.AlarmTime.Hours = 0;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 1;
 800ea02:	2301      	movs	r3, #1
 800ea04:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800ea12:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800ea16:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 1;
 800ea20:	2301      	movs	r3, #1
 800ea22:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 800ea26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea2a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800ea2c:	463b      	mov	r3, r7
 800ea2e:	2200      	movs	r2, #0
 800ea30:	4619      	mov	r1, r3
 800ea32:	4806      	ldr	r0, [pc, #24]	; (800ea4c <RTC_activateAlarmA+0x64>)
 800ea34:	f7f6 fd86 	bl	8005544 <HAL_RTC_SetAlarm_IT>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <RTC_activateAlarmA+0x5a>
	{
		Error_Handler();
 800ea3e:	f7ff ff01 	bl	800e844 <Error_Handler>
	}
}
 800ea42:	bf00      	nop
 800ea44:	3728      	adds	r7, #40	; 0x28
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20001164 	.word	0x20001164

0800ea50 <RTC_deactivateAlarmA>:

void RTC_deactivateAlarmA(void)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	af00      	add	r7, sp, #0
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800ea54:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ea58:	4802      	ldr	r0, [pc, #8]	; (800ea64 <RTC_deactivateAlarmA+0x14>)
 800ea5a:	f7f7 f85d 	bl	8005b18 <HAL_RTC_DeactivateAlarm>
}
 800ea5e:	bf00      	nop
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	20001164 	.word	0x20001164

0800ea68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ea6e:	2300      	movs	r3, #0
 800ea70:	607b      	str	r3, [r7, #4]
 800ea72:	4b12      	ldr	r3, [pc, #72]	; (800eabc <HAL_MspInit+0x54>)
 800ea74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea76:	4a11      	ldr	r2, [pc, #68]	; (800eabc <HAL_MspInit+0x54>)
 800ea78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ea7c:	6453      	str	r3, [r2, #68]	; 0x44
 800ea7e:	4b0f      	ldr	r3, [pc, #60]	; (800eabc <HAL_MspInit+0x54>)
 800ea80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea86:	607b      	str	r3, [r7, #4]
 800ea88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	603b      	str	r3, [r7, #0]
 800ea8e:	4b0b      	ldr	r3, [pc, #44]	; (800eabc <HAL_MspInit+0x54>)
 800ea90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea92:	4a0a      	ldr	r2, [pc, #40]	; (800eabc <HAL_MspInit+0x54>)
 800ea94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea98:	6413      	str	r3, [r2, #64]	; 0x40
 800ea9a:	4b08      	ldr	r3, [pc, #32]	; (800eabc <HAL_MspInit+0x54>)
 800ea9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eaa2:	603b      	str	r3, [r7, #0]
 800eaa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	210f      	movs	r1, #15
 800eaaa:	f06f 0001 	mvn.w	r0, #1
 800eaae:	f7f2 fb35 	bl	800111c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800eab2:	bf00      	nop
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	40023800 	.word	0x40023800

0800eac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08c      	sub	sp, #48	; 0x30
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800eacc:	2300      	movs	r3, #0
 800eace:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 800ead0:	2200      	movs	r2, #0
 800ead2:	6879      	ldr	r1, [r7, #4]
 800ead4:	2032      	movs	r0, #50	; 0x32
 800ead6:	f7f2 fb21 	bl	800111c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800eada:	2032      	movs	r0, #50	; 0x32
 800eadc:	f7f2 fb4a 	bl	8001174 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800eae0:	2300      	movs	r3, #0
 800eae2:	60fb      	str	r3, [r7, #12]
 800eae4:	4b1f      	ldr	r3, [pc, #124]	; (800eb64 <HAL_InitTick+0xa4>)
 800eae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae8:	4a1e      	ldr	r2, [pc, #120]	; (800eb64 <HAL_InitTick+0xa4>)
 800eaea:	f043 0308 	orr.w	r3, r3, #8
 800eaee:	6413      	str	r3, [r2, #64]	; 0x40
 800eaf0:	4b1c      	ldr	r3, [pc, #112]	; (800eb64 <HAL_InitTick+0xa4>)
 800eaf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaf4:	f003 0308 	and.w	r3, r3, #8
 800eaf8:	60fb      	str	r3, [r7, #12]
 800eafa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800eafc:	f107 0210 	add.w	r2, r7, #16
 800eb00:	f107 0314 	add.w	r3, r7, #20
 800eb04:	4611      	mov	r1, r2
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7f5 ff54 	bl	80049b4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800eb0c:	f7f5 ff2a 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 800eb10:	4603      	mov	r3, r0
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800eb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb18:	4a13      	ldr	r2, [pc, #76]	; (800eb68 <HAL_InitTick+0xa8>)
 800eb1a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb1e:	0c9b      	lsrs	r3, r3, #18
 800eb20:	3b01      	subs	r3, #1
 800eb22:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800eb24:	4b11      	ldr	r3, [pc, #68]	; (800eb6c <HAL_InitTick+0xac>)
 800eb26:	4a12      	ldr	r2, [pc, #72]	; (800eb70 <HAL_InitTick+0xb0>)
 800eb28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 800eb2a:	4b10      	ldr	r3, [pc, #64]	; (800eb6c <HAL_InitTick+0xac>)
 800eb2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800eb30:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800eb32:	4a0e      	ldr	r2, [pc, #56]	; (800eb6c <HAL_InitTick+0xac>)
 800eb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb36:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800eb38:	4b0c      	ldr	r3, [pc, #48]	; (800eb6c <HAL_InitTick+0xac>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb3e:	4b0b      	ldr	r3, [pc, #44]	; (800eb6c <HAL_InitTick+0xac>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800eb44:	4809      	ldr	r0, [pc, #36]	; (800eb6c <HAL_InitTick+0xac>)
 800eb46:	f7f7 fac9 	bl	80060dc <HAL_TIM_Base_Init>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d104      	bne.n	800eb5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800eb50:	4806      	ldr	r0, [pc, #24]	; (800eb6c <HAL_InitTick+0xac>)
 800eb52:	f7f7 fb65 	bl	8006220 <HAL_TIM_Base_Start_IT>
 800eb56:	4603      	mov	r3, r0
 800eb58:	e000      	b.n	800eb5c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800eb5a:	2301      	movs	r3, #1
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3730      	adds	r7, #48	; 0x30
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	40023800 	.word	0x40023800
 800eb68:	431bde83 	.word	0x431bde83
 800eb6c:	20001184 	.word	0x20001184
 800eb70:	40000c00 	.word	0x40000c00

0800eb74 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM5 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800eb74:	b480      	push	{r7}
 800eb76:	af00      	add	r7, sp, #0
  /* Disable TIM5 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);                                                  
 800eb78:	4b06      	ldr	r3, [pc, #24]	; (800eb94 <HAL_SuspendTick+0x20>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	68da      	ldr	r2, [r3, #12]
 800eb7e:	4b05      	ldr	r3, [pc, #20]	; (800eb94 <HAL_SuspendTick+0x20>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f022 0201 	bic.w	r2, r2, #1
 800eb86:	60da      	str	r2, [r3, #12]
}
 800eb88:	bf00      	nop
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	20001184 	.word	0x20001184

0800eb98 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM5 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	af00      	add	r7, sp, #0
  /* Enable TIM5 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 800eb9c:	4b06      	ldr	r3, [pc, #24]	; (800ebb8 <HAL_ResumeTick+0x20>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	68da      	ldr	r2, [r3, #12]
 800eba2:	4b05      	ldr	r3, [pc, #20]	; (800ebb8 <HAL_ResumeTick+0x20>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f042 0201 	orr.w	r2, r2, #1
 800ebaa:	60da      	str	r2, [r3, #12]
}
 800ebac:	bf00      	nop
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	20001184 	.word	0x20001184

0800ebbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ebc0:	bf00      	nop
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ebca:	b480      	push	{r7}
 800ebcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ebce:	e7fe      	b.n	800ebce <HardFault_Handler+0x4>

0800ebd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ebd4:	e7fe      	b.n	800ebd4 <MemManage_Handler+0x4>

0800ebd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ebda:	e7fe      	b.n	800ebda <BusFault_Handler+0x4>

0800ebdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ebe0:	e7fe      	b.n	800ebe0 <UsageFault_Handler+0x4>

0800ebe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ebe2:	b480      	push	{r7}
 800ebe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ebe6:	bf00      	nop
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800ebf4:	4802      	ldr	r0, [pc, #8]	; (800ec00 <RTC_WKUP_IRQHandler+0x10>)
 800ebf6:	f7f7 fa39 	bl	800606c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800ebfa:	bf00      	nop
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20001164 	.word	0x20001164

0800ec04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800ec08:	4802      	ldr	r0, [pc, #8]	; (800ec14 <DMA1_Stream5_IRQHandler+0x10>)
 800ec0a:	f7f2 fdcd 	bl	80017a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800ec0e:	bf00      	nop
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	20001208 	.word	0x20001208

0800ec18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800ec1c:	4802      	ldr	r0, [pc, #8]	; (800ec28 <DMA1_Stream6_IRQHandler+0x10>)
 800ec1e:	f7f2 fdc3 	bl	80017a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800ec22:	bf00      	nop
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20001268 	.word	0x20001268

0800ec2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800ec30:	2020      	movs	r0, #32
 800ec32:	f7f4 f80b 	bl	8002c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800ec36:	bf00      	nop
 800ec38:	bd80      	pop	{r7, pc}
	...

0800ec3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ec40:	4802      	ldr	r0, [pc, #8]	; (800ec4c <USART2_IRQHandler+0x10>)
 800ec42:	f7f9 f95f 	bl	8007f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ec46:	bf00      	nop
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	200012c8 	.word	0x200012c8

0800ec50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800ec54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ec58:	f7f3 fff8 	bl	8002c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ec5c:	bf00      	nop
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800ec64:	4802      	ldr	r0, [pc, #8]	; (800ec70 <RTC_Alarm_IRQHandler+0x10>)
 800ec66:	f7f6 fff3 	bl	8005c50 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800ec6a:	bf00      	nop
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	20001164 	.word	0x20001164

0800ec74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800ec78:	4802      	ldr	r0, [pc, #8]	; (800ec84 <TIM5_IRQHandler+0x10>)
 800ec7a:	f7f7 fd61 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800ec7e:	bf00      	nop
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	20001184 	.word	0x20001184

0800ec88 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ec8c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ec90:	4b05      	ldr	r3, [pc, #20]	; (800eca8 <__NVIC_SystemReset+0x20>)
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ec98:	4903      	ldr	r1, [pc, #12]	; (800eca8 <__NVIC_SystemReset+0x20>)
 800ec9a:	4b04      	ldr	r3, [pc, #16]	; (800ecac <__NVIC_SystemReset+0x24>)
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	60cb      	str	r3, [r1, #12]
 800eca0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800eca4:	bf00      	nop
 800eca6:	e7fd      	b.n	800eca4 <__NVIC_SystemReset+0x1c>
 800eca8:	e000ed00 	.word	0xe000ed00
 800ecac:	05fa0004 	.word	0x05fa0004

0800ecb0 <SYSTEM_DEBUG_assertRecord>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_DEBUG_assertRecord(uint8_t *p_file, uint32_t line)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
	Assert_Struct.flag = ASSERT_FLAG_ON;
 800ecba:	4b11      	ldr	r3, [pc, #68]	; (800ed00 <SYSTEM_DEBUG_assertRecord+0x50>)
 800ecbc:	22aa      	movs	r2, #170	; 0xaa
 800ecbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (int i = 0; i < sizeof(Assert_Struct.p_file); i++)
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	60fb      	str	r3, [r7, #12]
 800ecc6:	e007      	b.n	800ecd8 <SYSTEM_DEBUG_assertRecord+0x28>
	{
		Assert_Struct.p_file [i]  = 0;
 800ecc8:	4a0d      	ldr	r2, [pc, #52]	; (800ed00 <SYSTEM_DEBUG_assertRecord+0x50>)
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	4413      	add	r3, r2
 800ecce:	2200      	movs	r2, #0
 800ecd0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(Assert_Struct.p_file); i++)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	60fb      	str	r3, [r7, #12]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b3b      	cmp	r3, #59	; 0x3b
 800ecdc:	d9f4      	bls.n	800ecc8 <SYSTEM_DEBUG_assertRecord+0x18>
	}

	strncpy((char*)Assert_Struct.p_file, (char*)p_file, sizeof(Assert_Struct.p_file));
 800ecde:	223c      	movs	r2, #60	; 0x3c
 800ece0:	6879      	ldr	r1, [r7, #4]
 800ece2:	4807      	ldr	r0, [pc, #28]	; (800ed00 <SYSTEM_DEBUG_assertRecord+0x50>)
 800ece4:	f001 f9ce 	bl	8010084 <strncpy>
	Assert_Struct.line = line;
 800ece8:	4a05      	ldr	r2, [pc, #20]	; (800ed00 <SYSTEM_DEBUG_assertRecord+0x50>)
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	63d3      	str	r3, [r2, #60]	; 0x3c

	while (COM_getTxBusyFlag()); // OK message
 800ecee:	bf00      	nop
 800ecf0:	f7fd faee 	bl	800c2d0 <COM_getTxBusyFlag>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1fa      	bne.n	800ecf0 <SYSTEM_DEBUG_assertRecord+0x40>
	NVIC_SystemReset();
 800ecfa:	f7ff ffc5 	bl	800ec88 <__NVIC_SystemReset>
 800ecfe:	bf00      	nop
 800ed00:	20000000 	.word	0x20000000

0800ed04 <SYSTEM_DEBUG_assertMsgPrint>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_DEBUG_assertMsgPrint(void)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b09a      	sub	sp, #104	; 0x68
 800ed08:	af00      	add	r7, sp, #0
	if (Assert_Struct.flag == ASSERT_FLAG_ON)
 800ed0a:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800ed0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed10:	2baa      	cmp	r3, #170	; 0xaa
 800ed12:	d10a      	bne.n	800ed2a <SYSTEM_DEBUG_assertMsgPrint+0x26>
	{
		char temp [BUFFER_SIZE];
		sprintf(temp, "Problem found! Path: %s\tLine: %u\n", Assert_Struct.p_file, (unsigned int)Assert_Struct.line);
 800ed14:	4b07      	ldr	r3, [pc, #28]	; (800ed34 <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800ed16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed18:	1d38      	adds	r0, r7, #4
 800ed1a:	4a06      	ldr	r2, [pc, #24]	; (800ed34 <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800ed1c:	4906      	ldr	r1, [pc, #24]	; (800ed38 <SYSTEM_DEBUG_assertMsgPrint+0x34>)
 800ed1e:	f001 f97f 	bl	8010020 <siprintf>
		COM_uartPrint(temp);
 800ed22:	1d3b      	adds	r3, r7, #4
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fd fa41 	bl	800c1ac <COM_uartPrint>
	}
}
 800ed2a:	bf00      	nop
 800ed2c:	3768      	adds	r7, #104	; 0x68
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	20000000 	.word	0x20000000
 800ed38:	08011f9c 	.word	0x08011f9c

0800ed3c <SYSTEM_DEBUG_assertResetFlag>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_DEBUG_assertResetFlag(void)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	af00      	add	r7, sp, #0
	Assert_Struct.flag = ASSERT_FLAG_OFF;
 800ed40:	4b04      	ldr	r3, [pc, #16]	; (800ed54 <SYSTEM_DEBUG_assertResetFlag+0x18>)
 800ed42:	2255      	movs	r2, #85	; 0x55
 800ed44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800ed48:	bf00      	nop
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	20000000 	.word	0x20000000

0800ed58 <SYSTEM_DEBUG_printResetCause>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_DEBUG_printResetCause(void)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b09a      	sub	sp, #104	; 0x68
 800ed5c:	af00      	add	r7, sp, #0
	Reset_Cause = SYSTEM_DEBUG_resetCauseGet();
 800ed5e:	f000 f81b 	bl	800ed98 <SYSTEM_DEBUG_resetCauseGet>
 800ed62:	4603      	mov	r3, r0
 800ed64:	461a      	mov	r2, r3
 800ed66:	4b0a      	ldr	r3, [pc, #40]	; (800ed90 <SYSTEM_DEBUG_printResetCause+0x38>)
 800ed68:	701a      	strb	r2, [r3, #0]

	char temp [BUFFER_SIZE];
	sprintf(temp, "The system reset cause is \%s\"\n", SYSTEM_DEBUG_resetCauseGetName(Reset_Cause));
 800ed6a:	4b09      	ldr	r3, [pc, #36]	; (800ed90 <SYSTEM_DEBUG_printResetCause+0x38>)
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 f864 	bl	800ee3c <SYSTEM_DEBUG_resetCauseGetName>
 800ed74:	4602      	mov	r2, r0
 800ed76:	1d3b      	adds	r3, r7, #4
 800ed78:	4906      	ldr	r1, [pc, #24]	; (800ed94 <SYSTEM_DEBUG_printResetCause+0x3c>)
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f001 f950 	bl	8010020 <siprintf>
	COM_uartPrint(temp);
 800ed80:	1d3b      	adds	r3, r7, #4
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fd fa12 	bl	800c1ac <COM_uartPrint>
}
 800ed88:	bf00      	nop
 800ed8a:	3768      	adds	r7, #104	; 0x68
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	20001082 	.word	0x20001082
 800ed94:	08011fc0 	.word	0x08011fc0

0800ed98 <SYSTEM_DEBUG_resetCauseGet>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
reset_cause_t SYSTEM_DEBUG_resetCauseGet(void)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
    reset_cause_t Reset_Cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800ed9e:	4b26      	ldr	r3, [pc, #152]	; (800ee38 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800eda0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	da02      	bge.n	800edac <SYSTEM_DEBUG_resetCauseGet+0x14>
    {
        Reset_Cause = RESET_CAUSE_LOW_POWER_RESET;
 800eda6:	2301      	movs	r3, #1
 800eda8:	71fb      	strb	r3, [r7, #7]
 800edaa:	e037      	b.n	800ee1c <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800edac:	4b22      	ldr	r3, [pc, #136]	; (800ee38 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800edae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d002      	beq.n	800edbe <SYSTEM_DEBUG_resetCauseGet+0x26>
    {
        Reset_Cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800edb8:	2302      	movs	r3, #2
 800edba:	71fb      	strb	r3, [r7, #7]
 800edbc:	e02e      	b.n	800ee1c <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800edbe:	4b1e      	ldr	r3, [pc, #120]	; (800ee38 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800edc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d002      	beq.n	800edd0 <SYSTEM_DEBUG_resetCauseGet+0x38>
    {
        Reset_Cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800edca:	2303      	movs	r3, #3
 800edcc:	71fb      	strb	r3, [r7, #7]
 800edce:	e025      	b.n	800ee1c <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800edd0:	4b19      	ldr	r3, [pc, #100]	; (800ee38 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800edd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <SYSTEM_DEBUG_resetCauseGet+0x4a>
    {
        Reset_Cause = RESET_CAUSE_SOFTWARE_RESET;
 800eddc:	2304      	movs	r3, #4
 800edde:	71fb      	strb	r3, [r7, #7]
 800ede0:	e01c      	b.n	800ee1c <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800ede2:	4b15      	ldr	r3, [pc, #84]	; (800ee38 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800ede4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ede6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800edea:	2b00      	cmp	r3, #0
 800edec:	d002      	beq.n	800edf4 <SYSTEM_DEBUG_resetCauseGet+0x5c>
    {
        Reset_Cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800edee:	2305      	movs	r3, #5
 800edf0:	71fb      	strb	r3, [r7, #7]
 800edf2:	e013      	b.n	800ee1c <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800edf4:	4b10      	ldr	r3, [pc, #64]	; (800ee38 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800edf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d002      	beq.n	800ee06 <SYSTEM_DEBUG_resetCauseGet+0x6e>
    {
        Reset_Cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800ee00:	2306      	movs	r3, #6
 800ee02:	71fb      	strb	r3, [r7, #7]
 800ee04:	e00a      	b.n	800ee1c <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800ee06:	4b0c      	ldr	r3, [pc, #48]	; (800ee38 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800ee08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d002      	beq.n	800ee18 <SYSTEM_DEBUG_resetCauseGet+0x80>
    {
        Reset_Cause = RESET_CAUSE_BROWNOUT_RESET;
 800ee12:	2307      	movs	r3, #7
 800ee14:	71fb      	strb	r3, [r7, #7]
 800ee16:	e001      	b.n	800ee1c <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else
    {
        Reset_Cause = RESET_CAUSE_UNKNOWN;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 800ee1c:	4b06      	ldr	r3, [pc, #24]	; (800ee38 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800ee1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee20:	4a05      	ldr	r2, [pc, #20]	; (800ee38 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800ee22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ee26:	6753      	str	r3, [r2, #116]	; 0x74

    return Reset_Cause;
 800ee28:	79fb      	ldrb	r3, [r7, #7]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	370c      	adds	r7, #12
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop
 800ee38:	40023800 	.word	0x40023800

0800ee3c <SYSTEM_DEBUG_resetCauseGetName>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
const char * SYSTEM_DEBUG_resetCauseGetName(reset_cause_t Reset_Cause)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b085      	sub	sp, #20
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	4603      	mov	r3, r0
 800ee44:	71fb      	strb	r3, [r7, #7]
    const char * reset_cause_name = "TBD";
 800ee46:	4b1c      	ldr	r3, [pc, #112]	; (800eeb8 <SYSTEM_DEBUG_resetCauseGetName+0x7c>)
 800ee48:	60fb      	str	r3, [r7, #12]

    switch (Reset_Cause)
 800ee4a:	79fb      	ldrb	r3, [r7, #7]
 800ee4c:	2b07      	cmp	r3, #7
 800ee4e:	d82b      	bhi.n	800eea8 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
 800ee50:	a201      	add	r2, pc, #4	; (adr r2, 800ee58 <SYSTEM_DEBUG_resetCauseGetName+0x1c>)
 800ee52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee56:	bf00      	nop
 800ee58:	0800ee79 	.word	0x0800ee79
 800ee5c:	0800ee7f 	.word	0x0800ee7f
 800ee60:	0800ee85 	.word	0x0800ee85
 800ee64:	0800ee8b 	.word	0x0800ee8b
 800ee68:	0800ee91 	.word	0x0800ee91
 800ee6c:	0800ee97 	.word	0x0800ee97
 800ee70:	0800ee9d 	.word	0x0800ee9d
 800ee74:	0800eea3 	.word	0x0800eea3
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800ee78:	4b10      	ldr	r3, [pc, #64]	; (800eebc <SYSTEM_DEBUG_resetCauseGetName+0x80>)
 800ee7a:	60fb      	str	r3, [r7, #12]
            break;
 800ee7c:	e014      	b.n	800eea8 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800ee7e:	4b10      	ldr	r3, [pc, #64]	; (800eec0 <SYSTEM_DEBUG_resetCauseGetName+0x84>)
 800ee80:	60fb      	str	r3, [r7, #12]
            break;
 800ee82:	e011      	b.n	800eea8 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800ee84:	4b0f      	ldr	r3, [pc, #60]	; (800eec4 <SYSTEM_DEBUG_resetCauseGetName+0x88>)
 800ee86:	60fb      	str	r3, [r7, #12]
            break;
 800ee88:	e00e      	b.n	800eea8 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800ee8a:	4b0f      	ldr	r3, [pc, #60]	; (800eec8 <SYSTEM_DEBUG_resetCauseGetName+0x8c>)
 800ee8c:	60fb      	str	r3, [r7, #12]
            break;
 800ee8e:	e00b      	b.n	800eea8 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800ee90:	4b0e      	ldr	r3, [pc, #56]	; (800eecc <SYSTEM_DEBUG_resetCauseGetName+0x90>)
 800ee92:	60fb      	str	r3, [r7, #12]
            break;
 800ee94:	e008      	b.n	800eea8 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800ee96:	4b0e      	ldr	r3, [pc, #56]	; (800eed0 <SYSTEM_DEBUG_resetCauseGetName+0x94>)
 800ee98:	60fb      	str	r3, [r7, #12]
            break;
 800ee9a:	e005      	b.n	800eea8 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800ee9c:	4b0d      	ldr	r3, [pc, #52]	; (800eed4 <SYSTEM_DEBUG_resetCauseGetName+0x98>)
 800ee9e:	60fb      	str	r3, [r7, #12]
            break;
 800eea0:	e002      	b.n	800eea8 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800eea2:	4b0d      	ldr	r3, [pc, #52]	; (800eed8 <SYSTEM_DEBUG_resetCauseGetName+0x9c>)
 800eea4:	60fb      	str	r3, [r7, #12]
            break;
 800eea6:	bf00      	nop
    }

    return reset_cause_name;
 800eea8:	68fb      	ldr	r3, [r7, #12]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3714      	adds	r7, #20
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	08011fe0 	.word	0x08011fe0
 800eebc:	08011fe4 	.word	0x08011fe4
 800eec0:	08011fec 	.word	0x08011fec
 800eec4:	08011ffc 	.word	0x08011ffc
 800eec8:	08012014 	.word	0x08012014
 800eecc:	08012030 	.word	0x08012030
 800eed0:	08012040 	.word	0x08012040
 800eed4:	08012070 	.word	0x08012070
 800eed8:	0801208c 	.word	0x0801208c

0800eedc <SYSTEM_DEBUG_enterStopMode>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_DEBUG_enterStopMode(uint32_t wake_up_time)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
	const float wakeup_time_base = 0.00048;
 800eee4:	4b1b      	ldr	r3, [pc, #108]	; (800ef54 <SYSTEM_DEBUG_enterStopMode+0x78>)
 800eee6:	60fb      	str	r3, [r7, #12]
	uint32_t wakeup_counter = wake_up_time / wakeup_time_base;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	ee07 3a90 	vmov	s15, r3
 800eeee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eef2:	ed97 7a03 	vldr	s14, [r7, #12]
 800eef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eefa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eefe:	ee17 3a90 	vmov	r3, s15
 800ef02:	60bb      	str	r3, [r7, #8]

	COM_uartPrint("STOP MODE is ON\n");
 800ef04:	4814      	ldr	r0, [pc, #80]	; (800ef58 <SYSTEM_DEBUG_enterStopMode+0x7c>)
 800ef06:	f7fd f951 	bl	800c1ac <COM_uartPrint>

	/* enable the RTC Wakeup */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	68b9      	ldr	r1, [r7, #8]
 800ef0e:	4813      	ldr	r0, [pc, #76]	; (800ef5c <SYSTEM_DEBUG_enterStopMode+0x80>)
 800ef10:	f7f6 ff74 	bl	8005dfc <HAL_RTCEx_SetWakeUpTimer_IT>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <SYSTEM_DEBUG_enterStopMode+0x42>
	{
		Error_Handler();
 800ef1a:	f7ff fc93 	bl	800e844 <Error_Handler>
	}

	// Enters to stop mode
	while (COM_getTxBusyFlag());
 800ef1e:	bf00      	nop
 800ef20:	f7fd f9d6 	bl	800c2d0 <COM_getTxBusyFlag>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1fa      	bne.n	800ef20 <SYSTEM_DEBUG_enterStopMode+0x44>
	HAL_SuspendTick();
 800ef2a:	f7ff fe23 	bl	800eb74 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800ef2e:	2101      	movs	r1, #1
 800ef30:	2001      	movs	r0, #1
 800ef32:	f7f4 ff2b 	bl	8003d8c <HAL_PWR_EnterSTOPMode>

	SystemClock_Config();
 800ef36:	f7ff fbed 	bl	800e714 <SystemClock_Config>
	HAL_ResumeTick();
 800ef3a:	f7ff fe2d 	bl	800eb98 <HAL_ResumeTick>

	/** Deactivate the RTC wakeup  **/
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800ef3e:	4807      	ldr	r0, [pc, #28]	; (800ef5c <SYSTEM_DEBUG_enterStopMode+0x80>)
 800ef40:	f7f7 f83c 	bl	8005fbc <HAL_RTCEx_DeactivateWakeUpTimer>

	COM_uartPrint("STOP MODE is OFF\n");
 800ef44:	4806      	ldr	r0, [pc, #24]	; (800ef60 <SYSTEM_DEBUG_enterStopMode+0x84>)
 800ef46:	f7fd f931 	bl	800c1ac <COM_uartPrint>
}
 800ef4a:	bf00      	nop
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	39fba882 	.word	0x39fba882
 800ef58:	080120a4 	.word	0x080120a4
 800ef5c:	20001164 	.word	0x20001164
 800ef60:	080120b8 	.word	0x080120b8

0800ef64 <SYSTEM_DEBUG_enterStandbyMode>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_DEBUG_enterStandbyMode(void)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	af00      	add	r7, sp, #0
	/* Clear the WU FLAG */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800ef68:	4b13      	ldr	r3, [pc, #76]	; (800efb8 <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a12      	ldr	r2, [pc, #72]	; (800efb8 <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800ef6e:	f043 0304 	orr.w	r3, r3, #4
 800ef72:	6013      	str	r3, [r2, #0]

	 /* clear the RTC Wake UP (WU) flag */
	 __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800ef74:	4b11      	ldr	r3, [pc, #68]	; (800efbc <SYSTEM_DEBUG_enterStandbyMode+0x58>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	b2da      	uxtb	r2, r3
 800ef7c:	4b0f      	ldr	r3, [pc, #60]	; (800efbc <SYSTEM_DEBUG_enterStandbyMode+0x58>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800ef84:	60da      	str	r2, [r3, #12]

	 /* Enable the WAKEUP PIN */
	 HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800ef86:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ef8a:	f7f4 fec7 	bl	8003d1c <HAL_PWR_EnableWakeUpPin>
	      To configure the wake up timer to 5s the WakeUpCounter is set to 0x28b0:
	      RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
	      Wake-up Time Base = 16 /(32.768KHz) = 0.00048 seconds
	      ==> WakeUpCounter = ~5s/0.00048s = 10416 = 0x28b0
	    */
	 if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2710, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f242 7110 	movw	r1, #10000	; 0x2710
 800ef94:	4809      	ldr	r0, [pc, #36]	; (800efbc <SYSTEM_DEBUG_enterStandbyMode+0x58>)
 800ef96:	f7f6 ff31 	bl	8005dfc <HAL_RTCEx_SetWakeUpTimer_IT>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <SYSTEM_DEBUG_enterStandbyMode+0x40>
	 {
		 Error_Handler();
 800efa0:	f7ff fc50 	bl	800e844 <Error_Handler>
	 }
	 COM_uartPrint("STANDBY MODE is ON\n");
 800efa4:	4806      	ldr	r0, [pc, #24]	; (800efc0 <SYSTEM_DEBUG_enterStandbyMode+0x5c>)
 800efa6:	f7fd f901 	bl	800c1ac <COM_uartPrint>
	 HAL_Delay(100);
 800efaa:	2064      	movs	r0, #100	; 0x64
 800efac:	f7f1 ffc6 	bl	8000f3c <HAL_Delay>

	 /* Enter the standby mode */
	 HAL_PWR_EnterSTANDBYMode();
 800efb0:	f7f4 ff2e 	bl	8003e10 <HAL_PWR_EnterSTANDBYMode>
}
 800efb4:	bf00      	nop
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	40007000 	.word	0x40007000
 800efbc:	20001164 	.word	0x20001164
 800efc0:	080120cc 	.word	0x080120cc

0800efc4 <SYSTEM_DEBUG_wakeupStandbyMode>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_DEBUG_wakeupStandbyMode(void)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800efc8:	4b0b      	ldr	r3, [pc, #44]	; (800eff8 <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	f003 0302 	and.w	r3, r3, #2
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d10f      	bne.n	800eff4 <SYSTEM_DEBUG_wakeupStandbyMode+0x30>
	{
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800efd4:	4b08      	ldr	r3, [pc, #32]	; (800eff8 <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a07      	ldr	r2, [pc, #28]	; (800eff8 <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800efda:	f043 0308 	orr.w	r3, r3, #8
 800efde:	6013      	str	r3, [r2, #0]

		COM_uartPrint("Wakeup from STANDBY MODE\n");
 800efe0:	4806      	ldr	r0, [pc, #24]	; (800effc <SYSTEM_DEBUG_wakeupStandbyMode+0x38>)
 800efe2:	f7fd f8e3 	bl	800c1ac <COM_uartPrint>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800efe6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800efea:	f7f4 feb3 	bl	8003d54 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800efee:	4804      	ldr	r0, [pc, #16]	; (800f000 <SYSTEM_DEBUG_wakeupStandbyMode+0x3c>)
 800eff0:	f7f6 ffe4 	bl	8005fbc <HAL_RTCEx_DeactivateWakeUpTimer>
	}
}
 800eff4:	bf00      	nop
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	40007000 	.word	0x40007000
 800effc:	080120e0 	.word	0x080120e0
 800f000:	20001164 	.word	0x20001164

0800f004 <SYSTEM_ISR_init>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_ISR_init(void)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
	osTimerDef(Timer01, Timer01Callback);
 800f00a:	4b08      	ldr	r3, [pc, #32]	; (800f02c <SYSTEM_ISR_init+0x28>)
 800f00c:	603b      	str	r3, [r7, #0]
 800f00e:	2300      	movs	r3, #0
 800f010:	607b      	str	r3, [r7, #4]
	Timer01Handle = osTimerCreate(osTimer(Timer01), osTimerPeriodic, NULL);
 800f012:	463b      	mov	r3, r7
 800f014:	2200      	movs	r2, #0
 800f016:	2101      	movs	r1, #1
 800f018:	4618      	mov	r0, r3
 800f01a:	f7f9 fed3 	bl	8008dc4 <osTimerCreate>
 800f01e:	4602      	mov	r2, r0
 800f020:	4b03      	ldr	r3, [pc, #12]	; (800f030 <SYSTEM_ISR_init+0x2c>)
 800f022:	601a      	str	r2, [r3, #0]
}
 800f024:	bf00      	nop
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	0800f0b1 	.word	0x0800f0b1
 800f030:	200011c4 	.word	0x200011c4

0800f034 <SYSTEM_ISR_osTimer01Start>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_ISR_osTimer01Start(uint32_t timer_period_milisec)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
	osTimerStart(Timer01Handle, timer_period_milisec);
 800f03c:	4b04      	ldr	r3, [pc, #16]	; (800f050 <SYSTEM_ISR_osTimer01Start+0x1c>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	6879      	ldr	r1, [r7, #4]
 800f042:	4618      	mov	r0, r3
 800f044:	f7f9 fef2 	bl	8008e2c <osTimerStart>
}
 800f048:	bf00      	nop
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	200011c4 	.word	0x200011c4

0800f054 <SYSTEM_ISR_osTimer01Stop>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void SYSTEM_ISR_osTimer01Stop(void)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	af00      	add	r7, sp, #0
	osTimerStop(Timer01Handle);
 800f058:	4b03      	ldr	r3, [pc, #12]	; (800f068 <SYSTEM_ISR_osTimer01Stop+0x14>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7f9 ff2b 	bl	8008eb8 <osTimerStop>
}
 800f062:	bf00      	nop
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	200011c4 	.word	0x200011c4

0800f06c <HAL_GPIO_EXTI_Callback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
		   the HAL_GPIO_EXTI_Callback could be implemented in the user file
	*/
	if (GPIO_Pin == GPIO_PIN_5)
 800f076:	88fb      	ldrh	r3, [r7, #6]
 800f078:	2b20      	cmp	r3, #32
 800f07a:	d105      	bne.n	800f088 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSignalSet(lsm6dslTaskHandle, LSM6DSL_SIGNAL);
 800f07c:	4b04      	ldr	r3, [pc, #16]	; (800f090 <HAL_GPIO_EXTI_Callback+0x24>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2101      	movs	r1, #1
 800f082:	4618      	mov	r0, r3
 800f084:	f7f9 ff54 	bl	8008f30 <osSignalSet>
	}
}
 800f088:	bf00      	nop
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	200010fc 	.word	0x200010fc

0800f094 <HAL_RTC_AlarmAEventCallback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
	COM_uartPrint(TICK);
 800f09c:	4803      	ldr	r0, [pc, #12]	; (800f0ac <HAL_RTC_AlarmAEventCallback+0x18>)
 800f09e:	f7fd f885 	bl	800c1ac <COM_uartPrint>
}
 800f0a2:	bf00      	nop
 800f0a4:	3708      	adds	r7, #8
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	080120fc 	.word	0x080120fc

0800f0b0 <Timer01Callback>:
  * @brief 	XXX
  * @param 	XXX
  * @retval	XXX
  */
void Timer01Callback(void const * argument)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer01Callback */
	COM_uartPrint(TIMER01_MESSAGE);
 800f0b8:	4803      	ldr	r0, [pc, #12]	; (800f0c8 <Timer01Callback+0x18>)
 800f0ba:	f7fd f877 	bl	800c1ac <COM_uartPrint>
  /* USER CODE END Timer01Callback */
}
 800f0be:	bf00      	nop
 800f0c0:	3708      	adds	r7, #8
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	08012104 	.word	0x08012104

0800f0cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f0d0:	4b08      	ldr	r3, [pc, #32]	; (800f0f4 <SystemInit+0x28>)
 800f0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0d6:	4a07      	ldr	r2, [pc, #28]	; (800f0f4 <SystemInit+0x28>)
 800f0d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f0dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f0e0:	4b04      	ldr	r3, [pc, #16]	; (800f0f4 <SystemInit+0x28>)
 800f0e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f0e6:	609a      	str	r2, [r3, #8]
#endif
}
 800f0e8:	bf00      	nop
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	e000ed00 	.word	0xe000ed00

0800f0f8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b08e      	sub	sp, #56	; 0x38
 800f0fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f0fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f102:	2200      	movs	r2, #0
 800f104:	601a      	str	r2, [r3, #0]
 800f106:	605a      	str	r2, [r3, #4]
 800f108:	609a      	str	r2, [r3, #8]
 800f10a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f10c:	f107 0320 	add.w	r3, r7, #32
 800f110:	2200      	movs	r2, #0
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f116:	1d3b      	adds	r3, r7, #4
 800f118:	2200      	movs	r2, #0
 800f11a:	601a      	str	r2, [r3, #0]
 800f11c:	605a      	str	r2, [r3, #4]
 800f11e:	609a      	str	r2, [r3, #8]
 800f120:	60da      	str	r2, [r3, #12]
 800f122:	611a      	str	r2, [r3, #16]
 800f124:	615a      	str	r2, [r3, #20]
 800f126:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800f128:	4b2c      	ldr	r3, [pc, #176]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f12a:	4a2d      	ldr	r2, [pc, #180]	; (800f1e0 <MX_TIM3_Init+0xe8>)
 800f12c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800f12e:	4b2b      	ldr	r3, [pc, #172]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f130:	2253      	movs	r2, #83	; 0x53
 800f132:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f134:	4b29      	ldr	r3, [pc, #164]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f136:	2200      	movs	r2, #0
 800f138:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800f13a:	4b28      	ldr	r3, [pc, #160]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f13c:	2263      	movs	r2, #99	; 0x63
 800f13e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f140:	4b26      	ldr	r3, [pc, #152]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f142:	2200      	movs	r2, #0
 800f144:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f146:	4b25      	ldr	r3, [pc, #148]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f148:	2200      	movs	r2, #0
 800f14a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800f14c:	4823      	ldr	r0, [pc, #140]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f14e:	f7f6 ffc5 	bl	80060dc <HAL_TIM_Base_Init>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d001      	beq.n	800f15c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800f158:	f7ff fb74 	bl	800e844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f15c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f160:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800f162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f166:	4619      	mov	r1, r3
 800f168:	481c      	ldr	r0, [pc, #112]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f16a:	f7f7 fd9b 	bl	8006ca4 <HAL_TIM_ConfigClockSource>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d001      	beq.n	800f178 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800f174:	f7ff fb66 	bl	800e844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800f178:	4818      	ldr	r0, [pc, #96]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f17a:	f7f7 f8b1 	bl	80062e0 <HAL_TIM_PWM_Init>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d001      	beq.n	800f188 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800f184:	f7ff fb5e 	bl	800e844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f188:	2300      	movs	r3, #0
 800f18a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f18c:	2300      	movs	r3, #0
 800f18e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f190:	f107 0320 	add.w	r3, r7, #32
 800f194:	4619      	mov	r1, r3
 800f196:	4811      	ldr	r0, [pc, #68]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f198:	f7f8 fc40 	bl	8007a1c <HAL_TIMEx_MasterConfigSynchronization>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d001      	beq.n	800f1a6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800f1a2:	f7ff fb4f 	bl	800e844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f1a6:	2360      	movs	r3, #96	; 0x60
 800f1a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f1b6:	1d3b      	adds	r3, r7, #4
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	4807      	ldr	r0, [pc, #28]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f1be:	f7f7 fbc7 	bl	8006950 <HAL_TIM_PWM_ConfigChannel>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d001      	beq.n	800f1cc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800f1c8:	f7ff fb3c 	bl	800e844 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800f1cc:	4803      	ldr	r0, [pc, #12]	; (800f1dc <MX_TIM3_Init+0xe4>)
 800f1ce:	f000 f82b 	bl	800f228 <HAL_TIM_MspPostInit>

}
 800f1d2:	bf00      	nop
 800f1d4:	3738      	adds	r7, #56	; 0x38
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	200011c8 	.word	0x200011c8
 800f1e0:	40000400 	.word	0x40000400

0800f1e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4a0b      	ldr	r2, [pc, #44]	; (800f220 <HAL_TIM_Base_MspInit+0x3c>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d10d      	bne.n	800f212 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	60fb      	str	r3, [r7, #12]
 800f1fa:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <HAL_TIM_Base_MspInit+0x40>)
 800f1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1fe:	4a09      	ldr	r2, [pc, #36]	; (800f224 <HAL_TIM_Base_MspInit+0x40>)
 800f200:	f043 0302 	orr.w	r3, r3, #2
 800f204:	6413      	str	r3, [r2, #64]	; 0x40
 800f206:	4b07      	ldr	r3, [pc, #28]	; (800f224 <HAL_TIM_Base_MspInit+0x40>)
 800f208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f20a:	f003 0302 	and.w	r3, r3, #2
 800f20e:	60fb      	str	r3, [r7, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800f212:	bf00      	nop
 800f214:	3714      	adds	r7, #20
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop
 800f220:	40000400 	.word	0x40000400
 800f224:	40023800 	.word	0x40023800

0800f228 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b088      	sub	sp, #32
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f230:	f107 030c 	add.w	r3, r7, #12
 800f234:	2200      	movs	r2, #0
 800f236:	601a      	str	r2, [r3, #0]
 800f238:	605a      	str	r2, [r3, #4]
 800f23a:	609a      	str	r2, [r3, #8]
 800f23c:	60da      	str	r2, [r3, #12]
 800f23e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a12      	ldr	r2, [pc, #72]	; (800f290 <HAL_TIM_MspPostInit+0x68>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d11d      	bne.n	800f286 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f24a:	2300      	movs	r3, #0
 800f24c:	60bb      	str	r3, [r7, #8]
 800f24e:	4b11      	ldr	r3, [pc, #68]	; (800f294 <HAL_TIM_MspPostInit+0x6c>)
 800f250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f252:	4a10      	ldr	r2, [pc, #64]	; (800f294 <HAL_TIM_MspPostInit+0x6c>)
 800f254:	f043 0301 	orr.w	r3, r3, #1
 800f258:	6313      	str	r3, [r2, #48]	; 0x30
 800f25a:	4b0e      	ldr	r3, [pc, #56]	; (800f294 <HAL_TIM_MspPostInit+0x6c>)
 800f25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f25e:	f003 0301 	and.w	r3, r3, #1
 800f262:	60bb      	str	r3, [r7, #8]
 800f264:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800f266:	2340      	movs	r3, #64	; 0x40
 800f268:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f26a:	2302      	movs	r3, #2
 800f26c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f26e:	2300      	movs	r3, #0
 800f270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f272:	2300      	movs	r3, #0
 800f274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f276:	2302      	movs	r3, #2
 800f278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f27a:	f107 030c 	add.w	r3, r7, #12
 800f27e:	4619      	mov	r1, r3
 800f280:	4805      	ldr	r0, [pc, #20]	; (800f298 <HAL_TIM_MspPostInit+0x70>)
 800f282:	f7f3 fa09 	bl	8002698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800f286:	bf00      	nop
 800f288:	3720      	adds	r7, #32
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	40000400 	.word	0x40000400
 800f294:	40023800 	.word	0x40023800
 800f298:	40020000 	.word	0x40020000

0800f29c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800f2a0:	4b11      	ldr	r3, [pc, #68]	; (800f2e8 <MX_USART2_UART_Init+0x4c>)
 800f2a2:	4a12      	ldr	r2, [pc, #72]	; (800f2ec <MX_USART2_UART_Init+0x50>)
 800f2a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800f2a6:	4b10      	ldr	r3, [pc, #64]	; (800f2e8 <MX_USART2_UART_Init+0x4c>)
 800f2a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f2ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f2ae:	4b0e      	ldr	r3, [pc, #56]	; (800f2e8 <MX_USART2_UART_Init+0x4c>)
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f2b4:	4b0c      	ldr	r3, [pc, #48]	; (800f2e8 <MX_USART2_UART_Init+0x4c>)
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f2ba:	4b0b      	ldr	r3, [pc, #44]	; (800f2e8 <MX_USART2_UART_Init+0x4c>)
 800f2bc:	2200      	movs	r2, #0
 800f2be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f2c0:	4b09      	ldr	r3, [pc, #36]	; (800f2e8 <MX_USART2_UART_Init+0x4c>)
 800f2c2:	220c      	movs	r2, #12
 800f2c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f2c6:	4b08      	ldr	r3, [pc, #32]	; (800f2e8 <MX_USART2_UART_Init+0x4c>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f2cc:	4b06      	ldr	r3, [pc, #24]	; (800f2e8 <MX_USART2_UART_Init+0x4c>)
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800f2d2:	4805      	ldr	r0, [pc, #20]	; (800f2e8 <MX_USART2_UART_Init+0x4c>)
 800f2d4:	f7f8 fc74 	bl	8007bc0 <HAL_UART_Init>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d001      	beq.n	800f2e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800f2de:	f7ff fab1 	bl	800e844 <Error_Handler>
  }

}
 800f2e2:	bf00      	nop
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	200012c8 	.word	0x200012c8
 800f2ec:	40004400 	.word	0x40004400

0800f2f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08a      	sub	sp, #40	; 0x28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2f8:	f107 0314 	add.w	r3, r7, #20
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	601a      	str	r2, [r3, #0]
 800f300:	605a      	str	r2, [r3, #4]
 800f302:	609a      	str	r2, [r3, #8]
 800f304:	60da      	str	r2, [r3, #12]
 800f306:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a4b      	ldr	r2, [pc, #300]	; (800f43c <HAL_UART_MspInit+0x14c>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	f040 8090 	bne.w	800f434 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800f314:	2300      	movs	r3, #0
 800f316:	613b      	str	r3, [r7, #16]
 800f318:	4b49      	ldr	r3, [pc, #292]	; (800f440 <HAL_UART_MspInit+0x150>)
 800f31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f31c:	4a48      	ldr	r2, [pc, #288]	; (800f440 <HAL_UART_MspInit+0x150>)
 800f31e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f322:	6413      	str	r3, [r2, #64]	; 0x40
 800f324:	4b46      	ldr	r3, [pc, #280]	; (800f440 <HAL_UART_MspInit+0x150>)
 800f326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f32c:	613b      	str	r3, [r7, #16]
 800f32e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f330:	2300      	movs	r3, #0
 800f332:	60fb      	str	r3, [r7, #12]
 800f334:	4b42      	ldr	r3, [pc, #264]	; (800f440 <HAL_UART_MspInit+0x150>)
 800f336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f338:	4a41      	ldr	r2, [pc, #260]	; (800f440 <HAL_UART_MspInit+0x150>)
 800f33a:	f043 0301 	orr.w	r3, r3, #1
 800f33e:	6313      	str	r3, [r2, #48]	; 0x30
 800f340:	4b3f      	ldr	r3, [pc, #252]	; (800f440 <HAL_UART_MspInit+0x150>)
 800f342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f344:	f003 0301 	and.w	r3, r3, #1
 800f348:	60fb      	str	r3, [r7, #12]
 800f34a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800f34c:	230c      	movs	r3, #12
 800f34e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f350:	2302      	movs	r3, #2
 800f352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f354:	2300      	movs	r3, #0
 800f356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f358:	2303      	movs	r3, #3
 800f35a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f35c:	2307      	movs	r3, #7
 800f35e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f360:	f107 0314 	add.w	r3, r7, #20
 800f364:	4619      	mov	r1, r3
 800f366:	4837      	ldr	r0, [pc, #220]	; (800f444 <HAL_UART_MspInit+0x154>)
 800f368:	f7f3 f996 	bl	8002698 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800f36c:	4b36      	ldr	r3, [pc, #216]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f36e:	4a37      	ldr	r2, [pc, #220]	; (800f44c <HAL_UART_MspInit+0x15c>)
 800f370:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800f372:	4b35      	ldr	r3, [pc, #212]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f374:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f378:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f37a:	4b33      	ldr	r3, [pc, #204]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f380:	4b31      	ldr	r3, [pc, #196]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f382:	2200      	movs	r2, #0
 800f384:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f386:	4b30      	ldr	r3, [pc, #192]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f38c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f38e:	4b2e      	ldr	r3, [pc, #184]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f390:	2200      	movs	r2, #0
 800f392:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f394:	4b2c      	ldr	r3, [pc, #176]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f396:	2200      	movs	r2, #0
 800f398:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800f39a:	4b2b      	ldr	r3, [pc, #172]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f39c:	2200      	movs	r2, #0
 800f39e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f3a0:	4b29      	ldr	r3, [pc, #164]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f3a6:	4b28      	ldr	r3, [pc, #160]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800f3ac:	4826      	ldr	r0, [pc, #152]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f3ae:	f7f1 ff57 	bl	8001260 <HAL_DMA_Init>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800f3b8:	f7ff fa44 	bl	800e844 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4a22      	ldr	r2, [pc, #136]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f3c0:	635a      	str	r2, [r3, #52]	; 0x34
 800f3c2:	4a21      	ldr	r2, [pc, #132]	; (800f448 <HAL_UART_MspInit+0x158>)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800f3c8:	4b21      	ldr	r3, [pc, #132]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f3ca:	4a22      	ldr	r2, [pc, #136]	; (800f454 <HAL_UART_MspInit+0x164>)
 800f3cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800f3ce:	4b20      	ldr	r3, [pc, #128]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f3d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f3d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f3d6:	4b1e      	ldr	r3, [pc, #120]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f3d8:	2240      	movs	r2, #64	; 0x40
 800f3da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f3dc:	4b1c      	ldr	r3, [pc, #112]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f3de:	2200      	movs	r2, #0
 800f3e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f3e2:	4b1b      	ldr	r3, [pc, #108]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f3e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f3e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f3ea:	4b19      	ldr	r3, [pc, #100]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f3f0:	4b17      	ldr	r3, [pc, #92]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800f3f6:	4b16      	ldr	r3, [pc, #88]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f3fc:	4b14      	ldr	r3, [pc, #80]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f3fe:	2200      	movs	r2, #0
 800f400:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f402:	4b13      	ldr	r3, [pc, #76]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f404:	2200      	movs	r2, #0
 800f406:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800f408:	4811      	ldr	r0, [pc, #68]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f40a:	f7f1 ff29 	bl	8001260 <HAL_DMA_Init>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d001      	beq.n	800f418 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800f414:	f7ff fa16 	bl	800e844 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4a0d      	ldr	r2, [pc, #52]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f41c:	631a      	str	r2, [r3, #48]	; 0x30
 800f41e:	4a0c      	ldr	r2, [pc, #48]	; (800f450 <HAL_UART_MspInit+0x160>)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800f424:	2200      	movs	r2, #0
 800f426:	2105      	movs	r1, #5
 800f428:	2026      	movs	r0, #38	; 0x26
 800f42a:	f7f1 fe77 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f42e:	2026      	movs	r0, #38	; 0x26
 800f430:	f7f1 fea0 	bl	8001174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800f434:	bf00      	nop
 800f436:	3728      	adds	r7, #40	; 0x28
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	40004400 	.word	0x40004400
 800f440:	40023800 	.word	0x40023800
 800f444:	40020000 	.word	0x40020000
 800f448:	20001208 	.word	0x20001208
 800f44c:	40026088 	.word	0x40026088
 800f450:	20001268 	.word	0x20001268
 800f454:	400260a0 	.word	0x400260a0

0800f458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800f458:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f490 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f45c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f45e:	e003      	b.n	800f468 <LoopCopyDataInit>

0800f460 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f460:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f462:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f464:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f466:	3104      	adds	r1, #4

0800f468 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f468:	480b      	ldr	r0, [pc, #44]	; (800f498 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f46a:	4b0c      	ldr	r3, [pc, #48]	; (800f49c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f46c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f46e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f470:	d3f6      	bcc.n	800f460 <CopyDataInit>
  ldr  r2, =_sbss
 800f472:	4a0b      	ldr	r2, [pc, #44]	; (800f4a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f474:	e002      	b.n	800f47c <LoopFillZerobss>

0800f476 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f476:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f478:	f842 3b04 	str.w	r3, [r2], #4

0800f47c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f47c:	4b09      	ldr	r3, [pc, #36]	; (800f4a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f47e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f480:	d3f9      	bcc.n	800f476 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f482:	f7ff fe23 	bl	800f0cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f486:	f000 f815 	bl	800f4b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f48a:	f7ff f91b 	bl	800e6c4 <main>
  bx  lr    
 800f48e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800f490:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f494:	08012500 	.word	0x08012500
  ldr  r0, =_sdata
 800f498:	20000080 	.word	0x20000080
  ldr  r3, =_edata
 800f49c:	20000264 	.word	0x20000264
  ldr  r2, =_sbss
 800f4a0:	20000264 	.word	0x20000264
  ldr  r3, = _ebss
 800f4a4:	20001308 	.word	0x20001308

0800f4a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f4a8:	e7fe      	b.n	800f4a8 <ADC_IRQHandler>

0800f4aa <atoi>:
 800f4aa:	220a      	movs	r2, #10
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	f000 becf 	b.w	8010250 <strtol>
	...

0800f4b4 <__libc_init_array>:
 800f4b4:	b570      	push	{r4, r5, r6, lr}
 800f4b6:	4e0d      	ldr	r6, [pc, #52]	; (800f4ec <__libc_init_array+0x38>)
 800f4b8:	4c0d      	ldr	r4, [pc, #52]	; (800f4f0 <__libc_init_array+0x3c>)
 800f4ba:	1ba4      	subs	r4, r4, r6
 800f4bc:	10a4      	asrs	r4, r4, #2
 800f4be:	2500      	movs	r5, #0
 800f4c0:	42a5      	cmp	r5, r4
 800f4c2:	d109      	bne.n	800f4d8 <__libc_init_array+0x24>
 800f4c4:	4e0b      	ldr	r6, [pc, #44]	; (800f4f4 <__libc_init_array+0x40>)
 800f4c6:	4c0c      	ldr	r4, [pc, #48]	; (800f4f8 <__libc_init_array+0x44>)
 800f4c8:	f002 f9d2 	bl	8011870 <_init>
 800f4cc:	1ba4      	subs	r4, r4, r6
 800f4ce:	10a4      	asrs	r4, r4, #2
 800f4d0:	2500      	movs	r5, #0
 800f4d2:	42a5      	cmp	r5, r4
 800f4d4:	d105      	bne.n	800f4e2 <__libc_init_array+0x2e>
 800f4d6:	bd70      	pop	{r4, r5, r6, pc}
 800f4d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4dc:	4798      	blx	r3
 800f4de:	3501      	adds	r5, #1
 800f4e0:	e7ee      	b.n	800f4c0 <__libc_init_array+0xc>
 800f4e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4e6:	4798      	blx	r3
 800f4e8:	3501      	adds	r5, #1
 800f4ea:	e7f2      	b.n	800f4d2 <__libc_init_array+0x1e>
 800f4ec:	080124f8 	.word	0x080124f8
 800f4f0:	080124f8 	.word	0x080124f8
 800f4f4:	080124f8 	.word	0x080124f8
 800f4f8:	080124fc 	.word	0x080124fc

0800f4fc <malloc>:
 800f4fc:	4b02      	ldr	r3, [pc, #8]	; (800f508 <malloc+0xc>)
 800f4fe:	4601      	mov	r1, r0
 800f500:	6818      	ldr	r0, [r3, #0]
 800f502:	f000 b86d 	b.w	800f5e0 <_malloc_r>
 800f506:	bf00      	nop
 800f508:	20000094 	.word	0x20000094

0800f50c <free>:
 800f50c:	4b02      	ldr	r3, [pc, #8]	; (800f518 <free+0xc>)
 800f50e:	4601      	mov	r1, r0
 800f510:	6818      	ldr	r0, [r3, #0]
 800f512:	f000 b817 	b.w	800f544 <_free_r>
 800f516:	bf00      	nop
 800f518:	20000094 	.word	0x20000094

0800f51c <memcpy>:
 800f51c:	b510      	push	{r4, lr}
 800f51e:	1e43      	subs	r3, r0, #1
 800f520:	440a      	add	r2, r1
 800f522:	4291      	cmp	r1, r2
 800f524:	d100      	bne.n	800f528 <memcpy+0xc>
 800f526:	bd10      	pop	{r4, pc}
 800f528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f52c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f530:	e7f7      	b.n	800f522 <memcpy+0x6>

0800f532 <memset>:
 800f532:	4402      	add	r2, r0
 800f534:	4603      	mov	r3, r0
 800f536:	4293      	cmp	r3, r2
 800f538:	d100      	bne.n	800f53c <memset+0xa>
 800f53a:	4770      	bx	lr
 800f53c:	f803 1b01 	strb.w	r1, [r3], #1
 800f540:	e7f9      	b.n	800f536 <memset+0x4>
	...

0800f544 <_free_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	4605      	mov	r5, r0
 800f548:	2900      	cmp	r1, #0
 800f54a:	d045      	beq.n	800f5d8 <_free_r+0x94>
 800f54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f550:	1f0c      	subs	r4, r1, #4
 800f552:	2b00      	cmp	r3, #0
 800f554:	bfb8      	it	lt
 800f556:	18e4      	addlt	r4, r4, r3
 800f558:	f7fd fbfa 	bl	800cd50 <__malloc_lock>
 800f55c:	4a1f      	ldr	r2, [pc, #124]	; (800f5dc <_free_r+0x98>)
 800f55e:	6813      	ldr	r3, [r2, #0]
 800f560:	4610      	mov	r0, r2
 800f562:	b933      	cbnz	r3, 800f572 <_free_r+0x2e>
 800f564:	6063      	str	r3, [r4, #4]
 800f566:	6014      	str	r4, [r2, #0]
 800f568:	4628      	mov	r0, r5
 800f56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f56e:	f7fd bc17 	b.w	800cda0 <__malloc_unlock>
 800f572:	42a3      	cmp	r3, r4
 800f574:	d90c      	bls.n	800f590 <_free_r+0x4c>
 800f576:	6821      	ldr	r1, [r4, #0]
 800f578:	1862      	adds	r2, r4, r1
 800f57a:	4293      	cmp	r3, r2
 800f57c:	bf04      	itt	eq
 800f57e:	681a      	ldreq	r2, [r3, #0]
 800f580:	685b      	ldreq	r3, [r3, #4]
 800f582:	6063      	str	r3, [r4, #4]
 800f584:	bf04      	itt	eq
 800f586:	1852      	addeq	r2, r2, r1
 800f588:	6022      	streq	r2, [r4, #0]
 800f58a:	6004      	str	r4, [r0, #0]
 800f58c:	e7ec      	b.n	800f568 <_free_r+0x24>
 800f58e:	4613      	mov	r3, r2
 800f590:	685a      	ldr	r2, [r3, #4]
 800f592:	b10a      	cbz	r2, 800f598 <_free_r+0x54>
 800f594:	42a2      	cmp	r2, r4
 800f596:	d9fa      	bls.n	800f58e <_free_r+0x4a>
 800f598:	6819      	ldr	r1, [r3, #0]
 800f59a:	1858      	adds	r0, r3, r1
 800f59c:	42a0      	cmp	r0, r4
 800f59e:	d10b      	bne.n	800f5b8 <_free_r+0x74>
 800f5a0:	6820      	ldr	r0, [r4, #0]
 800f5a2:	4401      	add	r1, r0
 800f5a4:	1858      	adds	r0, r3, r1
 800f5a6:	4282      	cmp	r2, r0
 800f5a8:	6019      	str	r1, [r3, #0]
 800f5aa:	d1dd      	bne.n	800f568 <_free_r+0x24>
 800f5ac:	6810      	ldr	r0, [r2, #0]
 800f5ae:	6852      	ldr	r2, [r2, #4]
 800f5b0:	605a      	str	r2, [r3, #4]
 800f5b2:	4401      	add	r1, r0
 800f5b4:	6019      	str	r1, [r3, #0]
 800f5b6:	e7d7      	b.n	800f568 <_free_r+0x24>
 800f5b8:	d902      	bls.n	800f5c0 <_free_r+0x7c>
 800f5ba:	230c      	movs	r3, #12
 800f5bc:	602b      	str	r3, [r5, #0]
 800f5be:	e7d3      	b.n	800f568 <_free_r+0x24>
 800f5c0:	6820      	ldr	r0, [r4, #0]
 800f5c2:	1821      	adds	r1, r4, r0
 800f5c4:	428a      	cmp	r2, r1
 800f5c6:	bf04      	itt	eq
 800f5c8:	6811      	ldreq	r1, [r2, #0]
 800f5ca:	6852      	ldreq	r2, [r2, #4]
 800f5cc:	6062      	str	r2, [r4, #4]
 800f5ce:	bf04      	itt	eq
 800f5d0:	1809      	addeq	r1, r1, r0
 800f5d2:	6021      	streq	r1, [r4, #0]
 800f5d4:	605c      	str	r4, [r3, #4]
 800f5d6:	e7c7      	b.n	800f568 <_free_r+0x24>
 800f5d8:	bd38      	pop	{r3, r4, r5, pc}
 800f5da:	bf00      	nop
 800f5dc:	20001084 	.word	0x20001084

0800f5e0 <_malloc_r>:
 800f5e0:	b570      	push	{r4, r5, r6, lr}
 800f5e2:	1ccd      	adds	r5, r1, #3
 800f5e4:	f025 0503 	bic.w	r5, r5, #3
 800f5e8:	3508      	adds	r5, #8
 800f5ea:	2d0c      	cmp	r5, #12
 800f5ec:	bf38      	it	cc
 800f5ee:	250c      	movcc	r5, #12
 800f5f0:	2d00      	cmp	r5, #0
 800f5f2:	4606      	mov	r6, r0
 800f5f4:	db01      	blt.n	800f5fa <_malloc_r+0x1a>
 800f5f6:	42a9      	cmp	r1, r5
 800f5f8:	d903      	bls.n	800f602 <_malloc_r+0x22>
 800f5fa:	230c      	movs	r3, #12
 800f5fc:	6033      	str	r3, [r6, #0]
 800f5fe:	2000      	movs	r0, #0
 800f600:	bd70      	pop	{r4, r5, r6, pc}
 800f602:	f7fd fba5 	bl	800cd50 <__malloc_lock>
 800f606:	4a21      	ldr	r2, [pc, #132]	; (800f68c <_malloc_r+0xac>)
 800f608:	6814      	ldr	r4, [r2, #0]
 800f60a:	4621      	mov	r1, r4
 800f60c:	b991      	cbnz	r1, 800f634 <_malloc_r+0x54>
 800f60e:	4c20      	ldr	r4, [pc, #128]	; (800f690 <_malloc_r+0xb0>)
 800f610:	6823      	ldr	r3, [r4, #0]
 800f612:	b91b      	cbnz	r3, 800f61c <_malloc_r+0x3c>
 800f614:	4630      	mov	r0, r6
 800f616:	f7fd fb3f 	bl	800cc98 <_sbrk_r>
 800f61a:	6020      	str	r0, [r4, #0]
 800f61c:	4629      	mov	r1, r5
 800f61e:	4630      	mov	r0, r6
 800f620:	f7fd fb3a 	bl	800cc98 <_sbrk_r>
 800f624:	1c43      	adds	r3, r0, #1
 800f626:	d124      	bne.n	800f672 <_malloc_r+0x92>
 800f628:	230c      	movs	r3, #12
 800f62a:	6033      	str	r3, [r6, #0]
 800f62c:	4630      	mov	r0, r6
 800f62e:	f7fd fbb7 	bl	800cda0 <__malloc_unlock>
 800f632:	e7e4      	b.n	800f5fe <_malloc_r+0x1e>
 800f634:	680b      	ldr	r3, [r1, #0]
 800f636:	1b5b      	subs	r3, r3, r5
 800f638:	d418      	bmi.n	800f66c <_malloc_r+0x8c>
 800f63a:	2b0b      	cmp	r3, #11
 800f63c:	d90f      	bls.n	800f65e <_malloc_r+0x7e>
 800f63e:	600b      	str	r3, [r1, #0]
 800f640:	50cd      	str	r5, [r1, r3]
 800f642:	18cc      	adds	r4, r1, r3
 800f644:	4630      	mov	r0, r6
 800f646:	f7fd fbab 	bl	800cda0 <__malloc_unlock>
 800f64a:	f104 000b 	add.w	r0, r4, #11
 800f64e:	1d23      	adds	r3, r4, #4
 800f650:	f020 0007 	bic.w	r0, r0, #7
 800f654:	1ac3      	subs	r3, r0, r3
 800f656:	d0d3      	beq.n	800f600 <_malloc_r+0x20>
 800f658:	425a      	negs	r2, r3
 800f65a:	50e2      	str	r2, [r4, r3]
 800f65c:	e7d0      	b.n	800f600 <_malloc_r+0x20>
 800f65e:	428c      	cmp	r4, r1
 800f660:	684b      	ldr	r3, [r1, #4]
 800f662:	bf16      	itet	ne
 800f664:	6063      	strne	r3, [r4, #4]
 800f666:	6013      	streq	r3, [r2, #0]
 800f668:	460c      	movne	r4, r1
 800f66a:	e7eb      	b.n	800f644 <_malloc_r+0x64>
 800f66c:	460c      	mov	r4, r1
 800f66e:	6849      	ldr	r1, [r1, #4]
 800f670:	e7cc      	b.n	800f60c <_malloc_r+0x2c>
 800f672:	1cc4      	adds	r4, r0, #3
 800f674:	f024 0403 	bic.w	r4, r4, #3
 800f678:	42a0      	cmp	r0, r4
 800f67a:	d005      	beq.n	800f688 <_malloc_r+0xa8>
 800f67c:	1a21      	subs	r1, r4, r0
 800f67e:	4630      	mov	r0, r6
 800f680:	f7fd fb0a 	bl	800cc98 <_sbrk_r>
 800f684:	3001      	adds	r0, #1
 800f686:	d0cf      	beq.n	800f628 <_malloc_r+0x48>
 800f688:	6025      	str	r5, [r4, #0]
 800f68a:	e7db      	b.n	800f644 <_malloc_r+0x64>
 800f68c:	20001084 	.word	0x20001084
 800f690:	20001088 	.word	0x20001088

0800f694 <__cvt>:
 800f694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f698:	ec55 4b10 	vmov	r4, r5, d0
 800f69c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f69e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f6a2:	2d00      	cmp	r5, #0
 800f6a4:	460e      	mov	r6, r1
 800f6a6:	4691      	mov	r9, r2
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	bfb8      	it	lt
 800f6ac:	4622      	movlt	r2, r4
 800f6ae:	462b      	mov	r3, r5
 800f6b0:	f027 0720 	bic.w	r7, r7, #32
 800f6b4:	bfbb      	ittet	lt
 800f6b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f6ba:	461d      	movlt	r5, r3
 800f6bc:	2300      	movge	r3, #0
 800f6be:	232d      	movlt	r3, #45	; 0x2d
 800f6c0:	bfb8      	it	lt
 800f6c2:	4614      	movlt	r4, r2
 800f6c4:	2f46      	cmp	r7, #70	; 0x46
 800f6c6:	700b      	strb	r3, [r1, #0]
 800f6c8:	d004      	beq.n	800f6d4 <__cvt+0x40>
 800f6ca:	2f45      	cmp	r7, #69	; 0x45
 800f6cc:	d100      	bne.n	800f6d0 <__cvt+0x3c>
 800f6ce:	3601      	adds	r6, #1
 800f6d0:	2102      	movs	r1, #2
 800f6d2:	e000      	b.n	800f6d6 <__cvt+0x42>
 800f6d4:	2103      	movs	r1, #3
 800f6d6:	ab03      	add	r3, sp, #12
 800f6d8:	9301      	str	r3, [sp, #4]
 800f6da:	ab02      	add	r3, sp, #8
 800f6dc:	9300      	str	r3, [sp, #0]
 800f6de:	4632      	mov	r2, r6
 800f6e0:	4653      	mov	r3, sl
 800f6e2:	ec45 4b10 	vmov	d0, r4, r5
 800f6e6:	f000 fe57 	bl	8010398 <_dtoa_r>
 800f6ea:	2f47      	cmp	r7, #71	; 0x47
 800f6ec:	4680      	mov	r8, r0
 800f6ee:	d102      	bne.n	800f6f6 <__cvt+0x62>
 800f6f0:	f019 0f01 	tst.w	r9, #1
 800f6f4:	d026      	beq.n	800f744 <__cvt+0xb0>
 800f6f6:	2f46      	cmp	r7, #70	; 0x46
 800f6f8:	eb08 0906 	add.w	r9, r8, r6
 800f6fc:	d111      	bne.n	800f722 <__cvt+0x8e>
 800f6fe:	f898 3000 	ldrb.w	r3, [r8]
 800f702:	2b30      	cmp	r3, #48	; 0x30
 800f704:	d10a      	bne.n	800f71c <__cvt+0x88>
 800f706:	2200      	movs	r2, #0
 800f708:	2300      	movs	r3, #0
 800f70a:	4620      	mov	r0, r4
 800f70c:	4629      	mov	r1, r5
 800f70e:	f7f1 f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 800f712:	b918      	cbnz	r0, 800f71c <__cvt+0x88>
 800f714:	f1c6 0601 	rsb	r6, r6, #1
 800f718:	f8ca 6000 	str.w	r6, [sl]
 800f71c:	f8da 3000 	ldr.w	r3, [sl]
 800f720:	4499      	add	r9, r3
 800f722:	2200      	movs	r2, #0
 800f724:	2300      	movs	r3, #0
 800f726:	4620      	mov	r0, r4
 800f728:	4629      	mov	r1, r5
 800f72a:	f7f1 f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800f72e:	b938      	cbnz	r0, 800f740 <__cvt+0xac>
 800f730:	2230      	movs	r2, #48	; 0x30
 800f732:	9b03      	ldr	r3, [sp, #12]
 800f734:	454b      	cmp	r3, r9
 800f736:	d205      	bcs.n	800f744 <__cvt+0xb0>
 800f738:	1c59      	adds	r1, r3, #1
 800f73a:	9103      	str	r1, [sp, #12]
 800f73c:	701a      	strb	r2, [r3, #0]
 800f73e:	e7f8      	b.n	800f732 <__cvt+0x9e>
 800f740:	f8cd 900c 	str.w	r9, [sp, #12]
 800f744:	9b03      	ldr	r3, [sp, #12]
 800f746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f748:	eba3 0308 	sub.w	r3, r3, r8
 800f74c:	4640      	mov	r0, r8
 800f74e:	6013      	str	r3, [r2, #0]
 800f750:	b004      	add	sp, #16
 800f752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f756 <__exponent>:
 800f756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f758:	2900      	cmp	r1, #0
 800f75a:	4604      	mov	r4, r0
 800f75c:	bfba      	itte	lt
 800f75e:	4249      	neglt	r1, r1
 800f760:	232d      	movlt	r3, #45	; 0x2d
 800f762:	232b      	movge	r3, #43	; 0x2b
 800f764:	2909      	cmp	r1, #9
 800f766:	f804 2b02 	strb.w	r2, [r4], #2
 800f76a:	7043      	strb	r3, [r0, #1]
 800f76c:	dd20      	ble.n	800f7b0 <__exponent+0x5a>
 800f76e:	f10d 0307 	add.w	r3, sp, #7
 800f772:	461f      	mov	r7, r3
 800f774:	260a      	movs	r6, #10
 800f776:	fb91 f5f6 	sdiv	r5, r1, r6
 800f77a:	fb06 1115 	mls	r1, r6, r5, r1
 800f77e:	3130      	adds	r1, #48	; 0x30
 800f780:	2d09      	cmp	r5, #9
 800f782:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f786:	f103 32ff 	add.w	r2, r3, #4294967295
 800f78a:	4629      	mov	r1, r5
 800f78c:	dc09      	bgt.n	800f7a2 <__exponent+0x4c>
 800f78e:	3130      	adds	r1, #48	; 0x30
 800f790:	3b02      	subs	r3, #2
 800f792:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f796:	42bb      	cmp	r3, r7
 800f798:	4622      	mov	r2, r4
 800f79a:	d304      	bcc.n	800f7a6 <__exponent+0x50>
 800f79c:	1a10      	subs	r0, r2, r0
 800f79e:	b003      	add	sp, #12
 800f7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	e7e7      	b.n	800f776 <__exponent+0x20>
 800f7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7aa:	f804 2b01 	strb.w	r2, [r4], #1
 800f7ae:	e7f2      	b.n	800f796 <__exponent+0x40>
 800f7b0:	2330      	movs	r3, #48	; 0x30
 800f7b2:	4419      	add	r1, r3
 800f7b4:	7083      	strb	r3, [r0, #2]
 800f7b6:	1d02      	adds	r2, r0, #4
 800f7b8:	70c1      	strb	r1, [r0, #3]
 800f7ba:	e7ef      	b.n	800f79c <__exponent+0x46>

0800f7bc <_printf_float>:
 800f7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c0:	b08d      	sub	sp, #52	; 0x34
 800f7c2:	460c      	mov	r4, r1
 800f7c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f7c8:	4616      	mov	r6, r2
 800f7ca:	461f      	mov	r7, r3
 800f7cc:	4605      	mov	r5, r0
 800f7ce:	f001 fb9f 	bl	8010f10 <_localeconv_r>
 800f7d2:	6803      	ldr	r3, [r0, #0]
 800f7d4:	9304      	str	r3, [sp, #16]
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7f0 fd02 	bl	80001e0 <strlen>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	930a      	str	r3, [sp, #40]	; 0x28
 800f7e0:	f8d8 3000 	ldr.w	r3, [r8]
 800f7e4:	9005      	str	r0, [sp, #20]
 800f7e6:	3307      	adds	r3, #7
 800f7e8:	f023 0307 	bic.w	r3, r3, #7
 800f7ec:	f103 0208 	add.w	r2, r3, #8
 800f7f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f7f4:	f8d4 b000 	ldr.w	fp, [r4]
 800f7f8:	f8c8 2000 	str.w	r2, [r8]
 800f7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f800:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f804:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f808:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f80c:	9307      	str	r3, [sp, #28]
 800f80e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f812:	f04f 32ff 	mov.w	r2, #4294967295
 800f816:	4ba7      	ldr	r3, [pc, #668]	; (800fab4 <_printf_float+0x2f8>)
 800f818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f81c:	f7f1 f98e 	bl	8000b3c <__aeabi_dcmpun>
 800f820:	bb70      	cbnz	r0, 800f880 <_printf_float+0xc4>
 800f822:	f04f 32ff 	mov.w	r2, #4294967295
 800f826:	4ba3      	ldr	r3, [pc, #652]	; (800fab4 <_printf_float+0x2f8>)
 800f828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f82c:	f7f1 f968 	bl	8000b00 <__aeabi_dcmple>
 800f830:	bb30      	cbnz	r0, 800f880 <_printf_float+0xc4>
 800f832:	2200      	movs	r2, #0
 800f834:	2300      	movs	r3, #0
 800f836:	4640      	mov	r0, r8
 800f838:	4649      	mov	r1, r9
 800f83a:	f7f1 f957 	bl	8000aec <__aeabi_dcmplt>
 800f83e:	b110      	cbz	r0, 800f846 <_printf_float+0x8a>
 800f840:	232d      	movs	r3, #45	; 0x2d
 800f842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f846:	4a9c      	ldr	r2, [pc, #624]	; (800fab8 <_printf_float+0x2fc>)
 800f848:	4b9c      	ldr	r3, [pc, #624]	; (800fabc <_printf_float+0x300>)
 800f84a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f84e:	bf8c      	ite	hi
 800f850:	4690      	movhi	r8, r2
 800f852:	4698      	movls	r8, r3
 800f854:	2303      	movs	r3, #3
 800f856:	f02b 0204 	bic.w	r2, fp, #4
 800f85a:	6123      	str	r3, [r4, #16]
 800f85c:	6022      	str	r2, [r4, #0]
 800f85e:	f04f 0900 	mov.w	r9, #0
 800f862:	9700      	str	r7, [sp, #0]
 800f864:	4633      	mov	r3, r6
 800f866:	aa0b      	add	r2, sp, #44	; 0x2c
 800f868:	4621      	mov	r1, r4
 800f86a:	4628      	mov	r0, r5
 800f86c:	f000 f9e6 	bl	800fc3c <_printf_common>
 800f870:	3001      	adds	r0, #1
 800f872:	f040 808d 	bne.w	800f990 <_printf_float+0x1d4>
 800f876:	f04f 30ff 	mov.w	r0, #4294967295
 800f87a:	b00d      	add	sp, #52	; 0x34
 800f87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f880:	4642      	mov	r2, r8
 800f882:	464b      	mov	r3, r9
 800f884:	4640      	mov	r0, r8
 800f886:	4649      	mov	r1, r9
 800f888:	f7f1 f958 	bl	8000b3c <__aeabi_dcmpun>
 800f88c:	b110      	cbz	r0, 800f894 <_printf_float+0xd8>
 800f88e:	4a8c      	ldr	r2, [pc, #560]	; (800fac0 <_printf_float+0x304>)
 800f890:	4b8c      	ldr	r3, [pc, #560]	; (800fac4 <_printf_float+0x308>)
 800f892:	e7da      	b.n	800f84a <_printf_float+0x8e>
 800f894:	6861      	ldr	r1, [r4, #4]
 800f896:	1c4b      	adds	r3, r1, #1
 800f898:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f89c:	a80a      	add	r0, sp, #40	; 0x28
 800f89e:	d13e      	bne.n	800f91e <_printf_float+0x162>
 800f8a0:	2306      	movs	r3, #6
 800f8a2:	6063      	str	r3, [r4, #4]
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f8aa:	ab09      	add	r3, sp, #36	; 0x24
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	ec49 8b10 	vmov	d0, r8, r9
 800f8b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f8b6:	6022      	str	r2, [r4, #0]
 800f8b8:	f8cd a004 	str.w	sl, [sp, #4]
 800f8bc:	6861      	ldr	r1, [r4, #4]
 800f8be:	4628      	mov	r0, r5
 800f8c0:	f7ff fee8 	bl	800f694 <__cvt>
 800f8c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f8c8:	2b47      	cmp	r3, #71	; 0x47
 800f8ca:	4680      	mov	r8, r0
 800f8cc:	d109      	bne.n	800f8e2 <_printf_float+0x126>
 800f8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8d0:	1cd8      	adds	r0, r3, #3
 800f8d2:	db02      	blt.n	800f8da <_printf_float+0x11e>
 800f8d4:	6862      	ldr	r2, [r4, #4]
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	dd47      	ble.n	800f96a <_printf_float+0x1ae>
 800f8da:	f1aa 0a02 	sub.w	sl, sl, #2
 800f8de:	fa5f fa8a 	uxtb.w	sl, sl
 800f8e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f8e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8e8:	d824      	bhi.n	800f934 <_printf_float+0x178>
 800f8ea:	3901      	subs	r1, #1
 800f8ec:	4652      	mov	r2, sl
 800f8ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f8f2:	9109      	str	r1, [sp, #36]	; 0x24
 800f8f4:	f7ff ff2f 	bl	800f756 <__exponent>
 800f8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8fa:	1813      	adds	r3, r2, r0
 800f8fc:	2a01      	cmp	r2, #1
 800f8fe:	4681      	mov	r9, r0
 800f900:	6123      	str	r3, [r4, #16]
 800f902:	dc02      	bgt.n	800f90a <_printf_float+0x14e>
 800f904:	6822      	ldr	r2, [r4, #0]
 800f906:	07d1      	lsls	r1, r2, #31
 800f908:	d501      	bpl.n	800f90e <_printf_float+0x152>
 800f90a:	3301      	adds	r3, #1
 800f90c:	6123      	str	r3, [r4, #16]
 800f90e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f912:	2b00      	cmp	r3, #0
 800f914:	d0a5      	beq.n	800f862 <_printf_float+0xa6>
 800f916:	232d      	movs	r3, #45	; 0x2d
 800f918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f91c:	e7a1      	b.n	800f862 <_printf_float+0xa6>
 800f91e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f922:	f000 8177 	beq.w	800fc14 <_printf_float+0x458>
 800f926:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f92a:	d1bb      	bne.n	800f8a4 <_printf_float+0xe8>
 800f92c:	2900      	cmp	r1, #0
 800f92e:	d1b9      	bne.n	800f8a4 <_printf_float+0xe8>
 800f930:	2301      	movs	r3, #1
 800f932:	e7b6      	b.n	800f8a2 <_printf_float+0xe6>
 800f934:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f938:	d119      	bne.n	800f96e <_printf_float+0x1b2>
 800f93a:	2900      	cmp	r1, #0
 800f93c:	6863      	ldr	r3, [r4, #4]
 800f93e:	dd0c      	ble.n	800f95a <_printf_float+0x19e>
 800f940:	6121      	str	r1, [r4, #16]
 800f942:	b913      	cbnz	r3, 800f94a <_printf_float+0x18e>
 800f944:	6822      	ldr	r2, [r4, #0]
 800f946:	07d2      	lsls	r2, r2, #31
 800f948:	d502      	bpl.n	800f950 <_printf_float+0x194>
 800f94a:	3301      	adds	r3, #1
 800f94c:	440b      	add	r3, r1
 800f94e:	6123      	str	r3, [r4, #16]
 800f950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f952:	65a3      	str	r3, [r4, #88]	; 0x58
 800f954:	f04f 0900 	mov.w	r9, #0
 800f958:	e7d9      	b.n	800f90e <_printf_float+0x152>
 800f95a:	b913      	cbnz	r3, 800f962 <_printf_float+0x1a6>
 800f95c:	6822      	ldr	r2, [r4, #0]
 800f95e:	07d0      	lsls	r0, r2, #31
 800f960:	d501      	bpl.n	800f966 <_printf_float+0x1aa>
 800f962:	3302      	adds	r3, #2
 800f964:	e7f3      	b.n	800f94e <_printf_float+0x192>
 800f966:	2301      	movs	r3, #1
 800f968:	e7f1      	b.n	800f94e <_printf_float+0x192>
 800f96a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f96e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f972:	4293      	cmp	r3, r2
 800f974:	db05      	blt.n	800f982 <_printf_float+0x1c6>
 800f976:	6822      	ldr	r2, [r4, #0]
 800f978:	6123      	str	r3, [r4, #16]
 800f97a:	07d1      	lsls	r1, r2, #31
 800f97c:	d5e8      	bpl.n	800f950 <_printf_float+0x194>
 800f97e:	3301      	adds	r3, #1
 800f980:	e7e5      	b.n	800f94e <_printf_float+0x192>
 800f982:	2b00      	cmp	r3, #0
 800f984:	bfd4      	ite	le
 800f986:	f1c3 0302 	rsble	r3, r3, #2
 800f98a:	2301      	movgt	r3, #1
 800f98c:	4413      	add	r3, r2
 800f98e:	e7de      	b.n	800f94e <_printf_float+0x192>
 800f990:	6823      	ldr	r3, [r4, #0]
 800f992:	055a      	lsls	r2, r3, #21
 800f994:	d407      	bmi.n	800f9a6 <_printf_float+0x1ea>
 800f996:	6923      	ldr	r3, [r4, #16]
 800f998:	4642      	mov	r2, r8
 800f99a:	4631      	mov	r1, r6
 800f99c:	4628      	mov	r0, r5
 800f99e:	47b8      	blx	r7
 800f9a0:	3001      	adds	r0, #1
 800f9a2:	d12b      	bne.n	800f9fc <_printf_float+0x240>
 800f9a4:	e767      	b.n	800f876 <_printf_float+0xba>
 800f9a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f9aa:	f240 80dc 	bls.w	800fb66 <_printf_float+0x3aa>
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f9b6:	f7f1 f88f 	bl	8000ad8 <__aeabi_dcmpeq>
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d033      	beq.n	800fa26 <_printf_float+0x26a>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	4a41      	ldr	r2, [pc, #260]	; (800fac8 <_printf_float+0x30c>)
 800f9c2:	4631      	mov	r1, r6
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	47b8      	blx	r7
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	f43f af54 	beq.w	800f876 <_printf_float+0xba>
 800f9ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	db02      	blt.n	800f9dc <_printf_float+0x220>
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	07d8      	lsls	r0, r3, #31
 800f9da:	d50f      	bpl.n	800f9fc <_printf_float+0x240>
 800f9dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9e0:	4631      	mov	r1, r6
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	47b8      	blx	r7
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	f43f af45 	beq.w	800f876 <_printf_float+0xba>
 800f9ec:	f04f 0800 	mov.w	r8, #0
 800f9f0:	f104 091a 	add.w	r9, r4, #26
 800f9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	4543      	cmp	r3, r8
 800f9fa:	dc09      	bgt.n	800fa10 <_printf_float+0x254>
 800f9fc:	6823      	ldr	r3, [r4, #0]
 800f9fe:	079b      	lsls	r3, r3, #30
 800fa00:	f100 8103 	bmi.w	800fc0a <_printf_float+0x44e>
 800fa04:	68e0      	ldr	r0, [r4, #12]
 800fa06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa08:	4298      	cmp	r0, r3
 800fa0a:	bfb8      	it	lt
 800fa0c:	4618      	movlt	r0, r3
 800fa0e:	e734      	b.n	800f87a <_printf_float+0xbe>
 800fa10:	2301      	movs	r3, #1
 800fa12:	464a      	mov	r2, r9
 800fa14:	4631      	mov	r1, r6
 800fa16:	4628      	mov	r0, r5
 800fa18:	47b8      	blx	r7
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	f43f af2b 	beq.w	800f876 <_printf_float+0xba>
 800fa20:	f108 0801 	add.w	r8, r8, #1
 800fa24:	e7e6      	b.n	800f9f4 <_printf_float+0x238>
 800fa26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	dc2b      	bgt.n	800fa84 <_printf_float+0x2c8>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	4a26      	ldr	r2, [pc, #152]	; (800fac8 <_printf_float+0x30c>)
 800fa30:	4631      	mov	r1, r6
 800fa32:	4628      	mov	r0, r5
 800fa34:	47b8      	blx	r7
 800fa36:	3001      	adds	r0, #1
 800fa38:	f43f af1d 	beq.w	800f876 <_printf_float+0xba>
 800fa3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa3e:	b923      	cbnz	r3, 800fa4a <_printf_float+0x28e>
 800fa40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa42:	b913      	cbnz	r3, 800fa4a <_printf_float+0x28e>
 800fa44:	6823      	ldr	r3, [r4, #0]
 800fa46:	07d9      	lsls	r1, r3, #31
 800fa48:	d5d8      	bpl.n	800f9fc <_printf_float+0x240>
 800fa4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa4e:	4631      	mov	r1, r6
 800fa50:	4628      	mov	r0, r5
 800fa52:	47b8      	blx	r7
 800fa54:	3001      	adds	r0, #1
 800fa56:	f43f af0e 	beq.w	800f876 <_printf_float+0xba>
 800fa5a:	f04f 0900 	mov.w	r9, #0
 800fa5e:	f104 0a1a 	add.w	sl, r4, #26
 800fa62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa64:	425b      	negs	r3, r3
 800fa66:	454b      	cmp	r3, r9
 800fa68:	dc01      	bgt.n	800fa6e <_printf_float+0x2b2>
 800fa6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa6c:	e794      	b.n	800f998 <_printf_float+0x1dc>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	4652      	mov	r2, sl
 800fa72:	4631      	mov	r1, r6
 800fa74:	4628      	mov	r0, r5
 800fa76:	47b8      	blx	r7
 800fa78:	3001      	adds	r0, #1
 800fa7a:	f43f aefc 	beq.w	800f876 <_printf_float+0xba>
 800fa7e:	f109 0901 	add.w	r9, r9, #1
 800fa82:	e7ee      	b.n	800fa62 <_printf_float+0x2a6>
 800fa84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	bfa8      	it	ge
 800fa8c:	461a      	movge	r2, r3
 800fa8e:	2a00      	cmp	r2, #0
 800fa90:	4691      	mov	r9, r2
 800fa92:	dd07      	ble.n	800faa4 <_printf_float+0x2e8>
 800fa94:	4613      	mov	r3, r2
 800fa96:	4631      	mov	r1, r6
 800fa98:	4642      	mov	r2, r8
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	47b8      	blx	r7
 800fa9e:	3001      	adds	r0, #1
 800faa0:	f43f aee9 	beq.w	800f876 <_printf_float+0xba>
 800faa4:	f104 031a 	add.w	r3, r4, #26
 800faa8:	f04f 0b00 	mov.w	fp, #0
 800faac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fab0:	9306      	str	r3, [sp, #24]
 800fab2:	e015      	b.n	800fae0 <_printf_float+0x324>
 800fab4:	7fefffff 	.word	0x7fefffff
 800fab8:	08012294 	.word	0x08012294
 800fabc:	08012290 	.word	0x08012290
 800fac0:	0801229c 	.word	0x0801229c
 800fac4:	08012298 	.word	0x08012298
 800fac8:	080122a0 	.word	0x080122a0
 800facc:	2301      	movs	r3, #1
 800face:	9a06      	ldr	r2, [sp, #24]
 800fad0:	4631      	mov	r1, r6
 800fad2:	4628      	mov	r0, r5
 800fad4:	47b8      	blx	r7
 800fad6:	3001      	adds	r0, #1
 800fad8:	f43f aecd 	beq.w	800f876 <_printf_float+0xba>
 800fadc:	f10b 0b01 	add.w	fp, fp, #1
 800fae0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800fae4:	ebaa 0309 	sub.w	r3, sl, r9
 800fae8:	455b      	cmp	r3, fp
 800faea:	dcef      	bgt.n	800facc <_printf_float+0x310>
 800faec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800faf0:	429a      	cmp	r2, r3
 800faf2:	44d0      	add	r8, sl
 800faf4:	db15      	blt.n	800fb22 <_printf_float+0x366>
 800faf6:	6823      	ldr	r3, [r4, #0]
 800faf8:	07da      	lsls	r2, r3, #31
 800fafa:	d412      	bmi.n	800fb22 <_printf_float+0x366>
 800fafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fafe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb00:	eba3 020a 	sub.w	r2, r3, sl
 800fb04:	eba3 0a01 	sub.w	sl, r3, r1
 800fb08:	4592      	cmp	sl, r2
 800fb0a:	bfa8      	it	ge
 800fb0c:	4692      	movge	sl, r2
 800fb0e:	f1ba 0f00 	cmp.w	sl, #0
 800fb12:	dc0e      	bgt.n	800fb32 <_printf_float+0x376>
 800fb14:	f04f 0800 	mov.w	r8, #0
 800fb18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb1c:	f104 091a 	add.w	r9, r4, #26
 800fb20:	e019      	b.n	800fb56 <_printf_float+0x39a>
 800fb22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb26:	4631      	mov	r1, r6
 800fb28:	4628      	mov	r0, r5
 800fb2a:	47b8      	blx	r7
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	d1e5      	bne.n	800fafc <_printf_float+0x340>
 800fb30:	e6a1      	b.n	800f876 <_printf_float+0xba>
 800fb32:	4653      	mov	r3, sl
 800fb34:	4642      	mov	r2, r8
 800fb36:	4631      	mov	r1, r6
 800fb38:	4628      	mov	r0, r5
 800fb3a:	47b8      	blx	r7
 800fb3c:	3001      	adds	r0, #1
 800fb3e:	d1e9      	bne.n	800fb14 <_printf_float+0x358>
 800fb40:	e699      	b.n	800f876 <_printf_float+0xba>
 800fb42:	2301      	movs	r3, #1
 800fb44:	464a      	mov	r2, r9
 800fb46:	4631      	mov	r1, r6
 800fb48:	4628      	mov	r0, r5
 800fb4a:	47b8      	blx	r7
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	f43f ae92 	beq.w	800f876 <_printf_float+0xba>
 800fb52:	f108 0801 	add.w	r8, r8, #1
 800fb56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb5a:	1a9b      	subs	r3, r3, r2
 800fb5c:	eba3 030a 	sub.w	r3, r3, sl
 800fb60:	4543      	cmp	r3, r8
 800fb62:	dcee      	bgt.n	800fb42 <_printf_float+0x386>
 800fb64:	e74a      	b.n	800f9fc <_printf_float+0x240>
 800fb66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb68:	2a01      	cmp	r2, #1
 800fb6a:	dc01      	bgt.n	800fb70 <_printf_float+0x3b4>
 800fb6c:	07db      	lsls	r3, r3, #31
 800fb6e:	d53a      	bpl.n	800fbe6 <_printf_float+0x42a>
 800fb70:	2301      	movs	r3, #1
 800fb72:	4642      	mov	r2, r8
 800fb74:	4631      	mov	r1, r6
 800fb76:	4628      	mov	r0, r5
 800fb78:	47b8      	blx	r7
 800fb7a:	3001      	adds	r0, #1
 800fb7c:	f43f ae7b 	beq.w	800f876 <_printf_float+0xba>
 800fb80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb84:	4631      	mov	r1, r6
 800fb86:	4628      	mov	r0, r5
 800fb88:	47b8      	blx	r7
 800fb8a:	3001      	adds	r0, #1
 800fb8c:	f108 0801 	add.w	r8, r8, #1
 800fb90:	f43f ae71 	beq.w	800f876 <_printf_float+0xba>
 800fb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb96:	2200      	movs	r2, #0
 800fb98:	f103 3aff 	add.w	sl, r3, #4294967295
 800fb9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fba0:	2300      	movs	r3, #0
 800fba2:	f7f0 ff99 	bl	8000ad8 <__aeabi_dcmpeq>
 800fba6:	b9c8      	cbnz	r0, 800fbdc <_printf_float+0x420>
 800fba8:	4653      	mov	r3, sl
 800fbaa:	4642      	mov	r2, r8
 800fbac:	4631      	mov	r1, r6
 800fbae:	4628      	mov	r0, r5
 800fbb0:	47b8      	blx	r7
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	d10e      	bne.n	800fbd4 <_printf_float+0x418>
 800fbb6:	e65e      	b.n	800f876 <_printf_float+0xba>
 800fbb8:	2301      	movs	r3, #1
 800fbba:	4652      	mov	r2, sl
 800fbbc:	4631      	mov	r1, r6
 800fbbe:	4628      	mov	r0, r5
 800fbc0:	47b8      	blx	r7
 800fbc2:	3001      	adds	r0, #1
 800fbc4:	f43f ae57 	beq.w	800f876 <_printf_float+0xba>
 800fbc8:	f108 0801 	add.w	r8, r8, #1
 800fbcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	4543      	cmp	r3, r8
 800fbd2:	dcf1      	bgt.n	800fbb8 <_printf_float+0x3fc>
 800fbd4:	464b      	mov	r3, r9
 800fbd6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fbda:	e6de      	b.n	800f99a <_printf_float+0x1de>
 800fbdc:	f04f 0800 	mov.w	r8, #0
 800fbe0:	f104 0a1a 	add.w	sl, r4, #26
 800fbe4:	e7f2      	b.n	800fbcc <_printf_float+0x410>
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	e7df      	b.n	800fbaa <_printf_float+0x3ee>
 800fbea:	2301      	movs	r3, #1
 800fbec:	464a      	mov	r2, r9
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	47b8      	blx	r7
 800fbf4:	3001      	adds	r0, #1
 800fbf6:	f43f ae3e 	beq.w	800f876 <_printf_float+0xba>
 800fbfa:	f108 0801 	add.w	r8, r8, #1
 800fbfe:	68e3      	ldr	r3, [r4, #12]
 800fc00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc02:	1a9b      	subs	r3, r3, r2
 800fc04:	4543      	cmp	r3, r8
 800fc06:	dcf0      	bgt.n	800fbea <_printf_float+0x42e>
 800fc08:	e6fc      	b.n	800fa04 <_printf_float+0x248>
 800fc0a:	f04f 0800 	mov.w	r8, #0
 800fc0e:	f104 0919 	add.w	r9, r4, #25
 800fc12:	e7f4      	b.n	800fbfe <_printf_float+0x442>
 800fc14:	2900      	cmp	r1, #0
 800fc16:	f43f ae8b 	beq.w	800f930 <_printf_float+0x174>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fc20:	ab09      	add	r3, sp, #36	; 0x24
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	ec49 8b10 	vmov	d0, r8, r9
 800fc28:	6022      	str	r2, [r4, #0]
 800fc2a:	f8cd a004 	str.w	sl, [sp, #4]
 800fc2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fc32:	4628      	mov	r0, r5
 800fc34:	f7ff fd2e 	bl	800f694 <__cvt>
 800fc38:	4680      	mov	r8, r0
 800fc3a:	e648      	b.n	800f8ce <_printf_float+0x112>

0800fc3c <_printf_common>:
 800fc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc40:	4691      	mov	r9, r2
 800fc42:	461f      	mov	r7, r3
 800fc44:	688a      	ldr	r2, [r1, #8]
 800fc46:	690b      	ldr	r3, [r1, #16]
 800fc48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	bfb8      	it	lt
 800fc50:	4613      	movlt	r3, r2
 800fc52:	f8c9 3000 	str.w	r3, [r9]
 800fc56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	b112      	cbz	r2, 800fc66 <_printf_common+0x2a>
 800fc60:	3301      	adds	r3, #1
 800fc62:	f8c9 3000 	str.w	r3, [r9]
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	0699      	lsls	r1, r3, #26
 800fc6a:	bf42      	ittt	mi
 800fc6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fc70:	3302      	addmi	r3, #2
 800fc72:	f8c9 3000 	strmi.w	r3, [r9]
 800fc76:	6825      	ldr	r5, [r4, #0]
 800fc78:	f015 0506 	ands.w	r5, r5, #6
 800fc7c:	d107      	bne.n	800fc8e <_printf_common+0x52>
 800fc7e:	f104 0a19 	add.w	sl, r4, #25
 800fc82:	68e3      	ldr	r3, [r4, #12]
 800fc84:	f8d9 2000 	ldr.w	r2, [r9]
 800fc88:	1a9b      	subs	r3, r3, r2
 800fc8a:	42ab      	cmp	r3, r5
 800fc8c:	dc28      	bgt.n	800fce0 <_printf_common+0xa4>
 800fc8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fc92:	6822      	ldr	r2, [r4, #0]
 800fc94:	3300      	adds	r3, #0
 800fc96:	bf18      	it	ne
 800fc98:	2301      	movne	r3, #1
 800fc9a:	0692      	lsls	r2, r2, #26
 800fc9c:	d42d      	bmi.n	800fcfa <_printf_common+0xbe>
 800fc9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fca2:	4639      	mov	r1, r7
 800fca4:	4630      	mov	r0, r6
 800fca6:	47c0      	blx	r8
 800fca8:	3001      	adds	r0, #1
 800fcaa:	d020      	beq.n	800fcee <_printf_common+0xb2>
 800fcac:	6823      	ldr	r3, [r4, #0]
 800fcae:	68e5      	ldr	r5, [r4, #12]
 800fcb0:	f8d9 2000 	ldr.w	r2, [r9]
 800fcb4:	f003 0306 	and.w	r3, r3, #6
 800fcb8:	2b04      	cmp	r3, #4
 800fcba:	bf08      	it	eq
 800fcbc:	1aad      	subeq	r5, r5, r2
 800fcbe:	68a3      	ldr	r3, [r4, #8]
 800fcc0:	6922      	ldr	r2, [r4, #16]
 800fcc2:	bf0c      	ite	eq
 800fcc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcc8:	2500      	movne	r5, #0
 800fcca:	4293      	cmp	r3, r2
 800fccc:	bfc4      	itt	gt
 800fcce:	1a9b      	subgt	r3, r3, r2
 800fcd0:	18ed      	addgt	r5, r5, r3
 800fcd2:	f04f 0900 	mov.w	r9, #0
 800fcd6:	341a      	adds	r4, #26
 800fcd8:	454d      	cmp	r5, r9
 800fcda:	d11a      	bne.n	800fd12 <_printf_common+0xd6>
 800fcdc:	2000      	movs	r0, #0
 800fcde:	e008      	b.n	800fcf2 <_printf_common+0xb6>
 800fce0:	2301      	movs	r3, #1
 800fce2:	4652      	mov	r2, sl
 800fce4:	4639      	mov	r1, r7
 800fce6:	4630      	mov	r0, r6
 800fce8:	47c0      	blx	r8
 800fcea:	3001      	adds	r0, #1
 800fcec:	d103      	bne.n	800fcf6 <_printf_common+0xba>
 800fcee:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf6:	3501      	adds	r5, #1
 800fcf8:	e7c3      	b.n	800fc82 <_printf_common+0x46>
 800fcfa:	18e1      	adds	r1, r4, r3
 800fcfc:	1c5a      	adds	r2, r3, #1
 800fcfe:	2030      	movs	r0, #48	; 0x30
 800fd00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd04:	4422      	add	r2, r4
 800fd06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd0e:	3302      	adds	r3, #2
 800fd10:	e7c5      	b.n	800fc9e <_printf_common+0x62>
 800fd12:	2301      	movs	r3, #1
 800fd14:	4622      	mov	r2, r4
 800fd16:	4639      	mov	r1, r7
 800fd18:	4630      	mov	r0, r6
 800fd1a:	47c0      	blx	r8
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	d0e6      	beq.n	800fcee <_printf_common+0xb2>
 800fd20:	f109 0901 	add.w	r9, r9, #1
 800fd24:	e7d8      	b.n	800fcd8 <_printf_common+0x9c>
	...

0800fd28 <_printf_i>:
 800fd28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fd30:	460c      	mov	r4, r1
 800fd32:	7e09      	ldrb	r1, [r1, #24]
 800fd34:	b085      	sub	sp, #20
 800fd36:	296e      	cmp	r1, #110	; 0x6e
 800fd38:	4617      	mov	r7, r2
 800fd3a:	4606      	mov	r6, r0
 800fd3c:	4698      	mov	r8, r3
 800fd3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd40:	f000 80b3 	beq.w	800feaa <_printf_i+0x182>
 800fd44:	d822      	bhi.n	800fd8c <_printf_i+0x64>
 800fd46:	2963      	cmp	r1, #99	; 0x63
 800fd48:	d036      	beq.n	800fdb8 <_printf_i+0x90>
 800fd4a:	d80a      	bhi.n	800fd62 <_printf_i+0x3a>
 800fd4c:	2900      	cmp	r1, #0
 800fd4e:	f000 80b9 	beq.w	800fec4 <_printf_i+0x19c>
 800fd52:	2958      	cmp	r1, #88	; 0x58
 800fd54:	f000 8083 	beq.w	800fe5e <_printf_i+0x136>
 800fd58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fd60:	e032      	b.n	800fdc8 <_printf_i+0xa0>
 800fd62:	2964      	cmp	r1, #100	; 0x64
 800fd64:	d001      	beq.n	800fd6a <_printf_i+0x42>
 800fd66:	2969      	cmp	r1, #105	; 0x69
 800fd68:	d1f6      	bne.n	800fd58 <_printf_i+0x30>
 800fd6a:	6820      	ldr	r0, [r4, #0]
 800fd6c:	6813      	ldr	r3, [r2, #0]
 800fd6e:	0605      	lsls	r5, r0, #24
 800fd70:	f103 0104 	add.w	r1, r3, #4
 800fd74:	d52a      	bpl.n	800fdcc <_printf_i+0xa4>
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	6011      	str	r1, [r2, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	da03      	bge.n	800fd86 <_printf_i+0x5e>
 800fd7e:	222d      	movs	r2, #45	; 0x2d
 800fd80:	425b      	negs	r3, r3
 800fd82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fd86:	486f      	ldr	r0, [pc, #444]	; (800ff44 <_printf_i+0x21c>)
 800fd88:	220a      	movs	r2, #10
 800fd8a:	e039      	b.n	800fe00 <_printf_i+0xd8>
 800fd8c:	2973      	cmp	r1, #115	; 0x73
 800fd8e:	f000 809d 	beq.w	800fecc <_printf_i+0x1a4>
 800fd92:	d808      	bhi.n	800fda6 <_printf_i+0x7e>
 800fd94:	296f      	cmp	r1, #111	; 0x6f
 800fd96:	d020      	beq.n	800fdda <_printf_i+0xb2>
 800fd98:	2970      	cmp	r1, #112	; 0x70
 800fd9a:	d1dd      	bne.n	800fd58 <_printf_i+0x30>
 800fd9c:	6823      	ldr	r3, [r4, #0]
 800fd9e:	f043 0320 	orr.w	r3, r3, #32
 800fda2:	6023      	str	r3, [r4, #0]
 800fda4:	e003      	b.n	800fdae <_printf_i+0x86>
 800fda6:	2975      	cmp	r1, #117	; 0x75
 800fda8:	d017      	beq.n	800fdda <_printf_i+0xb2>
 800fdaa:	2978      	cmp	r1, #120	; 0x78
 800fdac:	d1d4      	bne.n	800fd58 <_printf_i+0x30>
 800fdae:	2378      	movs	r3, #120	; 0x78
 800fdb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fdb4:	4864      	ldr	r0, [pc, #400]	; (800ff48 <_printf_i+0x220>)
 800fdb6:	e055      	b.n	800fe64 <_printf_i+0x13c>
 800fdb8:	6813      	ldr	r3, [r2, #0]
 800fdba:	1d19      	adds	r1, r3, #4
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	6011      	str	r1, [r2, #0]
 800fdc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e08c      	b.n	800fee6 <_printf_i+0x1be>
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	6011      	str	r1, [r2, #0]
 800fdd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fdd4:	bf18      	it	ne
 800fdd6:	b21b      	sxthne	r3, r3
 800fdd8:	e7cf      	b.n	800fd7a <_printf_i+0x52>
 800fdda:	6813      	ldr	r3, [r2, #0]
 800fddc:	6825      	ldr	r5, [r4, #0]
 800fdde:	1d18      	adds	r0, r3, #4
 800fde0:	6010      	str	r0, [r2, #0]
 800fde2:	0628      	lsls	r0, r5, #24
 800fde4:	d501      	bpl.n	800fdea <_printf_i+0xc2>
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	e002      	b.n	800fdf0 <_printf_i+0xc8>
 800fdea:	0668      	lsls	r0, r5, #25
 800fdec:	d5fb      	bpl.n	800fde6 <_printf_i+0xbe>
 800fdee:	881b      	ldrh	r3, [r3, #0]
 800fdf0:	4854      	ldr	r0, [pc, #336]	; (800ff44 <_printf_i+0x21c>)
 800fdf2:	296f      	cmp	r1, #111	; 0x6f
 800fdf4:	bf14      	ite	ne
 800fdf6:	220a      	movne	r2, #10
 800fdf8:	2208      	moveq	r2, #8
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe00:	6865      	ldr	r5, [r4, #4]
 800fe02:	60a5      	str	r5, [r4, #8]
 800fe04:	2d00      	cmp	r5, #0
 800fe06:	f2c0 8095 	blt.w	800ff34 <_printf_i+0x20c>
 800fe0a:	6821      	ldr	r1, [r4, #0]
 800fe0c:	f021 0104 	bic.w	r1, r1, #4
 800fe10:	6021      	str	r1, [r4, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d13d      	bne.n	800fe92 <_printf_i+0x16a>
 800fe16:	2d00      	cmp	r5, #0
 800fe18:	f040 808e 	bne.w	800ff38 <_printf_i+0x210>
 800fe1c:	4665      	mov	r5, ip
 800fe1e:	2a08      	cmp	r2, #8
 800fe20:	d10b      	bne.n	800fe3a <_printf_i+0x112>
 800fe22:	6823      	ldr	r3, [r4, #0]
 800fe24:	07db      	lsls	r3, r3, #31
 800fe26:	d508      	bpl.n	800fe3a <_printf_i+0x112>
 800fe28:	6923      	ldr	r3, [r4, #16]
 800fe2a:	6862      	ldr	r2, [r4, #4]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	bfde      	ittt	le
 800fe30:	2330      	movle	r3, #48	; 0x30
 800fe32:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe36:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe3a:	ebac 0305 	sub.w	r3, ip, r5
 800fe3e:	6123      	str	r3, [r4, #16]
 800fe40:	f8cd 8000 	str.w	r8, [sp]
 800fe44:	463b      	mov	r3, r7
 800fe46:	aa03      	add	r2, sp, #12
 800fe48:	4621      	mov	r1, r4
 800fe4a:	4630      	mov	r0, r6
 800fe4c:	f7ff fef6 	bl	800fc3c <_printf_common>
 800fe50:	3001      	adds	r0, #1
 800fe52:	d14d      	bne.n	800fef0 <_printf_i+0x1c8>
 800fe54:	f04f 30ff 	mov.w	r0, #4294967295
 800fe58:	b005      	add	sp, #20
 800fe5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe5e:	4839      	ldr	r0, [pc, #228]	; (800ff44 <_printf_i+0x21c>)
 800fe60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fe64:	6813      	ldr	r3, [r2, #0]
 800fe66:	6821      	ldr	r1, [r4, #0]
 800fe68:	1d1d      	adds	r5, r3, #4
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	6015      	str	r5, [r2, #0]
 800fe6e:	060a      	lsls	r2, r1, #24
 800fe70:	d50b      	bpl.n	800fe8a <_printf_i+0x162>
 800fe72:	07ca      	lsls	r2, r1, #31
 800fe74:	bf44      	itt	mi
 800fe76:	f041 0120 	orrmi.w	r1, r1, #32
 800fe7a:	6021      	strmi	r1, [r4, #0]
 800fe7c:	b91b      	cbnz	r3, 800fe86 <_printf_i+0x15e>
 800fe7e:	6822      	ldr	r2, [r4, #0]
 800fe80:	f022 0220 	bic.w	r2, r2, #32
 800fe84:	6022      	str	r2, [r4, #0]
 800fe86:	2210      	movs	r2, #16
 800fe88:	e7b7      	b.n	800fdfa <_printf_i+0xd2>
 800fe8a:	064d      	lsls	r5, r1, #25
 800fe8c:	bf48      	it	mi
 800fe8e:	b29b      	uxthmi	r3, r3
 800fe90:	e7ef      	b.n	800fe72 <_printf_i+0x14a>
 800fe92:	4665      	mov	r5, ip
 800fe94:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe98:	fb02 3311 	mls	r3, r2, r1, r3
 800fe9c:	5cc3      	ldrb	r3, [r0, r3]
 800fe9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fea2:	460b      	mov	r3, r1
 800fea4:	2900      	cmp	r1, #0
 800fea6:	d1f5      	bne.n	800fe94 <_printf_i+0x16c>
 800fea8:	e7b9      	b.n	800fe1e <_printf_i+0xf6>
 800feaa:	6813      	ldr	r3, [r2, #0]
 800feac:	6825      	ldr	r5, [r4, #0]
 800feae:	6961      	ldr	r1, [r4, #20]
 800feb0:	1d18      	adds	r0, r3, #4
 800feb2:	6010      	str	r0, [r2, #0]
 800feb4:	0628      	lsls	r0, r5, #24
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	d501      	bpl.n	800febe <_printf_i+0x196>
 800feba:	6019      	str	r1, [r3, #0]
 800febc:	e002      	b.n	800fec4 <_printf_i+0x19c>
 800febe:	066a      	lsls	r2, r5, #25
 800fec0:	d5fb      	bpl.n	800feba <_printf_i+0x192>
 800fec2:	8019      	strh	r1, [r3, #0]
 800fec4:	2300      	movs	r3, #0
 800fec6:	6123      	str	r3, [r4, #16]
 800fec8:	4665      	mov	r5, ip
 800feca:	e7b9      	b.n	800fe40 <_printf_i+0x118>
 800fecc:	6813      	ldr	r3, [r2, #0]
 800fece:	1d19      	adds	r1, r3, #4
 800fed0:	6011      	str	r1, [r2, #0]
 800fed2:	681d      	ldr	r5, [r3, #0]
 800fed4:	6862      	ldr	r2, [r4, #4]
 800fed6:	2100      	movs	r1, #0
 800fed8:	4628      	mov	r0, r5
 800feda:	f7f0 f989 	bl	80001f0 <memchr>
 800fede:	b108      	cbz	r0, 800fee4 <_printf_i+0x1bc>
 800fee0:	1b40      	subs	r0, r0, r5
 800fee2:	6060      	str	r0, [r4, #4]
 800fee4:	6863      	ldr	r3, [r4, #4]
 800fee6:	6123      	str	r3, [r4, #16]
 800fee8:	2300      	movs	r3, #0
 800feea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800feee:	e7a7      	b.n	800fe40 <_printf_i+0x118>
 800fef0:	6923      	ldr	r3, [r4, #16]
 800fef2:	462a      	mov	r2, r5
 800fef4:	4639      	mov	r1, r7
 800fef6:	4630      	mov	r0, r6
 800fef8:	47c0      	blx	r8
 800fefa:	3001      	adds	r0, #1
 800fefc:	d0aa      	beq.n	800fe54 <_printf_i+0x12c>
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	079b      	lsls	r3, r3, #30
 800ff02:	d413      	bmi.n	800ff2c <_printf_i+0x204>
 800ff04:	68e0      	ldr	r0, [r4, #12]
 800ff06:	9b03      	ldr	r3, [sp, #12]
 800ff08:	4298      	cmp	r0, r3
 800ff0a:	bfb8      	it	lt
 800ff0c:	4618      	movlt	r0, r3
 800ff0e:	e7a3      	b.n	800fe58 <_printf_i+0x130>
 800ff10:	2301      	movs	r3, #1
 800ff12:	464a      	mov	r2, r9
 800ff14:	4639      	mov	r1, r7
 800ff16:	4630      	mov	r0, r6
 800ff18:	47c0      	blx	r8
 800ff1a:	3001      	adds	r0, #1
 800ff1c:	d09a      	beq.n	800fe54 <_printf_i+0x12c>
 800ff1e:	3501      	adds	r5, #1
 800ff20:	68e3      	ldr	r3, [r4, #12]
 800ff22:	9a03      	ldr	r2, [sp, #12]
 800ff24:	1a9b      	subs	r3, r3, r2
 800ff26:	42ab      	cmp	r3, r5
 800ff28:	dcf2      	bgt.n	800ff10 <_printf_i+0x1e8>
 800ff2a:	e7eb      	b.n	800ff04 <_printf_i+0x1dc>
 800ff2c:	2500      	movs	r5, #0
 800ff2e:	f104 0919 	add.w	r9, r4, #25
 800ff32:	e7f5      	b.n	800ff20 <_printf_i+0x1f8>
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1ac      	bne.n	800fe92 <_printf_i+0x16a>
 800ff38:	7803      	ldrb	r3, [r0, #0]
 800ff3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff42:	e76c      	b.n	800fe1e <_printf_i+0xf6>
 800ff44:	080122a2 	.word	0x080122a2
 800ff48:	080122b3 	.word	0x080122b3

0800ff4c <cleanup_glue>:
 800ff4c:	b538      	push	{r3, r4, r5, lr}
 800ff4e:	460c      	mov	r4, r1
 800ff50:	6809      	ldr	r1, [r1, #0]
 800ff52:	4605      	mov	r5, r0
 800ff54:	b109      	cbz	r1, 800ff5a <cleanup_glue+0xe>
 800ff56:	f7ff fff9 	bl	800ff4c <cleanup_glue>
 800ff5a:	4621      	mov	r1, r4
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff62:	f7ff baef 	b.w	800f544 <_free_r>
	...

0800ff68 <_reclaim_reent>:
 800ff68:	4b2c      	ldr	r3, [pc, #176]	; (801001c <_reclaim_reent+0xb4>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4283      	cmp	r3, r0
 800ff6e:	b570      	push	{r4, r5, r6, lr}
 800ff70:	4604      	mov	r4, r0
 800ff72:	d051      	beq.n	8010018 <_reclaim_reent+0xb0>
 800ff74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff76:	b143      	cbz	r3, 800ff8a <_reclaim_reent+0x22>
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d14a      	bne.n	8010014 <_reclaim_reent+0xac>
 800ff7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff80:	6819      	ldr	r1, [r3, #0]
 800ff82:	b111      	cbz	r1, 800ff8a <_reclaim_reent+0x22>
 800ff84:	4620      	mov	r0, r4
 800ff86:	f7ff fadd 	bl	800f544 <_free_r>
 800ff8a:	6961      	ldr	r1, [r4, #20]
 800ff8c:	b111      	cbz	r1, 800ff94 <_reclaim_reent+0x2c>
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f7ff fad8 	bl	800f544 <_free_r>
 800ff94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ff96:	b111      	cbz	r1, 800ff9e <_reclaim_reent+0x36>
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f7ff fad3 	bl	800f544 <_free_r>
 800ff9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ffa0:	b111      	cbz	r1, 800ffa8 <_reclaim_reent+0x40>
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f7ff face 	bl	800f544 <_free_r>
 800ffa8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ffaa:	b111      	cbz	r1, 800ffb2 <_reclaim_reent+0x4a>
 800ffac:	4620      	mov	r0, r4
 800ffae:	f7ff fac9 	bl	800f544 <_free_r>
 800ffb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ffb4:	b111      	cbz	r1, 800ffbc <_reclaim_reent+0x54>
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	f7ff fac4 	bl	800f544 <_free_r>
 800ffbc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ffbe:	b111      	cbz	r1, 800ffc6 <_reclaim_reent+0x5e>
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f7ff fabf 	bl	800f544 <_free_r>
 800ffc6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ffc8:	b111      	cbz	r1, 800ffd0 <_reclaim_reent+0x68>
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f7ff faba 	bl	800f544 <_free_r>
 800ffd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffd2:	b111      	cbz	r1, 800ffda <_reclaim_reent+0x72>
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f7ff fab5 	bl	800f544 <_free_r>
 800ffda:	69a3      	ldr	r3, [r4, #24]
 800ffdc:	b1e3      	cbz	r3, 8010018 <_reclaim_reent+0xb0>
 800ffde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	4798      	blx	r3
 800ffe4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ffe6:	b1b9      	cbz	r1, 8010018 <_reclaim_reent+0xb0>
 800ffe8:	4620      	mov	r0, r4
 800ffea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffee:	f7ff bfad 	b.w	800ff4c <cleanup_glue>
 800fff2:	5949      	ldr	r1, [r1, r5]
 800fff4:	b941      	cbnz	r1, 8010008 <_reclaim_reent+0xa0>
 800fff6:	3504      	adds	r5, #4
 800fff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fffa:	2d80      	cmp	r5, #128	; 0x80
 800fffc:	68d9      	ldr	r1, [r3, #12]
 800fffe:	d1f8      	bne.n	800fff2 <_reclaim_reent+0x8a>
 8010000:	4620      	mov	r0, r4
 8010002:	f7ff fa9f 	bl	800f544 <_free_r>
 8010006:	e7ba      	b.n	800ff7e <_reclaim_reent+0x16>
 8010008:	680e      	ldr	r6, [r1, #0]
 801000a:	4620      	mov	r0, r4
 801000c:	f7ff fa9a 	bl	800f544 <_free_r>
 8010010:	4631      	mov	r1, r6
 8010012:	e7ef      	b.n	800fff4 <_reclaim_reent+0x8c>
 8010014:	2500      	movs	r5, #0
 8010016:	e7ef      	b.n	800fff8 <_reclaim_reent+0x90>
 8010018:	bd70      	pop	{r4, r5, r6, pc}
 801001a:	bf00      	nop
 801001c:	20000094 	.word	0x20000094

08010020 <siprintf>:
 8010020:	b40e      	push	{r1, r2, r3}
 8010022:	b500      	push	{lr}
 8010024:	b09c      	sub	sp, #112	; 0x70
 8010026:	ab1d      	add	r3, sp, #116	; 0x74
 8010028:	9002      	str	r0, [sp, #8]
 801002a:	9006      	str	r0, [sp, #24]
 801002c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010030:	4809      	ldr	r0, [pc, #36]	; (8010058 <siprintf+0x38>)
 8010032:	9107      	str	r1, [sp, #28]
 8010034:	9104      	str	r1, [sp, #16]
 8010036:	4909      	ldr	r1, [pc, #36]	; (801005c <siprintf+0x3c>)
 8010038:	f853 2b04 	ldr.w	r2, [r3], #4
 801003c:	9105      	str	r1, [sp, #20]
 801003e:	6800      	ldr	r0, [r0, #0]
 8010040:	9301      	str	r3, [sp, #4]
 8010042:	a902      	add	r1, sp, #8
 8010044:	f001 fac8 	bl	80115d8 <_svfiprintf_r>
 8010048:	9b02      	ldr	r3, [sp, #8]
 801004a:	2200      	movs	r2, #0
 801004c:	701a      	strb	r2, [r3, #0]
 801004e:	b01c      	add	sp, #112	; 0x70
 8010050:	f85d eb04 	ldr.w	lr, [sp], #4
 8010054:	b003      	add	sp, #12
 8010056:	4770      	bx	lr
 8010058:	20000094 	.word	0x20000094
 801005c:	ffff0208 	.word	0xffff0208

08010060 <strncmp>:
 8010060:	b510      	push	{r4, lr}
 8010062:	b16a      	cbz	r2, 8010080 <strncmp+0x20>
 8010064:	3901      	subs	r1, #1
 8010066:	1884      	adds	r4, r0, r2
 8010068:	f810 3b01 	ldrb.w	r3, [r0], #1
 801006c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010070:	4293      	cmp	r3, r2
 8010072:	d103      	bne.n	801007c <strncmp+0x1c>
 8010074:	42a0      	cmp	r0, r4
 8010076:	d001      	beq.n	801007c <strncmp+0x1c>
 8010078:	2b00      	cmp	r3, #0
 801007a:	d1f5      	bne.n	8010068 <strncmp+0x8>
 801007c:	1a98      	subs	r0, r3, r2
 801007e:	bd10      	pop	{r4, pc}
 8010080:	4610      	mov	r0, r2
 8010082:	e7fc      	b.n	801007e <strncmp+0x1e>

08010084 <strncpy>:
 8010084:	b570      	push	{r4, r5, r6, lr}
 8010086:	3901      	subs	r1, #1
 8010088:	4604      	mov	r4, r0
 801008a:	b902      	cbnz	r2, 801008e <strncpy+0xa>
 801008c:	bd70      	pop	{r4, r5, r6, pc}
 801008e:	4623      	mov	r3, r4
 8010090:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8010094:	f803 5b01 	strb.w	r5, [r3], #1
 8010098:	1e56      	subs	r6, r2, #1
 801009a:	b92d      	cbnz	r5, 80100a8 <strncpy+0x24>
 801009c:	4414      	add	r4, r2
 801009e:	42a3      	cmp	r3, r4
 80100a0:	d0f4      	beq.n	801008c <strncpy+0x8>
 80100a2:	f803 5b01 	strb.w	r5, [r3], #1
 80100a6:	e7fa      	b.n	801009e <strncpy+0x1a>
 80100a8:	461c      	mov	r4, r3
 80100aa:	4632      	mov	r2, r6
 80100ac:	e7ed      	b.n	801008a <strncpy+0x6>
	...

080100b0 <strtok>:
 80100b0:	4b13      	ldr	r3, [pc, #76]	; (8010100 <strtok+0x50>)
 80100b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b6:	681d      	ldr	r5, [r3, #0]
 80100b8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80100ba:	4606      	mov	r6, r0
 80100bc:	460f      	mov	r7, r1
 80100be:	b9b4      	cbnz	r4, 80100ee <strtok+0x3e>
 80100c0:	2050      	movs	r0, #80	; 0x50
 80100c2:	f7ff fa1b 	bl	800f4fc <malloc>
 80100c6:	65a8      	str	r0, [r5, #88]	; 0x58
 80100c8:	e9c0 4400 	strd	r4, r4, [r0]
 80100cc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80100d0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80100d4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80100d8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80100dc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80100e0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80100e4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80100e8:	6184      	str	r4, [r0, #24]
 80100ea:	7704      	strb	r4, [r0, #28]
 80100ec:	6244      	str	r4, [r0, #36]	; 0x24
 80100ee:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80100f0:	4639      	mov	r1, r7
 80100f2:	4630      	mov	r0, r6
 80100f4:	2301      	movs	r3, #1
 80100f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100fa:	f000 b803 	b.w	8010104 <__strtok_r>
 80100fe:	bf00      	nop
 8010100:	20000094 	.word	0x20000094

08010104 <__strtok_r>:
 8010104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010106:	b918      	cbnz	r0, 8010110 <__strtok_r+0xc>
 8010108:	6810      	ldr	r0, [r2, #0]
 801010a:	b908      	cbnz	r0, 8010110 <__strtok_r+0xc>
 801010c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801010e:	4620      	mov	r0, r4
 8010110:	4604      	mov	r4, r0
 8010112:	460f      	mov	r7, r1
 8010114:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010118:	f817 6b01 	ldrb.w	r6, [r7], #1
 801011c:	b91e      	cbnz	r6, 8010126 <__strtok_r+0x22>
 801011e:	b96d      	cbnz	r5, 801013c <__strtok_r+0x38>
 8010120:	6015      	str	r5, [r2, #0]
 8010122:	4628      	mov	r0, r5
 8010124:	e7f2      	b.n	801010c <__strtok_r+0x8>
 8010126:	42b5      	cmp	r5, r6
 8010128:	d1f6      	bne.n	8010118 <__strtok_r+0x14>
 801012a:	2b00      	cmp	r3, #0
 801012c:	d1ef      	bne.n	801010e <__strtok_r+0xa>
 801012e:	6014      	str	r4, [r2, #0]
 8010130:	7003      	strb	r3, [r0, #0]
 8010132:	e7eb      	b.n	801010c <__strtok_r+0x8>
 8010134:	462b      	mov	r3, r5
 8010136:	e00d      	b.n	8010154 <__strtok_r+0x50>
 8010138:	b926      	cbnz	r6, 8010144 <__strtok_r+0x40>
 801013a:	461c      	mov	r4, r3
 801013c:	4623      	mov	r3, r4
 801013e:	460f      	mov	r7, r1
 8010140:	f813 5b01 	ldrb.w	r5, [r3], #1
 8010144:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010148:	42b5      	cmp	r5, r6
 801014a:	d1f5      	bne.n	8010138 <__strtok_r+0x34>
 801014c:	2d00      	cmp	r5, #0
 801014e:	d0f1      	beq.n	8010134 <__strtok_r+0x30>
 8010150:	2100      	movs	r1, #0
 8010152:	7021      	strb	r1, [r4, #0]
 8010154:	6013      	str	r3, [r2, #0]
 8010156:	e7d9      	b.n	801010c <__strtok_r+0x8>

08010158 <_strtol_l.isra.0>:
 8010158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801015c:	4680      	mov	r8, r0
 801015e:	4689      	mov	r9, r1
 8010160:	4692      	mov	sl, r2
 8010162:	461e      	mov	r6, r3
 8010164:	460f      	mov	r7, r1
 8010166:	463d      	mov	r5, r7
 8010168:	9808      	ldr	r0, [sp, #32]
 801016a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801016e:	f000 fecb 	bl	8010f08 <__locale_ctype_ptr_l>
 8010172:	4420      	add	r0, r4
 8010174:	7843      	ldrb	r3, [r0, #1]
 8010176:	f013 0308 	ands.w	r3, r3, #8
 801017a:	d132      	bne.n	80101e2 <_strtol_l.isra.0+0x8a>
 801017c:	2c2d      	cmp	r4, #45	; 0x2d
 801017e:	d132      	bne.n	80101e6 <_strtol_l.isra.0+0x8e>
 8010180:	787c      	ldrb	r4, [r7, #1]
 8010182:	1cbd      	adds	r5, r7, #2
 8010184:	2201      	movs	r2, #1
 8010186:	2e00      	cmp	r6, #0
 8010188:	d05d      	beq.n	8010246 <_strtol_l.isra.0+0xee>
 801018a:	2e10      	cmp	r6, #16
 801018c:	d109      	bne.n	80101a2 <_strtol_l.isra.0+0x4a>
 801018e:	2c30      	cmp	r4, #48	; 0x30
 8010190:	d107      	bne.n	80101a2 <_strtol_l.isra.0+0x4a>
 8010192:	782b      	ldrb	r3, [r5, #0]
 8010194:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010198:	2b58      	cmp	r3, #88	; 0x58
 801019a:	d14f      	bne.n	801023c <_strtol_l.isra.0+0xe4>
 801019c:	786c      	ldrb	r4, [r5, #1]
 801019e:	2610      	movs	r6, #16
 80101a0:	3502      	adds	r5, #2
 80101a2:	2a00      	cmp	r2, #0
 80101a4:	bf14      	ite	ne
 80101a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80101aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80101ae:	2700      	movs	r7, #0
 80101b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80101b4:	4638      	mov	r0, r7
 80101b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80101ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80101be:	2b09      	cmp	r3, #9
 80101c0:	d817      	bhi.n	80101f2 <_strtol_l.isra.0+0x9a>
 80101c2:	461c      	mov	r4, r3
 80101c4:	42a6      	cmp	r6, r4
 80101c6:	dd23      	ble.n	8010210 <_strtol_l.isra.0+0xb8>
 80101c8:	1c7b      	adds	r3, r7, #1
 80101ca:	d007      	beq.n	80101dc <_strtol_l.isra.0+0x84>
 80101cc:	4584      	cmp	ip, r0
 80101ce:	d31c      	bcc.n	801020a <_strtol_l.isra.0+0xb2>
 80101d0:	d101      	bne.n	80101d6 <_strtol_l.isra.0+0x7e>
 80101d2:	45a6      	cmp	lr, r4
 80101d4:	db19      	blt.n	801020a <_strtol_l.isra.0+0xb2>
 80101d6:	fb00 4006 	mla	r0, r0, r6, r4
 80101da:	2701      	movs	r7, #1
 80101dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101e0:	e7eb      	b.n	80101ba <_strtol_l.isra.0+0x62>
 80101e2:	462f      	mov	r7, r5
 80101e4:	e7bf      	b.n	8010166 <_strtol_l.isra.0+0xe>
 80101e6:	2c2b      	cmp	r4, #43	; 0x2b
 80101e8:	bf04      	itt	eq
 80101ea:	1cbd      	addeq	r5, r7, #2
 80101ec:	787c      	ldrbeq	r4, [r7, #1]
 80101ee:	461a      	mov	r2, r3
 80101f0:	e7c9      	b.n	8010186 <_strtol_l.isra.0+0x2e>
 80101f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80101f6:	2b19      	cmp	r3, #25
 80101f8:	d801      	bhi.n	80101fe <_strtol_l.isra.0+0xa6>
 80101fa:	3c37      	subs	r4, #55	; 0x37
 80101fc:	e7e2      	b.n	80101c4 <_strtol_l.isra.0+0x6c>
 80101fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8010202:	2b19      	cmp	r3, #25
 8010204:	d804      	bhi.n	8010210 <_strtol_l.isra.0+0xb8>
 8010206:	3c57      	subs	r4, #87	; 0x57
 8010208:	e7dc      	b.n	80101c4 <_strtol_l.isra.0+0x6c>
 801020a:	f04f 37ff 	mov.w	r7, #4294967295
 801020e:	e7e5      	b.n	80101dc <_strtol_l.isra.0+0x84>
 8010210:	1c7b      	adds	r3, r7, #1
 8010212:	d108      	bne.n	8010226 <_strtol_l.isra.0+0xce>
 8010214:	2322      	movs	r3, #34	; 0x22
 8010216:	f8c8 3000 	str.w	r3, [r8]
 801021a:	4608      	mov	r0, r1
 801021c:	f1ba 0f00 	cmp.w	sl, #0
 8010220:	d107      	bne.n	8010232 <_strtol_l.isra.0+0xda>
 8010222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010226:	b102      	cbz	r2, 801022a <_strtol_l.isra.0+0xd2>
 8010228:	4240      	negs	r0, r0
 801022a:	f1ba 0f00 	cmp.w	sl, #0
 801022e:	d0f8      	beq.n	8010222 <_strtol_l.isra.0+0xca>
 8010230:	b10f      	cbz	r7, 8010236 <_strtol_l.isra.0+0xde>
 8010232:	f105 39ff 	add.w	r9, r5, #4294967295
 8010236:	f8ca 9000 	str.w	r9, [sl]
 801023a:	e7f2      	b.n	8010222 <_strtol_l.isra.0+0xca>
 801023c:	2430      	movs	r4, #48	; 0x30
 801023e:	2e00      	cmp	r6, #0
 8010240:	d1af      	bne.n	80101a2 <_strtol_l.isra.0+0x4a>
 8010242:	2608      	movs	r6, #8
 8010244:	e7ad      	b.n	80101a2 <_strtol_l.isra.0+0x4a>
 8010246:	2c30      	cmp	r4, #48	; 0x30
 8010248:	d0a3      	beq.n	8010192 <_strtol_l.isra.0+0x3a>
 801024a:	260a      	movs	r6, #10
 801024c:	e7a9      	b.n	80101a2 <_strtol_l.isra.0+0x4a>
	...

08010250 <strtol>:
 8010250:	4b08      	ldr	r3, [pc, #32]	; (8010274 <strtol+0x24>)
 8010252:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010254:	681c      	ldr	r4, [r3, #0]
 8010256:	4d08      	ldr	r5, [pc, #32]	; (8010278 <strtol+0x28>)
 8010258:	6a23      	ldr	r3, [r4, #32]
 801025a:	2b00      	cmp	r3, #0
 801025c:	bf08      	it	eq
 801025e:	462b      	moveq	r3, r5
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	4613      	mov	r3, r2
 8010264:	460a      	mov	r2, r1
 8010266:	4601      	mov	r1, r0
 8010268:	4620      	mov	r0, r4
 801026a:	f7ff ff75 	bl	8010158 <_strtol_l.isra.0>
 801026e:	b003      	add	sp, #12
 8010270:	bd30      	pop	{r4, r5, pc}
 8010272:	bf00      	nop
 8010274:	20000094 	.word	0x20000094
 8010278:	200000f8 	.word	0x200000f8

0801027c <quorem>:
 801027c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010280:	6903      	ldr	r3, [r0, #16]
 8010282:	690c      	ldr	r4, [r1, #16]
 8010284:	42a3      	cmp	r3, r4
 8010286:	4680      	mov	r8, r0
 8010288:	f2c0 8082 	blt.w	8010390 <quorem+0x114>
 801028c:	3c01      	subs	r4, #1
 801028e:	f101 0714 	add.w	r7, r1, #20
 8010292:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010296:	f100 0614 	add.w	r6, r0, #20
 801029a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801029e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80102a2:	eb06 030c 	add.w	r3, r6, ip
 80102a6:	3501      	adds	r5, #1
 80102a8:	eb07 090c 	add.w	r9, r7, ip
 80102ac:	9301      	str	r3, [sp, #4]
 80102ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80102b2:	b395      	cbz	r5, 801031a <quorem+0x9e>
 80102b4:	f04f 0a00 	mov.w	sl, #0
 80102b8:	4638      	mov	r0, r7
 80102ba:	46b6      	mov	lr, r6
 80102bc:	46d3      	mov	fp, sl
 80102be:	f850 2b04 	ldr.w	r2, [r0], #4
 80102c2:	b293      	uxth	r3, r2
 80102c4:	fb05 a303 	mla	r3, r5, r3, sl
 80102c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	ebab 0303 	sub.w	r3, fp, r3
 80102d2:	0c12      	lsrs	r2, r2, #16
 80102d4:	f8de b000 	ldr.w	fp, [lr]
 80102d8:	fb05 a202 	mla	r2, r5, r2, sl
 80102dc:	fa13 f38b 	uxtah	r3, r3, fp
 80102e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80102e4:	fa1f fb82 	uxth.w	fp, r2
 80102e8:	f8de 2000 	ldr.w	r2, [lr]
 80102ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80102f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102fa:	4581      	cmp	r9, r0
 80102fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010300:	f84e 3b04 	str.w	r3, [lr], #4
 8010304:	d2db      	bcs.n	80102be <quorem+0x42>
 8010306:	f856 300c 	ldr.w	r3, [r6, ip]
 801030a:	b933      	cbnz	r3, 801031a <quorem+0x9e>
 801030c:	9b01      	ldr	r3, [sp, #4]
 801030e:	3b04      	subs	r3, #4
 8010310:	429e      	cmp	r6, r3
 8010312:	461a      	mov	r2, r3
 8010314:	d330      	bcc.n	8010378 <quorem+0xfc>
 8010316:	f8c8 4010 	str.w	r4, [r8, #16]
 801031a:	4640      	mov	r0, r8
 801031c:	f001 f82e 	bl	801137c <__mcmp>
 8010320:	2800      	cmp	r0, #0
 8010322:	db25      	blt.n	8010370 <quorem+0xf4>
 8010324:	3501      	adds	r5, #1
 8010326:	4630      	mov	r0, r6
 8010328:	f04f 0c00 	mov.w	ip, #0
 801032c:	f857 2b04 	ldr.w	r2, [r7], #4
 8010330:	f8d0 e000 	ldr.w	lr, [r0]
 8010334:	b293      	uxth	r3, r2
 8010336:	ebac 0303 	sub.w	r3, ip, r3
 801033a:	0c12      	lsrs	r2, r2, #16
 801033c:	fa13 f38e 	uxtah	r3, r3, lr
 8010340:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010348:	b29b      	uxth	r3, r3
 801034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801034e:	45b9      	cmp	r9, r7
 8010350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010354:	f840 3b04 	str.w	r3, [r0], #4
 8010358:	d2e8      	bcs.n	801032c <quorem+0xb0>
 801035a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801035e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010362:	b92a      	cbnz	r2, 8010370 <quorem+0xf4>
 8010364:	3b04      	subs	r3, #4
 8010366:	429e      	cmp	r6, r3
 8010368:	461a      	mov	r2, r3
 801036a:	d30b      	bcc.n	8010384 <quorem+0x108>
 801036c:	f8c8 4010 	str.w	r4, [r8, #16]
 8010370:	4628      	mov	r0, r5
 8010372:	b003      	add	sp, #12
 8010374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010378:	6812      	ldr	r2, [r2, #0]
 801037a:	3b04      	subs	r3, #4
 801037c:	2a00      	cmp	r2, #0
 801037e:	d1ca      	bne.n	8010316 <quorem+0x9a>
 8010380:	3c01      	subs	r4, #1
 8010382:	e7c5      	b.n	8010310 <quorem+0x94>
 8010384:	6812      	ldr	r2, [r2, #0]
 8010386:	3b04      	subs	r3, #4
 8010388:	2a00      	cmp	r2, #0
 801038a:	d1ef      	bne.n	801036c <quorem+0xf0>
 801038c:	3c01      	subs	r4, #1
 801038e:	e7ea      	b.n	8010366 <quorem+0xea>
 8010390:	2000      	movs	r0, #0
 8010392:	e7ee      	b.n	8010372 <quorem+0xf6>
 8010394:	0000      	movs	r0, r0
	...

08010398 <_dtoa_r>:
 8010398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801039c:	ec57 6b10 	vmov	r6, r7, d0
 80103a0:	b097      	sub	sp, #92	; 0x5c
 80103a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80103a4:	9106      	str	r1, [sp, #24]
 80103a6:	4604      	mov	r4, r0
 80103a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80103aa:	9312      	str	r3, [sp, #72]	; 0x48
 80103ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80103b0:	e9cd 6700 	strd	r6, r7, [sp]
 80103b4:	b93d      	cbnz	r5, 80103c6 <_dtoa_r+0x2e>
 80103b6:	2010      	movs	r0, #16
 80103b8:	f7ff f8a0 	bl	800f4fc <malloc>
 80103bc:	6260      	str	r0, [r4, #36]	; 0x24
 80103be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80103c2:	6005      	str	r5, [r0, #0]
 80103c4:	60c5      	str	r5, [r0, #12]
 80103c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103c8:	6819      	ldr	r1, [r3, #0]
 80103ca:	b151      	cbz	r1, 80103e2 <_dtoa_r+0x4a>
 80103cc:	685a      	ldr	r2, [r3, #4]
 80103ce:	604a      	str	r2, [r1, #4]
 80103d0:	2301      	movs	r3, #1
 80103d2:	4093      	lsls	r3, r2
 80103d4:	608b      	str	r3, [r1, #8]
 80103d6:	4620      	mov	r0, r4
 80103d8:	f000 fdee 	bl	8010fb8 <_Bfree>
 80103dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103de:	2200      	movs	r2, #0
 80103e0:	601a      	str	r2, [r3, #0]
 80103e2:	1e3b      	subs	r3, r7, #0
 80103e4:	bfbb      	ittet	lt
 80103e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80103ea:	9301      	strlt	r3, [sp, #4]
 80103ec:	2300      	movge	r3, #0
 80103ee:	2201      	movlt	r2, #1
 80103f0:	bfac      	ite	ge
 80103f2:	f8c8 3000 	strge.w	r3, [r8]
 80103f6:	f8c8 2000 	strlt.w	r2, [r8]
 80103fa:	4baf      	ldr	r3, [pc, #700]	; (80106b8 <_dtoa_r+0x320>)
 80103fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010400:	ea33 0308 	bics.w	r3, r3, r8
 8010404:	d114      	bne.n	8010430 <_dtoa_r+0x98>
 8010406:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010408:	f242 730f 	movw	r3, #9999	; 0x270f
 801040c:	6013      	str	r3, [r2, #0]
 801040e:	9b00      	ldr	r3, [sp, #0]
 8010410:	b923      	cbnz	r3, 801041c <_dtoa_r+0x84>
 8010412:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010416:	2800      	cmp	r0, #0
 8010418:	f000 8542 	beq.w	8010ea0 <_dtoa_r+0xb08>
 801041c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801041e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80106cc <_dtoa_r+0x334>
 8010422:	2b00      	cmp	r3, #0
 8010424:	f000 8544 	beq.w	8010eb0 <_dtoa_r+0xb18>
 8010428:	f10b 0303 	add.w	r3, fp, #3
 801042c:	f000 bd3e 	b.w	8010eac <_dtoa_r+0xb14>
 8010430:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010434:	2200      	movs	r2, #0
 8010436:	2300      	movs	r3, #0
 8010438:	4630      	mov	r0, r6
 801043a:	4639      	mov	r1, r7
 801043c:	f7f0 fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010440:	4681      	mov	r9, r0
 8010442:	b168      	cbz	r0, 8010460 <_dtoa_r+0xc8>
 8010444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010446:	2301      	movs	r3, #1
 8010448:	6013      	str	r3, [r2, #0]
 801044a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801044c:	2b00      	cmp	r3, #0
 801044e:	f000 8524 	beq.w	8010e9a <_dtoa_r+0xb02>
 8010452:	4b9a      	ldr	r3, [pc, #616]	; (80106bc <_dtoa_r+0x324>)
 8010454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010456:	f103 3bff 	add.w	fp, r3, #4294967295
 801045a:	6013      	str	r3, [r2, #0]
 801045c:	f000 bd28 	b.w	8010eb0 <_dtoa_r+0xb18>
 8010460:	aa14      	add	r2, sp, #80	; 0x50
 8010462:	a915      	add	r1, sp, #84	; 0x54
 8010464:	ec47 6b10 	vmov	d0, r6, r7
 8010468:	4620      	mov	r0, r4
 801046a:	f000 fffe 	bl	801146a <__d2b>
 801046e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010472:	9004      	str	r0, [sp, #16]
 8010474:	2d00      	cmp	r5, #0
 8010476:	d07c      	beq.n	8010572 <_dtoa_r+0x1da>
 8010478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801047c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010480:	46b2      	mov	sl, r6
 8010482:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8010486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801048a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801048e:	2200      	movs	r2, #0
 8010490:	4b8b      	ldr	r3, [pc, #556]	; (80106c0 <_dtoa_r+0x328>)
 8010492:	4650      	mov	r0, sl
 8010494:	4659      	mov	r1, fp
 8010496:	f7ef feff 	bl	8000298 <__aeabi_dsub>
 801049a:	a381      	add	r3, pc, #516	; (adr r3, 80106a0 <_dtoa_r+0x308>)
 801049c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a0:	f7f0 f8b2 	bl	8000608 <__aeabi_dmul>
 80104a4:	a380      	add	r3, pc, #512	; (adr r3, 80106a8 <_dtoa_r+0x310>)
 80104a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104aa:	f7ef fef7 	bl	800029c <__adddf3>
 80104ae:	4606      	mov	r6, r0
 80104b0:	4628      	mov	r0, r5
 80104b2:	460f      	mov	r7, r1
 80104b4:	f7f0 f83e 	bl	8000534 <__aeabi_i2d>
 80104b8:	a37d      	add	r3, pc, #500	; (adr r3, 80106b0 <_dtoa_r+0x318>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	f7f0 f8a3 	bl	8000608 <__aeabi_dmul>
 80104c2:	4602      	mov	r2, r0
 80104c4:	460b      	mov	r3, r1
 80104c6:	4630      	mov	r0, r6
 80104c8:	4639      	mov	r1, r7
 80104ca:	f7ef fee7 	bl	800029c <__adddf3>
 80104ce:	4606      	mov	r6, r0
 80104d0:	460f      	mov	r7, r1
 80104d2:	f7f0 fb49 	bl	8000b68 <__aeabi_d2iz>
 80104d6:	2200      	movs	r2, #0
 80104d8:	4682      	mov	sl, r0
 80104da:	2300      	movs	r3, #0
 80104dc:	4630      	mov	r0, r6
 80104de:	4639      	mov	r1, r7
 80104e0:	f7f0 fb04 	bl	8000aec <__aeabi_dcmplt>
 80104e4:	b148      	cbz	r0, 80104fa <_dtoa_r+0x162>
 80104e6:	4650      	mov	r0, sl
 80104e8:	f7f0 f824 	bl	8000534 <__aeabi_i2d>
 80104ec:	4632      	mov	r2, r6
 80104ee:	463b      	mov	r3, r7
 80104f0:	f7f0 faf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80104f4:	b908      	cbnz	r0, 80104fa <_dtoa_r+0x162>
 80104f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104fa:	f1ba 0f16 	cmp.w	sl, #22
 80104fe:	d859      	bhi.n	80105b4 <_dtoa_r+0x21c>
 8010500:	4970      	ldr	r1, [pc, #448]	; (80106c4 <_dtoa_r+0x32c>)
 8010502:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010506:	e9dd 2300 	ldrd	r2, r3, [sp]
 801050a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801050e:	f7f0 fb0b 	bl	8000b28 <__aeabi_dcmpgt>
 8010512:	2800      	cmp	r0, #0
 8010514:	d050      	beq.n	80105b8 <_dtoa_r+0x220>
 8010516:	f10a 3aff 	add.w	sl, sl, #4294967295
 801051a:	2300      	movs	r3, #0
 801051c:	930f      	str	r3, [sp, #60]	; 0x3c
 801051e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010520:	1b5d      	subs	r5, r3, r5
 8010522:	f1b5 0801 	subs.w	r8, r5, #1
 8010526:	bf49      	itett	mi
 8010528:	f1c5 0301 	rsbmi	r3, r5, #1
 801052c:	2300      	movpl	r3, #0
 801052e:	9305      	strmi	r3, [sp, #20]
 8010530:	f04f 0800 	movmi.w	r8, #0
 8010534:	bf58      	it	pl
 8010536:	9305      	strpl	r3, [sp, #20]
 8010538:	f1ba 0f00 	cmp.w	sl, #0
 801053c:	db3e      	blt.n	80105bc <_dtoa_r+0x224>
 801053e:	2300      	movs	r3, #0
 8010540:	44d0      	add	r8, sl
 8010542:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010546:	9307      	str	r3, [sp, #28]
 8010548:	9b06      	ldr	r3, [sp, #24]
 801054a:	2b09      	cmp	r3, #9
 801054c:	f200 8090 	bhi.w	8010670 <_dtoa_r+0x2d8>
 8010550:	2b05      	cmp	r3, #5
 8010552:	bfc4      	itt	gt
 8010554:	3b04      	subgt	r3, #4
 8010556:	9306      	strgt	r3, [sp, #24]
 8010558:	9b06      	ldr	r3, [sp, #24]
 801055a:	f1a3 0302 	sub.w	r3, r3, #2
 801055e:	bfcc      	ite	gt
 8010560:	2500      	movgt	r5, #0
 8010562:	2501      	movle	r5, #1
 8010564:	2b03      	cmp	r3, #3
 8010566:	f200 808f 	bhi.w	8010688 <_dtoa_r+0x2f0>
 801056a:	e8df f003 	tbb	[pc, r3]
 801056e:	7f7d      	.short	0x7f7d
 8010570:	7131      	.short	0x7131
 8010572:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010576:	441d      	add	r5, r3
 8010578:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801057c:	2820      	cmp	r0, #32
 801057e:	dd13      	ble.n	80105a8 <_dtoa_r+0x210>
 8010580:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010584:	9b00      	ldr	r3, [sp, #0]
 8010586:	fa08 f800 	lsl.w	r8, r8, r0
 801058a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801058e:	fa23 f000 	lsr.w	r0, r3, r0
 8010592:	ea48 0000 	orr.w	r0, r8, r0
 8010596:	f7ef ffbd 	bl	8000514 <__aeabi_ui2d>
 801059a:	2301      	movs	r3, #1
 801059c:	4682      	mov	sl, r0
 801059e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80105a2:	3d01      	subs	r5, #1
 80105a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80105a6:	e772      	b.n	801048e <_dtoa_r+0xf6>
 80105a8:	9b00      	ldr	r3, [sp, #0]
 80105aa:	f1c0 0020 	rsb	r0, r0, #32
 80105ae:	fa03 f000 	lsl.w	r0, r3, r0
 80105b2:	e7f0      	b.n	8010596 <_dtoa_r+0x1fe>
 80105b4:	2301      	movs	r3, #1
 80105b6:	e7b1      	b.n	801051c <_dtoa_r+0x184>
 80105b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80105ba:	e7b0      	b.n	801051e <_dtoa_r+0x186>
 80105bc:	9b05      	ldr	r3, [sp, #20]
 80105be:	eba3 030a 	sub.w	r3, r3, sl
 80105c2:	9305      	str	r3, [sp, #20]
 80105c4:	f1ca 0300 	rsb	r3, sl, #0
 80105c8:	9307      	str	r3, [sp, #28]
 80105ca:	2300      	movs	r3, #0
 80105cc:	930e      	str	r3, [sp, #56]	; 0x38
 80105ce:	e7bb      	b.n	8010548 <_dtoa_r+0x1b0>
 80105d0:	2301      	movs	r3, #1
 80105d2:	930a      	str	r3, [sp, #40]	; 0x28
 80105d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	dd59      	ble.n	801068e <_dtoa_r+0x2f6>
 80105da:	9302      	str	r3, [sp, #8]
 80105dc:	4699      	mov	r9, r3
 80105de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80105e0:	2200      	movs	r2, #0
 80105e2:	6072      	str	r2, [r6, #4]
 80105e4:	2204      	movs	r2, #4
 80105e6:	f102 0014 	add.w	r0, r2, #20
 80105ea:	4298      	cmp	r0, r3
 80105ec:	6871      	ldr	r1, [r6, #4]
 80105ee:	d953      	bls.n	8010698 <_dtoa_r+0x300>
 80105f0:	4620      	mov	r0, r4
 80105f2:	f000 fcad 	bl	8010f50 <_Balloc>
 80105f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105f8:	6030      	str	r0, [r6, #0]
 80105fa:	f1b9 0f0e 	cmp.w	r9, #14
 80105fe:	f8d3 b000 	ldr.w	fp, [r3]
 8010602:	f200 80e6 	bhi.w	80107d2 <_dtoa_r+0x43a>
 8010606:	2d00      	cmp	r5, #0
 8010608:	f000 80e3 	beq.w	80107d2 <_dtoa_r+0x43a>
 801060c:	ed9d 7b00 	vldr	d7, [sp]
 8010610:	f1ba 0f00 	cmp.w	sl, #0
 8010614:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010618:	dd74      	ble.n	8010704 <_dtoa_r+0x36c>
 801061a:	4a2a      	ldr	r2, [pc, #168]	; (80106c4 <_dtoa_r+0x32c>)
 801061c:	f00a 030f 	and.w	r3, sl, #15
 8010620:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010624:	ed93 7b00 	vldr	d7, [r3]
 8010628:	ea4f 162a 	mov.w	r6, sl, asr #4
 801062c:	06f0      	lsls	r0, r6, #27
 801062e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010632:	d565      	bpl.n	8010700 <_dtoa_r+0x368>
 8010634:	4b24      	ldr	r3, [pc, #144]	; (80106c8 <_dtoa_r+0x330>)
 8010636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801063a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801063e:	f7f0 f90d 	bl	800085c <__aeabi_ddiv>
 8010642:	e9cd 0100 	strd	r0, r1, [sp]
 8010646:	f006 060f 	and.w	r6, r6, #15
 801064a:	2503      	movs	r5, #3
 801064c:	4f1e      	ldr	r7, [pc, #120]	; (80106c8 <_dtoa_r+0x330>)
 801064e:	e04c      	b.n	80106ea <_dtoa_r+0x352>
 8010650:	2301      	movs	r3, #1
 8010652:	930a      	str	r3, [sp, #40]	; 0x28
 8010654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010656:	4453      	add	r3, sl
 8010658:	f103 0901 	add.w	r9, r3, #1
 801065c:	9302      	str	r3, [sp, #8]
 801065e:	464b      	mov	r3, r9
 8010660:	2b01      	cmp	r3, #1
 8010662:	bfb8      	it	lt
 8010664:	2301      	movlt	r3, #1
 8010666:	e7ba      	b.n	80105de <_dtoa_r+0x246>
 8010668:	2300      	movs	r3, #0
 801066a:	e7b2      	b.n	80105d2 <_dtoa_r+0x23a>
 801066c:	2300      	movs	r3, #0
 801066e:	e7f0      	b.n	8010652 <_dtoa_r+0x2ba>
 8010670:	2501      	movs	r5, #1
 8010672:	2300      	movs	r3, #0
 8010674:	9306      	str	r3, [sp, #24]
 8010676:	950a      	str	r5, [sp, #40]	; 0x28
 8010678:	f04f 33ff 	mov.w	r3, #4294967295
 801067c:	9302      	str	r3, [sp, #8]
 801067e:	4699      	mov	r9, r3
 8010680:	2200      	movs	r2, #0
 8010682:	2312      	movs	r3, #18
 8010684:	920b      	str	r2, [sp, #44]	; 0x2c
 8010686:	e7aa      	b.n	80105de <_dtoa_r+0x246>
 8010688:	2301      	movs	r3, #1
 801068a:	930a      	str	r3, [sp, #40]	; 0x28
 801068c:	e7f4      	b.n	8010678 <_dtoa_r+0x2e0>
 801068e:	2301      	movs	r3, #1
 8010690:	9302      	str	r3, [sp, #8]
 8010692:	4699      	mov	r9, r3
 8010694:	461a      	mov	r2, r3
 8010696:	e7f5      	b.n	8010684 <_dtoa_r+0x2ec>
 8010698:	3101      	adds	r1, #1
 801069a:	6071      	str	r1, [r6, #4]
 801069c:	0052      	lsls	r2, r2, #1
 801069e:	e7a2      	b.n	80105e6 <_dtoa_r+0x24e>
 80106a0:	636f4361 	.word	0x636f4361
 80106a4:	3fd287a7 	.word	0x3fd287a7
 80106a8:	8b60c8b3 	.word	0x8b60c8b3
 80106ac:	3fc68a28 	.word	0x3fc68a28
 80106b0:	509f79fb 	.word	0x509f79fb
 80106b4:	3fd34413 	.word	0x3fd34413
 80106b8:	7ff00000 	.word	0x7ff00000
 80106bc:	080122a1 	.word	0x080122a1
 80106c0:	3ff80000 	.word	0x3ff80000
 80106c4:	08012308 	.word	0x08012308
 80106c8:	080122e0 	.word	0x080122e0
 80106cc:	080122cd 	.word	0x080122cd
 80106d0:	07f1      	lsls	r1, r6, #31
 80106d2:	d508      	bpl.n	80106e6 <_dtoa_r+0x34e>
 80106d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80106d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106dc:	f7ef ff94 	bl	8000608 <__aeabi_dmul>
 80106e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80106e4:	3501      	adds	r5, #1
 80106e6:	1076      	asrs	r6, r6, #1
 80106e8:	3708      	adds	r7, #8
 80106ea:	2e00      	cmp	r6, #0
 80106ec:	d1f0      	bne.n	80106d0 <_dtoa_r+0x338>
 80106ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80106f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106f6:	f7f0 f8b1 	bl	800085c <__aeabi_ddiv>
 80106fa:	e9cd 0100 	strd	r0, r1, [sp]
 80106fe:	e01a      	b.n	8010736 <_dtoa_r+0x39e>
 8010700:	2502      	movs	r5, #2
 8010702:	e7a3      	b.n	801064c <_dtoa_r+0x2b4>
 8010704:	f000 80a0 	beq.w	8010848 <_dtoa_r+0x4b0>
 8010708:	f1ca 0600 	rsb	r6, sl, #0
 801070c:	4b9f      	ldr	r3, [pc, #636]	; (801098c <_dtoa_r+0x5f4>)
 801070e:	4fa0      	ldr	r7, [pc, #640]	; (8010990 <_dtoa_r+0x5f8>)
 8010710:	f006 020f 	and.w	r2, r6, #15
 8010714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010720:	f7ef ff72 	bl	8000608 <__aeabi_dmul>
 8010724:	e9cd 0100 	strd	r0, r1, [sp]
 8010728:	1136      	asrs	r6, r6, #4
 801072a:	2300      	movs	r3, #0
 801072c:	2502      	movs	r5, #2
 801072e:	2e00      	cmp	r6, #0
 8010730:	d17f      	bne.n	8010832 <_dtoa_r+0x49a>
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1e1      	bne.n	80106fa <_dtoa_r+0x362>
 8010736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010738:	2b00      	cmp	r3, #0
 801073a:	f000 8087 	beq.w	801084c <_dtoa_r+0x4b4>
 801073e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010742:	2200      	movs	r2, #0
 8010744:	4b93      	ldr	r3, [pc, #588]	; (8010994 <_dtoa_r+0x5fc>)
 8010746:	4630      	mov	r0, r6
 8010748:	4639      	mov	r1, r7
 801074a:	f7f0 f9cf 	bl	8000aec <__aeabi_dcmplt>
 801074e:	2800      	cmp	r0, #0
 8010750:	d07c      	beq.n	801084c <_dtoa_r+0x4b4>
 8010752:	f1b9 0f00 	cmp.w	r9, #0
 8010756:	d079      	beq.n	801084c <_dtoa_r+0x4b4>
 8010758:	9b02      	ldr	r3, [sp, #8]
 801075a:	2b00      	cmp	r3, #0
 801075c:	dd35      	ble.n	80107ca <_dtoa_r+0x432>
 801075e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010762:	9308      	str	r3, [sp, #32]
 8010764:	4639      	mov	r1, r7
 8010766:	2200      	movs	r2, #0
 8010768:	4b8b      	ldr	r3, [pc, #556]	; (8010998 <_dtoa_r+0x600>)
 801076a:	4630      	mov	r0, r6
 801076c:	f7ef ff4c 	bl	8000608 <__aeabi_dmul>
 8010770:	e9cd 0100 	strd	r0, r1, [sp]
 8010774:	9f02      	ldr	r7, [sp, #8]
 8010776:	3501      	adds	r5, #1
 8010778:	4628      	mov	r0, r5
 801077a:	f7ef fedb 	bl	8000534 <__aeabi_i2d>
 801077e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010782:	f7ef ff41 	bl	8000608 <__aeabi_dmul>
 8010786:	2200      	movs	r2, #0
 8010788:	4b84      	ldr	r3, [pc, #528]	; (801099c <_dtoa_r+0x604>)
 801078a:	f7ef fd87 	bl	800029c <__adddf3>
 801078e:	4605      	mov	r5, r0
 8010790:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010794:	2f00      	cmp	r7, #0
 8010796:	d15d      	bne.n	8010854 <_dtoa_r+0x4bc>
 8010798:	2200      	movs	r2, #0
 801079a:	4b81      	ldr	r3, [pc, #516]	; (80109a0 <_dtoa_r+0x608>)
 801079c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107a0:	f7ef fd7a 	bl	8000298 <__aeabi_dsub>
 80107a4:	462a      	mov	r2, r5
 80107a6:	4633      	mov	r3, r6
 80107a8:	e9cd 0100 	strd	r0, r1, [sp]
 80107ac:	f7f0 f9bc 	bl	8000b28 <__aeabi_dcmpgt>
 80107b0:	2800      	cmp	r0, #0
 80107b2:	f040 8288 	bne.w	8010cc6 <_dtoa_r+0x92e>
 80107b6:	462a      	mov	r2, r5
 80107b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80107bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107c0:	f7f0 f994 	bl	8000aec <__aeabi_dcmplt>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	f040 827c 	bne.w	8010cc2 <_dtoa_r+0x92a>
 80107ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80107ce:	e9cd 2300 	strd	r2, r3, [sp]
 80107d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f2c0 8150 	blt.w	8010a7a <_dtoa_r+0x6e2>
 80107da:	f1ba 0f0e 	cmp.w	sl, #14
 80107de:	f300 814c 	bgt.w	8010a7a <_dtoa_r+0x6e2>
 80107e2:	4b6a      	ldr	r3, [pc, #424]	; (801098c <_dtoa_r+0x5f4>)
 80107e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80107e8:	ed93 7b00 	vldr	d7, [r3]
 80107ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80107f4:	f280 80d8 	bge.w	80109a8 <_dtoa_r+0x610>
 80107f8:	f1b9 0f00 	cmp.w	r9, #0
 80107fc:	f300 80d4 	bgt.w	80109a8 <_dtoa_r+0x610>
 8010800:	f040 825e 	bne.w	8010cc0 <_dtoa_r+0x928>
 8010804:	2200      	movs	r2, #0
 8010806:	4b66      	ldr	r3, [pc, #408]	; (80109a0 <_dtoa_r+0x608>)
 8010808:	ec51 0b17 	vmov	r0, r1, d7
 801080c:	f7ef fefc 	bl	8000608 <__aeabi_dmul>
 8010810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010814:	f7f0 f97e 	bl	8000b14 <__aeabi_dcmpge>
 8010818:	464f      	mov	r7, r9
 801081a:	464e      	mov	r6, r9
 801081c:	2800      	cmp	r0, #0
 801081e:	f040 8234 	bne.w	8010c8a <_dtoa_r+0x8f2>
 8010822:	2331      	movs	r3, #49	; 0x31
 8010824:	f10b 0501 	add.w	r5, fp, #1
 8010828:	f88b 3000 	strb.w	r3, [fp]
 801082c:	f10a 0a01 	add.w	sl, sl, #1
 8010830:	e22f      	b.n	8010c92 <_dtoa_r+0x8fa>
 8010832:	07f2      	lsls	r2, r6, #31
 8010834:	d505      	bpl.n	8010842 <_dtoa_r+0x4aa>
 8010836:	e9d7 2300 	ldrd	r2, r3, [r7]
 801083a:	f7ef fee5 	bl	8000608 <__aeabi_dmul>
 801083e:	3501      	adds	r5, #1
 8010840:	2301      	movs	r3, #1
 8010842:	1076      	asrs	r6, r6, #1
 8010844:	3708      	adds	r7, #8
 8010846:	e772      	b.n	801072e <_dtoa_r+0x396>
 8010848:	2502      	movs	r5, #2
 801084a:	e774      	b.n	8010736 <_dtoa_r+0x39e>
 801084c:	f8cd a020 	str.w	sl, [sp, #32]
 8010850:	464f      	mov	r7, r9
 8010852:	e791      	b.n	8010778 <_dtoa_r+0x3e0>
 8010854:	4b4d      	ldr	r3, [pc, #308]	; (801098c <_dtoa_r+0x5f4>)
 8010856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801085a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801085e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010860:	2b00      	cmp	r3, #0
 8010862:	d047      	beq.n	80108f4 <_dtoa_r+0x55c>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	2000      	movs	r0, #0
 801086a:	494e      	ldr	r1, [pc, #312]	; (80109a4 <_dtoa_r+0x60c>)
 801086c:	f7ef fff6 	bl	800085c <__aeabi_ddiv>
 8010870:	462a      	mov	r2, r5
 8010872:	4633      	mov	r3, r6
 8010874:	f7ef fd10 	bl	8000298 <__aeabi_dsub>
 8010878:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801087c:	465d      	mov	r5, fp
 801087e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010882:	f7f0 f971 	bl	8000b68 <__aeabi_d2iz>
 8010886:	4606      	mov	r6, r0
 8010888:	f7ef fe54 	bl	8000534 <__aeabi_i2d>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010894:	f7ef fd00 	bl	8000298 <__aeabi_dsub>
 8010898:	3630      	adds	r6, #48	; 0x30
 801089a:	f805 6b01 	strb.w	r6, [r5], #1
 801089e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80108a2:	e9cd 0100 	strd	r0, r1, [sp]
 80108a6:	f7f0 f921 	bl	8000aec <__aeabi_dcmplt>
 80108aa:	2800      	cmp	r0, #0
 80108ac:	d163      	bne.n	8010976 <_dtoa_r+0x5de>
 80108ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108b2:	2000      	movs	r0, #0
 80108b4:	4937      	ldr	r1, [pc, #220]	; (8010994 <_dtoa_r+0x5fc>)
 80108b6:	f7ef fcef 	bl	8000298 <__aeabi_dsub>
 80108ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80108be:	f7f0 f915 	bl	8000aec <__aeabi_dcmplt>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	f040 80b7 	bne.w	8010a36 <_dtoa_r+0x69e>
 80108c8:	eba5 030b 	sub.w	r3, r5, fp
 80108cc:	429f      	cmp	r7, r3
 80108ce:	f77f af7c 	ble.w	80107ca <_dtoa_r+0x432>
 80108d2:	2200      	movs	r2, #0
 80108d4:	4b30      	ldr	r3, [pc, #192]	; (8010998 <_dtoa_r+0x600>)
 80108d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108da:	f7ef fe95 	bl	8000608 <__aeabi_dmul>
 80108de:	2200      	movs	r2, #0
 80108e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80108e4:	4b2c      	ldr	r3, [pc, #176]	; (8010998 <_dtoa_r+0x600>)
 80108e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108ea:	f7ef fe8d 	bl	8000608 <__aeabi_dmul>
 80108ee:	e9cd 0100 	strd	r0, r1, [sp]
 80108f2:	e7c4      	b.n	801087e <_dtoa_r+0x4e6>
 80108f4:	462a      	mov	r2, r5
 80108f6:	4633      	mov	r3, r6
 80108f8:	f7ef fe86 	bl	8000608 <__aeabi_dmul>
 80108fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010900:	eb0b 0507 	add.w	r5, fp, r7
 8010904:	465e      	mov	r6, fp
 8010906:	e9dd 0100 	ldrd	r0, r1, [sp]
 801090a:	f7f0 f92d 	bl	8000b68 <__aeabi_d2iz>
 801090e:	4607      	mov	r7, r0
 8010910:	f7ef fe10 	bl	8000534 <__aeabi_i2d>
 8010914:	3730      	adds	r7, #48	; 0x30
 8010916:	4602      	mov	r2, r0
 8010918:	460b      	mov	r3, r1
 801091a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801091e:	f7ef fcbb 	bl	8000298 <__aeabi_dsub>
 8010922:	f806 7b01 	strb.w	r7, [r6], #1
 8010926:	42ae      	cmp	r6, r5
 8010928:	e9cd 0100 	strd	r0, r1, [sp]
 801092c:	f04f 0200 	mov.w	r2, #0
 8010930:	d126      	bne.n	8010980 <_dtoa_r+0x5e8>
 8010932:	4b1c      	ldr	r3, [pc, #112]	; (80109a4 <_dtoa_r+0x60c>)
 8010934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010938:	f7ef fcb0 	bl	800029c <__adddf3>
 801093c:	4602      	mov	r2, r0
 801093e:	460b      	mov	r3, r1
 8010940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010944:	f7f0 f8f0 	bl	8000b28 <__aeabi_dcmpgt>
 8010948:	2800      	cmp	r0, #0
 801094a:	d174      	bne.n	8010a36 <_dtoa_r+0x69e>
 801094c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010950:	2000      	movs	r0, #0
 8010952:	4914      	ldr	r1, [pc, #80]	; (80109a4 <_dtoa_r+0x60c>)
 8010954:	f7ef fca0 	bl	8000298 <__aeabi_dsub>
 8010958:	4602      	mov	r2, r0
 801095a:	460b      	mov	r3, r1
 801095c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010960:	f7f0 f8c4 	bl	8000aec <__aeabi_dcmplt>
 8010964:	2800      	cmp	r0, #0
 8010966:	f43f af30 	beq.w	80107ca <_dtoa_r+0x432>
 801096a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801096e:	2b30      	cmp	r3, #48	; 0x30
 8010970:	f105 32ff 	add.w	r2, r5, #4294967295
 8010974:	d002      	beq.n	801097c <_dtoa_r+0x5e4>
 8010976:	f8dd a020 	ldr.w	sl, [sp, #32]
 801097a:	e04a      	b.n	8010a12 <_dtoa_r+0x67a>
 801097c:	4615      	mov	r5, r2
 801097e:	e7f4      	b.n	801096a <_dtoa_r+0x5d2>
 8010980:	4b05      	ldr	r3, [pc, #20]	; (8010998 <_dtoa_r+0x600>)
 8010982:	f7ef fe41 	bl	8000608 <__aeabi_dmul>
 8010986:	e9cd 0100 	strd	r0, r1, [sp]
 801098a:	e7bc      	b.n	8010906 <_dtoa_r+0x56e>
 801098c:	08012308 	.word	0x08012308
 8010990:	080122e0 	.word	0x080122e0
 8010994:	3ff00000 	.word	0x3ff00000
 8010998:	40240000 	.word	0x40240000
 801099c:	401c0000 	.word	0x401c0000
 80109a0:	40140000 	.word	0x40140000
 80109a4:	3fe00000 	.word	0x3fe00000
 80109a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80109ac:	465d      	mov	r5, fp
 80109ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109b2:	4630      	mov	r0, r6
 80109b4:	4639      	mov	r1, r7
 80109b6:	f7ef ff51 	bl	800085c <__aeabi_ddiv>
 80109ba:	f7f0 f8d5 	bl	8000b68 <__aeabi_d2iz>
 80109be:	4680      	mov	r8, r0
 80109c0:	f7ef fdb8 	bl	8000534 <__aeabi_i2d>
 80109c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109c8:	f7ef fe1e 	bl	8000608 <__aeabi_dmul>
 80109cc:	4602      	mov	r2, r0
 80109ce:	460b      	mov	r3, r1
 80109d0:	4630      	mov	r0, r6
 80109d2:	4639      	mov	r1, r7
 80109d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80109d8:	f7ef fc5e 	bl	8000298 <__aeabi_dsub>
 80109dc:	f805 6b01 	strb.w	r6, [r5], #1
 80109e0:	eba5 060b 	sub.w	r6, r5, fp
 80109e4:	45b1      	cmp	r9, r6
 80109e6:	4602      	mov	r2, r0
 80109e8:	460b      	mov	r3, r1
 80109ea:	d139      	bne.n	8010a60 <_dtoa_r+0x6c8>
 80109ec:	f7ef fc56 	bl	800029c <__adddf3>
 80109f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109f4:	4606      	mov	r6, r0
 80109f6:	460f      	mov	r7, r1
 80109f8:	f7f0 f896 	bl	8000b28 <__aeabi_dcmpgt>
 80109fc:	b9c8      	cbnz	r0, 8010a32 <_dtoa_r+0x69a>
 80109fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a02:	4630      	mov	r0, r6
 8010a04:	4639      	mov	r1, r7
 8010a06:	f7f0 f867 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a0a:	b110      	cbz	r0, 8010a12 <_dtoa_r+0x67a>
 8010a0c:	f018 0f01 	tst.w	r8, #1
 8010a10:	d10f      	bne.n	8010a32 <_dtoa_r+0x69a>
 8010a12:	9904      	ldr	r1, [sp, #16]
 8010a14:	4620      	mov	r0, r4
 8010a16:	f000 facf 	bl	8010fb8 <_Bfree>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010a1e:	702b      	strb	r3, [r5, #0]
 8010a20:	f10a 0301 	add.w	r3, sl, #1
 8010a24:	6013      	str	r3, [r2, #0]
 8010a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f000 8241 	beq.w	8010eb0 <_dtoa_r+0xb18>
 8010a2e:	601d      	str	r5, [r3, #0]
 8010a30:	e23e      	b.n	8010eb0 <_dtoa_r+0xb18>
 8010a32:	f8cd a020 	str.w	sl, [sp, #32]
 8010a36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010a3a:	2a39      	cmp	r2, #57	; 0x39
 8010a3c:	f105 33ff 	add.w	r3, r5, #4294967295
 8010a40:	d108      	bne.n	8010a54 <_dtoa_r+0x6bc>
 8010a42:	459b      	cmp	fp, r3
 8010a44:	d10a      	bne.n	8010a5c <_dtoa_r+0x6c4>
 8010a46:	9b08      	ldr	r3, [sp, #32]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	9308      	str	r3, [sp, #32]
 8010a4c:	2330      	movs	r3, #48	; 0x30
 8010a4e:	f88b 3000 	strb.w	r3, [fp]
 8010a52:	465b      	mov	r3, fp
 8010a54:	781a      	ldrb	r2, [r3, #0]
 8010a56:	3201      	adds	r2, #1
 8010a58:	701a      	strb	r2, [r3, #0]
 8010a5a:	e78c      	b.n	8010976 <_dtoa_r+0x5de>
 8010a5c:	461d      	mov	r5, r3
 8010a5e:	e7ea      	b.n	8010a36 <_dtoa_r+0x69e>
 8010a60:	2200      	movs	r2, #0
 8010a62:	4b9b      	ldr	r3, [pc, #620]	; (8010cd0 <_dtoa_r+0x938>)
 8010a64:	f7ef fdd0 	bl	8000608 <__aeabi_dmul>
 8010a68:	2200      	movs	r2, #0
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	4606      	mov	r6, r0
 8010a6e:	460f      	mov	r7, r1
 8010a70:	f7f0 f832 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d09a      	beq.n	80109ae <_dtoa_r+0x616>
 8010a78:	e7cb      	b.n	8010a12 <_dtoa_r+0x67a>
 8010a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a7c:	2a00      	cmp	r2, #0
 8010a7e:	f000 808b 	beq.w	8010b98 <_dtoa_r+0x800>
 8010a82:	9a06      	ldr	r2, [sp, #24]
 8010a84:	2a01      	cmp	r2, #1
 8010a86:	dc6e      	bgt.n	8010b66 <_dtoa_r+0x7ce>
 8010a88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010a8a:	2a00      	cmp	r2, #0
 8010a8c:	d067      	beq.n	8010b5e <_dtoa_r+0x7c6>
 8010a8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a92:	9f07      	ldr	r7, [sp, #28]
 8010a94:	9d05      	ldr	r5, [sp, #20]
 8010a96:	9a05      	ldr	r2, [sp, #20]
 8010a98:	2101      	movs	r1, #1
 8010a9a:	441a      	add	r2, r3
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	9205      	str	r2, [sp, #20]
 8010aa0:	4498      	add	r8, r3
 8010aa2:	f000 fb29 	bl	80110f8 <__i2b>
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	2d00      	cmp	r5, #0
 8010aaa:	dd0c      	ble.n	8010ac6 <_dtoa_r+0x72e>
 8010aac:	f1b8 0f00 	cmp.w	r8, #0
 8010ab0:	dd09      	ble.n	8010ac6 <_dtoa_r+0x72e>
 8010ab2:	4545      	cmp	r5, r8
 8010ab4:	9a05      	ldr	r2, [sp, #20]
 8010ab6:	462b      	mov	r3, r5
 8010ab8:	bfa8      	it	ge
 8010aba:	4643      	movge	r3, r8
 8010abc:	1ad2      	subs	r2, r2, r3
 8010abe:	9205      	str	r2, [sp, #20]
 8010ac0:	1aed      	subs	r5, r5, r3
 8010ac2:	eba8 0803 	sub.w	r8, r8, r3
 8010ac6:	9b07      	ldr	r3, [sp, #28]
 8010ac8:	b1eb      	cbz	r3, 8010b06 <_dtoa_r+0x76e>
 8010aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d067      	beq.n	8010ba0 <_dtoa_r+0x808>
 8010ad0:	b18f      	cbz	r7, 8010af6 <_dtoa_r+0x75e>
 8010ad2:	4631      	mov	r1, r6
 8010ad4:	463a      	mov	r2, r7
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 fbae 	bl	8011238 <__pow5mult>
 8010adc:	9a04      	ldr	r2, [sp, #16]
 8010ade:	4601      	mov	r1, r0
 8010ae0:	4606      	mov	r6, r0
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f000 fb11 	bl	801110a <__multiply>
 8010ae8:	9904      	ldr	r1, [sp, #16]
 8010aea:	9008      	str	r0, [sp, #32]
 8010aec:	4620      	mov	r0, r4
 8010aee:	f000 fa63 	bl	8010fb8 <_Bfree>
 8010af2:	9b08      	ldr	r3, [sp, #32]
 8010af4:	9304      	str	r3, [sp, #16]
 8010af6:	9b07      	ldr	r3, [sp, #28]
 8010af8:	1bda      	subs	r2, r3, r7
 8010afa:	d004      	beq.n	8010b06 <_dtoa_r+0x76e>
 8010afc:	9904      	ldr	r1, [sp, #16]
 8010afe:	4620      	mov	r0, r4
 8010b00:	f000 fb9a 	bl	8011238 <__pow5mult>
 8010b04:	9004      	str	r0, [sp, #16]
 8010b06:	2101      	movs	r1, #1
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f000 faf5 	bl	80110f8 <__i2b>
 8010b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b10:	4607      	mov	r7, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f000 81d0 	beq.w	8010eb8 <_dtoa_r+0xb20>
 8010b18:	461a      	mov	r2, r3
 8010b1a:	4601      	mov	r1, r0
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f000 fb8b 	bl	8011238 <__pow5mult>
 8010b22:	9b06      	ldr	r3, [sp, #24]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	4607      	mov	r7, r0
 8010b28:	dc40      	bgt.n	8010bac <_dtoa_r+0x814>
 8010b2a:	9b00      	ldr	r3, [sp, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d139      	bne.n	8010ba4 <_dtoa_r+0x80c>
 8010b30:	9b01      	ldr	r3, [sp, #4]
 8010b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d136      	bne.n	8010ba8 <_dtoa_r+0x810>
 8010b3a:	9b01      	ldr	r3, [sp, #4]
 8010b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b40:	0d1b      	lsrs	r3, r3, #20
 8010b42:	051b      	lsls	r3, r3, #20
 8010b44:	b12b      	cbz	r3, 8010b52 <_dtoa_r+0x7ba>
 8010b46:	9b05      	ldr	r3, [sp, #20]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	9305      	str	r3, [sp, #20]
 8010b4c:	f108 0801 	add.w	r8, r8, #1
 8010b50:	2301      	movs	r3, #1
 8010b52:	9307      	str	r3, [sp, #28]
 8010b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d12a      	bne.n	8010bb0 <_dtoa_r+0x818>
 8010b5a:	2001      	movs	r0, #1
 8010b5c:	e030      	b.n	8010bc0 <_dtoa_r+0x828>
 8010b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010b64:	e795      	b.n	8010a92 <_dtoa_r+0x6fa>
 8010b66:	9b07      	ldr	r3, [sp, #28]
 8010b68:	f109 37ff 	add.w	r7, r9, #4294967295
 8010b6c:	42bb      	cmp	r3, r7
 8010b6e:	bfbf      	itttt	lt
 8010b70:	9b07      	ldrlt	r3, [sp, #28]
 8010b72:	9707      	strlt	r7, [sp, #28]
 8010b74:	1afa      	sublt	r2, r7, r3
 8010b76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010b78:	bfbb      	ittet	lt
 8010b7a:	189b      	addlt	r3, r3, r2
 8010b7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010b7e:	1bdf      	subge	r7, r3, r7
 8010b80:	2700      	movlt	r7, #0
 8010b82:	f1b9 0f00 	cmp.w	r9, #0
 8010b86:	bfb5      	itete	lt
 8010b88:	9b05      	ldrlt	r3, [sp, #20]
 8010b8a:	9d05      	ldrge	r5, [sp, #20]
 8010b8c:	eba3 0509 	sublt.w	r5, r3, r9
 8010b90:	464b      	movge	r3, r9
 8010b92:	bfb8      	it	lt
 8010b94:	2300      	movlt	r3, #0
 8010b96:	e77e      	b.n	8010a96 <_dtoa_r+0x6fe>
 8010b98:	9f07      	ldr	r7, [sp, #28]
 8010b9a:	9d05      	ldr	r5, [sp, #20]
 8010b9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010b9e:	e783      	b.n	8010aa8 <_dtoa_r+0x710>
 8010ba0:	9a07      	ldr	r2, [sp, #28]
 8010ba2:	e7ab      	b.n	8010afc <_dtoa_r+0x764>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	e7d4      	b.n	8010b52 <_dtoa_r+0x7ba>
 8010ba8:	9b00      	ldr	r3, [sp, #0]
 8010baa:	e7d2      	b.n	8010b52 <_dtoa_r+0x7ba>
 8010bac:	2300      	movs	r3, #0
 8010bae:	9307      	str	r3, [sp, #28]
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010bb6:	6918      	ldr	r0, [r3, #16]
 8010bb8:	f000 fa50 	bl	801105c <__hi0bits>
 8010bbc:	f1c0 0020 	rsb	r0, r0, #32
 8010bc0:	4440      	add	r0, r8
 8010bc2:	f010 001f 	ands.w	r0, r0, #31
 8010bc6:	d047      	beq.n	8010c58 <_dtoa_r+0x8c0>
 8010bc8:	f1c0 0320 	rsb	r3, r0, #32
 8010bcc:	2b04      	cmp	r3, #4
 8010bce:	dd3b      	ble.n	8010c48 <_dtoa_r+0x8b0>
 8010bd0:	9b05      	ldr	r3, [sp, #20]
 8010bd2:	f1c0 001c 	rsb	r0, r0, #28
 8010bd6:	4403      	add	r3, r0
 8010bd8:	9305      	str	r3, [sp, #20]
 8010bda:	4405      	add	r5, r0
 8010bdc:	4480      	add	r8, r0
 8010bde:	9b05      	ldr	r3, [sp, #20]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	dd05      	ble.n	8010bf0 <_dtoa_r+0x858>
 8010be4:	461a      	mov	r2, r3
 8010be6:	9904      	ldr	r1, [sp, #16]
 8010be8:	4620      	mov	r0, r4
 8010bea:	f000 fb73 	bl	80112d4 <__lshift>
 8010bee:	9004      	str	r0, [sp, #16]
 8010bf0:	f1b8 0f00 	cmp.w	r8, #0
 8010bf4:	dd05      	ble.n	8010c02 <_dtoa_r+0x86a>
 8010bf6:	4639      	mov	r1, r7
 8010bf8:	4642      	mov	r2, r8
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f000 fb6a 	bl	80112d4 <__lshift>
 8010c00:	4607      	mov	r7, r0
 8010c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c04:	b353      	cbz	r3, 8010c5c <_dtoa_r+0x8c4>
 8010c06:	4639      	mov	r1, r7
 8010c08:	9804      	ldr	r0, [sp, #16]
 8010c0a:	f000 fbb7 	bl	801137c <__mcmp>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	da24      	bge.n	8010c5c <_dtoa_r+0x8c4>
 8010c12:	2300      	movs	r3, #0
 8010c14:	220a      	movs	r2, #10
 8010c16:	9904      	ldr	r1, [sp, #16]
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f000 f9e4 	bl	8010fe6 <__multadd>
 8010c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c20:	9004      	str	r0, [sp, #16]
 8010c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f000 814d 	beq.w	8010ec6 <_dtoa_r+0xb2e>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	4631      	mov	r1, r6
 8010c30:	220a      	movs	r2, #10
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 f9d7 	bl	8010fe6 <__multadd>
 8010c38:	9b02      	ldr	r3, [sp, #8]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	dc4f      	bgt.n	8010ce0 <_dtoa_r+0x948>
 8010c40:	9b06      	ldr	r3, [sp, #24]
 8010c42:	2b02      	cmp	r3, #2
 8010c44:	dd4c      	ble.n	8010ce0 <_dtoa_r+0x948>
 8010c46:	e011      	b.n	8010c6c <_dtoa_r+0x8d4>
 8010c48:	d0c9      	beq.n	8010bde <_dtoa_r+0x846>
 8010c4a:	9a05      	ldr	r2, [sp, #20]
 8010c4c:	331c      	adds	r3, #28
 8010c4e:	441a      	add	r2, r3
 8010c50:	9205      	str	r2, [sp, #20]
 8010c52:	441d      	add	r5, r3
 8010c54:	4498      	add	r8, r3
 8010c56:	e7c2      	b.n	8010bde <_dtoa_r+0x846>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	e7f6      	b.n	8010c4a <_dtoa_r+0x8b2>
 8010c5c:	f1b9 0f00 	cmp.w	r9, #0
 8010c60:	dc38      	bgt.n	8010cd4 <_dtoa_r+0x93c>
 8010c62:	9b06      	ldr	r3, [sp, #24]
 8010c64:	2b02      	cmp	r3, #2
 8010c66:	dd35      	ble.n	8010cd4 <_dtoa_r+0x93c>
 8010c68:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c6c:	9b02      	ldr	r3, [sp, #8]
 8010c6e:	b963      	cbnz	r3, 8010c8a <_dtoa_r+0x8f2>
 8010c70:	4639      	mov	r1, r7
 8010c72:	2205      	movs	r2, #5
 8010c74:	4620      	mov	r0, r4
 8010c76:	f000 f9b6 	bl	8010fe6 <__multadd>
 8010c7a:	4601      	mov	r1, r0
 8010c7c:	4607      	mov	r7, r0
 8010c7e:	9804      	ldr	r0, [sp, #16]
 8010c80:	f000 fb7c 	bl	801137c <__mcmp>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	f73f adcc 	bgt.w	8010822 <_dtoa_r+0x48a>
 8010c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c8c:	465d      	mov	r5, fp
 8010c8e:	ea6f 0a03 	mvn.w	sl, r3
 8010c92:	f04f 0900 	mov.w	r9, #0
 8010c96:	4639      	mov	r1, r7
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f000 f98d 	bl	8010fb8 <_Bfree>
 8010c9e:	2e00      	cmp	r6, #0
 8010ca0:	f43f aeb7 	beq.w	8010a12 <_dtoa_r+0x67a>
 8010ca4:	f1b9 0f00 	cmp.w	r9, #0
 8010ca8:	d005      	beq.n	8010cb6 <_dtoa_r+0x91e>
 8010caa:	45b1      	cmp	r9, r6
 8010cac:	d003      	beq.n	8010cb6 <_dtoa_r+0x91e>
 8010cae:	4649      	mov	r1, r9
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f000 f981 	bl	8010fb8 <_Bfree>
 8010cb6:	4631      	mov	r1, r6
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f000 f97d 	bl	8010fb8 <_Bfree>
 8010cbe:	e6a8      	b.n	8010a12 <_dtoa_r+0x67a>
 8010cc0:	2700      	movs	r7, #0
 8010cc2:	463e      	mov	r6, r7
 8010cc4:	e7e1      	b.n	8010c8a <_dtoa_r+0x8f2>
 8010cc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010cca:	463e      	mov	r6, r7
 8010ccc:	e5a9      	b.n	8010822 <_dtoa_r+0x48a>
 8010cce:	bf00      	nop
 8010cd0:	40240000 	.word	0x40240000
 8010cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	f000 80fa 	beq.w	8010ed4 <_dtoa_r+0xb3c>
 8010ce0:	2d00      	cmp	r5, #0
 8010ce2:	dd05      	ble.n	8010cf0 <_dtoa_r+0x958>
 8010ce4:	4631      	mov	r1, r6
 8010ce6:	462a      	mov	r2, r5
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f000 faf3 	bl	80112d4 <__lshift>
 8010cee:	4606      	mov	r6, r0
 8010cf0:	9b07      	ldr	r3, [sp, #28]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d04c      	beq.n	8010d90 <_dtoa_r+0x9f8>
 8010cf6:	6871      	ldr	r1, [r6, #4]
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f000 f929 	bl	8010f50 <_Balloc>
 8010cfe:	6932      	ldr	r2, [r6, #16]
 8010d00:	3202      	adds	r2, #2
 8010d02:	4605      	mov	r5, r0
 8010d04:	0092      	lsls	r2, r2, #2
 8010d06:	f106 010c 	add.w	r1, r6, #12
 8010d0a:	300c      	adds	r0, #12
 8010d0c:	f7fe fc06 	bl	800f51c <memcpy>
 8010d10:	2201      	movs	r2, #1
 8010d12:	4629      	mov	r1, r5
 8010d14:	4620      	mov	r0, r4
 8010d16:	f000 fadd 	bl	80112d4 <__lshift>
 8010d1a:	9b00      	ldr	r3, [sp, #0]
 8010d1c:	f8cd b014 	str.w	fp, [sp, #20]
 8010d20:	f003 0301 	and.w	r3, r3, #1
 8010d24:	46b1      	mov	r9, r6
 8010d26:	9307      	str	r3, [sp, #28]
 8010d28:	4606      	mov	r6, r0
 8010d2a:	4639      	mov	r1, r7
 8010d2c:	9804      	ldr	r0, [sp, #16]
 8010d2e:	f7ff faa5 	bl	801027c <quorem>
 8010d32:	4649      	mov	r1, r9
 8010d34:	4605      	mov	r5, r0
 8010d36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010d3a:	9804      	ldr	r0, [sp, #16]
 8010d3c:	f000 fb1e 	bl	801137c <__mcmp>
 8010d40:	4632      	mov	r2, r6
 8010d42:	9000      	str	r0, [sp, #0]
 8010d44:	4639      	mov	r1, r7
 8010d46:	4620      	mov	r0, r4
 8010d48:	f000 fb32 	bl	80113b0 <__mdiff>
 8010d4c:	68c3      	ldr	r3, [r0, #12]
 8010d4e:	4602      	mov	r2, r0
 8010d50:	bb03      	cbnz	r3, 8010d94 <_dtoa_r+0x9fc>
 8010d52:	4601      	mov	r1, r0
 8010d54:	9008      	str	r0, [sp, #32]
 8010d56:	9804      	ldr	r0, [sp, #16]
 8010d58:	f000 fb10 	bl	801137c <__mcmp>
 8010d5c:	9a08      	ldr	r2, [sp, #32]
 8010d5e:	4603      	mov	r3, r0
 8010d60:	4611      	mov	r1, r2
 8010d62:	4620      	mov	r0, r4
 8010d64:	9308      	str	r3, [sp, #32]
 8010d66:	f000 f927 	bl	8010fb8 <_Bfree>
 8010d6a:	9b08      	ldr	r3, [sp, #32]
 8010d6c:	b9a3      	cbnz	r3, 8010d98 <_dtoa_r+0xa00>
 8010d6e:	9a06      	ldr	r2, [sp, #24]
 8010d70:	b992      	cbnz	r2, 8010d98 <_dtoa_r+0xa00>
 8010d72:	9a07      	ldr	r2, [sp, #28]
 8010d74:	b982      	cbnz	r2, 8010d98 <_dtoa_r+0xa00>
 8010d76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010d7a:	d029      	beq.n	8010dd0 <_dtoa_r+0xa38>
 8010d7c:	9b00      	ldr	r3, [sp, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	dd01      	ble.n	8010d86 <_dtoa_r+0x9ee>
 8010d82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010d86:	9b05      	ldr	r3, [sp, #20]
 8010d88:	1c5d      	adds	r5, r3, #1
 8010d8a:	f883 8000 	strb.w	r8, [r3]
 8010d8e:	e782      	b.n	8010c96 <_dtoa_r+0x8fe>
 8010d90:	4630      	mov	r0, r6
 8010d92:	e7c2      	b.n	8010d1a <_dtoa_r+0x982>
 8010d94:	2301      	movs	r3, #1
 8010d96:	e7e3      	b.n	8010d60 <_dtoa_r+0x9c8>
 8010d98:	9a00      	ldr	r2, [sp, #0]
 8010d9a:	2a00      	cmp	r2, #0
 8010d9c:	db04      	blt.n	8010da8 <_dtoa_r+0xa10>
 8010d9e:	d125      	bne.n	8010dec <_dtoa_r+0xa54>
 8010da0:	9a06      	ldr	r2, [sp, #24]
 8010da2:	bb1a      	cbnz	r2, 8010dec <_dtoa_r+0xa54>
 8010da4:	9a07      	ldr	r2, [sp, #28]
 8010da6:	bb0a      	cbnz	r2, 8010dec <_dtoa_r+0xa54>
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	ddec      	ble.n	8010d86 <_dtoa_r+0x9ee>
 8010dac:	2201      	movs	r2, #1
 8010dae:	9904      	ldr	r1, [sp, #16]
 8010db0:	4620      	mov	r0, r4
 8010db2:	f000 fa8f 	bl	80112d4 <__lshift>
 8010db6:	4639      	mov	r1, r7
 8010db8:	9004      	str	r0, [sp, #16]
 8010dba:	f000 fadf 	bl	801137c <__mcmp>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	dc03      	bgt.n	8010dca <_dtoa_r+0xa32>
 8010dc2:	d1e0      	bne.n	8010d86 <_dtoa_r+0x9ee>
 8010dc4:	f018 0f01 	tst.w	r8, #1
 8010dc8:	d0dd      	beq.n	8010d86 <_dtoa_r+0x9ee>
 8010dca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010dce:	d1d8      	bne.n	8010d82 <_dtoa_r+0x9ea>
 8010dd0:	9b05      	ldr	r3, [sp, #20]
 8010dd2:	9a05      	ldr	r2, [sp, #20]
 8010dd4:	1c5d      	adds	r5, r3, #1
 8010dd6:	2339      	movs	r3, #57	; 0x39
 8010dd8:	7013      	strb	r3, [r2, #0]
 8010dda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010dde:	2b39      	cmp	r3, #57	; 0x39
 8010de0:	f105 32ff 	add.w	r2, r5, #4294967295
 8010de4:	d04f      	beq.n	8010e86 <_dtoa_r+0xaee>
 8010de6:	3301      	adds	r3, #1
 8010de8:	7013      	strb	r3, [r2, #0]
 8010dea:	e754      	b.n	8010c96 <_dtoa_r+0x8fe>
 8010dec:	9a05      	ldr	r2, [sp, #20]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f102 0501 	add.w	r5, r2, #1
 8010df4:	dd06      	ble.n	8010e04 <_dtoa_r+0xa6c>
 8010df6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010dfa:	d0e9      	beq.n	8010dd0 <_dtoa_r+0xa38>
 8010dfc:	f108 0801 	add.w	r8, r8, #1
 8010e00:	9b05      	ldr	r3, [sp, #20]
 8010e02:	e7c2      	b.n	8010d8a <_dtoa_r+0x9f2>
 8010e04:	9a02      	ldr	r2, [sp, #8]
 8010e06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010e0a:	eba5 030b 	sub.w	r3, r5, fp
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d021      	beq.n	8010e56 <_dtoa_r+0xabe>
 8010e12:	2300      	movs	r3, #0
 8010e14:	220a      	movs	r2, #10
 8010e16:	9904      	ldr	r1, [sp, #16]
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f000 f8e4 	bl	8010fe6 <__multadd>
 8010e1e:	45b1      	cmp	r9, r6
 8010e20:	9004      	str	r0, [sp, #16]
 8010e22:	f04f 0300 	mov.w	r3, #0
 8010e26:	f04f 020a 	mov.w	r2, #10
 8010e2a:	4649      	mov	r1, r9
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	d105      	bne.n	8010e3c <_dtoa_r+0xaa4>
 8010e30:	f000 f8d9 	bl	8010fe6 <__multadd>
 8010e34:	4681      	mov	r9, r0
 8010e36:	4606      	mov	r6, r0
 8010e38:	9505      	str	r5, [sp, #20]
 8010e3a:	e776      	b.n	8010d2a <_dtoa_r+0x992>
 8010e3c:	f000 f8d3 	bl	8010fe6 <__multadd>
 8010e40:	4631      	mov	r1, r6
 8010e42:	4681      	mov	r9, r0
 8010e44:	2300      	movs	r3, #0
 8010e46:	220a      	movs	r2, #10
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f000 f8cc 	bl	8010fe6 <__multadd>
 8010e4e:	4606      	mov	r6, r0
 8010e50:	e7f2      	b.n	8010e38 <_dtoa_r+0xaa0>
 8010e52:	f04f 0900 	mov.w	r9, #0
 8010e56:	2201      	movs	r2, #1
 8010e58:	9904      	ldr	r1, [sp, #16]
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f000 fa3a 	bl	80112d4 <__lshift>
 8010e60:	4639      	mov	r1, r7
 8010e62:	9004      	str	r0, [sp, #16]
 8010e64:	f000 fa8a 	bl	801137c <__mcmp>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	dcb6      	bgt.n	8010dda <_dtoa_r+0xa42>
 8010e6c:	d102      	bne.n	8010e74 <_dtoa_r+0xadc>
 8010e6e:	f018 0f01 	tst.w	r8, #1
 8010e72:	d1b2      	bne.n	8010dda <_dtoa_r+0xa42>
 8010e74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e78:	2b30      	cmp	r3, #48	; 0x30
 8010e7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8010e7e:	f47f af0a 	bne.w	8010c96 <_dtoa_r+0x8fe>
 8010e82:	4615      	mov	r5, r2
 8010e84:	e7f6      	b.n	8010e74 <_dtoa_r+0xadc>
 8010e86:	4593      	cmp	fp, r2
 8010e88:	d105      	bne.n	8010e96 <_dtoa_r+0xafe>
 8010e8a:	2331      	movs	r3, #49	; 0x31
 8010e8c:	f10a 0a01 	add.w	sl, sl, #1
 8010e90:	f88b 3000 	strb.w	r3, [fp]
 8010e94:	e6ff      	b.n	8010c96 <_dtoa_r+0x8fe>
 8010e96:	4615      	mov	r5, r2
 8010e98:	e79f      	b.n	8010dda <_dtoa_r+0xa42>
 8010e9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010f00 <_dtoa_r+0xb68>
 8010e9e:	e007      	b.n	8010eb0 <_dtoa_r+0xb18>
 8010ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ea2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010f04 <_dtoa_r+0xb6c>
 8010ea6:	b11b      	cbz	r3, 8010eb0 <_dtoa_r+0xb18>
 8010ea8:	f10b 0308 	add.w	r3, fp, #8
 8010eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010eae:	6013      	str	r3, [r2, #0]
 8010eb0:	4658      	mov	r0, fp
 8010eb2:	b017      	add	sp, #92	; 0x5c
 8010eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb8:	9b06      	ldr	r3, [sp, #24]
 8010eba:	2b01      	cmp	r3, #1
 8010ebc:	f77f ae35 	ble.w	8010b2a <_dtoa_r+0x792>
 8010ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ec2:	9307      	str	r3, [sp, #28]
 8010ec4:	e649      	b.n	8010b5a <_dtoa_r+0x7c2>
 8010ec6:	9b02      	ldr	r3, [sp, #8]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	dc03      	bgt.n	8010ed4 <_dtoa_r+0xb3c>
 8010ecc:	9b06      	ldr	r3, [sp, #24]
 8010ece:	2b02      	cmp	r3, #2
 8010ed0:	f73f aecc 	bgt.w	8010c6c <_dtoa_r+0x8d4>
 8010ed4:	465d      	mov	r5, fp
 8010ed6:	4639      	mov	r1, r7
 8010ed8:	9804      	ldr	r0, [sp, #16]
 8010eda:	f7ff f9cf 	bl	801027c <quorem>
 8010ede:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010ee2:	f805 8b01 	strb.w	r8, [r5], #1
 8010ee6:	9a02      	ldr	r2, [sp, #8]
 8010ee8:	eba5 030b 	sub.w	r3, r5, fp
 8010eec:	429a      	cmp	r2, r3
 8010eee:	ddb0      	ble.n	8010e52 <_dtoa_r+0xaba>
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	220a      	movs	r2, #10
 8010ef4:	9904      	ldr	r1, [sp, #16]
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f000 f875 	bl	8010fe6 <__multadd>
 8010efc:	9004      	str	r0, [sp, #16]
 8010efe:	e7ea      	b.n	8010ed6 <_dtoa_r+0xb3e>
 8010f00:	080122a0 	.word	0x080122a0
 8010f04:	080122c4 	.word	0x080122c4

08010f08 <__locale_ctype_ptr_l>:
 8010f08:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010f0c:	4770      	bx	lr
	...

08010f10 <_localeconv_r>:
 8010f10:	4b04      	ldr	r3, [pc, #16]	; (8010f24 <_localeconv_r+0x14>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	6a18      	ldr	r0, [r3, #32]
 8010f16:	4b04      	ldr	r3, [pc, #16]	; (8010f28 <_localeconv_r+0x18>)
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	bf08      	it	eq
 8010f1c:	4618      	moveq	r0, r3
 8010f1e:	30f0      	adds	r0, #240	; 0xf0
 8010f20:	4770      	bx	lr
 8010f22:	bf00      	nop
 8010f24:	20000094 	.word	0x20000094
 8010f28:	200000f8 	.word	0x200000f8

08010f2c <__ascii_mbtowc>:
 8010f2c:	b082      	sub	sp, #8
 8010f2e:	b901      	cbnz	r1, 8010f32 <__ascii_mbtowc+0x6>
 8010f30:	a901      	add	r1, sp, #4
 8010f32:	b142      	cbz	r2, 8010f46 <__ascii_mbtowc+0x1a>
 8010f34:	b14b      	cbz	r3, 8010f4a <__ascii_mbtowc+0x1e>
 8010f36:	7813      	ldrb	r3, [r2, #0]
 8010f38:	600b      	str	r3, [r1, #0]
 8010f3a:	7812      	ldrb	r2, [r2, #0]
 8010f3c:	1c10      	adds	r0, r2, #0
 8010f3e:	bf18      	it	ne
 8010f40:	2001      	movne	r0, #1
 8010f42:	b002      	add	sp, #8
 8010f44:	4770      	bx	lr
 8010f46:	4610      	mov	r0, r2
 8010f48:	e7fb      	b.n	8010f42 <__ascii_mbtowc+0x16>
 8010f4a:	f06f 0001 	mvn.w	r0, #1
 8010f4e:	e7f8      	b.n	8010f42 <__ascii_mbtowc+0x16>

08010f50 <_Balloc>:
 8010f50:	b570      	push	{r4, r5, r6, lr}
 8010f52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010f54:	4604      	mov	r4, r0
 8010f56:	460e      	mov	r6, r1
 8010f58:	b93d      	cbnz	r5, 8010f6a <_Balloc+0x1a>
 8010f5a:	2010      	movs	r0, #16
 8010f5c:	f7fe face 	bl	800f4fc <malloc>
 8010f60:	6260      	str	r0, [r4, #36]	; 0x24
 8010f62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010f66:	6005      	str	r5, [r0, #0]
 8010f68:	60c5      	str	r5, [r0, #12]
 8010f6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010f6c:	68eb      	ldr	r3, [r5, #12]
 8010f6e:	b183      	cbz	r3, 8010f92 <_Balloc+0x42>
 8010f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010f78:	b9b8      	cbnz	r0, 8010faa <_Balloc+0x5a>
 8010f7a:	2101      	movs	r1, #1
 8010f7c:	fa01 f506 	lsl.w	r5, r1, r6
 8010f80:	1d6a      	adds	r2, r5, #5
 8010f82:	0092      	lsls	r2, r2, #2
 8010f84:	4620      	mov	r0, r4
 8010f86:	f000 fabf 	bl	8011508 <_calloc_r>
 8010f8a:	b160      	cbz	r0, 8010fa6 <_Balloc+0x56>
 8010f8c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010f90:	e00e      	b.n	8010fb0 <_Balloc+0x60>
 8010f92:	2221      	movs	r2, #33	; 0x21
 8010f94:	2104      	movs	r1, #4
 8010f96:	4620      	mov	r0, r4
 8010f98:	f000 fab6 	bl	8011508 <_calloc_r>
 8010f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f9e:	60e8      	str	r0, [r5, #12]
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d1e4      	bne.n	8010f70 <_Balloc+0x20>
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	bd70      	pop	{r4, r5, r6, pc}
 8010faa:	6802      	ldr	r2, [r0, #0]
 8010fac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fb6:	e7f7      	b.n	8010fa8 <_Balloc+0x58>

08010fb8 <_Bfree>:
 8010fb8:	b570      	push	{r4, r5, r6, lr}
 8010fba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010fbc:	4606      	mov	r6, r0
 8010fbe:	460d      	mov	r5, r1
 8010fc0:	b93c      	cbnz	r4, 8010fd2 <_Bfree+0x1a>
 8010fc2:	2010      	movs	r0, #16
 8010fc4:	f7fe fa9a 	bl	800f4fc <malloc>
 8010fc8:	6270      	str	r0, [r6, #36]	; 0x24
 8010fca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fce:	6004      	str	r4, [r0, #0]
 8010fd0:	60c4      	str	r4, [r0, #12]
 8010fd2:	b13d      	cbz	r5, 8010fe4 <_Bfree+0x2c>
 8010fd4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010fd6:	686a      	ldr	r2, [r5, #4]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010fde:	6029      	str	r1, [r5, #0]
 8010fe0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010fe4:	bd70      	pop	{r4, r5, r6, pc}

08010fe6 <__multadd>:
 8010fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fea:	690d      	ldr	r5, [r1, #16]
 8010fec:	461f      	mov	r7, r3
 8010fee:	4606      	mov	r6, r0
 8010ff0:	460c      	mov	r4, r1
 8010ff2:	f101 0c14 	add.w	ip, r1, #20
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	f8dc 0000 	ldr.w	r0, [ip]
 8010ffc:	b281      	uxth	r1, r0
 8010ffe:	fb02 7101 	mla	r1, r2, r1, r7
 8011002:	0c0f      	lsrs	r7, r1, #16
 8011004:	0c00      	lsrs	r0, r0, #16
 8011006:	fb02 7000 	mla	r0, r2, r0, r7
 801100a:	b289      	uxth	r1, r1
 801100c:	3301      	adds	r3, #1
 801100e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011012:	429d      	cmp	r5, r3
 8011014:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011018:	f84c 1b04 	str.w	r1, [ip], #4
 801101c:	dcec      	bgt.n	8010ff8 <__multadd+0x12>
 801101e:	b1d7      	cbz	r7, 8011056 <__multadd+0x70>
 8011020:	68a3      	ldr	r3, [r4, #8]
 8011022:	42ab      	cmp	r3, r5
 8011024:	dc12      	bgt.n	801104c <__multadd+0x66>
 8011026:	6861      	ldr	r1, [r4, #4]
 8011028:	4630      	mov	r0, r6
 801102a:	3101      	adds	r1, #1
 801102c:	f7ff ff90 	bl	8010f50 <_Balloc>
 8011030:	6922      	ldr	r2, [r4, #16]
 8011032:	3202      	adds	r2, #2
 8011034:	f104 010c 	add.w	r1, r4, #12
 8011038:	4680      	mov	r8, r0
 801103a:	0092      	lsls	r2, r2, #2
 801103c:	300c      	adds	r0, #12
 801103e:	f7fe fa6d 	bl	800f51c <memcpy>
 8011042:	4621      	mov	r1, r4
 8011044:	4630      	mov	r0, r6
 8011046:	f7ff ffb7 	bl	8010fb8 <_Bfree>
 801104a:	4644      	mov	r4, r8
 801104c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011050:	3501      	adds	r5, #1
 8011052:	615f      	str	r7, [r3, #20]
 8011054:	6125      	str	r5, [r4, #16]
 8011056:	4620      	mov	r0, r4
 8011058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801105c <__hi0bits>:
 801105c:	0c02      	lsrs	r2, r0, #16
 801105e:	0412      	lsls	r2, r2, #16
 8011060:	4603      	mov	r3, r0
 8011062:	b9b2      	cbnz	r2, 8011092 <__hi0bits+0x36>
 8011064:	0403      	lsls	r3, r0, #16
 8011066:	2010      	movs	r0, #16
 8011068:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801106c:	bf04      	itt	eq
 801106e:	021b      	lsleq	r3, r3, #8
 8011070:	3008      	addeq	r0, #8
 8011072:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011076:	bf04      	itt	eq
 8011078:	011b      	lsleq	r3, r3, #4
 801107a:	3004      	addeq	r0, #4
 801107c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011080:	bf04      	itt	eq
 8011082:	009b      	lsleq	r3, r3, #2
 8011084:	3002      	addeq	r0, #2
 8011086:	2b00      	cmp	r3, #0
 8011088:	db06      	blt.n	8011098 <__hi0bits+0x3c>
 801108a:	005b      	lsls	r3, r3, #1
 801108c:	d503      	bpl.n	8011096 <__hi0bits+0x3a>
 801108e:	3001      	adds	r0, #1
 8011090:	4770      	bx	lr
 8011092:	2000      	movs	r0, #0
 8011094:	e7e8      	b.n	8011068 <__hi0bits+0xc>
 8011096:	2020      	movs	r0, #32
 8011098:	4770      	bx	lr

0801109a <__lo0bits>:
 801109a:	6803      	ldr	r3, [r0, #0]
 801109c:	f013 0207 	ands.w	r2, r3, #7
 80110a0:	4601      	mov	r1, r0
 80110a2:	d00b      	beq.n	80110bc <__lo0bits+0x22>
 80110a4:	07da      	lsls	r2, r3, #31
 80110a6:	d423      	bmi.n	80110f0 <__lo0bits+0x56>
 80110a8:	0798      	lsls	r0, r3, #30
 80110aa:	bf49      	itett	mi
 80110ac:	085b      	lsrmi	r3, r3, #1
 80110ae:	089b      	lsrpl	r3, r3, #2
 80110b0:	2001      	movmi	r0, #1
 80110b2:	600b      	strmi	r3, [r1, #0]
 80110b4:	bf5c      	itt	pl
 80110b6:	600b      	strpl	r3, [r1, #0]
 80110b8:	2002      	movpl	r0, #2
 80110ba:	4770      	bx	lr
 80110bc:	b298      	uxth	r0, r3
 80110be:	b9a8      	cbnz	r0, 80110ec <__lo0bits+0x52>
 80110c0:	0c1b      	lsrs	r3, r3, #16
 80110c2:	2010      	movs	r0, #16
 80110c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80110c8:	bf04      	itt	eq
 80110ca:	0a1b      	lsreq	r3, r3, #8
 80110cc:	3008      	addeq	r0, #8
 80110ce:	071a      	lsls	r2, r3, #28
 80110d0:	bf04      	itt	eq
 80110d2:	091b      	lsreq	r3, r3, #4
 80110d4:	3004      	addeq	r0, #4
 80110d6:	079a      	lsls	r2, r3, #30
 80110d8:	bf04      	itt	eq
 80110da:	089b      	lsreq	r3, r3, #2
 80110dc:	3002      	addeq	r0, #2
 80110de:	07da      	lsls	r2, r3, #31
 80110e0:	d402      	bmi.n	80110e8 <__lo0bits+0x4e>
 80110e2:	085b      	lsrs	r3, r3, #1
 80110e4:	d006      	beq.n	80110f4 <__lo0bits+0x5a>
 80110e6:	3001      	adds	r0, #1
 80110e8:	600b      	str	r3, [r1, #0]
 80110ea:	4770      	bx	lr
 80110ec:	4610      	mov	r0, r2
 80110ee:	e7e9      	b.n	80110c4 <__lo0bits+0x2a>
 80110f0:	2000      	movs	r0, #0
 80110f2:	4770      	bx	lr
 80110f4:	2020      	movs	r0, #32
 80110f6:	4770      	bx	lr

080110f8 <__i2b>:
 80110f8:	b510      	push	{r4, lr}
 80110fa:	460c      	mov	r4, r1
 80110fc:	2101      	movs	r1, #1
 80110fe:	f7ff ff27 	bl	8010f50 <_Balloc>
 8011102:	2201      	movs	r2, #1
 8011104:	6144      	str	r4, [r0, #20]
 8011106:	6102      	str	r2, [r0, #16]
 8011108:	bd10      	pop	{r4, pc}

0801110a <__multiply>:
 801110a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110e:	4614      	mov	r4, r2
 8011110:	690a      	ldr	r2, [r1, #16]
 8011112:	6923      	ldr	r3, [r4, #16]
 8011114:	429a      	cmp	r2, r3
 8011116:	bfb8      	it	lt
 8011118:	460b      	movlt	r3, r1
 801111a:	4688      	mov	r8, r1
 801111c:	bfbc      	itt	lt
 801111e:	46a0      	movlt	r8, r4
 8011120:	461c      	movlt	r4, r3
 8011122:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011126:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801112a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801112e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011132:	eb07 0609 	add.w	r6, r7, r9
 8011136:	42b3      	cmp	r3, r6
 8011138:	bfb8      	it	lt
 801113a:	3101      	addlt	r1, #1
 801113c:	f7ff ff08 	bl	8010f50 <_Balloc>
 8011140:	f100 0514 	add.w	r5, r0, #20
 8011144:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011148:	462b      	mov	r3, r5
 801114a:	2200      	movs	r2, #0
 801114c:	4573      	cmp	r3, lr
 801114e:	d316      	bcc.n	801117e <__multiply+0x74>
 8011150:	f104 0214 	add.w	r2, r4, #20
 8011154:	f108 0114 	add.w	r1, r8, #20
 8011158:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801115c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011160:	9300      	str	r3, [sp, #0]
 8011162:	9b00      	ldr	r3, [sp, #0]
 8011164:	9201      	str	r2, [sp, #4]
 8011166:	4293      	cmp	r3, r2
 8011168:	d80c      	bhi.n	8011184 <__multiply+0x7a>
 801116a:	2e00      	cmp	r6, #0
 801116c:	dd03      	ble.n	8011176 <__multiply+0x6c>
 801116e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011172:	2b00      	cmp	r3, #0
 8011174:	d05d      	beq.n	8011232 <__multiply+0x128>
 8011176:	6106      	str	r6, [r0, #16]
 8011178:	b003      	add	sp, #12
 801117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117e:	f843 2b04 	str.w	r2, [r3], #4
 8011182:	e7e3      	b.n	801114c <__multiply+0x42>
 8011184:	f8b2 b000 	ldrh.w	fp, [r2]
 8011188:	f1bb 0f00 	cmp.w	fp, #0
 801118c:	d023      	beq.n	80111d6 <__multiply+0xcc>
 801118e:	4689      	mov	r9, r1
 8011190:	46ac      	mov	ip, r5
 8011192:	f04f 0800 	mov.w	r8, #0
 8011196:	f859 4b04 	ldr.w	r4, [r9], #4
 801119a:	f8dc a000 	ldr.w	sl, [ip]
 801119e:	b2a3      	uxth	r3, r4
 80111a0:	fa1f fa8a 	uxth.w	sl, sl
 80111a4:	fb0b a303 	mla	r3, fp, r3, sl
 80111a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80111ac:	f8dc 4000 	ldr.w	r4, [ip]
 80111b0:	4443      	add	r3, r8
 80111b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80111b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80111ba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80111be:	46e2      	mov	sl, ip
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80111c6:	454f      	cmp	r7, r9
 80111c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80111cc:	f84a 3b04 	str.w	r3, [sl], #4
 80111d0:	d82b      	bhi.n	801122a <__multiply+0x120>
 80111d2:	f8cc 8004 	str.w	r8, [ip, #4]
 80111d6:	9b01      	ldr	r3, [sp, #4]
 80111d8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80111dc:	3204      	adds	r2, #4
 80111de:	f1ba 0f00 	cmp.w	sl, #0
 80111e2:	d020      	beq.n	8011226 <__multiply+0x11c>
 80111e4:	682b      	ldr	r3, [r5, #0]
 80111e6:	4689      	mov	r9, r1
 80111e8:	46a8      	mov	r8, r5
 80111ea:	f04f 0b00 	mov.w	fp, #0
 80111ee:	f8b9 c000 	ldrh.w	ip, [r9]
 80111f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80111f6:	fb0a 440c 	mla	r4, sl, ip, r4
 80111fa:	445c      	add	r4, fp
 80111fc:	46c4      	mov	ip, r8
 80111fe:	b29b      	uxth	r3, r3
 8011200:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011204:	f84c 3b04 	str.w	r3, [ip], #4
 8011208:	f859 3b04 	ldr.w	r3, [r9], #4
 801120c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011210:	0c1b      	lsrs	r3, r3, #16
 8011212:	fb0a b303 	mla	r3, sl, r3, fp
 8011216:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801121a:	454f      	cmp	r7, r9
 801121c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011220:	d805      	bhi.n	801122e <__multiply+0x124>
 8011222:	f8c8 3004 	str.w	r3, [r8, #4]
 8011226:	3504      	adds	r5, #4
 8011228:	e79b      	b.n	8011162 <__multiply+0x58>
 801122a:	46d4      	mov	ip, sl
 801122c:	e7b3      	b.n	8011196 <__multiply+0x8c>
 801122e:	46e0      	mov	r8, ip
 8011230:	e7dd      	b.n	80111ee <__multiply+0xe4>
 8011232:	3e01      	subs	r6, #1
 8011234:	e799      	b.n	801116a <__multiply+0x60>
	...

08011238 <__pow5mult>:
 8011238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801123c:	4615      	mov	r5, r2
 801123e:	f012 0203 	ands.w	r2, r2, #3
 8011242:	4606      	mov	r6, r0
 8011244:	460f      	mov	r7, r1
 8011246:	d007      	beq.n	8011258 <__pow5mult+0x20>
 8011248:	3a01      	subs	r2, #1
 801124a:	4c21      	ldr	r4, [pc, #132]	; (80112d0 <__pow5mult+0x98>)
 801124c:	2300      	movs	r3, #0
 801124e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011252:	f7ff fec8 	bl	8010fe6 <__multadd>
 8011256:	4607      	mov	r7, r0
 8011258:	10ad      	asrs	r5, r5, #2
 801125a:	d035      	beq.n	80112c8 <__pow5mult+0x90>
 801125c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801125e:	b93c      	cbnz	r4, 8011270 <__pow5mult+0x38>
 8011260:	2010      	movs	r0, #16
 8011262:	f7fe f94b 	bl	800f4fc <malloc>
 8011266:	6270      	str	r0, [r6, #36]	; 0x24
 8011268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801126c:	6004      	str	r4, [r0, #0]
 801126e:	60c4      	str	r4, [r0, #12]
 8011270:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011278:	b94c      	cbnz	r4, 801128e <__pow5mult+0x56>
 801127a:	f240 2171 	movw	r1, #625	; 0x271
 801127e:	4630      	mov	r0, r6
 8011280:	f7ff ff3a 	bl	80110f8 <__i2b>
 8011284:	2300      	movs	r3, #0
 8011286:	f8c8 0008 	str.w	r0, [r8, #8]
 801128a:	4604      	mov	r4, r0
 801128c:	6003      	str	r3, [r0, #0]
 801128e:	f04f 0800 	mov.w	r8, #0
 8011292:	07eb      	lsls	r3, r5, #31
 8011294:	d50a      	bpl.n	80112ac <__pow5mult+0x74>
 8011296:	4639      	mov	r1, r7
 8011298:	4622      	mov	r2, r4
 801129a:	4630      	mov	r0, r6
 801129c:	f7ff ff35 	bl	801110a <__multiply>
 80112a0:	4639      	mov	r1, r7
 80112a2:	4681      	mov	r9, r0
 80112a4:	4630      	mov	r0, r6
 80112a6:	f7ff fe87 	bl	8010fb8 <_Bfree>
 80112aa:	464f      	mov	r7, r9
 80112ac:	106d      	asrs	r5, r5, #1
 80112ae:	d00b      	beq.n	80112c8 <__pow5mult+0x90>
 80112b0:	6820      	ldr	r0, [r4, #0]
 80112b2:	b938      	cbnz	r0, 80112c4 <__pow5mult+0x8c>
 80112b4:	4622      	mov	r2, r4
 80112b6:	4621      	mov	r1, r4
 80112b8:	4630      	mov	r0, r6
 80112ba:	f7ff ff26 	bl	801110a <__multiply>
 80112be:	6020      	str	r0, [r4, #0]
 80112c0:	f8c0 8000 	str.w	r8, [r0]
 80112c4:	4604      	mov	r4, r0
 80112c6:	e7e4      	b.n	8011292 <__pow5mult+0x5a>
 80112c8:	4638      	mov	r0, r7
 80112ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ce:	bf00      	nop
 80112d0:	080123d0 	.word	0x080123d0

080112d4 <__lshift>:
 80112d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112d8:	460c      	mov	r4, r1
 80112da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80112de:	6923      	ldr	r3, [r4, #16]
 80112e0:	6849      	ldr	r1, [r1, #4]
 80112e2:	eb0a 0903 	add.w	r9, sl, r3
 80112e6:	68a3      	ldr	r3, [r4, #8]
 80112e8:	4607      	mov	r7, r0
 80112ea:	4616      	mov	r6, r2
 80112ec:	f109 0501 	add.w	r5, r9, #1
 80112f0:	42ab      	cmp	r3, r5
 80112f2:	db32      	blt.n	801135a <__lshift+0x86>
 80112f4:	4638      	mov	r0, r7
 80112f6:	f7ff fe2b 	bl	8010f50 <_Balloc>
 80112fa:	2300      	movs	r3, #0
 80112fc:	4680      	mov	r8, r0
 80112fe:	f100 0114 	add.w	r1, r0, #20
 8011302:	461a      	mov	r2, r3
 8011304:	4553      	cmp	r3, sl
 8011306:	db2b      	blt.n	8011360 <__lshift+0x8c>
 8011308:	6920      	ldr	r0, [r4, #16]
 801130a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801130e:	f104 0314 	add.w	r3, r4, #20
 8011312:	f016 021f 	ands.w	r2, r6, #31
 8011316:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801131a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801131e:	d025      	beq.n	801136c <__lshift+0x98>
 8011320:	f1c2 0e20 	rsb	lr, r2, #32
 8011324:	2000      	movs	r0, #0
 8011326:	681e      	ldr	r6, [r3, #0]
 8011328:	468a      	mov	sl, r1
 801132a:	4096      	lsls	r6, r2
 801132c:	4330      	orrs	r0, r6
 801132e:	f84a 0b04 	str.w	r0, [sl], #4
 8011332:	f853 0b04 	ldr.w	r0, [r3], #4
 8011336:	459c      	cmp	ip, r3
 8011338:	fa20 f00e 	lsr.w	r0, r0, lr
 801133c:	d814      	bhi.n	8011368 <__lshift+0x94>
 801133e:	6048      	str	r0, [r1, #4]
 8011340:	b108      	cbz	r0, 8011346 <__lshift+0x72>
 8011342:	f109 0502 	add.w	r5, r9, #2
 8011346:	3d01      	subs	r5, #1
 8011348:	4638      	mov	r0, r7
 801134a:	f8c8 5010 	str.w	r5, [r8, #16]
 801134e:	4621      	mov	r1, r4
 8011350:	f7ff fe32 	bl	8010fb8 <_Bfree>
 8011354:	4640      	mov	r0, r8
 8011356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801135a:	3101      	adds	r1, #1
 801135c:	005b      	lsls	r3, r3, #1
 801135e:	e7c7      	b.n	80112f0 <__lshift+0x1c>
 8011360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011364:	3301      	adds	r3, #1
 8011366:	e7cd      	b.n	8011304 <__lshift+0x30>
 8011368:	4651      	mov	r1, sl
 801136a:	e7dc      	b.n	8011326 <__lshift+0x52>
 801136c:	3904      	subs	r1, #4
 801136e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011372:	f841 2f04 	str.w	r2, [r1, #4]!
 8011376:	459c      	cmp	ip, r3
 8011378:	d8f9      	bhi.n	801136e <__lshift+0x9a>
 801137a:	e7e4      	b.n	8011346 <__lshift+0x72>

0801137c <__mcmp>:
 801137c:	6903      	ldr	r3, [r0, #16]
 801137e:	690a      	ldr	r2, [r1, #16]
 8011380:	1a9b      	subs	r3, r3, r2
 8011382:	b530      	push	{r4, r5, lr}
 8011384:	d10c      	bne.n	80113a0 <__mcmp+0x24>
 8011386:	0092      	lsls	r2, r2, #2
 8011388:	3014      	adds	r0, #20
 801138a:	3114      	adds	r1, #20
 801138c:	1884      	adds	r4, r0, r2
 801138e:	4411      	add	r1, r2
 8011390:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011394:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011398:	4295      	cmp	r5, r2
 801139a:	d003      	beq.n	80113a4 <__mcmp+0x28>
 801139c:	d305      	bcc.n	80113aa <__mcmp+0x2e>
 801139e:	2301      	movs	r3, #1
 80113a0:	4618      	mov	r0, r3
 80113a2:	bd30      	pop	{r4, r5, pc}
 80113a4:	42a0      	cmp	r0, r4
 80113a6:	d3f3      	bcc.n	8011390 <__mcmp+0x14>
 80113a8:	e7fa      	b.n	80113a0 <__mcmp+0x24>
 80113aa:	f04f 33ff 	mov.w	r3, #4294967295
 80113ae:	e7f7      	b.n	80113a0 <__mcmp+0x24>

080113b0 <__mdiff>:
 80113b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113b4:	460d      	mov	r5, r1
 80113b6:	4607      	mov	r7, r0
 80113b8:	4611      	mov	r1, r2
 80113ba:	4628      	mov	r0, r5
 80113bc:	4614      	mov	r4, r2
 80113be:	f7ff ffdd 	bl	801137c <__mcmp>
 80113c2:	1e06      	subs	r6, r0, #0
 80113c4:	d108      	bne.n	80113d8 <__mdiff+0x28>
 80113c6:	4631      	mov	r1, r6
 80113c8:	4638      	mov	r0, r7
 80113ca:	f7ff fdc1 	bl	8010f50 <_Balloc>
 80113ce:	2301      	movs	r3, #1
 80113d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80113d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113d8:	bfa4      	itt	ge
 80113da:	4623      	movge	r3, r4
 80113dc:	462c      	movge	r4, r5
 80113de:	4638      	mov	r0, r7
 80113e0:	6861      	ldr	r1, [r4, #4]
 80113e2:	bfa6      	itte	ge
 80113e4:	461d      	movge	r5, r3
 80113e6:	2600      	movge	r6, #0
 80113e8:	2601      	movlt	r6, #1
 80113ea:	f7ff fdb1 	bl	8010f50 <_Balloc>
 80113ee:	692b      	ldr	r3, [r5, #16]
 80113f0:	60c6      	str	r6, [r0, #12]
 80113f2:	6926      	ldr	r6, [r4, #16]
 80113f4:	f105 0914 	add.w	r9, r5, #20
 80113f8:	f104 0214 	add.w	r2, r4, #20
 80113fc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011400:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011404:	f100 0514 	add.w	r5, r0, #20
 8011408:	f04f 0e00 	mov.w	lr, #0
 801140c:	f852 ab04 	ldr.w	sl, [r2], #4
 8011410:	f859 4b04 	ldr.w	r4, [r9], #4
 8011414:	fa1e f18a 	uxtah	r1, lr, sl
 8011418:	b2a3      	uxth	r3, r4
 801141a:	1ac9      	subs	r1, r1, r3
 801141c:	0c23      	lsrs	r3, r4, #16
 801141e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011422:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011426:	b289      	uxth	r1, r1
 8011428:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801142c:	45c8      	cmp	r8, r9
 801142e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011432:	4694      	mov	ip, r2
 8011434:	f845 3b04 	str.w	r3, [r5], #4
 8011438:	d8e8      	bhi.n	801140c <__mdiff+0x5c>
 801143a:	45bc      	cmp	ip, r7
 801143c:	d304      	bcc.n	8011448 <__mdiff+0x98>
 801143e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011442:	b183      	cbz	r3, 8011466 <__mdiff+0xb6>
 8011444:	6106      	str	r6, [r0, #16]
 8011446:	e7c5      	b.n	80113d4 <__mdiff+0x24>
 8011448:	f85c 1b04 	ldr.w	r1, [ip], #4
 801144c:	fa1e f381 	uxtah	r3, lr, r1
 8011450:	141a      	asrs	r2, r3, #16
 8011452:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011456:	b29b      	uxth	r3, r3
 8011458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801145c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011460:	f845 3b04 	str.w	r3, [r5], #4
 8011464:	e7e9      	b.n	801143a <__mdiff+0x8a>
 8011466:	3e01      	subs	r6, #1
 8011468:	e7e9      	b.n	801143e <__mdiff+0x8e>

0801146a <__d2b>:
 801146a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801146e:	460e      	mov	r6, r1
 8011470:	2101      	movs	r1, #1
 8011472:	ec59 8b10 	vmov	r8, r9, d0
 8011476:	4615      	mov	r5, r2
 8011478:	f7ff fd6a 	bl	8010f50 <_Balloc>
 801147c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011480:	4607      	mov	r7, r0
 8011482:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011486:	bb34      	cbnz	r4, 80114d6 <__d2b+0x6c>
 8011488:	9301      	str	r3, [sp, #4]
 801148a:	f1b8 0300 	subs.w	r3, r8, #0
 801148e:	d027      	beq.n	80114e0 <__d2b+0x76>
 8011490:	a802      	add	r0, sp, #8
 8011492:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011496:	f7ff fe00 	bl	801109a <__lo0bits>
 801149a:	9900      	ldr	r1, [sp, #0]
 801149c:	b1f0      	cbz	r0, 80114dc <__d2b+0x72>
 801149e:	9a01      	ldr	r2, [sp, #4]
 80114a0:	f1c0 0320 	rsb	r3, r0, #32
 80114a4:	fa02 f303 	lsl.w	r3, r2, r3
 80114a8:	430b      	orrs	r3, r1
 80114aa:	40c2      	lsrs	r2, r0
 80114ac:	617b      	str	r3, [r7, #20]
 80114ae:	9201      	str	r2, [sp, #4]
 80114b0:	9b01      	ldr	r3, [sp, #4]
 80114b2:	61bb      	str	r3, [r7, #24]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	bf14      	ite	ne
 80114b8:	2102      	movne	r1, #2
 80114ba:	2101      	moveq	r1, #1
 80114bc:	6139      	str	r1, [r7, #16]
 80114be:	b1c4      	cbz	r4, 80114f2 <__d2b+0x88>
 80114c0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80114c4:	4404      	add	r4, r0
 80114c6:	6034      	str	r4, [r6, #0]
 80114c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80114cc:	6028      	str	r0, [r5, #0]
 80114ce:	4638      	mov	r0, r7
 80114d0:	b003      	add	sp, #12
 80114d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80114da:	e7d5      	b.n	8011488 <__d2b+0x1e>
 80114dc:	6179      	str	r1, [r7, #20]
 80114de:	e7e7      	b.n	80114b0 <__d2b+0x46>
 80114e0:	a801      	add	r0, sp, #4
 80114e2:	f7ff fdda 	bl	801109a <__lo0bits>
 80114e6:	9b01      	ldr	r3, [sp, #4]
 80114e8:	617b      	str	r3, [r7, #20]
 80114ea:	2101      	movs	r1, #1
 80114ec:	6139      	str	r1, [r7, #16]
 80114ee:	3020      	adds	r0, #32
 80114f0:	e7e5      	b.n	80114be <__d2b+0x54>
 80114f2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80114f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80114fa:	6030      	str	r0, [r6, #0]
 80114fc:	6918      	ldr	r0, [r3, #16]
 80114fe:	f7ff fdad 	bl	801105c <__hi0bits>
 8011502:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011506:	e7e1      	b.n	80114cc <__d2b+0x62>

08011508 <_calloc_r>:
 8011508:	b538      	push	{r3, r4, r5, lr}
 801150a:	fb02 f401 	mul.w	r4, r2, r1
 801150e:	4621      	mov	r1, r4
 8011510:	f7fe f866 	bl	800f5e0 <_malloc_r>
 8011514:	4605      	mov	r5, r0
 8011516:	b118      	cbz	r0, 8011520 <_calloc_r+0x18>
 8011518:	4622      	mov	r2, r4
 801151a:	2100      	movs	r1, #0
 801151c:	f7fe f809 	bl	800f532 <memset>
 8011520:	4628      	mov	r0, r5
 8011522:	bd38      	pop	{r3, r4, r5, pc}

08011524 <__ssputs_r>:
 8011524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011528:	688e      	ldr	r6, [r1, #8]
 801152a:	429e      	cmp	r6, r3
 801152c:	4682      	mov	sl, r0
 801152e:	460c      	mov	r4, r1
 8011530:	4690      	mov	r8, r2
 8011532:	4699      	mov	r9, r3
 8011534:	d837      	bhi.n	80115a6 <__ssputs_r+0x82>
 8011536:	898a      	ldrh	r2, [r1, #12]
 8011538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801153c:	d031      	beq.n	80115a2 <__ssputs_r+0x7e>
 801153e:	6825      	ldr	r5, [r4, #0]
 8011540:	6909      	ldr	r1, [r1, #16]
 8011542:	1a6f      	subs	r7, r5, r1
 8011544:	6965      	ldr	r5, [r4, #20]
 8011546:	2302      	movs	r3, #2
 8011548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801154c:	fb95 f5f3 	sdiv	r5, r5, r3
 8011550:	f109 0301 	add.w	r3, r9, #1
 8011554:	443b      	add	r3, r7
 8011556:	429d      	cmp	r5, r3
 8011558:	bf38      	it	cc
 801155a:	461d      	movcc	r5, r3
 801155c:	0553      	lsls	r3, r2, #21
 801155e:	d530      	bpl.n	80115c2 <__ssputs_r+0x9e>
 8011560:	4629      	mov	r1, r5
 8011562:	f7fe f83d 	bl	800f5e0 <_malloc_r>
 8011566:	4606      	mov	r6, r0
 8011568:	b950      	cbnz	r0, 8011580 <__ssputs_r+0x5c>
 801156a:	230c      	movs	r3, #12
 801156c:	f8ca 3000 	str.w	r3, [sl]
 8011570:	89a3      	ldrh	r3, [r4, #12]
 8011572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011576:	81a3      	strh	r3, [r4, #12]
 8011578:	f04f 30ff 	mov.w	r0, #4294967295
 801157c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011580:	463a      	mov	r2, r7
 8011582:	6921      	ldr	r1, [r4, #16]
 8011584:	f7fd ffca 	bl	800f51c <memcpy>
 8011588:	89a3      	ldrh	r3, [r4, #12]
 801158a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801158e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011592:	81a3      	strh	r3, [r4, #12]
 8011594:	6126      	str	r6, [r4, #16]
 8011596:	6165      	str	r5, [r4, #20]
 8011598:	443e      	add	r6, r7
 801159a:	1bed      	subs	r5, r5, r7
 801159c:	6026      	str	r6, [r4, #0]
 801159e:	60a5      	str	r5, [r4, #8]
 80115a0:	464e      	mov	r6, r9
 80115a2:	454e      	cmp	r6, r9
 80115a4:	d900      	bls.n	80115a8 <__ssputs_r+0x84>
 80115a6:	464e      	mov	r6, r9
 80115a8:	4632      	mov	r2, r6
 80115aa:	4641      	mov	r1, r8
 80115ac:	6820      	ldr	r0, [r4, #0]
 80115ae:	f000 f918 	bl	80117e2 <memmove>
 80115b2:	68a3      	ldr	r3, [r4, #8]
 80115b4:	1b9b      	subs	r3, r3, r6
 80115b6:	60a3      	str	r3, [r4, #8]
 80115b8:	6823      	ldr	r3, [r4, #0]
 80115ba:	441e      	add	r6, r3
 80115bc:	6026      	str	r6, [r4, #0]
 80115be:	2000      	movs	r0, #0
 80115c0:	e7dc      	b.n	801157c <__ssputs_r+0x58>
 80115c2:	462a      	mov	r2, r5
 80115c4:	f000 f926 	bl	8011814 <_realloc_r>
 80115c8:	4606      	mov	r6, r0
 80115ca:	2800      	cmp	r0, #0
 80115cc:	d1e2      	bne.n	8011594 <__ssputs_r+0x70>
 80115ce:	6921      	ldr	r1, [r4, #16]
 80115d0:	4650      	mov	r0, sl
 80115d2:	f7fd ffb7 	bl	800f544 <_free_r>
 80115d6:	e7c8      	b.n	801156a <__ssputs_r+0x46>

080115d8 <_svfiprintf_r>:
 80115d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115dc:	461d      	mov	r5, r3
 80115de:	898b      	ldrh	r3, [r1, #12]
 80115e0:	061f      	lsls	r7, r3, #24
 80115e2:	b09d      	sub	sp, #116	; 0x74
 80115e4:	4680      	mov	r8, r0
 80115e6:	460c      	mov	r4, r1
 80115e8:	4616      	mov	r6, r2
 80115ea:	d50f      	bpl.n	801160c <_svfiprintf_r+0x34>
 80115ec:	690b      	ldr	r3, [r1, #16]
 80115ee:	b96b      	cbnz	r3, 801160c <_svfiprintf_r+0x34>
 80115f0:	2140      	movs	r1, #64	; 0x40
 80115f2:	f7fd fff5 	bl	800f5e0 <_malloc_r>
 80115f6:	6020      	str	r0, [r4, #0]
 80115f8:	6120      	str	r0, [r4, #16]
 80115fa:	b928      	cbnz	r0, 8011608 <_svfiprintf_r+0x30>
 80115fc:	230c      	movs	r3, #12
 80115fe:	f8c8 3000 	str.w	r3, [r8]
 8011602:	f04f 30ff 	mov.w	r0, #4294967295
 8011606:	e0c8      	b.n	801179a <_svfiprintf_r+0x1c2>
 8011608:	2340      	movs	r3, #64	; 0x40
 801160a:	6163      	str	r3, [r4, #20]
 801160c:	2300      	movs	r3, #0
 801160e:	9309      	str	r3, [sp, #36]	; 0x24
 8011610:	2320      	movs	r3, #32
 8011612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011616:	2330      	movs	r3, #48	; 0x30
 8011618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801161c:	9503      	str	r5, [sp, #12]
 801161e:	f04f 0b01 	mov.w	fp, #1
 8011622:	4637      	mov	r7, r6
 8011624:	463d      	mov	r5, r7
 8011626:	f815 3b01 	ldrb.w	r3, [r5], #1
 801162a:	b10b      	cbz	r3, 8011630 <_svfiprintf_r+0x58>
 801162c:	2b25      	cmp	r3, #37	; 0x25
 801162e:	d13e      	bne.n	80116ae <_svfiprintf_r+0xd6>
 8011630:	ebb7 0a06 	subs.w	sl, r7, r6
 8011634:	d00b      	beq.n	801164e <_svfiprintf_r+0x76>
 8011636:	4653      	mov	r3, sl
 8011638:	4632      	mov	r2, r6
 801163a:	4621      	mov	r1, r4
 801163c:	4640      	mov	r0, r8
 801163e:	f7ff ff71 	bl	8011524 <__ssputs_r>
 8011642:	3001      	adds	r0, #1
 8011644:	f000 80a4 	beq.w	8011790 <_svfiprintf_r+0x1b8>
 8011648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801164a:	4453      	add	r3, sl
 801164c:	9309      	str	r3, [sp, #36]	; 0x24
 801164e:	783b      	ldrb	r3, [r7, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	f000 809d 	beq.w	8011790 <_svfiprintf_r+0x1b8>
 8011656:	2300      	movs	r3, #0
 8011658:	f04f 32ff 	mov.w	r2, #4294967295
 801165c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011660:	9304      	str	r3, [sp, #16]
 8011662:	9307      	str	r3, [sp, #28]
 8011664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011668:	931a      	str	r3, [sp, #104]	; 0x68
 801166a:	462f      	mov	r7, r5
 801166c:	2205      	movs	r2, #5
 801166e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011672:	4850      	ldr	r0, [pc, #320]	; (80117b4 <_svfiprintf_r+0x1dc>)
 8011674:	f7ee fdbc 	bl	80001f0 <memchr>
 8011678:	9b04      	ldr	r3, [sp, #16]
 801167a:	b9d0      	cbnz	r0, 80116b2 <_svfiprintf_r+0xda>
 801167c:	06d9      	lsls	r1, r3, #27
 801167e:	bf44      	itt	mi
 8011680:	2220      	movmi	r2, #32
 8011682:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011686:	071a      	lsls	r2, r3, #28
 8011688:	bf44      	itt	mi
 801168a:	222b      	movmi	r2, #43	; 0x2b
 801168c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011690:	782a      	ldrb	r2, [r5, #0]
 8011692:	2a2a      	cmp	r2, #42	; 0x2a
 8011694:	d015      	beq.n	80116c2 <_svfiprintf_r+0xea>
 8011696:	9a07      	ldr	r2, [sp, #28]
 8011698:	462f      	mov	r7, r5
 801169a:	2000      	movs	r0, #0
 801169c:	250a      	movs	r5, #10
 801169e:	4639      	mov	r1, r7
 80116a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116a4:	3b30      	subs	r3, #48	; 0x30
 80116a6:	2b09      	cmp	r3, #9
 80116a8:	d94d      	bls.n	8011746 <_svfiprintf_r+0x16e>
 80116aa:	b1b8      	cbz	r0, 80116dc <_svfiprintf_r+0x104>
 80116ac:	e00f      	b.n	80116ce <_svfiprintf_r+0xf6>
 80116ae:	462f      	mov	r7, r5
 80116b0:	e7b8      	b.n	8011624 <_svfiprintf_r+0x4c>
 80116b2:	4a40      	ldr	r2, [pc, #256]	; (80117b4 <_svfiprintf_r+0x1dc>)
 80116b4:	1a80      	subs	r0, r0, r2
 80116b6:	fa0b f000 	lsl.w	r0, fp, r0
 80116ba:	4318      	orrs	r0, r3
 80116bc:	9004      	str	r0, [sp, #16]
 80116be:	463d      	mov	r5, r7
 80116c0:	e7d3      	b.n	801166a <_svfiprintf_r+0x92>
 80116c2:	9a03      	ldr	r2, [sp, #12]
 80116c4:	1d11      	adds	r1, r2, #4
 80116c6:	6812      	ldr	r2, [r2, #0]
 80116c8:	9103      	str	r1, [sp, #12]
 80116ca:	2a00      	cmp	r2, #0
 80116cc:	db01      	blt.n	80116d2 <_svfiprintf_r+0xfa>
 80116ce:	9207      	str	r2, [sp, #28]
 80116d0:	e004      	b.n	80116dc <_svfiprintf_r+0x104>
 80116d2:	4252      	negs	r2, r2
 80116d4:	f043 0302 	orr.w	r3, r3, #2
 80116d8:	9207      	str	r2, [sp, #28]
 80116da:	9304      	str	r3, [sp, #16]
 80116dc:	783b      	ldrb	r3, [r7, #0]
 80116de:	2b2e      	cmp	r3, #46	; 0x2e
 80116e0:	d10c      	bne.n	80116fc <_svfiprintf_r+0x124>
 80116e2:	787b      	ldrb	r3, [r7, #1]
 80116e4:	2b2a      	cmp	r3, #42	; 0x2a
 80116e6:	d133      	bne.n	8011750 <_svfiprintf_r+0x178>
 80116e8:	9b03      	ldr	r3, [sp, #12]
 80116ea:	1d1a      	adds	r2, r3, #4
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	9203      	str	r2, [sp, #12]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	bfb8      	it	lt
 80116f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80116f8:	3702      	adds	r7, #2
 80116fa:	9305      	str	r3, [sp, #20]
 80116fc:	4d2e      	ldr	r5, [pc, #184]	; (80117b8 <_svfiprintf_r+0x1e0>)
 80116fe:	7839      	ldrb	r1, [r7, #0]
 8011700:	2203      	movs	r2, #3
 8011702:	4628      	mov	r0, r5
 8011704:	f7ee fd74 	bl	80001f0 <memchr>
 8011708:	b138      	cbz	r0, 801171a <_svfiprintf_r+0x142>
 801170a:	2340      	movs	r3, #64	; 0x40
 801170c:	1b40      	subs	r0, r0, r5
 801170e:	fa03 f000 	lsl.w	r0, r3, r0
 8011712:	9b04      	ldr	r3, [sp, #16]
 8011714:	4303      	orrs	r3, r0
 8011716:	3701      	adds	r7, #1
 8011718:	9304      	str	r3, [sp, #16]
 801171a:	7839      	ldrb	r1, [r7, #0]
 801171c:	4827      	ldr	r0, [pc, #156]	; (80117bc <_svfiprintf_r+0x1e4>)
 801171e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011722:	2206      	movs	r2, #6
 8011724:	1c7e      	adds	r6, r7, #1
 8011726:	f7ee fd63 	bl	80001f0 <memchr>
 801172a:	2800      	cmp	r0, #0
 801172c:	d038      	beq.n	80117a0 <_svfiprintf_r+0x1c8>
 801172e:	4b24      	ldr	r3, [pc, #144]	; (80117c0 <_svfiprintf_r+0x1e8>)
 8011730:	bb13      	cbnz	r3, 8011778 <_svfiprintf_r+0x1a0>
 8011732:	9b03      	ldr	r3, [sp, #12]
 8011734:	3307      	adds	r3, #7
 8011736:	f023 0307 	bic.w	r3, r3, #7
 801173a:	3308      	adds	r3, #8
 801173c:	9303      	str	r3, [sp, #12]
 801173e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011740:	444b      	add	r3, r9
 8011742:	9309      	str	r3, [sp, #36]	; 0x24
 8011744:	e76d      	b.n	8011622 <_svfiprintf_r+0x4a>
 8011746:	fb05 3202 	mla	r2, r5, r2, r3
 801174a:	2001      	movs	r0, #1
 801174c:	460f      	mov	r7, r1
 801174e:	e7a6      	b.n	801169e <_svfiprintf_r+0xc6>
 8011750:	2300      	movs	r3, #0
 8011752:	3701      	adds	r7, #1
 8011754:	9305      	str	r3, [sp, #20]
 8011756:	4619      	mov	r1, r3
 8011758:	250a      	movs	r5, #10
 801175a:	4638      	mov	r0, r7
 801175c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011760:	3a30      	subs	r2, #48	; 0x30
 8011762:	2a09      	cmp	r2, #9
 8011764:	d903      	bls.n	801176e <_svfiprintf_r+0x196>
 8011766:	2b00      	cmp	r3, #0
 8011768:	d0c8      	beq.n	80116fc <_svfiprintf_r+0x124>
 801176a:	9105      	str	r1, [sp, #20]
 801176c:	e7c6      	b.n	80116fc <_svfiprintf_r+0x124>
 801176e:	fb05 2101 	mla	r1, r5, r1, r2
 8011772:	2301      	movs	r3, #1
 8011774:	4607      	mov	r7, r0
 8011776:	e7f0      	b.n	801175a <_svfiprintf_r+0x182>
 8011778:	ab03      	add	r3, sp, #12
 801177a:	9300      	str	r3, [sp, #0]
 801177c:	4622      	mov	r2, r4
 801177e:	4b11      	ldr	r3, [pc, #68]	; (80117c4 <_svfiprintf_r+0x1ec>)
 8011780:	a904      	add	r1, sp, #16
 8011782:	4640      	mov	r0, r8
 8011784:	f7fe f81a 	bl	800f7bc <_printf_float>
 8011788:	f1b0 3fff 	cmp.w	r0, #4294967295
 801178c:	4681      	mov	r9, r0
 801178e:	d1d6      	bne.n	801173e <_svfiprintf_r+0x166>
 8011790:	89a3      	ldrh	r3, [r4, #12]
 8011792:	065b      	lsls	r3, r3, #25
 8011794:	f53f af35 	bmi.w	8011602 <_svfiprintf_r+0x2a>
 8011798:	9809      	ldr	r0, [sp, #36]	; 0x24
 801179a:	b01d      	add	sp, #116	; 0x74
 801179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a0:	ab03      	add	r3, sp, #12
 80117a2:	9300      	str	r3, [sp, #0]
 80117a4:	4622      	mov	r2, r4
 80117a6:	4b07      	ldr	r3, [pc, #28]	; (80117c4 <_svfiprintf_r+0x1ec>)
 80117a8:	a904      	add	r1, sp, #16
 80117aa:	4640      	mov	r0, r8
 80117ac:	f7fe fabc 	bl	800fd28 <_printf_i>
 80117b0:	e7ea      	b.n	8011788 <_svfiprintf_r+0x1b0>
 80117b2:	bf00      	nop
 80117b4:	080123dc 	.word	0x080123dc
 80117b8:	080123e2 	.word	0x080123e2
 80117bc:	080123e6 	.word	0x080123e6
 80117c0:	0800f7bd 	.word	0x0800f7bd
 80117c4:	08011525 	.word	0x08011525

080117c8 <__ascii_wctomb>:
 80117c8:	b149      	cbz	r1, 80117de <__ascii_wctomb+0x16>
 80117ca:	2aff      	cmp	r2, #255	; 0xff
 80117cc:	bf85      	ittet	hi
 80117ce:	238a      	movhi	r3, #138	; 0x8a
 80117d0:	6003      	strhi	r3, [r0, #0]
 80117d2:	700a      	strbls	r2, [r1, #0]
 80117d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80117d8:	bf98      	it	ls
 80117da:	2001      	movls	r0, #1
 80117dc:	4770      	bx	lr
 80117de:	4608      	mov	r0, r1
 80117e0:	4770      	bx	lr

080117e2 <memmove>:
 80117e2:	4288      	cmp	r0, r1
 80117e4:	b510      	push	{r4, lr}
 80117e6:	eb01 0302 	add.w	r3, r1, r2
 80117ea:	d807      	bhi.n	80117fc <memmove+0x1a>
 80117ec:	1e42      	subs	r2, r0, #1
 80117ee:	4299      	cmp	r1, r3
 80117f0:	d00a      	beq.n	8011808 <memmove+0x26>
 80117f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80117fa:	e7f8      	b.n	80117ee <memmove+0xc>
 80117fc:	4283      	cmp	r3, r0
 80117fe:	d9f5      	bls.n	80117ec <memmove+0xa>
 8011800:	1881      	adds	r1, r0, r2
 8011802:	1ad2      	subs	r2, r2, r3
 8011804:	42d3      	cmn	r3, r2
 8011806:	d100      	bne.n	801180a <memmove+0x28>
 8011808:	bd10      	pop	{r4, pc}
 801180a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801180e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011812:	e7f7      	b.n	8011804 <memmove+0x22>

08011814 <_realloc_r>:
 8011814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011816:	4607      	mov	r7, r0
 8011818:	4614      	mov	r4, r2
 801181a:	460e      	mov	r6, r1
 801181c:	b921      	cbnz	r1, 8011828 <_realloc_r+0x14>
 801181e:	4611      	mov	r1, r2
 8011820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011824:	f7fd bedc 	b.w	800f5e0 <_malloc_r>
 8011828:	b922      	cbnz	r2, 8011834 <_realloc_r+0x20>
 801182a:	f7fd fe8b 	bl	800f544 <_free_r>
 801182e:	4625      	mov	r5, r4
 8011830:	4628      	mov	r0, r5
 8011832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011834:	f000 f814 	bl	8011860 <_malloc_usable_size_r>
 8011838:	42a0      	cmp	r0, r4
 801183a:	d20f      	bcs.n	801185c <_realloc_r+0x48>
 801183c:	4621      	mov	r1, r4
 801183e:	4638      	mov	r0, r7
 8011840:	f7fd fece 	bl	800f5e0 <_malloc_r>
 8011844:	4605      	mov	r5, r0
 8011846:	2800      	cmp	r0, #0
 8011848:	d0f2      	beq.n	8011830 <_realloc_r+0x1c>
 801184a:	4631      	mov	r1, r6
 801184c:	4622      	mov	r2, r4
 801184e:	f7fd fe65 	bl	800f51c <memcpy>
 8011852:	4631      	mov	r1, r6
 8011854:	4638      	mov	r0, r7
 8011856:	f7fd fe75 	bl	800f544 <_free_r>
 801185a:	e7e9      	b.n	8011830 <_realloc_r+0x1c>
 801185c:	4635      	mov	r5, r6
 801185e:	e7e7      	b.n	8011830 <_realloc_r+0x1c>

08011860 <_malloc_usable_size_r>:
 8011860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011864:	1f18      	subs	r0, r3, #4
 8011866:	2b00      	cmp	r3, #0
 8011868:	bfbc      	itt	lt
 801186a:	580b      	ldrlt	r3, [r1, r0]
 801186c:	18c0      	addlt	r0, r0, r3
 801186e:	4770      	bx	lr

08011870 <_init>:
 8011870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011872:	bf00      	nop
 8011874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011876:	bc08      	pop	{r3}
 8011878:	469e      	mov	lr, r3
 801187a:	4770      	bx	lr

0801187c <_fini>:
 801187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187e:	bf00      	nop
 8011880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011882:	bc08      	pop	{r3}
 8011884:	469e      	mov	lr, r3
 8011886:	4770      	bx	lr
