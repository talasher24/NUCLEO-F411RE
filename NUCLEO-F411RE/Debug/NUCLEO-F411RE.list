
NUCLEO-F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f640  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  0800f7e0  0800f7e0  0001f7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010368  08010368  00030264  2**0
                  CONTENTS
  4 .ARM          00000008  08010368  08010368  00020368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010370  08010370  00030264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010370  08010370  00020370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010374  08010374  00020374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000080  08010378  00030080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noinit       00000044  20000000  20000000  00040000  2**2
                  ALLOC
 10 .ip_code      00000000  08060000  08060000  00030264  2**0
                  CONTENTS
 11 .bss          00000aa0  20000264  20000264  00030264  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000d04  20000d04  00030264  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ebfb  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005505  00000000  00000000  0005ee8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002398  00000000  00000000  00064398  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002120  00000000  00000000  00066730  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001d850  00000000  00000000  00068850  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001f45a  00000000  00000000  000860a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000a5ae2  00000000  00000000  000a54fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0014afdc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009f04  00000000  00000000  0014b058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000264 	.word	0x20000264
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f7c8 	.word	0x0800f7c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000268 	.word	0x20000268
 80001dc:	0800f7c8 	.word	0x0800f7c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f8d9 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f00b fde6 	bl	800cab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f00b fdb8 	bl	800ca60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000084 	.word	0x20000084
 8000f20:	20000ad4 	.word	0x20000ad4

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000ad4 	.word	0x20000ad4

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	d00f      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b06      	cmp	r3, #6
 80010aa:	d00c      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d009      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d006      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d003      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010be:	2192      	movs	r1, #146	; 0x92
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80010c2:	f00b fc03 	bl	800c8cc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff38 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	0800f7e0 	.word	0x0800f7e0

080010d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d903      	bls.n	80010f8 <HAL_NVIC_SetPriority+0x20>
 80010f0:	21aa      	movs	r1, #170	; 0xaa
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <HAL_NVIC_SetPriority+0x54>)
 80010f4:	f00b fbea 	bl	800c8cc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	d903      	bls.n	8001106 <HAL_NVIC_SetPriority+0x2e>
 80010fe:	21ab      	movs	r1, #171	; 0xab
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <HAL_NVIC_SetPriority+0x54>)
 8001102:	f00b fbe3 	bl	800c8cc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001106:	f7ff ff3d 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 800110a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff ff8d 	bl	8001030 <NVIC_EncodePriority>
 8001116:	4602      	mov	r2, r0
 8001118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff5c 	bl	8000fdc <__NVIC_SetPriority>
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	0800f7e0 	.word	0x0800f7e0

08001130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	da03      	bge.n	800114a <HAL_NVIC_EnableIRQ+0x1a>
 8001142:	21be      	movs	r1, #190	; 0xbe
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_NVIC_EnableIRQ+0x2c>)
 8001146:	f00b fbc1 	bl	800c8cc <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff26 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	0800f7e0 	.word	0x0800f7e0

08001160 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e017      	b.n	80011a2 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_CRC_Init+0x4c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d003      	beq.n	8001184 <HAL_CRC_Init+0x24>
 800117c:	2168      	movs	r1, #104	; 0x68
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_CRC_Init+0x50>)
 8001180:	f00b fba4 	bl	800c8cc <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	795b      	ldrb	r3, [r3, #5]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f009 fb6b 	bl	800a870 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023000 	.word	0x40023000
 80011b0:	0800f81c 	.word	0x0800f81c

080011b4 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2202      	movs	r2, #2
 80011c8:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0201 	orr.w	r2, r2, #1
 80011d8:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e00a      	b.n	80011f6 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	441a      	add	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d3f0      	bcc.n	80011e0 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2201      	movs	r2, #1
 800120a:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800120c:	693b      	ldr	r3, [r7, #16]
}
 800120e:	4618      	mov	r0, r3
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fe7c 	bl	8000f24 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e204      	b.n	8001642 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a97      	ldr	r2, [pc, #604]	; (800149c <HAL_DMA_Init+0x280>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d04e      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a96      	ldr	r2, [pc, #600]	; (80014a0 <HAL_DMA_Init+0x284>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d049      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a94      	ldr	r2, [pc, #592]	; (80014a4 <HAL_DMA_Init+0x288>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d044      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a93      	ldr	r2, [pc, #588]	; (80014a8 <HAL_DMA_Init+0x28c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d03f      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a91      	ldr	r2, [pc, #580]	; (80014ac <HAL_DMA_Init+0x290>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d03a      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a90      	ldr	r2, [pc, #576]	; (80014b0 <HAL_DMA_Init+0x294>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d035      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a8e      	ldr	r2, [pc, #568]	; (80014b4 <HAL_DMA_Init+0x298>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d030      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a8d      	ldr	r2, [pc, #564]	; (80014b8 <HAL_DMA_Init+0x29c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d02b      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a8b      	ldr	r2, [pc, #556]	; (80014bc <HAL_DMA_Init+0x2a0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d026      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a8a      	ldr	r2, [pc, #552]	; (80014c0 <HAL_DMA_Init+0x2a4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d021      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a88      	ldr	r2, [pc, #544]	; (80014c4 <HAL_DMA_Init+0x2a8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01c      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a87      	ldr	r2, [pc, #540]	; (80014c8 <HAL_DMA_Init+0x2ac>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d017      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a85      	ldr	r2, [pc, #532]	; (80014cc <HAL_DMA_Init+0x2b0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d012      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a84      	ldr	r2, [pc, #528]	; (80014d0 <HAL_DMA_Init+0x2b4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a82      	ldr	r2, [pc, #520]	; (80014d4 <HAL_DMA_Init+0x2b8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d008      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a81      	ldr	r2, [pc, #516]	; (80014d8 <HAL_DMA_Init+0x2bc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012d8:	21b8      	movs	r1, #184	; 0xb8
 80012da:	4880      	ldr	r0, [pc, #512]	; (80014dc <HAL_DMA_Init+0x2c0>)
 80012dc:	f00b faf6 	bl	800c8cc <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d026      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012f0:	d021      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80012fa:	d01c      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001304:	d017      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800130e:	d012      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001318:	d00d      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001322:	d008      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800132c:	d003      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 800132e:	21b9      	movs	r1, #185	; 0xb9
 8001330:	486a      	ldr	r0, [pc, #424]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001332:	f00b facb 	bl	800c8cc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_DMA_Init+0x13a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b40      	cmp	r3, #64	; 0x40
 8001344:	d007      	beq.n	8001356 <HAL_DMA_Init+0x13a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b80      	cmp	r3, #128	; 0x80
 800134c:	d003      	beq.n	8001356 <HAL_DMA_Init+0x13a>
 800134e:	21ba      	movs	r1, #186	; 0xba
 8001350:	4862      	ldr	r0, [pc, #392]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001352:	f00b fabb 	bl	800c8cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135e:	d007      	beq.n	8001370 <HAL_DMA_Init+0x154>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_DMA_Init+0x154>
 8001368:	21bb      	movs	r1, #187	; 0xbb
 800136a:	485c      	ldr	r0, [pc, #368]	; (80014dc <HAL_DMA_Init+0x2c0>)
 800136c:	f00b faae 	bl	800c8cc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001378:	d007      	beq.n	800138a <HAL_DMA_Init+0x16e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_DMA_Init+0x16e>
 8001382:	21bc      	movs	r1, #188	; 0xbc
 8001384:	4855      	ldr	r0, [pc, #340]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001386:	f00b faa1 	bl	800c8cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00d      	beq.n	80013ae <HAL_DMA_Init+0x192>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800139a:	d008      	beq.n	80013ae <HAL_DMA_Init+0x192>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a4:	d003      	beq.n	80013ae <HAL_DMA_Init+0x192>
 80013a6:	21bd      	movs	r1, #189	; 0xbd
 80013a8:	484c      	ldr	r0, [pc, #304]	; (80014dc <HAL_DMA_Init+0x2c0>)
 80013aa:	f00b fa8f 	bl	800c8cc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00d      	beq.n	80013d2 <HAL_DMA_Init+0x1b6>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013be:	d008      	beq.n	80013d2 <HAL_DMA_Init+0x1b6>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013c8:	d003      	beq.n	80013d2 <HAL_DMA_Init+0x1b6>
 80013ca:	21be      	movs	r1, #190	; 0xbe
 80013cc:	4843      	ldr	r0, [pc, #268]	; (80014dc <HAL_DMA_Init+0x2c0>)
 80013ce:	f00b fa7d 	bl	800c8cc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00c      	beq.n	80013f4 <HAL_DMA_Init+0x1d8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013e2:	d007      	beq.n	80013f4 <HAL_DMA_Init+0x1d8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b20      	cmp	r3, #32
 80013ea:	d003      	beq.n	80013f4 <HAL_DMA_Init+0x1d8>
 80013ec:	21bf      	movs	r1, #191	; 0xbf
 80013ee:	483b      	ldr	r0, [pc, #236]	; (80014dc <HAL_DMA_Init+0x2c0>)
 80013f0:	f00b fa6c 	bl	800c8cc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d012      	beq.n	8001422 <HAL_DMA_Init+0x206>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d00d      	beq.n	8001422 <HAL_DMA_Init+0x206>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Init+0x206>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001418:	d003      	beq.n	8001422 <HAL_DMA_Init+0x206>
 800141a:	21c0      	movs	r1, #192	; 0xc0
 800141c:	482f      	ldr	r0, [pc, #188]	; (80014dc <HAL_DMA_Init+0x2c0>)
 800141e:	f00b fa55 	bl	800c8cc <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <HAL_DMA_Init+0x21e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	2b04      	cmp	r3, #4
 8001430:	d003      	beq.n	800143a <HAL_DMA_Init+0x21e>
 8001432:	21c1      	movs	r1, #193	; 0xc1
 8001434:	4829      	ldr	r0, [pc, #164]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001436:	f00b fa49 	bl	800c8cc <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	2b00      	cmp	r3, #0
 8001440:	d065      	beq.n	800150e <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00f      	beq.n	800146a <HAL_DMA_Init+0x24e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	2b01      	cmp	r3, #1
 8001450:	d00b      	beq.n	800146a <HAL_DMA_Init+0x24e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	2b02      	cmp	r3, #2
 8001458:	d007      	beq.n	800146a <HAL_DMA_Init+0x24e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	2b03      	cmp	r3, #3
 8001460:	d003      	beq.n	800146a <HAL_DMA_Init+0x24e>
 8001462:	21c6      	movs	r1, #198	; 0xc6
 8001464:	481d      	ldr	r0, [pc, #116]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001466:	f00b fa31 	bl	800c8cc <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_DMA_Init+0x2c4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800147a:	d031      	beq.n	80014e0 <HAL_DMA_Init+0x2c4>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d02c      	beq.n	80014e0 <HAL_DMA_Init+0x2c4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800148e:	d027      	beq.n	80014e0 <HAL_DMA_Init+0x2c4>
 8001490:	21c7      	movs	r1, #199	; 0xc7
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001494:	f00b fa1a 	bl	800c8cc <assert_failed>
 8001498:	e022      	b.n	80014e0 <HAL_DMA_Init+0x2c4>
 800149a:	bf00      	nop
 800149c:	40026010 	.word	0x40026010
 80014a0:	40026028 	.word	0x40026028
 80014a4:	40026040 	.word	0x40026040
 80014a8:	40026058 	.word	0x40026058
 80014ac:	40026070 	.word	0x40026070
 80014b0:	40026088 	.word	0x40026088
 80014b4:	400260a0 	.word	0x400260a0
 80014b8:	400260b8 	.word	0x400260b8
 80014bc:	40026410 	.word	0x40026410
 80014c0:	40026428 	.word	0x40026428
 80014c4:	40026440 	.word	0x40026440
 80014c8:	40026458 	.word	0x40026458
 80014cc:	40026470 	.word	0x40026470
 80014d0:	40026488 	.word	0x40026488
 80014d4:	400264a0 	.word	0x400264a0
 80014d8:	400264b8 	.word	0x400264b8
 80014dc:	0800f854 	.word	0x0800f854
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d012      	beq.n	800150e <HAL_DMA_Init+0x2f2>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014f0:	d00d      	beq.n	800150e <HAL_DMA_Init+0x2f2>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fa:	d008      	beq.n	800150e <HAL_DMA_Init+0x2f2>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001504:	d003      	beq.n	800150e <HAL_DMA_Init+0x2f2>
 8001506:	21c8      	movs	r1, #200	; 0xc8
 8001508:	4850      	ldr	r0, [pc, #320]	; (800164c <HAL_DMA_Init+0x430>)
 800150a:	f00b f9df 	bl	800c8cc <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2202      	movs	r2, #2
 800151a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152e:	e00f      	b.n	8001550 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001530:	f7ff fcf8 	bl	8000f24 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b05      	cmp	r3, #5
 800153c:	d908      	bls.n	8001550 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2203      	movs	r2, #3
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e078      	b.n	8001642 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e8      	bne.n	8001530 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_DMA_Init+0x434>)
 800156a:	4013      	ands	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4313      	orrs	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d107      	bne.n	80015ba <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4313      	orrs	r3, r2
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f023 0307 	bic.w	r3, r3, #7
 80015d0:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d117      	bne.n	8001614 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00e      	beq.n	8001614 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 faa2 	bl	8001b40 <DMA_CheckFifoParam>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001610:	2301      	movs	r3, #1
 8001612:	e016      	b.n	8001642 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fa59 	bl	8001ad4 <DMA_CalcBaseAndBitshift>
 8001622:	4603      	mov	r3, r0
 8001624:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	223f      	movs	r2, #63	; 0x3f
 800162c:	409a      	lsls	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	0800f854 	.word	0x0800f854
 8001650:	f010803f 	.word	0xf010803f

08001654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_DMA_Start_IT+0x26>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d304      	bcc.n	8001684 <HAL_DMA_Start_IT+0x30>
 800167a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800167e:	4827      	ldr	r0, [pc, #156]	; (800171c <HAL_DMA_Start_IT+0xc8>)
 8001680:	f00b f924 	bl	800c8cc <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_DMA_Start_IT+0x3e>
 800168e:	2302      	movs	r3, #2
 8001690:	e040      	b.n	8001714 <HAL_DMA_Start_IT+0xc0>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d12f      	bne.n	8001706 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f9dc 	bl	8001a78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	223f      	movs	r2, #63	; 0x3f
 80016c6:	409a      	lsls	r2, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0216 	orr.w	r2, r2, #22
 80016da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0208 	orr.w	r2, r2, #8
 80016f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e005      	b.n	8001712 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800170e:	2302      	movs	r3, #2
 8001710:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001712:	7dfb      	ldrb	r3, [r7, #23]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	0800f854 	.word	0x0800f854

08001720 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d004      	beq.n	800173e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00c      	b.n	8001758 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001770:	4b92      	ldr	r3, [pc, #584]	; (80019bc <HAL_DMA_IRQHandler+0x258>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a92      	ldr	r2, [pc, #584]	; (80019c0 <HAL_DMA_IRQHandler+0x25c>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2208      	movs	r2, #8
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01a      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	2201      	movs	r2, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	2201      	movs	r2, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	f043 0202 	orr.w	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180a:	2204      	movs	r2, #4
 800180c:	409a      	lsls	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d012      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00b      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	2204      	movs	r2, #4
 800182a:	409a      	lsls	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	2210      	movs	r2, #16
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d043      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03c      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	2210      	movs	r2, #16
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d018      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d024      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
 8001892:	e01f      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
 80018a4:	e016      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0208 	bic.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	2220      	movs	r2, #32
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 808e 	beq.w	8001a02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8086 	beq.w	8001a02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	2220      	movs	r2, #32
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d136      	bne.n	800197c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0216 	bic.w	r2, r2, #22
 800191c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800192c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_DMA_IRQHandler+0x1da>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0208 	bic.w	r2, r2, #8
 800194c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	223f      	movs	r2, #63	; 0x3f
 8001954:	409a      	lsls	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	2b00      	cmp	r3, #0
 8001970:	d07d      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
        }
        return;
 800197a:	e078      	b.n	8001a6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01c      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d108      	bne.n	80019aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	2b00      	cmp	r3, #0
 800199e:	d030      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e02b      	b.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d027      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
 80019ba:	e022      	b.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
 80019bc:	20000090 	.word	0x20000090
 80019c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0210 	bic.w	r2, r2, #16
 80019e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d032      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d022      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d307      	bcc.n	8001a4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f2      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x2ca>
 8001a48:	e000      	b.n	8001a4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
 8001a6c:	e000      	b.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a6e:	bf00      	nop
    }
  }
}
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop

08001a78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d108      	bne.n	8001ab8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ab6:	e007      	b.n	8001ac8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	60da      	str	r2, [r3, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3b10      	subs	r3, #16
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <DMA_CalcBaseAndBitshift+0x68>)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d909      	bls.n	8001b16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58
 8001b14:	e007      	b.n	8001b26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	aaaaaaab 	.word	0xaaaaaaab
 8001b3c:	0800ffa4 	.word	0x0800ffa4

08001b40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11f      	bne.n	8001b9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d855      	bhi.n	8001c0c <DMA_CheckFifoParam+0xcc>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <DMA_CheckFifoParam+0x28>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b8b 	.word	0x08001b8b
 8001b70:	08001b79 	.word	0x08001b79
 8001b74:	08001c0d 	.word	0x08001c0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d045      	beq.n	8001c10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b88:	e042      	b.n	8001c10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b92:	d13f      	bne.n	8001c14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b98:	e03c      	b.n	8001c14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba2:	d121      	bne.n	8001be8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d836      	bhi.n	8001c18 <DMA_CheckFifoParam+0xd8>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <DMA_CheckFifoParam+0x70>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001bc7 	.word	0x08001bc7
 8001bb8:	08001bc1 	.word	0x08001bc1
 8001bbc:	08001bd9 	.word	0x08001bd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc4:	e02f      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd6:	e021      	b.n	8001c1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001be0:	d11e      	bne.n	8001c20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001be6:	e01b      	b.n	8001c20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d902      	bls.n	8001bf4 <DMA_CheckFifoParam+0xb4>
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d003      	beq.n	8001bfa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bf2:	e018      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf8:	e015      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00e      	beq.n	8001c24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0a:	e00b      	b.n	8001c24 <DMA_CheckFifoParam+0xe4>
      break;
 8001c0c:	bf00      	nop
 8001c0e:	e00a      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c10:	bf00      	nop
 8001c12:	e008      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c14:	bf00      	nop
 8001c16:	e006      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c18:	bf00      	nop
 8001c1a:	e004      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1c:	bf00      	nop
 8001c1e:	e002      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c20:	bf00      	nop
 8001c22:	e000      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c24:	bf00      	nop
    }
  } 
  
  return status; 
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c46:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <HAL_FLASH_Program+0xc0>)
 8001c48:	7e1b      	ldrb	r3, [r3, #24]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_FLASH_Program+0x1e>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e04b      	b.n	8001cea <HAL_FLASH_Program+0xb6>
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_FLASH_Program+0xc0>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00c      	beq.n	8001c78 <HAL_FLASH_Program+0x44>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d009      	beq.n	8001c78 <HAL_FLASH_Program+0x44>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d006      	beq.n	8001c78 <HAL_FLASH_Program+0x44>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d003      	beq.n	8001c78 <HAL_FLASH_Program+0x44>
 8001c70:	21a4      	movs	r1, #164	; 0xa4
 8001c72:	4821      	ldr	r0, [pc, #132]	; (8001cf8 <HAL_FLASH_Program+0xc4>)
 8001c74:	f00a fe2a 	bl	800c8cc <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c7c:	f000 f8b2 	bl	8001de4 <FLASH_WaitForLastOperation>
 8001c80:	4603      	mov	r3, r0
 8001c82:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d12b      	bne.n	8001ce2 <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c90:	783b      	ldrb	r3, [r7, #0]
 8001c92:	4619      	mov	r1, r3
 8001c94:	68b8      	ldr	r0, [r7, #8]
 8001c96:	f000 f9ad 	bl	8001ff4 <FLASH_Program_Byte>
 8001c9a:	e016      	b.n	8001cca <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001ca2:	883b      	ldrh	r3, [r7, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68b8      	ldr	r0, [r7, #8]
 8001ca8:	f000 f966 	bl	8001f78 <FLASH_Program_HalfWord>
 8001cac:	e00d      	b.n	8001cca <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d105      	bne.n	8001cc0 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	68b8      	ldr	r0, [r7, #8]
 8001cba:	f000 f91f 	bl	8001efc <FLASH_Program_Word>
 8001cbe:	e004      	b.n	8001cca <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cc4:	68b8      	ldr	r0, [r7, #8]
 8001cc6:	f000 f8cd 	bl	8001e64 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cce:	f000 f889 	bl	8001de4 <FLASH_WaitForLastOperation>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_FLASH_Program+0xc8>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_FLASH_Program+0xc8>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_FLASH_Program+0xc0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000ad8 	.word	0x20000ad8
 8001cf8:	0800f88c 	.word	0x0800f88c
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_FLASH_Unlock+0x38>)
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da0b      	bge.n	8001d2a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_FLASH_Unlock+0x38>)
 8001d14:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_FLASH_Unlock+0x3c>)
 8001d16:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_FLASH_Unlock+0x38>)
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_FLASH_Unlock+0x40>)
 8001d1c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_FLASH_Unlock+0x38>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	da01      	bge.n	8001d2a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40023c00 	.word	0x40023c00
 8001d3c:	45670123 	.word	0x45670123
 8001d40:	cdef89ab 	.word	0xcdef89ab

08001d44 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_FLASH_Lock+0x1c>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_FLASH_Lock+0x1c>)
 8001d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d52:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_FLASH_OB_Unlock+0x2c>)
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_FLASH_OB_Unlock+0x2c>)
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_FLASH_OB_Unlock+0x30>)
 8001d78:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_FLASH_OB_Unlock+0x2c>)
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_FLASH_OB_Unlock+0x34>)
 8001d7e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001d80:	2300      	movs	r3, #0
 8001d82:	e000      	b.n	8001d86 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40023c00 	.word	0x40023c00
 8001d94:	08192a3b 	.word	0x08192a3b
 8001d98:	4c5d6e7f 	.word	0x4c5d6e7f

08001d9c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_FLASH_OB_Lock+0x1c>)
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_FLASH_OB_Lock+0x1c>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40023c00 	.word	0x40023c00

08001dbc <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_FLASH_OB_Launch+0x24>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_FLASH_OB_Launch+0x24>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001dd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dd4:	f000 f806 	bl	8001de4 <FLASH_WaitForLastOperation>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023c14 	.word	0x40023c14

08001de4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <FLASH_WaitForLastOperation+0x78>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001df6:	f7ff f895 	bl	8000f24 <HAL_GetTick>
 8001dfa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001dfc:	e010      	b.n	8001e20 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d00c      	beq.n	8001e20 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <FLASH_WaitForLastOperation+0x38>
 8001e0c:	f7ff f88a 	bl	8000f24 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d201      	bcs.n	8001e20 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e019      	b.n	8001e54 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <FLASH_WaitForLastOperation+0x7c>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e8      	bne.n	8001dfe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <FLASH_WaitForLastOperation+0x7c>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <FLASH_WaitForLastOperation+0x7c>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <FLASH_WaitForLastOperation+0x7c>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e4a:	f000 f90f 	bl	800206c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
  
}  
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000ad8 	.word	0x20000ad8
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e76:	d303      	bcc.n	8001e80 <FLASH_Program_DoubleWord+0x1c>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <FLASH_Program_DoubleWord+0x84>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d90c      	bls.n	8001e9a <FLASH_Program_DoubleWord+0x36>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <FLASH_Program_DoubleWord+0x88>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d903      	bls.n	8001e90 <FLASH_Program_DoubleWord+0x2c>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <FLASH_Program_DoubleWord+0x8c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d904      	bls.n	8001e9a <FLASH_Program_DoubleWord+0x36>
 8001e90:	f240 2167 	movw	r1, #615	; 0x267
 8001e94:	4817      	ldr	r0, [pc, #92]	; (8001ef4 <FLASH_Program_DoubleWord+0x90>)
 8001e96:	f00a fd19 	bl	800c8cc <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001eac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001eb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001ec4:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001ec8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	f04f 0400 	mov.w	r4, #0
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	3204      	adds	r2, #4
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	0807ffff 	.word	0x0807ffff
 8001eec:	1fff77ff 	.word	0x1fff77ff
 8001ef0:	1fff7a0f 	.word	0x1fff7a0f
 8001ef4:	0800f88c 	.word	0x0800f88c
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f0c:	d303      	bcc.n	8001f16 <FLASH_Program_Word+0x1a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <FLASH_Program_Word+0x68>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d90c      	bls.n	8001f30 <FLASH_Program_Word+0x34>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <FLASH_Program_Word+0x6c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d903      	bls.n	8001f26 <FLASH_Program_Word+0x2a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <FLASH_Program_Word+0x70>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d904      	bls.n	8001f30 <FLASH_Program_Word+0x34>
 8001f26:	f240 2189 	movw	r1, #649	; 0x289
 8001f2a:	4811      	ldr	r0, [pc, #68]	; (8001f70 <FLASH_Program_Word+0x74>)
 8001f2c:	f00a fcce 	bl	800c8cc <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	0807ffff 	.word	0x0807ffff
 8001f68:	1fff77ff 	.word	0x1fff77ff
 8001f6c:	1fff7a0f 	.word	0x1fff7a0f
 8001f70:	0800f88c 	.word	0x0800f88c
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f8a:	d303      	bcc.n	8001f94 <FLASH_Program_HalfWord+0x1c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <FLASH_Program_HalfWord+0x68>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d90c      	bls.n	8001fae <FLASH_Program_HalfWord+0x36>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <FLASH_Program_HalfWord+0x6c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d903      	bls.n	8001fa4 <FLASH_Program_HalfWord+0x2c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <FLASH_Program_HalfWord+0x70>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d904      	bls.n	8001fae <FLASH_Program_HalfWord+0x36>
 8001fa4:	f240 21a2 	movw	r1, #674	; 0x2a2
 8001fa8:	4810      	ldr	r0, [pc, #64]	; (8001fec <FLASH_Program_HalfWord+0x74>)
 8001faa:	f00a fc8f 	bl	800c8cc <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	801a      	strh	r2, [r3, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0807ffff 	.word	0x0807ffff
 8001fe4:	1fff77ff 	.word	0x1fff77ff
 8001fe8:	1fff7a0f 	.word	0x1fff7a0f
 8001fec:	0800f88c 	.word	0x0800f88c
 8001ff0:	40023c00 	.word	0x40023c00

08001ff4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002006:	d303      	bcc.n	8002010 <FLASH_Program_Byte+0x1c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <FLASH_Program_Byte+0x64>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d90c      	bls.n	800202a <FLASH_Program_Byte+0x36>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <FLASH_Program_Byte+0x68>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d903      	bls.n	8002020 <FLASH_Program_Byte+0x2c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a11      	ldr	r2, [pc, #68]	; (8002060 <FLASH_Program_Byte+0x6c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d904      	bls.n	800202a <FLASH_Program_Byte+0x36>
 8002020:	f240 21bb 	movw	r1, #699	; 0x2bb
 8002024:	480f      	ldr	r0, [pc, #60]	; (8002064 <FLASH_Program_Byte+0x70>)
 8002026:	f00a fc51 	bl	800c8cc <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <FLASH_Program_Byte+0x74>)
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <FLASH_Program_Byte+0x74>)
 8002030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002034:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <FLASH_Program_Byte+0x74>)
 8002038:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <FLASH_Program_Byte+0x74>)
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <FLASH_Program_Byte+0x74>)
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <FLASH_Program_Byte+0x74>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	701a      	strb	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0807ffff 	.word	0x0807ffff
 800205c:	1fff77ff 	.word	0x1fff77ff
 8002060:	1fff7a0f 	.word	0x1fff7a0f
 8002064:	0800f88c 	.word	0x0800f88c
 8002068:	40023c00 	.word	0x40023c00

0800206c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002070:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f043 0310 	orr.w	r3, r3, #16
 8002084:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 8002086:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 800208a:	2210      	movs	r2, #16
 800208c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f043 0308 	orr.w	r3, r3, #8
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020a4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020a8:	2220      	movs	r2, #32
 80020aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	4a15      	ldr	r2, [pc, #84]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020e0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 8002102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002106:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f043 0320 	orr.w	r3, r3, #32
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 800211e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 8002122:	2202      	movs	r2, #2
 8002124:	60da      	str	r2, [r3, #12]
  }
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40023c00 	.word	0x40023c00
 8002134:	20000ad8 	.word	0x20000ad8

08002138 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002144:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_FLASHEx_OBProgram+0x104>)
 8002146:	7e1b      	ldrb	r3, [r3, #24]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_FLASHEx_OBProgram+0x18>
 800214c:	2302      	movs	r3, #2
 800214e:	e071      	b.n	8002234 <HAL_FLASHEx_OBProgram+0xfc>
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <HAL_FLASHEx_OBProgram+0x104>)
 8002152:	2201      	movs	r2, #1
 8002154:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	d904      	bls.n	8002168 <HAL_FLASHEx_OBProgram+0x30>
 800215e:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002162:	4837      	ldr	r0, [pc, #220]	; (8002240 <HAL_FLASHEx_OBProgram+0x108>)
 8002164:	f00a fbb2 	bl	800c8cc <assert_failed>

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d025      	beq.n	80021c0 <HAL_FLASHEx_OBProgram+0x88>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_FLASHEx_OBProgram+0x56>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d004      	beq.n	800218e <HAL_FLASHEx_OBProgram+0x56>
 8002184:	f240 112b 	movw	r1, #299	; 0x12b
 8002188:	482d      	ldr	r0, [pc, #180]	; (8002240 <HAL_FLASHEx_OBProgram+0x108>)
 800218a:	f00a fb9f 	bl	800c8cc <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10a      	bne.n	80021ac <HAL_FLASHEx_OBProgram+0x74>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f000 f8e9 	bl	8002378 <FLASH_OB_EnableWRP>
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e009      	b.n	80021c0 <HAL_FLASHEx_OBProgram+0x88>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 f91a 	bl	80023f0 <FLASH_OB_DisableWRP>
 80021bc:	4603      	mov	r3, r0
 80021be:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_FLASHEx_OBProgram+0xa4>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f946 	bl	8002464 <FLASH_OB_RDP_LevelConfig>
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_FLASHEx_OBProgram+0xd8>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7e1b      	ldrb	r3, [r3, #24]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8002200:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	f000 f956 	bl	80024b8 <FLASH_OB_UserConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_FLASHEx_OBProgram+0xf4>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f99a 	bl	800255c <FLASH_OB_BOR_LevelConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_FLASHEx_OBProgram+0x104>)
 800222e:	2200      	movs	r2, #0
 8002230:	761a      	strb	r2, [r3, #24]

  return status;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000ad8 	.word	0x20000ad8
 8002240:	0800f8c8 	.word	0x0800f8c8

08002244 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	220f      	movs	r2, #15
 8002250:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002252:	f000 f9c3 	bl	80025dc <FLASH_OB_GetWRP>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800225e:	f000 f9c9 	bl	80025f4 <FLASH_OB_GetRDP>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800226a:	f000 f9a7 	bl	80025bc <FLASH_OB_GetUser>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002276:	f000 f9dd 	bl	8002634 <FLASH_OB_GetBOR>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	615a      	str	r2, [r3, #20]
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d019      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d016      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d013      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d010      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d00d      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d00a      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d007      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b07      	cmp	r3, #7
 80022ca:	d004      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022cc:	f240 31db 	movw	r1, #987	; 0x3db
 80022d0:	4827      	ldr	r0, [pc, #156]	; (8002370 <FLASH_Erase_Sector+0xe4>)
 80022d2:	f00a fafb 	bl	800c8cc <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <FLASH_Erase_Sector+0x6c>
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d00a      	beq.n	80022f8 <FLASH_Erase_Sector+0x6c>
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d007      	beq.n	80022f8 <FLASH_Erase_Sector+0x6c>
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d004      	beq.n	80022f8 <FLASH_Erase_Sector+0x6c>
 80022ee:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 80022f2:	481f      	ldr	r0, [pc, #124]	; (8002370 <FLASH_Erase_Sector+0xe4>)
 80022f4:	f00a faea 	bl	800c8cc <assert_failed>
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <FLASH_Erase_Sector+0x78>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	e010      	b.n	8002326 <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d103      	bne.n	8002312 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800230a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e009      	b.n	8002326 <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d103      	bne.n	8002320 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e002      	b.n	8002326 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002320:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002324:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 800232c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002330:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	490f      	ldr	r1, [pc, #60]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	4a0c      	ldr	r2, [pc, #48]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002344:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002348:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4313      	orrs	r3, r2
 8002354:	4a07      	ldr	r2, [pc, #28]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	4a04      	ldr	r2, [pc, #16]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	6113      	str	r3, [r2, #16]
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800f8c8 	.word	0x0800f8c8
 8002374:	40023c00 	.word	0x40023c00

08002378 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800238c:	f023 030f 	bic.w	r3, r3, #15
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <FLASH_OB_EnableWRP+0x22>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d104      	bne.n	80023a4 <FLASH_OB_EnableWRP+0x2c>
 800239a:	f240 410d 	movw	r1, #1037	; 0x40d
 800239e:	4812      	ldr	r0, [pc, #72]	; (80023e8 <FLASH_OB_EnableWRP+0x70>)
 80023a0:	f00a fa94 	bl	800c8cc <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d004      	beq.n	80023b4 <FLASH_OB_EnableWRP+0x3c>
 80023aa:	f240 410e 	movw	r1, #1038	; 0x40e
 80023ae:	480e      	ldr	r0, [pc, #56]	; (80023e8 <FLASH_OB_EnableWRP+0x70>)
 80023b0:	f00a fa8c 	bl	800c8cc <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023b8:	f7ff fd14 	bl	8001de4 <FLASH_WaitForLastOperation>
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <FLASH_OB_EnableWRP+0x64>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <FLASH_OB_EnableWRP+0x74>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	4905      	ldr	r1, [pc, #20]	; (80023ec <FLASH_OB_EnableWRP+0x74>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	0800f8c8 	.word	0x0800f8c8
 80023ec:	40023c16 	.word	0x40023c16

080023f0 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002404:	f023 030f 	bic.w	r3, r3, #15
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <FLASH_OB_DisableWRP+0x22>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <FLASH_OB_DisableWRP+0x2c>
 8002412:	f240 4131 	movw	r1, #1073	; 0x431
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <FLASH_OB_DisableWRP+0x6c>)
 8002418:	f00a fa58 	bl	800c8cc <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d004      	beq.n	800242c <FLASH_OB_DisableWRP+0x3c>
 8002422:	f240 4132 	movw	r1, #1074	; 0x432
 8002426:	480d      	ldr	r0, [pc, #52]	; (800245c <FLASH_OB_DisableWRP+0x6c>)
 8002428:	f00a fa50 	bl	800c8cc <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800242c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002430:	f7ff fcd8 	bl	8001de4 <FLASH_WaitForLastOperation>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <FLASH_OB_DisableWRP+0x60>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <FLASH_OB_DisableWRP+0x70>)
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4905      	ldr	r1, [pc, #20]	; (8002460 <FLASH_OB_DisableWRP+0x70>)
 800244a:	4313      	orrs	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	0800f8c8 	.word	0x0800f8c8
 8002460:	40023c16 	.word	0x40023c16

08002464 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2baa      	cmp	r3, #170	; 0xaa
 8002476:	d00a      	beq.n	800248e <FLASH_OB_RDP_LevelConfig+0x2a>
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	2b55      	cmp	r3, #85	; 0x55
 800247c:	d007      	beq.n	800248e <FLASH_OB_RDP_LevelConfig+0x2a>
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	2bcc      	cmp	r3, #204	; 0xcc
 8002482:	d004      	beq.n	800248e <FLASH_OB_RDP_LevelConfig+0x2a>
 8002484:	f240 418f 	movw	r1, #1167	; 0x48f
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <FLASH_OB_RDP_LevelConfig+0x4c>)
 800248a:	f00a fa1f 	bl	800c8cc <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800248e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002492:	f7ff fca7 	bl	8001de4 <FLASH_WaitForLastOperation>
 8002496:	4603      	mov	r3, r0
 8002498:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <FLASH_OB_RDP_LevelConfig+0x42>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <FLASH_OB_RDP_LevelConfig+0x50>)
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	0800f8c8 	.word	0x0800f8c8
 80024b4:	40023c15 	.word	0x40023c15

080024b8 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
 80024c2:	460b      	mov	r3, r1
 80024c4:	71bb      	strb	r3, [r7, #6]
 80024c6:	4613      	mov	r3, r2
 80024c8:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80024ca:	23ff      	movs	r3, #255	; 0xff
 80024cc:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d007      	beq.n	80024e8 <FLASH_OB_UserConfig+0x30>
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <FLASH_OB_UserConfig+0x30>
 80024de:	f240 41b2 	movw	r1, #1202	; 0x4b2
 80024e2:	481c      	ldr	r0, [pc, #112]	; (8002554 <FLASH_OB_UserConfig+0x9c>)
 80024e4:	f00a f9f2 	bl	800c8cc <assert_failed>
  assert_param(IS_OB_STOP_SOURCE(Stop));
 80024e8:	79bb      	ldrb	r3, [r7, #6]
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d007      	beq.n	80024fe <FLASH_OB_UserConfig+0x46>
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <FLASH_OB_UserConfig+0x46>
 80024f4:	f240 41b3 	movw	r1, #1203	; 0x4b3
 80024f8:	4816      	ldr	r0, [pc, #88]	; (8002554 <FLASH_OB_UserConfig+0x9c>)
 80024fa:	f00a f9e7 	bl	800c8cc <assert_failed>
  assert_param(IS_OB_STDBY_SOURCE(Stdby));
 80024fe:	797b      	ldrb	r3, [r7, #5]
 8002500:	2b80      	cmp	r3, #128	; 0x80
 8002502:	d007      	beq.n	8002514 <FLASH_OB_UserConfig+0x5c>
 8002504:	797b      	ldrb	r3, [r7, #5]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <FLASH_OB_UserConfig+0x5c>
 800250a:	f240 41b4 	movw	r1, #1204	; 0x4b4
 800250e:	4811      	ldr	r0, [pc, #68]	; (8002554 <FLASH_OB_UserConfig+0x9c>)
 8002510:	f00a f9dc 	bl	800c8cc <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002514:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002518:	f7ff fc64 	bl	8001de4 <FLASH_WaitForLastOperation>
 800251c:	4603      	mov	r3, r0
 800251e:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 8002520:	7bbb      	ldrb	r3, [r7, #14]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d111      	bne.n	800254a <FLASH_OB_UserConfig+0x92>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <FLASH_OB_UserConfig+0xa0>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8002532:	79ba      	ldrb	r2, [r7, #6]
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	4313      	orrs	r3, r2
 8002538:	b2da      	uxtb	r2, r3
 800253a:	797b      	ldrb	r3, [r7, #5]
 800253c:	4313      	orrs	r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4905      	ldr	r1, [pc, #20]	; (8002558 <FLASH_OB_UserConfig+0xa0>)
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	4313      	orrs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 800254a:	7bbb      	ldrb	r3, [r7, #14]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	0800f8c8 	.word	0x0800f8c8
 8002558:	40023c14 	.word	0x40023c14

0800255c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d00d      	beq.n	8002588 <FLASH_OB_BOR_LevelConfig+0x2c>
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b04      	cmp	r3, #4
 8002570:	d00a      	beq.n	8002588 <FLASH_OB_BOR_LevelConfig+0x2c>
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <FLASH_OB_BOR_LevelConfig+0x2c>
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d004      	beq.n	8002588 <FLASH_OB_BOR_LevelConfig+0x2c>
 800257e:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8002582:	480c      	ldr	r0, [pc, #48]	; (80025b4 <FLASH_OB_BOR_LevelConfig+0x58>)
 8002584:	f00a f9a2 	bl	800c8cc <assert_failed>

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 8002590:	f023 030c 	bic.w	r3, r3, #12
 8002594:	b2db      	uxtb	r3, r3
 8002596:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4906      	ldr	r1, [pc, #24]	; (80025b8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
  
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	0800f8c8 	.word	0x0800f8c8
 80025b8:	40023c14 	.word	0x40023c14

080025bc <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <FLASH_OB_GetUser+0x1c>)
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f023 031f 	bic.w	r3, r3, #31
 80025ca:	b2db      	uxtb	r3, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <FLASH_OB_GetWRP+0x14>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40023c16 	.word	0x40023c16

080025f4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80025fa:	23aa      	movs	r3, #170	; 0xaa
 80025fc:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <FLASH_OB_GetRDP+0x3c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2bcc      	cmp	r3, #204	; 0xcc
 8002606:	d102      	bne.n	800260e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002608:	23cc      	movs	r3, #204	; 0xcc
 800260a:	71fb      	strb	r3, [r7, #7]
 800260c:	e009      	b.n	8002622 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <FLASH_OB_GetRDP+0x3c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2baa      	cmp	r3, #170	; 0xaa
 8002616:	d102      	bne.n	800261e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002618:	23aa      	movs	r3, #170	; 0xaa
 800261a:	71fb      	strb	r3, [r7, #7]
 800261c:	e001      	b.n	8002622 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800261e:	2355      	movs	r3, #85	; 0x55
 8002620:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002622:	79fb      	ldrb	r3, [r7, #7]
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40023c15 	.word	0x40023c15

08002634 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <FLASH_OB_GetBOR+0x1c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	b2db      	uxtb	r3, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023c14 	.word	0x40023c14

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a3b      	ldr	r2, [pc, #236]	; (800275c <HAL_GPIO_Init+0x108>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d017      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a3a      	ldr	r2, [pc, #232]	; (8002760 <HAL_GPIO_Init+0x10c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a39      	ldr	r2, [pc, #228]	; (8002764 <HAL_GPIO_Init+0x110>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00f      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a38      	ldr	r2, [pc, #224]	; (8002768 <HAL_GPIO_Init+0x114>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a37      	ldr	r2, [pc, #220]	; (800276c <HAL_GPIO_Init+0x118>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a36      	ldr	r2, [pc, #216]	; (8002770 <HAL_GPIO_Init+0x11c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 800269a:	21b3      	movs	r1, #179	; 0xb3
 800269c:	4835      	ldr	r0, [pc, #212]	; (8002774 <HAL_GPIO_Init+0x120>)
 800269e:	f00a f915 	bl	800c8cc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_GPIO_Init+0x64>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x6c>
 80026b8:	21b4      	movs	r1, #180	; 0xb4
 80026ba:	482e      	ldr	r0, [pc, #184]	; (8002774 <HAL_GPIO_Init+0x120>)
 80026bc:	f00a f906 	bl	800c8cc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d035      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d031      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b11      	cmp	r3, #17
 80026d6:	d02d      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d029      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b12      	cmp	r3, #18
 80026e6:	d025      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <HAL_GPIO_Init+0x124>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d020      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_GPIO_Init+0x128>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d01b      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <HAL_GPIO_Init+0x12c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d016      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_GPIO_Init+0x130>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d011      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <HAL_GPIO_Init+0x134>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00c      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_GPIO_Init+0x138>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 800272c:	21b5      	movs	r1, #181	; 0xb5
 800272e:	4811      	ldr	r0, [pc, #68]	; (8002774 <HAL_GPIO_Init+0x120>)
 8002730:	f00a f8cc 	bl	800c8cc <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <HAL_GPIO_Init+0x100>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d007      	beq.n	8002754 <HAL_GPIO_Init+0x100>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x100>
 800274c:	21b6      	movs	r1, #182	; 0xb6
 800274e:	4809      	ldr	r0, [pc, #36]	; (8002774 <HAL_GPIO_Init+0x120>)
 8002750:	f00a f8bc 	bl	800c8cc <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	e211      	b.n	8002b7e <HAL_GPIO_Init+0x52a>
 800275a:	bf00      	nop
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40021c00 	.word	0x40021c00
 8002774:	0800f908 	.word	0x0800f908
 8002778:	10110000 	.word	0x10110000
 800277c:	10210000 	.word	0x10210000
 8002780:	10310000 	.word	0x10310000
 8002784:	10120000 	.word	0x10120000
 8002788:	10220000 	.word	0x10220000
 800278c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f040 81e5 	bne.w	8002b78 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d00b      	beq.n	80027ce <HAL_GPIO_Init+0x17a>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c2:	2b11      	cmp	r3, #17
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b12      	cmp	r3, #18
 80027cc:	d144      	bne.n	8002858 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00f      	beq.n	80027f6 <HAL_GPIO_Init+0x1a2>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d00b      	beq.n	80027f6 <HAL_GPIO_Init+0x1a2>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x1a2>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x1a2>
 80027ee:	21c8      	movs	r1, #200	; 0xc8
 80027f0:	489f      	ldr	r0, [pc, #636]	; (8002a70 <HAL_GPIO_Init+0x41c>)
 80027f2:	f00a f86b 	bl	800c8cc <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	2203      	movs	r2, #3
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 0201 	and.w	r2, r3, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d004      	beq.n	800289a <HAL_GPIO_Init+0x246>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b12      	cmp	r3, #18
 8002896:	f040 80a0 	bne.w	80029da <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d077      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b09      	cmp	r3, #9
 80028a8:	d073      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d06f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d06b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d067      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d05f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d05b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d057      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d053      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d04f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d04b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d047      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b04      	cmp	r3, #4
 8002908:	d043      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d03f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d03b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d037      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b06      	cmp	r3, #6
 8002928:	d033      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d02f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d02b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b06      	cmp	r3, #6
 8002940:	d027      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b07      	cmp	r3, #7
 8002948:	d023      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b07      	cmp	r3, #7
 8002950:	d01f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b07      	cmp	r3, #7
 8002958:	d01b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b08      	cmp	r3, #8
 8002960:	d017      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b0a      	cmp	r3, #10
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b09      	cmp	r3, #9
 8002970:	d00f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b09      	cmp	r3, #9
 8002978:	d00b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d007      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800298a:	21e0      	movs	r1, #224	; 0xe0
 800298c:	4838      	ldr	r0, [pc, #224]	; (8002a70 <HAL_GPIO_Init+0x41c>)
 800298e:	f009 ff9d 	bl	800c8cc <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	69b9      	ldr	r1, [r7, #24]
 80029d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0203 	and.w	r2, r3, #3
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80ae 	beq.w	8002b78 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_GPIO_Init+0x420>)
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_GPIO_Init+0x420>)
 8002a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_GPIO_Init+0x420>)
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a38:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <HAL_GPIO_Init+0x424>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	220f      	movs	r2, #15
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_GPIO_Init+0x428>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d025      	beq.n	8002ab0 <HAL_GPIO_Init+0x45c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_GPIO_Init+0x42c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01f      	beq.n	8002aac <HAL_GPIO_Init+0x458>
 8002a6c:	e00a      	b.n	8002a84 <HAL_GPIO_Init+0x430>
 8002a6e:	bf00      	nop
 8002a70:	0800f908 	.word	0x0800f908
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40013800 	.word	0x40013800
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40020400 	.word	0x40020400
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <HAL_GPIO_Init+0x53c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_GPIO_Init+0x454>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a41      	ldr	r2, [pc, #260]	; (8002b94 <HAL_GPIO_Init+0x540>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <HAL_GPIO_Init+0x450>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a40      	ldr	r2, [pc, #256]	; (8002b98 <HAL_GPIO_Init+0x544>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_GPIO_Init+0x44c>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e008      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	e006      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e004      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f002 0203 	and.w	r2, r2, #3
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	4093      	lsls	r3, r2
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac2:	4936      	ldr	r1, [pc, #216]	; (8002b9c <HAL_GPIO_Init+0x548>)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad0:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af4:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002afa:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1e:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b48:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	f67f ae05 	bls.w	8002790 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8002b86:	bf00      	nop
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40013c00 	.word	0x40013c00

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_GPIO_WritePin+0x20>
 8002bba:	887b      	ldrh	r3, [r7, #2]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <HAL_GPIO_WritePin+0x2a>
 8002bc4:	f240 119f 	movw	r1, #415	; 0x19f
 8002bc8:	480e      	ldr	r0, [pc, #56]	; (8002c04 <HAL_GPIO_WritePin+0x60>)
 8002bca:	f009 fe7f 	bl	800c8cc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002bce:	787b      	ldrb	r3, [r7, #1]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_GPIO_WritePin+0x40>
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d004      	beq.n	8002be4 <HAL_GPIO_WritePin+0x40>
 8002bda:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002bde:	4809      	ldr	r0, [pc, #36]	; (8002c04 <HAL_GPIO_WritePin+0x60>)
 8002be0:	f009 fe74 	bl	800c8cc <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002be4:	787b      	ldrb	r3, [r7, #1]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bf0:	e003      	b.n	8002bfa <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	041a      	lsls	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	619a      	str	r2, [r3, #24]
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	0800f908 	.word	0x0800f908

08002c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f007 ffcc 	bl	800abc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1b1      	b.n	8002fae <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4aa2      	ldr	r2, [pc, #648]	; (8002ed8 <HAL_I2C_Init+0x2a0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_I2C_Init+0x3a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4aa0      	ldr	r2, [pc, #640]	; (8002edc <HAL_I2C_Init+0x2a4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_I2C_Init+0x3a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a9f      	ldr	r2, [pc, #636]	; (8002ee0 <HAL_I2C_Init+0x2a8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_I2C_Init+0x3a>
 8002c68:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002c6c:	489d      	ldr	r0, [pc, #628]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002c6e:	f009 fe2d 	bl	800c8cc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_I2C_Init+0x4c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a9a      	ldr	r2, [pc, #616]	; (8002ee8 <HAL_I2C_Init+0x2b0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d904      	bls.n	8002c8e <HAL_I2C_Init+0x56>
 8002c84:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002c88:	4896      	ldr	r0, [pc, #600]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002c8a:	f009 fe1f 	bl	800c8cc <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_I2C_Init+0x72>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c9e:	d004      	beq.n	8002caa <HAL_I2C_Init+0x72>
 8002ca0:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002ca4:	488f      	ldr	r0, [pc, #572]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002ca6:	f009 fe11 	bl	800c8cc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <HAL_I2C_Init+0x8c>
 8002cba:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002cbe:	4889      	ldr	r0, [pc, #548]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002cc0:	f009 fe04 	bl	800c8cc <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ccc:	d009      	beq.n	8002ce2 <HAL_I2C_Init+0xaa>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cd6:	d004      	beq.n	8002ce2 <HAL_I2C_Init+0xaa>
 8002cd8:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002cdc:	4881      	ldr	r0, [pc, #516]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002cde:	f009 fdf5 	bl	800c8cc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_I2C_Init+0xc4>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d004      	beq.n	8002cfc <HAL_I2C_Init+0xc4>
 8002cf2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002cf6:	487b      	ldr	r0, [pc, #492]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002cf8:	f009 fde8 	bl	800c8cc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_I2C_Init+0xda>
 8002d08:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002d0c:	4875      	ldr	r0, [pc, #468]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002d0e:	f009 fddd 	bl	800c8cc <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_I2C_Init+0xf4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d004      	beq.n	8002d2c <HAL_I2C_Init+0xf4>
 8002d22:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002d26:	486f      	ldr	r0, [pc, #444]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002d28:	f009 fdd0 	bl	800c8cc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_I2C_Init+0x10e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d004      	beq.n	8002d46 <HAL_I2C_Init+0x10e>
 8002d3c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002d40:	4868      	ldr	r0, [pc, #416]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002d42:	f009 fdc3 	bl	800c8cc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f008 f89e 	bl	800ae9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d98:	f001 fdc2 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_I2C_Init+0x2b4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d807      	bhi.n	8002db8 <HAL_I2C_Init+0x180>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a51      	ldr	r2, [pc, #324]	; (8002ef0 <HAL_I2C_Init+0x2b8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e006      	b.n	8002dc6 <HAL_I2C_Init+0x18e>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a4e      	ldr	r2, [pc, #312]	; (8002ef4 <HAL_I2C_Init+0x2bc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0ef      	b.n	8002fae <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_I2C_Init+0x2c0>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <HAL_I2C_Init+0x2b4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d802      	bhi.n	8002e08 <HAL_I2C_Init+0x1d0>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3301      	adds	r3, #1
 8002e06:	e009      	b.n	8002e1c <HAL_I2C_Init+0x1e4>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <HAL_I2C_Init+0x2c4>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	492d      	ldr	r1, [pc, #180]	; (8002eec <HAL_I2C_Init+0x2b4>)
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	d80d      	bhi.n	8002e58 <HAL_I2C_Init+0x220>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e59      	subs	r1, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	bf38      	it	cc
 8002e54:	2304      	movcc	r3, #4
 8002e56:	e063      	b.n	8002f20 <HAL_I2C_Init+0x2e8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d111      	bne.n	8002e84 <HAL_I2C_Init+0x24c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1e58      	subs	r0, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	440b      	add	r3, r1
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	e012      	b.n	8002eaa <HAL_I2C_Init+0x272>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	0099      	lsls	r1, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Init+0x27a>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e036      	b.n	8002f20 <HAL_I2C_Init+0x2e8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d122      	bne.n	8002f00 <HAL_I2C_Init+0x2c8>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1e58      	subs	r0, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	440b      	add	r3, r1
 8002ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed6:	e023      	b.n	8002f20 <HAL_I2C_Init+0x2e8>
 8002ed8:	40005400 	.word	0x40005400
 8002edc:	40005800 	.word	0x40005800
 8002ee0:	40005c00 	.word	0x40005c00
 8002ee4:	0800f944 	.word	0x0800f944
 8002ee8:	00061a80 	.word	0x00061a80
 8002eec:	000186a0 	.word	0x000186a0
 8002ef0:	001e847f 	.word	0x001e847f
 8002ef4:	003d08ff 	.word	0x003d08ff
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	10624dd3 	.word	0x10624dd3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1e58      	subs	r0, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	0099      	lsls	r1, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	6809      	ldr	r1, [r1, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6911      	ldr	r1, [r2, #16]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68d2      	ldr	r2, [r2, #12]
 8002f5a:	4311      	orrs	r1, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop

08002fb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	813b      	strh	r3, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd2:	f7fd ffa7 	bl	8000f24 <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d007      	beq.n	8002fee <HAL_I2C_Mem_Write+0x36>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d004      	beq.n	8002fee <HAL_I2C_Mem_Write+0x36>
 8002fe4:	f640 1173 	movw	r1, #2419	; 0x973
 8002fe8:	4873      	ldr	r0, [pc, #460]	; (80031b8 <HAL_I2C_Mem_Write+0x200>)
 8002fea:	f009 fc6f 	bl	800c8cc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f040 80d9 	bne.w	80031ae <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2319      	movs	r3, #25
 8003002:	2201      	movs	r2, #1
 8003004:	496d      	ldr	r1, [pc, #436]	; (80031bc <HAL_I2C_Mem_Write+0x204>)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fc88 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	e0cc      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_I2C_Mem_Write+0x6c>
 8003020:	2302      	movs	r3, #2
 8003022:	e0c5      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d007      	beq.n	800304a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003058:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2221      	movs	r2, #33	; 0x21
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2240      	movs	r2, #64	; 0x40
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a3a      	ldr	r2, [r7, #32]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <HAL_I2C_Mem_Write+0x208>)
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800308c:	88f8      	ldrh	r0, [r7, #6]
 800308e:	893a      	ldrh	r2, [r7, #8]
 8003090:	8979      	ldrh	r1, [r7, #10]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4603      	mov	r3, r0
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fac3 	bl	8003628 <I2C_RequestMemoryWrite>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d052      	beq.n	800314e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e081      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fd09 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00d      	beq.n	80030d8 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d107      	bne.n	80030d4 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e06b      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d11b      	bne.n	800314e <HAL_I2C_Mem_Write+0x196>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d017      	beq.n	800314e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	781a      	ldrb	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1aa      	bne.n	80030ac <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fcf5 	bl	8003b4a <I2C_WaitOnBTFFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b04      	cmp	r3, #4
 800316c:	d107      	bne.n	800317e <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e016      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003190:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	0800f944 	.word	0x0800f944
 80031bc:	00100002 	.word	0x00100002
 80031c0:	ffff0000 	.word	0xffff0000

080031c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08c      	sub	sp, #48	; 0x30
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	817b      	strh	r3, [r7, #10]
 80031d6:	460b      	mov	r3, r1
 80031d8:	813b      	strh	r3, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031de:	f7fd fea1 	bl	8000f24 <HAL_GetTick>
 80031e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d007      	beq.n	80031fa <HAL_I2C_Mem_Read+0x36>
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d004      	beq.n	80031fa <HAL_I2C_Mem_Read+0x36>
 80031f0:	f640 11ee 	movw	r1, #2542	; 0x9ee
 80031f4:	4881      	ldr	r0, [pc, #516]	; (80033fc <HAL_I2C_Mem_Read+0x238>)
 80031f6:	f009 fb69 	bl	800c8cc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	f040 8209 	bne.w	800361a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2319      	movs	r3, #25
 800320e:	2201      	movs	r2, #1
 8003210:	497b      	ldr	r1, [pc, #492]	; (8003400 <HAL_I2C_Mem_Read+0x23c>)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fb82 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
 8003220:	e1fc      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_I2C_Mem_Read+0x6c>
 800322c:	2302      	movs	r3, #2
 800322e:	e1f5      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d007      	beq.n	8003256 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003264:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2222      	movs	r2, #34	; 0x22
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2240      	movs	r2, #64	; 0x40
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a5b      	ldr	r2, [pc, #364]	; (8003404 <HAL_I2C_Mem_Read+0x240>)
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003298:	88f8      	ldrh	r0, [r7, #6]
 800329a:	893a      	ldrh	r2, [r7, #8]
 800329c:	8979      	ldrh	r1, [r7, #10]
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	4603      	mov	r3, r0
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fa51 	bl	8003750 <I2C_RequestMemoryRead>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e1b1      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d113      	bne.n	80032e8 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c0:	2300      	movs	r3, #0
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	623b      	str	r3, [r7, #32]
 80032d4:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e185      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d11b      	bne.n	8003328 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fe:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e165      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	2b02      	cmp	r3, #2
 800332e:	d11b      	bne.n	8003368 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333e:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	e145      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800337e:	e139      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	2b03      	cmp	r3, #3
 8003386:	f200 80f2 	bhi.w	800356e <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	2b01      	cmp	r3, #1
 8003390:	d123      	bne.n	80033da <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fc18 	bl	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e13a      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033d8:	e10c      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d14f      	bne.n	8003482 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	2200      	movs	r2, #0
 80033ea:	4907      	ldr	r1, [pc, #28]	; (8003408 <HAL_I2C_Mem_Read+0x244>)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fa95 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e10f      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
 80033fc:	0800f944 	.word	0x0800f944
 8003400:	00100002 	.word	0x00100002
 8003404:	ffff0000 	.word	0xffff0000
 8003408:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003480:	e0b8      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	2200      	movs	r2, #0
 800348a:	4966      	ldr	r1, [pc, #408]	; (8003624 <HAL_I2C_Mem_Read+0x460>)
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fa45 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0bf      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2200      	movs	r2, #0
 80034e6:	494f      	ldr	r1, [pc, #316]	; (8003624 <HAL_I2C_Mem_Read+0x460>)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fa17 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e091      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800356c:	e042      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fb2a 	bl	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e04c      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d118      	bne.n	80035f4 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f47f aec1 	bne.w	8003380 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	00010004 	.word	0x00010004

08003628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	461a      	mov	r2, r3
 8003636:	4603      	mov	r3, r0
 8003638:	817b      	strh	r3, [r7, #10]
 800363a:	460b      	mov	r3, r1
 800363c:	813b      	strh	r3, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2200      	movs	r2, #0
 800365a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f95c 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e05f      	b.n	8003744 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003692:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	492c      	ldr	r1, [pc, #176]	; (800374c <I2C_RequestMemoryWrite+0x124>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f995 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e04c      	b.n	8003744 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	6a39      	ldr	r1, [r7, #32]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f9ff 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d107      	bne.n	80036e8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e02b      	b.n	8003744 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f2:	893b      	ldrh	r3, [r7, #8]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	611a      	str	r2, [r3, #16]
 80036fc:	e021      	b.n	8003742 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036fe:	893b      	ldrh	r3, [r7, #8]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	b29b      	uxth	r3, r3
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	6a39      	ldr	r1, [r7, #32]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f9d9 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2b04      	cmp	r3, #4
 8003722:	d107      	bne.n	8003734 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e005      	b.n	8003744 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003738:	893b      	ldrh	r3, [r7, #8]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	00010002 	.word	0x00010002

08003750 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4603      	mov	r3, r0
 8003760:	817b      	strh	r3, [r7, #10]
 8003762:	460b      	mov	r3, r1
 8003764:	813b      	strh	r3, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003788:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2200      	movs	r2, #0
 8003792:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f8c0 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00c      	beq.n	80037bc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0a9      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037bc:	897b      	ldrh	r3, [r7, #10]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	6a3a      	ldr	r2, [r7, #32]
 80037d0:	4951      	ldr	r1, [pc, #324]	; (8003918 <I2C_RequestMemoryRead+0x1c8>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f8f9 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e096      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	6a39      	ldr	r1, [r7, #32]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f963 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b04      	cmp	r3, #4
 800380e:	d107      	bne.n	8003820 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e075      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800382a:	893b      	ldrh	r3, [r7, #8]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]
 8003834:	e021      	b.n	800387a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003836:	893b      	ldrh	r3, [r7, #8]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	b29b      	uxth	r3, r3
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	6a39      	ldr	r1, [r7, #32]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f93d 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00d      	beq.n	8003870 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	2b04      	cmp	r3, #4
 800385a:	d107      	bne.n	800386c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e04f      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003870:	893b      	ldrh	r3, [r7, #8]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f922 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b04      	cmp	r3, #4
 8003890:	d107      	bne.n	80038a2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e034      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	2200      	movs	r2, #0
 80038be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f82a 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e013      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038e8:	897b      	ldrh	r3, [r7, #10]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	6a3a      	ldr	r2, [r7, #32]
 80038fc:	4906      	ldr	r1, [pc, #24]	; (8003918 <I2C_RequestMemoryRead+0x1c8>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f863 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	00010002 	.word	0x00010002

0800391c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800392c:	e025      	b.n	800397a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d021      	beq.n	800397a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fd faf5 	bl	8000f24 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e023      	b.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10d      	bne.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	e00c      	b.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	43da      	mvns	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d0b6      	beq.n	800392e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d8:	e051      	b.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e8:	d123      	bne.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f043 0204 	orr.w	r2, r3, #4
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e046      	b.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d021      	beq.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7fd fa73 	bl	8000f24 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e020      	b.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10c      	bne.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e00b      	b.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d18d      	bne.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad4:	e02d      	b.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f8ce 	bl	8003c78 <I2C_IsAcknowledgeFailed>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e02d      	b.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d021      	beq.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fd fa19 	bl	8000f24 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d116      	bne.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e007      	b.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d1ca      	bne.n	8003ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b56:	e02d      	b.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f88d 	bl	8003c78 <I2C_IsAcknowledgeFailed>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e02d      	b.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d021      	beq.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7fd f9d8 	bl	8000f24 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d1ca      	bne.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd8:	e042      	b.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d119      	bne.n	8003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0210 	mvn.w	r2, #16
 8003bf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e029      	b.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1c:	f7fd f982 	bl	8000f24 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d302      	bcc.n	8003c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e007      	b.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d1b5      	bne.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d11b      	bne.n	8003cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f043 0204 	orr.w	r2, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce6:	d004      	beq.n	8003cf2 <HAL_PWR_EnableWakeUpPin+0x1a>
 8003ce8:	f240 1141 	movw	r1, #321	; 0x141
 8003cec:	4806      	ldr	r0, [pc, #24]	; (8003d08 <HAL_PWR_EnableWakeUpPin+0x30>)
 8003cee:	f008 fded 	bl	800c8cc <assert_failed>

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_PWR_EnableWakeUpPin+0x34>)
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	4905      	ldr	r1, [pc, #20]	; (8003d0c <HAL_PWR_EnableWakeUpPin+0x34>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	0800f97c 	.word	0x0800f97c
 8003d0c:	40007000 	.word	0x40007000

08003d10 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	d004      	beq.n	8003d2a <HAL_PWR_DisableWakeUpPin+0x1a>
 8003d20:	f240 1153 	movw	r1, #339	; 0x153
 8003d24:	4806      	ldr	r0, [pc, #24]	; (8003d40 <HAL_PWR_DisableWakeUpPin+0x30>)
 8003d26:	f008 fdd1 	bl	800c8cc <assert_failed>

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_PWR_DisableWakeUpPin+0x34>)
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	4904      	ldr	r1, [pc, #16]	; (8003d44 <HAL_PWR_DisableWakeUpPin+0x34>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	0800f97c 	.word	0x0800f97c
 8003d44:	40007000 	.word	0x40007000

08003d48 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_PWR_EnterSTOPMode+0x22>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d004      	beq.n	8003d6a <HAL_PWR_EnterSTOPMode+0x22>
 8003d60:	f240 119b 	movw	r1, #411	; 0x19b
 8003d64:	4816      	ldr	r0, [pc, #88]	; (8003dc0 <HAL_PWR_EnterSTOPMode+0x78>)
 8003d66:	f008 fdb1 	bl	800c8cc <assert_failed>
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d007      	beq.n	8003d80 <HAL_PWR_EnterSTOPMode+0x38>
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d004      	beq.n	8003d80 <HAL_PWR_EnterSTOPMode+0x38>
 8003d76:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003d7a:	4811      	ldr	r0, [pc, #68]	; (8003dc0 <HAL_PWR_EnterSTOPMode+0x78>)
 8003d7c:	f008 fda6 	bl	800c8cc <assert_failed>
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 0203 	bic.w	r2, r3, #3
 8003d88:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_PWR_EnterSTOPMode+0x80>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <HAL_PWR_EnterSTOPMode+0x80>)
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_PWR_EnterSTOPMode+0x5e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8003da2:	bf30      	wfi
 8003da4:	e002      	b.n	8003dac <HAL_PWR_EnterSTOPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003da6:	bf40      	sev
    __WFE();
 8003da8:	bf20      	wfe
    __WFE();
 8003daa:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_PWR_EnterSTOPMode+0x80>)
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <HAL_PWR_EnterSTOPMode+0x80>)
 8003db2:	f023 0304 	bic.w	r3, r3, #4
 8003db6:	6113      	str	r3, [r2, #16]
}
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	0800f97c 	.word	0x0800f97c
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003dd6:	f043 0302 	orr.w	r3, r3, #2
 8003dda:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003de8:	bf30      	wfi
}
 8003dea:	bf00      	nop
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40007000 	.word	0x40007000
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e30d      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	d903      	bls.n	8003e1e <HAL_RCC_OscConfig+0x22>
 8003e16:	21e8      	movs	r1, #232	; 0xe8
 8003e18:	48a3      	ldr	r0, [pc, #652]	; (80040a8 <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	f008 fd57 	bl	800c8cc <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8088 	beq.w	8003f3c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <HAL_RCC_OscConfig+0x54>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCC_OscConfig+0x54>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e46:	d003      	beq.n	8003e50 <HAL_RCC_OscConfig+0x54>
 8003e48:	21ed      	movs	r1, #237	; 0xed
 8003e4a:	4897      	ldr	r0, [pc, #604]	; (80040a8 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	f008 fd3e 	bl	800c8cc <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e50:	4b96      	ldr	r3, [pc, #600]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d00c      	beq.n	8003e76 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5c:	4b93      	ldr	r3, [pc, #588]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d112      	bne.n	8003e8e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e68:	4b90      	ldr	r3, [pc, #576]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e74:	d10b      	bne.n	8003e8e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e76:	4b8d      	ldr	r3, [pc, #564]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d05b      	beq.n	8003f3a <HAL_RCC_OscConfig+0x13e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d157      	bne.n	8003f3a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e2cd      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0xaa>
 8003e98:	4b84      	ldr	r3, [pc, #528]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a83      	ldr	r2, [pc, #524]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	e01d      	b.n	8003ee2 <HAL_RCC_OscConfig+0xe6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eae:	d10c      	bne.n	8003eca <HAL_RCC_OscConfig+0xce>
 8003eb0:	4b7e      	ldr	r3, [pc, #504]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a7d      	ldr	r2, [pc, #500]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003eb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b7b      	ldr	r3, [pc, #492]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a7a      	ldr	r2, [pc, #488]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e00b      	b.n	8003ee2 <HAL_RCC_OscConfig+0xe6>
 8003eca:	4b78      	ldr	r3, [pc, #480]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a77      	ldr	r2, [pc, #476]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b75      	ldr	r3, [pc, #468]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a74      	ldr	r2, [pc, #464]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d013      	beq.n	8003f12 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fd f81b 	bl	8000f24 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef2:	f7fd f817 	bl	8000f24 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b64      	cmp	r3, #100	; 0x64
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e292      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f04:	4b69      	ldr	r3, [pc, #420]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0xf6>
 8003f10:	e014      	b.n	8003f3c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fd f807 	bl	8000f24 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f1a:	f7fd f803 	bl	8000f24 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b64      	cmp	r3, #100	; 0x64
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e27e      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2c:	4b5f      	ldr	r3, [pc, #380]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x11e>
 8003f38:	e000      	b.n	8003f3c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d079      	beq.n	800403c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCC_OscConfig+0x166>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d004      	beq.n	8003f62 <HAL_RCC_OscConfig+0x166>
 8003f58:	f240 111f 	movw	r1, #287	; 0x11f
 8003f5c:	4852      	ldr	r0, [pc, #328]	; (80040a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	f008 fcb5 	bl	800c8cc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b1f      	cmp	r3, #31
 8003f68:	d904      	bls.n	8003f74 <HAL_RCC_OscConfig+0x178>
 8003f6a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003f6e:	484e      	ldr	r0, [pc, #312]	; (80040a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	f008 fcac 	bl	800c8cc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f74:	4b4d      	ldr	r3, [pc, #308]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00b      	beq.n	8003f98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f80:	4b4a      	ldr	r3, [pc, #296]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d11c      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8c:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d116      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f98:	4b44      	ldr	r3, [pc, #272]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x1b4>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e23c      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b3e      	ldr	r3, [pc, #248]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	493b      	ldr	r1, [pc, #236]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc4:	e03a      	b.n	800403c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fce:	4b38      	ldr	r3, [pc, #224]	; (80040b0 <HAL_RCC_OscConfig+0x2b4>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fc ffa6 	bl	8000f24 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fdc:	f7fc ffa2 	bl	8000f24 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e21d      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fee:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4928      	ldr	r1, [pc, #160]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
 800400e:	e015      	b.n	800403c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004010:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <HAL_RCC_OscConfig+0x2b4>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fc ff85 	bl	8000f24 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401e:	f7fc ff81 	bl	8000f24 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1fc      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d046      	beq.n	80040d6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_OscConfig+0x266>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d004      	beq.n	8004062 <HAL_RCC_OscConfig+0x266>
 8004058:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800405c:	4812      	ldr	r0, [pc, #72]	; (80040a8 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	f008 fc35 	bl	800c8cc <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_RCC_OscConfig+0x2b8>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fc ff58 	bl	8000f24 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004078:	f7fc ff54 	bl	8000f24 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e1cf      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_RCC_OscConfig+0x2b0>)
 800408c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x27c>
 8004096:	e01e      	b.n	80040d6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCC_OscConfig+0x2b8>)
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409e:	f7fc ff41 	bl	8000f24 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a4:	e011      	b.n	80040ca <HAL_RCC_OscConfig+0x2ce>
 80040a6:	bf00      	nop
 80040a8:	0800f9b4 	.word	0x0800f9b4
 80040ac:	40023800 	.word	0x40023800
 80040b0:	42470000 	.word	0x42470000
 80040b4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fc ff34 	bl	8000f24 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e1af      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ca:	4b97      	ldr	r3, [pc, #604]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 80040cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80a8 	beq.w	8004234 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00c      	beq.n	800410a <HAL_RCC_OscConfig+0x30e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d008      	beq.n	800410a <HAL_RCC_OscConfig+0x30e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b05      	cmp	r3, #5
 80040fe:	d004      	beq.n	800410a <HAL_RCC_OscConfig+0x30e>
 8004100:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004104:	4889      	ldr	r0, [pc, #548]	; (800432c <HAL_RCC_OscConfig+0x530>)
 8004106:	f008 fbe1 	bl	800c8cc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410a:	4b87      	ldr	r3, [pc, #540]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	4b83      	ldr	r3, [pc, #524]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a82      	ldr	r2, [pc, #520]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b80      	ldr	r3, [pc, #512]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b7e      	ldr	r3, [pc, #504]	; (8004330 <HAL_RCC_OscConfig+0x534>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d118      	bne.n	8004174 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004142:	4b7b      	ldr	r3, [pc, #492]	; (8004330 <HAL_RCC_OscConfig+0x534>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7a      	ldr	r2, [pc, #488]	; (8004330 <HAL_RCC_OscConfig+0x534>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414e:	f7fc fee9 	bl	8000f24 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7fc fee5 	bl	8000f24 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e160      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	4b71      	ldr	r3, [pc, #452]	; (8004330 <HAL_RCC_OscConfig+0x534>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x38e>
 800417c:	4b6a      	ldr	r3, [pc, #424]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a69      	ldr	r2, [pc, #420]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	e01c      	b.n	80041c4 <HAL_RCC_OscConfig+0x3c8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x3b0>
 8004192:	4b65      	ldr	r3, [pc, #404]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a64      	ldr	r2, [pc, #400]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
 800419e:	4b62      	ldr	r3, [pc, #392]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	4a61      	ldr	r2, [pc, #388]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6713      	str	r3, [r2, #112]	; 0x70
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0x3c8>
 80041ac:	4b5e      	ldr	r3, [pc, #376]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a5d      	ldr	r2, [pc, #372]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	4a5a      	ldr	r2, [pc, #360]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 80041be:	f023 0304 	bic.w	r3, r3, #4
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fc feaa 	bl	8000f24 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d4:	f7fc fea6 	bl	8000f24 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e11f      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ea:	4b4f      	ldr	r3, [pc, #316]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0ee      	beq.n	80041d4 <HAL_RCC_OscConfig+0x3d8>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f8:	f7fc fe94 	bl	8000f24 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004200:	f7fc fe90 	bl	8000f24 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e109      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004216:	4b44      	ldr	r3, [pc, #272]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1ee      	bne.n	8004200 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004228:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4a3e      	ldr	r2, [pc, #248]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00c      	beq.n	8004256 <HAL_RCC_OscConfig+0x45a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d008      	beq.n	8004256 <HAL_RCC_OscConfig+0x45a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d004      	beq.n	8004256 <HAL_RCC_OscConfig+0x45a>
 800424c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004250:	4836      	ldr	r0, [pc, #216]	; (800432c <HAL_RCC_OscConfig+0x530>)
 8004252:	f008 fb3b 	bl	800c8cc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80e4 	beq.w	8004428 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004260:	4b31      	ldr	r3, [pc, #196]	; (8004328 <HAL_RCC_OscConfig+0x52c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b08      	cmp	r3, #8
 800426a:	f000 80ae 	beq.w	80043ca <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b02      	cmp	r3, #2
 8004274:	f040 8092 	bne.w	800439c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_RCC_OscConfig+0x498>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004288:	d004      	beq.n	8004294 <HAL_RCC_OscConfig+0x498>
 800428a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800428e:	4827      	ldr	r0, [pc, #156]	; (800432c <HAL_RCC_OscConfig+0x530>)
 8004290:	f008 fb1c 	bl	800c8cc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	2b3f      	cmp	r3, #63	; 0x3f
 800429a:	d904      	bls.n	80042a6 <HAL_RCC_OscConfig+0x4aa>
 800429c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80042a0:	4822      	ldr	r0, [pc, #136]	; (800432c <HAL_RCC_OscConfig+0x530>)
 80042a2:	f008 fb13 	bl	800c8cc <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2bbf      	cmp	r3, #191	; 0xbf
 80042ac:	d904      	bls.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80042b6:	d904      	bls.n	80042c2 <HAL_RCC_OscConfig+0x4c6>
 80042b8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80042bc:	481b      	ldr	r0, [pc, #108]	; (800432c <HAL_RCC_OscConfig+0x530>)
 80042be:	f008 fb05 	bl	800c8cc <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_OscConfig+0x4f0>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d00c      	beq.n	80042ec <HAL_RCC_OscConfig+0x4f0>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	2b06      	cmp	r3, #6
 80042d8:	d008      	beq.n	80042ec <HAL_RCC_OscConfig+0x4f0>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d004      	beq.n	80042ec <HAL_RCC_OscConfig+0x4f0>
 80042e2:	f240 11db 	movw	r1, #475	; 0x1db
 80042e6:	4811      	ldr	r0, [pc, #68]	; (800432c <HAL_RCC_OscConfig+0x530>)
 80042e8:	f008 faf0 	bl	800c8cc <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d903      	bls.n	80042fc <HAL_RCC_OscConfig+0x500>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	2b0f      	cmp	r3, #15
 80042fa:	d904      	bls.n	8004306 <HAL_RCC_OscConfig+0x50a>
 80042fc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004300:	480a      	ldr	r0, [pc, #40]	; (800432c <HAL_RCC_OscConfig+0x530>)
 8004302:	f008 fae3 	bl	800c8cc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x538>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fc fe0a 	bl	8000f24 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e011      	b.n	8004338 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7fc fe06 	bl	8000f24 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d90a      	bls.n	8004338 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e081      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	0800f9b4 	.word	0x0800f9b4
 8004330:	40007000 	.word	0x40007000
 8004334:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004338:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <HAL_RCC_OscConfig+0x638>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e7      	bne.n	8004314 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	019b      	lsls	r3, r3, #6
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	3b01      	subs	r3, #1
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	4932      	ldr	r1, [pc, #200]	; (8004434 <HAL_RCC_OscConfig+0x638>)
 800436a:	4313      	orrs	r3, r2
 800436c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436e:	4b32      	ldr	r3, [pc, #200]	; (8004438 <HAL_RCC_OscConfig+0x63c>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fc fdd6 	bl	8000f24 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437c:	f7fc fdd2 	bl	8000f24 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e04d      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCC_OscConfig+0x638>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x580>
 800439a:	e045      	b.n	8004428 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b26      	ldr	r3, [pc, #152]	; (8004438 <HAL_RCC_OscConfig+0x63c>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fc fdbf 	bl	8000f24 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fc fdbb 	bl	8000f24 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e036      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043bc:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_RCC_OscConfig+0x638>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0x5ae>
 80043c8:	e02e      	b.n	8004428 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e029      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d6:	4b17      	ldr	r3, [pc, #92]	; (8004434 <HAL_RCC_OscConfig+0x638>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d115      	bne.n	8004424 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043fe:	4013      	ands	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004404:	4293      	cmp	r3, r2
 8004406:	d10d      	bne.n	8004424 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d106      	bne.n	8004424 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	42470060 	.word	0x42470060

0800443c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e174      	b.n	800473a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_RCC_ClockConfig+0x24>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b0f      	cmp	r3, #15
 800445e:	d904      	bls.n	800446a <HAL_RCC_ClockConfig+0x2e>
 8004460:	f240 2151 	movw	r1, #593	; 0x251
 8004464:	487b      	ldr	r0, [pc, #492]	; (8004654 <HAL_RCC_ClockConfig+0x218>)
 8004466:	f008 fa31 	bl	800c8cc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d019      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x68>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d016      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x68>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d013      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x68>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d010      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x68>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d00d      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x68>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b05      	cmp	r3, #5
 800448c:	d00a      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x68>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b06      	cmp	r3, #6
 8004492:	d007      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x68>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b07      	cmp	r3, #7
 8004498:	d004      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x68>
 800449a:	f240 2152 	movw	r1, #594	; 0x252
 800449e:	486d      	ldr	r0, [pc, #436]	; (8004654 <HAL_RCC_ClockConfig+0x218>)
 80044a0:	f008 fa14 	bl	800c8cc <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044a4:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <HAL_RCC_ClockConfig+0x21c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d90c      	bls.n	80044cc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b69      	ldr	r3, [pc, #420]	; (8004658 <HAL_RCC_ClockConfig+0x21c>)
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b67      	ldr	r3, [pc, #412]	; (8004658 <HAL_RCC_ClockConfig+0x21c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e136      	b.n	800473a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d049      	beq.n	800456c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e4:	4b5d      	ldr	r3, [pc, #372]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a5c      	ldr	r2, [pc, #368]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 80044ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044fc:	4b57      	ldr	r3, [pc, #348]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a56      	ldr	r2, [pc, #344]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 8004502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d024      	beq.n	800455a <HAL_RCC_ClockConfig+0x11e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b80      	cmp	r3, #128	; 0x80
 8004516:	d020      	beq.n	800455a <HAL_RCC_ClockConfig+0x11e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b90      	cmp	r3, #144	; 0x90
 800451e:	d01c      	beq.n	800455a <HAL_RCC_ClockConfig+0x11e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2ba0      	cmp	r3, #160	; 0xa0
 8004526:	d018      	beq.n	800455a <HAL_RCC_ClockConfig+0x11e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2bb0      	cmp	r3, #176	; 0xb0
 800452e:	d014      	beq.n	800455a <HAL_RCC_ClockConfig+0x11e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2bc0      	cmp	r3, #192	; 0xc0
 8004536:	d010      	beq.n	800455a <HAL_RCC_ClockConfig+0x11e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2bd0      	cmp	r3, #208	; 0xd0
 800453e:	d00c      	beq.n	800455a <HAL_RCC_ClockConfig+0x11e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2be0      	cmp	r3, #224	; 0xe0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x11e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2bf0      	cmp	r3, #240	; 0xf0
 800454e:	d004      	beq.n	800455a <HAL_RCC_ClockConfig+0x11e>
 8004550:	f240 2175 	movw	r1, #629	; 0x275
 8004554:	483f      	ldr	r0, [pc, #252]	; (8004654 <HAL_RCC_ClockConfig+0x218>)
 8004556:	f008 f9b9 	bl	800c8cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800455a:	4b40      	ldr	r3, [pc, #256]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	493d      	ldr	r1, [pc, #244]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 8004568:	4313      	orrs	r3, r2
 800456a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d059      	beq.n	800462c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x166>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d00c      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x166>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x166>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d004      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x166>
 8004598:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800459c:	482d      	ldr	r0, [pc, #180]	; (8004654 <HAL_RCC_ClockConfig+0x218>)
 800459e:	f008 f995 	bl	800c8cc <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	4b2c      	ldr	r3, [pc, #176]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d119      	bne.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0bf      	b.n	800473a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0af      	b.n	800473a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045da:	4b20      	ldr	r3, [pc, #128]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0a7      	b.n	800473a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ea:	4b1c      	ldr	r3, [pc, #112]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 0203 	bic.w	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4919      	ldr	r1, [pc, #100]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045fc:	f7fc fc92 	bl	8000f24 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	e00a      	b.n	800461a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004604:	f7fc fc8e 	bl	8000f24 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e08f      	b.n	800473a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	4b10      	ldr	r3, [pc, #64]	; (800465c <HAL_RCC_ClockConfig+0x220>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 020c 	and.w	r2, r3, #12
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	429a      	cmp	r2, r3
 800462a:	d1eb      	bne.n	8004604 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_RCC_ClockConfig+0x21c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d212      	bcs.n	8004660 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463a:	4b07      	ldr	r3, [pc, #28]	; (8004658 <HAL_RCC_ClockConfig+0x21c>)
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_ClockConfig+0x21c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d007      	beq.n	8004660 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e072      	b.n	800473a <HAL_RCC_ClockConfig+0x2fe>
 8004654:	0800f9b4 	.word	0x0800f9b4
 8004658:	40023c00 	.word	0x40023c00
 800465c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d025      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d018      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x26a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d013      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x26a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004686:	d00e      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x26a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004690:	d009      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x26a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800469a:	d004      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x26a>
 800469c:	f240 21ba 	movw	r1, #698	; 0x2ba
 80046a0:	4828      	ldr	r0, [pc, #160]	; (8004744 <HAL_RCC_ClockConfig+0x308>)
 80046a2:	f008 f913 	bl	800c8cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a6:	4b28      	ldr	r3, [pc, #160]	; (8004748 <HAL_RCC_ClockConfig+0x30c>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4925      	ldr	r1, [pc, #148]	; (8004748 <HAL_RCC_ClockConfig+0x30c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d026      	beq.n	8004712 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d018      	beq.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d013      	beq.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046de:	d00e      	beq.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80046e8:	d009      	beq.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80046f2:	d004      	beq.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
 80046f4:	f240 21c1 	movw	r1, #705	; 0x2c1
 80046f8:	4812      	ldr	r0, [pc, #72]	; (8004744 <HAL_RCC_ClockConfig+0x308>)
 80046fa:	f008 f8e7 	bl	800c8cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <HAL_RCC_ClockConfig+0x30c>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	490e      	ldr	r1, [pc, #56]	; (8004748 <HAL_RCC_ClockConfig+0x30c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004712:	f000 f821 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 8004716:	4601      	mov	r1, r0
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCC_ClockConfig+0x30c>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <HAL_RCC_ClockConfig+0x310>)
 8004724:	5cd3      	ldrb	r3, [r2, r3]
 8004726:	fa21 f303 	lsr.w	r3, r1, r3
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x314>)
 800472c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_RCC_ClockConfig+0x318>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f008 f9c0 	bl	800cab8 <HAL_InitTick>

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	0800f9b4 	.word	0x0800f9b4
 8004748:	40023800 	.word	0x40023800
 800474c:	08010090 	.word	0x08010090
 8004750:	20000090 	.word	0x20000090
 8004754:	20000080 	.word	0x20000080

08004758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	2300      	movs	r3, #0
 8004768:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800476e:	4b63      	ldr	r3, [pc, #396]	; (80048fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b04      	cmp	r3, #4
 8004778:	d007      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0x32>
 800477a:	2b08      	cmp	r3, #8
 800477c:	d008      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x38>
 800477e:	2b00      	cmp	r3, #0
 8004780:	f040 80b4 	bne.w	80048ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004784:	4b5e      	ldr	r3, [pc, #376]	; (8004900 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004786:	60bb      	str	r3, [r7, #8]
       break;
 8004788:	e0b3      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800478a:	4b5e      	ldr	r3, [pc, #376]	; (8004904 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800478c:	60bb      	str	r3, [r7, #8]
      break;
 800478e:	e0b0      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004790:	4b5a      	ldr	r3, [pc, #360]	; (80048fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004798:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800479a:	4b58      	ldr	r3, [pc, #352]	; (80048fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d04a      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a6:	4b55      	ldr	r3, [pc, #340]	; (80048fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	099b      	lsrs	r3, r3, #6
 80047ac:	f04f 0400 	mov.w	r4, #0
 80047b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	ea03 0501 	and.w	r5, r3, r1
 80047bc:	ea04 0602 	and.w	r6, r4, r2
 80047c0:	4629      	mov	r1, r5
 80047c2:	4632      	mov	r2, r6
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	f04f 0400 	mov.w	r4, #0
 80047cc:	0154      	lsls	r4, r2, #5
 80047ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047d2:	014b      	lsls	r3, r1, #5
 80047d4:	4619      	mov	r1, r3
 80047d6:	4622      	mov	r2, r4
 80047d8:	1b49      	subs	r1, r1, r5
 80047da:	eb62 0206 	sbc.w	r2, r2, r6
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f04f 0400 	mov.w	r4, #0
 80047e6:	0194      	lsls	r4, r2, #6
 80047e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047ec:	018b      	lsls	r3, r1, #6
 80047ee:	1a5b      	subs	r3, r3, r1
 80047f0:	eb64 0402 	sbc.w	r4, r4, r2
 80047f4:	f04f 0100 	mov.w	r1, #0
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	00e2      	lsls	r2, r4, #3
 80047fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004802:	00d9      	lsls	r1, r3, #3
 8004804:	460b      	mov	r3, r1
 8004806:	4614      	mov	r4, r2
 8004808:	195b      	adds	r3, r3, r5
 800480a:	eb44 0406 	adc.w	r4, r4, r6
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	0262      	lsls	r2, r4, #9
 8004818:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800481c:	0259      	lsls	r1, r3, #9
 800481e:	460b      	mov	r3, r1
 8004820:	4614      	mov	r4, r2
 8004822:	4618      	mov	r0, r3
 8004824:	4621      	mov	r1, r4
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	461a      	mov	r2, r3
 800482e:	4623      	mov	r3, r4
 8004830:	f7fc f9c2 	bl	8000bb8 <__aeabi_uldivmod>
 8004834:	4603      	mov	r3, r0
 8004836:	460c      	mov	r4, r1
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	e049      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800483c:	4b2f      	ldr	r3, [pc, #188]	; (80048fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	f04f 0400 	mov.w	r4, #0
 8004846:	f240 11ff 	movw	r1, #511	; 0x1ff
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	ea03 0501 	and.w	r5, r3, r1
 8004852:	ea04 0602 	and.w	r6, r4, r2
 8004856:	4629      	mov	r1, r5
 8004858:	4632      	mov	r2, r6
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	f04f 0400 	mov.w	r4, #0
 8004862:	0154      	lsls	r4, r2, #5
 8004864:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004868:	014b      	lsls	r3, r1, #5
 800486a:	4619      	mov	r1, r3
 800486c:	4622      	mov	r2, r4
 800486e:	1b49      	subs	r1, r1, r5
 8004870:	eb62 0206 	sbc.w	r2, r2, r6
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	f04f 0400 	mov.w	r4, #0
 800487c:	0194      	lsls	r4, r2, #6
 800487e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004882:	018b      	lsls	r3, r1, #6
 8004884:	1a5b      	subs	r3, r3, r1
 8004886:	eb64 0402 	sbc.w	r4, r4, r2
 800488a:	f04f 0100 	mov.w	r1, #0
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	00e2      	lsls	r2, r4, #3
 8004894:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004898:	00d9      	lsls	r1, r3, #3
 800489a:	460b      	mov	r3, r1
 800489c:	4614      	mov	r4, r2
 800489e:	195b      	adds	r3, r3, r5
 80048a0:	eb44 0406 	adc.w	r4, r4, r6
 80048a4:	f04f 0100 	mov.w	r1, #0
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	02a2      	lsls	r2, r4, #10
 80048ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048b2:	0299      	lsls	r1, r3, #10
 80048b4:	460b      	mov	r3, r1
 80048b6:	4614      	mov	r4, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	4621      	mov	r1, r4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f04f 0400 	mov.w	r4, #0
 80048c2:	461a      	mov	r2, r3
 80048c4:	4623      	mov	r3, r4
 80048c6:	f7fc f977 	bl	8000bb8 <__aeabi_uldivmod>
 80048ca:	4603      	mov	r3, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	3301      	adds	r3, #1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	60bb      	str	r3, [r7, #8]
      break;
 80048ea:	e002      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b04      	ldr	r3, [pc, #16]	; (8004900 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048ee:	60bb      	str	r3, [r7, #8]
      break;
 80048f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f2:	68bb      	ldr	r3, [r7, #8]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fc:	40023800 	.word	0x40023800
 8004900:	00f42400 	.word	0x00f42400
 8004904:	007a1200 	.word	0x007a1200

08004908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <HAL_RCC_GetHCLKFreq+0x14>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000090 	.word	0x20000090

08004920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004924:	f7ff fff0 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004928:	4601      	mov	r1, r0
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	0a9b      	lsrs	r3, r3, #10
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4a03      	ldr	r2, [pc, #12]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004936:	5cd3      	ldrb	r3, [r2, r3]
 8004938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40023800 	.word	0x40023800
 8004944:	080100a0 	.word	0x080100a0

08004948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800494c:	f7ff ffdc 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004950:	4601      	mov	r1, r0
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	0b5b      	lsrs	r3, r3, #13
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	4a03      	ldr	r2, [pc, #12]	; (800496c <HAL_RCC_GetPCLK2Freq+0x24>)
 800495e:	5cd3      	ldrb	r3, [r2, r3]
 8004960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40023800 	.word	0x40023800
 800496c:	080100a0 	.word	0x080100a0

08004970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	220f      	movs	r2, #15
 800497e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004980:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_RCC_GetClockConfig+0x5c>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0203 	and.w	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <HAL_RCC_GetClockConfig+0x5c>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <HAL_RCC_GetClockConfig+0x5c>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <HAL_RCC_GetClockConfig+0x5c>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	08db      	lsrs	r3, r3, #3
 80049aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <HAL_RCC_GetClockConfig+0x60>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 020f 	and.w	r2, r3, #15
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	601a      	str	r2, [r3, #0]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40023c00 	.word	0x40023c00

080049d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b0f      	cmp	r3, #15
 80049f2:	d904      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80049f4:	f640 11d9 	movw	r1, #2521	; 0x9d9
 80049f8:	489d      	ldr	r0, [pc, #628]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80049fa:	f007 ff67 	bl	800c8cc <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d060      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d903      	bls.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b07      	cmp	r3, #7
 8004a24:	d904      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004a26:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004a2a:	4891      	ldr	r0, [pc, #580]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004a2c:	f007 ff4e 	bl	800c8cc <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2bbf      	cmp	r3, #191	; 0xbf
 8004a36:	d904      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004a40:	d904      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004a42:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004a46:	488a      	ldr	r0, [pc, #552]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004a48:	f007 ff40 	bl	800c8cc <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d903      	bls.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b3f      	cmp	r3, #63	; 0x3f
 8004a5a:	d904      	bls.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004a5c:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8004a60:	4883      	ldr	r0, [pc, #524]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004a62:	f007 ff33 	bl	800c8cc <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a66:	4b83      	ldr	r3, [pc, #524]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a6c:	f7fc fa5a 	bl	8000f24 <HAL_GetTick>
 8004a70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a74:	f7fc fa56 	bl	8000f24 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e1ae      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a86:	4b7c      	ldr	r3, [pc, #496]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	019b      	lsls	r3, r3, #6
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	071b      	lsls	r3, r3, #28
 8004aa4:	4974      	ldr	r1, [pc, #464]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aac:	4b71      	ldr	r3, [pc, #452]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab2:	f7fc fa37 	bl	8000f24 <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aba:	f7fc fa33 	bl	8000f24 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e18b      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004acc:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8174 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aee:	f000 80a6 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afa:	f000 80a0 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	4a5e      	ldr	r2, [pc, #376]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	f000 809a 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	4a5c      	ldr	r2, [pc, #368]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	f000 8094 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	4a5a      	ldr	r2, [pc, #360]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	f000 808e 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	4a58      	ldr	r2, [pc, #352]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	f000 8088 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	4a56      	ldr	r2, [pc, #344]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	f000 8082 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	4a54      	ldr	r2, [pc, #336]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d07c      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	4a52      	ldr	r2, [pc, #328]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d077      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	4a51      	ldr	r2, [pc, #324]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d072      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	4a4f      	ldr	r2, [pc, #316]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d06d      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	4a4e      	ldr	r2, [pc, #312]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d068      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	4a4c      	ldr	r2, [pc, #304]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d063      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	4a4b      	ldr	r2, [pc, #300]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d05e      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	4a49      	ldr	r2, [pc, #292]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d059      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	4a48      	ldr	r2, [pc, #288]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d054      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	4a46      	ldr	r2, [pc, #280]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d04f      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	4a45      	ldr	r2, [pc, #276]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d04a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	4a43      	ldr	r2, [pc, #268]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d045      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	4a42      	ldr	r2, [pc, #264]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d040      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	4a40      	ldr	r2, [pc, #256]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d03b      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	4a3f      	ldr	r2, [pc, #252]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d036      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d031      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4a3c      	ldr	r2, [pc, #240]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d02c      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	4a3a      	ldr	r2, [pc, #232]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d027      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	4a39      	ldr	r2, [pc, #228]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d022      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	4a37      	ldr	r2, [pc, #220]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01d      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	4a36      	ldr	r2, [pc, #216]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d018      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	4a34      	ldr	r2, [pc, #208]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	4a33      	ldr	r2, [pc, #204]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00e      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	4a31      	ldr	r2, [pc, #196]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d009      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4a30      	ldr	r2, [pc, #192]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c34:	f640 2112 	movw	r1, #2578	; 0xa12
 8004c38:	480d      	ldr	r0, [pc, #52]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c3a:	f007 fe47 	bl	800c8cc <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c5a:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c66:	f7fc f95d 	bl	8000f24 <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c6c:	e04d      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004c6e:	bf00      	nop
 8004c70:	0800f9ec 	.word	0x0800f9ec
 8004c74:	42470068 	.word	0x42470068
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	00020300 	.word	0x00020300
 8004c80:	00030300 	.word	0x00030300
 8004c84:	00040300 	.word	0x00040300
 8004c88:	00050300 	.word	0x00050300
 8004c8c:	00060300 	.word	0x00060300
 8004c90:	00070300 	.word	0x00070300
 8004c94:	00080300 	.word	0x00080300
 8004c98:	00090300 	.word	0x00090300
 8004c9c:	000a0300 	.word	0x000a0300
 8004ca0:	000b0300 	.word	0x000b0300
 8004ca4:	000c0300 	.word	0x000c0300
 8004ca8:	000d0300 	.word	0x000d0300
 8004cac:	000e0300 	.word	0x000e0300
 8004cb0:	000f0300 	.word	0x000f0300
 8004cb4:	00100300 	.word	0x00100300
 8004cb8:	00110300 	.word	0x00110300
 8004cbc:	00120300 	.word	0x00120300
 8004cc0:	00130300 	.word	0x00130300
 8004cc4:	00140300 	.word	0x00140300
 8004cc8:	00150300 	.word	0x00150300
 8004ccc:	00160300 	.word	0x00160300
 8004cd0:	00170300 	.word	0x00170300
 8004cd4:	00180300 	.word	0x00180300
 8004cd8:	00190300 	.word	0x00190300
 8004cdc:	001a0300 	.word	0x001a0300
 8004ce0:	001b0300 	.word	0x001b0300
 8004ce4:	001c0300 	.word	0x001c0300
 8004ce8:	001d0300 	.word	0x001d0300
 8004cec:	001e0300 	.word	0x001e0300
 8004cf0:	001f0300 	.word	0x001f0300
 8004cf4:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cf8:	f7fc f914 	bl	8000f24 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e06c      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d0a:	4b38      	ldr	r3, [pc, #224]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d16:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d02f      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d028      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d34:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d44:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d4a:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d114      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fc f8e2 	bl	8000f24 <HAL_GetTick>
 8004d60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d62:	e00a      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fc f8de 	bl	8000f24 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e034      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0ee      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d92:	d10d      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004d94:	4b16      	ldr	r3, [pc, #88]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da8:	4911      	ldr	r1, [pc, #68]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
 8004dae:	e005      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4a0e      	ldr	r2, [pc, #56]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004db6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dba:	6093      	str	r3, [r2, #8]
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc8:	4909      	ldr	r1, [pc, #36]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	7d1a      	ldrb	r2, [r3, #20]
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004de0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40007000 	.word	0x40007000
 8004df0:	40023800 	.word	0x40023800
 8004df4:	42470e40 	.word	0x42470e40
 8004df8:	424711e0 	.word	0x424711e0

08004dfc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e0d6      	b.n	8004fbc <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d007      	beq.n	8004e26 <HAL_RTC_Init+0x2a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_RTC_Init+0x2a>
 8004e1e:	21ff      	movs	r1, #255	; 0xff
 8004e20:	4868      	ldr	r0, [pc, #416]	; (8004fc4 <HAL_RTC_Init+0x1c8>)
 8004e22:	f007 fd53 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e2c:	d904      	bls.n	8004e38 <HAL_RTC_Init+0x3c>
 8004e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e32:	4864      	ldr	r0, [pc, #400]	; (8004fc4 <HAL_RTC_Init+0x1c8>)
 8004e34:	f007 fd4a 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e40:	d304      	bcc.n	8004e4c <HAL_RTC_Init+0x50>
 8004e42:	f240 1101 	movw	r1, #257	; 0x101
 8004e46:	485f      	ldr	r0, [pc, #380]	; (8004fc4 <HAL_RTC_Init+0x1c8>)
 8004e48:	f007 fd40 	bl	800c8cc <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d013      	beq.n	8004e7c <HAL_RTC_Init+0x80>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e5c:	d00e      	beq.n	8004e7c <HAL_RTC_Init+0x80>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e66:	d009      	beq.n	8004e7c <HAL_RTC_Init+0x80>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e70:	d004      	beq.n	8004e7c <HAL_RTC_Init+0x80>
 8004e72:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004e76:	4853      	ldr	r0, [pc, #332]	; (8004fc4 <HAL_RTC_Init+0x1c8>)
 8004e78:	f007 fd28 	bl	800c8cc <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <HAL_RTC_Init+0x9c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8c:	d004      	beq.n	8004e98 <HAL_RTC_Init+0x9c>
 8004e8e:	f240 1103 	movw	r1, #259	; 0x103
 8004e92:	484c      	ldr	r0, [pc, #304]	; (8004fc4 <HAL_RTC_Init+0x1c8>)
 8004e94:	f007 fd1a 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <HAL_RTC_Init+0xb8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ea8:	d004      	beq.n	8004eb4 <HAL_RTC_Init+0xb8>
 8004eaa:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004eae:	4845      	ldr	r0, [pc, #276]	; (8004fc4 <HAL_RTC_Init+0x1c8>)
 8004eb0:	f007 fd0c 	bl	800c8cc <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7f5b      	ldrb	r3, [r3, #29]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d105      	bne.n	8004eca <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f007 fda7 	bl	800ca18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	22ca      	movs	r2, #202	; 0xca
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2253      	movs	r2, #83	; 0x53
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 ff01 	bl	8005ce8 <RTC_EnterInitMode>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	22ff      	movs	r2, #255	; 0xff
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e05e      	b.n	8004fbc <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f10:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6899      	ldr	r1, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	68d2      	ldr	r2, [r2, #12]
 8004f38:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6919      	ldr	r1, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	041a      	lsls	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10e      	bne.n	8004f8a <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fe93 	bl	8005c98 <HAL_RTC_WaitForSynchro>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	22ff      	movs	r2, #255	; 0xff
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2204      	movs	r2, #4
 8004f84:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e018      	b.n	8004fbc <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699a      	ldr	r2, [r3, #24]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	22ff      	movs	r2, #255	; 0xff
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004fba:	2300      	movs	r3, #0
  }
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	0800fa28 	.word	0x0800fa28

08004fc8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_RTC_SetTime+0x26>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d004      	beq.n	8004fee <HAL_RTC_SetTime+0x26>
 8004fe4:	f240 21da 	movw	r1, #730	; 0x2da
 8004fe8:	48a4      	ldr	r0, [pc, #656]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 8004fea:	f007 fc6f 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ff6:	d00d      	beq.n	8005014 <HAL_RTC_SetTime+0x4c>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005000:	d008      	beq.n	8005014 <HAL_RTC_SetTime+0x4c>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <HAL_RTC_SetTime+0x4c>
 800500a:	f240 21db 	movw	r1, #731	; 0x2db
 800500e:	489b      	ldr	r0, [pc, #620]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 8005010:	f007 fc5c 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <HAL_RTC_SetTime+0x68>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005024:	d004      	beq.n	8005030 <HAL_RTC_SetTime+0x68>
 8005026:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800502a:	4894      	ldr	r0, [pc, #592]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 800502c:	f007 fc4e 	bl	800c8cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	7f1b      	ldrb	r3, [r3, #28]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_RTC_SetTime+0x74>
 8005038:	2302      	movs	r3, #2
 800503a:	e12c      	b.n	8005296 <HAL_RTC_SetTime+0x2ce>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2202      	movs	r2, #2
 8005046:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d15c      	bne.n	8005108 <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01a      	beq.n	8005092 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_RTC_SetTime+0xa4>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b0c      	cmp	r3, #12
 800506a:	d904      	bls.n	8005076 <HAL_RTC_SetTime+0xae>
 800506c:	f240 21e7 	movw	r1, #743	; 0x2e7
 8005070:	4882      	ldr	r0, [pc, #520]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 8005072:	f007 fc2b 	bl	800c8cc <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	78db      	ldrb	r3, [r3, #3]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d015      	beq.n	80050aa <HAL_RTC_SetTime+0xe2>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	78db      	ldrb	r3, [r3, #3]
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d011      	beq.n	80050aa <HAL_RTC_SetTime+0xe2>
 8005086:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 800508a:	487c      	ldr	r0, [pc, #496]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 800508c:	f007 fc1e 	bl	800c8cc <assert_failed>
 8005090:	e00b      	b.n	80050aa <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b17      	cmp	r3, #23
 800509e:	d904      	bls.n	80050aa <HAL_RTC_SetTime+0xe2>
 80050a0:	f240 21ed 	movw	r1, #749	; 0x2ed
 80050a4:	4875      	ldr	r0, [pc, #468]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 80050a6:	f007 fc11 	bl	800c8cc <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	2b3b      	cmp	r3, #59	; 0x3b
 80050b0:	d904      	bls.n	80050bc <HAL_RTC_SetTime+0xf4>
 80050b2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80050b6:	4871      	ldr	r0, [pc, #452]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 80050b8:	f007 fc08 	bl	800c8cc <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	789b      	ldrb	r3, [r3, #2]
 80050c0:	2b3b      	cmp	r3, #59	; 0x3b
 80050c2:	d904      	bls.n	80050ce <HAL_RTC_SetTime+0x106>
 80050c4:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80050c8:	486c      	ldr	r0, [pc, #432]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 80050ca:	f007 fbff 	bl	800c8cc <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fe34 	bl	8005d40 <RTC_ByteToBcd2>
 80050d8:	4603      	mov	r3, r0
 80050da:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fe2d 	bl	8005d40 <RTC_ByteToBcd2>
 80050e6:	4603      	mov	r3, r0
 80050e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050ea:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	789b      	ldrb	r3, [r3, #2]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fe25 	bl	8005d40 <RTC_ByteToBcd2>
 80050f6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80050f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	78db      	ldrb	r3, [r3, #3]
 8005100:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e062      	b.n	80051ce <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d022      	beq.n	800515c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fe2e 	bl	8005d7c <RTC_Bcd2ToByte>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_RTC_SetTime+0x16e>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fe26 	bl	8005d7c <RTC_Bcd2ToByte>
 8005130:	4603      	mov	r3, r0
 8005132:	2b0c      	cmp	r3, #12
 8005134:	d904      	bls.n	8005140 <HAL_RTC_SetTime+0x178>
 8005136:	f240 21fb 	movw	r1, #763	; 0x2fb
 800513a:	4850      	ldr	r0, [pc, #320]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 800513c:	f007 fbc6 	bl	800c8cc <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d019      	beq.n	800517c <HAL_RTC_SetTime+0x1b4>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	78db      	ldrb	r3, [r3, #3]
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d015      	beq.n	800517c <HAL_RTC_SetTime+0x1b4>
 8005150:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8005154:	4849      	ldr	r0, [pc, #292]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 8005156:	f007 fbb9 	bl	800c8cc <assert_failed>
 800515a:	e00f      	b.n	800517c <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2200      	movs	r2, #0
 8005160:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fe08 	bl	8005d7c <RTC_Bcd2ToByte>
 800516c:	4603      	mov	r3, r0
 800516e:	2b17      	cmp	r3, #23
 8005170:	d904      	bls.n	800517c <HAL_RTC_SetTime+0x1b4>
 8005172:	f240 3101 	movw	r1, #769	; 0x301
 8005176:	4841      	ldr	r0, [pc, #260]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 8005178:	f007 fba8 	bl	800c8cc <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fdfb 	bl	8005d7c <RTC_Bcd2ToByte>
 8005186:	4603      	mov	r3, r0
 8005188:	2b3b      	cmp	r3, #59	; 0x3b
 800518a:	d904      	bls.n	8005196 <HAL_RTC_SetTime+0x1ce>
 800518c:	f240 3103 	movw	r1, #771	; 0x303
 8005190:	483a      	ldr	r0, [pc, #232]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 8005192:	f007 fb9b 	bl	800c8cc <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	789b      	ldrb	r3, [r3, #2]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fdee 	bl	8005d7c <RTC_Bcd2ToByte>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b3b      	cmp	r3, #59	; 0x3b
 80051a4:	d904      	bls.n	80051b0 <HAL_RTC_SetTime+0x1e8>
 80051a6:	f44f 7141 	mov.w	r1, #772	; 0x304
 80051aa:	4834      	ldr	r0, [pc, #208]	; (800527c <HAL_RTC_SetTime+0x2b4>)
 80051ac:	f007 fb8e 	bl	800c8cc <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80051bc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80051c2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	78db      	ldrb	r3, [r3, #3]
 80051c8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	22ca      	movs	r2, #202	; 0xca
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2253      	movs	r2, #83	; 0x53
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fd82 	bl	8005ce8 <RTC_EnterInitMode>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	22ff      	movs	r2, #255	; 0xff
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2204      	movs	r2, #4
 80051f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e049      	b.n	8005296 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800520c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005210:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005220:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6899      	ldr	r1, [r3, #8]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	431a      	orrs	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005248:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d113      	bne.n	8005280 <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fd1d 	bl	8005c98 <HAL_RTC_WaitForSynchro>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	22ff      	movs	r2, #255	; 0xff
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2204      	movs	r2, #4
 8005270:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e00c      	b.n	8005296 <HAL_RTC_SetTime+0x2ce>
 800527c:	0800fa28 	.word	0x0800fa28
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	22ff      	movs	r2, #255	; 0xff
 8005286:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005294:	2300      	movs	r3, #0
  }
}
 8005296:	4618      	mov	r0, r3
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	bd90      	pop	{r4, r7, pc}
 800529e:	bf00      	nop

080052a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_RTC_SetDate+0x26>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d004      	beq.n	80052c6 <HAL_RTC_SetDate+0x26>
 80052bc:	f240 318a 	movw	r1, #906	; 0x38a
 80052c0:	488e      	ldr	r0, [pc, #568]	; (80054fc <HAL_RTC_SetDate+0x25c>)
 80052c2:	f007 fb03 	bl	800c8cc <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	7f1b      	ldrb	r3, [r3, #28]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_RTC_SetDate+0x32>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e10f      	b.n	80054f2 <HAL_RTC_SetDate+0x252>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2202      	movs	r2, #2
 80052dc:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10e      	bne.n	8005302 <HAL_RTC_SetDate+0x62>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	f023 0310 	bic.w	r3, r3, #16
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	330a      	adds	r3, #10
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d01c      	beq.n	8005344 <HAL_RTC_SetDate+0xa4>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d018      	beq.n	8005344 <HAL_RTC_SetDate+0xa4>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b03      	cmp	r3, #3
 8005318:	d014      	beq.n	8005344 <HAL_RTC_SetDate+0xa4>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b04      	cmp	r3, #4
 8005320:	d010      	beq.n	8005344 <HAL_RTC_SetDate+0xa4>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b05      	cmp	r3, #5
 8005328:	d00c      	beq.n	8005344 <HAL_RTC_SetDate+0xa4>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b06      	cmp	r3, #6
 8005330:	d008      	beq.n	8005344 <HAL_RTC_SetDate+0xa4>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b07      	cmp	r3, #7
 8005338:	d004      	beq.n	8005344 <HAL_RTC_SetDate+0xa4>
 800533a:	f240 3196 	movw	r1, #918	; 0x396
 800533e:	486f      	ldr	r0, [pc, #444]	; (80054fc <HAL_RTC_SetDate+0x25c>)
 8005340:	f007 fac4 	bl	800c8cc <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d13f      	bne.n	80053ca <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	78db      	ldrb	r3, [r3, #3]
 800534e:	2b63      	cmp	r3, #99	; 0x63
 8005350:	d904      	bls.n	800535c <HAL_RTC_SetDate+0xbc>
 8005352:	f240 319a 	movw	r1, #922	; 0x39a
 8005356:	4869      	ldr	r0, [pc, #420]	; (80054fc <HAL_RTC_SetDate+0x25c>)
 8005358:	f007 fab8 	bl	800c8cc <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	785b      	ldrb	r3, [r3, #1]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_RTC_SetDate+0xcc>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d904      	bls.n	8005376 <HAL_RTC_SetDate+0xd6>
 800536c:	f240 319b 	movw	r1, #923	; 0x39b
 8005370:	4862      	ldr	r0, [pc, #392]	; (80054fc <HAL_RTC_SetDate+0x25c>)
 8005372:	f007 faab 	bl	800c8cc <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	789b      	ldrb	r3, [r3, #2]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_RTC_SetDate+0xe6>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	789b      	ldrb	r3, [r3, #2]
 8005382:	2b1f      	cmp	r3, #31
 8005384:	d904      	bls.n	8005390 <HAL_RTC_SetDate+0xf0>
 8005386:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800538a:	485c      	ldr	r0, [pc, #368]	; (80054fc <HAL_RTC_SetDate+0x25c>)
 800538c:	f007 fa9e 	bl	800c8cc <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fcd3 	bl	8005d40 <RTC_ByteToBcd2>
 800539a:	4603      	mov	r3, r0
 800539c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	785b      	ldrb	r3, [r3, #1]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fccc 	bl	8005d40 <RTC_ByteToBcd2>
 80053a8:	4603      	mov	r3, r0
 80053aa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80053ac:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	789b      	ldrb	r3, [r3, #2]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fcc4 	bl	8005d40 <RTC_ByteToBcd2>
 80053b8:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80053ba:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e045      	b.n	8005456 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	78db      	ldrb	r3, [r3, #3]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fcd4 	bl	8005d7c <RTC_Bcd2ToByte>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b63      	cmp	r3, #99	; 0x63
 80053d8:	d904      	bls.n	80053e4 <HAL_RTC_SetDate+0x144>
 80053da:	f240 31a5 	movw	r1, #933	; 0x3a5
 80053de:	4847      	ldr	r0, [pc, #284]	; (80054fc <HAL_RTC_SetDate+0x25c>)
 80053e0:	f007 fa74 	bl	800c8cc <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fcc7 	bl	8005d7c <RTC_Bcd2ToByte>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <HAL_RTC_SetDate+0x164>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fcbf 	bl	8005d7c <RTC_Bcd2ToByte>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b0c      	cmp	r3, #12
 8005402:	d904      	bls.n	800540e <HAL_RTC_SetDate+0x16e>
 8005404:	f240 31a6 	movw	r1, #934	; 0x3a6
 8005408:	483c      	ldr	r0, [pc, #240]	; (80054fc <HAL_RTC_SetDate+0x25c>)
 800540a:	f007 fa5f 	bl	800c8cc <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	789b      	ldrb	r3, [r3, #2]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fcb2 	bl	8005d7c <RTC_Bcd2ToByte>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <HAL_RTC_SetDate+0x18e>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	789b      	ldrb	r3, [r3, #2]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fcaa 	bl	8005d7c <RTC_Bcd2ToByte>
 8005428:	4603      	mov	r3, r0
 800542a:	2b1f      	cmp	r3, #31
 800542c:	d904      	bls.n	8005438 <HAL_RTC_SetDate+0x198>
 800542e:	f240 31a7 	movw	r1, #935	; 0x3a7
 8005432:	4832      	ldr	r0, [pc, #200]	; (80054fc <HAL_RTC_SetDate+0x25c>)
 8005434:	f007 fa4a 	bl	800c8cc <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	78db      	ldrb	r3, [r3, #3]
 800543c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005444:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800544a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	22ca      	movs	r2, #202	; 0xca
 800545c:	625a      	str	r2, [r3, #36]	; 0x24
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2253      	movs	r2, #83	; 0x53
 8005464:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fc3e 	bl	8005ce8 <RTC_EnterInitMode>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	22ff      	movs	r2, #255	; 0xff
 8005478:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2204      	movs	r2, #4
 800547e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e033      	b.n	80054f2 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005494:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005498:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d111      	bne.n	80054dc <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fbed 	bl	8005c98 <HAL_RTC_WaitForSynchro>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00b      	beq.n	80054dc <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	22ff      	movs	r2, #255	; 0xff
 80054ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2204      	movs	r2, #4
 80054d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e00a      	b.n	80054f2 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	22ff      	movs	r2, #255	; 0xff
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80054f0:	2300      	movs	r3, #0
  }
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd90      	pop	{r4, r7, pc}
 80054fa:	bf00      	nop
 80054fc:	0800fa28 	.word	0x0800fa28

08005500 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b089      	sub	sp, #36	; 0x24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005514:	4baa      	ldr	r3, [pc, #680]	; (80057c0 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4aaa      	ldr	r2, [pc, #680]	; (80057c4 <HAL_RTC_SetAlarm_IT+0x2c4>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	0adb      	lsrs	r3, r3, #11
 8005520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <HAL_RTC_SetAlarm_IT+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d004      	beq.n	8005540 <HAL_RTC_SetAlarm_IT+0x40>
 8005536:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800553a:	48a3      	ldr	r0, [pc, #652]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800553c:	f007 f9c6 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005548:	d009      	beq.n	800555e <HAL_RTC_SetAlarm_IT+0x5e>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005552:	d004      	beq.n	800555e <HAL_RTC_SetAlarm_IT+0x5e>
 8005554:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 8005558:	489b      	ldr	r0, [pc, #620]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800555a:	f007 f9b7 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <HAL_RTC_SetAlarm_IT+0x74>
 800556a:	f240 41e9 	movw	r1, #1257	; 0x4e9
 800556e:	4896      	ldr	r0, [pc, #600]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005570:	f007 f9ac 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <HAL_RTC_SetAlarm_IT+0x90>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005584:	d004      	beq.n	8005590 <HAL_RTC_SetAlarm_IT+0x90>
 8005586:	f240 41ea 	movw	r1, #1258	; 0x4ea
 800558a:	488f      	ldr	r0, [pc, #572]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800558c:	f007 f99e 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005598:	d304      	bcc.n	80055a4 <HAL_RTC_SetAlarm_IT+0xa4>
 800559a:	f240 41eb 	movw	r1, #1259	; 0x4eb
 800559e:	488a      	ldr	r0, [pc, #552]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80055a0:	f007 f994 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d04f      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055b4:	d04a      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055be:	d045      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055c8:	d040      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055d2:	d03b      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80055dc:	d036      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80055e6:	d031      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80055f0:	d02c      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055fa:	d027      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8005604:	d022      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800560e:	d01d      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8005618:	d018      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005622:	d013      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800562c:	d00e      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005636:	d009      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005640:	d004      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x14c>
 8005642:	f240 41ec 	movw	r1, #1260	; 0x4ec
 8005646:	4860      	ldr	r0, [pc, #384]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005648:	f007 f940 	bl	800c8cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	7f1b      	ldrb	r3, [r3, #28]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_RTC_SetAlarm_IT+0x158>
 8005654:	2302      	movs	r3, #2
 8005656:	e237      	b.n	8005ac8 <HAL_RTC_SetAlarm_IT+0x5c8>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2202      	movs	r2, #2
 8005662:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f040 80b0 	bne.w	80057cc <HAL_RTC_SetAlarm_IT+0x2cc>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01a      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_RTC_SetAlarm_IT+0x18a>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b0c      	cmp	r3, #12
 8005688:	d904      	bls.n	8005694 <HAL_RTC_SetAlarm_IT+0x194>
 800568a:	f240 41f7 	movw	r1, #1271	; 0x4f7
 800568e:	484e      	ldr	r0, [pc, #312]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005690:	f007 f91c 	bl	800c8cc <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	78db      	ldrb	r3, [r3, #3]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d015      	beq.n	80056c8 <HAL_RTC_SetAlarm_IT+0x1c8>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	78db      	ldrb	r3, [r3, #3]
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	d011      	beq.n	80056c8 <HAL_RTC_SetAlarm_IT+0x1c8>
 80056a4:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 80056a8:	4847      	ldr	r0, [pc, #284]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80056aa:	f007 f90f 	bl	800c8cc <assert_failed>
 80056ae:	e00b      	b.n	80056c8 <HAL_RTC_SetAlarm_IT+0x1c8>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2200      	movs	r2, #0
 80056b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b17      	cmp	r3, #23
 80056bc:	d904      	bls.n	80056c8 <HAL_RTC_SetAlarm_IT+0x1c8>
 80056be:	f240 41fd 	movw	r1, #1277	; 0x4fd
 80056c2:	4841      	ldr	r0, [pc, #260]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80056c4:	f007 f902 	bl	800c8cc <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2b3b      	cmp	r3, #59	; 0x3b
 80056ce:	d904      	bls.n	80056da <HAL_RTC_SetAlarm_IT+0x1da>
 80056d0:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80056d4:	483c      	ldr	r0, [pc, #240]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80056d6:	f007 f8f9 	bl	800c8cc <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	789b      	ldrb	r3, [r3, #2]
 80056de:	2b3b      	cmp	r3, #59	; 0x3b
 80056e0:	d904      	bls.n	80056ec <HAL_RTC_SetAlarm_IT+0x1ec>
 80056e2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80056e6:	4838      	ldr	r0, [pc, #224]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80056e8:	f007 f8f0 	bl	800c8cc <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10f      	bne.n	8005714 <HAL_RTC_SetAlarm_IT+0x214>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <HAL_RTC_SetAlarm_IT+0x208>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005704:	2b1f      	cmp	r3, #31
 8005706:	d92d      	bls.n	8005764 <HAL_RTC_SetAlarm_IT+0x264>
 8005708:	f240 5104 	movw	r1, #1284	; 0x504
 800570c:	482e      	ldr	r0, [pc, #184]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800570e:	f007 f8dd 	bl	800c8cc <assert_failed>
 8005712:	e027      	b.n	8005764 <HAL_RTC_SetAlarm_IT+0x264>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d022      	beq.n	8005764 <HAL_RTC_SetAlarm_IT+0x264>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d01d      	beq.n	8005764 <HAL_RTC_SetAlarm_IT+0x264>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d018      	beq.n	8005764 <HAL_RTC_SetAlarm_IT+0x264>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005738:	2b04      	cmp	r3, #4
 800573a:	d013      	beq.n	8005764 <HAL_RTC_SetAlarm_IT+0x264>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005742:	2b05      	cmp	r3, #5
 8005744:	d00e      	beq.n	8005764 <HAL_RTC_SetAlarm_IT+0x264>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800574c:	2b06      	cmp	r3, #6
 800574e:	d009      	beq.n	8005764 <HAL_RTC_SetAlarm_IT+0x264>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005756:	2b07      	cmp	r3, #7
 8005758:	d004      	beq.n	8005764 <HAL_RTC_SetAlarm_IT+0x264>
 800575a:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 800575e:	481a      	ldr	r0, [pc, #104]	; (80057c8 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005760:	f007 f8b4 	bl	800c8cc <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fae9 	bl	8005d40 <RTC_ByteToBcd2>
 800576e:	4603      	mov	r3, r0
 8005770:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	785b      	ldrb	r3, [r3, #1]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fae2 	bl	8005d40 <RTC_ByteToBcd2>
 800577c:	4603      	mov	r3, r0
 800577e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005780:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	789b      	ldrb	r3, [r3, #2]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fada 	bl	8005d40 <RTC_ByteToBcd2>
 800578c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800578e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	78db      	ldrb	r3, [r3, #3]
 8005796:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005798:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 facc 	bl	8005d40 <RTC_ByteToBcd2>
 80057a8:	4603      	mov	r3, r0
 80057aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80057ac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80057b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057ba:	4313      	orrs	r3, r2
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	e0d3      	b.n	8005968 <HAL_RTC_SetAlarm_IT+0x468>
 80057c0:	20000090 	.word	0x20000090
 80057c4:	10624dd3 	.word	0x10624dd3
 80057c8:	0800fa28 	.word	0x0800fa28
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d022      	beq.n	8005820 <HAL_RTC_SetAlarm_IT+0x320>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 facc 	bl	8005d7c <RTC_Bcd2ToByte>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <HAL_RTC_SetAlarm_IT+0x2fa>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fac4 	bl	8005d7c <RTC_Bcd2ToByte>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d904      	bls.n	8005804 <HAL_RTC_SetAlarm_IT+0x304>
 80057fa:	f240 5116 	movw	r1, #1302	; 0x516
 80057fe:	4896      	ldr	r0, [pc, #600]	; (8005a58 <HAL_RTC_SetAlarm_IT+0x558>)
 8005800:	f007 f864 	bl	800c8cc <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d019      	beq.n	8005840 <HAL_RTC_SetAlarm_IT+0x340>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	78db      	ldrb	r3, [r3, #3]
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d015      	beq.n	8005840 <HAL_RTC_SetAlarm_IT+0x340>
 8005814:	f240 5117 	movw	r1, #1303	; 0x517
 8005818:	488f      	ldr	r0, [pc, #572]	; (8005a58 <HAL_RTC_SetAlarm_IT+0x558>)
 800581a:	f007 f857 	bl	800c8cc <assert_failed>
 800581e:	e00f      	b.n	8005840 <HAL_RTC_SetAlarm_IT+0x340>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 faa6 	bl	8005d7c <RTC_Bcd2ToByte>
 8005830:	4603      	mov	r3, r0
 8005832:	2b17      	cmp	r3, #23
 8005834:	d904      	bls.n	8005840 <HAL_RTC_SetAlarm_IT+0x340>
 8005836:	f240 511c 	movw	r1, #1308	; 0x51c
 800583a:	4887      	ldr	r0, [pc, #540]	; (8005a58 <HAL_RTC_SetAlarm_IT+0x558>)
 800583c:	f007 f846 	bl	800c8cc <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fa99 	bl	8005d7c <RTC_Bcd2ToByte>
 800584a:	4603      	mov	r3, r0
 800584c:	2b3b      	cmp	r3, #59	; 0x3b
 800584e:	d904      	bls.n	800585a <HAL_RTC_SetAlarm_IT+0x35a>
 8005850:	f240 511f 	movw	r1, #1311	; 0x51f
 8005854:	4880      	ldr	r0, [pc, #512]	; (8005a58 <HAL_RTC_SetAlarm_IT+0x558>)
 8005856:	f007 f839 	bl	800c8cc <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	789b      	ldrb	r3, [r3, #2]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fa8c 	bl	8005d7c <RTC_Bcd2ToByte>
 8005864:	4603      	mov	r3, r0
 8005866:	2b3b      	cmp	r3, #59	; 0x3b
 8005868:	d904      	bls.n	8005874 <HAL_RTC_SetAlarm_IT+0x374>
 800586a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800586e:	487a      	ldr	r0, [pc, #488]	; (8005a58 <HAL_RTC_SetAlarm_IT+0x558>)
 8005870:	f007 f82c 	bl	800c8cc <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d117      	bne.n	80058ac <HAL_RTC_SetAlarm_IT+0x3ac>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fa7a 	bl	8005d7c <RTC_Bcd2ToByte>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <HAL_RTC_SetAlarm_IT+0x3a0>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fa71 	bl	8005d7c <RTC_Bcd2ToByte>
 800589a:	4603      	mov	r3, r0
 800589c:	2b1f      	cmp	r3, #31
 800589e:	d949      	bls.n	8005934 <HAL_RTC_SetAlarm_IT+0x434>
 80058a0:	f240 5124 	movw	r1, #1316	; 0x524
 80058a4:	486c      	ldr	r0, [pc, #432]	; (8005a58 <HAL_RTC_SetAlarm_IT+0x558>)
 80058a6:	f007 f811 	bl	800c8cc <assert_failed>
 80058aa:	e043      	b.n	8005934 <HAL_RTC_SetAlarm_IT+0x434>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fa62 	bl	8005d7c <RTC_Bcd2ToByte>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d03a      	beq.n	8005934 <HAL_RTC_SetAlarm_IT+0x434>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fa59 	bl	8005d7c <RTC_Bcd2ToByte>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d031      	beq.n	8005934 <HAL_RTC_SetAlarm_IT+0x434>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fa50 	bl	8005d7c <RTC_Bcd2ToByte>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d028      	beq.n	8005934 <HAL_RTC_SetAlarm_IT+0x434>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fa47 	bl	8005d7c <RTC_Bcd2ToByte>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d01f      	beq.n	8005934 <HAL_RTC_SetAlarm_IT+0x434>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fa3e 	bl	8005d7c <RTC_Bcd2ToByte>
 8005900:	4603      	mov	r3, r0
 8005902:	2b05      	cmp	r3, #5
 8005904:	d016      	beq.n	8005934 <HAL_RTC_SetAlarm_IT+0x434>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fa35 	bl	8005d7c <RTC_Bcd2ToByte>
 8005912:	4603      	mov	r3, r0
 8005914:	2b06      	cmp	r3, #6
 8005916:	d00d      	beq.n	8005934 <HAL_RTC_SetAlarm_IT+0x434>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fa2c 	bl	8005d7c <RTC_Bcd2ToByte>
 8005924:	4603      	mov	r3, r0
 8005926:	2b07      	cmp	r3, #7
 8005928:	d004      	beq.n	8005934 <HAL_RTC_SetAlarm_IT+0x434>
 800592a:	f44f 61a5 	mov.w	r1, #1320	; 0x528
 800592e:	484a      	ldr	r0, [pc, #296]	; (8005a58 <HAL_RTC_SetAlarm_IT+0x558>)
 8005930:	f006 ffcc 	bl	800c8cc <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005940:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005946:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	78db      	ldrb	r3, [r3, #3]
 800594c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800594e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005956:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005958:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800595e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005964:	4313      	orrs	r3, r2
 8005966:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	22ca      	movs	r2, #202	; 0xca
 800597a:	625a      	str	r2, [r3, #36]	; 0x24
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2253      	movs	r2, #83	; 0x53
 8005982:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598c:	d141      	bne.n	8005a12 <HAL_RTC_SetAlarm_IT+0x512>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800599c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80059ae:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	1e5a      	subs	r2, r3, #1
 80059b4:	617a      	str	r2, [r7, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <HAL_RTC_SetAlarm_IT+0x4d2>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	22ff      	movs	r2, #255	; 0xff
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2203      	movs	r2, #3
 80059c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e07a      	b.n	8005ac8 <HAL_RTC_SetAlarm_IT+0x5c8>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0e7      	beq.n	80059b0 <HAL_RTC_SetAlarm_IT+0x4b0>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059fe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	e043      	b.n	8005a9a <HAL_RTC_SetAlarm_IT+0x59a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a20:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005a32:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	1e5a      	subs	r2, r3, #1
 8005a38:	617a      	str	r2, [r7, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10e      	bne.n	8005a5c <HAL_RTC_SetAlarm_IT+0x55c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	22ff      	movs	r2, #255	; 0xff
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2203      	movs	r2, #3
 8005a4a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e038      	b.n	8005ac8 <HAL_RTC_SetAlarm_IT+0x5c8>
 8005a56:	bf00      	nop
 8005a58:	0800fa28 	.word	0x0800fa28
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0e4      	beq.n	8005a34 <HAL_RTC_SetAlarm_IT+0x534>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a88:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a98:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a0c      	ldr	r2, [pc, #48]	; (8005ad0 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa4:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	22ff      	movs	r2, #255	; 0xff
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3724      	adds	r7, #36	; 0x24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd90      	pop	{r4, r7, pc}
 8005ad0:	40013c00 	.word	0x40013c00

08005ad4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae8:	d008      	beq.n	8005afc <HAL_RTC_DeactivateAlarm+0x28>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af0:	d004      	beq.n	8005afc <HAL_RTC_DeactivateAlarm+0x28>
 8005af2:	f240 519d 	movw	r1, #1437	; 0x59d
 8005af6:	4844      	ldr	r0, [pc, #272]	; (8005c08 <HAL_RTC_DeactivateAlarm+0x134>)
 8005af8:	f006 fee8 	bl	800c8cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	7f1b      	ldrb	r3, [r3, #28]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_RTC_DeactivateAlarm+0x34>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e07b      	b.n	8005c00 <HAL_RTC_DeactivateAlarm+0x12c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2202      	movs	r2, #2
 8005b12:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	22ca      	movs	r2, #202	; 0xca
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2253      	movs	r2, #83	; 0x53
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2a:	d12f      	bne.n	8005b8c <HAL_RTC_DeactivateAlarm+0xb8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b3a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b4a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b4c:	f7fb f9ea 	bl	8000f24 <HAL_GetTick>
 8005b50:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005b52:	e013      	b.n	8005b7c <HAL_RTC_DeactivateAlarm+0xa8>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b54:	f7fb f9e6 	bl	8000f24 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b62:	d90b      	bls.n	8005b7c <HAL_RTC_DeactivateAlarm+0xa8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	22ff      	movs	r2, #255	; 0xff
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2203      	movs	r2, #3
 8005b70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e041      	b.n	8005c00 <HAL_RTC_DeactivateAlarm+0x12c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0e4      	beq.n	8005b54 <HAL_RTC_DeactivateAlarm+0x80>
 8005b8a:	e02e      	b.n	8005bea <HAL_RTC_DeactivateAlarm+0x116>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b9a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005baa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bac:	f7fb f9ba 	bl	8000f24 <HAL_GetTick>
 8005bb0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005bb2:	e013      	b.n	8005bdc <HAL_RTC_DeactivateAlarm+0x108>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bb4:	f7fb f9b6 	bl	8000f24 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bc2:	d90b      	bls.n	8005bdc <HAL_RTC_DeactivateAlarm+0x108>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	22ff      	movs	r2, #255	; 0xff
 8005bca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2203      	movs	r2, #3
 8005bd0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e011      	b.n	8005c00 <HAL_RTC_DeactivateAlarm+0x12c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0e4      	beq.n	8005bb4 <HAL_RTC_DeactivateAlarm+0xe0>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	0800fa28 	.word	0x0800fa28

08005c0c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d012      	beq.n	8005c48 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f007 f9eb 	bl	800d00c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005c46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d012      	beq.n	8005c7c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa0d 	bl	8006084 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005c7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c82:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	775a      	strb	r2, [r3, #29]
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40013c00 	.word	0x40013c00

08005c98 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cb2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cb4:	f7fb f936 	bl	8000f24 <HAL_GetTick>
 8005cb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005cba:	e009      	b.n	8005cd0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cbc:	f7fb f932 	bl	8000f24 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cca:	d901      	bls.n	8005cd0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e007      	b.n	8005ce0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0ee      	beq.n	8005cbc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d119      	bne.n	8005d36 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0c:	f7fb f90a 	bl	8000f24 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d12:	e009      	b.n	8005d28 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d14:	f7fb f906 	bl	8000f24 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d22:	d901      	bls.n	8005d28 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e007      	b.n	8005d38 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0ee      	beq.n	8005d14 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005d4e:	e005      	b.n	8005d5c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	3b0a      	subs	r3, #10
 8005d5a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	2b09      	cmp	r3, #9
 8005d60:	d8f6      	bhi.n	8005d50 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	b2db      	uxtb	r3, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	4413      	add	r3, r2
 8005daa:	b2db      	uxtb	r3, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d013      	beq.n	8005df2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d010      	beq.n	8005df2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d00d      	beq.n	8005df2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d00a      	beq.n	8005df2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d007      	beq.n	8005df2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b06      	cmp	r3, #6
 8005de6:	d004      	beq.n	8005df2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005de8:	f240 314d 	movw	r1, #845	; 0x34d
 8005dec:	485e      	ldr	r0, [pc, #376]	; (8005f68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 8005dee:	f006 fd6d 	bl	800c8cc <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d304      	bcc.n	8005e04 <HAL_RTCEx_SetWakeUpTimer_IT+0x4c>
 8005dfa:	f240 314e 	movw	r1, #846	; 0x34e
 8005dfe:	485a      	ldr	r0, [pc, #360]	; (8005f68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 8005e00:	f006 fd64 	bl	800c8cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	7f1b      	ldrb	r3, [r3, #28]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e0a6      	b.n	8005f5e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	22ca      	movs	r2, #202	; 0xca
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2253      	movs	r2, #83	; 0x53
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d022      	beq.n	8005e80 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005e3a:	4b4c      	ldr	r3, [pc, #304]	; (8005f6c <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a4c      	ldr	r2, [pc, #304]	; (8005f70 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 8005e40:	fba2 2303 	umull	r2, r3, r2, r3
 8005e44:	0adb      	lsrs	r3, r3, #11
 8005e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	1e5a      	subs	r2, r3, #1
 8005e54:	617a      	str	r2, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	22ff      	movs	r2, #255	; 0xff
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2203      	movs	r2, #3
 8005e66:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e075      	b.n	8005f5e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e7      	bne.n	8005e50 <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005e90:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a36      	ldr	r2, [pc, #216]	; (8005f70 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	0adb      	lsrs	r3, r3, #11
 8005e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	1e5a      	subs	r2, r3, #1
 8005eaa:	617a      	str	r2, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10b      	bne.n	8005ec8 <HAL_RTCEx_SetWakeUpTimer_IT+0x110>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	22ff      	movs	r2, #255	; 0xff
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2203      	movs	r2, #3
 8005ebc:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e04a      	b.n	8005f5e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0e7      	beq.n	8005ea6 <HAL_RTCEx_SetWakeUpTimer_IT+0xee>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0207 	bic.w	r2, r2, #7
 8005eec:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6899      	ldr	r1, [r3, #8]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005efe:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f08:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8005f0a:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f14:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005f26:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f36:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f46:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	22ff      	movs	r2, #255	; 0xff
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2201      	movs	r2, #1
 8005f54:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	0800fa60 	.word	0x0800fa60
 8005f6c:	20000090 	.word	0x20000090
 8005f70:	10624dd3 	.word	0x10624dd3
 8005f74:	40013c00 	.word	0x40013c00

08005f78 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	7f1b      	ldrb	r3, [r3, #28]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e047      	b.n	8006020 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	22ca      	movs	r2, #202	; 0xca
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2253      	movs	r2, #83	; 0x53
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fba:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fca:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fcc:	f7fa ffaa 	bl	8000f24 <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005fd2:	e013      	b.n	8005ffc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005fd4:	f7fa ffa6 	bl	8000f24 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe2:	d90b      	bls.n	8005ffc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2203      	movs	r2, #3
 8005ff0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e011      	b.n	8006020 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0e4      	beq.n	8005fd4 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	22ff      	movs	r2, #255	; 0xff
 8006010:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f816 	bl	8006070 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	b2da      	uxtb	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006054:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8006058:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800605c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	775a      	strb	r2, [r3, #29]
}
 8006064:	bf00      	nop
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40013c00 	.word	0x40013c00

08006070 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e083      	b.n	80061b2 <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a43      	ldr	r2, [pc, #268]	; (80061bc <HAL_TIM_Base_Init+0x124>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d027      	beq.n	8006104 <HAL_TIM_Base_Init+0x6c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060bc:	d022      	beq.n	8006104 <HAL_TIM_Base_Init+0x6c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3f      	ldr	r2, [pc, #252]	; (80061c0 <HAL_TIM_Base_Init+0x128>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d01d      	beq.n	8006104 <HAL_TIM_Base_Init+0x6c>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a3d      	ldr	r2, [pc, #244]	; (80061c4 <HAL_TIM_Base_Init+0x12c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <HAL_TIM_Base_Init+0x6c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a3c      	ldr	r2, [pc, #240]	; (80061c8 <HAL_TIM_Base_Init+0x130>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <HAL_TIM_Base_Init+0x6c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a3a      	ldr	r2, [pc, #232]	; (80061cc <HAL_TIM_Base_Init+0x134>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_TIM_Base_Init+0x6c>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a39      	ldr	r2, [pc, #228]	; (80061d0 <HAL_TIM_Base_Init+0x138>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_TIM_Base_Init+0x6c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a37      	ldr	r2, [pc, #220]	; (80061d4 <HAL_TIM_Base_Init+0x13c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIM_Base_Init+0x6c>
 80060fa:	f44f 7189 	mov.w	r1, #274	; 0x112
 80060fe:	4836      	ldr	r0, [pc, #216]	; (80061d8 <HAL_TIM_Base_Init+0x140>)
 8006100:	f006 fbe4 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d014      	beq.n	8006136 <HAL_TIM_Base_Init+0x9e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b10      	cmp	r3, #16
 8006112:	d010      	beq.n	8006136 <HAL_TIM_Base_Init+0x9e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b20      	cmp	r3, #32
 800611a:	d00c      	beq.n	8006136 <HAL_TIM_Base_Init+0x9e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d008      	beq.n	8006136 <HAL_TIM_Base_Init+0x9e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b60      	cmp	r3, #96	; 0x60
 800612a:	d004      	beq.n	8006136 <HAL_TIM_Base_Init+0x9e>
 800612c:	f240 1113 	movw	r1, #275	; 0x113
 8006130:	4829      	ldr	r0, [pc, #164]	; (80061d8 <HAL_TIM_Base_Init+0x140>)
 8006132:	f006 fbcb 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00e      	beq.n	800615c <HAL_TIM_Base_Init+0xc4>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006146:	d009      	beq.n	800615c <HAL_TIM_Base_Init+0xc4>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006150:	d004      	beq.n	800615c <HAL_TIM_Base_Init+0xc4>
 8006152:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006156:	4820      	ldr	r0, [pc, #128]	; (80061d8 <HAL_TIM_Base_Init+0x140>)
 8006158:	f006 fbb8 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_TIM_Base_Init+0xde>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b80      	cmp	r3, #128	; 0x80
 800616a:	d004      	beq.n	8006176 <HAL_TIM_Base_Init+0xde>
 800616c:	f240 1115 	movw	r1, #277	; 0x115
 8006170:	4819      	ldr	r0, [pc, #100]	; (80061d8 <HAL_TIM_Base_Init+0x140>)
 8006172:	f006 fbab 	bl	800c8cc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f006 ffd8 	bl	800d140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f001 f87c 	bl	80072a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40000400 	.word	0x40000400
 80061c4:	40000800 	.word	0x40000800
 80061c8:	40000c00 	.word	0x40000c00
 80061cc:	40014000 	.word	0x40014000
 80061d0:	40014400 	.word	0x40014400
 80061d4:	40014800 	.word	0x40014800
 80061d8:	0800fa9c 	.word	0x0800fa9c

080061dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a24      	ldr	r2, [pc, #144]	; (800627c <HAL_TIM_Base_Start_IT+0xa0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d027      	beq.n	800623e <HAL_TIM_Base_Start_IT+0x62>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f6:	d022      	beq.n	800623e <HAL_TIM_Base_Start_IT+0x62>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a20      	ldr	r2, [pc, #128]	; (8006280 <HAL_TIM_Base_Start_IT+0xa4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01d      	beq.n	800623e <HAL_TIM_Base_Start_IT+0x62>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <HAL_TIM_Base_Start_IT+0xa8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d018      	beq.n	800623e <HAL_TIM_Base_Start_IT+0x62>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <HAL_TIM_Base_Start_IT+0xac>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <HAL_TIM_Base_Start_IT+0x62>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1c      	ldr	r2, [pc, #112]	; (800628c <HAL_TIM_Base_Start_IT+0xb0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00e      	beq.n	800623e <HAL_TIM_Base_Start_IT+0x62>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <HAL_TIM_Base_Start_IT+0xb4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d009      	beq.n	800623e <HAL_TIM_Base_Start_IT+0x62>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a19      	ldr	r2, [pc, #100]	; (8006294 <HAL_TIM_Base_Start_IT+0xb8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <HAL_TIM_Base_Start_IT+0x62>
 8006234:	f240 11b9 	movw	r1, #441	; 0x1b9
 8006238:	4817      	ldr	r0, [pc, #92]	; (8006298 <HAL_TIM_Base_Start_IT+0xbc>)
 800623a:	f006 fb47 	bl	800c8cc <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0201 	orr.w	r2, r2, #1
 800624c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b06      	cmp	r3, #6
 800625e:	d007      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
  {
    __HAL_TIM_ENABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40010000 	.word	0x40010000
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40000c00 	.word	0x40000c00
 800628c:	40014000 	.word	0x40014000
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800
 8006298:	0800fa9c 	.word	0x0800fa9c

0800629c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e083      	b.n	80063b6 <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a43      	ldr	r2, [pc, #268]	; (80063c0 <HAL_TIM_PWM_Init+0x124>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d027      	beq.n	8006308 <HAL_TIM_PWM_Init+0x6c>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c0:	d022      	beq.n	8006308 <HAL_TIM_PWM_Init+0x6c>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a3f      	ldr	r2, [pc, #252]	; (80063c4 <HAL_TIM_PWM_Init+0x128>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d01d      	beq.n	8006308 <HAL_TIM_PWM_Init+0x6c>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3d      	ldr	r2, [pc, #244]	; (80063c8 <HAL_TIM_PWM_Init+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_TIM_PWM_Init+0x6c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a3c      	ldr	r2, [pc, #240]	; (80063cc <HAL_TIM_PWM_Init+0x130>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <HAL_TIM_PWM_Init+0x6c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a3a      	ldr	r2, [pc, #232]	; (80063d0 <HAL_TIM_PWM_Init+0x134>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_TIM_PWM_Init+0x6c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a39      	ldr	r2, [pc, #228]	; (80063d4 <HAL_TIM_PWM_Init+0x138>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_TIM_PWM_Init+0x6c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a37      	ldr	r2, [pc, #220]	; (80063d8 <HAL_TIM_PWM_Init+0x13c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_TIM_PWM_Init+0x6c>
 80062fe:	f240 419b 	movw	r1, #1179	; 0x49b
 8006302:	4836      	ldr	r0, [pc, #216]	; (80063dc <HAL_TIM_PWM_Init+0x140>)
 8006304:	f006 fae2 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d014      	beq.n	800633a <HAL_TIM_PWM_Init+0x9e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b10      	cmp	r3, #16
 8006316:	d010      	beq.n	800633a <HAL_TIM_PWM_Init+0x9e>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b20      	cmp	r3, #32
 800631e:	d00c      	beq.n	800633a <HAL_TIM_PWM_Init+0x9e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	d008      	beq.n	800633a <HAL_TIM_PWM_Init+0x9e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	2b60      	cmp	r3, #96	; 0x60
 800632e:	d004      	beq.n	800633a <HAL_TIM_PWM_Init+0x9e>
 8006330:	f240 419c 	movw	r1, #1180	; 0x49c
 8006334:	4829      	ldr	r0, [pc, #164]	; (80063dc <HAL_TIM_PWM_Init+0x140>)
 8006336:	f006 fac9 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00e      	beq.n	8006360 <HAL_TIM_PWM_Init+0xc4>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634a:	d009      	beq.n	8006360 <HAL_TIM_PWM_Init+0xc4>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006354:	d004      	beq.n	8006360 <HAL_TIM_PWM_Init+0xc4>
 8006356:	f240 419d 	movw	r1, #1181	; 0x49d
 800635a:	4820      	ldr	r0, [pc, #128]	; (80063dc <HAL_TIM_PWM_Init+0x140>)
 800635c:	f006 fab6 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_TIM_PWM_Init+0xde>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d004      	beq.n	800637a <HAL_TIM_PWM_Init+0xde>
 8006370:	f240 419e 	movw	r1, #1182	; 0x49e
 8006374:	4819      	ldr	r0, [pc, #100]	; (80063dc <HAL_TIM_PWM_Init+0x140>)
 8006376:	f006 faa9 	bl	800c8cc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f826 	bl	80063e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f000 ff7a 	bl	80072a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40014000 	.word	0x40014000
 80063d4:	40014400 	.word	0x40014400
 80063d8:	40014800 	.word	0x40014800
 80063dc:	0800fa9c 	.word	0x0800fa9c

080063e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a4e      	ldr	r2, [pc, #312]	; (800653c <HAL_TIM_PWM_Start+0x148>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d10b      	bne.n	8006420 <HAL_TIM_PWM_Start+0x2c>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d06c      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b04      	cmp	r3, #4
 8006412:	d069      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b08      	cmp	r3, #8
 8006418:	d066      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b0c      	cmp	r3, #12
 800641e:	d063      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006428:	d10b      	bne.n	8006442 <HAL_TIM_PWM_Start+0x4e>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d05b      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b04      	cmp	r3, #4
 8006434:	d058      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b08      	cmp	r3, #8
 800643a:	d055      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b0c      	cmp	r3, #12
 8006440:	d052      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a3e      	ldr	r2, [pc, #248]	; (8006540 <HAL_TIM_PWM_Start+0x14c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d10b      	bne.n	8006464 <HAL_TIM_PWM_Start+0x70>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04a      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d047      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b08      	cmp	r3, #8
 800645c:	d044      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b0c      	cmp	r3, #12
 8006462:	d041      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a36      	ldr	r2, [pc, #216]	; (8006544 <HAL_TIM_PWM_Start+0x150>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d10b      	bne.n	8006486 <HAL_TIM_PWM_Start+0x92>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d039      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b04      	cmp	r3, #4
 8006478:	d036      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d033      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d030      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a2f      	ldr	r2, [pc, #188]	; (8006548 <HAL_TIM_PWM_Start+0x154>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10b      	bne.n	80064a8 <HAL_TIM_PWM_Start+0xb4>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d028      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d025      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d022      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d01f      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a27      	ldr	r2, [pc, #156]	; (800654c <HAL_TIM_PWM_Start+0x158>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d105      	bne.n	80064be <HAL_TIM_PWM_Start+0xca>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d017      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d014      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a23      	ldr	r2, [pc, #140]	; (8006550 <HAL_TIM_PWM_Start+0x15c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d102      	bne.n	80064ce <HAL_TIM_PWM_Start+0xda>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a20      	ldr	r2, [pc, #128]	; (8006554 <HAL_TIM_PWM_Start+0x160>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d102      	bne.n	80064de <HAL_TIM_PWM_Start+0xea>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <HAL_TIM_PWM_Start+0xf4>
 80064de:	f240 5113 	movw	r1, #1299	; 0x513
 80064e2:	481d      	ldr	r0, [pc, #116]	; (8006558 <HAL_TIM_PWM_Start+0x164>)
 80064e4:	f006 f9f2 	bl	800c8cc <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2201      	movs	r2, #1
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 fa05 	bl	8007900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a10      	ldr	r2, [pc, #64]	; (800653c <HAL_TIM_PWM_Start+0x148>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d107      	bne.n	8006510 <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800650e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b06      	cmp	r3, #6
 8006520:	d007      	beq.n	8006532 <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0201 	orr.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40010000 	.word	0x40010000
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400
 8006554:	40014800 	.word	0x40014800
 8006558:	0800fa9c 	.word	0x0800fa9c

0800655c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a5c      	ldr	r2, [pc, #368]	; (80066dc <HAL_TIM_PWM_Stop+0x180>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d10b      	bne.n	8006588 <HAL_TIM_PWM_Stop+0x2c>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d06c      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b04      	cmp	r3, #4
 800657a:	d069      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b08      	cmp	r3, #8
 8006580:	d066      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b0c      	cmp	r3, #12
 8006586:	d063      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006590:	d10b      	bne.n	80065aa <HAL_TIM_PWM_Stop+0x4e>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05b      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b04      	cmp	r3, #4
 800659c:	d058      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d055      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b0c      	cmp	r3, #12
 80065a8:	d052      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a4c      	ldr	r2, [pc, #304]	; (80066e0 <HAL_TIM_PWM_Stop+0x184>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d10b      	bne.n	80065cc <HAL_TIM_PWM_Stop+0x70>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d04a      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d047      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d044      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b0c      	cmp	r3, #12
 80065ca:	d041      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a44      	ldr	r2, [pc, #272]	; (80066e4 <HAL_TIM_PWM_Stop+0x188>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d10b      	bne.n	80065ee <HAL_TIM_PWM_Stop+0x92>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d039      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d036      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d033      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b0c      	cmp	r3, #12
 80065ec:	d030      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a3d      	ldr	r2, [pc, #244]	; (80066e8 <HAL_TIM_PWM_Stop+0x18c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10b      	bne.n	8006610 <HAL_TIM_PWM_Stop+0xb4>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d028      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d025      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b08      	cmp	r3, #8
 8006608:	d022      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b0c      	cmp	r3, #12
 800660e:	d01f      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a35      	ldr	r2, [pc, #212]	; (80066ec <HAL_TIM_PWM_Stop+0x190>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d105      	bne.n	8006626 <HAL_TIM_PWM_Stop+0xca>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d017      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b04      	cmp	r3, #4
 8006624:	d014      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a31      	ldr	r2, [pc, #196]	; (80066f0 <HAL_TIM_PWM_Stop+0x194>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d102      	bne.n	8006636 <HAL_TIM_PWM_Stop+0xda>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00c      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a2e      	ldr	r2, [pc, #184]	; (80066f4 <HAL_TIM_PWM_Stop+0x198>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d102      	bne.n	8006646 <HAL_TIM_PWM_Stop+0xea>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d004      	beq.n	8006650 <HAL_TIM_PWM_Stop+0xf4>
 8006646:	f240 5137 	movw	r1, #1335	; 0x537
 800664a:	482b      	ldr	r0, [pc, #172]	; (80066f8 <HAL_TIM_PWM_Stop+0x19c>)
 800664c:	f006 f93e 	bl	800c8cc <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f951 	bl	8007900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1e      	ldr	r2, [pc, #120]	; (80066dc <HAL_TIM_PWM_Stop+0x180>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d117      	bne.n	8006698 <HAL_TIM_PWM_Stop+0x13c>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6a1a      	ldr	r2, [r3, #32]
 800666e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10f      	bne.n	8006698 <HAL_TIM_PWM_Stop+0x13c>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6a1a      	ldr	r2, [r3, #32]
 800667e:	f240 4344 	movw	r3, #1092	; 0x444
 8006682:	4013      	ands	r3, r2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d107      	bne.n	8006698 <HAL_TIM_PWM_Stop+0x13c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006696:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6a1a      	ldr	r2, [r3, #32]
 800669e:	f241 1311 	movw	r3, #4369	; 0x1111
 80066a2:	4013      	ands	r3, r2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10f      	bne.n	80066c8 <HAL_TIM_PWM_Stop+0x16c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1a      	ldr	r2, [r3, #32]
 80066ae:	f240 4344 	movw	r3, #1092	; 0x444
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d107      	bne.n	80066c8 <HAL_TIM_PWM_Stop+0x16c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800
 80066e8:	40000c00 	.word	0x40000c00
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800
 80066f8:	0800fa9c 	.word	0x0800fa9c

080066fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b02      	cmp	r3, #2
 8006710:	d122      	bne.n	8006758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b02      	cmp	r3, #2
 800671e:	d11b      	bne.n	8006758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0202 	mvn.w	r2, #2
 8006728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fd90 	bl	8007264 <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fd82 	bl	8007250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fd93 	bl	8007278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b04      	cmp	r3, #4
 8006764:	d122      	bne.n	80067ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b04      	cmp	r3, #4
 8006772:	d11b      	bne.n	80067ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0204 	mvn.w	r2, #4
 800677c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fd66 	bl	8007264 <HAL_TIM_IC_CaptureCallback>
 8006798:	e005      	b.n	80067a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fd58 	bl	8007250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fd69 	bl	8007278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d122      	bne.n	8006800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d11b      	bne.n	8006800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0208 	mvn.w	r2, #8
 80067d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2204      	movs	r2, #4
 80067d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fd3c 	bl	8007264 <HAL_TIM_IC_CaptureCallback>
 80067ec:	e005      	b.n	80067fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fd2e 	bl	8007250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fd3f 	bl	8007278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b10      	cmp	r3, #16
 800680c:	d122      	bne.n	8006854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b10      	cmp	r3, #16
 800681a:	d11b      	bne.n	8006854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0210 	mvn.w	r2, #16
 8006824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2208      	movs	r2, #8
 800682a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fd12 	bl	8007264 <HAL_TIM_IC_CaptureCallback>
 8006840:	e005      	b.n	800684e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fd04 	bl	8007250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fd15 	bl	8007278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b01      	cmp	r3, #1
 8006860:	d10e      	bne.n	8006880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d107      	bne.n	8006880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0201 	mvn.w	r2, #1
 8006878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f006 f80c 	bl	800c898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688a:	2b80      	cmp	r3, #128	; 0x80
 800688c:	d10e      	bne.n	80068ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	d107      	bne.n	80068ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 f95e 	bl	8007b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	d10e      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d107      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fcda 	bl	800728c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d10e      	bne.n	8006904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d107      	bne.n	8006904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0220 	mvn.w	r2, #32
 80068fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 f928 	bl	8007b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d010      	beq.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x34>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b04      	cmp	r3, #4
 8006922:	d00d      	beq.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b08      	cmp	r3, #8
 8006928:	d00a      	beq.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x34>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b0c      	cmp	r3, #12
 800692e:	d007      	beq.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b3c      	cmp	r3, #60	; 0x3c
 8006934:	d004      	beq.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006936:	f640 51ec 	movw	r1, #3564	; 0xdec
 800693a:	4895      	ldr	r0, [pc, #596]	; (8006b90 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800693c:	f005 ffc6 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b60      	cmp	r3, #96	; 0x60
 8006946:	d008      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b70      	cmp	r3, #112	; 0x70
 800694e:	d004      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006950:	f640 51ed 	movw	r1, #3565	; 0xded
 8006954:	488e      	ldr	r0, [pc, #568]	; (8006b90 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006956:	f005 ffb9 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d004      	beq.n	8006974 <HAL_TIM_PWM_ConfigChannel+0x68>
 800696a:	f640 51ee 	movw	r1, #3566	; 0xdee
 800696e:	4888      	ldr	r0, [pc, #544]	; (8006b90 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006970:	f005 ffac 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <HAL_TIM_PWM_ConfigChannel+0x82>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b04      	cmp	r3, #4
 8006982:	d004      	beq.n	800698e <HAL_TIM_PWM_ConfigChannel+0x82>
 8006984:	f640 51ef 	movw	r1, #3567	; 0xdef
 8006988:	4881      	ldr	r0, [pc, #516]	; (8006b90 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800698a:	f005 ff9f 	bl	800c8cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_TIM_PWM_ConfigChannel+0x90>
 8006998:	2302      	movs	r3, #2
 800699a:	e152      	b.n	8006c42 <HAL_TIM_PWM_ConfigChannel+0x336>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b0c      	cmp	r3, #12
 80069b0:	f200 813d 	bhi.w	8006c2e <HAL_TIM_PWM_ConfigChannel+0x322>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <HAL_TIM_PWM_ConfigChannel+0xb0>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069f1 	.word	0x080069f1
 80069c0:	08006c2f 	.word	0x08006c2f
 80069c4:	08006c2f 	.word	0x08006c2f
 80069c8:	08006c2f 	.word	0x08006c2f
 80069cc:	08006a8b 	.word	0x08006a8b
 80069d0:	08006c2f 	.word	0x08006c2f
 80069d4:	08006c2f 	.word	0x08006c2f
 80069d8:	08006c2f 	.word	0x08006c2f
 80069dc:	08006b13 	.word	0x08006b13
 80069e0:	08006c2f 	.word	0x08006c2f
 80069e4:	08006c2f 	.word	0x08006c2f
 80069e8:	08006c2f 	.word	0x08006c2f
 80069ec:	08006bb1 	.word	0x08006bb1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a67      	ldr	r2, [pc, #412]	; (8006b94 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d027      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x13e>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d022      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a63      	ldr	r2, [pc, #396]	; (8006b98 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01d      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a62      	ldr	r2, [pc, #392]	; (8006b9c <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a60      	ldr	r2, [pc, #384]	; (8006ba0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a5f      	ldr	r2, [pc, #380]	; (8006ba4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a5d      	ldr	r2, [pc, #372]	; (8006ba8 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a5c      	ldr	r2, [pc, #368]	; (8006bac <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a40:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8006a44:	4852      	ldr	r0, [pc, #328]	; (8006b90 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006a46:	f005 ff41 	bl	800c8cc <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fca5 	bl	80073a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0208 	orr.w	r2, r2, #8
 8006a64:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699a      	ldr	r2, [r3, #24]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0204 	bic.w	r2, r2, #4
 8006a74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6999      	ldr	r1, [r3, #24]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	619a      	str	r2, [r3, #24]
      break;
 8006a88:	e0d2      	b.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a41      	ldr	r2, [pc, #260]	; (8006b94 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d01d      	beq.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9c:	d018      	beq.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a3d      	ldr	r2, [pc, #244]	; (8006b98 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a3b      	ldr	r2, [pc, #236]	; (8006b9c <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00e      	beq.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a3a      	ldr	r2, [pc, #232]	; (8006ba0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d009      	beq.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a38      	ldr	r2, [pc, #224]	; (8006ba4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006ac6:	f640 610c 	movw	r1, #3596	; 0xe0c
 8006aca:	4831      	ldr	r0, [pc, #196]	; (8006b90 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006acc:	f005 fefe 	bl	800c8cc <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fcf2 	bl	80074c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6999      	ldr	r1, [r3, #24]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	619a      	str	r2, [r3, #24]
      break;
 8006b10:	e08e      	b.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a1f      	ldr	r2, [pc, #124]	; (8006b94 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d018      	beq.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b24:	d013      	beq.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a1b      	ldr	r2, [pc, #108]	; (8006b98 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a19      	ldr	r2, [pc, #100]	; (8006b9c <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b44:	f640 611d 	movw	r1, #3613	; 0xe1d
 8006b48:	4811      	ldr	r0, [pc, #68]	; (8006b90 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006b4a:	f005 febf 	bl	800c8cc <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fd47 	bl	80075e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0208 	orr.w	r2, r2, #8
 8006b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0204 	bic.w	r2, r2, #4
 8006b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69d9      	ldr	r1, [r3, #28]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	61da      	str	r2, [r3, #28]
      break;
 8006b8c:	e050      	b.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x324>
 8006b8e:	bf00      	nop
 8006b90:	0800fa9c 	.word	0x0800fa9c
 8006b94:	40010000 	.word	0x40010000
 8006b98:	40000400 	.word	0x40000400
 8006b9c:	40000800 	.word	0x40000800
 8006ba0:	40000c00 	.word	0x40000c00
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a25      	ldr	r2, [pc, #148]	; (8006c4c <HAL_TIM_PWM_ConfigChannel+0x340>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d018      	beq.n	8006bec <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc2:	d013      	beq.n	8006bec <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a21      	ldr	r2, [pc, #132]	; (8006c50 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00e      	beq.n	8006bec <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d009      	beq.n	8006bec <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d004      	beq.n	8006bec <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006be2:	f640 612e 	movw	r1, #3630	; 0xe2e
 8006be6:	481d      	ldr	r0, [pc, #116]	; (8006c5c <HAL_TIM_PWM_ConfigChannel+0x350>)
 8006be8:	f005 fe70 	bl	800c8cc <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fd8c 	bl	8007710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	69da      	ldr	r2, [r3, #28]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	69d9      	ldr	r1, [r3, #28]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	021a      	lsls	r2, r3, #8
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	61da      	str	r2, [r3, #28]
      break;
 8006c2c:	e000      	b.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 8006c2e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40000400 	.word	0x40000400
 8006c54:	40000800 	.word	0x40000800
 8006c58:	40000c00 	.word	0x40000c00
 8006c5c:	0800fa9c 	.word	0x0800fa9c

08006c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_TIM_ConfigClockSource+0x18>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e2db      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x5d0>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c90:	d029      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c9a:	d024      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d020      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b10      	cmp	r3, #16
 8006caa:	d01c      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d018      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b30      	cmp	r3, #48	; 0x30
 8006cba:	d014      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d010      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b50      	cmp	r3, #80	; 0x50
 8006cca:	d00c      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b60      	cmp	r3, #96	; 0x60
 8006cd2:	d008      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b70      	cmp	r3, #112	; 0x70
 8006cda:	d004      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x86>
 8006cdc:	f241 118b 	movw	r1, #4491	; 0x118b
 8006ce0:	4873      	ldr	r0, [pc, #460]	; (8006eb0 <HAL_TIM_ConfigClockSource+0x250>)
 8006ce2:	f005 fdf3 	bl	800c8cc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cf4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	f000 8204 	beq.w	8007118 <HAL_TIM_ConfigClockSource+0x4b8>
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d80f      	bhi.n	8006d34 <HAL_TIM_ConfigClockSource+0xd4>
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	f000 8255 	beq.w	80071c4 <HAL_TIM_ConfigClockSource+0x564>
 8006d1a:	2b10      	cmp	r3, #16
 8006d1c:	d803      	bhi.n	8006d26 <HAL_TIM_ConfigClockSource+0xc6>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 8250 	beq.w	80071c4 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d24:	e27b      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	f000 824c 	beq.w	80071c4 <HAL_TIM_ConfigClockSource+0x564>
 8006d2c:	2b30      	cmp	r3, #48	; 0x30
 8006d2e:	f000 8249 	beq.w	80071c4 <HAL_TIM_ConfigClockSource+0x564>
      break;
 8006d32:	e274      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006d34:	2b70      	cmp	r3, #112	; 0x70
 8006d36:	d046      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x166>
 8006d38:	2b70      	cmp	r3, #112	; 0x70
 8006d3a:	d806      	bhi.n	8006d4a <HAL_TIM_ConfigClockSource+0xea>
 8006d3c:	2b50      	cmp	r3, #80	; 0x50
 8006d3e:	f000 8133 	beq.w	8006fa8 <HAL_TIM_ConfigClockSource+0x348>
 8006d42:	2b60      	cmp	r3, #96	; 0x60
 8006d44:	f000 8186 	beq.w	8007054 <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8006d48:	e269      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4e:	d004      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0xfa>
 8006d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d54:	f000 80bc 	beq.w	8006ed0 <HAL_TIM_ConfigClockSource+0x270>
      break;
 8006d58:	e261      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a55      	ldr	r2, [pc, #340]	; (8006eb4 <HAL_TIM_ConfigClockSource+0x254>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	f000 825b 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x5bc>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6e:	f000 8255 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x5bc>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a50      	ldr	r2, [pc, #320]	; (8006eb8 <HAL_TIM_ConfigClockSource+0x258>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	f000 824f 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x5bc>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a4e      	ldr	r2, [pc, #312]	; (8006ebc <HAL_TIM_ConfigClockSource+0x25c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	f000 8249 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x5bc>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a4c      	ldr	r2, [pc, #304]	; (8006ec0 <HAL_TIM_ConfigClockSource+0x260>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	f000 8243 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x5bc>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a4a      	ldr	r2, [pc, #296]	; (8006ec4 <HAL_TIM_ConfigClockSource+0x264>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	f000 823d 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x5bc>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a48      	ldr	r2, [pc, #288]	; (8006ec8 <HAL_TIM_ConfigClockSource+0x268>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	f000 8237 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x5bc>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a46      	ldr	r2, [pc, #280]	; (8006ecc <HAL_TIM_ConfigClockSource+0x26c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	f000 8231 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x5bc>
 8006dba:	f241 1197 	movw	r1, #4503	; 0x1197
 8006dbe:	483c      	ldr	r0, [pc, #240]	; (8006eb0 <HAL_TIM_ConfigClockSource+0x250>)
 8006dc0:	f005 fd84 	bl	800c8cc <assert_failed>
      break;
 8006dc4:	e22a      	b.n	800721c <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a3a      	ldr	r2, [pc, #232]	; (8006eb4 <HAL_TIM_ConfigClockSource+0x254>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d01d      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0x1ac>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd8:	d018      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0x1ac>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a36      	ldr	r2, [pc, #216]	; (8006eb8 <HAL_TIM_ConfigClockSource+0x258>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d013      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0x1ac>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a34      	ldr	r2, [pc, #208]	; (8006ebc <HAL_TIM_ConfigClockSource+0x25c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00e      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0x1ac>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a33      	ldr	r2, [pc, #204]	; (8006ec0 <HAL_TIM_ConfigClockSource+0x260>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d009      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0x1ac>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a31      	ldr	r2, [pc, #196]	; (8006ec4 <HAL_TIM_ConfigClockSource+0x264>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0x1ac>
 8006e02:	f241 119e 	movw	r1, #4510	; 0x119e
 8006e06:	482a      	ldr	r0, [pc, #168]	; (8006eb0 <HAL_TIM_ConfigClockSource+0x250>)
 8006e08:	f005 fd60 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d013      	beq.n	8006e3c <HAL_TIM_ConfigClockSource+0x1dc>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e1c:	d00e      	beq.n	8006e3c <HAL_TIM_ConfigClockSource+0x1dc>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e26:	d009      	beq.n	8006e3c <HAL_TIM_ConfigClockSource+0x1dc>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e30:	d004      	beq.n	8006e3c <HAL_TIM_ConfigClockSource+0x1dc>
 8006e32:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8006e36:	481e      	ldr	r0, [pc, #120]	; (8006eb0 <HAL_TIM_ConfigClockSource+0x250>)
 8006e38:	f005 fd48 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e44:	d014      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x210>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d010      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x210>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00c      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x210>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d008      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x210>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b0a      	cmp	r3, #10
 8006e64:	d004      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x210>
 8006e66:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8006e6a:	4811      	ldr	r0, [pc, #68]	; (8006eb0 <HAL_TIM_ConfigClockSource+0x250>)
 8006e6c:	f005 fd2e 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b0f      	cmp	r3, #15
 8006e76:	d904      	bls.n	8006e82 <HAL_TIM_ConfigClockSource+0x222>
 8006e78:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8006e7c:	480c      	ldr	r0, [pc, #48]	; (8006eb0 <HAL_TIM_ConfigClockSource+0x250>)
 8006e7e:	f005 fd25 	bl	800c8cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6818      	ldr	r0, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6899      	ldr	r1, [r3, #8]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f000 fd15 	bl	80078c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ea4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	609a      	str	r2, [r3, #8]
      break;
 8006eae:	e1b6      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
 8006eb0:	0800fa9c 	.word	0x0800fa9c
 8006eb4:	40010000 	.word	0x40010000
 8006eb8:	40000400 	.word	0x40000400
 8006ebc:	40000800 	.word	0x40000800
 8006ec0:	40000c00 	.word	0x40000c00
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40014400 	.word	0x40014400
 8006ecc:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a8a      	ldr	r2, [pc, #552]	; (8007100 <HAL_TIM_ConfigClockSource+0x4a0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d018      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x2ac>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee2:	d013      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x2ac>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a86      	ldr	r2, [pc, #536]	; (8007104 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00e      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x2ac>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a85      	ldr	r2, [pc, #532]	; (8007108 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d009      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x2ac>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a83      	ldr	r2, [pc, #524]	; (800710c <HAL_TIM_ConfigClockSource+0x4ac>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x2ac>
 8006f02:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8006f06:	4882      	ldr	r0, [pc, #520]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f08:	f005 fce0 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d013      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0x2dc>
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1c:	d00e      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0x2dc>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f26:	d009      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0x2dc>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f30:	d004      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0x2dc>
 8006f32:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8006f36:	4876      	ldr	r0, [pc, #472]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f38:	f005 fcc8 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f44:	d014      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x310>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d010      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x310>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00c      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x310>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d008      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x310>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b0a      	cmp	r3, #10
 8006f64:	d004      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x310>
 8006f66:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8006f6a:	4869      	ldr	r0, [pc, #420]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f6c:	f005 fcae 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2b0f      	cmp	r3, #15
 8006f76:	d904      	bls.n	8006f82 <HAL_TIM_ConfigClockSource+0x322>
 8006f78:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8006f7c:	4864      	ldr	r0, [pc, #400]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f7e:	f005 fca5 	bl	800c8cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6899      	ldr	r1, [r3, #8]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f000 fc95 	bl	80078c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fa4:	609a      	str	r2, [r3, #8]
      break;
 8006fa6:	e13a      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a54      	ldr	r2, [pc, #336]	; (8007100 <HAL_TIM_ConfigClockSource+0x4a0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01d      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x38e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fba:	d018      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x38e>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a50      	ldr	r2, [pc, #320]	; (8007104 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x38e>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4f      	ldr	r2, [pc, #316]	; (8007108 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00e      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x38e>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a4d      	ldr	r2, [pc, #308]	; (800710c <HAL_TIM_ConfigClockSource+0x4ac>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d009      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x38e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a4d      	ldr	r2, [pc, #308]	; (8007114 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d004      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x38e>
 8006fe4:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8006fe8:	4849      	ldr	r0, [pc, #292]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006fea:	f005 fc6f 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff6:	d014      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x3c2>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d010      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x3c2>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x3c2>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d008      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x3c2>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b0a      	cmp	r3, #10
 8007016:	d004      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x3c2>
 8007018:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800701c:	483c      	ldr	r0, [pc, #240]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 800701e:	f005 fc55 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2b0f      	cmp	r3, #15
 8007028:	d904      	bls.n	8007034 <HAL_TIM_ConfigClockSource+0x3d4>
 800702a:	f241 11ce 	movw	r1, #4558	; 0x11ce
 800702e:	4838      	ldr	r0, [pc, #224]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007030:	f005 fc4c 	bl	800c8cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6859      	ldr	r1, [r3, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	461a      	mov	r2, r3
 8007042:	f000 fbc3 	bl	80077cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2150      	movs	r1, #80	; 0x50
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fc1c 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 8007052:	e0e4      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a29      	ldr	r2, [pc, #164]	; (8007100 <HAL_TIM_ConfigClockSource+0x4a0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01d      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x43a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007066:	d018      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x43a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a25      	ldr	r2, [pc, #148]	; (8007104 <HAL_TIM_ConfigClockSource+0x4a4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x43a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a24      	ldr	r2, [pc, #144]	; (8007108 <HAL_TIM_ConfigClockSource+0x4a8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00e      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x43a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a22      	ldr	r2, [pc, #136]	; (800710c <HAL_TIM_ConfigClockSource+0x4ac>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x43a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a22      	ldr	r2, [pc, #136]	; (8007114 <HAL_TIM_ConfigClockSource+0x4b4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x43a>
 8007090:	f241 11da 	movw	r1, #4570	; 0x11da
 8007094:	481e      	ldr	r0, [pc, #120]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007096:	f005 fc19 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a2:	d014      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x46e>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d010      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x46e>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00c      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x46e>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d008      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x46e>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b0a      	cmp	r3, #10
 80070c2:	d004      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x46e>
 80070c4:	f241 11dd 	movw	r1, #4573	; 0x11dd
 80070c8:	4811      	ldr	r0, [pc, #68]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 80070ca:	f005 fbff 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2b0f      	cmp	r3, #15
 80070d4:	d904      	bls.n	80070e0 <HAL_TIM_ConfigClockSource+0x480>
 80070d6:	f241 11de 	movw	r1, #4574	; 0x11de
 80070da:	480d      	ldr	r0, [pc, #52]	; (8007110 <HAL_TIM_ConfigClockSource+0x4b0>)
 80070dc:	f005 fbf6 	bl	800c8cc <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	6859      	ldr	r1, [r3, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	461a      	mov	r2, r3
 80070ee:	f000 fb9c 	bl	800782a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2160      	movs	r1, #96	; 0x60
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fbc6 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 80070fe:	e08e      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
 8007100:	40010000 	.word	0x40010000
 8007104:	40000400 	.word	0x40000400
 8007108:	40000800 	.word	0x40000800
 800710c:	40000c00 	.word	0x40000c00
 8007110:	0800fa9c 	.word	0x0800fa9c
 8007114:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a46      	ldr	r2, [pc, #280]	; (8007238 <HAL_TIM_ConfigClockSource+0x5d8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d01d      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x4fe>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712a:	d018      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x4fe>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a42      	ldr	r2, [pc, #264]	; (800723c <HAL_TIM_ConfigClockSource+0x5dc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x4fe>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a41      	ldr	r2, [pc, #260]	; (8007240 <HAL_TIM_ConfigClockSource+0x5e0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00e      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x4fe>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a3f      	ldr	r2, [pc, #252]	; (8007244 <HAL_TIM_ConfigClockSource+0x5e4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d009      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x4fe>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a3e      	ldr	r2, [pc, #248]	; (8007248 <HAL_TIM_ConfigClockSource+0x5e8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d004      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x4fe>
 8007154:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8007158:	483c      	ldr	r0, [pc, #240]	; (800724c <HAL_TIM_ConfigClockSource+0x5ec>)
 800715a:	f005 fbb7 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007166:	d014      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x532>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d010      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x532>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00c      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x532>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b02      	cmp	r3, #2
 800717e:	d008      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x532>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b0a      	cmp	r3, #10
 8007186:	d004      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x532>
 8007188:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800718c:	482f      	ldr	r0, [pc, #188]	; (800724c <HAL_TIM_ConfigClockSource+0x5ec>)
 800718e:	f005 fb9d 	bl	800c8cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	2b0f      	cmp	r3, #15
 8007198:	d904      	bls.n	80071a4 <HAL_TIM_ConfigClockSource+0x544>
 800719a:	f241 11ee 	movw	r1, #4590	; 0x11ee
 800719e:	482b      	ldr	r0, [pc, #172]	; (800724c <HAL_TIM_ConfigClockSource+0x5ec>)
 80071a0:	f005 fb94 	bl	800c8cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	6859      	ldr	r1, [r3, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	461a      	mov	r2, r3
 80071b2:	f000 fb0b 	bl	80077cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2140      	movs	r1, #64	; 0x40
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fb64 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 80071c2:	e02c      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1b      	ldr	r2, [pc, #108]	; (8007238 <HAL_TIM_ConfigClockSource+0x5d8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01d      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x5aa>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d6:	d018      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x5aa>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a17      	ldr	r2, [pc, #92]	; (800723c <HAL_TIM_ConfigClockSource+0x5dc>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x5aa>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a16      	ldr	r2, [pc, #88]	; (8007240 <HAL_TIM_ConfigClockSource+0x5e0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00e      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x5aa>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a14      	ldr	r2, [pc, #80]	; (8007244 <HAL_TIM_ConfigClockSource+0x5e4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x5aa>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a13      	ldr	r2, [pc, #76]	; (8007248 <HAL_TIM_ConfigClockSource+0x5e8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d004      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x5aa>
 8007200:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8007204:	4811      	ldr	r0, [pc, #68]	; (800724c <HAL_TIM_ConfigClockSource+0x5ec>)
 8007206:	f005 fb61 	bl	800c8cc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f000 fb38 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 800721a:	e000      	b.n	800721e <HAL_TIM_ConfigClockSource+0x5be>
      break;
 800721c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40010000 	.word	0x40010000
 800723c:	40000400 	.word	0x40000400
 8007240:	40000800 	.word	0x40000800
 8007244:	40000c00 	.word	0x40000c00
 8007248:	40014000 	.word	0x40014000
 800724c:	0800fa9c 	.word	0x0800fa9c

08007250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a34      	ldr	r2, [pc, #208]	; (8007384 <TIM_Base_SetConfig+0xe4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00f      	beq.n	80072d8 <TIM_Base_SetConfig+0x38>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072be:	d00b      	beq.n	80072d8 <TIM_Base_SetConfig+0x38>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a31      	ldr	r2, [pc, #196]	; (8007388 <TIM_Base_SetConfig+0xe8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d007      	beq.n	80072d8 <TIM_Base_SetConfig+0x38>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a30      	ldr	r2, [pc, #192]	; (800738c <TIM_Base_SetConfig+0xec>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_Base_SetConfig+0x38>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a2f      	ldr	r2, [pc, #188]	; (8007390 <TIM_Base_SetConfig+0xf0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d108      	bne.n	80072ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a25      	ldr	r2, [pc, #148]	; (8007384 <TIM_Base_SetConfig+0xe4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01b      	beq.n	800732a <TIM_Base_SetConfig+0x8a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f8:	d017      	beq.n	800732a <TIM_Base_SetConfig+0x8a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a22      	ldr	r2, [pc, #136]	; (8007388 <TIM_Base_SetConfig+0xe8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <TIM_Base_SetConfig+0x8a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a21      	ldr	r2, [pc, #132]	; (800738c <TIM_Base_SetConfig+0xec>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d00f      	beq.n	800732a <TIM_Base_SetConfig+0x8a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a20      	ldr	r2, [pc, #128]	; (8007390 <TIM_Base_SetConfig+0xf0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00b      	beq.n	800732a <TIM_Base_SetConfig+0x8a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a1f      	ldr	r2, [pc, #124]	; (8007394 <TIM_Base_SetConfig+0xf4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d007      	beq.n	800732a <TIM_Base_SetConfig+0x8a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a1e      	ldr	r2, [pc, #120]	; (8007398 <TIM_Base_SetConfig+0xf8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d003      	beq.n	800732a <TIM_Base_SetConfig+0x8a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a1d      	ldr	r2, [pc, #116]	; (800739c <TIM_Base_SetConfig+0xfc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d108      	bne.n	800733c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a08      	ldr	r2, [pc, #32]	; (8007384 <TIM_Base_SetConfig+0xe4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d103      	bne.n	8007370 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	615a      	str	r2, [r3, #20]
}
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40010000 	.word	0x40010000
 8007388:	40000400 	.word	0x40000400
 800738c:	40000800 	.word	0x40000800
 8007390:	40000c00 	.word	0x40000c00
 8007394:	40014000 	.word	0x40014000
 8007398:	40014400 	.word	0x40014400
 800739c:	40014800 	.word	0x40014800

080073a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f023 0201 	bic.w	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f023 0302 	bic.w	r3, r3, #2
 80073e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a30      	ldr	r2, [pc, #192]	; (80074b8 <TIM_OC1_SetConfig+0x118>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d119      	bne.n	8007430 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <TIM_OC1_SetConfig+0x76>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	2b08      	cmp	r3, #8
 800740a:	d004      	beq.n	8007416 <TIM_OC1_SetConfig+0x76>
 800740c:	f241 7102 	movw	r1, #5890	; 0x1702
 8007410:	482a      	ldr	r0, [pc, #168]	; (80074bc <TIM_OC1_SetConfig+0x11c>)
 8007412:	f005 fa5b 	bl	800c8cc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f023 0308 	bic.w	r3, r3, #8
 800741c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f023 0304 	bic.w	r3, r3, #4
 800742e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a21      	ldr	r2, [pc, #132]	; (80074b8 <TIM_OC1_SetConfig+0x118>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d12d      	bne.n	8007494 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007440:	d008      	beq.n	8007454 <TIM_OC1_SetConfig+0xb4>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d004      	beq.n	8007454 <TIM_OC1_SetConfig+0xb4>
 800744a:	f241 710f 	movw	r1, #5903	; 0x170f
 800744e:	481b      	ldr	r0, [pc, #108]	; (80074bc <TIM_OC1_SetConfig+0x11c>)
 8007450:	f005 fa3c 	bl	800c8cc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745c:	d008      	beq.n	8007470 <TIM_OC1_SetConfig+0xd0>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <TIM_OC1_SetConfig+0xd0>
 8007466:	f241 7110 	movw	r1, #5904	; 0x1710
 800746a:	4814      	ldr	r0, [pc, #80]	; (80074bc <TIM_OC1_SetConfig+0x11c>)
 800746c:	f005 fa2e 	bl	800c8cc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800747e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	4313      	orrs	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	621a      	str	r2, [r3, #32]
}
 80074ae:	bf00      	nop
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40010000 	.word	0x40010000
 80074bc:	0800fa9c 	.word	0x0800fa9c

080074c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f023 0210 	bic.w	r2, r3, #16
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f023 0320 	bic.w	r3, r3, #32
 800750a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a31      	ldr	r2, [pc, #196]	; (80075e0 <TIM_OC2_SetConfig+0x120>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d11a      	bne.n	8007556 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d008      	beq.n	800753a <TIM_OC2_SetConfig+0x7a>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b08      	cmp	r3, #8
 800752e:	d004      	beq.n	800753a <TIM_OC2_SetConfig+0x7a>
 8007530:	f241 714d 	movw	r1, #5965	; 0x174d
 8007534:	482b      	ldr	r0, [pc, #172]	; (80075e4 <TIM_OC2_SetConfig+0x124>)
 8007536:	f005 f9c9 	bl	800c8cc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007554:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a21      	ldr	r2, [pc, #132]	; (80075e0 <TIM_OC2_SetConfig+0x120>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d12f      	bne.n	80075be <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007566:	d008      	beq.n	800757a <TIM_OC2_SetConfig+0xba>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <TIM_OC2_SetConfig+0xba>
 8007570:	f241 715b 	movw	r1, #5979	; 0x175b
 8007574:	481b      	ldr	r0, [pc, #108]	; (80075e4 <TIM_OC2_SetConfig+0x124>)
 8007576:	f005 f9a9 	bl	800c8cc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007582:	d008      	beq.n	8007596 <TIM_OC2_SetConfig+0xd6>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <TIM_OC2_SetConfig+0xd6>
 800758c:	f241 715c 	movw	r1, #5980	; 0x175c
 8007590:	4814      	ldr	r0, [pc, #80]	; (80075e4 <TIM_OC2_SetConfig+0x124>)
 8007592:	f005 f99b 	bl	800c8cc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800759c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	621a      	str	r2, [r3, #32]
}
 80075d8:	bf00      	nop
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40010000 	.word	0x40010000
 80075e4:	0800fa9c 	.word	0x0800fa9c

080075e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0303 	bic.w	r3, r3, #3
 800761e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a31      	ldr	r2, [pc, #196]	; (8007708 <TIM_OC3_SetConfig+0x120>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d11a      	bne.n	800767c <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d008      	beq.n	8007660 <TIM_OC3_SetConfig+0x78>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b08      	cmp	r3, #8
 8007654:	d004      	beq.n	8007660 <TIM_OC3_SetConfig+0x78>
 8007656:	f241 7198 	movw	r1, #6040	; 0x1798
 800765a:	482c      	ldr	r0, [pc, #176]	; (800770c <TIM_OC3_SetConfig+0x124>)
 800765c:	f005 f936 	bl	800c8cc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800767a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a22      	ldr	r2, [pc, #136]	; (8007708 <TIM_OC3_SetConfig+0x120>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d12f      	bne.n	80076e4 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800768c:	d008      	beq.n	80076a0 <TIM_OC3_SetConfig+0xb8>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <TIM_OC3_SetConfig+0xb8>
 8007696:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800769a:	481c      	ldr	r0, [pc, #112]	; (800770c <TIM_OC3_SetConfig+0x124>)
 800769c:	f005 f916 	bl	800c8cc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a8:	d008      	beq.n	80076bc <TIM_OC3_SetConfig+0xd4>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <TIM_OC3_SetConfig+0xd4>
 80076b2:	f241 71a6 	movw	r1, #6054	; 0x17a6
 80076b6:	4815      	ldr	r0, [pc, #84]	; (800770c <TIM_OC3_SetConfig+0x124>)
 80076b8:	f005 f908 	bl	800c8cc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	621a      	str	r2, [r3, #32]
}
 80076fe:	bf00      	nop
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	40010000 	.word	0x40010000
 800770c:	0800fa9c 	.word	0x0800fa9c

08007710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800775a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	031b      	lsls	r3, r3, #12
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a16      	ldr	r2, [pc, #88]	; (80077c4 <TIM_OC4_SetConfig+0xb4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d117      	bne.n	80077a0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007778:	d008      	beq.n	800778c <TIM_OC4_SetConfig+0x7c>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d004      	beq.n	800778c <TIM_OC4_SetConfig+0x7c>
 8007782:	f241 71e4 	movw	r1, #6116	; 0x17e4
 8007786:	4810      	ldr	r0, [pc, #64]	; (80077c8 <TIM_OC4_SetConfig+0xb8>)
 8007788:	f005 f8a0 	bl	800c8cc <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	019b      	lsls	r3, r3, #6
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	4313      	orrs	r3, r2
 800779e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	621a      	str	r2, [r3, #32]
}
 80077ba:	bf00      	nop
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40010000 	.word	0x40010000
 80077c8:	0800fa9c 	.word	0x0800fa9c

080077cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	f023 0201 	bic.w	r2, r3, #1
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f023 030a 	bic.w	r3, r3, #10
 8007808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800782a:	b480      	push	{r7}
 800782c:	b087      	sub	sp, #28
 800782e:	af00      	add	r7, sp, #0
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f023 0210 	bic.w	r2, r3, #16
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	031b      	lsls	r3, r3, #12
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	621a      	str	r2, [r3, #32]
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f043 0307 	orr.w	r3, r3, #7
 80078ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	609a      	str	r2, [r3, #8]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	021a      	lsls	r2, r3, #8
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	609a      	str	r2, [r3, #8]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a2a      	ldr	r2, [pc, #168]	; (80079b8 <TIM_CCxChannelCmd+0xb8>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d020      	beq.n	8007956 <TIM_CCxChannelCmd+0x56>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791a:	d01c      	beq.n	8007956 <TIM_CCxChannelCmd+0x56>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4a27      	ldr	r2, [pc, #156]	; (80079bc <TIM_CCxChannelCmd+0xbc>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d018      	beq.n	8007956 <TIM_CCxChannelCmd+0x56>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4a26      	ldr	r2, [pc, #152]	; (80079c0 <TIM_CCxChannelCmd+0xc0>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d014      	beq.n	8007956 <TIM_CCxChannelCmd+0x56>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4a25      	ldr	r2, [pc, #148]	; (80079c4 <TIM_CCxChannelCmd+0xc4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d010      	beq.n	8007956 <TIM_CCxChannelCmd+0x56>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4a24      	ldr	r2, [pc, #144]	; (80079c8 <TIM_CCxChannelCmd+0xc8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00c      	beq.n	8007956 <TIM_CCxChannelCmd+0x56>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4a23      	ldr	r2, [pc, #140]	; (80079cc <TIM_CCxChannelCmd+0xcc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d008      	beq.n	8007956 <TIM_CCxChannelCmd+0x56>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4a22      	ldr	r2, [pc, #136]	; (80079d0 <TIM_CCxChannelCmd+0xd0>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d004      	beq.n	8007956 <TIM_CCxChannelCmd+0x56>
 800794c:	f641 11cc 	movw	r1, #6604	; 0x19cc
 8007950:	4820      	ldr	r0, [pc, #128]	; (80079d4 <TIM_CCxChannelCmd+0xd4>)
 8007952:	f004 ffbb 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d010      	beq.n	800797e <TIM_CCxChannelCmd+0x7e>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2b04      	cmp	r3, #4
 8007960:	d00d      	beq.n	800797e <TIM_CCxChannelCmd+0x7e>
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b08      	cmp	r3, #8
 8007966:	d00a      	beq.n	800797e <TIM_CCxChannelCmd+0x7e>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b0c      	cmp	r3, #12
 800796c:	d007      	beq.n	800797e <TIM_CCxChannelCmd+0x7e>
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b3c      	cmp	r3, #60	; 0x3c
 8007972:	d004      	beq.n	800797e <TIM_CCxChannelCmd+0x7e>
 8007974:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8007978:	4816      	ldr	r0, [pc, #88]	; (80079d4 <TIM_CCxChannelCmd+0xd4>)
 800797a:	f004 ffa7 	bl	800c8cc <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f003 031f 	and.w	r3, r3, #31
 8007984:	2201      	movs	r2, #1
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a1a      	ldr	r2, [r3, #32]
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	43db      	mvns	r3, r3
 8007994:	401a      	ands	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a1a      	ldr	r2, [r3, #32]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	fa01 f303 	lsl.w	r3, r1, r3
 80079aa:	431a      	orrs	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	621a      	str	r2, [r3, #32]
}
 80079b0:	bf00      	nop
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40000400 	.word	0x40000400
 80079c0:	40000800 	.word	0x40000800
 80079c4:	40000c00 	.word	0x40000c00
 80079c8:	40014000 	.word	0x40014000
 80079cc:	40014400 	.word	0x40014400
 80079d0:	40014800 	.word	0x40014800
 80079d4:	0800fa9c 	.word	0x0800fa9c

080079d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a55      	ldr	r2, [pc, #340]	; (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d018      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f4:	d013      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a51      	ldr	r2, [pc, #324]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00e      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a4f      	ldr	r2, [pc, #316]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d009      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a4e      	ldr	r2, [pc, #312]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d004      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a14:	f240 6164 	movw	r1, #1636	; 0x664
 8007a18:	484c      	ldr	r0, [pc, #304]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007a1a:	f004 ff57 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d020      	beq.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b10      	cmp	r3, #16
 8007a2c:	d01c      	beq.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d018      	beq.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b30      	cmp	r3, #48	; 0x30
 8007a3c:	d014      	beq.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	d010      	beq.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b50      	cmp	r3, #80	; 0x50
 8007a4c:	d00c      	beq.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b60      	cmp	r3, #96	; 0x60
 8007a54:	d008      	beq.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b70      	cmp	r3, #112	; 0x70
 8007a5c:	d004      	beq.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a5e:	f240 6165 	movw	r1, #1637	; 0x665
 8007a62:	483a      	ldr	r0, [pc, #232]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007a64:	f004 ff32 	bl	800c8cc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b80      	cmp	r3, #128	; 0x80
 8007a6e:	d008      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007a78:	f240 6166 	movw	r1, #1638	; 0x666
 8007a7c:	4833      	ldr	r0, [pc, #204]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007a7e:	f004 ff25 	bl	800c8cc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e050      	b.n	8007b32 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a1b      	ldr	r2, [pc, #108]	; (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d018      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007adc:	d013      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a17      	ldr	r2, [pc, #92]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00e      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a14      	ldr	r2, [pc, #80]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a13      	ldr	r2, [pc, #76]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d10c      	bne.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40000400 	.word	0x40000400
 8007b44:	40000800 	.word	0x40000800
 8007b48:	40000c00 	.word	0x40000c00
 8007b4c:	0800fad4 	.word	0x0800fad4
 8007b50:	40014000 	.word	0x40014000

08007b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e0a0      	b.n	8007cd0 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d02c      	beq.n	8007bf0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a4f      	ldr	r2, [pc, #316]	; (8007cd8 <HAL_UART_Init+0x15c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00e      	beq.n	8007bbe <HAL_UART_Init+0x42>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a4d      	ldr	r2, [pc, #308]	; (8007cdc <HAL_UART_Init+0x160>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d009      	beq.n	8007bbe <HAL_UART_Init+0x42>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a4c      	ldr	r2, [pc, #304]	; (8007ce0 <HAL_UART_Init+0x164>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d004      	beq.n	8007bbe <HAL_UART_Init+0x42>
 8007bb4:	f240 114b 	movw	r1, #331	; 0x14b
 8007bb8:	484a      	ldr	r0, [pc, #296]	; (8007ce4 <HAL_UART_Init+0x168>)
 8007bba:	f004 fe87 	bl	800c8cc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d028      	beq.n	8007c18 <HAL_UART_Init+0x9c>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bce:	d023      	beq.n	8007c18 <HAL_UART_Init+0x9c>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd8:	d01e      	beq.n	8007c18 <HAL_UART_Init+0x9c>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be2:	d019      	beq.n	8007c18 <HAL_UART_Init+0x9c>
 8007be4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007be8:	483e      	ldr	r0, [pc, #248]	; (8007ce4 <HAL_UART_Init+0x168>)
 8007bea:	f004 fe6f 	bl	800c8cc <assert_failed>
 8007bee:	e013      	b.n	8007c18 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a38      	ldr	r2, [pc, #224]	; (8007cd8 <HAL_UART_Init+0x15c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00e      	beq.n	8007c18 <HAL_UART_Init+0x9c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a37      	ldr	r2, [pc, #220]	; (8007cdc <HAL_UART_Init+0x160>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d009      	beq.n	8007c18 <HAL_UART_Init+0x9c>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a35      	ldr	r2, [pc, #212]	; (8007ce0 <HAL_UART_Init+0x164>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d004      	beq.n	8007c18 <HAL_UART_Init+0x9c>
 8007c0e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007c12:	4834      	ldr	r0, [pc, #208]	; (8007ce4 <HAL_UART_Init+0x168>)
 8007c14:	f004 fe5a 	bl	800c8cc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d009      	beq.n	8007c34 <HAL_UART_Init+0xb8>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c28:	d004      	beq.n	8007c34 <HAL_UART_Init+0xb8>
 8007c2a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007c2e:	482d      	ldr	r0, [pc, #180]	; (8007ce4 <HAL_UART_Init+0x168>)
 8007c30:	f004 fe4c 	bl	800c8cc <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d009      	beq.n	8007c50 <HAL_UART_Init+0xd4>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c44:	d004      	beq.n	8007c50 <HAL_UART_Init+0xd4>
 8007c46:	f240 1153 	movw	r1, #339	; 0x153
 8007c4a:	4826      	ldr	r0, [pc, #152]	; (8007ce4 <HAL_UART_Init+0x168>)
 8007c4c:	f004 fe3e 	bl	800c8cc <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d106      	bne.n	8007c6a <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f005 faf1 	bl	800d24c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2224      	movs	r2, #36	; 0x24
 8007c6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fc34 	bl	80084f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691a      	ldr	r2, [r3, #16]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695a      	ldr	r2, [r3, #20]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ca6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40011000 	.word	0x40011000
 8007cdc:	40004400 	.word	0x40004400
 8007ce0:	40011400 	.word	0x40011400
 8007ce4:	0800fb10 	.word	0x0800fb10

08007ce8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d153      	bne.n	8007daa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_UART_Transmit_DMA+0x26>
 8007d08:	88fb      	ldrh	r3, [r7, #6]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e04c      	b.n	8007dac <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_UART_Transmit_DMA+0x38>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e045      	b.n	8007dac <HAL_UART_Transmit_DMA+0xc4>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2221      	movs	r2, #33	; 0x21
 8007d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	4a19      	ldr	r2, [pc, #100]	; (8007db4 <HAL_UART_Transmit_DMA+0xcc>)
 8007d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d54:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <HAL_UART_Transmit_DMA+0xd0>)
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5c:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <HAL_UART_Transmit_DMA+0xd4>)
 8007d5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	2200      	movs	r2, #0
 8007d66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007d68:	f107 0308 	add.w	r3, r7, #8
 8007d6c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	f7f9 fc68 	bl	8001654 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d8c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695a      	ldr	r2, [r3, #20]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007da4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e000      	b.n	8007dac <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007daa:	2302      	movs	r3, #2
  }
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	080080fd 	.word	0x080080fd
 8007db8:	0800814f 	.word	0x0800814f
 8007dbc:	080081ef 	.word	0x080081ef

08007dc0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	d166      	bne.n	8007ea8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <HAL_UART_Receive_DMA+0x26>
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e05f      	b.n	8007eaa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_UART_Receive_DMA+0x38>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e058      	b.n	8007eaa <HAL_UART_Receive_DMA+0xea>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	88fa      	ldrh	r2, [r7, #6]
 8007e0a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2222      	movs	r2, #34	; 0x22
 8007e16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	4a25      	ldr	r2, [pc, #148]	; (8007eb4 <HAL_UART_Receive_DMA+0xf4>)
 8007e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e26:	4a24      	ldr	r2, [pc, #144]	; (8007eb8 <HAL_UART_Receive_DMA+0xf8>)
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2e:	4a23      	ldr	r2, [pc, #140]	; (8007ebc <HAL_UART_Receive_DMA+0xfc>)
 8007e30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	2200      	movs	r2, #0
 8007e38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007e3a:	f107 0308 	add.w	r3, r7, #8
 8007e3e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	88fb      	ldrh	r3, [r7, #6]
 8007e52:	f7f9 fbff 	bl	8001654 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007e56:	2300      	movs	r3, #0
 8007e58:	613b      	str	r3, [r7, #16]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e82:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ea2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e000      	b.n	8007eaa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007ea8:	2302      	movs	r3, #2
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	0800816b 	.word	0x0800816b
 8007eb8:	080081d3 	.word	0x080081d3
 8007ebc:	080081ef 	.word	0x080081ef

08007ec0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10d      	bne.n	8007f12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <HAL_UART_IRQHandler+0x52>
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa6f 	bl	80083ee <UART_Receive_IT>
      return;
 8007f10:	e0d1      	b.n	80080b6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 80b0 	beq.w	800807a <HAL_UART_IRQHandler+0x1ba>
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d105      	bne.n	8007f30 <HAL_UART_IRQHandler+0x70>
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 80a5 	beq.w	800807a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <HAL_UART_IRQHandler+0x90>
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f48:	f043 0201 	orr.w	r2, r3, #1
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <HAL_UART_IRQHandler+0xb0>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f68:	f043 0202 	orr.w	r2, r3, #2
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <HAL_UART_IRQHandler+0xd0>
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f88:	f043 0204 	orr.w	r2, r3, #4
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f003 0308 	and.w	r3, r3, #8
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00f      	beq.n	8007fba <HAL_UART_IRQHandler+0xfa>
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d104      	bne.n	8007fae <HAL_UART_IRQHandler+0xee>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	f043 0208 	orr.w	r2, r3, #8
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d078      	beq.n	80080b4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <HAL_UART_IRQHandler+0x11c>
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa09 	bl	80083ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe6:	2b40      	cmp	r3, #64	; 0x40
 8007fe8:	bf0c      	ite	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	2300      	movne	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d102      	bne.n	8008004 <HAL_UART_IRQHandler+0x144>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d031      	beq.n	8008068 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f952 	bl	80082ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d123      	bne.n	8008060 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008026:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802c:	2b00      	cmp	r3, #0
 800802e:	d013      	beq.n	8008058 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008034:	4a21      	ldr	r2, [pc, #132]	; (80080bc <HAL_UART_IRQHandler+0x1fc>)
 8008036:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803c:	4618      	mov	r0, r3
 800803e:	f7f9 fb6f 	bl	8001720 <HAL_DMA_Abort_IT>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d016      	beq.n	8008076 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008052:	4610      	mov	r0, r2
 8008054:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008056:	e00e      	b.n	8008076 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f845 	bl	80080e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800805e:	e00a      	b.n	8008076 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f841 	bl	80080e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008066:	e006      	b.n	8008076 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f83d 	bl	80080e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008074:	e01e      	b.n	80080b4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008076:	bf00      	nop
    return;
 8008078:	e01c      	b.n	80080b4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008080:	2b00      	cmp	r3, #0
 8008082:	d008      	beq.n	8008096 <HAL_UART_IRQHandler+0x1d6>
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f93f 	bl	8008312 <UART_Transmit_IT>
    return;
 8008094:	e00f      	b.n	80080b6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00a      	beq.n	80080b6 <HAL_UART_IRQHandler+0x1f6>
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f987 	bl	80083be <UART_EndTransmit_IT>
    return;
 80080b0:	bf00      	nop
 80080b2:	e000      	b.n	80080b6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80080b4:	bf00      	nop
  }
}
 80080b6:	3720      	adds	r7, #32
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	080082eb 	.word	0x080082eb

080080c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d113      	bne.n	8008140 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	695a      	ldr	r2, [r3, #20]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800812c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800813c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800813e:	e002      	b.n	8008146 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f004 ff59 	bl	800cff8 <HAL_UART_TxCpltCallback>
}
 8008146:	bf00      	nop
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff ffaf 	bl	80080c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008162:	bf00      	nop
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008182:	2b00      	cmp	r3, #0
 8008184:	d11e      	bne.n	80081c4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800819a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695a      	ldr	r2, [r3, #20]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695a      	ldr	r2, [r3, #20]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ba:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f002 fce5 	bl	800ab94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff ff77 	bl	80080d4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820a:	2b80      	cmp	r3, #128	; 0x80
 800820c:	bf0c      	ite	eq
 800820e:	2301      	moveq	r3, #1
 8008210:	2300      	movne	r3, #0
 8008212:	b2db      	uxtb	r3, r3
 8008214:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b21      	cmp	r3, #33	; 0x21
 8008220:	d108      	bne.n	8008234 <UART_DMAError+0x46>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2200      	movs	r2, #0
 800822c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800822e:	68b8      	ldr	r0, [r7, #8]
 8008230:	f000 f827 	bl	8008282 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	bf0c      	ite	eq
 8008242:	2301      	moveq	r3, #1
 8008244:	2300      	movne	r3, #0
 8008246:	b2db      	uxtb	r3, r3
 8008248:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b22      	cmp	r3, #34	; 0x22
 8008254:	d108      	bne.n	8008268 <UART_DMAError+0x7a>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008262:	68b8      	ldr	r0, [r7, #8]
 8008264:	f000 f823 	bl	80082ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826c:	f043 0210 	orr.w	r2, r3, #16
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008274:	68b8      	ldr	r0, [r7, #8]
 8008276:	f7ff ff37 	bl	80080e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008298:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80082a2:	bf00      	nop
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695a      	ldr	r2, [r3, #20]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0201 	bic.w	r2, r2, #1
 80082d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f7ff feef 	bl	80080e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008312:	b480      	push	{r7}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b21      	cmp	r3, #33	; 0x21
 8008324:	d144      	bne.n	80083b0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832e:	d11a      	bne.n	8008366 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008344:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d105      	bne.n	800835a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	1c9a      	adds	r2, r3, #2
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	621a      	str	r2, [r3, #32]
 8008358:	e00e      	b.n	8008378 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	621a      	str	r2, [r3, #32]
 8008364:	e008      	b.n	8008378 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	1c59      	adds	r1, r3, #1
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6211      	str	r1, [r2, #32]
 8008370:	781a      	ldrb	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800837c:	b29b      	uxth	r3, r3
 800837e:	3b01      	subs	r3, #1
 8008380:	b29b      	uxth	r3, r3
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	4619      	mov	r1, r3
 8008386:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10f      	bne.n	80083ac <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800839a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e000      	b.n	80083b2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80083b0:	2302      	movs	r3, #2
  }
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f004 fe0a 	bl	800cff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b22      	cmp	r3, #34	; 0x22
 8008400:	d171      	bne.n	80084e6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840a:	d123      	bne.n	8008454 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10e      	bne.n	8008438 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	b29b      	uxth	r3, r3
 8008422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	1c9a      	adds	r2, r3, #2
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	629a      	str	r2, [r3, #40]	; 0x28
 8008436:	e029      	b.n	800848c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b29b      	uxth	r3, r3
 8008440:	b2db      	uxtb	r3, r3
 8008442:	b29a      	uxth	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	629a      	str	r2, [r3, #40]	; 0x28
 8008452:	e01b      	b.n	800848c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6858      	ldr	r0, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	1c59      	adds	r1, r3, #1
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	6291      	str	r1, [r2, #40]	; 0x28
 800846c:	b2c2      	uxtb	r2, r0
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	e00c      	b.n	800848c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	b2da      	uxtb	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	1c58      	adds	r0, r3, #1
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	6288      	str	r0, [r1, #40]	; 0x28
 8008484:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	b29b      	uxth	r3, r3
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	4619      	mov	r1, r3
 800849a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800849c:	2b00      	cmp	r3, #0
 800849e:	d120      	bne.n	80084e2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0220 	bic.w	r2, r2, #32
 80084ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	695a      	ldr	r2, [r3, #20]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f002 fb5b 	bl	800ab94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	e002      	b.n	80084e8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e000      	b.n	80084e8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80084e6:	2302      	movs	r3, #2
  }
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	b085      	sub	sp, #20
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	4a9a      	ldr	r2, [pc, #616]	; (8008768 <UART_SetConfig+0x278>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d904      	bls.n	800850e <UART_SetConfig+0x1e>
 8008504:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8008508:	4898      	ldr	r0, [pc, #608]	; (800876c <UART_SetConfig+0x27c>)
 800850a:	f004 f9df 	bl	800c8cc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <UART_SetConfig+0x3a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800851e:	d004      	beq.n	800852a <UART_SetConfig+0x3a>
 8008520:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8008524:	4891      	ldr	r0, [pc, #580]	; (800876c <UART_SetConfig+0x27c>)
 8008526:	f004 f9d1 	bl	800c8cc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00e      	beq.n	8008550 <UART_SetConfig+0x60>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800853a:	d009      	beq.n	8008550 <UART_SetConfig+0x60>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008544:	d004      	beq.n	8008550 <UART_SetConfig+0x60>
 8008546:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800854a:	4888      	ldr	r0, [pc, #544]	; (800876c <UART_SetConfig+0x27c>)
 800854c:	f004 f9be 	bl	800c8cc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	695a      	ldr	r2, [r3, #20]
 8008554:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008558:	4013      	ands	r3, r2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d103      	bne.n	8008566 <UART_SetConfig+0x76>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d104      	bne.n	8008570 <UART_SetConfig+0x80>
 8008566:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800856a:	4880      	ldr	r0, [pc, #512]	; (800876c <UART_SetConfig+0x27c>)
 800856c:	f004 f9ae 	bl	800c8cc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	431a      	orrs	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80085a8:	f023 030c 	bic.w	r3, r3, #12
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	6812      	ldr	r2, [r2, #0]
 80085b0:	68f9      	ldr	r1, [r7, #12]
 80085b2:	430b      	orrs	r3, r1
 80085b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	699a      	ldr	r2, [r3, #24]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d4:	f040 818f 	bne.w	80088f6 <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a64      	ldr	r2, [pc, #400]	; (8008770 <UART_SetConfig+0x280>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d005      	beq.n	80085ee <UART_SetConfig+0xfe>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a63      	ldr	r2, [pc, #396]	; (8008774 <UART_SetConfig+0x284>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	f040 80c7 	bne.w	800877c <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085ee:	f7fc f9ab 	bl	8004948 <HAL_RCC_GetPCLK2Freq>
 80085f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	461d      	mov	r5, r3
 80085f8:	f04f 0600 	mov.w	r6, #0
 80085fc:	46a8      	mov	r8, r5
 80085fe:	46b1      	mov	r9, r6
 8008600:	eb18 0308 	adds.w	r3, r8, r8
 8008604:	eb49 0409 	adc.w	r4, r9, r9
 8008608:	4698      	mov	r8, r3
 800860a:	46a1      	mov	r9, r4
 800860c:	eb18 0805 	adds.w	r8, r8, r5
 8008610:	eb49 0906 	adc.w	r9, r9, r6
 8008614:	f04f 0100 	mov.w	r1, #0
 8008618:	f04f 0200 	mov.w	r2, #0
 800861c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008620:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008624:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008628:	4688      	mov	r8, r1
 800862a:	4691      	mov	r9, r2
 800862c:	eb18 0005 	adds.w	r0, r8, r5
 8008630:	eb49 0106 	adc.w	r1, r9, r6
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	461d      	mov	r5, r3
 800863a:	f04f 0600 	mov.w	r6, #0
 800863e:	196b      	adds	r3, r5, r5
 8008640:	eb46 0406 	adc.w	r4, r6, r6
 8008644:	461a      	mov	r2, r3
 8008646:	4623      	mov	r3, r4
 8008648:	f7f8 fab6 	bl	8000bb8 <__aeabi_uldivmod>
 800864c:	4603      	mov	r3, r0
 800864e:	460c      	mov	r4, r1
 8008650:	461a      	mov	r2, r3
 8008652:	4b49      	ldr	r3, [pc, #292]	; (8008778 <UART_SetConfig+0x288>)
 8008654:	fba3 2302 	umull	r2, r3, r3, r2
 8008658:	095b      	lsrs	r3, r3, #5
 800865a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	461d      	mov	r5, r3
 8008662:	f04f 0600 	mov.w	r6, #0
 8008666:	46a9      	mov	r9, r5
 8008668:	46b2      	mov	sl, r6
 800866a:	eb19 0309 	adds.w	r3, r9, r9
 800866e:	eb4a 040a 	adc.w	r4, sl, sl
 8008672:	4699      	mov	r9, r3
 8008674:	46a2      	mov	sl, r4
 8008676:	eb19 0905 	adds.w	r9, r9, r5
 800867a:	eb4a 0a06 	adc.w	sl, sl, r6
 800867e:	f04f 0100 	mov.w	r1, #0
 8008682:	f04f 0200 	mov.w	r2, #0
 8008686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800868a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800868e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008692:	4689      	mov	r9, r1
 8008694:	4692      	mov	sl, r2
 8008696:	eb19 0005 	adds.w	r0, r9, r5
 800869a:	eb4a 0106 	adc.w	r1, sl, r6
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	461d      	mov	r5, r3
 80086a4:	f04f 0600 	mov.w	r6, #0
 80086a8:	196b      	adds	r3, r5, r5
 80086aa:	eb46 0406 	adc.w	r4, r6, r6
 80086ae:	461a      	mov	r2, r3
 80086b0:	4623      	mov	r3, r4
 80086b2:	f7f8 fa81 	bl	8000bb8 <__aeabi_uldivmod>
 80086b6:	4603      	mov	r3, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	461a      	mov	r2, r3
 80086bc:	4b2e      	ldr	r3, [pc, #184]	; (8008778 <UART_SetConfig+0x288>)
 80086be:	fba3 1302 	umull	r1, r3, r3, r2
 80086c2:	095b      	lsrs	r3, r3, #5
 80086c4:	2164      	movs	r1, #100	; 0x64
 80086c6:	fb01 f303 	mul.w	r3, r1, r3
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	3332      	adds	r3, #50	; 0x32
 80086d0:	4a29      	ldr	r2, [pc, #164]	; (8008778 <UART_SetConfig+0x288>)
 80086d2:	fba2 2303 	umull	r2, r3, r2, r3
 80086d6:	095b      	lsrs	r3, r3, #5
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086de:	4498      	add	r8, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	461d      	mov	r5, r3
 80086e4:	f04f 0600 	mov.w	r6, #0
 80086e8:	46a9      	mov	r9, r5
 80086ea:	46b2      	mov	sl, r6
 80086ec:	eb19 0309 	adds.w	r3, r9, r9
 80086f0:	eb4a 040a 	adc.w	r4, sl, sl
 80086f4:	4699      	mov	r9, r3
 80086f6:	46a2      	mov	sl, r4
 80086f8:	eb19 0905 	adds.w	r9, r9, r5
 80086fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8008700:	f04f 0100 	mov.w	r1, #0
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800870c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008710:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008714:	4689      	mov	r9, r1
 8008716:	4692      	mov	sl, r2
 8008718:	eb19 0005 	adds.w	r0, r9, r5
 800871c:	eb4a 0106 	adc.w	r1, sl, r6
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	461d      	mov	r5, r3
 8008726:	f04f 0600 	mov.w	r6, #0
 800872a:	196b      	adds	r3, r5, r5
 800872c:	eb46 0406 	adc.w	r4, r6, r6
 8008730:	461a      	mov	r2, r3
 8008732:	4623      	mov	r3, r4
 8008734:	f7f8 fa40 	bl	8000bb8 <__aeabi_uldivmod>
 8008738:	4603      	mov	r3, r0
 800873a:	460c      	mov	r4, r1
 800873c:	461a      	mov	r2, r3
 800873e:	4b0e      	ldr	r3, [pc, #56]	; (8008778 <UART_SetConfig+0x288>)
 8008740:	fba3 1302 	umull	r1, r3, r3, r2
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	2164      	movs	r1, #100	; 0x64
 8008748:	fb01 f303 	mul.w	r3, r1, r3
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	3332      	adds	r3, #50	; 0x32
 8008752:	4a09      	ldr	r2, [pc, #36]	; (8008778 <UART_SetConfig+0x288>)
 8008754:	fba2 2303 	umull	r2, r3, r2, r3
 8008758:	095b      	lsrs	r3, r3, #5
 800875a:	f003 0207 	and.w	r2, r3, #7
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4442      	add	r2, r8
 8008764:	609a      	str	r2, [r3, #8]
 8008766:	e27a      	b.n	8008c5e <UART_SetConfig+0x76e>
 8008768:	00a037a0 	.word	0x00a037a0
 800876c:	0800fb10 	.word	0x0800fb10
 8008770:	40011000 	.word	0x40011000
 8008774:	40011400 	.word	0x40011400
 8008778:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800877c:	f7fc f8d0 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8008780:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	461d      	mov	r5, r3
 8008786:	f04f 0600 	mov.w	r6, #0
 800878a:	46a8      	mov	r8, r5
 800878c:	46b1      	mov	r9, r6
 800878e:	eb18 0308 	adds.w	r3, r8, r8
 8008792:	eb49 0409 	adc.w	r4, r9, r9
 8008796:	4698      	mov	r8, r3
 8008798:	46a1      	mov	r9, r4
 800879a:	eb18 0805 	adds.w	r8, r8, r5
 800879e:	eb49 0906 	adc.w	r9, r9, r6
 80087a2:	f04f 0100 	mov.w	r1, #0
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087b6:	4688      	mov	r8, r1
 80087b8:	4691      	mov	r9, r2
 80087ba:	eb18 0005 	adds.w	r0, r8, r5
 80087be:	eb49 0106 	adc.w	r1, r9, r6
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	461d      	mov	r5, r3
 80087c8:	f04f 0600 	mov.w	r6, #0
 80087cc:	196b      	adds	r3, r5, r5
 80087ce:	eb46 0406 	adc.w	r4, r6, r6
 80087d2:	461a      	mov	r2, r3
 80087d4:	4623      	mov	r3, r4
 80087d6:	f7f8 f9ef 	bl	8000bb8 <__aeabi_uldivmod>
 80087da:	4603      	mov	r3, r0
 80087dc:	460c      	mov	r4, r1
 80087de:	461a      	mov	r2, r3
 80087e0:	4bb3      	ldr	r3, [pc, #716]	; (8008ab0 <UART_SetConfig+0x5c0>)
 80087e2:	fba3 2302 	umull	r2, r3, r3, r2
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	461d      	mov	r5, r3
 80087f0:	f04f 0600 	mov.w	r6, #0
 80087f4:	46a9      	mov	r9, r5
 80087f6:	46b2      	mov	sl, r6
 80087f8:	eb19 0309 	adds.w	r3, r9, r9
 80087fc:	eb4a 040a 	adc.w	r4, sl, sl
 8008800:	4699      	mov	r9, r3
 8008802:	46a2      	mov	sl, r4
 8008804:	eb19 0905 	adds.w	r9, r9, r5
 8008808:	eb4a 0a06 	adc.w	sl, sl, r6
 800880c:	f04f 0100 	mov.w	r1, #0
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008818:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800881c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008820:	4689      	mov	r9, r1
 8008822:	4692      	mov	sl, r2
 8008824:	eb19 0005 	adds.w	r0, r9, r5
 8008828:	eb4a 0106 	adc.w	r1, sl, r6
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	461d      	mov	r5, r3
 8008832:	f04f 0600 	mov.w	r6, #0
 8008836:	196b      	adds	r3, r5, r5
 8008838:	eb46 0406 	adc.w	r4, r6, r6
 800883c:	461a      	mov	r2, r3
 800883e:	4623      	mov	r3, r4
 8008840:	f7f8 f9ba 	bl	8000bb8 <__aeabi_uldivmod>
 8008844:	4603      	mov	r3, r0
 8008846:	460c      	mov	r4, r1
 8008848:	461a      	mov	r2, r3
 800884a:	4b99      	ldr	r3, [pc, #612]	; (8008ab0 <UART_SetConfig+0x5c0>)
 800884c:	fba3 1302 	umull	r1, r3, r3, r2
 8008850:	095b      	lsrs	r3, r3, #5
 8008852:	2164      	movs	r1, #100	; 0x64
 8008854:	fb01 f303 	mul.w	r3, r1, r3
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	3332      	adds	r3, #50	; 0x32
 800885e:	4a94      	ldr	r2, [pc, #592]	; (8008ab0 <UART_SetConfig+0x5c0>)
 8008860:	fba2 2303 	umull	r2, r3, r2, r3
 8008864:	095b      	lsrs	r3, r3, #5
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800886c:	4498      	add	r8, r3
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	461d      	mov	r5, r3
 8008872:	f04f 0600 	mov.w	r6, #0
 8008876:	46a9      	mov	r9, r5
 8008878:	46b2      	mov	sl, r6
 800887a:	eb19 0309 	adds.w	r3, r9, r9
 800887e:	eb4a 040a 	adc.w	r4, sl, sl
 8008882:	4699      	mov	r9, r3
 8008884:	46a2      	mov	sl, r4
 8008886:	eb19 0905 	adds.w	r9, r9, r5
 800888a:	eb4a 0a06 	adc.w	sl, sl, r6
 800888e:	f04f 0100 	mov.w	r1, #0
 8008892:	f04f 0200 	mov.w	r2, #0
 8008896:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800889a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800889e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088a2:	4689      	mov	r9, r1
 80088a4:	4692      	mov	sl, r2
 80088a6:	eb19 0005 	adds.w	r0, r9, r5
 80088aa:	eb4a 0106 	adc.w	r1, sl, r6
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	461d      	mov	r5, r3
 80088b4:	f04f 0600 	mov.w	r6, #0
 80088b8:	196b      	adds	r3, r5, r5
 80088ba:	eb46 0406 	adc.w	r4, r6, r6
 80088be:	461a      	mov	r2, r3
 80088c0:	4623      	mov	r3, r4
 80088c2:	f7f8 f979 	bl	8000bb8 <__aeabi_uldivmod>
 80088c6:	4603      	mov	r3, r0
 80088c8:	460c      	mov	r4, r1
 80088ca:	461a      	mov	r2, r3
 80088cc:	4b78      	ldr	r3, [pc, #480]	; (8008ab0 <UART_SetConfig+0x5c0>)
 80088ce:	fba3 1302 	umull	r1, r3, r3, r2
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	2164      	movs	r1, #100	; 0x64
 80088d6:	fb01 f303 	mul.w	r3, r1, r3
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	3332      	adds	r3, #50	; 0x32
 80088e0:	4a73      	ldr	r2, [pc, #460]	; (8008ab0 <UART_SetConfig+0x5c0>)
 80088e2:	fba2 2303 	umull	r2, r3, r2, r3
 80088e6:	095b      	lsrs	r3, r3, #5
 80088e8:	f003 0207 	and.w	r2, r3, #7
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4442      	add	r2, r8
 80088f2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80088f4:	e1b3      	b.n	8008c5e <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a6e      	ldr	r2, [pc, #440]	; (8008ab4 <UART_SetConfig+0x5c4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d005      	beq.n	800890c <UART_SetConfig+0x41c>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a6c      	ldr	r2, [pc, #432]	; (8008ab8 <UART_SetConfig+0x5c8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	f040 80d8 	bne.w	8008abc <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 800890c:	f7fc f81c 	bl	8004948 <HAL_RCC_GetPCLK2Freq>
 8008910:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	469a      	mov	sl, r3
 8008916:	f04f 0b00 	mov.w	fp, #0
 800891a:	46d0      	mov	r8, sl
 800891c:	46d9      	mov	r9, fp
 800891e:	eb18 0308 	adds.w	r3, r8, r8
 8008922:	eb49 0409 	adc.w	r4, r9, r9
 8008926:	4698      	mov	r8, r3
 8008928:	46a1      	mov	r9, r4
 800892a:	eb18 080a 	adds.w	r8, r8, sl
 800892e:	eb49 090b 	adc.w	r9, r9, fp
 8008932:	f04f 0100 	mov.w	r1, #0
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800893e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008942:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008946:	4688      	mov	r8, r1
 8008948:	4691      	mov	r9, r2
 800894a:	eb1a 0508 	adds.w	r5, sl, r8
 800894e:	eb4b 0609 	adc.w	r6, fp, r9
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	4619      	mov	r1, r3
 8008958:	f04f 0200 	mov.w	r2, #0
 800895c:	f04f 0300 	mov.w	r3, #0
 8008960:	f04f 0400 	mov.w	r4, #0
 8008964:	0094      	lsls	r4, r2, #2
 8008966:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800896a:	008b      	lsls	r3, r1, #2
 800896c:	461a      	mov	r2, r3
 800896e:	4623      	mov	r3, r4
 8008970:	4628      	mov	r0, r5
 8008972:	4631      	mov	r1, r6
 8008974:	f7f8 f920 	bl	8000bb8 <__aeabi_uldivmod>
 8008978:	4603      	mov	r3, r0
 800897a:	460c      	mov	r4, r1
 800897c:	461a      	mov	r2, r3
 800897e:	4b4c      	ldr	r3, [pc, #304]	; (8008ab0 <UART_SetConfig+0x5c0>)
 8008980:	fba3 2302 	umull	r2, r3, r3, r2
 8008984:	095b      	lsrs	r3, r3, #5
 8008986:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	469b      	mov	fp, r3
 800898e:	f04f 0c00 	mov.w	ip, #0
 8008992:	46d9      	mov	r9, fp
 8008994:	46e2      	mov	sl, ip
 8008996:	eb19 0309 	adds.w	r3, r9, r9
 800899a:	eb4a 040a 	adc.w	r4, sl, sl
 800899e:	4699      	mov	r9, r3
 80089a0:	46a2      	mov	sl, r4
 80089a2:	eb19 090b 	adds.w	r9, r9, fp
 80089a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80089aa:	f04f 0100 	mov.w	r1, #0
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089be:	4689      	mov	r9, r1
 80089c0:	4692      	mov	sl, r2
 80089c2:	eb1b 0509 	adds.w	r5, fp, r9
 80089c6:	eb4c 060a 	adc.w	r6, ip, sl
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	4619      	mov	r1, r3
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	f04f 0400 	mov.w	r4, #0
 80089dc:	0094      	lsls	r4, r2, #2
 80089de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089e2:	008b      	lsls	r3, r1, #2
 80089e4:	461a      	mov	r2, r3
 80089e6:	4623      	mov	r3, r4
 80089e8:	4628      	mov	r0, r5
 80089ea:	4631      	mov	r1, r6
 80089ec:	f7f8 f8e4 	bl	8000bb8 <__aeabi_uldivmod>
 80089f0:	4603      	mov	r3, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	461a      	mov	r2, r3
 80089f6:	4b2e      	ldr	r3, [pc, #184]	; (8008ab0 <UART_SetConfig+0x5c0>)
 80089f8:	fba3 1302 	umull	r1, r3, r3, r2
 80089fc:	095b      	lsrs	r3, r3, #5
 80089fe:	2164      	movs	r1, #100	; 0x64
 8008a00:	fb01 f303 	mul.w	r3, r1, r3
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	3332      	adds	r3, #50	; 0x32
 8008a0a:	4a29      	ldr	r2, [pc, #164]	; (8008ab0 <UART_SetConfig+0x5c0>)
 8008a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a10:	095b      	lsrs	r3, r3, #5
 8008a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a16:	4498      	add	r8, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	469b      	mov	fp, r3
 8008a1c:	f04f 0c00 	mov.w	ip, #0
 8008a20:	46d9      	mov	r9, fp
 8008a22:	46e2      	mov	sl, ip
 8008a24:	eb19 0309 	adds.w	r3, r9, r9
 8008a28:	eb4a 040a 	adc.w	r4, sl, sl
 8008a2c:	4699      	mov	r9, r3
 8008a2e:	46a2      	mov	sl, r4
 8008a30:	eb19 090b 	adds.w	r9, r9, fp
 8008a34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a38:	f04f 0100 	mov.w	r1, #0
 8008a3c:	f04f 0200 	mov.w	r2, #0
 8008a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a4c:	4689      	mov	r9, r1
 8008a4e:	4692      	mov	sl, r2
 8008a50:	eb1b 0509 	adds.w	r5, fp, r9
 8008a54:	eb4c 060a 	adc.w	r6, ip, sl
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f04f 0200 	mov.w	r2, #0
 8008a62:	f04f 0300 	mov.w	r3, #0
 8008a66:	f04f 0400 	mov.w	r4, #0
 8008a6a:	0094      	lsls	r4, r2, #2
 8008a6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a70:	008b      	lsls	r3, r1, #2
 8008a72:	461a      	mov	r2, r3
 8008a74:	4623      	mov	r3, r4
 8008a76:	4628      	mov	r0, r5
 8008a78:	4631      	mov	r1, r6
 8008a7a:	f7f8 f89d 	bl	8000bb8 <__aeabi_uldivmod>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	460c      	mov	r4, r1
 8008a82:	461a      	mov	r2, r3
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <UART_SetConfig+0x5c0>)
 8008a86:	fba3 1302 	umull	r1, r3, r3, r2
 8008a8a:	095b      	lsrs	r3, r3, #5
 8008a8c:	2164      	movs	r1, #100	; 0x64
 8008a8e:	fb01 f303 	mul.w	r3, r1, r3
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	3332      	adds	r3, #50	; 0x32
 8008a98:	4a05      	ldr	r2, [pc, #20]	; (8008ab0 <UART_SetConfig+0x5c0>)
 8008a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9e:	095b      	lsrs	r3, r3, #5
 8008aa0:	f003 020f 	and.w	r2, r3, #15
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4442      	add	r2, r8
 8008aaa:	609a      	str	r2, [r3, #8]
 8008aac:	e0d7      	b.n	8008c5e <UART_SetConfig+0x76e>
 8008aae:	bf00      	nop
 8008ab0:	51eb851f 	.word	0x51eb851f
 8008ab4:	40011000 	.word	0x40011000
 8008ab8:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8008abc:	f7fb ff30 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8008ac0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	469a      	mov	sl, r3
 8008ac6:	f04f 0b00 	mov.w	fp, #0
 8008aca:	46d0      	mov	r8, sl
 8008acc:	46d9      	mov	r9, fp
 8008ace:	eb18 0308 	adds.w	r3, r8, r8
 8008ad2:	eb49 0409 	adc.w	r4, r9, r9
 8008ad6:	4698      	mov	r8, r3
 8008ad8:	46a1      	mov	r9, r4
 8008ada:	eb18 080a 	adds.w	r8, r8, sl
 8008ade:	eb49 090b 	adc.w	r9, r9, fp
 8008ae2:	f04f 0100 	mov.w	r1, #0
 8008ae6:	f04f 0200 	mov.w	r2, #0
 8008aea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008aee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008af2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008af6:	4688      	mov	r8, r1
 8008af8:	4691      	mov	r9, r2
 8008afa:	eb1a 0508 	adds.w	r5, sl, r8
 8008afe:	eb4b 0609 	adc.w	r6, fp, r9
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	4619      	mov	r1, r3
 8008b08:	f04f 0200 	mov.w	r2, #0
 8008b0c:	f04f 0300 	mov.w	r3, #0
 8008b10:	f04f 0400 	mov.w	r4, #0
 8008b14:	0094      	lsls	r4, r2, #2
 8008b16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b1a:	008b      	lsls	r3, r1, #2
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	4623      	mov	r3, r4
 8008b20:	4628      	mov	r0, r5
 8008b22:	4631      	mov	r1, r6
 8008b24:	f7f8 f848 	bl	8000bb8 <__aeabi_uldivmod>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	4b4e      	ldr	r3, [pc, #312]	; (8008c68 <UART_SetConfig+0x778>)
 8008b30:	fba3 2302 	umull	r2, r3, r3, r2
 8008b34:	095b      	lsrs	r3, r3, #5
 8008b36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	469b      	mov	fp, r3
 8008b3e:	f04f 0c00 	mov.w	ip, #0
 8008b42:	46d9      	mov	r9, fp
 8008b44:	46e2      	mov	sl, ip
 8008b46:	eb19 0309 	adds.w	r3, r9, r9
 8008b4a:	eb4a 040a 	adc.w	r4, sl, sl
 8008b4e:	4699      	mov	r9, r3
 8008b50:	46a2      	mov	sl, r4
 8008b52:	eb19 090b 	adds.w	r9, r9, fp
 8008b56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b5a:	f04f 0100 	mov.w	r1, #0
 8008b5e:	f04f 0200 	mov.w	r2, #0
 8008b62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b6e:	4689      	mov	r9, r1
 8008b70:	4692      	mov	sl, r2
 8008b72:	eb1b 0509 	adds.w	r5, fp, r9
 8008b76:	eb4c 060a 	adc.w	r6, ip, sl
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	f04f 0300 	mov.w	r3, #0
 8008b88:	f04f 0400 	mov.w	r4, #0
 8008b8c:	0094      	lsls	r4, r2, #2
 8008b8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b92:	008b      	lsls	r3, r1, #2
 8008b94:	461a      	mov	r2, r3
 8008b96:	4623      	mov	r3, r4
 8008b98:	4628      	mov	r0, r5
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	f7f8 f80c 	bl	8000bb8 <__aeabi_uldivmod>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4b30      	ldr	r3, [pc, #192]	; (8008c68 <UART_SetConfig+0x778>)
 8008ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bac:	095b      	lsrs	r3, r3, #5
 8008bae:	2164      	movs	r1, #100	; 0x64
 8008bb0:	fb01 f303 	mul.w	r3, r1, r3
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	011b      	lsls	r3, r3, #4
 8008bb8:	3332      	adds	r3, #50	; 0x32
 8008bba:	4a2b      	ldr	r2, [pc, #172]	; (8008c68 <UART_SetConfig+0x778>)
 8008bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bc6:	4498      	add	r8, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	469b      	mov	fp, r3
 8008bcc:	f04f 0c00 	mov.w	ip, #0
 8008bd0:	46d9      	mov	r9, fp
 8008bd2:	46e2      	mov	sl, ip
 8008bd4:	eb19 0309 	adds.w	r3, r9, r9
 8008bd8:	eb4a 040a 	adc.w	r4, sl, sl
 8008bdc:	4699      	mov	r9, r3
 8008bde:	46a2      	mov	sl, r4
 8008be0:	eb19 090b 	adds.w	r9, r9, fp
 8008be4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008be8:	f04f 0100 	mov.w	r1, #0
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bfc:	4689      	mov	r9, r1
 8008bfe:	4692      	mov	sl, r2
 8008c00:	eb1b 0509 	adds.w	r5, fp, r9
 8008c04:	eb4c 060a 	adc.w	r6, ip, sl
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	f04f 0200 	mov.w	r2, #0
 8008c12:	f04f 0300 	mov.w	r3, #0
 8008c16:	f04f 0400 	mov.w	r4, #0
 8008c1a:	0094      	lsls	r4, r2, #2
 8008c1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c20:	008b      	lsls	r3, r1, #2
 8008c22:	461a      	mov	r2, r3
 8008c24:	4623      	mov	r3, r4
 8008c26:	4628      	mov	r0, r5
 8008c28:	4631      	mov	r1, r6
 8008c2a:	f7f7 ffc5 	bl	8000bb8 <__aeabi_uldivmod>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	460c      	mov	r4, r1
 8008c32:	461a      	mov	r2, r3
 8008c34:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <UART_SetConfig+0x778>)
 8008c36:	fba3 1302 	umull	r1, r3, r3, r2
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	2164      	movs	r1, #100	; 0x64
 8008c3e:	fb01 f303 	mul.w	r3, r1, r3
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	3332      	adds	r3, #50	; 0x32
 8008c48:	4a07      	ldr	r2, [pc, #28]	; (8008c68 <UART_SetConfig+0x778>)
 8008c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4e:	095b      	lsrs	r3, r3, #5
 8008c50:	f003 020f 	and.w	r2, r3, #15
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4442      	add	r2, r8
 8008c5a:	609a      	str	r2, [r3, #8]
}
 8008c5c:	e7ff      	b.n	8008c5e <UART_SetConfig+0x76e>
 8008c5e:	bf00      	nop
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c68:	51eb851f 	.word	0x51eb851f

08008c6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c7e:	2b84      	cmp	r3, #132	; 0x84
 8008c80:	d005      	beq.n	8008c8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008c82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4413      	add	r3, r2
 8008c8a:	3303      	adds	r3, #3
 8008c8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca2:	f3ef 8305 	mrs	r3, IPSR
 8008ca6:	607b      	str	r3, [r7, #4]
  return(result);
 8008ca8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bf14      	ite	ne
 8008cae:	2301      	movne	r3, #1
 8008cb0:	2300      	moveq	r3, #0
 8008cb2:	b2db      	uxtb	r3, r3
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008cc4:	f000 fb38 	bl	8009338 <vTaskStartScheduler>
  
  return osOK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cd0:	b089      	sub	sp, #36	; 0x24
 8008cd2:	af04      	add	r7, sp, #16
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d020      	beq.n	8008d22 <osThreadCreate+0x54>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01c      	beq.n	8008d22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685c      	ldr	r4, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681d      	ldr	r5, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691e      	ldr	r6, [r3, #16]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff ffb6 	bl	8008c6c <makeFreeRtosPriority>
 8008d00:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d0a:	9202      	str	r2, [sp, #8]
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	9100      	str	r1, [sp, #0]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	4632      	mov	r2, r6
 8008d14:	4629      	mov	r1, r5
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 f966 	bl	8008fe8 <xTaskCreateStatic>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	e01c      	b.n	8008d5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685c      	ldr	r4, [r3, #4]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d2e:	b29e      	uxth	r6, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7ff ff98 	bl	8008c6c <makeFreeRtosPriority>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	f107 030c 	add.w	r3, r7, #12
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	9200      	str	r2, [sp, #0]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	4632      	mov	r2, r6
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 f9a5 	bl	800909c <xTaskCreate>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d001      	beq.n	8008d5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e000      	b.n	8008d5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008d68 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8008d7a:	f7ff ff8f 	bl	8008c9c <inHandlerMode>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d01c      	beq.n	8008dbe <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	f107 0208 	add.w	r2, r7, #8
 8008d8a:	f107 030c 	add.w	r3, r7, #12
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	4613      	mov	r3, r2
 8008d92:	2201      	movs	r2, #1
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 ff0d 	bl	8009bb4 <xTaskGenericNotifyFromISR>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d002      	beq.n	8008da6 <osSignalSet+0x3e>
      return 0x80000000;
 8008da0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008da4:	e019      	b.n	8008dda <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d015      	beq.n	8008dd8 <osSignalSet+0x70>
 8008dac:	4b0d      	ldr	r3, [pc, #52]	; (8008de4 <osSignalSet+0x7c>)
 8008dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	e00c      	b.n	8008dd8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	f107 0308 	add.w	r3, r7, #8
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fe38 	bl	8009a3c <xTaskGenericNotify>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d002      	beq.n	8008dd8 <osSignalSet+0x70>
    return 0x80000000;
 8008dd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dd6:	e000      	b.n	8008dda <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	e000ed04 	.word	0xe000ed04

08008de8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008de8:	b590      	push	{r4, r7, lr}
 8008dea:	b089      	sub	sp, #36	; 0x24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8008df4:	2300      	movs	r3, #0
 8008df6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d103      	bne.n	8008e0c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295
 8008e08:	61fb      	str	r3, [r7, #28]
 8008e0a:	e009      	b.n	8008e20 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d006      	beq.n	8008e20 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <osSignalWait+0x38>
      ticks = 1;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8008e20:	f7ff ff3c 	bl	8008c9c <inHandlerMode>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8008e2a:	2382      	movs	r3, #130	; 0x82
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	e01b      	b.n	8008e68 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	f107 0310 	add.w	r3, r7, #16
 8008e36:	1d1a      	adds	r2, r3, #4
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	f000 fd9e 	bl	800997c <xTaskNotifyWait>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d008      	beq.n	8008e58 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d102      	bne.n	8008e52 <osSignalWait+0x6a>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	613b      	str	r3, [r7, #16]
 8008e50:	e00a      	b.n	8008e68 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8008e52:	2340      	movs	r3, #64	; 0x40
 8008e54:	613b      	str	r3, [r7, #16]
 8008e56:	e007      	b.n	8008e68 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	da02      	bge.n	8008e64 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8008e5e:	2386      	movs	r3, #134	; 0x86
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	e001      	b.n	8008e68 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8008e64:	2308      	movs	r3, #8
 8008e66:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	461c      	mov	r4, r3
 8008e6c:	f107 0310 	add.w	r3, r7, #16
 8008e70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	3724      	adds	r7, #36	; 0x24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd90      	pop	{r4, r7, pc}

08008e80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f103 0208 	add.w	r2, r3, #8
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f04f 32ff 	mov.w	r2, #4294967295
 8008e98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f103 0208 	add.w	r2, r3, #8
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f103 0208 	add.w	r2, r3, #8
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	601a      	str	r2, [r3, #0]
}
 8008f16:	bf00      	nop
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f38:	d103      	bne.n	8008f42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	e00c      	b.n	8008f5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	3308      	adds	r3, #8
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	e002      	b.n	8008f50 <vListInsert+0x2e>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d2f6      	bcs.n	8008f4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	601a      	str	r2, [r3, #0]
}
 8008f88:	bf00      	nop
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6892      	ldr	r2, [r2, #8]
 8008faa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6852      	ldr	r2, [r2, #4]
 8008fb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d103      	bne.n	8008fc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689a      	ldr	r2, [r3, #8]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	1e5a      	subs	r2, r3, #1
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08e      	sub	sp, #56	; 0x38
 8008fec:	af04      	add	r7, sp, #16
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d109      	bne.n	8009010 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	623b      	str	r3, [r7, #32]
 800900e:	e7fe      	b.n	800900e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <xTaskCreateStatic+0x42>
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	61fb      	str	r3, [r7, #28]
 8009028:	e7fe      	b.n	8009028 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800902a:	23b4      	movs	r3, #180	; 0xb4
 800902c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2bb4      	cmp	r3, #180	; 0xb4
 8009032:	d009      	beq.n	8009048 <xTaskCreateStatic+0x60>
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	e7fe      	b.n	8009046 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009048:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d01e      	beq.n	800908e <xTaskCreateStatic+0xa6>
 8009050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009052:	2b00      	cmp	r3, #0
 8009054:	d01b      	beq.n	800908e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800905e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	2202      	movs	r2, #2
 8009064:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009068:	2300      	movs	r3, #0
 800906a:	9303      	str	r3, [sp, #12]
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	9302      	str	r3, [sp, #8]
 8009070:	f107 0314 	add.w	r3, r7, #20
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	68b9      	ldr	r1, [r7, #8]
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f851 	bl	8009128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009088:	f000 f8ec 	bl	8009264 <prvAddNewTaskToReadyList>
 800908c:	e001      	b.n	8009092 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009092:	697b      	ldr	r3, [r7, #20]
	}
 8009094:	4618      	mov	r0, r3
 8009096:	3728      	adds	r7, #40	; 0x28
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08c      	sub	sp, #48	; 0x30
 80090a0:	af04      	add	r7, sp, #16
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	4613      	mov	r3, r2
 80090aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090ac:	88fb      	ldrh	r3, [r7, #6]
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f001 feab 	bl	800ae0c <pvPortMalloc>
 80090b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00e      	beq.n	80090dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090be:	20b4      	movs	r0, #180	; 0xb4
 80090c0:	f001 fea4 	bl	800ae0c <pvPortMalloc>
 80090c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	631a      	str	r2, [r3, #48]	; 0x30
 80090d2:	e005      	b.n	80090e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090d4:	6978      	ldr	r0, [r7, #20]
 80090d6:	f001 fea7 	bl	800ae28 <vPortFree>
 80090da:	e001      	b.n	80090e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d017      	beq.n	8009116 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090ee:	88fa      	ldrh	r2, [r7, #6]
 80090f0:	2300      	movs	r3, #0
 80090f2:	9303      	str	r3, [sp, #12]
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	9302      	str	r3, [sp, #8]
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	68b9      	ldr	r1, [r7, #8]
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f80f 	bl	8009128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800910a:	69f8      	ldr	r0, [r7, #28]
 800910c:	f000 f8aa 	bl	8009264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009110:	2301      	movs	r3, #1
 8009112:	61bb      	str	r3, [r7, #24]
 8009114:	e002      	b.n	800911c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009116:	f04f 33ff 	mov.w	r3, #4294967295
 800911a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800911c:	69bb      	ldr	r3, [r7, #24]
	}
 800911e:	4618      	mov	r0, r3
 8009120:	3720      	adds	r7, #32
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b088      	sub	sp, #32
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009140:	3b01      	subs	r3, #1
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	f023 0307 	bic.w	r3, r3, #7
 800914e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <prvInitialiseNewTask+0x46>
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	e7fe      	b.n	800916c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01f      	beq.n	80091b4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	e012      	b.n	80091a0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	4413      	add	r3, r2
 8009180:	7819      	ldrb	r1, [r3, #0]
 8009182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	4413      	add	r3, r2
 8009188:	3334      	adds	r3, #52	; 0x34
 800918a:	460a      	mov	r2, r1
 800918c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	4413      	add	r3, r2
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d006      	beq.n	80091a8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	3301      	adds	r3, #1
 800919e:	61fb      	str	r3, [r7, #28]
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	2b0f      	cmp	r3, #15
 80091a4:	d9e9      	bls.n	800917a <prvInitialiseNewTask+0x52>
 80091a6:	e000      	b.n	80091aa <prvInitialiseNewTask+0x82>
			{
				break;
 80091a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091b2:	e003      	b.n	80091bc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d901      	bls.n	80091c6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091c2:	2306      	movs	r3, #6
 80091c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	2200      	movs	r2, #0
 80091d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	3304      	adds	r3, #4
 80091dc:	4618      	mov	r0, r3
 80091de:	f7ff fe6f 	bl	8008ec0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	3318      	adds	r3, #24
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff fe6a 	bl	8008ec0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	f1c3 0207 	rsb	r2, r3, #7
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009200:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	2200      	movs	r2, #0
 8009206:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	2200      	movs	r2, #0
 800920e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	334c      	adds	r3, #76	; 0x4c
 8009216:	2260      	movs	r2, #96	; 0x60
 8009218:	2100      	movs	r1, #0
 800921a:	4618      	mov	r0, r3
 800921c:	f004 f937 	bl	800d48e <memset>
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	4a0d      	ldr	r2, [pc, #52]	; (8009258 <prvInitialiseNewTask+0x130>)
 8009224:	651a      	str	r2, [r3, #80]	; 0x50
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	4a0c      	ldr	r2, [pc, #48]	; (800925c <prvInitialiseNewTask+0x134>)
 800922a:	655a      	str	r2, [r3, #84]	; 0x54
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	4a0c      	ldr	r2, [pc, #48]	; (8009260 <prvInitialiseNewTask+0x138>)
 8009230:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	68f9      	ldr	r1, [r7, #12]
 8009236:	69b8      	ldr	r0, [r7, #24]
 8009238:	f000 fe00 	bl	8009e3c <pxPortInitialiseStack>
 800923c:	4602      	mov	r2, r0
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <prvInitialiseNewTask+0x126>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800924e:	bf00      	nop
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	080100c8 	.word	0x080100c8
 800925c:	080100e8 	.word	0x080100e8
 8009260:	080100a8 	.word	0x080100a8

08009264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800926c:	f000 ff0e 	bl	800a08c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009270:	4b2a      	ldr	r3, [pc, #168]	; (800931c <prvAddNewTaskToReadyList+0xb8>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3301      	adds	r3, #1
 8009276:	4a29      	ldr	r2, [pc, #164]	; (800931c <prvAddNewTaskToReadyList+0xb8>)
 8009278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800927a:	4b29      	ldr	r3, [pc, #164]	; (8009320 <prvAddNewTaskToReadyList+0xbc>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d109      	bne.n	8009296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009282:	4a27      	ldr	r2, [pc, #156]	; (8009320 <prvAddNewTaskToReadyList+0xbc>)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009288:	4b24      	ldr	r3, [pc, #144]	; (800931c <prvAddNewTaskToReadyList+0xb8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d110      	bne.n	80092b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009290:	f000 fa96 	bl	80097c0 <prvInitialiseTaskLists>
 8009294:	e00d      	b.n	80092b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009296:	4b23      	ldr	r3, [pc, #140]	; (8009324 <prvAddNewTaskToReadyList+0xc0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d109      	bne.n	80092b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800929e:	4b20      	ldr	r3, [pc, #128]	; (8009320 <prvAddNewTaskToReadyList+0xbc>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d802      	bhi.n	80092b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092ac:	4a1c      	ldr	r2, [pc, #112]	; (8009320 <prvAddNewTaskToReadyList+0xbc>)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092b2:	4b1d      	ldr	r3, [pc, #116]	; (8009328 <prvAddNewTaskToReadyList+0xc4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3301      	adds	r3, #1
 80092b8:	4a1b      	ldr	r2, [pc, #108]	; (8009328 <prvAddNewTaskToReadyList+0xc4>)
 80092ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	2201      	movs	r2, #1
 80092c2:	409a      	lsls	r2, r3
 80092c4:	4b19      	ldr	r3, [pc, #100]	; (800932c <prvAddNewTaskToReadyList+0xc8>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	4a18      	ldr	r2, [pc, #96]	; (800932c <prvAddNewTaskToReadyList+0xc8>)
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4a15      	ldr	r2, [pc, #84]	; (8009330 <prvAddNewTaskToReadyList+0xcc>)
 80092dc:	441a      	add	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7ff fdf8 	bl	8008eda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092ea:	f000 fefd 	bl	800a0e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092ee:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <prvAddNewTaskToReadyList+0xc0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00e      	beq.n	8009314 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092f6:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <prvAddNewTaskToReadyList+0xbc>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009300:	429a      	cmp	r2, r3
 8009302:	d207      	bcs.n	8009314 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009304:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <prvAddNewTaskToReadyList+0xd0>)
 8009306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000380 	.word	0x20000380
 8009320:	20000280 	.word	0x20000280
 8009324:	2000038c 	.word	0x2000038c
 8009328:	2000039c 	.word	0x2000039c
 800932c:	20000388 	.word	0x20000388
 8009330:	20000284 	.word	0x20000284
 8009334:	e000ed04 	.word	0xe000ed04

08009338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009346:	463a      	mov	r2, r7
 8009348:	1d39      	adds	r1, r7, #4
 800934a:	f107 0308 	add.w	r3, r7, #8
 800934e:	4618      	mov	r0, r3
 8009350:	f001 fbca 	bl	800aae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	9202      	str	r2, [sp, #8]
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	2300      	movs	r3, #0
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	2300      	movs	r3, #0
 8009364:	460a      	mov	r2, r1
 8009366:	4920      	ldr	r1, [pc, #128]	; (80093e8 <vTaskStartScheduler+0xb0>)
 8009368:	4820      	ldr	r0, [pc, #128]	; (80093ec <vTaskStartScheduler+0xb4>)
 800936a:	f7ff fe3d 	bl	8008fe8 <xTaskCreateStatic>
 800936e:	4602      	mov	r2, r0
 8009370:	4b1f      	ldr	r3, [pc, #124]	; (80093f0 <vTaskStartScheduler+0xb8>)
 8009372:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009374:	4b1e      	ldr	r3, [pc, #120]	; (80093f0 <vTaskStartScheduler+0xb8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800937c:	2301      	movs	r3, #1
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	e001      	b.n	8009386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d11a      	bne.n	80093c2 <vTaskStartScheduler+0x8a>
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800939e:	4b15      	ldr	r3, [pc, #84]	; (80093f4 <vTaskStartScheduler+0xbc>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	334c      	adds	r3, #76	; 0x4c
 80093a4:	4a14      	ldr	r2, [pc, #80]	; (80093f8 <vTaskStartScheduler+0xc0>)
 80093a6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093a8:	4b14      	ldr	r3, [pc, #80]	; (80093fc <vTaskStartScheduler+0xc4>)
 80093aa:	f04f 32ff 	mov.w	r2, #4294967295
 80093ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093b0:	4b13      	ldr	r3, [pc, #76]	; (8009400 <vTaskStartScheduler+0xc8>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093b6:	4b13      	ldr	r3, [pc, #76]	; (8009404 <vTaskStartScheduler+0xcc>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093bc:	f000 fdc8 	bl	8009f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093c0:	e00d      	b.n	80093de <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c8:	d109      	bne.n	80093de <vTaskStartScheduler+0xa6>
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	e7fe      	b.n	80093dc <vTaskStartScheduler+0xa4>
}
 80093de:	bf00      	nop
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	0800fb4c 	.word	0x0800fb4c
 80093ec:	08009791 	.word	0x08009791
 80093f0:	200003a4 	.word	0x200003a4
 80093f4:	20000280 	.word	0x20000280
 80093f8:	20000094 	.word	0x20000094
 80093fc:	200003a0 	.word	0x200003a0
 8009400:	2000038c 	.word	0x2000038c
 8009404:	20000384 	.word	0x20000384

08009408 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800940c:	4b04      	ldr	r3, [pc, #16]	; (8009420 <vTaskSuspendAll+0x18>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	4a03      	ldr	r2, [pc, #12]	; (8009420 <vTaskSuspendAll+0x18>)
 8009414:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009416:	bf00      	nop
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	200003a8 	.word	0x200003a8

08009424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800942e:	2300      	movs	r3, #0
 8009430:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009432:	4b41      	ldr	r3, [pc, #260]	; (8009538 <xTaskResumeAll+0x114>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d109      	bne.n	800944e <xTaskResumeAll+0x2a>
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	e7fe      	b.n	800944c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800944e:	f000 fe1d 	bl	800a08c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009452:	4b39      	ldr	r3, [pc, #228]	; (8009538 <xTaskResumeAll+0x114>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3b01      	subs	r3, #1
 8009458:	4a37      	ldr	r2, [pc, #220]	; (8009538 <xTaskResumeAll+0x114>)
 800945a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800945c:	4b36      	ldr	r3, [pc, #216]	; (8009538 <xTaskResumeAll+0x114>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d161      	bne.n	8009528 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009464:	4b35      	ldr	r3, [pc, #212]	; (800953c <xTaskResumeAll+0x118>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d05d      	beq.n	8009528 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800946c:	e02e      	b.n	80094cc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946e:	4b34      	ldr	r3, [pc, #208]	; (8009540 <xTaskResumeAll+0x11c>)
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3318      	adds	r3, #24
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff fd8a 	bl	8008f94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3304      	adds	r3, #4
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff fd85 	bl	8008f94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	2201      	movs	r2, #1
 8009490:	409a      	lsls	r2, r3
 8009492:	4b2c      	ldr	r3, [pc, #176]	; (8009544 <xTaskResumeAll+0x120>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4313      	orrs	r3, r2
 8009498:	4a2a      	ldr	r2, [pc, #168]	; (8009544 <xTaskResumeAll+0x120>)
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4a27      	ldr	r2, [pc, #156]	; (8009548 <xTaskResumeAll+0x124>)
 80094aa:	441a      	add	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4619      	mov	r1, r3
 80094b2:	4610      	mov	r0, r2
 80094b4:	f7ff fd11 	bl	8008eda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094bc:	4b23      	ldr	r3, [pc, #140]	; (800954c <xTaskResumeAll+0x128>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d302      	bcc.n	80094cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80094c6:	4b22      	ldr	r3, [pc, #136]	; (8009550 <xTaskResumeAll+0x12c>)
 80094c8:	2201      	movs	r2, #1
 80094ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094cc:	4b1c      	ldr	r3, [pc, #112]	; (8009540 <xTaskResumeAll+0x11c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1cc      	bne.n	800946e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094da:	f000 fa11 	bl	8009900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80094de:	4b1d      	ldr	r3, [pc, #116]	; (8009554 <xTaskResumeAll+0x130>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d010      	beq.n	800950c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094ea:	f000 f837 	bl	800955c <xTaskIncrementTick>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80094f4:	4b16      	ldr	r3, [pc, #88]	; (8009550 <xTaskResumeAll+0x12c>)
 80094f6:	2201      	movs	r2, #1
 80094f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f1      	bne.n	80094ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009506:	4b13      	ldr	r3, [pc, #76]	; (8009554 <xTaskResumeAll+0x130>)
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800950c:	4b10      	ldr	r3, [pc, #64]	; (8009550 <xTaskResumeAll+0x12c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d009      	beq.n	8009528 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009518:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <xTaskResumeAll+0x134>)
 800951a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009528:	f000 fdde 	bl	800a0e8 <vPortExitCritical>

	return xAlreadyYielded;
 800952c:	68bb      	ldr	r3, [r7, #8]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	200003a8 	.word	0x200003a8
 800953c:	20000380 	.word	0x20000380
 8009540:	20000340 	.word	0x20000340
 8009544:	20000388 	.word	0x20000388
 8009548:	20000284 	.word	0x20000284
 800954c:	20000280 	.word	0x20000280
 8009550:	20000394 	.word	0x20000394
 8009554:	20000390 	.word	0x20000390
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009562:	2300      	movs	r3, #0
 8009564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009566:	4b4e      	ldr	r3, [pc, #312]	; (80096a0 <xTaskIncrementTick+0x144>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	f040 8087 	bne.w	800967e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009570:	4b4c      	ldr	r3, [pc, #304]	; (80096a4 <xTaskIncrementTick+0x148>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009578:	4a4a      	ldr	r2, [pc, #296]	; (80096a4 <xTaskIncrementTick+0x148>)
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d11f      	bne.n	80095c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009584:	4b48      	ldr	r3, [pc, #288]	; (80096a8 <xTaskIncrementTick+0x14c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <xTaskIncrementTick+0x46>
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	603b      	str	r3, [r7, #0]
 80095a0:	e7fe      	b.n	80095a0 <xTaskIncrementTick+0x44>
 80095a2:	4b41      	ldr	r3, [pc, #260]	; (80096a8 <xTaskIncrementTick+0x14c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	4b40      	ldr	r3, [pc, #256]	; (80096ac <xTaskIncrementTick+0x150>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a3e      	ldr	r2, [pc, #248]	; (80096a8 <xTaskIncrementTick+0x14c>)
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	4a3e      	ldr	r2, [pc, #248]	; (80096ac <xTaskIncrementTick+0x150>)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <xTaskIncrementTick+0x154>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3301      	adds	r3, #1
 80095bc:	4a3c      	ldr	r2, [pc, #240]	; (80096b0 <xTaskIncrementTick+0x154>)
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	f000 f99e 	bl	8009900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095c4:	4b3b      	ldr	r3, [pc, #236]	; (80096b4 <xTaskIncrementTick+0x158>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d348      	bcc.n	8009660 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ce:	4b36      	ldr	r3, [pc, #216]	; (80096a8 <xTaskIncrementTick+0x14c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d104      	bne.n	80095e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d8:	4b36      	ldr	r3, [pc, #216]	; (80096b4 <xTaskIncrementTick+0x158>)
 80095da:	f04f 32ff 	mov.w	r2, #4294967295
 80095de:	601a      	str	r2, [r3, #0]
					break;
 80095e0:	e03e      	b.n	8009660 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e2:	4b31      	ldr	r3, [pc, #196]	; (80096a8 <xTaskIncrementTick+0x14c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d203      	bcs.n	8009602 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095fa:	4a2e      	ldr	r2, [pc, #184]	; (80096b4 <xTaskIncrementTick+0x158>)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009600:	e02e      	b.n	8009660 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	3304      	adds	r3, #4
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff fcc4 	bl	8008f94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009610:	2b00      	cmp	r3, #0
 8009612:	d004      	beq.n	800961e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	3318      	adds	r3, #24
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff fcbb 	bl	8008f94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	2201      	movs	r2, #1
 8009624:	409a      	lsls	r2, r3
 8009626:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <xTaskIncrementTick+0x15c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4313      	orrs	r3, r2
 800962c:	4a22      	ldr	r2, [pc, #136]	; (80096b8 <xTaskIncrementTick+0x15c>)
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4a1f      	ldr	r2, [pc, #124]	; (80096bc <xTaskIncrementTick+0x160>)
 800963e:	441a      	add	r2, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	3304      	adds	r3, #4
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f7ff fc47 	bl	8008eda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009650:	4b1b      	ldr	r3, [pc, #108]	; (80096c0 <xTaskIncrementTick+0x164>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009656:	429a      	cmp	r2, r3
 8009658:	d3b9      	bcc.n	80095ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800965a:	2301      	movs	r3, #1
 800965c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800965e:	e7b6      	b.n	80095ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009660:	4b17      	ldr	r3, [pc, #92]	; (80096c0 <xTaskIncrementTick+0x164>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009666:	4915      	ldr	r1, [pc, #84]	; (80096bc <xTaskIncrementTick+0x160>)
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d907      	bls.n	8009688 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	e004      	b.n	8009688 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800967e:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <xTaskIncrementTick+0x168>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	4a0f      	ldr	r2, [pc, #60]	; (80096c4 <xTaskIncrementTick+0x168>)
 8009686:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009688:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <xTaskIncrementTick+0x16c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009690:	2301      	movs	r3, #1
 8009692:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009694:	697b      	ldr	r3, [r7, #20]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	200003a8 	.word	0x200003a8
 80096a4:	20000384 	.word	0x20000384
 80096a8:	20000338 	.word	0x20000338
 80096ac:	2000033c 	.word	0x2000033c
 80096b0:	20000398 	.word	0x20000398
 80096b4:	200003a0 	.word	0x200003a0
 80096b8:	20000388 	.word	0x20000388
 80096bc:	20000284 	.word	0x20000284
 80096c0:	20000280 	.word	0x20000280
 80096c4:	20000390 	.word	0x20000390
 80096c8:	20000394 	.word	0x20000394

080096cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096d2:	4b29      	ldr	r3, [pc, #164]	; (8009778 <vTaskSwitchContext+0xac>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096da:	4b28      	ldr	r3, [pc, #160]	; (800977c <vTaskSwitchContext+0xb0>)
 80096dc:	2201      	movs	r2, #1
 80096de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096e0:	e043      	b.n	800976a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80096e2:	4b26      	ldr	r3, [pc, #152]	; (800977c <vTaskSwitchContext+0xb0>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e8:	4b25      	ldr	r3, [pc, #148]	; (8009780 <vTaskSwitchContext+0xb4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	fab3 f383 	clz	r3, r3
 80096f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80096f6:	7afb      	ldrb	r3, [r7, #11]
 80096f8:	f1c3 031f 	rsb	r3, r3, #31
 80096fc:	617b      	str	r3, [r7, #20]
 80096fe:	4921      	ldr	r1, [pc, #132]	; (8009784 <vTaskSwitchContext+0xb8>)
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	4613      	mov	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	440b      	add	r3, r1
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <vTaskSwitchContext+0x5a>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	607b      	str	r3, [r7, #4]
 8009724:	e7fe      	b.n	8009724 <vTaskSwitchContext+0x58>
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4a14      	ldr	r2, [pc, #80]	; (8009784 <vTaskSwitchContext+0xb8>)
 8009732:	4413      	add	r3, r2
 8009734:	613b      	str	r3, [r7, #16]
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	605a      	str	r2, [r3, #4]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	3308      	adds	r3, #8
 8009748:	429a      	cmp	r2, r3
 800974a:	d104      	bne.n	8009756 <vTaskSwitchContext+0x8a>
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	605a      	str	r2, [r3, #4]
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	4a0a      	ldr	r2, [pc, #40]	; (8009788 <vTaskSwitchContext+0xbc>)
 800975e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009760:	4b09      	ldr	r3, [pc, #36]	; (8009788 <vTaskSwitchContext+0xbc>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	334c      	adds	r3, #76	; 0x4c
 8009766:	4a09      	ldr	r2, [pc, #36]	; (800978c <vTaskSwitchContext+0xc0>)
 8009768:	6013      	str	r3, [r2, #0]
}
 800976a:	bf00      	nop
 800976c:	371c      	adds	r7, #28
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	200003a8 	.word	0x200003a8
 800977c:	20000394 	.word	0x20000394
 8009780:	20000388 	.word	0x20000388
 8009784:	20000284 	.word	0x20000284
 8009788:	20000280 	.word	0x20000280
 800978c:	20000094 	.word	0x20000094

08009790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009798:	f000 f852 	bl	8009840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800979c:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <prvIdleTask+0x28>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d9f9      	bls.n	8009798 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097a4:	4b05      	ldr	r3, [pc, #20]	; (80097bc <prvIdleTask+0x2c>)
 80097a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097b4:	e7f0      	b.n	8009798 <prvIdleTask+0x8>
 80097b6:	bf00      	nop
 80097b8:	20000284 	.word	0x20000284
 80097bc:	e000ed04 	.word	0xe000ed04

080097c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097c6:	2300      	movs	r3, #0
 80097c8:	607b      	str	r3, [r7, #4]
 80097ca:	e00c      	b.n	80097e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4a12      	ldr	r2, [pc, #72]	; (8009820 <prvInitialiseTaskLists+0x60>)
 80097d8:	4413      	add	r3, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fb50 	bl	8008e80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3301      	adds	r3, #1
 80097e4:	607b      	str	r3, [r7, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b06      	cmp	r3, #6
 80097ea:	d9ef      	bls.n	80097cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097ec:	480d      	ldr	r0, [pc, #52]	; (8009824 <prvInitialiseTaskLists+0x64>)
 80097ee:	f7ff fb47 	bl	8008e80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097f2:	480d      	ldr	r0, [pc, #52]	; (8009828 <prvInitialiseTaskLists+0x68>)
 80097f4:	f7ff fb44 	bl	8008e80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097f8:	480c      	ldr	r0, [pc, #48]	; (800982c <prvInitialiseTaskLists+0x6c>)
 80097fa:	f7ff fb41 	bl	8008e80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097fe:	480c      	ldr	r0, [pc, #48]	; (8009830 <prvInitialiseTaskLists+0x70>)
 8009800:	f7ff fb3e 	bl	8008e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009804:	480b      	ldr	r0, [pc, #44]	; (8009834 <prvInitialiseTaskLists+0x74>)
 8009806:	f7ff fb3b 	bl	8008e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800980a:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <prvInitialiseTaskLists+0x78>)
 800980c:	4a05      	ldr	r2, [pc, #20]	; (8009824 <prvInitialiseTaskLists+0x64>)
 800980e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009810:	4b0a      	ldr	r3, [pc, #40]	; (800983c <prvInitialiseTaskLists+0x7c>)
 8009812:	4a05      	ldr	r2, [pc, #20]	; (8009828 <prvInitialiseTaskLists+0x68>)
 8009814:	601a      	str	r2, [r3, #0]
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000284 	.word	0x20000284
 8009824:	20000310 	.word	0x20000310
 8009828:	20000324 	.word	0x20000324
 800982c:	20000340 	.word	0x20000340
 8009830:	20000354 	.word	0x20000354
 8009834:	2000036c 	.word	0x2000036c
 8009838:	20000338 	.word	0x20000338
 800983c:	2000033c 	.word	0x2000033c

08009840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009846:	e019      	b.n	800987c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009848:	f000 fc20 	bl	800a08c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800984c:	4b0f      	ldr	r3, [pc, #60]	; (800988c <prvCheckTasksWaitingTermination+0x4c>)
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3304      	adds	r3, #4
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff fb9b 	bl	8008f94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800985e:	4b0c      	ldr	r3, [pc, #48]	; (8009890 <prvCheckTasksWaitingTermination+0x50>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3b01      	subs	r3, #1
 8009864:	4a0a      	ldr	r2, [pc, #40]	; (8009890 <prvCheckTasksWaitingTermination+0x50>)
 8009866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009868:	4b0a      	ldr	r3, [pc, #40]	; (8009894 <prvCheckTasksWaitingTermination+0x54>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3b01      	subs	r3, #1
 800986e:	4a09      	ldr	r2, [pc, #36]	; (8009894 <prvCheckTasksWaitingTermination+0x54>)
 8009870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009872:	f000 fc39 	bl	800a0e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f80e 	bl	8009898 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <prvCheckTasksWaitingTermination+0x54>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e1      	bne.n	8009848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009884:	bf00      	nop
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20000354 	.word	0x20000354
 8009890:	20000380 	.word	0x20000380
 8009894:	20000368 	.word	0x20000368

08009898 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	334c      	adds	r3, #76	; 0x4c
 80098a4:	4618      	mov	r0, r3
 80098a6:	f004 fb0d 	bl	800dec4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d108      	bne.n	80098c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 fab5 	bl	800ae28 <vPortFree>
				vPortFree( pxTCB );
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 fab2 	bl	800ae28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098c4:	e017      	b.n	80098f6 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d103      	bne.n	80098d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 faa9 	bl	800ae28 <vPortFree>
	}
 80098d6:	e00e      	b.n	80098f6 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d009      	beq.n	80098f6 <prvDeleteTCB+0x5e>
 80098e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	e7fe      	b.n	80098f4 <prvDeleteTCB+0x5c>
	}
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009906:	4b0c      	ldr	r3, [pc, #48]	; (8009938 <prvResetNextTaskUnblockTime+0x38>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d104      	bne.n	800991a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009910:	4b0a      	ldr	r3, [pc, #40]	; (800993c <prvResetNextTaskUnblockTime+0x3c>)
 8009912:	f04f 32ff 	mov.w	r2, #4294967295
 8009916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009918:	e008      	b.n	800992c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991a:	4b07      	ldr	r3, [pc, #28]	; (8009938 <prvResetNextTaskUnblockTime+0x38>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4a04      	ldr	r2, [pc, #16]	; (800993c <prvResetNextTaskUnblockTime+0x3c>)
 800992a:	6013      	str	r3, [r2, #0]
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	20000338 	.word	0x20000338
 800993c:	200003a0 	.word	0x200003a0

08009940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009946:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <xTaskGetSchedulerState+0x34>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800994e:	2301      	movs	r3, #1
 8009950:	607b      	str	r3, [r7, #4]
 8009952:	e008      	b.n	8009966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009954:	4b08      	ldr	r3, [pc, #32]	; (8009978 <xTaskGetSchedulerState+0x38>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d102      	bne.n	8009962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800995c:	2302      	movs	r3, #2
 800995e:	607b      	str	r3, [r7, #4]
 8009960:	e001      	b.n	8009966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009962:	2300      	movs	r3, #0
 8009964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009966:	687b      	ldr	r3, [r7, #4]
	}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	2000038c 	.word	0x2000038c
 8009978:	200003a8 	.word	0x200003a8

0800997c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800998a:	f000 fb7f 	bl	800a08c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800998e:	4b29      	ldr	r3, [pc, #164]	; (8009a34 <xTaskNotifyWait+0xb8>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d01c      	beq.n	80099d6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800999c:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <xTaskNotifyWait+0xb8>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	43d2      	mvns	r2, r2
 80099a8:	400a      	ands	r2, r1
 80099aa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80099ae:	4b21      	ldr	r3, [pc, #132]	; (8009a34 <xTaskNotifyWait+0xb8>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00b      	beq.n	80099d6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099be:	2101      	movs	r1, #1
 80099c0:	6838      	ldr	r0, [r7, #0]
 80099c2:	f000 f9d5 	bl	8009d70 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80099c6:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <xTaskNotifyWait+0xbc>)
 80099c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80099d6:	f000 fb87 	bl	800a0e8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80099da:	f000 fb57 	bl	800a08c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80099e4:	4b13      	ldr	r3, [pc, #76]	; (8009a34 <xTaskNotifyWait+0xb8>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80099f0:	4b10      	ldr	r3, [pc, #64]	; (8009a34 <xTaskNotifyWait+0xb8>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d002      	beq.n	8009a04 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80099fe:	2300      	movs	r3, #0
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	e00a      	b.n	8009a1a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009a04:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <xTaskNotifyWait+0xb8>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	43d2      	mvns	r2, r2
 8009a10:	400a      	ands	r2, r1
 8009a12:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8009a16:	2301      	movs	r3, #1
 8009a18:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <xTaskNotifyWait+0xb8>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8009a24:	f000 fb60 	bl	800a0e8 <vPortExitCritical>

		return xReturn;
 8009a28:	697b      	ldr	r3, [r7, #20]
	}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000280 	.word	0x20000280
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08a      	sub	sp, #40	; 0x28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <xTaskGenericNotify+0x2e>
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	61bb      	str	r3, [r7, #24]
 8009a68:	e7fe      	b.n	8009a68 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009a6e:	f000 fb0d 	bl	800a08c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d004      	beq.n	8009a82 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009a88:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	2b04      	cmp	r3, #4
 8009a96:	d82e      	bhi.n	8009af6 <xTaskGenericNotify+0xba>
 8009a98:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <xTaskGenericNotify+0x64>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009b17 	.word	0x08009b17
 8009aa4:	08009ab5 	.word	0x08009ab5
 8009aa8:	08009ac7 	.word	0x08009ac7
 8009aac:	08009ad7 	.word	0x08009ad7
 8009ab0:	08009ae1 	.word	0x08009ae1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	431a      	orrs	r2, r3
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009ac4:	e02a      	b.n	8009b1c <xTaskGenericNotify+0xe0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009ad4:	e022      	b.n	8009b1c <xTaskGenericNotify+0xe0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009ade:	e01d      	b.n	8009b1c <xTaskGenericNotify+0xe0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009ae0:	7ffb      	ldrb	r3, [r7, #31]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d004      	beq.n	8009af0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009aee:	e015      	b.n	8009b1c <xTaskGenericNotify+0xe0>
						xReturn = pdFAIL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009af4:	e012      	b.n	8009b1c <xTaskGenericNotify+0xe0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d00b      	beq.n	8009b1a <xTaskGenericNotify+0xde>
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	e7fe      	b.n	8009b14 <xTaskGenericNotify+0xd8>
					break;
 8009b16:	bf00      	nop
 8009b18:	e000      	b.n	8009b1c <xTaskGenericNotify+0xe0>

					break;
 8009b1a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b1c:	7ffb      	ldrb	r3, [r7, #31]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d138      	bne.n	8009b94 <xTaskGenericNotify+0x158>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	3304      	adds	r3, #4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fa34 	bl	8008f94 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	2201      	movs	r2, #1
 8009b32:	409a      	lsls	r2, r3
 8009b34:	4b1b      	ldr	r3, [pc, #108]	; (8009ba4 <xTaskGenericNotify+0x168>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	4a1a      	ldr	r2, [pc, #104]	; (8009ba4 <xTaskGenericNotify+0x168>)
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4a17      	ldr	r2, [pc, #92]	; (8009ba8 <xTaskGenericNotify+0x16c>)
 8009b4c:	441a      	add	r2, r3
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	3304      	adds	r3, #4
 8009b52:	4619      	mov	r1, r3
 8009b54:	4610      	mov	r0, r2
 8009b56:	f7ff f9c0 	bl	8008eda <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d009      	beq.n	8009b76 <xTaskGenericNotify+0x13a>
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	613b      	str	r3, [r7, #16]
 8009b74:	e7fe      	b.n	8009b74 <xTaskGenericNotify+0x138>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	4b0c      	ldr	r3, [pc, #48]	; (8009bac <xTaskGenericNotify+0x170>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d907      	bls.n	8009b94 <xTaskGenericNotify+0x158>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009b84:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <xTaskGenericNotify+0x174>)
 8009b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009b94:	f000 faa8 	bl	800a0e8 <vPortExitCritical>

		return xReturn;
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3728      	adds	r7, #40	; 0x28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000388 	.word	0x20000388
 8009ba8:	20000284 	.word	0x20000284
 8009bac:	20000280 	.word	0x20000280
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08e      	sub	sp, #56	; 0x38
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d109      	bne.n	8009be2 <xTaskGenericNotifyFromISR+0x2e>
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
 8009be0:	e7fe      	b.n	8009be0 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009be2:	f000 fb2f 	bl	800a244 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009bea:	f3ef 8211 	mrs	r2, BASEPRI
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	623a      	str	r2, [r7, #32]
 8009c00:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c02:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d004      	beq.n	8009c16 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d82e      	bhi.n	8009c8c <xTaskGenericNotifyFromISR+0xd8>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <xTaskGenericNotifyFromISR+0x80>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009cad 	.word	0x08009cad
 8009c38:	08009c49 	.word	0x08009c49
 8009c3c:	08009c5b 	.word	0x08009c5b
 8009c40:	08009c6b 	.word	0x08009c6b
 8009c44:	08009c75 	.word	0x08009c75
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	431a      	orrs	r2, r3
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009c58:	e02b      	b.n	8009cb2 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009c68:	e023      	b.n	8009cb2 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009c72:	e01e      	b.n	8009cb2 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d004      	beq.n	8009c86 <xTaskGenericNotifyFromISR+0xd2>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009c84:	e015      	b.n	8009cb2 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009c8a:	e012      	b.n	8009cb2 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c96:	d00b      	beq.n	8009cb0 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	61bb      	str	r3, [r7, #24]
 8009caa:	e7fe      	b.n	8009caa <xTaskGenericNotifyFromISR+0xf6>
					break;
 8009cac:	bf00      	nop
 8009cae:	e000      	b.n	8009cb2 <xTaskGenericNotifyFromISR+0xfe>
					break;
 8009cb0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d144      	bne.n	8009d44 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <xTaskGenericNotifyFromISR+0x122>
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	e7fe      	b.n	8009cd4 <xTaskGenericNotifyFromISR+0x120>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cd6:	4b20      	ldr	r3, [pc, #128]	; (8009d58 <xTaskGenericNotifyFromISR+0x1a4>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d11c      	bne.n	8009d18 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff f956 	bl	8008f94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	2201      	movs	r2, #1
 8009cee:	409a      	lsls	r2, r3
 8009cf0:	4b1a      	ldr	r3, [pc, #104]	; (8009d5c <xTaskGenericNotifyFromISR+0x1a8>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	4a19      	ldr	r2, [pc, #100]	; (8009d5c <xTaskGenericNotifyFromISR+0x1a8>)
 8009cf8:	6013      	str	r3, [r2, #0]
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4a16      	ldr	r2, [pc, #88]	; (8009d60 <xTaskGenericNotifyFromISR+0x1ac>)
 8009d08:	441a      	add	r2, r3
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4610      	mov	r0, r2
 8009d12:	f7ff f8e2 	bl	8008eda <vListInsertEnd>
 8009d16:	e005      	b.n	8009d24 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	3318      	adds	r3, #24
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4811      	ldr	r0, [pc, #68]	; (8009d64 <xTaskGenericNotifyFromISR+0x1b0>)
 8009d20:	f7ff f8db 	bl	8008eda <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d28:	4b0f      	ldr	r3, [pc, #60]	; (8009d68 <xTaskGenericNotifyFromISR+0x1b4>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d908      	bls.n	8009d44 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009d3e:	4b0b      	ldr	r3, [pc, #44]	; (8009d6c <xTaskGenericNotifyFromISR+0x1b8>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3738      	adds	r7, #56	; 0x38
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	200003a8 	.word	0x200003a8
 8009d5c:	20000388 	.word	0x20000388
 8009d60:	20000284 	.word	0x20000284
 8009d64:	20000340 	.word	0x20000340
 8009d68:	20000280 	.word	0x20000280
 8009d6c:	20000394 	.word	0x20000394

08009d70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d7a:	4b29      	ldr	r3, [pc, #164]	; (8009e20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d80:	4b28      	ldr	r3, [pc, #160]	; (8009e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3304      	adds	r3, #4
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff f904 	bl	8008f94 <uxListRemove>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10b      	bne.n	8009daa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009d92:	4b24      	ldr	r3, [pc, #144]	; (8009e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	2201      	movs	r2, #1
 8009d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9e:	43da      	mvns	r2, r3
 8009da0:	4b21      	ldr	r3, [pc, #132]	; (8009e28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4013      	ands	r3, r2
 8009da6:	4a20      	ldr	r2, [pc, #128]	; (8009e28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009da8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db0:	d10a      	bne.n	8009dc8 <prvAddCurrentTaskToDelayedList+0x58>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009db8:	4b1a      	ldr	r3, [pc, #104]	; (8009e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	481a      	ldr	r0, [pc, #104]	; (8009e2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009dc2:	f7ff f88a 	bl	8008eda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dc6:	e026      	b.n	8009e16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4413      	add	r3, r2
 8009dce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dd0:	4b14      	ldr	r3, [pc, #80]	; (8009e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d209      	bcs.n	8009df4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009de0:	4b13      	ldr	r3, [pc, #76]	; (8009e30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	4b0f      	ldr	r3, [pc, #60]	; (8009e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3304      	adds	r3, #4
 8009dea:	4619      	mov	r1, r3
 8009dec:	4610      	mov	r0, r2
 8009dee:	f7ff f898 	bl	8008f22 <vListInsert>
}
 8009df2:	e010      	b.n	8009e16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4610      	mov	r0, r2
 8009e02:	f7ff f88e 	bl	8008f22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e06:	4b0c      	ldr	r3, [pc, #48]	; (8009e38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d202      	bcs.n	8009e16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e10:	4a09      	ldr	r2, [pc, #36]	; (8009e38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6013      	str	r3, [r2, #0]
}
 8009e16:	bf00      	nop
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000384 	.word	0x20000384
 8009e24:	20000280 	.word	0x20000280
 8009e28:	20000388 	.word	0x20000388
 8009e2c:	2000036c 	.word	0x2000036c
 8009e30:	2000033c 	.word	0x2000033c
 8009e34:	20000338 	.word	0x20000338
 8009e38:	200003a0 	.word	0x200003a0

08009e3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3b04      	subs	r3, #4
 8009e4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3b04      	subs	r3, #4
 8009e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f023 0201 	bic.w	r2, r3, #1
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3b04      	subs	r3, #4
 8009e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e6c:	4a0c      	ldr	r2, [pc, #48]	; (8009ea0 <pxPortInitialiseStack+0x64>)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3b14      	subs	r3, #20
 8009e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3b04      	subs	r3, #4
 8009e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f06f 0202 	mvn.w	r2, #2
 8009e8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3b20      	subs	r3, #32
 8009e90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e92:	68fb      	ldr	r3, [r7, #12]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	08009ea5 	.word	0x08009ea5

08009ea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009eae:	4b11      	ldr	r3, [pc, #68]	; (8009ef4 <prvTaskExitError+0x50>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	d009      	beq.n	8009ecc <prvTaskExitError+0x28>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	60fb      	str	r3, [r7, #12]
 8009eca:	e7fe      	b.n	8009eca <prvTaskExitError+0x26>
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ede:	bf00      	nop
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0fc      	beq.n	8009ee0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20000088 	.word	0x20000088
	...

08009f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <pxCurrentTCBConst2>)
 8009f02:	6819      	ldr	r1, [r3, #0]
 8009f04:	6808      	ldr	r0, [r1, #0]
 8009f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0a:	f380 8809 	msr	PSP, r0
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f04f 0000 	mov.w	r0, #0
 8009f16:	f380 8811 	msr	BASEPRI, r0
 8009f1a:	4770      	bx	lr
 8009f1c:	f3af 8000 	nop.w

08009f20 <pxCurrentTCBConst2>:
 8009f20:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f24:	bf00      	nop
 8009f26:	bf00      	nop

08009f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f28:	4808      	ldr	r0, [pc, #32]	; (8009f4c <prvPortStartFirstTask+0x24>)
 8009f2a:	6800      	ldr	r0, [r0, #0]
 8009f2c:	6800      	ldr	r0, [r0, #0]
 8009f2e:	f380 8808 	msr	MSP, r0
 8009f32:	f04f 0000 	mov.w	r0, #0
 8009f36:	f380 8814 	msr	CONTROL, r0
 8009f3a:	b662      	cpsie	i
 8009f3c:	b661      	cpsie	f
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	df00      	svc	0
 8009f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f4a:	bf00      	nop
 8009f4c:	e000ed08 	.word	0xe000ed08

08009f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f56:	4b44      	ldr	r3, [pc, #272]	; (800a068 <xPortStartScheduler+0x118>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a44      	ldr	r2, [pc, #272]	; (800a06c <xPortStartScheduler+0x11c>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d109      	bne.n	8009f74 <xPortStartScheduler+0x24>
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	613b      	str	r3, [r7, #16]
 8009f72:	e7fe      	b.n	8009f72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f74:	4b3c      	ldr	r3, [pc, #240]	; (800a068 <xPortStartScheduler+0x118>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a3d      	ldr	r2, [pc, #244]	; (800a070 <xPortStartScheduler+0x120>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d109      	bne.n	8009f92 <xPortStartScheduler+0x42>
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	e7fe      	b.n	8009f90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f92:	4b38      	ldr	r3, [pc, #224]	; (800a074 <xPortStartScheduler+0x124>)
 8009f94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	22ff      	movs	r2, #255	; 0xff
 8009fa2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	4b30      	ldr	r3, [pc, #192]	; (800a078 <xPortStartScheduler+0x128>)
 8009fb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fba:	4b30      	ldr	r3, [pc, #192]	; (800a07c <xPortStartScheduler+0x12c>)
 8009fbc:	2207      	movs	r2, #7
 8009fbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fc0:	e009      	b.n	8009fd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009fc2:	4b2e      	ldr	r3, [pc, #184]	; (800a07c <xPortStartScheduler+0x12c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	4a2c      	ldr	r2, [pc, #176]	; (800a07c <xPortStartScheduler+0x12c>)
 8009fca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fd6:	78fb      	ldrb	r3, [r7, #3]
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fde:	2b80      	cmp	r3, #128	; 0x80
 8009fe0:	d0ef      	beq.n	8009fc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fe2:	4b26      	ldr	r3, [pc, #152]	; (800a07c <xPortStartScheduler+0x12c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f1c3 0307 	rsb	r3, r3, #7
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d009      	beq.n	800a002 <xPortStartScheduler+0xb2>
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	60bb      	str	r3, [r7, #8]
 800a000:	e7fe      	b.n	800a000 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a002:	4b1e      	ldr	r3, [pc, #120]	; (800a07c <xPortStartScheduler+0x12c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	021b      	lsls	r3, r3, #8
 800a008:	4a1c      	ldr	r2, [pc, #112]	; (800a07c <xPortStartScheduler+0x12c>)
 800a00a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a00c:	4b1b      	ldr	r3, [pc, #108]	; (800a07c <xPortStartScheduler+0x12c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a014:	4a19      	ldr	r2, [pc, #100]	; (800a07c <xPortStartScheduler+0x12c>)
 800a016:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a020:	4b17      	ldr	r3, [pc, #92]	; (800a080 <xPortStartScheduler+0x130>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a16      	ldr	r2, [pc, #88]	; (800a080 <xPortStartScheduler+0x130>)
 800a026:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a02a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a02c:	4b14      	ldr	r3, [pc, #80]	; (800a080 <xPortStartScheduler+0x130>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a13      	ldr	r2, [pc, #76]	; (800a080 <xPortStartScheduler+0x130>)
 800a032:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a036:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a038:	f000 f8d6 	bl	800a1e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a03c:	4b11      	ldr	r3, [pc, #68]	; (800a084 <xPortStartScheduler+0x134>)
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a042:	f000 f8f5 	bl	800a230 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a046:	4b10      	ldr	r3, [pc, #64]	; (800a088 <xPortStartScheduler+0x138>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a0f      	ldr	r2, [pc, #60]	; (800a088 <xPortStartScheduler+0x138>)
 800a04c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a050:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a052:	f7ff ff69 	bl	8009f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a056:	f7ff fb39 	bl	80096cc <vTaskSwitchContext>
	prvTaskExitError();
 800a05a:	f7ff ff23 	bl	8009ea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3718      	adds	r7, #24
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	e000ed00 	.word	0xe000ed00
 800a06c:	410fc271 	.word	0x410fc271
 800a070:	410fc270 	.word	0x410fc270
 800a074:	e000e400 	.word	0xe000e400
 800a078:	200003ac 	.word	0x200003ac
 800a07c:	200003b0 	.word	0x200003b0
 800a080:	e000ed20 	.word	0xe000ed20
 800a084:	20000088 	.word	0x20000088
 800a088:	e000ef34 	.word	0xe000ef34

0800a08c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <vPortEnterCritical+0x54>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	4a0d      	ldr	r2, [pc, #52]	; (800a0e0 <vPortEnterCritical+0x54>)
 800a0ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <vPortEnterCritical+0x54>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d10e      	bne.n	800a0d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0b6:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <vPortEnterCritical+0x58>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d009      	beq.n	800a0d4 <vPortEnterCritical+0x48>
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	603b      	str	r3, [r7, #0]
 800a0d2:	e7fe      	b.n	800a0d2 <vPortEnterCritical+0x46>
	}
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	20000088 	.word	0x20000088
 800a0e4:	e000ed04 	.word	0xe000ed04

0800a0e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0ee:	4b11      	ldr	r3, [pc, #68]	; (800a134 <vPortExitCritical+0x4c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d109      	bne.n	800a10a <vPortExitCritical+0x22>
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	607b      	str	r3, [r7, #4]
 800a108:	e7fe      	b.n	800a108 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a10a:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <vPortExitCritical+0x4c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3b01      	subs	r3, #1
 800a110:	4a08      	ldr	r2, [pc, #32]	; (800a134 <vPortExitCritical+0x4c>)
 800a112:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a114:	4b07      	ldr	r3, [pc, #28]	; (800a134 <vPortExitCritical+0x4c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d104      	bne.n	800a126 <vPortExitCritical+0x3e>
 800a11c:	2300      	movs	r3, #0
 800a11e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a126:	bf00      	nop
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20000088 	.word	0x20000088
	...

0800a140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a140:	f3ef 8009 	mrs	r0, PSP
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	4b15      	ldr	r3, [pc, #84]	; (800a1a0 <pxCurrentTCBConst>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	f01e 0f10 	tst.w	lr, #16
 800a150:	bf08      	it	eq
 800a152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15a:	6010      	str	r0, [r2, #0]
 800a15c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a160:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a164:	f380 8811 	msr	BASEPRI, r0
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f7ff faac 	bl	80096cc <vTaskSwitchContext>
 800a174:	f04f 0000 	mov.w	r0, #0
 800a178:	f380 8811 	msr	BASEPRI, r0
 800a17c:	bc09      	pop	{r0, r3}
 800a17e:	6819      	ldr	r1, [r3, #0]
 800a180:	6808      	ldr	r0, [r1, #0]
 800a182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a186:	f01e 0f10 	tst.w	lr, #16
 800a18a:	bf08      	it	eq
 800a18c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a190:	f380 8809 	msr	PSP, r0
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	f3af 8000 	nop.w

0800a1a0 <pxCurrentTCBConst>:
 800a1a0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1c0:	f7ff f9cc 	bl	800955c <xTaskIncrementTick>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1ca:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <SysTick_Handler+0x3c>)
 800a1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1ec:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <vPortSetupTimerInterrupt+0x34>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1f2:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <vPortSetupTimerInterrupt+0x38>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1f8:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <vPortSetupTimerInterrupt+0x3c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a0a      	ldr	r2, [pc, #40]	; (800a228 <vPortSetupTimerInterrupt+0x40>)
 800a1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a202:	099b      	lsrs	r3, r3, #6
 800a204:	4a09      	ldr	r2, [pc, #36]	; (800a22c <vPortSetupTimerInterrupt+0x44>)
 800a206:	3b01      	subs	r3, #1
 800a208:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a20a:	4b04      	ldr	r3, [pc, #16]	; (800a21c <vPortSetupTimerInterrupt+0x34>)
 800a20c:	2207      	movs	r2, #7
 800a20e:	601a      	str	r2, [r3, #0]
}
 800a210:	bf00      	nop
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	e000e010 	.word	0xe000e010
 800a220:	e000e018 	.word	0xe000e018
 800a224:	20000090 	.word	0x20000090
 800a228:	10624dd3 	.word	0x10624dd3
 800a22c:	e000e014 	.word	0xe000e014

0800a230 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a230:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a240 <vPortEnableVFP+0x10>
 800a234:	6801      	ldr	r1, [r0, #0]
 800a236:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a23a:	6001      	str	r1, [r0, #0]
 800a23c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a23e:	bf00      	nop
 800a240:	e000ed88 	.word	0xe000ed88

0800a244 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a24a:	f3ef 8305 	mrs	r3, IPSR
 800a24e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b0f      	cmp	r3, #15
 800a254:	d913      	bls.n	800a27e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a256:	4a16      	ldr	r2, [pc, #88]	; (800a2b0 <vPortValidateInterruptPriority+0x6c>)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a260:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <vPortValidateInterruptPriority+0x70>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	7afa      	ldrb	r2, [r7, #11]
 800a266:	429a      	cmp	r2, r3
 800a268:	d209      	bcs.n	800a27e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	e7fe      	b.n	800a27c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a27e:	4b0e      	ldr	r3, [pc, #56]	; (800a2b8 <vPortValidateInterruptPriority+0x74>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a286:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <vPortValidateInterruptPriority+0x78>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d909      	bls.n	800a2a2 <vPortValidateInterruptPriority+0x5e>
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	603b      	str	r3, [r7, #0]
 800a2a0:	e7fe      	b.n	800a2a0 <vPortValidateInterruptPriority+0x5c>
	}
 800a2a2:	bf00      	nop
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	e000e3f0 	.word	0xe000e3f0
 800a2b4:	200003ac 	.word	0x200003ac
 800a2b8:	e000ed0c 	.word	0xe000ed0c
 800a2bc:	200003b0 	.word	0x200003b0

0800a2c0 <COM_getReadyCommandFlag>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

bool COM_getReadyCommandFlag(void)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	af00      	add	r7, sp, #0
	return Uart_Buffer.rx_ready_command;
 800a2c4:	4b03      	ldr	r3, [pc, #12]	; (800a2d4 <COM_getReadyCommandFlag+0x14>)
 800a2c6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	200003b4 	.word	0x200003b4

0800a2d8 <COM_setReadyCommandFlagOn>:

static void COM_setReadyCommandFlagOn(void)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
	Uart_Buffer.rx_ready_command = true;
 800a2dc:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <COM_setReadyCommandFlagOn+0x18>)
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 800a2e4:	bf00      	nop
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	200003b4 	.word	0x200003b4

0800a2f4 <COM_setReadyCommandFlagOff>:

void COM_setReadyCommandFlagOff(void)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	af00      	add	r7, sp, #0
	Uart_Buffer.rx_ready_command = false;
 800a2f8:	4b04      	ldr	r3, [pc, #16]	; (800a30c <COM_setReadyCommandFlagOff+0x18>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 800a300:	bf00      	nop
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	200003b4 	.word	0x200003b4

0800a310 <COM_readyCommandProcess>:

void COM_readyCommandProcess(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
	char* token = strtok((char*)Uart_Buffer.p_rx_buffer, " ");
 800a316:	4907      	ldr	r1, [pc, #28]	; (800a334 <COM_readyCommandProcess+0x24>)
 800a318:	4807      	ldr	r0, [pc, #28]	; (800a338 <COM_readyCommandProcess+0x28>)
 800a31a:	f003 fe77 	bl	800e00c <strtok>
 800a31e:	6078      	str	r0, [r7, #4]
	COMMAND_findAndExecuteCommand(token);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f8a9 	bl	800a478 <COMMAND_findAndExecuteCommand>
	COM_bufferInit(Uart_Buffer.p_rx_buffer);
 800a326:	4804      	ldr	r0, [pc, #16]	; (800a338 <COM_readyCommandProcess+0x28>)
 800a328:	f000 f890 	bl	800a44c <COM_bufferInit>
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	0800fb54 	.word	0x0800fb54
 800a338:	200003b4 	.word	0x200003b4

0800a33c <COM_uartPrint>:

void COM_uartPrint(char* token)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	while (COM_getTxBusyFlag());
 800a344:	bf00      	nop
 800a346:	f000 f847 	bl	800a3d8 <COM_getTxBusyFlag>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1fa      	bne.n	800a346 <COM_uartPrint+0xa>
	strncpy((char*)Uart_Buffer.p_tx_buffer, token, sizeof(Uart_Buffer.p_tx_buffer));
 800a350:	2264      	movs	r2, #100	; 0x64
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	4809      	ldr	r0, [pc, #36]	; (800a37c <COM_uartPrint+0x40>)
 800a356:	f003 fe43 	bl	800dfe0 <strncpy>
	HAL_UART_Transmit_DMA(&huart2, Uart_Buffer.p_tx_buffer, strlen(token));
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7f5 ff40 	bl	80001e0 <strlen>
 800a360:	4603      	mov	r3, r0
 800a362:	b29b      	uxth	r3, r3
 800a364:	461a      	mov	r2, r3
 800a366:	4905      	ldr	r1, [pc, #20]	; (800a37c <COM_uartPrint+0x40>)
 800a368:	4805      	ldr	r0, [pc, #20]	; (800a380 <COM_uartPrint+0x44>)
 800a36a:	f7fd fcbd 	bl	8007ce8 <HAL_UART_Transmit_DMA>
	COM_setTxBusyFlagOn();
 800a36e:	f000 f817 	bl	800a3a0 <COM_setTxBusyFlagOn>
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	2000041b 	.word	0x2000041b
 800a380:	20000cc4 	.word	0x20000cc4

0800a384 <COM_halUartReceiveDma>:

void COM_halUartReceiveDma(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, &Uart_Buffer.rx_single_char, 1);
 800a388:	2201      	movs	r2, #1
 800a38a:	4903      	ldr	r1, [pc, #12]	; (800a398 <COM_halUartReceiveDma+0x14>)
 800a38c:	4803      	ldr	r0, [pc, #12]	; (800a39c <COM_halUartReceiveDma+0x18>)
 800a38e:	f7fd fd17 	bl	8007dc0 <HAL_UART_Receive_DMA>
}
 800a392:	bf00      	nop
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000419 	.word	0x20000419
 800a39c:	20000cc4 	.word	0x20000cc4

0800a3a0 <COM_setTxBusyFlagOn>:

static void COM_setTxBusyFlagOn(void)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	af00      	add	r7, sp, #0
	Uart_Buffer.tx_busy = true;
 800a3a4:	4b04      	ldr	r3, [pc, #16]	; (800a3b8 <COM_setTxBusyFlagOn+0x18>)
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 800a3ac:	bf00      	nop
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	200003b4 	.word	0x200003b4

0800a3bc <COM_setTxBusyFlagOff>:

void COM_setTxBusyFlagOff(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0
	Uart_Buffer.tx_busy = false;
 800a3c0:	4b04      	ldr	r3, [pc, #16]	; (800a3d4 <COM_setTxBusyFlagOff+0x18>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 800a3c8:	bf00      	nop
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	200003b4 	.word	0x200003b4

0800a3d8 <COM_getTxBusyFlag>:

bool COM_getTxBusyFlag(void)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
	return Uart_Buffer.tx_busy;
 800a3dc:	4b03      	ldr	r3, [pc, #12]	; (800a3ec <COM_getTxBusyFlag+0x14>)
 800a3de:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	200003b4 	.word	0x200003b4

0800a3f0 <COM_charHandler>:

bool COM_charHandler(void)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	af00      	add	r7, sp, #0
	if (COM_getReadyCommandFlag())
 800a3f4:	f7ff ff64 	bl	800a2c0 <COM_getReadyCommandFlag>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <COM_charHandler+0x12>
	{
		return false;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e020      	b.n	800a444 <COM_charHandler+0x54>
	}

	if (Uart_Buffer.rx_single_char != '\n')
 800a402:	4b11      	ldr	r3, [pc, #68]	; (800a448 <COM_charHandler+0x58>)
 800a404:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a408:	2b0a      	cmp	r3, #10
 800a40a:	d016      	beq.n	800a43a <COM_charHandler+0x4a>
	{
		if(Uart_Buffer.rx_index < BUFFER_SIZE)
 800a40c:	4b0e      	ldr	r3, [pc, #56]	; (800a448 <COM_charHandler+0x58>)
 800a40e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a412:	2b63      	cmp	r3, #99	; 0x63
 800a414:	d815      	bhi.n	800a442 <COM_charHandler+0x52>
		{
			Uart_Buffer.p_rx_buffer[Uart_Buffer.rx_index] = Uart_Buffer.rx_single_char;
 800a416:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <COM_charHandler+0x58>)
 800a418:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a41c:	461a      	mov	r2, r3
 800a41e:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <COM_charHandler+0x58>)
 800a420:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 800a424:	4b08      	ldr	r3, [pc, #32]	; (800a448 <COM_charHandler+0x58>)
 800a426:	5499      	strb	r1, [r3, r2]
			Uart_Buffer.rx_index++;
 800a428:	4b07      	ldr	r3, [pc, #28]	; (800a448 <COM_charHandler+0x58>)
 800a42a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a42e:	3301      	adds	r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	4b05      	ldr	r3, [pc, #20]	; (800a448 <COM_charHandler+0x58>)
 800a434:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800a438:	e003      	b.n	800a442 <COM_charHandler+0x52>
		}
	}
	else
	{
		COM_setReadyCommandFlagOn();
 800a43a:	f7ff ff4d 	bl	800a2d8 <COM_setReadyCommandFlagOn>
		return true;
 800a43e:	2301      	movs	r3, #1
 800a440:	e000      	b.n	800a444 <COM_charHandler+0x54>
	}
	return false;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	bd80      	pop	{r7, pc}
 800a448:	200003b4 	.word	0x200003b4

0800a44c <COM_bufferInit>:

static void COM_bufferInit(uint8_t* p_buffer)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
	memset(Uart_Buffer.p_rx_buffer, 0, sizeof(uint8_t) * Uart_Buffer.rx_index);
 800a454:	4b07      	ldr	r3, [pc, #28]	; (800a474 <COM_bufferInit+0x28>)
 800a456:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a45a:	461a      	mov	r2, r3
 800a45c:	2100      	movs	r1, #0
 800a45e:	4805      	ldr	r0, [pc, #20]	; (800a474 <COM_bufferInit+0x28>)
 800a460:	f003 f815 	bl	800d48e <memset>
	Uart_Buffer.rx_index = 0;
 800a464:	4b03      	ldr	r3, [pc, #12]	; (800a474 <COM_bufferInit+0x28>)
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200003b4 	.word	0x200003b4

0800a478 <COMMAND_findAndExecuteCommand>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void COMMAND_findAndExecuteCommand (char* token)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
 800a484:	e02a      	b.n	800a4dc <COMMAND_findAndExecuteCommand+0x64>
	{
		if (strncmp(token, Commands[i].name, Commands[i].size)==0)
 800a486:	7bfa      	ldrb	r2, [r7, #15]
 800a488:	4917      	ldr	r1, [pc, #92]	; (800a4e8 <COMMAND_findAndExecuteCommand+0x70>)
 800a48a:	4613      	mov	r3, r2
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	4413      	add	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	440b      	add	r3, r1
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	7bfa      	ldrb	r2, [r7, #15]
 800a498:	4913      	ldr	r1, [pc, #76]	; (800a4e8 <COMMAND_findAndExecuteCommand+0x70>)
 800a49a:	4613      	mov	r3, r2
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	4413      	add	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	440b      	add	r3, r1
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f003 fd85 	bl	800dfbc <strncmp>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10e      	bne.n	800a4d6 <COMMAND_findAndExecuteCommand+0x5e>
		{
			COM_uartPrint(OK);
 800a4b8:	480c      	ldr	r0, [pc, #48]	; (800a4ec <COMMAND_findAndExecuteCommand+0x74>)
 800a4ba:	f7ff ff3f 	bl	800a33c <COM_uartPrint>
			Commands[i].func_ptr(token);
 800a4be:	7bfa      	ldrb	r2, [r7, #15]
 800a4c0:	4909      	ldr	r1, [pc, #36]	; (800a4e8 <COMMAND_findAndExecuteCommand+0x70>)
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	4413      	add	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	440b      	add	r3, r1
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
			return;
 800a4d4:	e005      	b.n	800a4e2 <COMMAND_findAndExecuteCommand+0x6a>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	73fb      	strb	r3, [r7, #15]
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b12      	cmp	r3, #18
 800a4e0:	d9d1      	bls.n	800a486 <COMMAND_findAndExecuteCommand+0xe>
		}
	}
}
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	0800ffac 	.word	0x0800ffac
 800a4ec:	0800fc68 	.word	0x0800fc68

0800a4f0 <COMMAND_pingCallback>:

void COMMAND_pingCallback(char* token)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
	COM_uartPrint(token);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff ff1f 	bl	800a33c <COM_uartPrint>
}
 800a4fe:	bf00      	nop
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <COMMAND_getVersionCallback>:

void COMMAND_getVersionCallback(char* token)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	COM_uartPrint(VERSION);
 800a510:	4803      	ldr	r0, [pc, #12]	; (800a520 <COMMAND_getVersionCallback+0x18>)
 800a512:	f7ff ff13 	bl	800a33c <COM_uartPrint>
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	0800fc6c 	.word	0x0800fc6c

0800a524 <COMMAND_pwmStartCallback>:

void COMMAND_pwmStartCallback(char* token)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800a52c:	2100      	movs	r1, #0
 800a52e:	4803      	ldr	r0, [pc, #12]	; (800a53c <COMMAND_pwmStartCallback+0x18>)
 800a530:	f7fb ff60 	bl	80063f4 <HAL_TIM_PWM_Start>
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20000bc4 	.word	0x20000bc4

0800a540 <COMMAND_pwmStopCallback>:

void COMMAND_pwmStopCallback(char* token)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800a548:	2100      	movs	r1, #0
 800a54a:	4803      	ldr	r0, [pc, #12]	; (800a558 <COMMAND_pwmStopCallback+0x18>)
 800a54c:	f7fc f806 	bl	800655c <HAL_TIM_PWM_Stop>
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20000bc4 	.word	0x20000bc4

0800a55c <COMMAND_pwmDcCallback>:

void COMMAND_pwmDcCallback(char* token)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 800a564:	490d      	ldr	r1, [pc, #52]	; (800a59c <COMMAND_pwmDcCallback+0x40>)
 800a566:	2000      	movs	r0, #0
 800a568:	f003 fd50 	bl	800e00c <strtok>
 800a56c:	6078      	str	r0, [r7, #4]
	int32_t dc = atoi(token);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f002 ff49 	bl	800d406 <atoi>
 800a574:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b64      	cmp	r3, #100	; 0x64
 800a57a:	dd01      	ble.n	800a580 <COMMAND_pwmDcCallback+0x24>
 800a57c:	2364      	movs	r3, #100	; 0x64
 800a57e:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	da01      	bge.n	800a58a <COMMAND_pwmDcCallback+0x2e>
 800a586:	2300      	movs	r3, #0
 800a588:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 800a58a:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <COMMAND_pwmDcCallback+0x44>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a592:	bf00      	nop
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	0800fc74 	.word	0x0800fc74
 800a5a0:	20000bc4 	.word	0x20000bc4

0800a5a4 <COMMAND_crcWholeFlashCalcCallback>:

void COMMAND_crcWholeFlashCalcCallback(char* token)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
	char temp [9];
	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 800a5ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5b0:	61fb      	str	r3, [r7, #28]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 800a5b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5b6:	61bb      	str	r3, [r7, #24]

	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 800a5b8:	69fa      	ldr	r2, [r7, #28]
 800a5ba:	69b9      	ldr	r1, [r7, #24]
 800a5bc:	4809      	ldr	r0, [pc, #36]	; (800a5e4 <COMMAND_crcWholeFlashCalcCallback+0x40>)
 800a5be:	f7f6 fdf9 	bl	80011b4 <HAL_CRC_Calculate>
 800a5c2:	6178      	str	r0, [r7, #20]

	sprintf(temp, "%x\n", (unsigned int)crcFlashResult);
 800a5c4:	f107 0308 	add.w	r3, r7, #8
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	4907      	ldr	r1, [pc, #28]	; (800a5e8 <COMMAND_crcWholeFlashCalcCallback+0x44>)
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f003 fcd5 	bl	800df7c <siprintf>
	COM_uartPrint(temp);
 800a5d2:	f107 0308 	add.w	r3, r7, #8
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff feb0 	bl	800a33c <COM_uartPrint>
}
 800a5dc:	bf00      	nop
 800a5de:	3720      	adds	r7, #32
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000af8 	.word	0x20000af8
 800a5e8:	0800fc78 	.word	0x0800fc78

0800a5ec <COMMAND_iwdgTestCallback>:

void COMMAND_iwdgTestCallback(char* token)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
#ifdef IWDG_ENABLE
	while(1);
#endif
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <COMMAND_flashLockCallback>:

void COMMAND_flashLockCallback(char* token)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b08a      	sub	sp, #40	; 0x28
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
	 *It does not prevent one part of code to read another part, or even rewrite.
	 *PCROP allows you to use debugger to debug your code,
	 *but protects reading and rewriting the "secret" part.*/

	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 800a608:	f107 030c 	add.w	r3, r7, #12
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7f7 fe19 	bl	8002244 <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0) {
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	2baa      	cmp	r3, #170	; 0xaa
 800a616:	d130      	bne.n	800a67a <COMMAND_flashLockCallback+0x7a>
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 800a618:	2355      	movs	r3, #85	; 0x55
 800a61a:	61fb      	str	r3, [r7, #28]
		obConfig.OptionType = OPTIONBYTE_RDP;
 800a61c:	2302      	movs	r3, #2
 800a61e:	60fb      	str	r3, [r7, #12]

		if (HAL_FLASH_Unlock() != HAL_OK)
 800a620:	f7f7 fb6e 	bl	8001d00 <HAL_FLASH_Unlock>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <COMMAND_flashLockCallback+0x2e>
		{
			Error_Handler();
 800a62a:	f002 f947 	bl	800c8bc <Error_Handler>
		}
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 800a62e:	f7f7 fb99 	bl	8001d64 <HAL_FLASH_OB_Unlock>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <COMMAND_flashLockCallback+0x3c>
		{
			Error_Handler();
 800a638:	f002 f940 	bl	800c8bc <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 800a63c:	f107 030c 	add.w	r3, r7, #12
 800a640:	4618      	mov	r0, r3
 800a642:	f7f7 fd79 	bl	8002138 <HAL_FLASHEx_OBProgram>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <COMMAND_flashLockCallback+0x50>
		{
			Error_Handler();
 800a64c:	f002 f936 	bl	800c8bc <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 800a650:	f7f7 fbb4 	bl	8001dbc <HAL_FLASH_OB_Launch>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <COMMAND_flashLockCallback+0x5e>
		{
			Error_Handler();
 800a65a:	f002 f92f 	bl	800c8bc <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 800a65e:	f7f7 fb9d 	bl	8001d9c <HAL_FLASH_OB_Lock>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <COMMAND_flashLockCallback+0x6c>
		{
			Error_Handler();
 800a668:	f002 f928 	bl	800c8bc <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 800a66c:	f7f7 fb6a 	bl	8001d44 <HAL_FLASH_Lock>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <COMMAND_flashLockCallback+0x7a>
		{
			Error_Handler();
 800a676:	f002 f921 	bl	800c8bc <Error_Handler>
		FLASH_setSectorAddress(7, sector_7_addr);
		uint32_t myTestWrite[1] = {0xDEADBEEF}; 		//0xFFFFFFFF, 0xDEADBEEF
		FLASH_writeN(131072-4, myTestWrite2, 1, DATA_TYPE_32);
		*/
	}
}
 800a67a:	bf00      	nop
 800a67c:	3728      	adds	r7, #40	; 0x28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <COMMAND_setSNCallback>:

void COMMAND_setSNCallback(char* token)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
	//if (FLASH_wrpSectorDisable();

	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 800a68c:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <COMMAND_setSNCallback+0x30>)
 800a68e:	60fb      	str	r3, [r7, #12]
	FLASH_setSectorAddress(7, sector_7_addr);
 800a690:	68f9      	ldr	r1, [r7, #12]
 800a692:	2007      	movs	r0, #7
 800a694:	f000 f946 	bl	800a924 <FLASH_setSectorAddress>
	uint32_t myTestWrite[1] = {0xDEADBEEF}; //0xFFFFFFFF, 0xDEADBEEF
 800a698:	4b07      	ldr	r3, [pc, #28]	; (800a6b8 <COMMAND_setSNCallback+0x34>)
 800a69a:	60bb      	str	r3, [r7, #8]
	FLASH_writeN(0, myTestWrite, 1, DATA_TYPE_32);
 800a69c:	f107 0108 	add.w	r1, r7, #8
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	f000 f953 	bl	800a950 <FLASH_writeN>

	//FLASH_wrpSectorEnable();

}
 800a6aa:	bf00      	nop
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	08060000 	.word	0x08060000
 800a6b8:	deadbeef 	.word	0xdeadbeef

0800a6bc <COMMAND_getSNCallback>:

void COMMAND_getSNCallback(char* token)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
	char temp [9];
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 800a6c4:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <COMMAND_getSNCallback+0x44>)
 800a6c6:	61fb      	str	r3, [r7, #28]
	FLASH_setSectorAddress(7, sector_7_addr);
 800a6c8:	69f9      	ldr	r1, [r7, #28]
 800a6ca:	2007      	movs	r0, #7
 800a6cc:	f000 f92a 	bl	800a924 <FLASH_setSectorAddress>
	uint32_t myTestRead[1];
	FLASH_readN(0, myTestRead, 1, DATA_TYPE_32);
 800a6d0:	f107 010c 	add.w	r1, r7, #12
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	2000      	movs	r0, #0
 800a6da:	f000 f9ab 	bl	800aa34 <FLASH_readN>

	sprintf(temp, "%x\n", (unsigned int)myTestRead[0]);
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	f107 0310 	add.w	r3, r7, #16
 800a6e4:	4907      	ldr	r1, [pc, #28]	; (800a704 <COMMAND_getSNCallback+0x48>)
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f003 fc48 	bl	800df7c <siprintf>
	COM_uartPrint(temp);
 800a6ec:	f107 0310 	add.w	r3, r7, #16
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7ff fe23 	bl	800a33c <COM_uartPrint>
}
 800a6f6:	bf00      	nop
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	08060000 	.word	0x08060000
 800a704:	0800fc78 	.word	0x0800fc78

0800a708 <COMMAND_startTickCallback>:

void COMMAND_startTickCallback(char* token)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08c      	sub	sp, #48	; 0x30
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 800a710:	f107 0308 	add.w	r3, r7, #8
 800a714:	2228      	movs	r2, #40	; 0x28
 800a716:	2100      	movs	r1, #0
 800a718:	4618      	mov	r0, r3
 800a71a:	f002 feb8 	bl	800d48e <memset>
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	723b      	strb	r3, [r7, #8]
	  sAlarm.AlarmTime.Minutes = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	727b      	strb	r3, [r7, #9]
	  sAlarm.AlarmTime.Seconds = 1;
 800a726:	2301      	movs	r3, #1
 800a728:	72bb      	strb	r3, [r7, #10]
	  sAlarm.AlarmTime.SubSeconds = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	60fb      	str	r3, [r7, #12]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a72e:	2300      	movs	r3, #0
 800a730:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a732:	2300      	movs	r3, #0
 800a734:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800a736:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800a73a:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a740:	2300      	movs	r3, #0
 800a742:	627b      	str	r3, [r7, #36]	; 0x24
	  sAlarm.AlarmDateWeekDay = 1;
 800a744:	2301      	movs	r3, #1
 800a746:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  sAlarm.Alarm = RTC_ALARM_A;
 800a74a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a74e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a750:	f107 0308 	add.w	r3, r7, #8
 800a754:	2200      	movs	r2, #0
 800a756:	4619      	mov	r1, r3
 800a758:	4805      	ldr	r0, [pc, #20]	; (800a770 <COMMAND_startTickCallback+0x68>)
 800a75a:	f7fa fed1 	bl	8005500 <HAL_RTC_SetAlarm_IT>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <COMMAND_startTickCallback+0x60>
	  {
	    Error_Handler();
 800a764:	f002 f8aa 	bl	800c8bc <Error_Handler>
	  }
}
 800a768:	bf00      	nop
 800a76a:	3730      	adds	r7, #48	; 0x30
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20000b64 	.word	0x20000b64

0800a774 <COMMAND_stopTickCallback>:

void COMMAND_stopTickCallback(char* token)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800a77c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a780:	4803      	ldr	r0, [pc, #12]	; (800a790 <COMMAND_stopTickCallback+0x1c>)
 800a782:	f7fb f9a7 	bl	8005ad4 <HAL_RTC_DeactivateAlarm>
}
 800a786:	bf00      	nop
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	20000b64 	.word	0x20000b64

0800a794 <COMMAND_assert0Callback>:

void COMMAND_assert0Callback(char* token)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	assert_param(0);
 800a79c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800a7a0:	4803      	ldr	r0, [pc, #12]	; (800a7b0 <COMMAND_assert0Callback+0x1c>)
 800a7a2:	f002 f893 	bl	800c8cc <assert_failed>
}
 800a7a6:	bf00      	nop
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	0800fc7c 	.word	0x0800fc7c

0800a7b4 <COMMAND_clearAssertFlagCallback>:

void COMMAND_clearAssertFlagCallback(char* token)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	SYSTEM_DEBUG_assertResetFlag();
 800a7bc:	f002 faba 	bl	800cd34 <SYSTEM_DEBUG_assertResetFlag>
}
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <COMMAND_lsm6dslPerSampleEnableCallback>:

void COMMAND_lsm6dslPerSampleEnableCallback(char* token)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
	LSM6DSL_perSampleInit();
 800a7d0:	f000 fc5c 	bl	800b08c <LSM6DSL_perSampleInit>
}
 800a7d4:	bf00      	nop
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <COMMAND_lsm6dslFifoEnableCallback>:

void COMMAND_lsm6dslFifoEnableCallback(char* token)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
	LSM6DSL_fifoInit();
 800a7e4:	f000 fd6a 	bl	800b2bc <LSM6DSL_fifoInit>
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <COMMAND_lsm6dslDisableCallback>:

void COMMAND_lsm6dslDisableCallback(char* token)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
	LSM6DSL_modesDisable();
 800a7f8:	f001 f816 	bl	800b828 <LSM6DSL_modesDisable>
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <COMMAND_enterStopModeCallback>:

void COMMAND_enterStopModeCallback(char* token)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 800a80c:	4908      	ldr	r1, [pc, #32]	; (800a830 <COMMAND_enterStopModeCallback+0x2c>)
 800a80e:	2000      	movs	r0, #0
 800a810:	f003 fbfc 	bl	800e00c <strtok>
 800a814:	6078      	str	r0, [r7, #4]
	uint32_t wake_up_time = atoi(token);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f002 fdf5 	bl	800d406 <atoi>
 800a81c:	4603      	mov	r3, r0
 800a81e:	60fb      	str	r3, [r7, #12]
	SYSTEM_DEBUG_enterStopMode(wake_up_time);
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f002 fb57 	bl	800ced4 <SYSTEM_DEBUG_enterStopMode>
}
 800a826:	bf00      	nop
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	0800fc74 	.word	0x0800fc74

0800a834 <COMMAND_enterStandbyModeCallback>:

void COMMAND_enterStandbyModeCallback(char* token)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
	SYSTEM_DEBUG_enterStandbyMode();
 800a83c:	f002 fb8e 	bl	800cf5c <SYSTEM_DEBUG_enterStandbyMode>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800a84c:	4b06      	ldr	r3, [pc, #24]	; (800a868 <MX_CRC_Init+0x20>)
 800a84e:	4a07      	ldr	r2, [pc, #28]	; (800a86c <MX_CRC_Init+0x24>)
 800a850:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a852:	4805      	ldr	r0, [pc, #20]	; (800a868 <MX_CRC_Init+0x20>)
 800a854:	f7f6 fc84 	bl	8001160 <HAL_CRC_Init>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800a85e:	f002 f82d 	bl	800c8bc <Error_Handler>
  }

}
 800a862:	bf00      	nop
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	20000af8 	.word	0x20000af8
 800a86c:	40023000 	.word	0x40023000

0800a870 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a0b      	ldr	r2, [pc, #44]	; (800a8ac <HAL_CRC_MspInit+0x3c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d10d      	bne.n	800a89e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800a882:	2300      	movs	r3, #0
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <HAL_CRC_MspInit+0x40>)
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	4a09      	ldr	r2, [pc, #36]	; (800a8b0 <HAL_CRC_MspInit+0x40>)
 800a88c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a890:	6313      	str	r3, [r2, #48]	; 0x30
 800a892:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <HAL_CRC_MspInit+0x40>)
 800a894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800a89e:	bf00      	nop
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	40023000 	.word	0x40023000
 800a8b0:	40023800 	.word	0x40023800

0800a8b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	607b      	str	r3, [r7, #4]
 800a8be:	4b10      	ldr	r3, [pc, #64]	; (800a900 <MX_DMA_Init+0x4c>)
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	4a0f      	ldr	r2, [pc, #60]	; (800a900 <MX_DMA_Init+0x4c>)
 800a8c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a8c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ca:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <MX_DMA_Init+0x4c>)
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8d2:	607b      	str	r3, [r7, #4]
 800a8d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2105      	movs	r1, #5
 800a8da:	2010      	movs	r0, #16
 800a8dc:	f7f6 fbfc 	bl	80010d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a8e0:	2010      	movs	r0, #16
 800a8e2:	f7f6 fc25 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	2105      	movs	r1, #5
 800a8ea:	2011      	movs	r0, #17
 800a8ec:	f7f6 fbf4 	bl	80010d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800a8f0:	2011      	movs	r0, #17
 800a8f2:	f7f6 fc1d 	bl	8001130 <HAL_NVIC_EnableIRQ>

}
 800a8f6:	bf00      	nop
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	40023800 	.word	0x40023800

0800a904 <FLASH_eraseSector>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

static void FLASH_eraseSector(void)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800a908:	f7f7 f9fa 	bl	8001d00 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(Sector_Num, FLASH_VOLTAGE_RANGE_3);
 800a90c:	4b04      	ldr	r3, [pc, #16]	; (800a920 <FLASH_eraseSector+0x1c>)
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	2102      	movs	r1, #2
 800a912:	4618      	mov	r0, r3
 800a914:	f7f7 fcba 	bl	800228c <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 800a918:	f7f7 fa14 	bl	8001d44 <HAL_FLASH_Lock>
}
 800a91c:	bf00      	nop
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20000484 	.word	0x20000484

0800a924 <FLASH_setSectorAddress>:

void FLASH_setSectorAddress(uint8_t sector, uint32_t addrs)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	6039      	str	r1, [r7, #0]
 800a92e:	71fb      	strb	r3, [r7, #7]
	Sector_Num = sector;
 800a930:	4a05      	ldr	r2, [pc, #20]	; (800a948 <FLASH_setSectorAddress+0x24>)
 800a932:	79fb      	ldrb	r3, [r7, #7]
 800a934:	7013      	strb	r3, [r2, #0]
	Sector_Addrs = addrs;
 800a936:	4a05      	ldr	r2, [pc, #20]	; (800a94c <FLASH_setSectorAddress+0x28>)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	6013      	str	r3, [r2, #0]
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	20000484 	.word	0x20000484
 800a94c:	20000480 	.word	0x20000480

0800a950 <FLASH_writeN>:

void FLASH_writeN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800a950:	b590      	push	{r4, r7, lr}
 800a952:	b089      	sub	sp, #36	; 0x24
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
 800a95c:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = Sector_Addrs + idx;
 800a95e:	4b34      	ldr	r3, [pc, #208]	; (800aa30 <FLASH_writeN+0xe0>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	4413      	add	r3, r2
 800a966:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	FLASH_eraseSector();
 800a968:	f7ff ffcc 	bl	800a904 <FLASH_eraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 800a96c:	f7f7 f9c8 	bl	8001d00 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d01e      	beq.n	800a9b4 <FLASH_writeN+0x64>
 800a976:	2b02      	cmp	r3, #2
 800a978:	d038      	beq.n	800a9ec <FLASH_writeN+0x9c>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d151      	bne.n	800aa22 <FLASH_writeN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 800a97e:	2300      	movs	r3, #0
 800a980:	61bb      	str	r3, [r7, #24]
 800a982:	e012      	b.n	800a9aa <FLASH_writeN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	4413      	add	r3, r2
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	f04f 0400 	mov.w	r4, #0
 800a992:	461a      	mov	r2, r3
 800a994:	4623      	mov	r3, r4
 800a996:	69f9      	ldr	r1, [r7, #28]
 800a998:	2000      	movs	r0, #0
 800a99a:	f7f7 f94b 	bl	8001c34 <HAL_FLASH_Program>
					flashAddress++;
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	61bb      	str	r3, [r7, #24]
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d3e8      	bcc.n	800a984 <FLASH_writeN+0x34>
				}
			break;
 800a9b2:	e036      	b.n	800aa22 <FLASH_writeN+0xd2>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	617b      	str	r3, [r7, #20]
 800a9b8:	e013      	b.n	800a9e2 <FLASH_writeN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	005b      	lsls	r3, r3, #1
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	f04f 0400 	mov.w	r4, #0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4623      	mov	r3, r4
 800a9ce:	69f9      	ldr	r1, [r7, #28]
 800a9d0:	2001      	movs	r0, #1
 800a9d2:	f7f7 f92f 	bl	8001c34 <HAL_FLASH_Program>
					flashAddress+=2;
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	3302      	adds	r3, #2
 800a9da:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	617b      	str	r3, [r7, #20]
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d3e7      	bcc.n	800a9ba <FLASH_writeN+0x6a>
				}
			break;
 800a9ea:	e01a      	b.n	800aa22 <FLASH_writeN+0xd2>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	613b      	str	r3, [r7, #16]
 800a9f0:	e012      	b.n	800aa18 <FLASH_writeN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f04f 0400 	mov.w	r4, #0
 800aa00:	461a      	mov	r2, r3
 800aa02:	4623      	mov	r3, r4
 800aa04:	69f9      	ldr	r1, [r7, #28]
 800aa06:	2002      	movs	r0, #2
 800aa08:	f7f7 f914 	bl	8001c34 <HAL_FLASH_Program>
					flashAddress+=4;
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	3301      	adds	r3, #1
 800aa16:	613b      	str	r3, [r7, #16]
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d3e8      	bcc.n	800a9f2 <FLASH_writeN+0xa2>
				}
			break;
 800aa20:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800aa22:	f7f7 f98f 	bl	8001d44 <HAL_FLASH_Lock>
}
 800aa26:	bf00      	nop
 800aa28:	3724      	adds	r7, #36	; 0x24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd90      	pop	{r4, r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	20000480 	.word	0x20000480

0800aa34 <FLASH_readN>:

void FLASH_readN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b089      	sub	sp, #36	; 0x24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = Sector_Addrs + idx;
 800aa42:	4b28      	ldr	r3, [pc, #160]	; (800aae4 <FLASH_readN+0xb0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d018      	beq.n	800aa84 <FLASH_readN+0x50>
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d02b      	beq.n	800aaae <FLASH_readN+0x7a>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d000      	beq.n	800aa5c <FLASH_readN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 800aa5a:	e03d      	b.n	800aad8 <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	61bb      	str	r3, [r7, #24]
 800aa60:	e00b      	b.n	800aa7a <FLASH_readN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 800aa62:	69fa      	ldr	r2, [r7, #28]
 800aa64:	68b9      	ldr	r1, [r7, #8]
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	440b      	add	r3, r1
 800aa6a:	7812      	ldrb	r2, [r2, #0]
 800aa6c:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	3301      	adds	r3, #1
 800aa72:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	3301      	adds	r3, #1
 800aa78:	61bb      	str	r3, [r7, #24]
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d3ef      	bcc.n	800aa62 <FLASH_readN+0x2e>
			break;
 800aa82:	e029      	b.n	800aad8 <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800aa84:	2300      	movs	r3, #0
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	e00c      	b.n	800aaa4 <FLASH_readN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 800aa8a:	69fa      	ldr	r2, [r7, #28]
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	68b9      	ldr	r1, [r7, #8]
 800aa92:	440b      	add	r3, r1
 800aa94:	8812      	ldrh	r2, [r2, #0]
 800aa96:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	3302      	adds	r3, #2
 800aa9c:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	617b      	str	r3, [r7, #20]
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d3ee      	bcc.n	800aa8a <FLASH_readN+0x56>
			break;
 800aaac:	e014      	b.n	800aad8 <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800aaae:	2300      	movs	r3, #0
 800aab0:	613b      	str	r3, [r7, #16]
 800aab2:	e00c      	b.n	800aace <FLASH_readN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 800aab4:	69fa      	ldr	r2, [r7, #28]
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	68b9      	ldr	r1, [r7, #8]
 800aabc:	440b      	add	r3, r1
 800aabe:	6812      	ldr	r2, [r2, #0]
 800aac0:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	3304      	adds	r3, #4
 800aac6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	3301      	adds	r3, #1
 800aacc:	613b      	str	r3, [r7, #16]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d3ee      	bcc.n	800aab4 <FLASH_readN+0x80>
			break;
 800aad6:	bf00      	nop
}
 800aad8:	bf00      	nop
 800aada:	3724      	adds	r7, #36	; 0x24
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	20000480 	.word	0x20000480

0800aae8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	4a07      	ldr	r2, [pc, #28]	; (800ab14 <vApplicationGetIdleTaskMemory+0x2c>)
 800aaf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	4a06      	ldr	r2, [pc, #24]	; (800ab18 <vApplicationGetIdleTaskMemory+0x30>)
 800aafe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2280      	movs	r2, #128	; 0x80
 800ab04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800ab06:	bf00      	nop
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	20000488 	.word	0x20000488
 800ab18:	2000053c 	.word	0x2000053c

0800ab1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800ab1c:	b5b0      	push	{r4, r5, r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800ab22:	4b0a      	ldr	r3, [pc, #40]	; (800ab4c <MX_FREERTOS_Init+0x30>)
 800ab24:	1d3c      	adds	r4, r7, #4
 800ab26:	461d      	mov	r5, r3
 800ab28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ab34:	1d3b      	adds	r3, r7, #4
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fe f8c8 	bl	8008cce <osThreadCreate>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	4b03      	ldr	r3, [pc, #12]	; (800ab50 <MX_FREERTOS_Init+0x34>)
 800ab42:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800ab44:	bf00      	nop
 800ab46:	3720      	adds	r7, #32
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab4c:	0800fc9c 	.word	0x0800fc9c
 800ab50:	20000b00 	.word	0x20000b00

0800ab54 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]

#ifdef IWDG_ENABLE
		kickDog();
#endif

		evt = osSignalWait(READY_COMMAND_SIGNAL | LSM6DSL_SIGNAL, osWaitForever);
 800ab5c:	f107 030c 	add.w	r3, r7, #12
 800ab60:	f04f 32ff 	mov.w	r2, #4294967295
 800ab64:	2103      	movs	r1, #3
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe f93e 	bl	8008de8 <osSignalWait>

		if (evt.status == osEventSignal)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2b08      	cmp	r3, #8
 800ab70:	d1f4      	bne.n	800ab5c <StartDefaultTask+0x8>
		{
			if (evt.value.signals & READY_COMMAND_SIGNAL)
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <StartDefaultTask+0x30>
			{
				//evt.value.signals &= ~READY_COMMAND_SIGNAL;
				COM_readyCommandProcess();
 800ab7c:	f7ff fbc8 	bl	800a310 <COM_readyCommandProcess>
				COM_setReadyCommandFlagOff();
 800ab80:	f7ff fbb8 	bl	800a2f4 <COM_setReadyCommandFlagOff>
			}
			if (evt.value.signals & LSM6DSL_SIGNAL)
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d0e6      	beq.n	800ab5c <StartDefaultTask+0x8>
			{
				//evt.value.signals &= ~LSM6DSL_SIGNAL;
				LSM6DSL_processHanlder();
 800ab8e:	f000 f9cd 	bl	800af2c <LSM6DSL_processHanlder>
		evt = osSignalWait(READY_COMMAND_SIGNAL | LSM6DSL_SIGNAL, osWaitForever);
 800ab92:	e7e3      	b.n	800ab5c <StartDefaultTask+0x8>

0800ab94 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
	 */
	COM_halUartReceiveDma();
 800ab9c:	f7ff fbf2 	bl	800a384 <COM_halUartReceiveDma>

	if (COM_charHandler())
 800aba0:	f7ff fc26 	bl	800a3f0 <COM_charHandler>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d005      	beq.n	800abb6 <HAL_UART_RxCpltCallback+0x22>
	{
		osSignalSet(defaultTaskHandle, READY_COMMAND_SIGNAL);
 800abaa:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <HAL_UART_RxCpltCallback+0x2c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2101      	movs	r1, #1
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fe f8d9 	bl	8008d68 <osSignalSet>
	}


}
 800abb6:	bf00      	nop
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20000b00 	.word	0x20000b00

0800abc4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
		   the HAL_GPIO_EXTI_Callback could be implemented in the user file
	*/
	if (GPIO_Pin == GPIO_PIN_5)
 800abce:	88fb      	ldrh	r3, [r7, #6]
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d105      	bne.n	800abe0 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		//LSM6DSL_setInterruptFlagOn();
		osSignalSet(defaultTaskHandle, LSM6DSL_SIGNAL);
 800abd4:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <HAL_GPIO_EXTI_Callback+0x24>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2102      	movs	r1, #2
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe f8c4 	bl	8008d68 <osSignalSet>
	}
}
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20000b00 	.word	0x20000b00

0800abec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b088      	sub	sp, #32
 800abf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abf2:	f107 030c 	add.w	r3, r7, #12
 800abf6:	2200      	movs	r2, #0
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	605a      	str	r2, [r3, #4]
 800abfc:	609a      	str	r2, [r3, #8]
 800abfe:	60da      	str	r2, [r3, #12]
 800ac00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac02:	2300      	movs	r3, #0
 800ac04:	60bb      	str	r3, [r7, #8]
 800ac06:	4b34      	ldr	r3, [pc, #208]	; (800acd8 <MX_GPIO_Init+0xec>)
 800ac08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0a:	4a33      	ldr	r2, [pc, #204]	; (800acd8 <MX_GPIO_Init+0xec>)
 800ac0c:	f043 0304 	orr.w	r3, r3, #4
 800ac10:	6313      	str	r3, [r2, #48]	; 0x30
 800ac12:	4b31      	ldr	r3, [pc, #196]	; (800acd8 <MX_GPIO_Init+0xec>)
 800ac14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac16:	f003 0304 	and.w	r3, r3, #4
 800ac1a:	60bb      	str	r3, [r7, #8]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac1e:	2300      	movs	r3, #0
 800ac20:	607b      	str	r3, [r7, #4]
 800ac22:	4b2d      	ldr	r3, [pc, #180]	; (800acd8 <MX_GPIO_Init+0xec>)
 800ac24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac26:	4a2c      	ldr	r2, [pc, #176]	; (800acd8 <MX_GPIO_Init+0xec>)
 800ac28:	f043 0301 	orr.w	r3, r3, #1
 800ac2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac2e:	4b2a      	ldr	r3, [pc, #168]	; (800acd8 <MX_GPIO_Init+0xec>)
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	f003 0301 	and.w	r3, r3, #1
 800ac36:	607b      	str	r3, [r7, #4]
 800ac38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	603b      	str	r3, [r7, #0]
 800ac3e:	4b26      	ldr	r3, [pc, #152]	; (800acd8 <MX_GPIO_Init+0xec>)
 800ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac42:	4a25      	ldr	r2, [pc, #148]	; (800acd8 <MX_GPIO_Init+0xec>)
 800ac44:	f043 0302 	orr.w	r3, r3, #2
 800ac48:	6313      	str	r3, [r2, #48]	; 0x30
 800ac4a:	4b23      	ldr	r3, [pc, #140]	; (800acd8 <MX_GPIO_Init+0xec>)
 800ac4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	603b      	str	r3, [r7, #0]
 800ac54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800ac56:	2200      	movs	r2, #0
 800ac58:	2120      	movs	r1, #32
 800ac5a:	4820      	ldr	r0, [pc, #128]	; (800acdc <MX_GPIO_Init+0xf0>)
 800ac5c:	f7f7 ffa2 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ac60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ac66:	4b1e      	ldr	r3, [pc, #120]	; (800ace0 <MX_GPIO_Init+0xf4>)
 800ac68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac6e:	f107 030c 	add.w	r3, r7, #12
 800ac72:	4619      	mov	r1, r3
 800ac74:	481b      	ldr	r0, [pc, #108]	; (800ace4 <MX_GPIO_Init+0xf8>)
 800ac76:	f7f7 fced 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ac7a:	2320      	movs	r3, #32
 800ac7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac86:	2300      	movs	r3, #0
 800ac88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac8a:	f107 030c 	add.w	r3, r7, #12
 800ac8e:	4619      	mov	r1, r3
 800ac90:	4812      	ldr	r0, [pc, #72]	; (800acdc <MX_GPIO_Init+0xf0>)
 800ac92:	f7f7 fcdf 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ac96:	2320      	movs	r3, #32
 800ac98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ac9a:	4b13      	ldr	r3, [pc, #76]	; (800ace8 <MX_GPIO_Init+0xfc>)
 800ac9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aca2:	f107 030c 	add.w	r3, r7, #12
 800aca6:	4619      	mov	r1, r3
 800aca8:	4810      	ldr	r0, [pc, #64]	; (800acec <MX_GPIO_Init+0x100>)
 800acaa:	f7f7 fcd3 	bl	8002654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800acae:	2200      	movs	r2, #0
 800acb0:	2105      	movs	r1, #5
 800acb2:	2017      	movs	r0, #23
 800acb4:	f7f6 fa10 	bl	80010d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800acb8:	2017      	movs	r0, #23
 800acba:	f7f6 fa39 	bl	8001130 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800acbe:	2200      	movs	r2, #0
 800acc0:	2105      	movs	r1, #5
 800acc2:	2028      	movs	r0, #40	; 0x28
 800acc4:	f7f6 fa08 	bl	80010d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800acc8:	2028      	movs	r0, #40	; 0x28
 800acca:	f7f6 fa31 	bl	8001130 <HAL_NVIC_EnableIRQ>

}
 800acce:	bf00      	nop
 800acd0:	3720      	adds	r7, #32
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	40023800 	.word	0x40023800
 800acdc:	40020000 	.word	0x40020000
 800ace0:	10110000 	.word	0x10110000
 800ace4:	40020800 	.word	0x40020800
 800ace8:	10210000 	.word	0x10210000
 800acec:	40020400 	.word	0x40020400

0800acf0 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 800acfa:	4b24      	ldr	r3, [pc, #144]	; (800ad8c <_sbrk_r+0x9c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10e      	bne.n	800ad20 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 800ad02:	4b23      	ldr	r3, [pc, #140]	; (800ad90 <_sbrk_r+0xa0>)
 800ad04:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800ad08:	4a22      	ldr	r2, [pc, #136]	; (800ad94 <_sbrk_r+0xa4>)
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	4a22      	ldr	r2, [pc, #136]	; (800ad98 <_sbrk_r+0xa8>)
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	4b1f      	ldr	r3, [pc, #124]	; (800ad90 <_sbrk_r+0xa0>)
 800ad12:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800ad16:	4a1f      	ldr	r2, [pc, #124]	; (800ad94 <_sbrk_r+0xa4>)
 800ad18:	1a9b      	subs	r3, r3, r2
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	4b1b      	ldr	r3, [pc, #108]	; (800ad8c <_sbrk_r+0x9c>)
 800ad1e:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 800ad20:	f7fe fe0e 	bl	8009940 <xTaskGetSchedulerState>
 800ad24:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d101      	bne.n	800ad2e <_sbrk_r+0x3e>
 800ad2a:	466b      	mov	r3, sp
 800ad2c:	e000      	b.n	800ad30 <_sbrk_r+0x40>
 800ad2e:	4b1b      	ldr	r3, [pc, #108]	; (800ad9c <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 800ad30:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 800ad32:	f7fe fb69 	bl	8009408 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 800ad36:	4b1a      	ldr	r3, [pc, #104]	; (800ada0 <_sbrk_r+0xb0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 800ad3c:	4b18      	ldr	r3, [pc, #96]	; (800ada0 <_sbrk_r+0xb0>)
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	4413      	add	r3, r2
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d207      	bcs.n	800ad5a <_sbrk_r+0x6a>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	220c      	movs	r2, #12
 800ad4e:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 800ad50:	f7fe fb68 	bl	8009424 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 800ad54:	f04f 33ff 	mov.w	r3, #4294967295
 800ad58:	e014      	b.n	800ad84 <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 800ad5a:	4b11      	ldr	r3, [pc, #68]	; (800ada0 <_sbrk_r+0xb0>)
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	4413      	add	r3, r2
 800ad62:	4a0f      	ldr	r2, [pc, #60]	; (800ada0 <_sbrk_r+0xb0>)
 800ad64:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800ad66:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <_sbrk_r+0xa8>)
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	4a0a      	ldr	r2, [pc, #40]	; (800ad98 <_sbrk_r+0xa8>)
 800ad70:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 800ad72:	4b0c      	ldr	r3, [pc, #48]	; (800ada4 <_sbrk_r+0xb4>)
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	4413      	add	r3, r2
 800ad7a:	4a0a      	ldr	r2, [pc, #40]	; (800ada4 <_sbrk_r+0xb4>)
 800ad7c:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 800ad7e:	f7fe fb51 	bl	8009424 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 800ad82:	68bb      	ldr	r3, [r7, #8]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	20000b08 	.word	0x20000b08
 800ad90:	20020000 	.word	0x20020000
 800ad94:	20000d08 	.word	0x20000d08
 800ad98:	2000073c 	.word	0x2000073c
 800ad9c:	2001fe00 	.word	0x2001fe00
 800ada0:	2000008c 	.word	0x2000008c
 800ada4:	20000740 	.word	0x20000740

0800ada8 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800adb0:	f3ef 8305 	mrs	r3, IPSR
 800adb4:	613b      	str	r3, [r7, #16]
	if( ulCurrentInterrupt == 0 )
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <__malloc_lock+0x1a>
		xReturn = pdFALSE;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	e001      	b.n	800adc6 <__malloc_lock+0x1e>
		xReturn = pdTRUE;
 800adc2:	2301      	movs	r3, #1
 800adc4:	60fb      	str	r3, [r7, #12]
	return xReturn;
 800adc6:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 800adc8:	2b00      	cmp	r3, #0
 800adca:	bf14      	ite	ne
 800adcc:	2301      	movne	r3, #1
 800adce:	2300      	moveq	r3, #0
 800add0:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d009      	beq.n	800adec <__malloc_lock+0x44>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	60bb      	str	r3, [r7, #8]
 800adea:	e7fe      	b.n	800adea <__malloc_lock+0x42>
    vTaskSuspendAll();
 800adec:	f7fe fb0c 	bl	8009408 <vTaskSuspendAll>
  #endif
};
 800adf0:	bf00      	nop
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 800ae00:	f7fe fb10 	bl	8009424 <xTaskResumeAll>
  #endif
};
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f002 fb1f 	bl	800d458 <malloc>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	60fb      	str	r3, [r7, #12]
    return p;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
    free(pv);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f002 fb19 	bl	800d468 <free>
};
 800ae36:	bf00      	nop
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800ae44:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae46:	4a13      	ldr	r2, [pc, #76]	; (800ae94 <MX_I2C1_Init+0x54>)
 800ae48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800ae4a:	4b11      	ldr	r3, [pc, #68]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae4c:	4a12      	ldr	r2, [pc, #72]	; (800ae98 <MX_I2C1_Init+0x58>)
 800ae4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ae50:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800ae56:	4b0e      	ldr	r3, [pc, #56]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ae5c:	4b0c      	ldr	r3, [pc, #48]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ae64:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800ae6a:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ae70:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ae76:	4b06      	ldr	r3, [pc, #24]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ae7c:	4804      	ldr	r0, [pc, #16]	; (800ae90 <MX_I2C1_Init+0x50>)
 800ae7e:	f7f7 fedb 	bl	8002c38 <HAL_I2C_Init>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800ae88:	f001 fd18 	bl	800c8bc <Error_Handler>
  }

}
 800ae8c:	bf00      	nop
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	20000b10 	.word	0x20000b10
 800ae94:	40005400 	.word	0x40005400
 800ae98:	000186a0 	.word	0x000186a0

0800ae9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	; 0x28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aea4:	f107 0314 	add.w	r3, r7, #20
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	605a      	str	r2, [r3, #4]
 800aeae:	609a      	str	r2, [r3, #8]
 800aeb0:	60da      	str	r2, [r3, #12]
 800aeb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a19      	ldr	r2, [pc, #100]	; (800af20 <HAL_I2C_MspInit+0x84>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d12c      	bne.n	800af18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aebe:	2300      	movs	r3, #0
 800aec0:	613b      	str	r3, [r7, #16]
 800aec2:	4b18      	ldr	r3, [pc, #96]	; (800af24 <HAL_I2C_MspInit+0x88>)
 800aec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec6:	4a17      	ldr	r2, [pc, #92]	; (800af24 <HAL_I2C_MspInit+0x88>)
 800aec8:	f043 0302 	orr.w	r3, r3, #2
 800aecc:	6313      	str	r3, [r2, #48]	; 0x30
 800aece:	4b15      	ldr	r3, [pc, #84]	; (800af24 <HAL_I2C_MspInit+0x88>)
 800aed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed2:	f003 0302 	and.w	r3, r3, #2
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800aeda:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800aee0:	2312      	movs	r3, #18
 800aee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aee4:	2301      	movs	r3, #1
 800aee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aee8:	2303      	movs	r3, #3
 800aeea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800aeec:	2304      	movs	r3, #4
 800aeee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aef0:	f107 0314 	add.w	r3, r7, #20
 800aef4:	4619      	mov	r1, r3
 800aef6:	480c      	ldr	r0, [pc, #48]	; (800af28 <HAL_I2C_MspInit+0x8c>)
 800aef8:	f7f7 fbac 	bl	8002654 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800aefc:	2300      	movs	r3, #0
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	4b08      	ldr	r3, [pc, #32]	; (800af24 <HAL_I2C_MspInit+0x88>)
 800af02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af04:	4a07      	ldr	r2, [pc, #28]	; (800af24 <HAL_I2C_MspInit+0x88>)
 800af06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af0a:	6413      	str	r3, [r2, #64]	; 0x40
 800af0c:	4b05      	ldr	r3, [pc, #20]	; (800af24 <HAL_I2C_MspInit+0x88>)
 800af0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800af18:	bf00      	nop
 800af1a:	3728      	adds	r7, #40	; 0x28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	40005400 	.word	0x40005400
 800af24:	40023800 	.word	0x40023800
 800af28:	40020400 	.word	0x40020400

0800af2c <LSM6DSL_processHanlder>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void LSM6DSL_processHanlder(void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Mode == LSM6DSL_MODE_PER_SAMPLE)
 800af30:	4b07      	ldr	r3, [pc, #28]	; (800af50 <LSM6DSL_processHanlder+0x24>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d102      	bne.n	800af3e <LSM6DSL_processHanlder+0x12>
	{
		LSM6DSL_perSampleProcess();
 800af38:	f000 f8e4 	bl	800b104 <LSM6DSL_perSampleProcess>
	}
	else if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
	{
		LSM6DSL_fifoProcess();
	}
}
 800af3c:	e005      	b.n	800af4a <LSM6DSL_processHanlder+0x1e>
	else if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
 800af3e:	4b04      	ldr	r3, [pc, #16]	; (800af50 <LSM6DSL_processHanlder+0x24>)
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d101      	bne.n	800af4a <LSM6DSL_processHanlder+0x1e>
		LSM6DSL_fifoProcess();
 800af46:	f000 fa15 	bl	800b374 <LSM6DSL_fifoProcess>
}
 800af4a:	bf00      	nop
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	20000ac8 	.word	0x20000ac8

0800af54 <LSM6DSL_write>:

static int32_t LSM6DSL_write(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b088      	sub	sp, #32
 800af58:	af04      	add	r7, sp, #16
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	607a      	str	r2, [r7, #4]
 800af5e:	461a      	mov	r2, r3
 800af60:	460b      	mov	r3, r1
 800af62:	72fb      	strb	r3, [r7, #11]
 800af64:	4613      	mov	r3, r2
 800af66:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 800af68:	7afb      	ldrb	r3, [r7, #11]
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af70:	9302      	str	r3, [sp, #8]
 800af72:	893b      	ldrh	r3, [r7, #8]
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	2301      	movs	r3, #1
 800af7c:	21d7      	movs	r1, #215	; 0xd7
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7f8 f81a 	bl	8002fb8 <HAL_I2C_Mem_Write>
    return 0;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <LSM6DSL_read>:

static int32_t LSM6DSL_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b088      	sub	sp, #32
 800af92:	af04      	add	r7, sp, #16
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	461a      	mov	r2, r3
 800af9a:	460b      	mov	r3, r1
 800af9c:	72fb      	strb	r3, [r7, #11]
 800af9e:	4613      	mov	r3, r2
 800afa0:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 800afa2:	7afb      	ldrb	r3, [r7, #11]
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800afaa:	9302      	str	r3, [sp, #8]
 800afac:	893b      	ldrh	r3, [r7, #8]
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	2301      	movs	r3, #1
 800afb6:	21d7      	movs	r1, #215	; 0xd7
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7f8 f903 	bl	80031c4 <HAL_I2C_Mem_Read>
	return 0;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <LSM6DSL_init>:

void LSM6DSL_init (void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
	Lsm6dsl_Is_Connected = LSM6DSL_DISCONNECTED;
 800afcc:	4b26      	ldr	r3, [pc, #152]	; (800b068 <LSM6DSL_init+0xa0>)
 800afce:	2201      	movs	r2, #1
 800afd0:	701a      	strb	r2, [r3, #0]

	/* Initialize mems driver interface */
	Dev_Ctx.write_reg = LSM6DSL_write;
 800afd2:	4b26      	ldr	r3, [pc, #152]	; (800b06c <LSM6DSL_init+0xa4>)
 800afd4:	4a26      	ldr	r2, [pc, #152]	; (800b070 <LSM6DSL_init+0xa8>)
 800afd6:	601a      	str	r2, [r3, #0]
	Dev_Ctx.read_reg = LSM6DSL_read;
 800afd8:	4b24      	ldr	r3, [pc, #144]	; (800b06c <LSM6DSL_init+0xa4>)
 800afda:	4a26      	ldr	r2, [pc, #152]	; (800b074 <LSM6DSL_init+0xac>)
 800afdc:	605a      	str	r2, [r3, #4]
	Dev_Ctx.handle = &hi2c1;
 800afde:	4b23      	ldr	r3, [pc, #140]	; (800b06c <LSM6DSL_init+0xa4>)
 800afe0:	4a25      	ldr	r2, [pc, #148]	; (800b078 <LSM6DSL_init+0xb0>)
 800afe2:	609a      	str	r2, [r3, #8]

	/* Check device ID */
	Who_Am_I = 0;
 800afe4:	4b25      	ldr	r3, [pc, #148]	; (800b07c <LSM6DSL_init+0xb4>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	701a      	strb	r2, [r3, #0]
	lsm6dsl_device_id_get(&Dev_Ctx, &Who_Am_I);
 800afea:	4924      	ldr	r1, [pc, #144]	; (800b07c <LSM6DSL_init+0xb4>)
 800afec:	481f      	ldr	r0, [pc, #124]	; (800b06c <LSM6DSL_init+0xa4>)
 800afee:	f000 fdb4 	bl	800bb5a <lsm6dsl_device_id_get>
	if ( Who_Am_I != LSM6DSL_ID )
 800aff2:	4b22      	ldr	r3, [pc, #136]	; (800b07c <LSM6DSL_init+0xb4>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b6a      	cmp	r3, #106	; 0x6a
 800aff8:	d003      	beq.n	800b002 <LSM6DSL_init+0x3a>
	{
		COM_uartPrint("lsm6dsl device not found\n");
 800affa:	4821      	ldr	r0, [pc, #132]	; (800b080 <LSM6DSL_init+0xb8>)
 800affc:	f7ff f99e 	bl	800a33c <COM_uartPrint>
		return;
 800b000:	e031      	b.n	800b066 <LSM6DSL_init+0x9e>
		//while(1); /* device not found */
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&Dev_Ctx, PROPERTY_ENABLE);
 800b002:	2101      	movs	r1, #1
 800b004:	4819      	ldr	r0, [pc, #100]	; (800b06c <LSM6DSL_init+0xa4>)
 800b006:	f000 fdb9 	bl	800bb7c <lsm6dsl_reset_set>
	do {
	lsm6dsl_reset_get(&Dev_Ctx, &Rst);
 800b00a:	491e      	ldr	r1, [pc, #120]	; (800b084 <LSM6DSL_init+0xbc>)
 800b00c:	4817      	ldr	r0, [pc, #92]	; (800b06c <LSM6DSL_init+0xa4>)
 800b00e:	f000 fddb 	bl	800bbc8 <lsm6dsl_reset_get>
	} while (Rst);
 800b012:	4b1c      	ldr	r3, [pc, #112]	; (800b084 <LSM6DSL_init+0xbc>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1f7      	bne.n	800b00a <LSM6DSL_init+0x42>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&Dev_Ctx, PROPERTY_ENABLE);
 800b01a:	2101      	movs	r1, #1
 800b01c:	4813      	ldr	r0, [pc, #76]	; (800b06c <LSM6DSL_init+0xa4>)
 800b01e:	f000 fd09 	bl	800ba34 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&Dev_Ctx, LSM6DSL_XL_ODR_12Hz5);
 800b022:	2101      	movs	r1, #1
 800b024:	4811      	ldr	r0, [pc, #68]	; (800b06c <LSM6DSL_init+0xa4>)
 800b026:	f000 fc93 	bl	800b950 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&Dev_Ctx, LSM6DSL_GY_ODR_12Hz5);
 800b02a:	2101      	movs	r1, #1
 800b02c:	480f      	ldr	r0, [pc, #60]	; (800b06c <LSM6DSL_init+0xa4>)
 800b02e:	f000 fcdb 	bl	800b9e8 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&Dev_Ctx, LSM6DSL_8g);
 800b032:	2103      	movs	r1, #3
 800b034:	480d      	ldr	r0, [pc, #52]	; (800b06c <LSM6DSL_init+0xa4>)
 800b036:	f000 fc65 	bl	800b904 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&Dev_Ctx, LSM6DSL_500dps);
 800b03a:	2102      	movs	r1, #2
 800b03c:	480b      	ldr	r0, [pc, #44]	; (800b06c <LSM6DSL_init+0xa4>)
 800b03e:	f000 fcad 	bl	800b99c <lsm6dsl_gy_full_scale_set>

	/* Accelerometer - analog filter */
	lsm6dsl_xl_filter_analog_set(&Dev_Ctx, LSM6DSL_XL_ANA_BW_400Hz);
 800b042:	2101      	movs	r1, #1
 800b044:	4809      	ldr	r0, [pc, #36]	; (800b06c <LSM6DSL_init+0xa4>)
 800b046:	f000 fdd8 	bl	800bbfa <lsm6dsl_xl_filter_analog_set>

	/* Accelerometer - LPF1 + LPF2 path */
	lsm6dsl_xl_lp2_bandwidth_set(&Dev_Ctx, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 800b04a:	2111      	movs	r1, #17
 800b04c:	4807      	ldr	r0, [pc, #28]	; (800b06c <LSM6DSL_init+0xa4>)
 800b04e:	f000 fdfa 	bl	800bc46 <lsm6dsl_xl_lp2_bandwidth_set>

	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&Dev_Ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 800b052:	21a8      	movs	r1, #168	; 0xa8
 800b054:	4805      	ldr	r0, [pc, #20]	; (800b06c <LSM6DSL_init+0xa4>)
 800b056:	f000 fe2d 	bl	800bcb4 <lsm6dsl_gy_band_pass_set>

	Lsm6dsl_Mode = LSM6DSL_MODE_IDLE;
 800b05a:	4b0b      	ldr	r3, [pc, #44]	; (800b088 <LSM6DSL_init+0xc0>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	701a      	strb	r2, [r3, #0]

	Lsm6dsl_Is_Connected = LSM6DSL_CONNECTED;
 800b060:	4b01      	ldr	r3, [pc, #4]	; (800b068 <LSM6DSL_init+0xa0>)
 800b062:	2200      	movs	r2, #0
 800b064:	701a      	strb	r2, [r3, #0]
}
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20000ac9 	.word	0x20000ac9
 800b06c:	20000a58 	.word	0x20000a58
 800b070:	0800af55 	.word	0x0800af55
 800b074:	0800af8f 	.word	0x0800af8f
 800b078:	20000b10 	.word	0x20000b10
 800b07c:	2000076c 	.word	0x2000076c
 800b080:	0800fcb8 	.word	0x0800fcb8
 800b084:	2000076d 	.word	0x2000076d
 800b088:	20000ac8 	.word	0x20000ac8

0800b08c <LSM6DSL_perSampleInit>:

void LSM6DSL_perSampleInit(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Is_Connected == LSM6DSL_DISCONNECTED)
 800b092:	4b17      	ldr	r3, [pc, #92]	; (800b0f0 <LSM6DSL_perSampleInit+0x64>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d103      	bne.n	800b0a2 <LSM6DSL_perSampleInit+0x16>
	{
		COM_uartPrint("LSM6DSL is not connected!\n");
 800b09a:	4816      	ldr	r0, [pc, #88]	; (800b0f4 <LSM6DSL_perSampleInit+0x68>)
 800b09c:	f7ff f94e 	bl	800a33c <COM_uartPrint>
		return;
 800b0a0:	e023      	b.n	800b0ea <LSM6DSL_perSampleInit+0x5e>
	}
	if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
 800b0a2:	4b15      	ldr	r3, [pc, #84]	; (800b0f8 <LSM6DSL_perSampleInit+0x6c>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d103      	bne.n	800b0b2 <LSM6DSL_perSampleInit+0x26>
	{
		COM_uartPrint("Need to disable FIFO mode first\n");
 800b0aa:	4814      	ldr	r0, [pc, #80]	; (800b0fc <LSM6DSL_perSampleInit+0x70>)
 800b0ac:	f7ff f946 	bl	800a33c <COM_uartPrint>
		return;
 800b0b0:	e01b      	b.n	800b0ea <LSM6DSL_perSampleInit+0x5e>
	}

	//LSM6DSL_ACC_Set_INT1_DRDY
	//LSM6DSL_GYRO_Set_INT1_DRDY

	lsm6dsl_pin_polarity_set(&Dev_Ctx, LSM6DSL_ACTIVE_LOW);
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	4812      	ldr	r0, [pc, #72]	; (800b100 <LSM6DSL_perSampleInit+0x74>)
 800b0b6:	f001 f8a4 	bl	800c202 <lsm6dsl_pin_polarity_set>

	lsm6dsl_data_ready_mode_set(&Dev_Ctx, LSM6DSL_DRDY_PULSED);
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	4810      	ldr	r0, [pc, #64]	; (800b100 <LSM6DSL_perSampleInit+0x74>)
 800b0be:	f000 fd26 	bl	800bb0e <lsm6dsl_data_ready_mode_set>

	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 800b0c2:	1d3b      	adds	r3, r7, #4
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	480e      	ldr	r0, [pc, #56]	; (800b100 <LSM6DSL_perSampleInit+0x74>)
 800b0c8:	f000 ffc5 	bl	800c056 <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_ENABLE;
 800b0cc:	793b      	ldrb	r3, [r7, #4]
 800b0ce:	f043 0301 	orr.w	r3, r3, #1
 800b0d2:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_ENABLE;
 800b0d4:	793b      	ldrb	r3, [r7, #4]
 800b0d6:	f043 0302 	orr.w	r3, r3, #2
 800b0da:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 800b0dc:	6879      	ldr	r1, [r7, #4]
 800b0de:	4808      	ldr	r0, [pc, #32]	; (800b100 <LSM6DSL_perSampleInit+0x74>)
 800b0e0:	f000 fe56 	bl	800bd90 <lsm6dsl_pin_int1_route_set>

	Lsm6dsl_Mode = LSM6DSL_MODE_PER_SAMPLE;
 800b0e4:	4b04      	ldr	r3, [pc, #16]	; (800b0f8 <LSM6DSL_perSampleInit+0x6c>)
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	701a      	strb	r2, [r3, #0]
}
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20000ac9 	.word	0x20000ac9
 800b0f4:	0800fcd4 	.word	0x0800fcd4
 800b0f8:	20000ac8 	.word	0x20000ac8
 800b0fc:	0800fcf0 	.word	0x0800fcf0
 800b100:	20000a58 	.word	0x20000a58

0800b104 <LSM6DSL_perSampleProcess>:

static void LSM6DSL_perSampleProcess (void)
{
 800b104:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b108:	b086      	sub	sp, #24
 800b10a:	af04      	add	r7, sp, #16
	/*
	 * Read output only if new value is available
	 */
	lsm6dsl_reg_t reg;
	lsm6dsl_status_reg_get(&Dev_Ctx, &reg.status_reg);
 800b10c:	1d3b      	adds	r3, r7, #4
 800b10e:	4619      	mov	r1, r3
 800b110:	4855      	ldr	r0, [pc, #340]	; (800b268 <LSM6DSL_perSampleProcess+0x164>)
 800b112:	f000 fcb5 	bl	800ba80 <lsm6dsl_status_reg_get>


	if (reg.status_reg.xlda)
 800b116:	793b      	ldrb	r3, [r7, #4]
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d04b      	beq.n	800b1ba <LSM6DSL_perSampleProcess+0xb6>
	{
	  memset(Data_Raw_Acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 800b122:	2206      	movs	r2, #6
 800b124:	2100      	movs	r1, #0
 800b126:	4851      	ldr	r0, [pc, #324]	; (800b26c <LSM6DSL_perSampleProcess+0x168>)
 800b128:	f002 f9b1 	bl	800d48e <memset>
	  lsm6dsl_acceleration_raw_get(&Dev_Ctx, Data_Raw_Acceleration.u8bit);
 800b12c:	494f      	ldr	r1, [pc, #316]	; (800b26c <LSM6DSL_perSampleProcess+0x168>)
 800b12e:	484e      	ldr	r0, [pc, #312]	; (800b268 <LSM6DSL_perSampleProcess+0x164>)
 800b130:	f000 fcc8 	bl	800bac4 <lsm6dsl_acceleration_raw_get>
	  P_Acceleration_Mg[0] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[0]);
 800b134:	4b4d      	ldr	r3, [pc, #308]	; (800b26c <LSM6DSL_perSampleProcess+0x168>)
 800b136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 fbb2 	bl	800b8a4 <lsm6dsl_from_fs8g_to_mg>
 800b140:	eef0 7a40 	vmov.f32	s15, s0
 800b144:	4b4a      	ldr	r3, [pc, #296]	; (800b270 <LSM6DSL_perSampleProcess+0x16c>)
 800b146:	edc3 7a00 	vstr	s15, [r3]
	  P_Acceleration_Mg[1] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[1]);
 800b14a:	4b48      	ldr	r3, [pc, #288]	; (800b26c <LSM6DSL_perSampleProcess+0x168>)
 800b14c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b150:	4618      	mov	r0, r3
 800b152:	f000 fba7 	bl	800b8a4 <lsm6dsl_from_fs8g_to_mg>
 800b156:	eef0 7a40 	vmov.f32	s15, s0
 800b15a:	4b45      	ldr	r3, [pc, #276]	; (800b270 <LSM6DSL_perSampleProcess+0x16c>)
 800b15c:	edc3 7a01 	vstr	s15, [r3, #4]
	  P_Acceleration_Mg[2] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[2]);
 800b160:	4b42      	ldr	r3, [pc, #264]	; (800b26c <LSM6DSL_perSampleProcess+0x168>)
 800b162:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b166:	4618      	mov	r0, r3
 800b168:	f000 fb9c 	bl	800b8a4 <lsm6dsl_from_fs8g_to_mg>
 800b16c:	eef0 7a40 	vmov.f32	s15, s0
 800b170:	4b3f      	ldr	r3, [pc, #252]	; (800b270 <LSM6DSL_perSampleProcess+0x16c>)
 800b172:	edc3 7a02 	vstr	s15, [r3, #8]

	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 800b176:	4b3e      	ldr	r3, [pc, #248]	; (800b270 <LSM6DSL_perSampleProcess+0x16c>)
 800b178:	681b      	ldr	r3, [r3, #0]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7f5 f9ec 	bl	8000558 <__aeabi_f2d>
 800b180:	4680      	mov	r8, r0
 800b182:	4689      	mov	r9, r1
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 800b184:	4b3a      	ldr	r3, [pc, #232]	; (800b270 <LSM6DSL_perSampleProcess+0x16c>)
 800b186:	685b      	ldr	r3, [r3, #4]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f5 f9e5 	bl	8000558 <__aeabi_f2d>
 800b18e:	4604      	mov	r4, r0
 800b190:	460d      	mov	r5, r1
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 800b192:	4b37      	ldr	r3, [pc, #220]	; (800b270 <LSM6DSL_perSampleProcess+0x16c>)
 800b194:	689b      	ldr	r3, [r3, #8]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 800b196:	4618      	mov	r0, r3
 800b198:	f7f5 f9de 	bl	8000558 <__aeabi_f2d>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1a4:	e9cd 4500 	strd	r4, r5, [sp]
 800b1a8:	4642      	mov	r2, r8
 800b1aa:	464b      	mov	r3, r9
 800b1ac:	4931      	ldr	r1, [pc, #196]	; (800b274 <LSM6DSL_perSampleProcess+0x170>)
 800b1ae:	4832      	ldr	r0, [pc, #200]	; (800b278 <LSM6DSL_perSampleProcess+0x174>)
 800b1b0:	f002 fee4 	bl	800df7c <siprintf>

	  COM_uartPrint(Data);
 800b1b4:	4830      	ldr	r0, [pc, #192]	; (800b278 <LSM6DSL_perSampleProcess+0x174>)
 800b1b6:	f7ff f8c1 	bl	800a33c <COM_uartPrint>
	}
	if (reg.status_reg.gda)
 800b1ba:	793b      	ldrb	r3, [r7, #4]
 800b1bc:	f003 0302 	and.w	r3, r3, #2
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d04b      	beq.n	800b25e <LSM6DSL_perSampleProcess+0x15a>
	{
	  memset(Data_Raw_Angular_Rate.u8bit, 0x00, 3*sizeof(int16_t));
 800b1c6:	2206      	movs	r2, #6
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	482c      	ldr	r0, [pc, #176]	; (800b27c <LSM6DSL_perSampleProcess+0x178>)
 800b1cc:	f002 f95f 	bl	800d48e <memset>
	  lsm6dsl_angular_rate_raw_get(&Dev_Ctx, Data_Raw_Angular_Rate.u8bit);
 800b1d0:	492a      	ldr	r1, [pc, #168]	; (800b27c <LSM6DSL_perSampleProcess+0x178>)
 800b1d2:	4825      	ldr	r0, [pc, #148]	; (800b268 <LSM6DSL_perSampleProcess+0x164>)
 800b1d4:	f000 fc65 	bl	800baa2 <lsm6dsl_angular_rate_raw_get>
	  P_Angular_Rate_Mdps[0] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[0]);
 800b1d8:	4b28      	ldr	r3, [pc, #160]	; (800b27c <LSM6DSL_perSampleProcess+0x178>)
 800b1da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 fb78 	bl	800b8d4 <lsm6dsl_from_fs500dps_to_mdps>
 800b1e4:	eef0 7a40 	vmov.f32	s15, s0
 800b1e8:	4b25      	ldr	r3, [pc, #148]	; (800b280 <LSM6DSL_perSampleProcess+0x17c>)
 800b1ea:	edc3 7a00 	vstr	s15, [r3]
	  P_Angular_Rate_Mdps[1] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[1]);
 800b1ee:	4b23      	ldr	r3, [pc, #140]	; (800b27c <LSM6DSL_perSampleProcess+0x178>)
 800b1f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fb6d 	bl	800b8d4 <lsm6dsl_from_fs500dps_to_mdps>
 800b1fa:	eef0 7a40 	vmov.f32	s15, s0
 800b1fe:	4b20      	ldr	r3, [pc, #128]	; (800b280 <LSM6DSL_perSampleProcess+0x17c>)
 800b200:	edc3 7a01 	vstr	s15, [r3, #4]
	  P_Angular_Rate_Mdps[2] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[2]);
 800b204:	4b1d      	ldr	r3, [pc, #116]	; (800b27c <LSM6DSL_perSampleProcess+0x178>)
 800b206:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f000 fb62 	bl	800b8d4 <lsm6dsl_from_fs500dps_to_mdps>
 800b210:	eef0 7a40 	vmov.f32	s15, s0
 800b214:	4b1a      	ldr	r3, [pc, #104]	; (800b280 <LSM6DSL_perSampleProcess+0x17c>)
 800b216:	edc3 7a02 	vstr	s15, [r3, #8]

	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 800b21a:	4b19      	ldr	r3, [pc, #100]	; (800b280 <LSM6DSL_perSampleProcess+0x17c>)
 800b21c:	681b      	ldr	r3, [r3, #0]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800b21e:	4618      	mov	r0, r3
 800b220:	f7f5 f99a 	bl	8000558 <__aeabi_f2d>
 800b224:	4680      	mov	r8, r0
 800b226:	4689      	mov	r9, r1
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 800b228:	4b15      	ldr	r3, [pc, #84]	; (800b280 <LSM6DSL_perSampleProcess+0x17c>)
 800b22a:	685b      	ldr	r3, [r3, #4]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7f5 f993 	bl	8000558 <__aeabi_f2d>
 800b232:	4604      	mov	r4, r0
 800b234:	460d      	mov	r5, r1
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 800b236:	4b12      	ldr	r3, [pc, #72]	; (800b280 <LSM6DSL_perSampleProcess+0x17c>)
 800b238:	689b      	ldr	r3, [r3, #8]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7f5 f98c 	bl	8000558 <__aeabi_f2d>
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b248:	e9cd 4500 	strd	r4, r5, [sp]
 800b24c:	4642      	mov	r2, r8
 800b24e:	464b      	mov	r3, r9
 800b250:	490c      	ldr	r1, [pc, #48]	; (800b284 <LSM6DSL_perSampleProcess+0x180>)
 800b252:	4809      	ldr	r0, [pc, #36]	; (800b278 <LSM6DSL_perSampleProcess+0x174>)
 800b254:	f002 fe92 	bl	800df7c <siprintf>

	  COM_uartPrint(Data);
 800b258:	4807      	ldr	r0, [pc, #28]	; (800b278 <LSM6DSL_perSampleProcess+0x174>)
 800b25a:	f7ff f86f 	bl	800a33c <COM_uartPrint>
	}
}
 800b25e:	bf00      	nop
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b268:	20000a58 	.word	0x20000a58
 800b26c:	20000744 	.word	0x20000744
 800b270:	20000754 	.word	0x20000754
 800b274:	0800fd14 	.word	0x0800fd14
 800b278:	20000a64 	.word	0x20000a64
 800b27c:	2000074c 	.word	0x2000074c
 800b280:	20000760 	.word	0x20000760
 800b284:	0800fd3c 	.word	0x0800fd3c

0800b288 <LSM6DSL_perSampleDisable>:

static void LSM6DSL_perSampleDisable (void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 800b28e:	1d3b      	adds	r3, r7, #4
 800b290:	4619      	mov	r1, r3
 800b292:	4809      	ldr	r0, [pc, #36]	; (800b2b8 <LSM6DSL_perSampleDisable+0x30>)
 800b294:	f000 fedf 	bl	800c056 <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_DISABLE;
 800b298:	793b      	ldrb	r3, [r7, #4]
 800b29a:	f36f 0300 	bfc	r3, #0, #1
 800b29e:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_DISABLE;
 800b2a0:	793b      	ldrb	r3, [r7, #4]
 800b2a2:	f36f 0341 	bfc	r3, #1, #1
 800b2a6:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 800b2a8:	6879      	ldr	r1, [r7, #4]
 800b2aa:	4803      	ldr	r0, [pc, #12]	; (800b2b8 <LSM6DSL_perSampleDisable+0x30>)
 800b2ac:	f000 fd70 	bl	800bd90 <lsm6dsl_pin_int1_route_set>
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	20000a58 	.word	0x20000a58

0800b2bc <LSM6DSL_fifoInit>:

void LSM6DSL_fifoInit(void)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Is_Connected == LSM6DSL_DISCONNECTED)
 800b2c2:	4b27      	ldr	r3, [pc, #156]	; (800b360 <LSM6DSL_fifoInit+0xa4>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d103      	bne.n	800b2d2 <LSM6DSL_fifoInit+0x16>
	{
		COM_uartPrint("LSM6DSL is not connected!\n");
 800b2ca:	4826      	ldr	r0, [pc, #152]	; (800b364 <LSM6DSL_fifoInit+0xa8>)
 800b2cc:	f7ff f836 	bl	800a33c <COM_uartPrint>
		return;
 800b2d0:	e042      	b.n	800b358 <LSM6DSL_fifoInit+0x9c>
	}
	if (Lsm6dsl_Mode == LSM6DSL_MODE_PER_SAMPLE)
 800b2d2:	4b25      	ldr	r3, [pc, #148]	; (800b368 <LSM6DSL_fifoInit+0xac>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d103      	bne.n	800b2e2 <LSM6DSL_fifoInit+0x26>
	{
		COM_uartPrint("Need to disable PER_SAMPLE mode first\n");
 800b2da:	4824      	ldr	r0, [pc, #144]	; (800b36c <LSM6DSL_fifoInit+0xb0>)
 800b2dc:	f7ff f82e 	bl	800a33c <COM_uartPrint>
		return;
 800b2e0:	e03a      	b.n	800b358 <LSM6DSL_fifoInit+0x9c>
	}

	lsm6dsl_pin_polarity_set(&Dev_Ctx, LSM6DSL_ACTIVE_LOW);
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	4822      	ldr	r0, [pc, #136]	; (800b370 <LSM6DSL_fifoInit+0xb4>)
 800b2e6:	f000 ff8c 	bl	800c202 <lsm6dsl_pin_polarity_set>

	/* Set acc&gyro FIFO decimation */
	lsm6dsl_dec_fifo_xl_t valXl;
	lsm6dsl_dec_fifo_gyro_t valGy;

	lsm6dsl_fifo_xl_batch_get(&Dev_Ctx, &valXl);
 800b2ea:	1dfb      	adds	r3, r7, #7
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	4820      	ldr	r0, [pc, #128]	; (800b370 <LSM6DSL_fifoInit+0xb4>)
 800b2f0:	f001 f85e 	bl	800c3b0 <lsm6dsl_fifo_xl_batch_get>
	valXl = LSM6DSL_FIFO_XL_NO_DEC;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_xl_batch_set(&Dev_Ctx, valXl);
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	481c      	ldr	r0, [pc, #112]	; (800b370 <LSM6DSL_fifoInit+0xb4>)
 800b2fe:	f001 f830 	bl	800c362 <lsm6dsl_fifo_xl_batch_set>

	lsm6dsl_fifo_gy_batch_get(&Dev_Ctx, &valGy);
 800b302:	1dbb      	adds	r3, r7, #6
 800b304:	4619      	mov	r1, r3
 800b306:	481a      	ldr	r0, [pc, #104]	; (800b370 <LSM6DSL_fifoInit+0xb4>)
 800b308:	f001 f8c8 	bl	800c49c <lsm6dsl_fifo_gy_batch_get>
	valGy = LSM6DSL_FIFO_GY_NO_DEC;
 800b30c:	2301      	movs	r3, #1
 800b30e:	71bb      	strb	r3, [r7, #6]
	lsm6dsl_fifo_gy_batch_set(&Dev_Ctx, valGy);
 800b310:	79bb      	ldrb	r3, [r7, #6]
 800b312:	4619      	mov	r1, r3
 800b314:	4816      	ldr	r0, [pc, #88]	; (800b370 <LSM6DSL_fifoInit+0xb4>)
 800b316:	f001 f89b 	bl	800c450 <lsm6dsl_fifo_gy_batch_set>

	/* Set FIFO ODR value */
	lsm6dsl_odr_fifo_t valOdr;
	lsm6dsl_fifo_data_rate_get(&Dev_Ctx, &valOdr);
 800b31a:	1d7b      	adds	r3, r7, #5
 800b31c:	4619      	mov	r1, r3
 800b31e:	4814      	ldr	r0, [pc, #80]	; (800b370 <LSM6DSL_fifoInit+0xb4>)
 800b320:	f001 f99a 	bl	800c658 <lsm6dsl_fifo_data_rate_get>
	valOdr = LSM6DSL_FIFO_12Hz5;
 800b324:	2301      	movs	r3, #1
 800b326:	717b      	strb	r3, [r7, #5]
	lsm6dsl_fifo_data_rate_set(&Dev_Ctx, valOdr);
 800b328:	797b      	ldrb	r3, [r7, #5]
 800b32a:	4619      	mov	r1, r3
 800b32c:	4810      	ldr	r0, [pc, #64]	; (800b370 <LSM6DSL_fifoInit+0xb4>)
 800b32e:	f001 f96d 	bl	800c60c <lsm6dsl_fifo_data_rate_set>

	LSM6DSL_fifoInterruptEnable();
 800b332:	f000 fa4d 	bl	800b7d0 <LSM6DSL_fifoInterruptEnable>

	/* Set FIFO watermark */
	uint16_t valWtm;
	lsm6dsl_fifo_watermark_get(&Dev_Ctx, &valWtm);
 800b336:	1cbb      	adds	r3, r7, #2
 800b338:	4619      	mov	r1, r3
 800b33a:	480d      	ldr	r0, [pc, #52]	; (800b370 <LSM6DSL_fifoInit+0xb4>)
 800b33c:	f000 ffbd 	bl	800c2ba <lsm6dsl_fifo_watermark_get>
	valWtm = ACC_AND_GYRO_FIFO_WATERMARK;
 800b340:	233c      	movs	r3, #60	; 0x3c
 800b342:	807b      	strh	r3, [r7, #2]
	lsm6dsl_fifo_watermark_set(&Dev_Ctx, valWtm);
 800b344:	887b      	ldrh	r3, [r7, #2]
 800b346:	4619      	mov	r1, r3
 800b348:	4809      	ldr	r0, [pc, #36]	; (800b370 <LSM6DSL_fifoInit+0xb4>)
 800b34a:	f000 ff80 	bl	800c24e <lsm6dsl_fifo_watermark_set>
	/*uint8_t valStopOnWtm;
	lsm6dsl_fifo_stop_on_wtm_get(&Dev_Ctx, &valStopOnWtm);
	valStopOnWtm = PROPERTY_ENABLE;
	lsm6dsl_fifo_stop_on_wtm_set(&Dev_Ctx, valStopOnWtm);*/

	LSM6DSL_fifoSetFIFOMode();
 800b34e:	f000 fa13 	bl	800b778 <LSM6DSL_fifoSetFIFOMode>

	Lsm6dsl_Mode = LSM6DSL_MODE_FIFO;
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <LSM6DSL_fifoInit+0xac>)
 800b354:	2202      	movs	r2, #2
 800b356:	701a      	strb	r2, [r3, #0]
}
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20000ac9 	.word	0x20000ac9
 800b364:	0800fcd4 	.word	0x0800fcd4
 800b368:	20000ac8 	.word	0x20000ac8
 800b36c:	0800fd64 	.word	0x0800fd64
 800b370:	20000a58 	.word	0x20000a58

0800b374 <LSM6DSL_fifoProcess>:

static void LSM6DSL_fifoProcess(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	af00      	add	r7, sp, #0
	LSM6DSL_fifoReadAllData();
 800b378:	f000 f80a 	bl	800b390 <LSM6DSL_fifoReadAllData>
}
 800b37c:	bf00      	nop
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <LSM6DSL_fifoDisable>:

static void LSM6DSL_fifoDisable(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0
	LSM6DSL_fifoInterruptDisable();
 800b384:	f000 fa3a 	bl	800b7fc <LSM6DSL_fifoInterruptDisable>
	LSM6DSL_fifoSetBypassMode();
 800b388:	f000 fa0c 	bl	800b7a4 <LSM6DSL_fifoSetBypassMode>
}
 800b38c:	bf00      	nop
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <LSM6DSL_fifoReadAllData>:

static void LSM6DSL_fifoReadAllData(void)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
	uint16_t unread_int16_fifo_samples = 0;
 800b396:	2300      	movs	r3, #0
 800b398:	807b      	strh	r3, [r7, #2]

	for(int i = 0; i < 3; i++)
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
 800b39e:	e010      	b.n	800b3c2 <LSM6DSL_fifoReadAllData+0x32>
	{
		P_Acceleration_G_Sum[i] = 0;
 800b3a0:	4a2f      	ldr	r2, [pc, #188]	; (800b460 <LSM6DSL_fifoReadAllData+0xd0>)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f04f 0200 	mov.w	r2, #0
 800b3ac:	601a      	str	r2, [r3, #0]
		P_Angular_Rate_Dps_Sum[i] = 0;
 800b3ae:	4a2d      	ldr	r2, [pc, #180]	; (800b464 <LSM6DSL_fifoReadAllData+0xd4>)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f04f 0200 	mov.w	r2, #0
 800b3ba:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	60fb      	str	r3, [r7, #12]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	ddeb      	ble.n	800b3a0 <LSM6DSL_fifoReadAllData+0x10>
	}

	/* Get num of unread FIFO samples before reading Data */
	lsm6dsl_fifo_data_level_get(&Dev_Ctx, &unread_int16_fifo_samples);
 800b3c8:	1cbb      	adds	r3, r7, #2
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4826      	ldr	r0, [pc, #152]	; (800b468 <LSM6DSL_fifoReadAllData+0xd8>)
 800b3ce:	f000 ff9e 	bl	800c30e <lsm6dsl_fifo_data_level_get>

	uint16_t unread_acc_and_gyro_samples = unread_int16_fifo_samples / ACC_AND_GYRO_SINGLE_FIFO_SAMPLE;
 800b3d2:	887b      	ldrh	r3, [r7, #2]
 800b3d4:	4a25      	ldr	r2, [pc, #148]	; (800b46c <LSM6DSL_fifoReadAllData+0xdc>)
 800b3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3da:	089b      	lsrs	r3, r3, #2
 800b3dc:	817b      	strh	r3, [r7, #10]
	sprintf(Data, "Number of unread ACC and Gyro samples each: %d\n", unread_acc_and_gyro_samples);
 800b3de:	897b      	ldrh	r3, [r7, #10]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	4923      	ldr	r1, [pc, #140]	; (800b470 <LSM6DSL_fifoReadAllData+0xe0>)
 800b3e4:	4823      	ldr	r0, [pc, #140]	; (800b474 <LSM6DSL_fifoReadAllData+0xe4>)
 800b3e6:	f002 fdc9 	bl	800df7c <siprintf>
	COM_uartPrint(Data);
 800b3ea:	4822      	ldr	r0, [pc, #136]	; (800b474 <LSM6DSL_fifoReadAllData+0xe4>)
 800b3ec:	f7fe ffa6 	bl	800a33c <COM_uartPrint>

	while (unread_acc_and_gyro_samples > 0)
 800b3f0:	e02f      	b.n	800b452 <LSM6DSL_fifoReadAllData+0xc2>
	{
		uint16_t unread_acc_and_gyro_samples_cycle;
		if(unread_acc_and_gyro_samples >= SAMPLES_TO_READ)
 800b3f2:	897b      	ldrh	r3, [r7, #10]
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	d902      	bls.n	800b3fe <LSM6DSL_fifoReadAllData+0x6e>
		{
			unread_acc_and_gyro_samples_cycle = SAMPLES_TO_READ;
 800b3f8:	230a      	movs	r3, #10
 800b3fa:	813b      	strh	r3, [r7, #8]
 800b3fc:	e001      	b.n	800b402 <LSM6DSL_fifoReadAllData+0x72>
		}
		else
		{
			unread_acc_and_gyro_samples_cycle = unread_acc_and_gyro_samples;
 800b3fe:	897b      	ldrh	r3, [r7, #10]
 800b400:	813b      	strh	r3, [r7, #8]
		}

		lsm6dsl_fifo_raw_data_get(&Dev_Ctx, P_Data_Raw_Acc_Gy_Buf->u8bit, unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE * FIFO_SAMPLE_TO_BYTE_RATIO);
 800b402:	893b      	ldrh	r3, [r7, #8]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	0052      	lsls	r2, r2, #1
 800b40a:	4413      	add	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	461a      	mov	r2, r3
 800b412:	4919      	ldr	r1, [pc, #100]	; (800b478 <LSM6DSL_fifoReadAllData+0xe8>)
 800b414:	4814      	ldr	r0, [pc, #80]	; (800b468 <LSM6DSL_fifoReadAllData+0xd8>)
 800b416:	f000 fb66 	bl	800bae6 <lsm6dsl_fifo_raw_data_get>
		for (int i = 0; i < unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 800b41a:	2300      	movs	r3, #0
 800b41c:	607b      	str	r3, [r7, #4]
 800b41e:	e007      	b.n	800b430 <LSM6DSL_fifoReadAllData+0xa0>
		{
			LSM6DSL_fifoAccAndGyroReadSingleSample(i);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	b29b      	uxth	r3, r3
 800b424:	4618      	mov	r0, r3
 800b426:	f000 f829 	bl	800b47c <LSM6DSL_fifoAccAndGyroReadSingleSample>
		for (int i = 0; i < unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	3306      	adds	r3, #6
 800b42e:	607b      	str	r3, [r7, #4]
 800b430:	893a      	ldrh	r2, [r7, #8]
 800b432:	4613      	mov	r3, r2
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	4413      	add	r3, r2
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	461a      	mov	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4293      	cmp	r3, r2
 800b440:	dbee      	blt.n	800b420 <LSM6DSL_fifoReadAllData+0x90>
		}
		LSM6DSL_fifoCalcAccGyroAvgAndPrint(unread_acc_and_gyro_samples_cycle);
 800b442:	893b      	ldrh	r3, [r7, #8]
 800b444:	4618      	mov	r0, r3
 800b446:	f000 f88f 	bl	800b568 <LSM6DSL_fifoCalcAccGyroAvgAndPrint>
		unread_acc_and_gyro_samples -= unread_acc_and_gyro_samples_cycle;
 800b44a:	897a      	ldrh	r2, [r7, #10]
 800b44c:	893b      	ldrh	r3, [r7, #8]
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	817b      	strh	r3, [r7, #10]
	while (unread_acc_and_gyro_samples > 0)
 800b452:	897b      	ldrh	r3, [r7, #10]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1cc      	bne.n	800b3f2 <LSM6DSL_fifoReadAllData+0x62>
	}
}
 800b458:	bf00      	nop
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20000a40 	.word	0x20000a40
 800b464:	20000a4c 	.word	0x20000a4c
 800b468:	20000a58 	.word	0x20000a58
 800b46c:	aaaaaaab 	.word	0xaaaaaaab
 800b470:	0800fd8c 	.word	0x0800fd8c
 800b474:	20000a64 	.word	0x20000a64
 800b478:	20000770 	.word	0x20000770

0800b47c <LSM6DSL_fifoAccAndGyroReadSingleSample>:

static void LSM6DSL_fifoAccAndGyroReadSingleSample(uint16_t SampleIndex)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	80fb      	strh	r3, [r7, #6]
	P_Angular_Rate_Dps_Sum[0] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex];
 800b486:	4b35      	ldr	r3, [pc, #212]	; (800b55c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800b488:	ed93 7a00 	vldr	s14, [r3]
 800b48c:	88fb      	ldrh	r3, [r7, #6]
 800b48e:	4a34      	ldr	r2, [pc, #208]	; (800b560 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800b490:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b494:	ee07 3a90 	vmov	s15, r3
 800b498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b49c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4a0:	4b2e      	ldr	r3, [pc, #184]	; (800b55c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800b4a2:	edc3 7a00 	vstr	s15, [r3]
	P_Angular_Rate_Dps_Sum[1] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 1];
 800b4a6:	4b2d      	ldr	r3, [pc, #180]	; (800b55c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800b4a8:	ed93 7a01 	vldr	s14, [r3, #4]
 800b4ac:	88fb      	ldrh	r3, [r7, #6]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	4a2b      	ldr	r2, [pc, #172]	; (800b560 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800b4b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4c2:	4b26      	ldr	r3, [pc, #152]	; (800b55c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800b4c4:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Angular_Rate_Dps_Sum[2] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 2];
 800b4c8:	4b24      	ldr	r3, [pc, #144]	; (800b55c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800b4ca:	ed93 7a02 	vldr	s14, [r3, #8]
 800b4ce:	88fb      	ldrh	r3, [r7, #6]
 800b4d0:	3302      	adds	r3, #2
 800b4d2:	4a23      	ldr	r2, [pc, #140]	; (800b560 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800b4d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4e4:	4b1d      	ldr	r3, [pc, #116]	; (800b55c <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 800b4e6:	edc3 7a02 	vstr	s15, [r3, #8]

	P_Acceleration_G_Sum[0] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 3];
 800b4ea:	4b1e      	ldr	r3, [pc, #120]	; (800b564 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800b4ec:	ed93 7a00 	vldr	s14, [r3]
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	3303      	adds	r3, #3
 800b4f4:	4a1a      	ldr	r2, [pc, #104]	; (800b560 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800b4f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b4fa:	ee07 3a90 	vmov	s15, r3
 800b4fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b502:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b506:	4b17      	ldr	r3, [pc, #92]	; (800b564 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800b508:	edc3 7a00 	vstr	s15, [r3]
	P_Acceleration_G_Sum[1] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 4];
 800b50c:	4b15      	ldr	r3, [pc, #84]	; (800b564 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800b50e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b512:	88fb      	ldrh	r3, [r7, #6]
 800b514:	3304      	adds	r3, #4
 800b516:	4a12      	ldr	r2, [pc, #72]	; (800b560 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800b518:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b51c:	ee07 3a90 	vmov	s15, r3
 800b520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b524:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b528:	4b0e      	ldr	r3, [pc, #56]	; (800b564 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800b52a:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Acceleration_G_Sum[2] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 5];
 800b52e:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800b530:	ed93 7a02 	vldr	s14, [r3, #8]
 800b534:	88fb      	ldrh	r3, [r7, #6]
 800b536:	3305      	adds	r3, #5
 800b538:	4a09      	ldr	r2, [pc, #36]	; (800b560 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 800b53a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b53e:	ee07 3a90 	vmov	s15, r3
 800b542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b54a:	4b06      	ldr	r3, [pc, #24]	; (800b564 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 800b54c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	20000a4c 	.word	0x20000a4c
 800b560:	20000770 	.word	0x20000770
 800b564:	20000a40 	.word	0x20000a40

0800b568 <LSM6DSL_fifoCalcAccGyroAvgAndPrint>:

static void LSM6DSL_fifoCalcAccGyroAvgAndPrint(uint16_t divider)
{
 800b568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b56c:	b086      	sub	sp, #24
 800b56e:	af04      	add	r7, sp, #16
 800b570:	4603      	mov	r3, r0
 800b572:	80fb      	strh	r3, [r7, #6]
	sprintf(Data, "%d samples average:\n", divider);
 800b574:	88fb      	ldrh	r3, [r7, #6]
 800b576:	461a      	mov	r2, r3
 800b578:	4978      	ldr	r1, [pc, #480]	; (800b75c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f4>)
 800b57a:	4879      	ldr	r0, [pc, #484]	; (800b760 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800b57c:	f002 fcfe 	bl	800df7c <siprintf>
	COM_uartPrint(Data);
 800b580:	4877      	ldr	r0, [pc, #476]	; (800b760 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800b582:	f7fe fedb 	bl	800a33c <COM_uartPrint>

	P_Acceleration_G_Sum[0] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[0] / divider )/1000;
 800b586:	4b77      	ldr	r3, [pc, #476]	; (800b764 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800b588:	edd3 6a00 	vldr	s13, [r3]
 800b58c:	88fb      	ldrh	r3, [r7, #6]
 800b58e:	ee07 3a90 	vmov	s15, r3
 800b592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b59a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b59e:	ee17 3a90 	vmov	r3, s15
 800b5a2:	b21b      	sxth	r3, r3
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 f97d 	bl	800b8a4 <lsm6dsl_from_fs8g_to_mg>
 800b5aa:	eef0 6a40 	vmov.f32	s13, s0
 800b5ae:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800b768 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800b5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b6:	4b6b      	ldr	r3, [pc, #428]	; (800b764 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800b5b8:	edc3 7a00 	vstr	s15, [r3]
	P_Acceleration_G_Sum[1] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[1] / divider )/1000;
 800b5bc:	4b69      	ldr	r3, [pc, #420]	; (800b764 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800b5be:	edd3 6a01 	vldr	s13, [r3, #4]
 800b5c2:	88fb      	ldrh	r3, [r7, #6]
 800b5c4:	ee07 3a90 	vmov	s15, r3
 800b5c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b5cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5d4:	ee17 3a90 	vmov	r3, s15
 800b5d8:	b21b      	sxth	r3, r3
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 f962 	bl	800b8a4 <lsm6dsl_from_fs8g_to_mg>
 800b5e0:	eef0 6a40 	vmov.f32	s13, s0
 800b5e4:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800b768 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800b5e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ec:	4b5d      	ldr	r3, [pc, #372]	; (800b764 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800b5ee:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Acceleration_G_Sum[2] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[2] / divider )/1000;
 800b5f2:	4b5c      	ldr	r3, [pc, #368]	; (800b764 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800b5f4:	edd3 6a02 	vldr	s13, [r3, #8]
 800b5f8:	88fb      	ldrh	r3, [r7, #6]
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b60a:	ee17 3a90 	vmov	r3, s15
 800b60e:	b21b      	sxth	r3, r3
 800b610:	4618      	mov	r0, r3
 800b612:	f000 f947 	bl	800b8a4 <lsm6dsl_from_fs8g_to_mg>
 800b616:	eef0 6a40 	vmov.f32	s13, s0
 800b61a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800b768 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800b61e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b622:	4b50      	ldr	r3, [pc, #320]	; (800b764 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800b624:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 800b628:	4b4e      	ldr	r3, [pc, #312]	; (800b764 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800b62a:	681b      	ldr	r3, [r3, #0]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7f4 ff93 	bl	8000558 <__aeabi_f2d>
 800b632:	4680      	mov	r8, r0
 800b634:	4689      	mov	r9, r1
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 800b636:	4b4b      	ldr	r3, [pc, #300]	; (800b764 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800b638:	685b      	ldr	r3, [r3, #4]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f4 ff8c 	bl	8000558 <__aeabi_f2d>
 800b640:	4604      	mov	r4, r0
 800b642:	460d      	mov	r5, r1
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 800b644:	4b47      	ldr	r3, [pc, #284]	; (800b764 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 800b646:	689b      	ldr	r3, [r3, #8]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 800b648:	4618      	mov	r0, r3
 800b64a:	f7f4 ff85 	bl	8000558 <__aeabi_f2d>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b656:	e9cd 4500 	strd	r4, r5, [sp]
 800b65a:	4642      	mov	r2, r8
 800b65c:	464b      	mov	r3, r9
 800b65e:	4943      	ldr	r1, [pc, #268]	; (800b76c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x204>)
 800b660:	483f      	ldr	r0, [pc, #252]	; (800b760 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800b662:	f002 fc8b 	bl	800df7c <siprintf>

	COM_uartPrint(Data);
 800b666:	483e      	ldr	r0, [pc, #248]	; (800b760 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800b668:	f7fe fe68 	bl	800a33c <COM_uartPrint>

	P_Angular_Rate_Dps_Sum[0] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[0] / divider )/1000;
 800b66c:	4b40      	ldr	r3, [pc, #256]	; (800b770 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800b66e:	edd3 6a00 	vldr	s13, [r3]
 800b672:	88fb      	ldrh	r3, [r7, #6]
 800b674:	ee07 3a90 	vmov	s15, r3
 800b678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b67c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b684:	ee17 3a90 	vmov	r3, s15
 800b688:	b21b      	sxth	r3, r3
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 f922 	bl	800b8d4 <lsm6dsl_from_fs500dps_to_mdps>
 800b690:	eef0 6a40 	vmov.f32	s13, s0
 800b694:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b768 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800b698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b69c:	4b34      	ldr	r3, [pc, #208]	; (800b770 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800b69e:	edc3 7a00 	vstr	s15, [r3]
	P_Angular_Rate_Dps_Sum[1] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[1] / divider )/1000;
 800b6a2:	4b33      	ldr	r3, [pc, #204]	; (800b770 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800b6a4:	edd3 6a01 	vldr	s13, [r3, #4]
 800b6a8:	88fb      	ldrh	r3, [r7, #6]
 800b6aa:	ee07 3a90 	vmov	s15, r3
 800b6ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b6b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6ba:	ee17 3a90 	vmov	r3, s15
 800b6be:	b21b      	sxth	r3, r3
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 f907 	bl	800b8d4 <lsm6dsl_from_fs500dps_to_mdps>
 800b6c6:	eef0 6a40 	vmov.f32	s13, s0
 800b6ca:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b768 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800b6ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6d2:	4b27      	ldr	r3, [pc, #156]	; (800b770 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800b6d4:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Angular_Rate_Dps_Sum[2] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[2] / divider )/1000;
 800b6d8:	4b25      	ldr	r3, [pc, #148]	; (800b770 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800b6da:	edd3 6a02 	vldr	s13, [r3, #8]
 800b6de:	88fb      	ldrh	r3, [r7, #6]
 800b6e0:	ee07 3a90 	vmov	s15, r3
 800b6e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b6e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6f0:	ee17 3a90 	vmov	r3, s15
 800b6f4:	b21b      	sxth	r3, r3
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 f8ec 	bl	800b8d4 <lsm6dsl_from_fs500dps_to_mdps>
 800b6fc:	eef0 6a40 	vmov.f32	s13, s0
 800b700:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800b768 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 800b704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b708:	4b19      	ldr	r3, [pc, #100]	; (800b770 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800b70a:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 800b70e:	4b18      	ldr	r3, [pc, #96]	; (800b770 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800b710:	681b      	ldr	r3, [r3, #0]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800b712:	4618      	mov	r0, r3
 800b714:	f7f4 ff20 	bl	8000558 <__aeabi_f2d>
 800b718:	4680      	mov	r8, r0
 800b71a:	4689      	mov	r9, r1
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 800b71c:	4b14      	ldr	r3, [pc, #80]	; (800b770 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800b71e:	685b      	ldr	r3, [r3, #4]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800b720:	4618      	mov	r0, r3
 800b722:	f7f4 ff19 	bl	8000558 <__aeabi_f2d>
 800b726:	4604      	mov	r4, r0
 800b728:	460d      	mov	r5, r1
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 800b72a:	4b11      	ldr	r3, [pc, #68]	; (800b770 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 800b72c:	689b      	ldr	r3, [r3, #8]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800b72e:	4618      	mov	r0, r3
 800b730:	f7f4 ff12 	bl	8000558 <__aeabi_f2d>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b73c:	e9cd 4500 	strd	r4, r5, [sp]
 800b740:	4642      	mov	r2, r8
 800b742:	464b      	mov	r3, r9
 800b744:	490b      	ldr	r1, [pc, #44]	; (800b774 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x20c>)
 800b746:	4806      	ldr	r0, [pc, #24]	; (800b760 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800b748:	f002 fc18 	bl	800df7c <siprintf>

	COM_uartPrint(Data);
 800b74c:	4804      	ldr	r0, [pc, #16]	; (800b760 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 800b74e:	f7fe fdf5 	bl	800a33c <COM_uartPrint>

	//COM_uartPrint("test\n");
}
 800b752:	bf00      	nop
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b75c:	0800fdbc 	.word	0x0800fdbc
 800b760:	20000a64 	.word	0x20000a64
 800b764:	20000a40 	.word	0x20000a40
 800b768:	447a0000 	.word	0x447a0000
 800b76c:	0800fdd4 	.word	0x0800fdd4
 800b770:	20000a4c 	.word	0x20000a4c
 800b774:	0800fdfc 	.word	0x0800fdfc

0800b778 <LSM6DSL_fifoSetFIFOMode>:

static void LSM6DSL_fifoSetFIFOMode(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
	/* Set FIFO mode to FIFO */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&Dev_Ctx, &fifo_mode_t);
 800b77e:	1dfb      	adds	r3, r7, #7
 800b780:	4619      	mov	r1, r3
 800b782:	4807      	ldr	r0, [pc, #28]	; (800b7a0 <LSM6DSL_fifoSetFIFOMode+0x28>)
 800b784:	f000 ff00 	bl	800c588 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_FIFO_MODE;
 800b788:	2301      	movs	r3, #1
 800b78a:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&Dev_Ctx, fifo_mode_t);
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	4619      	mov	r1, r3
 800b790:	4803      	ldr	r0, [pc, #12]	; (800b7a0 <LSM6DSL_fifoSetFIFOMode+0x28>)
 800b792:	f000 fed3 	bl	800c53c <lsm6dsl_fifo_mode_set>
}
 800b796:	bf00      	nop
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20000a58 	.word	0x20000a58

0800b7a4 <LSM6DSL_fifoSetBypassMode>:

static void LSM6DSL_fifoSetBypassMode(void)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
	/* Set FIFO mode to BYPASS */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&Dev_Ctx, &fifo_mode_t);
 800b7aa:	1dfb      	adds	r3, r7, #7
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4807      	ldr	r0, [pc, #28]	; (800b7cc <LSM6DSL_fifoSetBypassMode+0x28>)
 800b7b0:	f000 feea 	bl	800c588 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_BYPASS_MODE;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&Dev_Ctx, fifo_mode_t);
 800b7b8:	79fb      	ldrb	r3, [r7, #7]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	4803      	ldr	r0, [pc, #12]	; (800b7cc <LSM6DSL_fifoSetBypassMode+0x28>)
 800b7be:	f000 febd 	bl	800c53c <lsm6dsl_fifo_mode_set>

	//lsm6dsl_fifo_mode_set(&Dev_Ctx, LSM6DSL_BYPASS_MODE);
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20000a58 	.word	0x20000a58

0800b7d0 <LSM6DSL_fifoInterruptEnable>:

static void LSM6DSL_fifoInterruptEnable(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 800b7d6:	1d3b      	adds	r3, r7, #4
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4807      	ldr	r0, [pc, #28]	; (800b7f8 <LSM6DSL_fifoInterruptEnable+0x28>)
 800b7dc:	f000 fc3b 	bl	800c056 <lsm6dsl_pin_int1_route_get>
	//reg.int1_full_flag = PROPERTY_ENABLE;
	reg.int1_fth = PROPERTY_ENABLE;
 800b7e0:	793b      	ldrb	r3, [r7, #4]
 800b7e2:	f043 0308 	orr.w	r3, r3, #8
 800b7e6:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 800b7e8:	6879      	ldr	r1, [r7, #4]
 800b7ea:	4803      	ldr	r0, [pc, #12]	; (800b7f8 <LSM6DSL_fifoInterruptEnable+0x28>)
 800b7ec:	f000 fad0 	bl	800bd90 <lsm6dsl_pin_int1_route_set>
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	20000a58 	.word	0x20000a58

0800b7fc <LSM6DSL_fifoInterruptDisable>:

static void LSM6DSL_fifoInterruptDisable(void)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 800b802:	1d3b      	adds	r3, r7, #4
 800b804:	4619      	mov	r1, r3
 800b806:	4807      	ldr	r0, [pc, #28]	; (800b824 <LSM6DSL_fifoInterruptDisable+0x28>)
 800b808:	f000 fc25 	bl	800c056 <lsm6dsl_pin_int1_route_get>
	reg.int1_fth = PROPERTY_DISABLE;
 800b80c:	793b      	ldrb	r3, [r7, #4]
 800b80e:	f36f 03c3 	bfc	r3, #3, #1
 800b812:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 800b814:	6879      	ldr	r1, [r7, #4]
 800b816:	4803      	ldr	r0, [pc, #12]	; (800b824 <LSM6DSL_fifoInterruptDisable+0x28>)
 800b818:	f000 faba 	bl	800bd90 <lsm6dsl_pin_int1_route_set>
}
 800b81c:	bf00      	nop
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20000a58 	.word	0x20000a58

0800b828 <LSM6DSL_modesDisable>:

void LSM6DSL_modesDisable(void)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	af00      	add	r7, sp, #0
	LSM6DSL_perSampleDisable();
 800b82c:	f7ff fd2c 	bl	800b288 <LSM6DSL_perSampleDisable>
	LSM6DSL_fifoDisable();
 800b830:	f7ff fda6 	bl	800b380 <LSM6DSL_fifoDisable>
	Lsm6dsl_Mode = LSM6DSL_MODE_IDLE;
 800b834:	4b02      	ldr	r3, [pc, #8]	; (800b840 <LSM6DSL_modesDisable+0x18>)
 800b836:	2200      	movs	r2, #0
 800b838:	701a      	strb	r2, [r3, #0]
}
 800b83a:	bf00      	nop
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20000ac8 	.word	0x20000ac8

0800b844 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800b844:	b590      	push	{r4, r7, lr}
 800b846:	b087      	sub	sp, #28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	607a      	str	r2, [r7, #4]
 800b84e:	461a      	mov	r2, r3
 800b850:	460b      	mov	r3, r1
 800b852:	72fb      	strb	r3, [r7, #11]
 800b854:	4613      	mov	r3, r2
 800b856:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	685c      	ldr	r4, [r3, #4]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6898      	ldr	r0, [r3, #8]
 800b860:	893b      	ldrh	r3, [r7, #8]
 800b862:	7af9      	ldrb	r1, [r7, #11]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	47a0      	blx	r4
 800b868:	6178      	str	r0, [r7, #20]
  return ret;
 800b86a:	697b      	ldr	r3, [r7, #20]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	371c      	adds	r7, #28
 800b870:	46bd      	mov	sp, r7
 800b872:	bd90      	pop	{r4, r7, pc}

0800b874 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800b874:	b590      	push	{r4, r7, lr}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	607a      	str	r2, [r7, #4]
 800b87e:	461a      	mov	r2, r3
 800b880:	460b      	mov	r3, r1
 800b882:	72fb      	strb	r3, [r7, #11]
 800b884:	4613      	mov	r3, r2
 800b886:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681c      	ldr	r4, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6898      	ldr	r0, [r3, #8]
 800b890:	893b      	ldrh	r3, [r7, #8]
 800b892:	7af9      	ldrb	r1, [r7, #11]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	47a0      	blx	r4
 800b898:	6178      	str	r0, [r7, #20]
  return ret;
 800b89a:	697b      	ldr	r3, [r7, #20]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	371c      	adds	r7, #28
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd90      	pop	{r4, r7, pc}

0800b8a4 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 800b8ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8ba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b8d0 <lsm6dsl_from_fs8g_to_mg+0x2c>
 800b8be:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b8c2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	3e79db23 	.word	0x3e79db23

0800b8d4 <lsm6dsl_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6dsl_from_fs500dps_to_mdps(int16_t lsb)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 800b8de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8e2:	ee07 3a90 	vmov	s15, r3
 800b8e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b900 <lsm6dsl_from_fs500dps_to_mdps+0x2c>
 800b8ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b8f2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	418c0000 	.word	0x418c0000

0800b904 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800b910:	f107 0208 	add.w	r2, r7, #8
 800b914:	2301      	movs	r3, #1
 800b916:	2110      	movs	r1, #16
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff ff93 	bl	800b844 <lsm6dsl_read_reg>
 800b91e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10f      	bne.n	800b946 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800b926:	78fb      	ldrb	r3, [r7, #3]
 800b928:	f003 0303 	and.w	r3, r3, #3
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	7a3b      	ldrb	r3, [r7, #8]
 800b930:	f362 0383 	bfi	r3, r2, #2, #2
 800b934:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800b936:	f107 0208 	add.w	r2, r7, #8
 800b93a:	2301      	movs	r3, #1
 800b93c:	2110      	movs	r1, #16
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff ff98 	bl	800b874 <lsm6dsl_write_reg>
 800b944:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800b946:	68fb      	ldr	r3, [r7, #12]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	460b      	mov	r3, r1
 800b95a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800b95c:	f107 0208 	add.w	r2, r7, #8
 800b960:	2301      	movs	r3, #1
 800b962:	2110      	movs	r1, #16
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff ff6d 	bl	800b844 <lsm6dsl_read_reg>
 800b96a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10f      	bne.n	800b992 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800b972:	78fb      	ldrb	r3, [r7, #3]
 800b974:	f003 030f 	and.w	r3, r3, #15
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	7a3b      	ldrb	r3, [r7, #8]
 800b97c:	f362 1307 	bfi	r3, r2, #4, #4
 800b980:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800b982:	f107 0208 	add.w	r2, r7, #8
 800b986:	2301      	movs	r3, #1
 800b988:	2110      	movs	r1, #16
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7ff ff72 	bl	800b874 <lsm6dsl_write_reg>
 800b990:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800b992:	68fb      	ldr	r3, [r7, #12]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800b9a8:	f107 0208 	add.w	r2, r7, #8
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	2111      	movs	r1, #17
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f7ff ff47 	bl	800b844 <lsm6dsl_read_reg>
 800b9b6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10f      	bne.n	800b9de <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800b9be:	78fb      	ldrb	r3, [r7, #3]
 800b9c0:	f003 0307 	and.w	r3, r3, #7
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	7a3b      	ldrb	r3, [r7, #8]
 800b9c8:	f362 0343 	bfi	r3, r2, #1, #3
 800b9cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800b9ce:	f107 0208 	add.w	r2, r7, #8
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	2111      	movs	r1, #17
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7ff ff4c 	bl	800b874 <lsm6dsl_write_reg>
 800b9dc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800b9de:	68fb      	ldr	r3, [r7, #12]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800b9f4:	f107 0208 	add.w	r2, r7, #8
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	2111      	movs	r1, #17
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7ff ff21 	bl	800b844 <lsm6dsl_read_reg>
 800ba02:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10f      	bne.n	800ba2a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800ba0a:	78fb      	ldrb	r3, [r7, #3]
 800ba0c:	f003 030f 	and.w	r3, r3, #15
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	7a3b      	ldrb	r3, [r7, #8]
 800ba14:	f362 1307 	bfi	r3, r2, #4, #4
 800ba18:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800ba1a:	f107 0208 	add.w	r2, r7, #8
 800ba1e:	2301      	movs	r3, #1
 800ba20:	2111      	movs	r1, #17
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff ff26 	bl	800b874 <lsm6dsl_write_reg>
 800ba28:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800ba40:	f107 0208 	add.w	r2, r7, #8
 800ba44:	2301      	movs	r3, #1
 800ba46:	2112      	movs	r1, #18
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff fefb 	bl	800b844 <lsm6dsl_read_reg>
 800ba4e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10f      	bne.n	800ba76 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800ba56:	78fb      	ldrb	r3, [r7, #3]
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	b2da      	uxtb	r2, r3
 800ba5e:	7a3b      	ldrb	r3, [r7, #8]
 800ba60:	f362 1386 	bfi	r3, r2, #6, #1
 800ba64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800ba66:	f107 0208 	add.w	r2, r7, #8
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	2112      	movs	r1, #18
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7ff ff00 	bl	800b874 <lsm6dsl_write_reg>
 800ba74:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800ba76:	68fb      	ldr	r3, [r7, #12]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <lsm6dsl_status_reg_get>:
  * @param  val    Registers STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx, lsm6dsl_status_reg_t *val)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*) val, 1);
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	211e      	movs	r1, #30
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff fed7 	bl	800b844 <lsm6dsl_read_reg>
 800ba96:	60f8      	str	r0, [r7, #12]
  return ret;
 800ba98:	68fb      	ldr	r3, [r7, #12]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800baac:	2306      	movs	r3, #6
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	2122      	movs	r1, #34	; 0x22
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff fec6 	bl	800b844 <lsm6dsl_read_reg>
 800bab8:	60f8      	str	r0, [r7, #12]
  return ret;
 800baba:	68fb      	ldr	r3, [r7, #12]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800bace:	2306      	movs	r3, #6
 800bad0:	683a      	ldr	r2, [r7, #0]
 800bad2:	2128      	movs	r1, #40	; 0x28
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff feb5 	bl	800b844 <lsm6dsl_read_reg>
 800bada:	60f8      	str	r0, [r7, #12]
  return ret;
 800badc:	68fb      	ldr	r3, [r7, #12]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <lsm6dsl_fifo_raw_data_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_raw_data_get(stmdev_ctx_t *ctx, uint8_t *buffer,
                                  uint8_t len)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b086      	sub	sp, #24
 800baea:	af00      	add	r7, sp, #0
 800baec:	60f8      	str	r0, [r7, #12]
 800baee:	60b9      	str	r1, [r7, #8]
 800baf0:	4613      	mov	r3, r2
 800baf2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_DATA_OUT_L, buffer, len);
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	213e      	movs	r1, #62	; 0x3e
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff fea1 	bl	800b844 <lsm6dsl_read_reg>
 800bb02:	6178      	str	r0, [r7, #20]
  return ret;
 800bb04:	697b      	ldr	r3, [r7, #20]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <lsm6dsl_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsl_drdy_pulsed_g_t val)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800bb1a:	f107 0208 	add.w	r2, r7, #8
 800bb1e:	2301      	movs	r3, #1
 800bb20:	210b      	movs	r1, #11
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff fe8e 	bl	800b844 <lsm6dsl_read_reg>
 800bb28:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&drdy_pulse_cfg_g, 1);
  if(ret == 0){
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10f      	bne.n	800bb50 <lsm6dsl_data_ready_mode_set+0x42>
    drdy_pulse_cfg_g.drdy_pulsed = (uint8_t) val;
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	7a3b      	ldrb	r3, [r7, #8]
 800bb3a:	f362 13c7 	bfi	r3, r2, #7, #1
 800bb3e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800bb40:	f107 0208 	add.w	r2, r7, #8
 800bb44:	2301      	movs	r3, #1
 800bb46:	210b      	movs	r1, #11
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff fe93 	bl	800b874 <lsm6dsl_write_reg>
 800bb4e:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&drdy_pulse_cfg_g, 1);
  }
  return ret;
 800bb50:	68fb      	ldr	r3, [r7, #12]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800bb64:	2301      	movs	r3, #1
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	210f      	movs	r1, #15
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fe6a 	bl	800b844 <lsm6dsl_read_reg>
 800bb70:	60f8      	str	r0, [r7, #12]
  return ret;
 800bb72:	68fb      	ldr	r3, [r7, #12]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800bb88:	f107 0208 	add.w	r2, r7, #8
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	2112      	movs	r1, #18
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff fe57 	bl	800b844 <lsm6dsl_read_reg>
 800bb96:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10f      	bne.n	800bbbe <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 800bb9e:	78fb      	ldrb	r3, [r7, #3]
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	7a3b      	ldrb	r3, [r7, #8]
 800bba8:	f362 0300 	bfi	r3, r2, #0, #1
 800bbac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800bbae:	f107 0208 	add.w	r2, r7, #8
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	2112      	movs	r1, #18
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff fe5c 	bl	800b874 <lsm6dsl_write_reg>
 800bbbc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800bbd2:	f107 0208 	add.w	r2, r7, #8
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	2112      	movs	r1, #18
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7ff fe32 	bl	800b844 <lsm6dsl_read_reg>
 800bbe0:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800bbe2:	7a3b      	ldrb	r3, [r7, #8]
 800bbe4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	461a      	mov	r2, r3
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	701a      	strb	r2, [r3, #0]

  return ret;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <lsm6dsl_xl_filter_analog_set>:
  * @param  val    Change the values of bw0_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	460b      	mov	r3, r1
 800bc04:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800bc06:	f107 0208 	add.w	r2, r7, #8
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	2110      	movs	r1, #16
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff fe18 	bl	800b844 <lsm6dsl_read_reg>
 800bc14:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10f      	bne.n	800bc3c <lsm6dsl_xl_filter_analog_set+0x42>
    ctrl1_xl.bw0_xl = (uint8_t) val;
 800bc1c:	78fb      	ldrb	r3, [r7, #3]
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	7a3b      	ldrb	r3, [r7, #8]
 800bc26:	f362 0300 	bfi	r3, r2, #0, #1
 800bc2a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800bc2c:	f107 0208 	add.w	r2, r7, #8
 800bc30:	2301      	movs	r3, #1
 800bc32:	2110      	movs	r1, #16
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7ff fe1d 	bl	800b874 <lsm6dsl_write_reg>
 800bc3a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800bc52:	f107 0208 	add.w	r2, r7, #8
 800bc56:	2301      	movs	r3, #1
 800bc58:	2117      	movs	r1, #23
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff fdf2 	bl	800b844 <lsm6dsl_read_reg>
 800bc60:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d120      	bne.n	800bcaa <lsm6dsl_xl_lp2_bandwidth_set+0x64>
    ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
 800bc68:	78fb      	ldrb	r3, [r7, #3]
 800bc6a:	091b      	lsrs	r3, r3, #4
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	7a3b      	ldrb	r3, [r7, #8]
 800bc74:	f362 03c3 	bfi	r3, r2, #3, #1
 800bc78:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800bc7a:	78fb      	ldrb	r3, [r7, #3]
 800bc7c:	f003 0303 	and.w	r3, r3, #3
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	7a3b      	ldrb	r3, [r7, #8]
 800bc84:	f362 1346 	bfi	r3, r2, #5, #2
 800bc88:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800bc8a:	7a3b      	ldrb	r3, [r7, #8]
 800bc8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc90:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800bc92:	7a3b      	ldrb	r3, [r7, #8]
 800bc94:	f36f 0382 	bfc	r3, #2, #1
 800bc98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800bc9a:	f107 0208 	add.w	r2, r7, #8
 800bc9e:	2301      	movs	r3, #1
 800bca0:	2117      	movs	r1, #23
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f7ff fde6 	bl	800b874 <lsm6dsl_write_reg>
 800bca8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <lsm6dsl_gy_band_pass_set>:
  * @param  val    gyroscope filtering chain configuration.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800bcc0:	f107 0208 	add.w	r2, r7, #8
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	2116      	movs	r1, #22
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff fdbb 	bl	800b844 <lsm6dsl_read_reg>
 800bcce:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d157      	bne.n	800bd86 <lsm6dsl_gy_band_pass_set+0xd2>
    ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
 800bcd6:	78fb      	ldrb	r3, [r7, #3]
 800bcd8:	091b      	lsrs	r3, r3, #4
 800bcda:	f003 0303 	and.w	r3, r3, #3
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	7a3b      	ldrb	r3, [r7, #8]
 800bce2:	f362 1305 	bfi	r3, r2, #4, #2
 800bce6:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
 800bce8:	78fb      	ldrb	r3, [r7, #3]
 800bcea:	09db      	lsrs	r3, r3, #7
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f003 0301 	and.w	r3, r3, #1
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	7a3b      	ldrb	r3, [r7, #8]
 800bcf6:	f362 1386 	bfi	r3, r2, #6, #1
 800bcfa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800bcfc:	f107 0208 	add.w	r2, r7, #8
 800bd00:	2301      	movs	r3, #1
 800bd02:	2116      	movs	r1, #22
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff fdb5 	bl	800b874 <lsm6dsl_write_reg>
 800bd0a:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d139      	bne.n	800bd86 <lsm6dsl_gy_band_pass_set+0xd2>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800bd12:	f107 020c 	add.w	r2, r7, #12
 800bd16:	2301      	movs	r3, #1
 800bd18:	2115      	movs	r1, #21
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff fd92 	bl	800b844 <lsm6dsl_read_reg>
 800bd20:	6178      	str	r0, [r7, #20]
      if(ret == 0){
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d12e      	bne.n	800bd86 <lsm6dsl_gy_band_pass_set+0xd2>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800bd28:	78fb      	ldrb	r3, [r7, #3]
 800bd2a:	f003 0303 	and.w	r3, r3, #3
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	7b3b      	ldrb	r3, [r7, #12]
 800bd32:	f362 0301 	bfi	r3, r2, #0, #2
 800bd36:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800bd38:	f107 020c 	add.w	r2, r7, #12
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	2115      	movs	r1, #21
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff fd97 	bl	800b874 <lsm6dsl_write_reg>
 800bd46:	6178      	str	r0, [r7, #20]
        if(ret == 0){
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d11b      	bne.n	800bd86 <lsm6dsl_gy_band_pass_set+0xd2>
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 800bd4e:	f107 0210 	add.w	r2, r7, #16
 800bd52:	2301      	movs	r3, #1
 800bd54:	2113      	movs	r1, #19
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7ff fd74 	bl	800b844 <lsm6dsl_read_reg>
 800bd5c:	6178      	str	r0, [r7, #20]
                                 (uint8_t*)&ctrl4_c, 1);
          if(ret == 0){
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d110      	bne.n	800bd86 <lsm6dsl_gy_band_pass_set+0xd2>
            ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
 800bd64:	78fb      	ldrb	r3, [r7, #3]
 800bd66:	08db      	lsrs	r3, r3, #3
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	7c3b      	ldrb	r3, [r7, #16]
 800bd70:	f362 0341 	bfi	r3, r2, #1, #1
 800bd74:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 800bd76:	f107 0210 	add.w	r2, r7, #16
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	2113      	movs	r1, #19
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7ff fd78 	bl	800b874 <lsm6dsl_write_reg>
 800bd84:	6178      	str	r0, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800bd86:	697b      	ldr	r3, [r7, #20]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08a      	sub	sp, #40	; 0x28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800bd9a:	f107 021c 	add.w	r2, r7, #28
 800bd9e:	2301      	movs	r3, #1
 800bda0:	210d      	movs	r1, #13
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7ff fd4e 	bl	800b844 <lsm6dsl_read_reg>
 800bda8:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d147      	bne.n	800be40 <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800bdb0:	783b      	ldrb	r3, [r7, #0]
 800bdb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	7f3b      	ldrb	r3, [r7, #28]
 800bdba:	f362 0300 	bfi	r3, r2, #0, #1
 800bdbe:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800bdc0:	783b      	ldrb	r3, [r7, #0]
 800bdc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	7f3b      	ldrb	r3, [r7, #28]
 800bdca:	f362 0341 	bfi	r3, r2, #1, #1
 800bdce:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800bdd0:	783b      	ldrb	r3, [r7, #0]
 800bdd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	7f3b      	ldrb	r3, [r7, #28]
 800bdda:	f362 0382 	bfi	r3, r2, #2, #1
 800bdde:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800bde0:	783b      	ldrb	r3, [r7, #0]
 800bde2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bde6:	b2da      	uxtb	r2, r3
 800bde8:	7f3b      	ldrb	r3, [r7, #28]
 800bdea:	f362 03c3 	bfi	r3, r2, #3, #1
 800bdee:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800bdf0:	783b      	ldrb	r3, [r7, #0]
 800bdf2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	7f3b      	ldrb	r3, [r7, #28]
 800bdfa:	f362 1304 	bfi	r3, r2, #4, #1
 800bdfe:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800be00:	783b      	ldrb	r3, [r7, #0]
 800be02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800be06:	b2da      	uxtb	r2, r3
 800be08:	7f3b      	ldrb	r3, [r7, #28]
 800be0a:	f362 1345 	bfi	r3, r2, #5, #1
 800be0e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 800be10:	783b      	ldrb	r3, [r7, #0]
 800be12:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800be16:	b2da      	uxtb	r2, r3
 800be18:	7f3b      	ldrb	r3, [r7, #28]
 800be1a:	f362 1386 	bfi	r3, r2, #6, #1
 800be1e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 800be20:	783b      	ldrb	r3, [r7, #0]
 800be22:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800be26:	b2da      	uxtb	r2, r3
 800be28:	7f3b      	ldrb	r3, [r7, #28]
 800be2a:	f362 13c7 	bfi	r3, r2, #7, #1
 800be2e:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800be30:	f107 021c 	add.w	r2, r7, #28
 800be34:	2301      	movs	r3, #1
 800be36:	210d      	movs	r1, #13
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff fd1b 	bl	800b874 <lsm6dsl_write_reg>
 800be3e:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800be40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be42:	2b00      	cmp	r3, #0
 800be44:	d107      	bne.n	800be56 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800be46:	f107 0218 	add.w	r2, r7, #24
 800be4a:	2301      	movs	r3, #1
 800be4c:	215e      	movs	r1, #94	; 0x5e
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff fcf8 	bl	800b844 <lsm6dsl_read_reg>
 800be54:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d107      	bne.n	800be6c <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 800be5c:	f107 0214 	add.w	r2, r7, #20
 800be60:	2301      	movs	r3, #1
 800be62:	215f      	movs	r1, #95	; 0x5f
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f7ff fced 	bl	800b844 <lsm6dsl_read_reg>
 800be6a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d147      	bne.n	800bf02 <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 800be72:	787b      	ldrb	r3, [r7, #1]
 800be74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	7e3b      	ldrb	r3, [r7, #24]
 800be7c:	f362 0300 	bfi	r3, r2, #0, #1
 800be80:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 800be82:	787b      	ldrb	r3, [r7, #1]
 800be84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	7e3b      	ldrb	r3, [r7, #24]
 800be8c:	f362 0341 	bfi	r3, r2, #1, #1
 800be90:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 800be92:	787b      	ldrb	r3, [r7, #1]
 800be94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	7e3b      	ldrb	r3, [r7, #24]
 800be9c:	f362 0382 	bfi	r3, r2, #2, #1
 800bea0:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 800bea2:	787b      	ldrb	r3, [r7, #1]
 800bea4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	7e3b      	ldrb	r3, [r7, #24]
 800beac:	f362 03c3 	bfi	r3, r2, #3, #1
 800beb0:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 800beb2:	787b      	ldrb	r3, [r7, #1]
 800beb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	7e3b      	ldrb	r3, [r7, #24]
 800bebc:	f362 1304 	bfi	r3, r2, #4, #1
 800bec0:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 800bec2:	787b      	ldrb	r3, [r7, #1]
 800bec4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	7e3b      	ldrb	r3, [r7, #24]
 800becc:	f362 1345 	bfi	r3, r2, #5, #1
 800bed0:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 800bed2:	787b      	ldrb	r3, [r7, #1]
 800bed4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	7e3b      	ldrb	r3, [r7, #24]
 800bedc:	f362 1386 	bfi	r3, r2, #6, #1
 800bee0:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 800bee2:	787b      	ldrb	r3, [r7, #1]
 800bee4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	7e3b      	ldrb	r3, [r7, #24]
 800beec:	f362 13c7 	bfi	r3, r2, #7, #1
 800bef0:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800bef2:	f107 0218 	add.w	r2, r7, #24
 800bef6:	2301      	movs	r3, #1
 800bef8:	215e      	movs	r1, #94	; 0x5e
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff fcba 	bl	800b874 <lsm6dsl_write_reg>
 800bf00:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d107      	bne.n	800bf18 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800bf08:	f107 0210 	add.w	r2, r7, #16
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	2113      	movs	r1, #19
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff fc97 	bl	800b844 <lsm6dsl_read_reg>
 800bf16:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10f      	bne.n	800bf3e <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 800bf1e:	78bb      	ldrb	r3, [r7, #2]
 800bf20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	7c3b      	ldrb	r3, [r7, #16]
 800bf28:	f362 1304 	bfi	r3, r2, #4, #1
 800bf2c:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800bf2e:	f107 0210 	add.w	r2, r7, #16
 800bf32:	2301      	movs	r3, #1
 800bf34:	2113      	movs	r1, #19
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff fc9c 	bl	800b874 <lsm6dsl_write_reg>
 800bf3c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800bf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d107      	bne.n	800bf54 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800bf44:	f107 0220 	add.w	r2, r7, #32
 800bf48:	2301      	movs	r3, #1
 800bf4a:	211a      	movs	r1, #26
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff fc79 	bl	800b844 <lsm6dsl_read_reg>
 800bf52:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d111      	bne.n	800bf7e <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 800bf5a:	78bb      	ldrb	r3, [r7, #2]
 800bf5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf66:	f362 13c7 	bfi	r3, r2, #7, #1
 800bf6a:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800bf6e:	f107 0220 	add.w	r2, r7, #32
 800bf72:	2301      	movs	r3, #1
 800bf74:	211a      	movs	r1, #26
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff fc7c 	bl	800b874 <lsm6dsl_write_reg>
 800bf7c:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d158      	bne.n	800c036 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800bf84:	f107 020c 	add.w	r2, r7, #12
 800bf88:	2301      	movs	r3, #1
 800bf8a:	2158      	movs	r1, #88	; 0x58
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff fc59 	bl	800b844 <lsm6dsl_read_reg>
 800bf92:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 800bf94:	787b      	ldrb	r3, [r7, #1]
 800bf96:	f003 0304 	and.w	r3, r3, #4
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d141      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 800bfa0:	787b      	ldrb	r3, [r7, #1]
 800bfa2:	f003 0310 	and.w	r3, r3, #16
 800bfa6:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d13b      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 800bfac:	787b      	ldrb	r3, [r7, #1]
 800bfae:	f003 0320 	and.w	r3, r3, #32
 800bfb2:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d135      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 800bfb8:	787b      	ldrb	r3, [r7, #1]
 800bfba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfbe:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d12f      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800bfc4:	787b      	ldrb	r3, [r7, #1]
 800bfc6:	f003 0308 	and.w	r3, r3, #8
 800bfca:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d129      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 800bfd0:	787b      	ldrb	r3, [r7, #1]
 800bfd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bfd6:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d123      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 800bfdc:	7d3b      	ldrb	r3, [r7, #20]
 800bfde:	f003 0304 	and.w	r3, r3, #4
 800bfe2:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d11d      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 800bfe8:	7d3b      	ldrb	r3, [r7, #20]
 800bfea:	f003 0310 	and.w	r3, r3, #16
 800bfee:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d117      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800bff4:	7d3b      	ldrb	r3, [r7, #20]
 800bff6:	f003 0320 	and.w	r3, r3, #32
 800bffa:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d111      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800c000:	7d3b      	ldrb	r3, [r7, #20]
 800c002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c006:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10b      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 800c00c:	7d3b      	ldrb	r3, [r7, #20]
 800c00e:	f003 0308 	and.w	r3, r3, #8
 800c012:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800c014:	2b00      	cmp	r3, #0
 800c016:	d105      	bne.n	800c024 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 800c018:	7d3b      	ldrb	r3, [r7, #20]
 800c01a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c01e:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800c020:	2b00      	cmp	r3, #0
 800c022:	d004      	beq.n	800c02e <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800c024:	7b3b      	ldrb	r3, [r7, #12]
 800c026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c02a:	733b      	strb	r3, [r7, #12]
 800c02c:	e003      	b.n	800c036 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 800c02e:	7b3b      	ldrb	r3, [r7, #12]
 800c030:	f36f 13c7 	bfc	r3, #7, #1
 800c034:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 800c036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d107      	bne.n	800c04c <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800c03c:	f107 020c 	add.w	r2, r7, #12
 800c040:	2301      	movs	r3, #1
 800c042:	2158      	movs	r1, #88	; 0x58
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff fc15 	bl	800b874 <lsm6dsl_write_reg>
 800c04a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3728      	adds	r7, #40	; 0x28
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b088      	sub	sp, #32
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800c060:	f107 0214 	add.w	r2, r7, #20
 800c064:	2301      	movs	r3, #1
 800c066:	210d      	movs	r1, #13
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7ff fbeb 	bl	800b844 <lsm6dsl_read_reg>
 800c06e:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	2b00      	cmp	r3, #0
 800c074:	f040 80c0 	bne.w	800c1f8 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 800c078:	7d3b      	ldrb	r3, [r7, #20]
 800c07a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c07e:	b2d9      	uxtb	r1, r3
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	7813      	ldrb	r3, [r2, #0]
 800c084:	f361 0300 	bfi	r3, r1, #0, #1
 800c088:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 800c08a:	7d3b      	ldrb	r3, [r7, #20]
 800c08c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c090:	b2d9      	uxtb	r1, r3
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	7813      	ldrb	r3, [r2, #0]
 800c096:	f361 0341 	bfi	r3, r1, #1, #1
 800c09a:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 800c09c:	7d3b      	ldrb	r3, [r7, #20]
 800c09e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c0a2:	b2d9      	uxtb	r1, r3
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	7813      	ldrb	r3, [r2, #0]
 800c0a8:	f361 0382 	bfi	r3, r1, #2, #1
 800c0ac:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 800c0ae:	7d3b      	ldrb	r3, [r7, #20]
 800c0b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c0b4:	b2d9      	uxtb	r1, r3
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	7813      	ldrb	r3, [r2, #0]
 800c0ba:	f361 03c3 	bfi	r3, r1, #3, #1
 800c0be:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800c0c0:	7d3b      	ldrb	r3, [r7, #20]
 800c0c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c0c6:	b2d9      	uxtb	r1, r3
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	7813      	ldrb	r3, [r2, #0]
 800c0cc:	f361 1304 	bfi	r3, r1, #4, #1
 800c0d0:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800c0d2:	7d3b      	ldrb	r3, [r7, #20]
 800c0d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c0d8:	b2d9      	uxtb	r1, r3
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	7813      	ldrb	r3, [r2, #0]
 800c0de:	f361 1345 	bfi	r3, r1, #5, #1
 800c0e2:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800c0e4:	7d3b      	ldrb	r3, [r7, #20]
 800c0e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c0ea:	b2d9      	uxtb	r1, r3
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	7813      	ldrb	r3, [r2, #0]
 800c0f0:	f361 1386 	bfi	r3, r1, #6, #1
 800c0f4:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 800c0f6:	7d3b      	ldrb	r3, [r7, #20]
 800c0f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c0fc:	b2d9      	uxtb	r1, r3
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	7813      	ldrb	r3, [r2, #0]
 800c102:	f361 13c7 	bfi	r3, r1, #7, #1
 800c106:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800c108:	f107 0210 	add.w	r2, r7, #16
 800c10c:	2301      	movs	r3, #1
 800c10e:	215e      	movs	r1, #94	; 0x5e
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff fb97 	bl	800b844 <lsm6dsl_read_reg>
 800c116:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d16c      	bne.n	800c1f8 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 800c11e:	7c3b      	ldrb	r3, [r7, #16]
 800c120:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c124:	b2d9      	uxtb	r1, r3
 800c126:	683a      	ldr	r2, [r7, #0]
 800c128:	7853      	ldrb	r3, [r2, #1]
 800c12a:	f361 0300 	bfi	r3, r1, #0, #1
 800c12e:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 800c130:	7c3b      	ldrb	r3, [r7, #16]
 800c132:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c136:	b2d9      	uxtb	r1, r3
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	7853      	ldrb	r3, [r2, #1]
 800c13c:	f361 0341 	bfi	r3, r1, #1, #1
 800c140:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 800c142:	7c3b      	ldrb	r3, [r7, #16]
 800c144:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c148:	b2d9      	uxtb	r1, r3
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	7853      	ldrb	r3, [r2, #1]
 800c14e:	f361 0382 	bfi	r3, r1, #2, #1
 800c152:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 800c154:	7c3b      	ldrb	r3, [r7, #16]
 800c156:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c15a:	b2d9      	uxtb	r1, r3
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	7853      	ldrb	r3, [r2, #1]
 800c160:	f361 03c3 	bfi	r3, r1, #3, #1
 800c164:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 800c166:	7c3b      	ldrb	r3, [r7, #16]
 800c168:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c16c:	b2d9      	uxtb	r1, r3
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	7853      	ldrb	r3, [r2, #1]
 800c172:	f361 1304 	bfi	r3, r1, #4, #1
 800c176:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 800c178:	7c3b      	ldrb	r3, [r7, #16]
 800c17a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c17e:	b2d9      	uxtb	r1, r3
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	7853      	ldrb	r3, [r2, #1]
 800c184:	f361 1345 	bfi	r3, r1, #5, #1
 800c188:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 800c18a:	7c3b      	ldrb	r3, [r7, #16]
 800c18c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c190:	b2d9      	uxtb	r1, r3
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	7853      	ldrb	r3, [r2, #1]
 800c196:	f361 1386 	bfi	r3, r1, #6, #1
 800c19a:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 800c19c:	7c3b      	ldrb	r3, [r7, #16]
 800c19e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c1a2:	b2d9      	uxtb	r1, r3
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	7853      	ldrb	r3, [r2, #1]
 800c1a8:	f361 13c7 	bfi	r3, r1, #7, #1
 800c1ac:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800c1ae:	f107 020c 	add.w	r2, r7, #12
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	2113      	movs	r1, #19
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7ff fb44 	bl	800b844 <lsm6dsl_read_reg>
 800c1bc:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d119      	bne.n	800c1f8 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800c1c4:	7b3b      	ldrb	r3, [r7, #12]
 800c1c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c1ca:	b2d9      	uxtb	r1, r3
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	7893      	ldrb	r3, [r2, #2]
 800c1d0:	f361 0300 	bfi	r3, r1, #0, #1
 800c1d4:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800c1d6:	f107 0218 	add.w	r2, r7, #24
 800c1da:	2301      	movs	r3, #1
 800c1dc:	211a      	movs	r1, #26
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff fb30 	bl	800b844 <lsm6dsl_read_reg>
 800c1e4:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 800c1e6:	7e3b      	ldrb	r3, [r7, #24]
 800c1e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c1ec:	b2d9      	uxtb	r1, r3
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	7893      	ldrb	r3, [r2, #2]
 800c1f2:	f361 0300 	bfi	r3, r1, #0, #1
 800c1f6:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 800c1f8:	69fb      	ldr	r3, [r7, #28]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3720      	adds	r7, #32
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <lsm6dsl_pin_polarity_set>:
  * @param  val    Change the values of h_lactive in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_polarity_set(stmdev_ctx_t *ctx, lsm6dsl_h_lactive_t val)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b084      	sub	sp, #16
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	460b      	mov	r3, r1
 800c20c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800c20e:	f107 0208 	add.w	r2, r7, #8
 800c212:	2301      	movs	r3, #1
 800c214:	2112      	movs	r1, #18
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fb14 	bl	800b844 <lsm6dsl_read_reg>
 800c21c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10f      	bne.n	800c244 <lsm6dsl_pin_polarity_set+0x42>
    ctrl3_c.h_lactive = (uint8_t) val;
 800c224:	78fb      	ldrb	r3, [r7, #3]
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	7a3b      	ldrb	r3, [r7, #8]
 800c22e:	f362 1345 	bfi	r3, r2, #5, #1
 800c232:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800c234:	f107 0208 	add.w	r2, r7, #8
 800c238:	2301      	movs	r3, #1
 800c23a:	2112      	movs	r1, #18
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff fb19 	bl	800b874 <lsm6dsl_write_reg>
 800c242:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800c244:	68fb      	ldr	r3, [r7, #12]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b086      	sub	sp, #24
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	460b      	mov	r3, r1
 800c258:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 800c25a:	f107 020c 	add.w	r2, r7, #12
 800c25e:	2301      	movs	r3, #1
 800c260:	2107      	movs	r1, #7
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff faee 	bl	800b844 <lsm6dsl_read_reg>
 800c268:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d11f      	bne.n	800c2b0 <lsm6dsl_fifo_watermark_set+0x62>
    fifo_ctrl1.fth = (uint8_t) (0x00FFU & val);
 800c270:	887b      	ldrh	r3, [r7, #2]
 800c272:	b2db      	uxtb	r3, r3
 800c274:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t) (( 0x0700U & val ) >> 8);
 800c276:	887b      	ldrh	r3, [r7, #2]
 800c278:	0a1b      	lsrs	r3, r3, #8
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	f003 0307 	and.w	r3, r3, #7
 800c280:	b2da      	uxtb	r2, r3
 800c282:	7b3b      	ldrb	r3, [r7, #12]
 800c284:	f362 0302 	bfi	r3, r2, #0, #3
 800c288:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 800c28a:	f107 0210 	add.w	r2, r7, #16
 800c28e:	2301      	movs	r3, #1
 800c290:	2106      	movs	r1, #6
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff faee 	bl	800b874 <lsm6dsl_write_reg>
 800c298:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d107      	bne.n	800c2b0 <lsm6dsl_fifo_watermark_set+0x62>
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 800c2a0:	f107 020c 	add.w	r2, r7, #12
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	2107      	movs	r1, #7
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f7ff fae3 	bl	800b874 <lsm6dsl_write_reg>
 800c2ae:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
    }
  }
  return ret;
 800c2b0:	697b      	ldr	r3, [r7, #20]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3718      	adds	r7, #24
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <lsm6dsl_fifo_watermark_get>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b086      	sub	sp, #24
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 800c2c4:	f107 0210 	add.w	r2, r7, #16
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	2106      	movs	r1, #6
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f7ff fab9 	bl	800b844 <lsm6dsl_read_reg>
 800c2d2:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d107      	bne.n	800c2ea <lsm6dsl_fifo_watermark_get+0x30>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 800c2da:	f107 020c 	add.w	r2, r7, #12
 800c2de:	2301      	movs	r3, #1
 800c2e0:	2107      	movs	r1, #7
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff faae 	bl	800b844 <lsm6dsl_read_reg>
 800c2e8:	6178      	str	r0, [r7, #20]
  }
  *val = ((uint16_t)fifo_ctrl2.fth << 8) + (uint16_t)fifo_ctrl1.fth;
 800c2ea:	7b3b      	ldrb	r3, [r7, #12]
 800c2ec:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	021b      	lsls	r3, r3, #8
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	7c3b      	ldrb	r3, [r7, #16]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	4413      	add	r3, r2
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	801a      	strh	r2, [r3, #0]

  return ret;
 800c304:	697b      	ldr	r3, [r7, #20]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3718      	adds	r7, #24
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <lsm6dsl_fifo_data_level_get>:
  *                BDU bit.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b086      	sub	sp, #24
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_status1_t fifo_status1;
  lsm6dsl_fifo_status2_t fifo_status2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS1,
 800c318:	f107 0210 	add.w	r2, r7, #16
 800c31c:	2301      	movs	r3, #1
 800c31e:	213a      	movs	r1, #58	; 0x3a
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7ff fa8f 	bl	800b844 <lsm6dsl_read_reg>
 800c326:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&fifo_status1, 1);
  if(ret == 0){
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d114      	bne.n	800c358 <lsm6dsl_fifo_data_level_get+0x4a>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS2,
 800c32e:	f107 020c 	add.w	r2, r7, #12
 800c332:	2301      	movs	r3, #1
 800c334:	213b      	movs	r1, #59	; 0x3b
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7ff fa84 	bl	800b844 <lsm6dsl_read_reg>
 800c33c:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_status2, 1);
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 800c33e:	7b3b      	ldrb	r3, [r7, #12]
 800c340:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c344:	b2db      	uxtb	r3, r3
 800c346:	b29b      	uxth	r3, r3
 800c348:	021b      	lsls	r3, r3, #8
 800c34a:	b29a      	uxth	r2, r3
             (uint16_t) fifo_status1.diff_fifo;
 800c34c:	7c3b      	ldrb	r3, [r7, #16]
 800c34e:	b29b      	uxth	r3, r3
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 800c350:	4413      	add	r3, r2
 800c352:	b29a      	uxth	r2, r3
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800c358:	697b      	ldr	r3, [r7, #20]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3718      	adds	r7, #24
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b084      	sub	sp, #16
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	460b      	mov	r3, r1
 800c36c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800c36e:	f107 0208 	add.w	r2, r7, #8
 800c372:	2301      	movs	r3, #1
 800c374:	2108      	movs	r1, #8
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff fa64 	bl	800b844 <lsm6dsl_read_reg>
 800c37c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10f      	bne.n	800c3a4 <lsm6dsl_fifo_xl_batch_set+0x42>
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 800c384:	78fb      	ldrb	r3, [r7, #3]
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	b2da      	uxtb	r2, r3
 800c38c:	7a3b      	ldrb	r3, [r7, #8]
 800c38e:	f362 0302 	bfi	r3, r2, #0, #3
 800c392:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 800c394:	f107 0208 	add.w	r2, r7, #8
 800c398:	2301      	movs	r3, #1
 800c39a:	2108      	movs	r1, #8
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff fa69 	bl	800b874 <lsm6dsl_write_reg>
 800c3a2:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <lsm6dsl_fifo_xl_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t *val)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800c3ba:	f107 0208 	add.w	r2, r7, #8
 800c3be:	2301      	movs	r3, #1
 800c3c0:	2108      	movs	r1, #8
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff fa3e 	bl	800b844 <lsm6dsl_read_reg>
 800c3c8:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_xl) {
 800c3ca:	7a3b      	ldrb	r3, [r7, #8]
 800c3cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b07      	cmp	r3, #7
 800c3d4:	d832      	bhi.n	800c43c <lsm6dsl_fifo_xl_batch_get+0x8c>
 800c3d6:	a201      	add	r2, pc, #4	; (adr r2, 800c3dc <lsm6dsl_fifo_xl_batch_get+0x2c>)
 800c3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3dc:	0800c3fd 	.word	0x0800c3fd
 800c3e0:	0800c405 	.word	0x0800c405
 800c3e4:	0800c40d 	.word	0x0800c40d
 800c3e8:	0800c415 	.word	0x0800c415
 800c3ec:	0800c41d 	.word	0x0800c41d
 800c3f0:	0800c425 	.word	0x0800c425
 800c3f4:	0800c42d 	.word	0x0800c42d
 800c3f8:	0800c435 	.word	0x0800c435
    case LSM6DSL_FIFO_XL_DISABLE:
      *val = LSM6DSL_FIFO_XL_DISABLE;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2200      	movs	r2, #0
 800c400:	701a      	strb	r2, [r3, #0]
      break;
 800c402:	e01f      	b.n	800c444 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_NO_DEC:
      *val = LSM6DSL_FIFO_XL_NO_DEC;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2201      	movs	r2, #1
 800c408:	701a      	strb	r2, [r3, #0]
      break;
 800c40a:	e01b      	b.n	800c444 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_2:
      *val = LSM6DSL_FIFO_XL_DEC_2;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	2202      	movs	r2, #2
 800c410:	701a      	strb	r2, [r3, #0]
      break;
 800c412:	e017      	b.n	800c444 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_3:
      *val = LSM6DSL_FIFO_XL_DEC_3;
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	2203      	movs	r2, #3
 800c418:	701a      	strb	r2, [r3, #0]
      break;
 800c41a:	e013      	b.n	800c444 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_4:
      *val = LSM6DSL_FIFO_XL_DEC_4;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2204      	movs	r2, #4
 800c420:	701a      	strb	r2, [r3, #0]
      break;
 800c422:	e00f      	b.n	800c444 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_8:
      *val = LSM6DSL_FIFO_XL_DEC_8;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	2205      	movs	r2, #5
 800c428:	701a      	strb	r2, [r3, #0]
      break;
 800c42a:	e00b      	b.n	800c444 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_16:
      *val = LSM6DSL_FIFO_XL_DEC_16;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	2206      	movs	r2, #6
 800c430:	701a      	strb	r2, [r3, #0]
      break;
 800c432:	e007      	b.n	800c444 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_32:
      *val = LSM6DSL_FIFO_XL_DEC_32;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	2207      	movs	r2, #7
 800c438:	701a      	strb	r2, [r3, #0]
      break;
 800c43a:	e003      	b.n	800c444 <lsm6dsl_fifo_xl_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_XL_DEC_ND;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	2208      	movs	r2, #8
 800c440:	701a      	strb	r2, [r3, #0]
      break;
 800c442:	bf00      	nop
  }

  return ret;
 800c444:	68fb      	ldr	r3, [r7, #12]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop

0800c450 <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	460b      	mov	r3, r1
 800c45a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800c45c:	f107 0208 	add.w	r2, r7, #8
 800c460:	2301      	movs	r3, #1
 800c462:	2108      	movs	r1, #8
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7ff f9ed 	bl	800b844 <lsm6dsl_read_reg>
 800c46a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10f      	bne.n	800c492 <lsm6dsl_fifo_gy_batch_set+0x42>
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 800c472:	78fb      	ldrb	r3, [r7, #3]
 800c474:	f003 0307 	and.w	r3, r3, #7
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	7a3b      	ldrb	r3, [r7, #8]
 800c47c:	f362 03c5 	bfi	r3, r2, #3, #3
 800c480:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800c482:	f107 0208 	add.w	r2, r7, #8
 800c486:	2301      	movs	r3, #1
 800c488:	2108      	movs	r1, #8
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7ff f9f2 	bl	800b874 <lsm6dsl_write_reg>
 800c490:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800c492:	68fb      	ldr	r3, [r7, #12]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <lsm6dsl_fifo_gy_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t *val)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800c4a6:	f107 0208 	add.w	r2, r7, #8
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	2108      	movs	r1, #8
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7ff f9c8 	bl	800b844 <lsm6dsl_read_reg>
 800c4b4:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_gyro) {
 800c4b6:	7a3b      	ldrb	r3, [r7, #8]
 800c4b8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	2b07      	cmp	r3, #7
 800c4c0:	d832      	bhi.n	800c528 <lsm6dsl_fifo_gy_batch_get+0x8c>
 800c4c2:	a201      	add	r2, pc, #4	; (adr r2, 800c4c8 <lsm6dsl_fifo_gy_batch_get+0x2c>)
 800c4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c8:	0800c4e9 	.word	0x0800c4e9
 800c4cc:	0800c4f1 	.word	0x0800c4f1
 800c4d0:	0800c4f9 	.word	0x0800c4f9
 800c4d4:	0800c501 	.word	0x0800c501
 800c4d8:	0800c509 	.word	0x0800c509
 800c4dc:	0800c511 	.word	0x0800c511
 800c4e0:	0800c519 	.word	0x0800c519
 800c4e4:	0800c521 	.word	0x0800c521
    case LSM6DSL_FIFO_GY_DISABLE:
      *val = LSM6DSL_FIFO_GY_DISABLE;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	701a      	strb	r2, [r3, #0]
      break;
 800c4ee:	e01f      	b.n	800c530 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_NO_DEC:
      *val = LSM6DSL_FIFO_GY_NO_DEC;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	701a      	strb	r2, [r3, #0]
      break;
 800c4f6:	e01b      	b.n	800c530 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_2:
      *val = LSM6DSL_FIFO_GY_DEC_2;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	701a      	strb	r2, [r3, #0]
      break;
 800c4fe:	e017      	b.n	800c530 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_3:
      *val = LSM6DSL_FIFO_GY_DEC_3;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2203      	movs	r2, #3
 800c504:	701a      	strb	r2, [r3, #0]
      break;
 800c506:	e013      	b.n	800c530 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_4:
      *val = LSM6DSL_FIFO_GY_DEC_4;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	2204      	movs	r2, #4
 800c50c:	701a      	strb	r2, [r3, #0]
      break;
 800c50e:	e00f      	b.n	800c530 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_8:
      *val = LSM6DSL_FIFO_GY_DEC_8;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2205      	movs	r2, #5
 800c514:	701a      	strb	r2, [r3, #0]
      break;
 800c516:	e00b      	b.n	800c530 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_16:
      *val = LSM6DSL_FIFO_GY_DEC_16;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2206      	movs	r2, #6
 800c51c:	701a      	strb	r2, [r3, #0]
      break;
 800c51e:	e007      	b.n	800c530 <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_32:
      *val = LSM6DSL_FIFO_GY_DEC_32;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2207      	movs	r2, #7
 800c524:	701a      	strb	r2, [r3, #0]
      break;
 800c526:	e003      	b.n	800c530 <lsm6dsl_fifo_gy_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_GY_DEC_ND;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	2208      	movs	r2, #8
 800c52c:	701a      	strb	r2, [r3, #0]
      break;
 800c52e:	bf00      	nop
  }

  return ret;
 800c530:	68fb      	ldr	r3, [r7, #12]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop

0800c53c <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800c548:	f107 0208 	add.w	r2, r7, #8
 800c54c:	2301      	movs	r3, #1
 800c54e:	210a      	movs	r1, #10
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff f977 	bl	800b844 <lsm6dsl_read_reg>
 800c556:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10f      	bne.n	800c57e <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800c55e:	78fb      	ldrb	r3, [r7, #3]
 800c560:	f003 0307 	and.w	r3, r3, #7
 800c564:	b2da      	uxtb	r2, r3
 800c566:	7a3b      	ldrb	r3, [r7, #8]
 800c568:	f362 0302 	bfi	r3, r2, #0, #3
 800c56c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800c56e:	f107 0208 	add.w	r2, r7, #8
 800c572:	2301      	movs	r3, #1
 800c574:	210a      	movs	r1, #10
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7ff f97c 	bl	800b874 <lsm6dsl_write_reg>
 800c57c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800c57e:	68fb      	ldr	r3, [r7, #12]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <lsm6dsl_fifo_mode_get>:
  * @param  val    Get the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_get(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t *val)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800c592:	f107 0208 	add.w	r2, r7, #8
 800c596:	2301      	movs	r3, #1
 800c598:	210a      	movs	r1, #10
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff f952 	bl	800b844 <lsm6dsl_read_reg>
 800c5a0:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.fifo_mode) {
 800c5a2:	7a3b      	ldrb	r3, [r7, #8]
 800c5a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	2b06      	cmp	r3, #6
 800c5ac:	d824      	bhi.n	800c5f8 <lsm6dsl_fifo_mode_get+0x70>
 800c5ae:	a201      	add	r2, pc, #4	; (adr r2, 800c5b4 <lsm6dsl_fifo_mode_get+0x2c>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5d1 	.word	0x0800c5d1
 800c5b8:	0800c5d9 	.word	0x0800c5d9
 800c5bc:	0800c5f9 	.word	0x0800c5f9
 800c5c0:	0800c5e1 	.word	0x0800c5e1
 800c5c4:	0800c5e9 	.word	0x0800c5e9
 800c5c8:	0800c5f9 	.word	0x0800c5f9
 800c5cc:	0800c5f1 	.word	0x0800c5f1
    case LSM6DSL_BYPASS_MODE:
      *val = LSM6DSL_BYPASS_MODE;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	701a      	strb	r2, [r3, #0]
      break;
 800c5d6:	e013      	b.n	800c600 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_FIFO_MODE:
      *val = LSM6DSL_FIFO_MODE;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	701a      	strb	r2, [r3, #0]
      break;
 800c5de:	e00f      	b.n	800c600 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_TO_FIFO_MODE:
      *val = LSM6DSL_STREAM_TO_FIFO_MODE;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	2203      	movs	r2, #3
 800c5e4:	701a      	strb	r2, [r3, #0]
      break;
 800c5e6:	e00b      	b.n	800c600 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
      *val = LSM6DSL_BYPASS_TO_STREAM_MODE;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	2204      	movs	r2, #4
 800c5ec:	701a      	strb	r2, [r3, #0]
      break;
 800c5ee:	e007      	b.n	800c600 <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_MODE:
      *val = LSM6DSL_STREAM_MODE;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2206      	movs	r2, #6
 800c5f4:	701a      	strb	r2, [r3, #0]
      break;
 800c5f6:	e003      	b.n	800c600 <lsm6dsl_fifo_mode_get+0x78>
    default:
      *val = LSM6DSL_FIFO_MODE_ND;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2208      	movs	r2, #8
 800c5fc:	701a      	strb	r2, [r3, #0]
      break;
 800c5fe:	bf00      	nop
  }

  return ret;
 800c600:	68fb      	ldr	r3, [r7, #12]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop

0800c60c <lsm6dsl_fifo_data_rate_set>:
  * @param  val    Change the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t val)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800c618:	f107 0208 	add.w	r2, r7, #8
 800c61c:	2301      	movs	r3, #1
 800c61e:	210a      	movs	r1, #10
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff f90f 	bl	800b844 <lsm6dsl_read_reg>
 800c626:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10f      	bne.n	800c64e <lsm6dsl_fifo_data_rate_set+0x42>
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 800c62e:	78fb      	ldrb	r3, [r7, #3]
 800c630:	f003 030f 	and.w	r3, r3, #15
 800c634:	b2da      	uxtb	r2, r3
 800c636:	7a3b      	ldrb	r3, [r7, #8]
 800c638:	f362 03c6 	bfi	r3, r2, #3, #4
 800c63c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800c63e:	f107 0208 	add.w	r2, r7, #8
 800c642:	2301      	movs	r3, #1
 800c644:	210a      	movs	r1, #10
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff f914 	bl	800b874 <lsm6dsl_write_reg>
 800c64c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800c64e:	68fb      	ldr	r3, [r7, #12]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <lsm6dsl_fifo_data_rate_get>:
  * @param  val    Get the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t *val)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800c662:	f107 0208 	add.w	r2, r7, #8
 800c666:	2301      	movs	r3, #1
 800c668:	210a      	movs	r1, #10
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7ff f8ea 	bl	800b844 <lsm6dsl_read_reg>
 800c670:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.odr_fifo) {
 800c672:	7a3b      	ldrb	r3, [r7, #8]
 800c674:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b0a      	cmp	r3, #10
 800c67c:	d844      	bhi.n	800c708 <lsm6dsl_fifo_data_rate_get+0xb0>
 800c67e:	a201      	add	r2, pc, #4	; (adr r2, 800c684 <lsm6dsl_fifo_data_rate_get+0x2c>)
 800c680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c684:	0800c6b1 	.word	0x0800c6b1
 800c688:	0800c6b9 	.word	0x0800c6b9
 800c68c:	0800c6c1 	.word	0x0800c6c1
 800c690:	0800c6c9 	.word	0x0800c6c9
 800c694:	0800c6d1 	.word	0x0800c6d1
 800c698:	0800c6d9 	.word	0x0800c6d9
 800c69c:	0800c6e1 	.word	0x0800c6e1
 800c6a0:	0800c6e9 	.word	0x0800c6e9
 800c6a4:	0800c6f1 	.word	0x0800c6f1
 800c6a8:	0800c6f9 	.word	0x0800c6f9
 800c6ac:	0800c701 	.word	0x0800c701
    case LSM6DSL_FIFO_DISABLE:
      *val = LSM6DSL_FIFO_DISABLE;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	701a      	strb	r2, [r3, #0]
      break;
 800c6b6:	e02b      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_12Hz5:
      *val = LSM6DSL_FIFO_12Hz5;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	701a      	strb	r2, [r3, #0]
      break;
 800c6be:	e027      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_26Hz:
      *val = LSM6DSL_FIFO_26Hz;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	701a      	strb	r2, [r3, #0]
      break;
 800c6c6:	e023      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_52Hz:
      *val = LSM6DSL_FIFO_52Hz;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2203      	movs	r2, #3
 800c6cc:	701a      	strb	r2, [r3, #0]
      break;
 800c6ce:	e01f      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_104Hz:
      *val = LSM6DSL_FIFO_104Hz;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	2204      	movs	r2, #4
 800c6d4:	701a      	strb	r2, [r3, #0]
      break;
 800c6d6:	e01b      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_208Hz:
      *val = LSM6DSL_FIFO_208Hz;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2205      	movs	r2, #5
 800c6dc:	701a      	strb	r2, [r3, #0]
      break;
 800c6de:	e017      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_416Hz:
      *val = LSM6DSL_FIFO_416Hz;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2206      	movs	r2, #6
 800c6e4:	701a      	strb	r2, [r3, #0]
      break;
 800c6e6:	e013      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_833Hz:
      *val = LSM6DSL_FIFO_833Hz;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	2207      	movs	r2, #7
 800c6ec:	701a      	strb	r2, [r3, #0]
      break;
 800c6ee:	e00f      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_1k66Hz:
      *val = LSM6DSL_FIFO_1k66Hz;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2208      	movs	r2, #8
 800c6f4:	701a      	strb	r2, [r3, #0]
      break;
 800c6f6:	e00b      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_3k33Hz:
      *val = LSM6DSL_FIFO_3k33Hz;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2209      	movs	r2, #9
 800c6fc:	701a      	strb	r2, [r3, #0]
      break;
 800c6fe:	e007      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_6k66Hz:
      *val = LSM6DSL_FIFO_6k66Hz;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	220a      	movs	r2, #10
 800c704:	701a      	strb	r2, [r3, #0]
      break;
 800c706:	e003      	b.n	800c710 <lsm6dsl_fifo_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_FIFO_RATE_ND;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	220b      	movs	r2, #11
 800c70c:	701a      	strb	r2, [r3, #0]
      break;
 800c70e:	bf00      	nop
  }

  return ret;
 800c710:	68fb      	ldr	r3, [r7, #12]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop

0800c71c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uwTickPrio = TICK_INT_PRIORITY;
 800c720:	4b17      	ldr	r3, [pc, #92]	; (800c780 <main+0x64>)
 800c722:	2200      	movs	r2, #0
 800c724:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c726:	f7f4 fbc7 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c72a:	f000 f82f 	bl	800c78c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c72e:	f7fe fa5d 	bl	800abec <MX_GPIO_Init>
  MX_DMA_Init();
 800c732:	f7fe f8bf 	bl	800a8b4 <MX_DMA_Init>
  MX_CRC_Init();
 800c736:	f7fe f887 	bl	800a848 <MX_CRC_Init>
  MX_RTC_Init();
 800c73a:	f000 f8d5 	bl	800c8e8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800c73e:	f000 fd5b 	bl	800d1f8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800c742:	f000 fc87 	bl	800d054 <MX_TIM3_Init>
  MX_I2C1_Init();
 800c746:	f7fe fb7b 	bl	800ae40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800c74a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c74e:	480d      	ldr	r0, [pc, #52]	; (800c784 <main+0x68>)
 800c750:	f7f9 f9c0 	bl	8005ad4 <HAL_RTC_DeactivateAlarm>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800c754:	480b      	ldr	r0, [pc, #44]	; (800c784 <main+0x68>)
 800c756:	f7f9 fc0f 	bl	8005f78 <HAL_RTCEx_DeactivateWakeUpTimer>

  SYSTEM_DEBUG_wakeupStandbyMode();
 800c75a:	f000 fc2d 	bl	800cfb8 <SYSTEM_DEBUG_wakeupStandbyMode>

#ifdef IWDG_ENABLE
	MX_IWDG_Init();
#endif

  COM_halUartReceiveDma();
 800c75e:	f7fd fe11 	bl	800a384 <COM_halUartReceiveDma>

  COM_uartPrint(HELLO_WORLD);
 800c762:	4809      	ldr	r0, [pc, #36]	; (800c788 <main+0x6c>)
 800c764:	f7fd fdea 	bl	800a33c <COM_uartPrint>

  SYSTEM_DEBUG_assertMsgPrint();
 800c768:	f000 fac8 	bl	800ccfc <SYSTEM_DEBUG_assertMsgPrint>

  LSM6DSL_init();
 800c76c:	f7fe fc2c 	bl	800afc8 <LSM6DSL_init>

  SYSTEM_DEBUG_printResetCause();
 800c770:	f000 faee 	bl	800cd50 <SYSTEM_DEBUG_printResetCause>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800c774:	f7fe f9d2 	bl	800ab1c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800c778:	f7fc faa2 	bl	8008cc0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800c77c:	e7fe      	b.n	800c77c <main+0x60>
 800c77e:	bf00      	nop
 800c780:	20000080 	.word	0x20000080
 800c784:	20000b64 	.word	0x20000b64
 800c788:	0800fe24 	.word	0x0800fe24

0800c78c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b09a      	sub	sp, #104	; 0x68
 800c790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c796:	2230      	movs	r2, #48	; 0x30
 800c798:	2100      	movs	r1, #0
 800c79a:	4618      	mov	r0, r3
 800c79c:	f000 fe77 	bl	800d48e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c7a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	601a      	str	r2, [r3, #0]
 800c7a8:	605a      	str	r2, [r3, #4]
 800c7aa:	609a      	str	r2, [r3, #8]
 800c7ac:	60da      	str	r2, [r3, #12]
 800c7ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c7b0:	f107 030c 	add.w	r3, r7, #12
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	605a      	str	r2, [r3, #4]
 800c7ba:	609a      	str	r2, [r3, #8]
 800c7bc:	60da      	str	r2, [r3, #12]
 800c7be:	611a      	str	r2, [r3, #16]
 800c7c0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60bb      	str	r3, [r7, #8]
 800c7c6:	4b32      	ldr	r3, [pc, #200]	; (800c890 <SystemClock_Config+0x104>)
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ca:	4a31      	ldr	r2, [pc, #196]	; (800c890 <SystemClock_Config+0x104>)
 800c7cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7d0:	6413      	str	r3, [r2, #64]	; 0x40
 800c7d2:	4b2f      	ldr	r3, [pc, #188]	; (800c890 <SystemClock_Config+0x104>)
 800c7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7da:	60bb      	str	r3, [r7, #8]
 800c7dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c7de:	2300      	movs	r3, #0
 800c7e0:	607b      	str	r3, [r7, #4]
 800c7e2:	4b2c      	ldr	r3, [pc, #176]	; (800c894 <SystemClock_Config+0x108>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a2b      	ldr	r2, [pc, #172]	; (800c894 <SystemClock_Config+0x108>)
 800c7e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	4b29      	ldr	r3, [pc, #164]	; (800c894 <SystemClock_Config+0x108>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c7f6:	607b      	str	r3, [r7, #4]
 800c7f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800c7fa:	230e      	movs	r3, #14
 800c7fc:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c7fe:	2301      	movs	r3, #1
 800c800:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c802:	2301      	movs	r3, #1
 800c804:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c806:	2310      	movs	r3, #16
 800c808:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800c80a:	2301      	movs	r3, #1
 800c80c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c80e:	2302      	movs	r3, #2
 800c810:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c812:	2300      	movs	r3, #0
 800c814:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 800c816:	2310      	movs	r3, #16
 800c818:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 800c81a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800c81e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800c820:	2304      	movs	r3, #4
 800c822:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c824:	2304      	movs	r3, #4
 800c826:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c828:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7f7 fae5 	bl	8003dfc <HAL_RCC_OscConfig>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800c838:	f000 f840 	bl	800c8bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c83c:	230f      	movs	r3, #15
 800c83e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c840:	2302      	movs	r3, #2
 800c842:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c844:	2300      	movs	r3, #0
 800c846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c84c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c84e:	2300      	movs	r3, #0
 800c850:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800c852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c856:	2102      	movs	r1, #2
 800c858:	4618      	mov	r0, r3
 800c85a:	f7f7 fdef 	bl	800443c <HAL_RCC_ClockConfig>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800c864:	f000 f82a 	bl	800c8bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c868:	2302      	movs	r3, #2
 800c86a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c86c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c870:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c872:	f107 030c 	add.w	r3, r7, #12
 800c876:	4618      	mov	r0, r3
 800c878:	f7f8 f8ac 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d001      	beq.n	800c886 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800c882:	f000 f81b 	bl	800c8bc <Error_Handler>
  }
}
 800c886:	bf00      	nop
 800c888:	3768      	adds	r7, #104	; 0x68
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	40023800 	.word	0x40023800
 800c894:	40007000 	.word	0x40007000

0800c898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a04      	ldr	r2, [pc, #16]	; (800c8b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d101      	bne.n	800c8ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800c8aa:	f7f4 fb27 	bl	8000efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	40000c00 	.word	0x40000c00

0800c8bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	COM_uartPrint("Error");
 800c8c0:	4801      	ldr	r0, [pc, #4]	; (800c8c8 <Error_Handler+0xc>)
 800c8c2:	f7fd fd3b 	bl	800a33c <COM_uartPrint>
	while(1);
 800c8c6:	e7fe      	b.n	800c8c6 <Error_Handler+0xa>
 800c8c8:	0800fe34 	.word	0x0800fe34

0800c8cc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	SYSTEM_DEBUG_assertRecord(file, line);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f9e5 	bl	800cca8 <SYSTEM_DEBUG_assertRecord>

  /* USER CODE END 6 */
}
 800c8de:	bf00      	nop
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
	...

0800c8e8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b090      	sub	sp, #64	; 0x40
 800c8ec:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800c8ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]
 800c8f6:	605a      	str	r2, [r3, #4]
 800c8f8:	609a      	str	r2, [r3, #8]
 800c8fa:	60da      	str	r2, [r3, #12]
 800c8fc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c8fe:	2300      	movs	r3, #0
 800c900:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800c902:	463b      	mov	r3, r7
 800c904:	2228      	movs	r2, #40	; 0x28
 800c906:	2100      	movs	r1, #0
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fdc0 	bl	800d48e <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800c90e:	4b40      	ldr	r3, [pc, #256]	; (800ca10 <MX_RTC_Init+0x128>)
 800c910:	4a40      	ldr	r2, [pc, #256]	; (800ca14 <MX_RTC_Init+0x12c>)
 800c912:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c914:	4b3e      	ldr	r3, [pc, #248]	; (800ca10 <MX_RTC_Init+0x128>)
 800c916:	2200      	movs	r2, #0
 800c918:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c91a:	4b3d      	ldr	r3, [pc, #244]	; (800ca10 <MX_RTC_Init+0x128>)
 800c91c:	227f      	movs	r2, #127	; 0x7f
 800c91e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c920:	4b3b      	ldr	r3, [pc, #236]	; (800ca10 <MX_RTC_Init+0x128>)
 800c922:	22ff      	movs	r2, #255	; 0xff
 800c924:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c926:	4b3a      	ldr	r3, [pc, #232]	; (800ca10 <MX_RTC_Init+0x128>)
 800c928:	2200      	movs	r2, #0
 800c92a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c92c:	4b38      	ldr	r3, [pc, #224]	; (800ca10 <MX_RTC_Init+0x128>)
 800c92e:	2200      	movs	r2, #0
 800c930:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c932:	4b37      	ldr	r3, [pc, #220]	; (800ca10 <MX_RTC_Init+0x128>)
 800c934:	2200      	movs	r2, #0
 800c936:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c938:	4835      	ldr	r0, [pc, #212]	; (800ca10 <MX_RTC_Init+0x128>)
 800c93a:	f7f8 fa5f 	bl	8004dfc <HAL_RTC_Init>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800c944:	f7ff ffba 	bl	800c8bc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800c94e:	2300      	movs	r3, #0
 800c950:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800c954:	2300      	movs	r3, #0
 800c956:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c95a:	2300      	movs	r3, #0
 800c95c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c95e:	2300      	movs	r3, #0
 800c960:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800c962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c966:	2200      	movs	r2, #0
 800c968:	4619      	mov	r1, r3
 800c96a:	4829      	ldr	r0, [pc, #164]	; (800ca10 <MX_RTC_Init+0x128>)
 800c96c:	f7f8 fb2c 	bl	8004fc8 <HAL_RTC_SetTime>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800c976:	f7ff ffa1 	bl	800c8bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800c97a:	2301      	movs	r3, #1
 800c97c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800c980:	2301      	movs	r3, #1
 800c982:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 800c986:	2301      	movs	r3, #1
 800c988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800c992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c996:	2200      	movs	r2, #0
 800c998:	4619      	mov	r1, r3
 800c99a:	481d      	ldr	r0, [pc, #116]	; (800ca10 <MX_RTC_Init+0x128>)
 800c99c:	f7f8 fc80 	bl	80052a0 <HAL_RTC_SetDate>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d001      	beq.n	800c9aa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800c9a6:	f7ff ff89 	bl	800c8bc <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800c9c2:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800c9c6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800c9d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800c9dc:	463b      	mov	r3, r7
 800c9de:	2200      	movs	r2, #0
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	480b      	ldr	r0, [pc, #44]	; (800ca10 <MX_RTC_Init+0x128>)
 800c9e4:	f7f8 fd8c 	bl	8005500 <HAL_RTC_SetAlarm_IT>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800c9ee:	f7ff ff65 	bl	800c8bc <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	4806      	ldr	r0, [pc, #24]	; (800ca10 <MX_RTC_Init+0x128>)
 800c9f8:	f7f9 f9de 	bl	8005db8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <MX_RTC_Init+0x11e>
  {
    Error_Handler();
 800ca02:	f7ff ff5b 	bl	800c8bc <Error_Handler>
  }

}
 800ca06:	bf00      	nop
 800ca08:	3740      	adds	r7, #64	; 0x40
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20000b64 	.word	0x20000b64
 800ca14:	40002800 	.word	0x40002800

0800ca18 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a0c      	ldr	r2, [pc, #48]	; (800ca58 <HAL_RTC_MspInit+0x40>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d112      	bne.n	800ca50 <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ca2a:	4b0c      	ldr	r3, [pc, #48]	; (800ca5c <HAL_RTC_MspInit+0x44>)
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 800ca30:	2200      	movs	r2, #0
 800ca32:	2105      	movs	r1, #5
 800ca34:	2003      	movs	r0, #3
 800ca36:	f7f4 fb4f 	bl	80010d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800ca3a:	2003      	movs	r0, #3
 800ca3c:	f7f4 fb78 	bl	8001130 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800ca40:	2200      	movs	r2, #0
 800ca42:	2105      	movs	r1, #5
 800ca44:	2029      	movs	r0, #41	; 0x29
 800ca46:	f7f4 fb47 	bl	80010d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800ca4a:	2029      	movs	r0, #41	; 0x29
 800ca4c:	f7f4 fb70 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	40002800 	.word	0x40002800
 800ca5c:	42470e3c 	.word	0x42470e3c

0800ca60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca66:	2300      	movs	r3, #0
 800ca68:	607b      	str	r3, [r7, #4]
 800ca6a:	4b12      	ldr	r3, [pc, #72]	; (800cab4 <HAL_MspInit+0x54>)
 800ca6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca6e:	4a11      	ldr	r2, [pc, #68]	; (800cab4 <HAL_MspInit+0x54>)
 800ca70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca74:	6453      	str	r3, [r2, #68]	; 0x44
 800ca76:	4b0f      	ldr	r3, [pc, #60]	; (800cab4 <HAL_MspInit+0x54>)
 800ca78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca7e:	607b      	str	r3, [r7, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ca82:	2300      	movs	r3, #0
 800ca84:	603b      	str	r3, [r7, #0]
 800ca86:	4b0b      	ldr	r3, [pc, #44]	; (800cab4 <HAL_MspInit+0x54>)
 800ca88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8a:	4a0a      	ldr	r2, [pc, #40]	; (800cab4 <HAL_MspInit+0x54>)
 800ca8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca90:	6413      	str	r3, [r2, #64]	; 0x40
 800ca92:	4b08      	ldr	r3, [pc, #32]	; (800cab4 <HAL_MspInit+0x54>)
 800ca94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca9a:	603b      	str	r3, [r7, #0]
 800ca9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ca9e:	2200      	movs	r2, #0
 800caa0:	210f      	movs	r1, #15
 800caa2:	f06f 0001 	mvn.w	r0, #1
 800caa6:	f7f4 fb17 	bl	80010d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800caaa:	bf00      	nop
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	40023800 	.word	0x40023800

0800cab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08c      	sub	sp, #48	; 0x30
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 800cac8:	2200      	movs	r2, #0
 800caca:	6879      	ldr	r1, [r7, #4]
 800cacc:	2032      	movs	r0, #50	; 0x32
 800cace:	f7f4 fb03 	bl	80010d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800cad2:	2032      	movs	r0, #50	; 0x32
 800cad4:	f7f4 fb2c 	bl	8001130 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800cad8:	2300      	movs	r3, #0
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	4b1f      	ldr	r3, [pc, #124]	; (800cb5c <HAL_InitTick+0xa4>)
 800cade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae0:	4a1e      	ldr	r2, [pc, #120]	; (800cb5c <HAL_InitTick+0xa4>)
 800cae2:	f043 0308 	orr.w	r3, r3, #8
 800cae6:	6413      	str	r3, [r2, #64]	; 0x40
 800cae8:	4b1c      	ldr	r3, [pc, #112]	; (800cb5c <HAL_InitTick+0xa4>)
 800caea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caec:	f003 0308 	and.w	r3, r3, #8
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800caf4:	f107 0210 	add.w	r2, r7, #16
 800caf8:	f107 0314 	add.w	r3, r7, #20
 800cafc:	4611      	mov	r1, r2
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7f7 ff36 	bl	8004970 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800cb04:	f7f7 ff0c 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800cb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb10:	4a13      	ldr	r2, [pc, #76]	; (800cb60 <HAL_InitTick+0xa8>)
 800cb12:	fba2 2303 	umull	r2, r3, r2, r3
 800cb16:	0c9b      	lsrs	r3, r3, #18
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800cb1c:	4b11      	ldr	r3, [pc, #68]	; (800cb64 <HAL_InitTick+0xac>)
 800cb1e:	4a12      	ldr	r2, [pc, #72]	; (800cb68 <HAL_InitTick+0xb0>)
 800cb20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 800cb22:	4b10      	ldr	r3, [pc, #64]	; (800cb64 <HAL_InitTick+0xac>)
 800cb24:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cb28:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800cb2a:	4a0e      	ldr	r2, [pc, #56]	; (800cb64 <HAL_InitTick+0xac>)
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800cb30:	4b0c      	ldr	r3, [pc, #48]	; (800cb64 <HAL_InitTick+0xac>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb36:	4b0b      	ldr	r3, [pc, #44]	; (800cb64 <HAL_InitTick+0xac>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800cb3c:	4809      	ldr	r0, [pc, #36]	; (800cb64 <HAL_InitTick+0xac>)
 800cb3e:	f7f9 faab 	bl	8006098 <HAL_TIM_Base_Init>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d104      	bne.n	800cb52 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800cb48:	4806      	ldr	r0, [pc, #24]	; (800cb64 <HAL_InitTick+0xac>)
 800cb4a:	f7f9 fb47 	bl	80061dc <HAL_TIM_Base_Start_IT>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	e000      	b.n	800cb54 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3730      	adds	r7, #48	; 0x30
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	40023800 	.word	0x40023800
 800cb60:	431bde83 	.word	0x431bde83
 800cb64:	20000b84 	.word	0x20000b84
 800cb68:	40000c00 	.word	0x40000c00

0800cb6c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM5 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	af00      	add	r7, sp, #0
  /* Disable TIM5 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);                                                  
 800cb70:	4b06      	ldr	r3, [pc, #24]	; (800cb8c <HAL_SuspendTick+0x20>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <HAL_SuspendTick+0x20>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f022 0201 	bic.w	r2, r2, #1
 800cb7e:	60da      	str	r2, [r3, #12]
}
 800cb80:	bf00      	nop
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	20000b84 	.word	0x20000b84

0800cb90 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM5 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800cb90:	b480      	push	{r7}
 800cb92:	af00      	add	r7, sp, #0
  /* Enable TIM5 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 800cb94:	4b06      	ldr	r3, [pc, #24]	; (800cbb0 <HAL_ResumeTick+0x20>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68da      	ldr	r2, [r3, #12]
 800cb9a:	4b05      	ldr	r3, [pc, #20]	; (800cbb0 <HAL_ResumeTick+0x20>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0201 	orr.w	r2, r2, #1
 800cba2:	60da      	str	r2, [r3, #12]
}
 800cba4:	bf00      	nop
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	20000b84 	.word	0x20000b84

0800cbb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cbb8:	bf00      	nop
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cbc6:	e7fe      	b.n	800cbc6 <HardFault_Handler+0x4>

0800cbc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cbcc:	e7fe      	b.n	800cbcc <MemManage_Handler+0x4>

0800cbce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cbce:	b480      	push	{r7}
 800cbd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cbd2:	e7fe      	b.n	800cbd2 <BusFault_Handler+0x4>

0800cbd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cbd8:	e7fe      	b.n	800cbd8 <UsageFault_Handler+0x4>

0800cbda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cbda:	b480      	push	{r7}
 800cbdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cbde:	bf00      	nop
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800cbec:	4802      	ldr	r0, [pc, #8]	; (800cbf8 <RTC_WKUP_IRQHandler+0x10>)
 800cbee:	f7f9 fa1b 	bl	8006028 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800cbf2:	bf00      	nop
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000b64 	.word	0x20000b64

0800cbfc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800cc00:	4802      	ldr	r0, [pc, #8]	; (800cc0c <DMA1_Stream5_IRQHandler+0x10>)
 800cc02:	f7f4 fdaf 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800cc06:	bf00      	nop
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000c04 	.word	0x20000c04

0800cc10 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800cc14:	4802      	ldr	r0, [pc, #8]	; (800cc20 <DMA1_Stream6_IRQHandler+0x10>)
 800cc16:	f7f4 fda5 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800cc1a:	bf00      	nop
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	20000c64 	.word	0x20000c64

0800cc24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800cc28:	2020      	movs	r0, #32
 800cc2a:	f7f5 ffed 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800cc2e:	bf00      	nop
 800cc30:	bd80      	pop	{r7, pc}
	...

0800cc34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800cc38:	4802      	ldr	r0, [pc, #8]	; (800cc44 <USART2_IRQHandler+0x10>)
 800cc3a:	f7fb f941 	bl	8007ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800cc3e:	bf00      	nop
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20000cc4 	.word	0x20000cc4

0800cc48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800cc4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cc50:	f7f5 ffda 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800cc54:	bf00      	nop
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800cc5c:	4802      	ldr	r0, [pc, #8]	; (800cc68 <RTC_Alarm_IRQHandler+0x10>)
 800cc5e:	f7f8 ffd5 	bl	8005c0c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800cc62:	bf00      	nop
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	20000b64 	.word	0x20000b64

0800cc6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800cc70:	4802      	ldr	r0, [pc, #8]	; (800cc7c <TIM5_IRQHandler+0x10>)
 800cc72:	f7f9 fd43 	bl	80066fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800cc76:	bf00      	nop
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	20000b84 	.word	0x20000b84

0800cc80 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cc80:	b480      	push	{r7}
 800cc82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cc84:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cc88:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <__NVIC_SystemReset+0x20>)
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cc90:	4903      	ldr	r1, [pc, #12]	; (800cca0 <__NVIC_SystemReset+0x20>)
 800cc92:	4b04      	ldr	r3, [pc, #16]	; (800cca4 <__NVIC_SystemReset+0x24>)
 800cc94:	4313      	orrs	r3, r2
 800cc96:	60cb      	str	r3, [r1, #12]
 800cc98:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cc9c:	bf00      	nop
 800cc9e:	e7fd      	b.n	800cc9c <__NVIC_SystemReset+0x1c>
 800cca0:	e000ed00 	.word	0xe000ed00
 800cca4:	05fa0004 	.word	0x05fa0004

0800cca8 <SYSTEM_DEBUG_assertRecord>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void SYSTEM_DEBUG_assertRecord(uint8_t *p_file, uint32_t line)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
	Assert_Struct.flag = ASSERT_FLAG_ON;
 800ccb2:	4b11      	ldr	r3, [pc, #68]	; (800ccf8 <SYSTEM_DEBUG_assertRecord+0x50>)
 800ccb4:	22aa      	movs	r2, #170	; 0xaa
 800ccb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (int i = 0; i < sizeof(Assert_Struct.p_file); i++)
 800ccba:	2300      	movs	r3, #0
 800ccbc:	60fb      	str	r3, [r7, #12]
 800ccbe:	e007      	b.n	800ccd0 <SYSTEM_DEBUG_assertRecord+0x28>
	{
		Assert_Struct.p_file [i]  = 0;
 800ccc0:	4a0d      	ldr	r2, [pc, #52]	; (800ccf8 <SYSTEM_DEBUG_assertRecord+0x50>)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(Assert_Struct.p_file); i++)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3301      	adds	r3, #1
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2b3b      	cmp	r3, #59	; 0x3b
 800ccd4:	d9f4      	bls.n	800ccc0 <SYSTEM_DEBUG_assertRecord+0x18>
	}

	strncpy((char*)Assert_Struct.p_file, (char*)p_file, sizeof(Assert_Struct.p_file));
 800ccd6:	223c      	movs	r2, #60	; 0x3c
 800ccd8:	6879      	ldr	r1, [r7, #4]
 800ccda:	4807      	ldr	r0, [pc, #28]	; (800ccf8 <SYSTEM_DEBUG_assertRecord+0x50>)
 800ccdc:	f001 f980 	bl	800dfe0 <strncpy>
	Assert_Struct.line = line;
 800cce0:	4a05      	ldr	r2, [pc, #20]	; (800ccf8 <SYSTEM_DEBUG_assertRecord+0x50>)
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	63d3      	str	r3, [r2, #60]	; 0x3c

	while (COM_getTxBusyFlag()); // OK message
 800cce6:	bf00      	nop
 800cce8:	f7fd fb76 	bl	800a3d8 <COM_getTxBusyFlag>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1fa      	bne.n	800cce8 <SYSTEM_DEBUG_assertRecord+0x40>
	NVIC_SystemReset();
 800ccf2:	f7ff ffc5 	bl	800cc80 <__NVIC_SystemReset>
 800ccf6:	bf00      	nop
 800ccf8:	20000000 	.word	0x20000000

0800ccfc <SYSTEM_DEBUG_assertMsgPrint>:
	while (1) {}; // never reached to here
}

void SYSTEM_DEBUG_assertMsgPrint(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b09a      	sub	sp, #104	; 0x68
 800cd00:	af00      	add	r7, sp, #0
	if (Assert_Struct.flag == ASSERT_FLAG_ON)
 800cd02:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800cd04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd08:	2baa      	cmp	r3, #170	; 0xaa
 800cd0a:	d10a      	bne.n	800cd22 <SYSTEM_DEBUG_assertMsgPrint+0x26>
	{
		char temp [100];
		sprintf(temp, "Problem found! Path: %s\tLine: %u\n", Assert_Struct.p_file, (unsigned int)Assert_Struct.line);
 800cd0c:	4b07      	ldr	r3, [pc, #28]	; (800cd2c <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800cd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd10:	1d38      	adds	r0, r7, #4
 800cd12:	4a06      	ldr	r2, [pc, #24]	; (800cd2c <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800cd14:	4906      	ldr	r1, [pc, #24]	; (800cd30 <SYSTEM_DEBUG_assertMsgPrint+0x34>)
 800cd16:	f001 f931 	bl	800df7c <siprintf>
		COM_uartPrint(temp);
 800cd1a:	1d3b      	adds	r3, r7, #4
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fd fb0d 	bl	800a33c <COM_uartPrint>
	}
}
 800cd22:	bf00      	nop
 800cd24:	3768      	adds	r7, #104	; 0x68
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	20000000 	.word	0x20000000
 800cd30:	0800fe3c 	.word	0x0800fe3c

0800cd34 <SYSTEM_DEBUG_assertResetFlag>:

void SYSTEM_DEBUG_assertResetFlag(void)
{
 800cd34:	b480      	push	{r7}
 800cd36:	af00      	add	r7, sp, #0
	Assert_Struct.flag = ASSERT_FLAG_OFF;
 800cd38:	4b04      	ldr	r3, [pc, #16]	; (800cd4c <SYSTEM_DEBUG_assertResetFlag+0x18>)
 800cd3a:	2255      	movs	r2, #85	; 0x55
 800cd3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800cd40:	bf00      	nop
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	20000000 	.word	0x20000000

0800cd50 <SYSTEM_DEBUG_printResetCause>:

void SYSTEM_DEBUG_printResetCause(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b09a      	sub	sp, #104	; 0x68
 800cd54:	af00      	add	r7, sp, #0
	Reset_Cause = SYSTEM_DEBUG_resetCauseGet();
 800cd56:	f000 f81b 	bl	800cd90 <SYSTEM_DEBUG_resetCauseGet>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <SYSTEM_DEBUG_printResetCause+0x38>)
 800cd60:	701a      	strb	r2, [r3, #0]

	char temp [100];
	sprintf(temp, "The system reset cause is \%s\"\n", SYSTEM_DEBUG_resetCauseGetName(Reset_Cause));
 800cd62:	4b09      	ldr	r3, [pc, #36]	; (800cd88 <SYSTEM_DEBUG_printResetCause+0x38>)
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 f864 	bl	800ce34 <SYSTEM_DEBUG_resetCauseGetName>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	1d3b      	adds	r3, r7, #4
 800cd70:	4906      	ldr	r1, [pc, #24]	; (800cd8c <SYSTEM_DEBUG_printResetCause+0x3c>)
 800cd72:	4618      	mov	r0, r3
 800cd74:	f001 f902 	bl	800df7c <siprintf>
	COM_uartPrint(temp);
 800cd78:	1d3b      	adds	r3, r7, #4
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fd fade 	bl	800a33c <COM_uartPrint>
}
 800cd80:	bf00      	nop
 800cd82:	3768      	adds	r7, #104	; 0x68
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	20000aca 	.word	0x20000aca
 800cd8c:	0800fe60 	.word	0x0800fe60

0800cd90 <SYSTEM_DEBUG_resetCauseGet>:

reset_cause_t SYSTEM_DEBUG_resetCauseGet(void)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
    reset_cause_t Reset_Cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800cd96:	4b26      	ldr	r3, [pc, #152]	; (800ce30 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800cd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	da02      	bge.n	800cda4 <SYSTEM_DEBUG_resetCauseGet+0x14>
    {
        Reset_Cause = RESET_CAUSE_LOW_POWER_RESET;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	71fb      	strb	r3, [r7, #7]
 800cda2:	e037      	b.n	800ce14 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800cda4:	4b22      	ldr	r3, [pc, #136]	; (800ce30 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800cda6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cda8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <SYSTEM_DEBUG_resetCauseGet+0x26>
    {
        Reset_Cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	71fb      	strb	r3, [r7, #7]
 800cdb4:	e02e      	b.n	800ce14 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800cdb6:	4b1e      	ldr	r3, [pc, #120]	; (800ce30 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800cdb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d002      	beq.n	800cdc8 <SYSTEM_DEBUG_resetCauseGet+0x38>
    {
        Reset_Cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	71fb      	strb	r3, [r7, #7]
 800cdc6:	e025      	b.n	800ce14 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800cdc8:	4b19      	ldr	r3, [pc, #100]	; (800ce30 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800cdca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d002      	beq.n	800cdda <SYSTEM_DEBUG_resetCauseGet+0x4a>
    {
        Reset_Cause = RESET_CAUSE_SOFTWARE_RESET;
 800cdd4:	2304      	movs	r3, #4
 800cdd6:	71fb      	strb	r3, [r7, #7]
 800cdd8:	e01c      	b.n	800ce14 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800cdda:	4b15      	ldr	r3, [pc, #84]	; (800ce30 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800cddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d002      	beq.n	800cdec <SYSTEM_DEBUG_resetCauseGet+0x5c>
    {
        Reset_Cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800cde6:	2305      	movs	r3, #5
 800cde8:	71fb      	strb	r3, [r7, #7]
 800cdea:	e013      	b.n	800ce14 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800cdee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <SYSTEM_DEBUG_resetCauseGet+0x6e>
    {
        Reset_Cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800cdf8:	2306      	movs	r3, #6
 800cdfa:	71fb      	strb	r3, [r7, #7]
 800cdfc:	e00a      	b.n	800ce14 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800cdfe:	4b0c      	ldr	r3, [pc, #48]	; (800ce30 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800ce00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d002      	beq.n	800ce10 <SYSTEM_DEBUG_resetCauseGet+0x80>
    {
        Reset_Cause = RESET_CAUSE_BROWNOUT_RESET;
 800ce0a:	2307      	movs	r3, #7
 800ce0c:	71fb      	strb	r3, [r7, #7]
 800ce0e:	e001      	b.n	800ce14 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else
    {
        Reset_Cause = RESET_CAUSE_UNKNOWN;
 800ce10:	2300      	movs	r3, #0
 800ce12:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 800ce14:	4b06      	ldr	r3, [pc, #24]	; (800ce30 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800ce16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce18:	4a05      	ldr	r2, [pc, #20]	; (800ce30 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800ce1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce1e:	6753      	str	r3, [r2, #116]	; 0x74

    return Reset_Cause;
 800ce20:	79fb      	ldrb	r3, [r7, #7]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	370c      	adds	r7, #12
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	40023800 	.word	0x40023800

0800ce34 <SYSTEM_DEBUG_resetCauseGetName>:

const char * SYSTEM_DEBUG_resetCauseGetName(reset_cause_t Reset_Cause)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	71fb      	strb	r3, [r7, #7]
    const char * reset_cause_name = "TBD";
 800ce3e:	4b1c      	ldr	r3, [pc, #112]	; (800ceb0 <SYSTEM_DEBUG_resetCauseGetName+0x7c>)
 800ce40:	60fb      	str	r3, [r7, #12]

    switch (Reset_Cause)
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	2b07      	cmp	r3, #7
 800ce46:	d82b      	bhi.n	800cea0 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
 800ce48:	a201      	add	r2, pc, #4	; (adr r2, 800ce50 <SYSTEM_DEBUG_resetCauseGetName+0x1c>)
 800ce4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4e:	bf00      	nop
 800ce50:	0800ce71 	.word	0x0800ce71
 800ce54:	0800ce77 	.word	0x0800ce77
 800ce58:	0800ce7d 	.word	0x0800ce7d
 800ce5c:	0800ce83 	.word	0x0800ce83
 800ce60:	0800ce89 	.word	0x0800ce89
 800ce64:	0800ce8f 	.word	0x0800ce8f
 800ce68:	0800ce95 	.word	0x0800ce95
 800ce6c:	0800ce9b 	.word	0x0800ce9b
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800ce70:	4b10      	ldr	r3, [pc, #64]	; (800ceb4 <SYSTEM_DEBUG_resetCauseGetName+0x80>)
 800ce72:	60fb      	str	r3, [r7, #12]
            break;
 800ce74:	e014      	b.n	800cea0 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800ce76:	4b10      	ldr	r3, [pc, #64]	; (800ceb8 <SYSTEM_DEBUG_resetCauseGetName+0x84>)
 800ce78:	60fb      	str	r3, [r7, #12]
            break;
 800ce7a:	e011      	b.n	800cea0 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800ce7c:	4b0f      	ldr	r3, [pc, #60]	; (800cebc <SYSTEM_DEBUG_resetCauseGetName+0x88>)
 800ce7e:	60fb      	str	r3, [r7, #12]
            break;
 800ce80:	e00e      	b.n	800cea0 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800ce82:	4b0f      	ldr	r3, [pc, #60]	; (800cec0 <SYSTEM_DEBUG_resetCauseGetName+0x8c>)
 800ce84:	60fb      	str	r3, [r7, #12]
            break;
 800ce86:	e00b      	b.n	800cea0 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800ce88:	4b0e      	ldr	r3, [pc, #56]	; (800cec4 <SYSTEM_DEBUG_resetCauseGetName+0x90>)
 800ce8a:	60fb      	str	r3, [r7, #12]
            break;
 800ce8c:	e008      	b.n	800cea0 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800ce8e:	4b0e      	ldr	r3, [pc, #56]	; (800cec8 <SYSTEM_DEBUG_resetCauseGetName+0x94>)
 800ce90:	60fb      	str	r3, [r7, #12]
            break;
 800ce92:	e005      	b.n	800cea0 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800ce94:	4b0d      	ldr	r3, [pc, #52]	; (800cecc <SYSTEM_DEBUG_resetCauseGetName+0x98>)
 800ce96:	60fb      	str	r3, [r7, #12]
            break;
 800ce98:	e002      	b.n	800cea0 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800ce9a:	4b0d      	ldr	r3, [pc, #52]	; (800ced0 <SYSTEM_DEBUG_resetCauseGetName+0x9c>)
 800ce9c:	60fb      	str	r3, [r7, #12]
            break;
 800ce9e:	bf00      	nop
    }

    return reset_cause_name;
 800cea0:	68fb      	ldr	r3, [r7, #12]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3714      	adds	r7, #20
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	0800fe80 	.word	0x0800fe80
 800ceb4:	0800fe84 	.word	0x0800fe84
 800ceb8:	0800fe8c 	.word	0x0800fe8c
 800cebc:	0800fe9c 	.word	0x0800fe9c
 800cec0:	0800feb4 	.word	0x0800feb4
 800cec4:	0800fed0 	.word	0x0800fed0
 800cec8:	0800fee0 	.word	0x0800fee0
 800cecc:	0800ff10 	.word	0x0800ff10
 800ced0:	0800ff2c 	.word	0x0800ff2c

0800ced4 <SYSTEM_DEBUG_enterStopMode>:

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}

void SYSTEM_DEBUG_enterStopMode(uint32_t wake_up_time)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	const float wakeup_time_base = 0.00048;
 800cedc:	4b1b      	ldr	r3, [pc, #108]	; (800cf4c <SYSTEM_DEBUG_enterStopMode+0x78>)
 800cede:	60fb      	str	r3, [r7, #12]
	uint32_t wakeup_counter = wake_up_time / wakeup_time_base;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	ee07 3a90 	vmov	s15, r3
 800cee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceea:	ed97 7a03 	vldr	s14, [r7, #12]
 800ceee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cef6:	ee17 3a90 	vmov	r3, s15
 800cefa:	60bb      	str	r3, [r7, #8]

	COM_uartPrint("STOP MODE is ON\n");
 800cefc:	4814      	ldr	r0, [pc, #80]	; (800cf50 <SYSTEM_DEBUG_enterStopMode+0x7c>)
 800cefe:	f7fd fa1d 	bl	800a33c <COM_uartPrint>

	/* enable the RTC Wakeup */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800cf02:	2200      	movs	r2, #0
 800cf04:	68b9      	ldr	r1, [r7, #8]
 800cf06:	4813      	ldr	r0, [pc, #76]	; (800cf54 <SYSTEM_DEBUG_enterStopMode+0x80>)
 800cf08:	f7f8 ff56 	bl	8005db8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <SYSTEM_DEBUG_enterStopMode+0x42>
	{
		Error_Handler();
 800cf12:	f7ff fcd3 	bl	800c8bc <Error_Handler>
	}

	// Enters to stop mode
	while (COM_getTxBusyFlag());
 800cf16:	bf00      	nop
 800cf18:	f7fd fa5e 	bl	800a3d8 <COM_getTxBusyFlag>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1fa      	bne.n	800cf18 <SYSTEM_DEBUG_enterStopMode+0x44>
	HAL_SuspendTick();
 800cf22:	f7ff fe23 	bl	800cb6c <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800cf26:	2101      	movs	r1, #1
 800cf28:	2001      	movs	r0, #1
 800cf2a:	f7f6 ff0d 	bl	8003d48 <HAL_PWR_EnterSTOPMode>

	SystemClock_Config();
 800cf2e:	f7ff fc2d 	bl	800c78c <SystemClock_Config>
	HAL_ResumeTick();
 800cf32:	f7ff fe2d 	bl	800cb90 <HAL_ResumeTick>

	/** Deactivate the RTC wakeup  **/
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800cf36:	4807      	ldr	r0, [pc, #28]	; (800cf54 <SYSTEM_DEBUG_enterStopMode+0x80>)
 800cf38:	f7f9 f81e 	bl	8005f78 <HAL_RTCEx_DeactivateWakeUpTimer>

	COM_uartPrint("STOP MODE is OFF\n");
 800cf3c:	4806      	ldr	r0, [pc, #24]	; (800cf58 <SYSTEM_DEBUG_enterStopMode+0x84>)
 800cf3e:	f7fd f9fd 	bl	800a33c <COM_uartPrint>
}
 800cf42:	bf00      	nop
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	39fba882 	.word	0x39fba882
 800cf50:	0800ff44 	.word	0x0800ff44
 800cf54:	20000b64 	.word	0x20000b64
 800cf58:	0800ff58 	.word	0x0800ff58

0800cf5c <SYSTEM_DEBUG_enterStandbyMode>:

void SYSTEM_DEBUG_enterStandbyMode(void)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	af00      	add	r7, sp, #0
	/* Clear the WU FLAG */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800cf60:	4b12      	ldr	r3, [pc, #72]	; (800cfac <SYSTEM_DEBUG_enterStandbyMode+0x50>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a11      	ldr	r2, [pc, #68]	; (800cfac <SYSTEM_DEBUG_enterStandbyMode+0x50>)
 800cf66:	f043 0304 	orr.w	r3, r3, #4
 800cf6a:	6013      	str	r3, [r2, #0]

	 /* clear the RTC Wake UP (WU) flag */
	 __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800cf6c:	4b10      	ldr	r3, [pc, #64]	; (800cfb0 <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	4b0e      	ldr	r3, [pc, #56]	; (800cfb0 <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800cf7c:	60da      	str	r2, [r3, #12]

	 /* Enable the WAKEUP PIN */
	 HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800cf7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cf82:	f7f6 fea9 	bl	8003cd8 <HAL_PWR_EnableWakeUpPin>
	      To configure the wake up timer to 5s the WakeUpCounter is set to 0x28b0:
	      RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
	      Wake-up Time Base = 16 /(32.768KHz) = 0.00048 seconds
	      ==> WakeUpCounter = ~5s/0.00048s = 10416 = 0x28b0
	    */
	 if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2710, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800cf86:	2200      	movs	r2, #0
 800cf88:	f242 7110 	movw	r1, #10000	; 0x2710
 800cf8c:	4808      	ldr	r0, [pc, #32]	; (800cfb0 <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800cf8e:	f7f8 ff13 	bl	8005db8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <SYSTEM_DEBUG_enterStandbyMode+0x40>
	 {
		 Error_Handler();
 800cf98:	f7ff fc90 	bl	800c8bc <Error_Handler>
	 }
	 COM_uartPrint("STANDBY MODE is ON\n");
 800cf9c:	4805      	ldr	r0, [pc, #20]	; (800cfb4 <SYSTEM_DEBUG_enterStandbyMode+0x58>)
 800cf9e:	f7fd f9cd 	bl	800a33c <COM_uartPrint>

	 /* Enter the standby mode */
	 HAL_PWR_EnterSTANDBYMode();
 800cfa2:	f7f6 ff13 	bl	8003dcc <HAL_PWR_EnterSTANDBYMode>
}
 800cfa6:	bf00      	nop
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	40007000 	.word	0x40007000
 800cfb0:	20000b64 	.word	0x20000b64
 800cfb4:	0800ff6c 	.word	0x0800ff6c

0800cfb8 <SYSTEM_DEBUG_wakeupStandbyMode>:

void SYSTEM_DEBUG_wakeupStandbyMode(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800cfbc:	4b0b      	ldr	r3, [pc, #44]	; (800cfec <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	f003 0302 	and.w	r3, r3, #2
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d10f      	bne.n	800cfe8 <SYSTEM_DEBUG_wakeupStandbyMode+0x30>
	{
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800cfc8:	4b08      	ldr	r3, [pc, #32]	; (800cfec <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a07      	ldr	r2, [pc, #28]	; (800cfec <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800cfce:	f043 0308 	orr.w	r3, r3, #8
 800cfd2:	6013      	str	r3, [r2, #0]

		COM_uartPrint("Wakeup from STANDBY MODE\n");
 800cfd4:	4806      	ldr	r0, [pc, #24]	; (800cff0 <SYSTEM_DEBUG_wakeupStandbyMode+0x38>)
 800cfd6:	f7fd f9b1 	bl	800a33c <COM_uartPrint>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800cfda:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cfde:	f7f6 fe97 	bl	8003d10 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800cfe2:	4804      	ldr	r0, [pc, #16]	; (800cff4 <SYSTEM_DEBUG_wakeupStandbyMode+0x3c>)
 800cfe4:	f7f8 ffc8 	bl	8005f78 <HAL_RTCEx_DeactivateWakeUpTimer>
	}
}
 800cfe8:	bf00      	nop
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	40007000 	.word	0x40007000
 800cff0:	0800ff80 	.word	0x0800ff80
 800cff4:	20000b64 	.word	0x20000b64

0800cff8 <HAL_UART_TxCpltCallback>:
 /******************************************************************************
 * Function Definitions
 *******************************************************************************/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
  COM_setTxBusyFlagOff();
 800d000:	f7fd f9dc 	bl	800a3bc <COM_setTxBusyFlagOff>
}
 800d004:	bf00      	nop
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <HAL_RTC_AlarmAEventCallback>:




void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  COM_uartPrint(TICK);
 800d014:	4803      	ldr	r0, [pc, #12]	; (800d024 <HAL_RTC_AlarmAEventCallback+0x18>)
 800d016:	f7fd f991 	bl	800a33c <COM_uartPrint>
}
 800d01a:	bf00      	nop
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	0800ff9c 	.word	0x0800ff9c

0800d028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d028:	b480      	push	{r7}
 800d02a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d02c:	4b08      	ldr	r3, [pc, #32]	; (800d050 <SystemInit+0x28>)
 800d02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d032:	4a07      	ldr	r2, [pc, #28]	; (800d050 <SystemInit+0x28>)
 800d034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d03c:	4b04      	ldr	r3, [pc, #16]	; (800d050 <SystemInit+0x28>)
 800d03e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d042:	609a      	str	r2, [r3, #8]
#endif
}
 800d044:	bf00      	nop
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop
 800d050:	e000ed00 	.word	0xe000ed00

0800d054 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b08e      	sub	sp, #56	; 0x38
 800d058:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d05a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d05e:	2200      	movs	r2, #0
 800d060:	601a      	str	r2, [r3, #0]
 800d062:	605a      	str	r2, [r3, #4]
 800d064:	609a      	str	r2, [r3, #8]
 800d066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d068:	f107 0320 	add.w	r3, r7, #32
 800d06c:	2200      	movs	r2, #0
 800d06e:	601a      	str	r2, [r3, #0]
 800d070:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d072:	1d3b      	adds	r3, r7, #4
 800d074:	2200      	movs	r2, #0
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	605a      	str	r2, [r3, #4]
 800d07a:	609a      	str	r2, [r3, #8]
 800d07c:	60da      	str	r2, [r3, #12]
 800d07e:	611a      	str	r2, [r3, #16]
 800d080:	615a      	str	r2, [r3, #20]
 800d082:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800d084:	4b2c      	ldr	r3, [pc, #176]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d086:	4a2d      	ldr	r2, [pc, #180]	; (800d13c <MX_TIM3_Init+0xe8>)
 800d088:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800d08a:	4b2b      	ldr	r3, [pc, #172]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d08c:	2253      	movs	r2, #83	; 0x53
 800d08e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d090:	4b29      	ldr	r3, [pc, #164]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d092:	2200      	movs	r2, #0
 800d094:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800d096:	4b28      	ldr	r3, [pc, #160]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d098:	2263      	movs	r2, #99	; 0x63
 800d09a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d09c:	4b26      	ldr	r3, [pc, #152]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d0a2:	4b25      	ldr	r3, [pc, #148]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d0a8:	4823      	ldr	r0, [pc, #140]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d0aa:	f7f8 fff5 	bl	8006098 <HAL_TIM_Base_Init>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800d0b4:	f7ff fc02 	bl	800c8bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d0b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d0be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	481c      	ldr	r0, [pc, #112]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d0c6:	f7f9 fdcb 	bl	8006c60 <HAL_TIM_ConfigClockSource>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d001      	beq.n	800d0d4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800d0d0:	f7ff fbf4 	bl	800c8bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d0d4:	4818      	ldr	r0, [pc, #96]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d0d6:	f7f9 f8e1 	bl	800629c <HAL_TIM_PWM_Init>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d001      	beq.n	800d0e4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800d0e0:	f7ff fbec 	bl	800c8bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d0ec:	f107 0320 	add.w	r3, r7, #32
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4811      	ldr	r0, [pc, #68]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d0f4:	f7fa fc70 	bl	80079d8 <HAL_TIMEx_MasterConfigSynchronization>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800d0fe:	f7ff fbdd 	bl	800c8bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d102:	2360      	movs	r3, #96	; 0x60
 800d104:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d106:	2300      	movs	r3, #0
 800d108:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d10a:	2300      	movs	r3, #0
 800d10c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d10e:	2300      	movs	r3, #0
 800d110:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d112:	1d3b      	adds	r3, r7, #4
 800d114:	2200      	movs	r2, #0
 800d116:	4619      	mov	r1, r3
 800d118:	4807      	ldr	r0, [pc, #28]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d11a:	f7f9 fbf7 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800d124:	f7ff fbca 	bl	800c8bc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800d128:	4803      	ldr	r0, [pc, #12]	; (800d138 <MX_TIM3_Init+0xe4>)
 800d12a:	f000 f82b 	bl	800d184 <HAL_TIM_MspPostInit>

}
 800d12e:	bf00      	nop
 800d130:	3738      	adds	r7, #56	; 0x38
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	20000bc4 	.word	0x20000bc4
 800d13c:	40000400 	.word	0x40000400

0800d140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a0b      	ldr	r2, [pc, #44]	; (800d17c <HAL_TIM_Base_MspInit+0x3c>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d10d      	bne.n	800d16e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d152:	2300      	movs	r3, #0
 800d154:	60fb      	str	r3, [r7, #12]
 800d156:	4b0a      	ldr	r3, [pc, #40]	; (800d180 <HAL_TIM_Base_MspInit+0x40>)
 800d158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15a:	4a09      	ldr	r2, [pc, #36]	; (800d180 <HAL_TIM_Base_MspInit+0x40>)
 800d15c:	f043 0302 	orr.w	r3, r3, #2
 800d160:	6413      	str	r3, [r2, #64]	; 0x40
 800d162:	4b07      	ldr	r3, [pc, #28]	; (800d180 <HAL_TIM_Base_MspInit+0x40>)
 800d164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d166:	f003 0302 	and.w	r3, r3, #2
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800d16e:	bf00      	nop
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	40000400 	.word	0x40000400
 800d180:	40023800 	.word	0x40023800

0800d184 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b088      	sub	sp, #32
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d18c:	f107 030c 	add.w	r3, r7, #12
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	605a      	str	r2, [r3, #4]
 800d196:	609a      	str	r2, [r3, #8]
 800d198:	60da      	str	r2, [r3, #12]
 800d19a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a12      	ldr	r2, [pc, #72]	; (800d1ec <HAL_TIM_MspPostInit+0x68>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d11d      	bne.n	800d1e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60bb      	str	r3, [r7, #8]
 800d1aa:	4b11      	ldr	r3, [pc, #68]	; (800d1f0 <HAL_TIM_MspPostInit+0x6c>)
 800d1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ae:	4a10      	ldr	r2, [pc, #64]	; (800d1f0 <HAL_TIM_MspPostInit+0x6c>)
 800d1b0:	f043 0301 	orr.w	r3, r3, #1
 800d1b4:	6313      	str	r3, [r2, #48]	; 0x30
 800d1b6:	4b0e      	ldr	r3, [pc, #56]	; (800d1f0 <HAL_TIM_MspPostInit+0x6c>)
 800d1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	60bb      	str	r3, [r7, #8]
 800d1c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d1c2:	2340      	movs	r3, #64	; 0x40
 800d1c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1d6:	f107 030c 	add.w	r3, r7, #12
 800d1da:	4619      	mov	r1, r3
 800d1dc:	4805      	ldr	r0, [pc, #20]	; (800d1f4 <HAL_TIM_MspPostInit+0x70>)
 800d1de:	f7f5 fa39 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d1e2:	bf00      	nop
 800d1e4:	3720      	adds	r7, #32
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	40000400 	.word	0x40000400
 800d1f0:	40023800 	.word	0x40023800
 800d1f4:	40020000 	.word	0x40020000

0800d1f8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800d1fc:	4b11      	ldr	r3, [pc, #68]	; (800d244 <MX_USART2_UART_Init+0x4c>)
 800d1fe:	4a12      	ldr	r2, [pc, #72]	; (800d248 <MX_USART2_UART_Init+0x50>)
 800d200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d202:	4b10      	ldr	r3, [pc, #64]	; (800d244 <MX_USART2_UART_Init+0x4c>)
 800d204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d20a:	4b0e      	ldr	r3, [pc, #56]	; (800d244 <MX_USART2_UART_Init+0x4c>)
 800d20c:	2200      	movs	r2, #0
 800d20e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d210:	4b0c      	ldr	r3, [pc, #48]	; (800d244 <MX_USART2_UART_Init+0x4c>)
 800d212:	2200      	movs	r2, #0
 800d214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d216:	4b0b      	ldr	r3, [pc, #44]	; (800d244 <MX_USART2_UART_Init+0x4c>)
 800d218:	2200      	movs	r2, #0
 800d21a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d21c:	4b09      	ldr	r3, [pc, #36]	; (800d244 <MX_USART2_UART_Init+0x4c>)
 800d21e:	220c      	movs	r2, #12
 800d220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d222:	4b08      	ldr	r3, [pc, #32]	; (800d244 <MX_USART2_UART_Init+0x4c>)
 800d224:	2200      	movs	r2, #0
 800d226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d228:	4b06      	ldr	r3, [pc, #24]	; (800d244 <MX_USART2_UART_Init+0x4c>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d22e:	4805      	ldr	r0, [pc, #20]	; (800d244 <MX_USART2_UART_Init+0x4c>)
 800d230:	f7fa fca4 	bl	8007b7c <HAL_UART_Init>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d23a:	f7ff fb3f 	bl	800c8bc <Error_Handler>
  }

}
 800d23e:	bf00      	nop
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	20000cc4 	.word	0x20000cc4
 800d248:	40004400 	.word	0x40004400

0800d24c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08a      	sub	sp, #40	; 0x28
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d254:	f107 0314 	add.w	r3, r7, #20
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	605a      	str	r2, [r3, #4]
 800d25e:	609a      	str	r2, [r3, #8]
 800d260:	60da      	str	r2, [r3, #12]
 800d262:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a4b      	ldr	r2, [pc, #300]	; (800d398 <HAL_UART_MspInit+0x14c>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	f040 8090 	bne.w	800d390 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800d270:	2300      	movs	r3, #0
 800d272:	613b      	str	r3, [r7, #16]
 800d274:	4b49      	ldr	r3, [pc, #292]	; (800d39c <HAL_UART_MspInit+0x150>)
 800d276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d278:	4a48      	ldr	r2, [pc, #288]	; (800d39c <HAL_UART_MspInit+0x150>)
 800d27a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d27e:	6413      	str	r3, [r2, #64]	; 0x40
 800d280:	4b46      	ldr	r3, [pc, #280]	; (800d39c <HAL_UART_MspInit+0x150>)
 800d282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d288:	613b      	str	r3, [r7, #16]
 800d28a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d28c:	2300      	movs	r3, #0
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	4b42      	ldr	r3, [pc, #264]	; (800d39c <HAL_UART_MspInit+0x150>)
 800d292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d294:	4a41      	ldr	r2, [pc, #260]	; (800d39c <HAL_UART_MspInit+0x150>)
 800d296:	f043 0301 	orr.w	r3, r3, #1
 800d29a:	6313      	str	r3, [r2, #48]	; 0x30
 800d29c:	4b3f      	ldr	r3, [pc, #252]	; (800d39c <HAL_UART_MspInit+0x150>)
 800d29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	60fb      	str	r3, [r7, #12]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800d2a8:	230c      	movs	r3, #12
 800d2aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2ac:	2302      	movs	r3, #2
 800d2ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d2b8:	2307      	movs	r3, #7
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2bc:	f107 0314 	add.w	r3, r7, #20
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	4837      	ldr	r0, [pc, #220]	; (800d3a0 <HAL_UART_MspInit+0x154>)
 800d2c4:	f7f5 f9c6 	bl	8002654 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800d2c8:	4b36      	ldr	r3, [pc, #216]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d2ca:	4a37      	ldr	r2, [pc, #220]	; (800d3a8 <HAL_UART_MspInit+0x15c>)
 800d2cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800d2ce:	4b35      	ldr	r3, [pc, #212]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d2d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d2d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d2d6:	4b33      	ldr	r3, [pc, #204]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d2dc:	4b31      	ldr	r3, [pc, #196]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d2e2:	4b30      	ldr	r3, [pc, #192]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d2e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d2e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d2ea:	4b2e      	ldr	r3, [pc, #184]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d2f0:	4b2c      	ldr	r3, [pc, #176]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800d2f6:	4b2b      	ldr	r3, [pc, #172]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d2fc:	4b29      	ldr	r3, [pc, #164]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d302:	4b28      	ldr	r3, [pc, #160]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d304:	2200      	movs	r2, #0
 800d306:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800d308:	4826      	ldr	r0, [pc, #152]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d30a:	f7f3 ff87 	bl	800121c <HAL_DMA_Init>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800d314:	f7ff fad2 	bl	800c8bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	4a22      	ldr	r2, [pc, #136]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d31c:	635a      	str	r2, [r3, #52]	; 0x34
 800d31e:	4a21      	ldr	r2, [pc, #132]	; (800d3a4 <HAL_UART_MspInit+0x158>)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800d324:	4b21      	ldr	r3, [pc, #132]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d326:	4a22      	ldr	r2, [pc, #136]	; (800d3b0 <HAL_UART_MspInit+0x164>)
 800d328:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800d32a:	4b20      	ldr	r3, [pc, #128]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d32c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d330:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d332:	4b1e      	ldr	r3, [pc, #120]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d334:	2240      	movs	r2, #64	; 0x40
 800d336:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d338:	4b1c      	ldr	r3, [pc, #112]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d33a:	2200      	movs	r2, #0
 800d33c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d33e:	4b1b      	ldr	r3, [pc, #108]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d344:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d346:	4b19      	ldr	r3, [pc, #100]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d348:	2200      	movs	r2, #0
 800d34a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d34c:	4b17      	ldr	r3, [pc, #92]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d34e:	2200      	movs	r2, #0
 800d350:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800d352:	4b16      	ldr	r3, [pc, #88]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d354:	2200      	movs	r2, #0
 800d356:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d358:	4b14      	ldr	r3, [pc, #80]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d35a:	2200      	movs	r2, #0
 800d35c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d35e:	4b13      	ldr	r3, [pc, #76]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d360:	2200      	movs	r2, #0
 800d362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800d364:	4811      	ldr	r0, [pc, #68]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d366:	f7f3 ff59 	bl	800121c <HAL_DMA_Init>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800d370:	f7ff faa4 	bl	800c8bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a0d      	ldr	r2, [pc, #52]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d378:	631a      	str	r2, [r3, #48]	; 0x30
 800d37a:	4a0c      	ldr	r2, [pc, #48]	; (800d3ac <HAL_UART_MspInit+0x160>)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800d380:	2200      	movs	r2, #0
 800d382:	2105      	movs	r1, #5
 800d384:	2026      	movs	r0, #38	; 0x26
 800d386:	f7f3 fea7 	bl	80010d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d38a:	2026      	movs	r0, #38	; 0x26
 800d38c:	f7f3 fed0 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800d390:	bf00      	nop
 800d392:	3728      	adds	r7, #40	; 0x28
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	40004400 	.word	0x40004400
 800d39c:	40023800 	.word	0x40023800
 800d3a0:	40020000 	.word	0x40020000
 800d3a4:	20000c04 	.word	0x20000c04
 800d3a8:	40026088 	.word	0x40026088
 800d3ac:	20000c64 	.word	0x20000c64
 800d3b0:	400260a0 	.word	0x400260a0

0800d3b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800d3b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d3ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d3b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d3ba:	e003      	b.n	800d3c4 <LoopCopyDataInit>

0800d3bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d3bc:	4b0c      	ldr	r3, [pc, #48]	; (800d3f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d3be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d3c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d3c2:	3104      	adds	r1, #4

0800d3c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d3c4:	480b      	ldr	r0, [pc, #44]	; (800d3f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d3c6:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d3c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d3ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d3cc:	d3f6      	bcc.n	800d3bc <CopyDataInit>
  ldr  r2, =_sbss
 800d3ce:	4a0b      	ldr	r2, [pc, #44]	; (800d3fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d3d0:	e002      	b.n	800d3d8 <LoopFillZerobss>

0800d3d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d3d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d3d4:	f842 3b04 	str.w	r3, [r2], #4

0800d3d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d3d8:	4b09      	ldr	r3, [pc, #36]	; (800d400 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d3da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d3dc:	d3f9      	bcc.n	800d3d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d3de:	f7ff fe23 	bl	800d028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d3e2:	f000 f815 	bl	800d410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d3e6:	f7ff f999 	bl	800c71c <main>
  bx  lr    
 800d3ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800d3ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d3f0:	08010378 	.word	0x08010378
  ldr  r0, =_sdata
 800d3f4:	20000080 	.word	0x20000080
  ldr  r3, =_edata
 800d3f8:	20000264 	.word	0x20000264
  ldr  r2, =_sbss
 800d3fc:	20000264 	.word	0x20000264
  ldr  r3, = _ebss
 800d400:	20000d04 	.word	0x20000d04

0800d404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d404:	e7fe      	b.n	800d404 <ADC_IRQHandler>

0800d406 <atoi>:
 800d406:	220a      	movs	r2, #10
 800d408:	2100      	movs	r1, #0
 800d40a:	f000 becf 	b.w	800e1ac <strtol>
	...

0800d410 <__libc_init_array>:
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	4e0d      	ldr	r6, [pc, #52]	; (800d448 <__libc_init_array+0x38>)
 800d414:	4c0d      	ldr	r4, [pc, #52]	; (800d44c <__libc_init_array+0x3c>)
 800d416:	1ba4      	subs	r4, r4, r6
 800d418:	10a4      	asrs	r4, r4, #2
 800d41a:	2500      	movs	r5, #0
 800d41c:	42a5      	cmp	r5, r4
 800d41e:	d109      	bne.n	800d434 <__libc_init_array+0x24>
 800d420:	4e0b      	ldr	r6, [pc, #44]	; (800d450 <__libc_init_array+0x40>)
 800d422:	4c0c      	ldr	r4, [pc, #48]	; (800d454 <__libc_init_array+0x44>)
 800d424:	f002 f9d0 	bl	800f7c8 <_init>
 800d428:	1ba4      	subs	r4, r4, r6
 800d42a:	10a4      	asrs	r4, r4, #2
 800d42c:	2500      	movs	r5, #0
 800d42e:	42a5      	cmp	r5, r4
 800d430:	d105      	bne.n	800d43e <__libc_init_array+0x2e>
 800d432:	bd70      	pop	{r4, r5, r6, pc}
 800d434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d438:	4798      	blx	r3
 800d43a:	3501      	adds	r5, #1
 800d43c:	e7ee      	b.n	800d41c <__libc_init_array+0xc>
 800d43e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d442:	4798      	blx	r3
 800d444:	3501      	adds	r5, #1
 800d446:	e7f2      	b.n	800d42e <__libc_init_array+0x1e>
 800d448:	08010370 	.word	0x08010370
 800d44c:	08010370 	.word	0x08010370
 800d450:	08010370 	.word	0x08010370
 800d454:	08010374 	.word	0x08010374

0800d458 <malloc>:
 800d458:	4b02      	ldr	r3, [pc, #8]	; (800d464 <malloc+0xc>)
 800d45a:	4601      	mov	r1, r0
 800d45c:	6818      	ldr	r0, [r3, #0]
 800d45e:	f000 b86d 	b.w	800d53c <_malloc_r>
 800d462:	bf00      	nop
 800d464:	20000094 	.word	0x20000094

0800d468 <free>:
 800d468:	4b02      	ldr	r3, [pc, #8]	; (800d474 <free+0xc>)
 800d46a:	4601      	mov	r1, r0
 800d46c:	6818      	ldr	r0, [r3, #0]
 800d46e:	f000 b817 	b.w	800d4a0 <_free_r>
 800d472:	bf00      	nop
 800d474:	20000094 	.word	0x20000094

0800d478 <memcpy>:
 800d478:	b510      	push	{r4, lr}
 800d47a:	1e43      	subs	r3, r0, #1
 800d47c:	440a      	add	r2, r1
 800d47e:	4291      	cmp	r1, r2
 800d480:	d100      	bne.n	800d484 <memcpy+0xc>
 800d482:	bd10      	pop	{r4, pc}
 800d484:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d488:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d48c:	e7f7      	b.n	800d47e <memcpy+0x6>

0800d48e <memset>:
 800d48e:	4402      	add	r2, r0
 800d490:	4603      	mov	r3, r0
 800d492:	4293      	cmp	r3, r2
 800d494:	d100      	bne.n	800d498 <memset+0xa>
 800d496:	4770      	bx	lr
 800d498:	f803 1b01 	strb.w	r1, [r3], #1
 800d49c:	e7f9      	b.n	800d492 <memset+0x4>
	...

0800d4a0 <_free_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4605      	mov	r5, r0
 800d4a4:	2900      	cmp	r1, #0
 800d4a6:	d045      	beq.n	800d534 <_free_r+0x94>
 800d4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ac:	1f0c      	subs	r4, r1, #4
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bfb8      	it	lt
 800d4b2:	18e4      	addlt	r4, r4, r3
 800d4b4:	f7fd fc78 	bl	800ada8 <__malloc_lock>
 800d4b8:	4a1f      	ldr	r2, [pc, #124]	; (800d538 <_free_r+0x98>)
 800d4ba:	6813      	ldr	r3, [r2, #0]
 800d4bc:	4610      	mov	r0, r2
 800d4be:	b933      	cbnz	r3, 800d4ce <_free_r+0x2e>
 800d4c0:	6063      	str	r3, [r4, #4]
 800d4c2:	6014      	str	r4, [r2, #0]
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ca:	f7fd bc95 	b.w	800adf8 <__malloc_unlock>
 800d4ce:	42a3      	cmp	r3, r4
 800d4d0:	d90c      	bls.n	800d4ec <_free_r+0x4c>
 800d4d2:	6821      	ldr	r1, [r4, #0]
 800d4d4:	1862      	adds	r2, r4, r1
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	bf04      	itt	eq
 800d4da:	681a      	ldreq	r2, [r3, #0]
 800d4dc:	685b      	ldreq	r3, [r3, #4]
 800d4de:	6063      	str	r3, [r4, #4]
 800d4e0:	bf04      	itt	eq
 800d4e2:	1852      	addeq	r2, r2, r1
 800d4e4:	6022      	streq	r2, [r4, #0]
 800d4e6:	6004      	str	r4, [r0, #0]
 800d4e8:	e7ec      	b.n	800d4c4 <_free_r+0x24>
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	685a      	ldr	r2, [r3, #4]
 800d4ee:	b10a      	cbz	r2, 800d4f4 <_free_r+0x54>
 800d4f0:	42a2      	cmp	r2, r4
 800d4f2:	d9fa      	bls.n	800d4ea <_free_r+0x4a>
 800d4f4:	6819      	ldr	r1, [r3, #0]
 800d4f6:	1858      	adds	r0, r3, r1
 800d4f8:	42a0      	cmp	r0, r4
 800d4fa:	d10b      	bne.n	800d514 <_free_r+0x74>
 800d4fc:	6820      	ldr	r0, [r4, #0]
 800d4fe:	4401      	add	r1, r0
 800d500:	1858      	adds	r0, r3, r1
 800d502:	4282      	cmp	r2, r0
 800d504:	6019      	str	r1, [r3, #0]
 800d506:	d1dd      	bne.n	800d4c4 <_free_r+0x24>
 800d508:	6810      	ldr	r0, [r2, #0]
 800d50a:	6852      	ldr	r2, [r2, #4]
 800d50c:	605a      	str	r2, [r3, #4]
 800d50e:	4401      	add	r1, r0
 800d510:	6019      	str	r1, [r3, #0]
 800d512:	e7d7      	b.n	800d4c4 <_free_r+0x24>
 800d514:	d902      	bls.n	800d51c <_free_r+0x7c>
 800d516:	230c      	movs	r3, #12
 800d518:	602b      	str	r3, [r5, #0]
 800d51a:	e7d3      	b.n	800d4c4 <_free_r+0x24>
 800d51c:	6820      	ldr	r0, [r4, #0]
 800d51e:	1821      	adds	r1, r4, r0
 800d520:	428a      	cmp	r2, r1
 800d522:	bf04      	itt	eq
 800d524:	6811      	ldreq	r1, [r2, #0]
 800d526:	6852      	ldreq	r2, [r2, #4]
 800d528:	6062      	str	r2, [r4, #4]
 800d52a:	bf04      	itt	eq
 800d52c:	1809      	addeq	r1, r1, r0
 800d52e:	6021      	streq	r1, [r4, #0]
 800d530:	605c      	str	r4, [r3, #4]
 800d532:	e7c7      	b.n	800d4c4 <_free_r+0x24>
 800d534:	bd38      	pop	{r3, r4, r5, pc}
 800d536:	bf00      	nop
 800d538:	20000acc 	.word	0x20000acc

0800d53c <_malloc_r>:
 800d53c:	b570      	push	{r4, r5, r6, lr}
 800d53e:	1ccd      	adds	r5, r1, #3
 800d540:	f025 0503 	bic.w	r5, r5, #3
 800d544:	3508      	adds	r5, #8
 800d546:	2d0c      	cmp	r5, #12
 800d548:	bf38      	it	cc
 800d54a:	250c      	movcc	r5, #12
 800d54c:	2d00      	cmp	r5, #0
 800d54e:	4606      	mov	r6, r0
 800d550:	db01      	blt.n	800d556 <_malloc_r+0x1a>
 800d552:	42a9      	cmp	r1, r5
 800d554:	d903      	bls.n	800d55e <_malloc_r+0x22>
 800d556:	230c      	movs	r3, #12
 800d558:	6033      	str	r3, [r6, #0]
 800d55a:	2000      	movs	r0, #0
 800d55c:	bd70      	pop	{r4, r5, r6, pc}
 800d55e:	f7fd fc23 	bl	800ada8 <__malloc_lock>
 800d562:	4a21      	ldr	r2, [pc, #132]	; (800d5e8 <_malloc_r+0xac>)
 800d564:	6814      	ldr	r4, [r2, #0]
 800d566:	4621      	mov	r1, r4
 800d568:	b991      	cbnz	r1, 800d590 <_malloc_r+0x54>
 800d56a:	4c20      	ldr	r4, [pc, #128]	; (800d5ec <_malloc_r+0xb0>)
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	b91b      	cbnz	r3, 800d578 <_malloc_r+0x3c>
 800d570:	4630      	mov	r0, r6
 800d572:	f7fd fbbd 	bl	800acf0 <_sbrk_r>
 800d576:	6020      	str	r0, [r4, #0]
 800d578:	4629      	mov	r1, r5
 800d57a:	4630      	mov	r0, r6
 800d57c:	f7fd fbb8 	bl	800acf0 <_sbrk_r>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d124      	bne.n	800d5ce <_malloc_r+0x92>
 800d584:	230c      	movs	r3, #12
 800d586:	6033      	str	r3, [r6, #0]
 800d588:	4630      	mov	r0, r6
 800d58a:	f7fd fc35 	bl	800adf8 <__malloc_unlock>
 800d58e:	e7e4      	b.n	800d55a <_malloc_r+0x1e>
 800d590:	680b      	ldr	r3, [r1, #0]
 800d592:	1b5b      	subs	r3, r3, r5
 800d594:	d418      	bmi.n	800d5c8 <_malloc_r+0x8c>
 800d596:	2b0b      	cmp	r3, #11
 800d598:	d90f      	bls.n	800d5ba <_malloc_r+0x7e>
 800d59a:	600b      	str	r3, [r1, #0]
 800d59c:	50cd      	str	r5, [r1, r3]
 800d59e:	18cc      	adds	r4, r1, r3
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f7fd fc29 	bl	800adf8 <__malloc_unlock>
 800d5a6:	f104 000b 	add.w	r0, r4, #11
 800d5aa:	1d23      	adds	r3, r4, #4
 800d5ac:	f020 0007 	bic.w	r0, r0, #7
 800d5b0:	1ac3      	subs	r3, r0, r3
 800d5b2:	d0d3      	beq.n	800d55c <_malloc_r+0x20>
 800d5b4:	425a      	negs	r2, r3
 800d5b6:	50e2      	str	r2, [r4, r3]
 800d5b8:	e7d0      	b.n	800d55c <_malloc_r+0x20>
 800d5ba:	428c      	cmp	r4, r1
 800d5bc:	684b      	ldr	r3, [r1, #4]
 800d5be:	bf16      	itet	ne
 800d5c0:	6063      	strne	r3, [r4, #4]
 800d5c2:	6013      	streq	r3, [r2, #0]
 800d5c4:	460c      	movne	r4, r1
 800d5c6:	e7eb      	b.n	800d5a0 <_malloc_r+0x64>
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	6849      	ldr	r1, [r1, #4]
 800d5cc:	e7cc      	b.n	800d568 <_malloc_r+0x2c>
 800d5ce:	1cc4      	adds	r4, r0, #3
 800d5d0:	f024 0403 	bic.w	r4, r4, #3
 800d5d4:	42a0      	cmp	r0, r4
 800d5d6:	d005      	beq.n	800d5e4 <_malloc_r+0xa8>
 800d5d8:	1a21      	subs	r1, r4, r0
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f7fd fb88 	bl	800acf0 <_sbrk_r>
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	d0cf      	beq.n	800d584 <_malloc_r+0x48>
 800d5e4:	6025      	str	r5, [r4, #0]
 800d5e6:	e7db      	b.n	800d5a0 <_malloc_r+0x64>
 800d5e8:	20000acc 	.word	0x20000acc
 800d5ec:	20000ad0 	.word	0x20000ad0

0800d5f0 <__cvt>:
 800d5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f4:	ec55 4b10 	vmov	r4, r5, d0
 800d5f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d5fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d5fe:	2d00      	cmp	r5, #0
 800d600:	460e      	mov	r6, r1
 800d602:	4691      	mov	r9, r2
 800d604:	4619      	mov	r1, r3
 800d606:	bfb8      	it	lt
 800d608:	4622      	movlt	r2, r4
 800d60a:	462b      	mov	r3, r5
 800d60c:	f027 0720 	bic.w	r7, r7, #32
 800d610:	bfbb      	ittet	lt
 800d612:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d616:	461d      	movlt	r5, r3
 800d618:	2300      	movge	r3, #0
 800d61a:	232d      	movlt	r3, #45	; 0x2d
 800d61c:	bfb8      	it	lt
 800d61e:	4614      	movlt	r4, r2
 800d620:	2f46      	cmp	r7, #70	; 0x46
 800d622:	700b      	strb	r3, [r1, #0]
 800d624:	d004      	beq.n	800d630 <__cvt+0x40>
 800d626:	2f45      	cmp	r7, #69	; 0x45
 800d628:	d100      	bne.n	800d62c <__cvt+0x3c>
 800d62a:	3601      	adds	r6, #1
 800d62c:	2102      	movs	r1, #2
 800d62e:	e000      	b.n	800d632 <__cvt+0x42>
 800d630:	2103      	movs	r1, #3
 800d632:	ab03      	add	r3, sp, #12
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	ab02      	add	r3, sp, #8
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	4632      	mov	r2, r6
 800d63c:	4653      	mov	r3, sl
 800d63e:	ec45 4b10 	vmov	d0, r4, r5
 800d642:	f000 fe55 	bl	800e2f0 <_dtoa_r>
 800d646:	2f47      	cmp	r7, #71	; 0x47
 800d648:	4680      	mov	r8, r0
 800d64a:	d102      	bne.n	800d652 <__cvt+0x62>
 800d64c:	f019 0f01 	tst.w	r9, #1
 800d650:	d026      	beq.n	800d6a0 <__cvt+0xb0>
 800d652:	2f46      	cmp	r7, #70	; 0x46
 800d654:	eb08 0906 	add.w	r9, r8, r6
 800d658:	d111      	bne.n	800d67e <__cvt+0x8e>
 800d65a:	f898 3000 	ldrb.w	r3, [r8]
 800d65e:	2b30      	cmp	r3, #48	; 0x30
 800d660:	d10a      	bne.n	800d678 <__cvt+0x88>
 800d662:	2200      	movs	r2, #0
 800d664:	2300      	movs	r3, #0
 800d666:	4620      	mov	r0, r4
 800d668:	4629      	mov	r1, r5
 800d66a:	f7f3 fa35 	bl	8000ad8 <__aeabi_dcmpeq>
 800d66e:	b918      	cbnz	r0, 800d678 <__cvt+0x88>
 800d670:	f1c6 0601 	rsb	r6, r6, #1
 800d674:	f8ca 6000 	str.w	r6, [sl]
 800d678:	f8da 3000 	ldr.w	r3, [sl]
 800d67c:	4499      	add	r9, r3
 800d67e:	2200      	movs	r2, #0
 800d680:	2300      	movs	r3, #0
 800d682:	4620      	mov	r0, r4
 800d684:	4629      	mov	r1, r5
 800d686:	f7f3 fa27 	bl	8000ad8 <__aeabi_dcmpeq>
 800d68a:	b938      	cbnz	r0, 800d69c <__cvt+0xac>
 800d68c:	2230      	movs	r2, #48	; 0x30
 800d68e:	9b03      	ldr	r3, [sp, #12]
 800d690:	454b      	cmp	r3, r9
 800d692:	d205      	bcs.n	800d6a0 <__cvt+0xb0>
 800d694:	1c59      	adds	r1, r3, #1
 800d696:	9103      	str	r1, [sp, #12]
 800d698:	701a      	strb	r2, [r3, #0]
 800d69a:	e7f8      	b.n	800d68e <__cvt+0x9e>
 800d69c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6a0:	9b03      	ldr	r3, [sp, #12]
 800d6a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6a4:	eba3 0308 	sub.w	r3, r3, r8
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	6013      	str	r3, [r2, #0]
 800d6ac:	b004      	add	sp, #16
 800d6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d6b2 <__exponent>:
 800d6b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6b4:	2900      	cmp	r1, #0
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	bfba      	itte	lt
 800d6ba:	4249      	neglt	r1, r1
 800d6bc:	232d      	movlt	r3, #45	; 0x2d
 800d6be:	232b      	movge	r3, #43	; 0x2b
 800d6c0:	2909      	cmp	r1, #9
 800d6c2:	f804 2b02 	strb.w	r2, [r4], #2
 800d6c6:	7043      	strb	r3, [r0, #1]
 800d6c8:	dd20      	ble.n	800d70c <__exponent+0x5a>
 800d6ca:	f10d 0307 	add.w	r3, sp, #7
 800d6ce:	461f      	mov	r7, r3
 800d6d0:	260a      	movs	r6, #10
 800d6d2:	fb91 f5f6 	sdiv	r5, r1, r6
 800d6d6:	fb06 1115 	mls	r1, r6, r5, r1
 800d6da:	3130      	adds	r1, #48	; 0x30
 800d6dc:	2d09      	cmp	r5, #9
 800d6de:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d6e2:	f103 32ff 	add.w	r2, r3, #4294967295
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	dc09      	bgt.n	800d6fe <__exponent+0x4c>
 800d6ea:	3130      	adds	r1, #48	; 0x30
 800d6ec:	3b02      	subs	r3, #2
 800d6ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d6f2:	42bb      	cmp	r3, r7
 800d6f4:	4622      	mov	r2, r4
 800d6f6:	d304      	bcc.n	800d702 <__exponent+0x50>
 800d6f8:	1a10      	subs	r0, r2, r0
 800d6fa:	b003      	add	sp, #12
 800d6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6fe:	4613      	mov	r3, r2
 800d700:	e7e7      	b.n	800d6d2 <__exponent+0x20>
 800d702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d706:	f804 2b01 	strb.w	r2, [r4], #1
 800d70a:	e7f2      	b.n	800d6f2 <__exponent+0x40>
 800d70c:	2330      	movs	r3, #48	; 0x30
 800d70e:	4419      	add	r1, r3
 800d710:	7083      	strb	r3, [r0, #2]
 800d712:	1d02      	adds	r2, r0, #4
 800d714:	70c1      	strb	r1, [r0, #3]
 800d716:	e7ef      	b.n	800d6f8 <__exponent+0x46>

0800d718 <_printf_float>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	b08d      	sub	sp, #52	; 0x34
 800d71e:	460c      	mov	r4, r1
 800d720:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d724:	4616      	mov	r6, r2
 800d726:	461f      	mov	r7, r3
 800d728:	4605      	mov	r5, r0
 800d72a:	f001 fb9d 	bl	800ee68 <_localeconv_r>
 800d72e:	6803      	ldr	r3, [r0, #0]
 800d730:	9304      	str	r3, [sp, #16]
 800d732:	4618      	mov	r0, r3
 800d734:	f7f2 fd54 	bl	80001e0 <strlen>
 800d738:	2300      	movs	r3, #0
 800d73a:	930a      	str	r3, [sp, #40]	; 0x28
 800d73c:	f8d8 3000 	ldr.w	r3, [r8]
 800d740:	9005      	str	r0, [sp, #20]
 800d742:	3307      	adds	r3, #7
 800d744:	f023 0307 	bic.w	r3, r3, #7
 800d748:	f103 0208 	add.w	r2, r3, #8
 800d74c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d750:	f8d4 b000 	ldr.w	fp, [r4]
 800d754:	f8c8 2000 	str.w	r2, [r8]
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d760:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d764:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d768:	9307      	str	r3, [sp, #28]
 800d76a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d76e:	f04f 32ff 	mov.w	r2, #4294967295
 800d772:	4ba7      	ldr	r3, [pc, #668]	; (800da10 <_printf_float+0x2f8>)
 800d774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d778:	f7f3 f9e0 	bl	8000b3c <__aeabi_dcmpun>
 800d77c:	bb70      	cbnz	r0, 800d7dc <_printf_float+0xc4>
 800d77e:	f04f 32ff 	mov.w	r2, #4294967295
 800d782:	4ba3      	ldr	r3, [pc, #652]	; (800da10 <_printf_float+0x2f8>)
 800d784:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d788:	f7f3 f9ba 	bl	8000b00 <__aeabi_dcmple>
 800d78c:	bb30      	cbnz	r0, 800d7dc <_printf_float+0xc4>
 800d78e:	2200      	movs	r2, #0
 800d790:	2300      	movs	r3, #0
 800d792:	4640      	mov	r0, r8
 800d794:	4649      	mov	r1, r9
 800d796:	f7f3 f9a9 	bl	8000aec <__aeabi_dcmplt>
 800d79a:	b110      	cbz	r0, 800d7a2 <_printf_float+0x8a>
 800d79c:	232d      	movs	r3, #45	; 0x2d
 800d79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7a2:	4a9c      	ldr	r2, [pc, #624]	; (800da14 <_printf_float+0x2fc>)
 800d7a4:	4b9c      	ldr	r3, [pc, #624]	; (800da18 <_printf_float+0x300>)
 800d7a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d7aa:	bf8c      	ite	hi
 800d7ac:	4690      	movhi	r8, r2
 800d7ae:	4698      	movls	r8, r3
 800d7b0:	2303      	movs	r3, #3
 800d7b2:	f02b 0204 	bic.w	r2, fp, #4
 800d7b6:	6123      	str	r3, [r4, #16]
 800d7b8:	6022      	str	r2, [r4, #0]
 800d7ba:	f04f 0900 	mov.w	r9, #0
 800d7be:	9700      	str	r7, [sp, #0]
 800d7c0:	4633      	mov	r3, r6
 800d7c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f000 f9e6 	bl	800db98 <_printf_common>
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	f040 808d 	bne.w	800d8ec <_printf_float+0x1d4>
 800d7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d6:	b00d      	add	sp, #52	; 0x34
 800d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7dc:	4642      	mov	r2, r8
 800d7de:	464b      	mov	r3, r9
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	f7f3 f9aa 	bl	8000b3c <__aeabi_dcmpun>
 800d7e8:	b110      	cbz	r0, 800d7f0 <_printf_float+0xd8>
 800d7ea:	4a8c      	ldr	r2, [pc, #560]	; (800da1c <_printf_float+0x304>)
 800d7ec:	4b8c      	ldr	r3, [pc, #560]	; (800da20 <_printf_float+0x308>)
 800d7ee:	e7da      	b.n	800d7a6 <_printf_float+0x8e>
 800d7f0:	6861      	ldr	r1, [r4, #4]
 800d7f2:	1c4b      	adds	r3, r1, #1
 800d7f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d7f8:	a80a      	add	r0, sp, #40	; 0x28
 800d7fa:	d13e      	bne.n	800d87a <_printf_float+0x162>
 800d7fc:	2306      	movs	r3, #6
 800d7fe:	6063      	str	r3, [r4, #4]
 800d800:	2300      	movs	r3, #0
 800d802:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d806:	ab09      	add	r3, sp, #36	; 0x24
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	ec49 8b10 	vmov	d0, r8, r9
 800d80e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d812:	6022      	str	r2, [r4, #0]
 800d814:	f8cd a004 	str.w	sl, [sp, #4]
 800d818:	6861      	ldr	r1, [r4, #4]
 800d81a:	4628      	mov	r0, r5
 800d81c:	f7ff fee8 	bl	800d5f0 <__cvt>
 800d820:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d824:	2b47      	cmp	r3, #71	; 0x47
 800d826:	4680      	mov	r8, r0
 800d828:	d109      	bne.n	800d83e <_printf_float+0x126>
 800d82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d82c:	1cd8      	adds	r0, r3, #3
 800d82e:	db02      	blt.n	800d836 <_printf_float+0x11e>
 800d830:	6862      	ldr	r2, [r4, #4]
 800d832:	4293      	cmp	r3, r2
 800d834:	dd47      	ble.n	800d8c6 <_printf_float+0x1ae>
 800d836:	f1aa 0a02 	sub.w	sl, sl, #2
 800d83a:	fa5f fa8a 	uxtb.w	sl, sl
 800d83e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d842:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d844:	d824      	bhi.n	800d890 <_printf_float+0x178>
 800d846:	3901      	subs	r1, #1
 800d848:	4652      	mov	r2, sl
 800d84a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d84e:	9109      	str	r1, [sp, #36]	; 0x24
 800d850:	f7ff ff2f 	bl	800d6b2 <__exponent>
 800d854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d856:	1813      	adds	r3, r2, r0
 800d858:	2a01      	cmp	r2, #1
 800d85a:	4681      	mov	r9, r0
 800d85c:	6123      	str	r3, [r4, #16]
 800d85e:	dc02      	bgt.n	800d866 <_printf_float+0x14e>
 800d860:	6822      	ldr	r2, [r4, #0]
 800d862:	07d1      	lsls	r1, r2, #31
 800d864:	d501      	bpl.n	800d86a <_printf_float+0x152>
 800d866:	3301      	adds	r3, #1
 800d868:	6123      	str	r3, [r4, #16]
 800d86a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d0a5      	beq.n	800d7be <_printf_float+0xa6>
 800d872:	232d      	movs	r3, #45	; 0x2d
 800d874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d878:	e7a1      	b.n	800d7be <_printf_float+0xa6>
 800d87a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d87e:	f000 8177 	beq.w	800db70 <_printf_float+0x458>
 800d882:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d886:	d1bb      	bne.n	800d800 <_printf_float+0xe8>
 800d888:	2900      	cmp	r1, #0
 800d88a:	d1b9      	bne.n	800d800 <_printf_float+0xe8>
 800d88c:	2301      	movs	r3, #1
 800d88e:	e7b6      	b.n	800d7fe <_printf_float+0xe6>
 800d890:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d894:	d119      	bne.n	800d8ca <_printf_float+0x1b2>
 800d896:	2900      	cmp	r1, #0
 800d898:	6863      	ldr	r3, [r4, #4]
 800d89a:	dd0c      	ble.n	800d8b6 <_printf_float+0x19e>
 800d89c:	6121      	str	r1, [r4, #16]
 800d89e:	b913      	cbnz	r3, 800d8a6 <_printf_float+0x18e>
 800d8a0:	6822      	ldr	r2, [r4, #0]
 800d8a2:	07d2      	lsls	r2, r2, #31
 800d8a4:	d502      	bpl.n	800d8ac <_printf_float+0x194>
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	440b      	add	r3, r1
 800d8aa:	6123      	str	r3, [r4, #16]
 800d8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ae:	65a3      	str	r3, [r4, #88]	; 0x58
 800d8b0:	f04f 0900 	mov.w	r9, #0
 800d8b4:	e7d9      	b.n	800d86a <_printf_float+0x152>
 800d8b6:	b913      	cbnz	r3, 800d8be <_printf_float+0x1a6>
 800d8b8:	6822      	ldr	r2, [r4, #0]
 800d8ba:	07d0      	lsls	r0, r2, #31
 800d8bc:	d501      	bpl.n	800d8c2 <_printf_float+0x1aa>
 800d8be:	3302      	adds	r3, #2
 800d8c0:	e7f3      	b.n	800d8aa <_printf_float+0x192>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e7f1      	b.n	800d8aa <_printf_float+0x192>
 800d8c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d8ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	db05      	blt.n	800d8de <_printf_float+0x1c6>
 800d8d2:	6822      	ldr	r2, [r4, #0]
 800d8d4:	6123      	str	r3, [r4, #16]
 800d8d6:	07d1      	lsls	r1, r2, #31
 800d8d8:	d5e8      	bpl.n	800d8ac <_printf_float+0x194>
 800d8da:	3301      	adds	r3, #1
 800d8dc:	e7e5      	b.n	800d8aa <_printf_float+0x192>
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	bfd4      	ite	le
 800d8e2:	f1c3 0302 	rsble	r3, r3, #2
 800d8e6:	2301      	movgt	r3, #1
 800d8e8:	4413      	add	r3, r2
 800d8ea:	e7de      	b.n	800d8aa <_printf_float+0x192>
 800d8ec:	6823      	ldr	r3, [r4, #0]
 800d8ee:	055a      	lsls	r2, r3, #21
 800d8f0:	d407      	bmi.n	800d902 <_printf_float+0x1ea>
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	4642      	mov	r2, r8
 800d8f6:	4631      	mov	r1, r6
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	47b8      	blx	r7
 800d8fc:	3001      	adds	r0, #1
 800d8fe:	d12b      	bne.n	800d958 <_printf_float+0x240>
 800d900:	e767      	b.n	800d7d2 <_printf_float+0xba>
 800d902:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d906:	f240 80dc 	bls.w	800dac2 <_printf_float+0x3aa>
 800d90a:	2200      	movs	r2, #0
 800d90c:	2300      	movs	r3, #0
 800d90e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d912:	f7f3 f8e1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d916:	2800      	cmp	r0, #0
 800d918:	d033      	beq.n	800d982 <_printf_float+0x26a>
 800d91a:	2301      	movs	r3, #1
 800d91c:	4a41      	ldr	r2, [pc, #260]	; (800da24 <_printf_float+0x30c>)
 800d91e:	4631      	mov	r1, r6
 800d920:	4628      	mov	r0, r5
 800d922:	47b8      	blx	r7
 800d924:	3001      	adds	r0, #1
 800d926:	f43f af54 	beq.w	800d7d2 <_printf_float+0xba>
 800d92a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d92e:	429a      	cmp	r2, r3
 800d930:	db02      	blt.n	800d938 <_printf_float+0x220>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	07d8      	lsls	r0, r3, #31
 800d936:	d50f      	bpl.n	800d958 <_printf_float+0x240>
 800d938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d93c:	4631      	mov	r1, r6
 800d93e:	4628      	mov	r0, r5
 800d940:	47b8      	blx	r7
 800d942:	3001      	adds	r0, #1
 800d944:	f43f af45 	beq.w	800d7d2 <_printf_float+0xba>
 800d948:	f04f 0800 	mov.w	r8, #0
 800d94c:	f104 091a 	add.w	r9, r4, #26
 800d950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d952:	3b01      	subs	r3, #1
 800d954:	4543      	cmp	r3, r8
 800d956:	dc09      	bgt.n	800d96c <_printf_float+0x254>
 800d958:	6823      	ldr	r3, [r4, #0]
 800d95a:	079b      	lsls	r3, r3, #30
 800d95c:	f100 8103 	bmi.w	800db66 <_printf_float+0x44e>
 800d960:	68e0      	ldr	r0, [r4, #12]
 800d962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d964:	4298      	cmp	r0, r3
 800d966:	bfb8      	it	lt
 800d968:	4618      	movlt	r0, r3
 800d96a:	e734      	b.n	800d7d6 <_printf_float+0xbe>
 800d96c:	2301      	movs	r3, #1
 800d96e:	464a      	mov	r2, r9
 800d970:	4631      	mov	r1, r6
 800d972:	4628      	mov	r0, r5
 800d974:	47b8      	blx	r7
 800d976:	3001      	adds	r0, #1
 800d978:	f43f af2b 	beq.w	800d7d2 <_printf_float+0xba>
 800d97c:	f108 0801 	add.w	r8, r8, #1
 800d980:	e7e6      	b.n	800d950 <_printf_float+0x238>
 800d982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d984:	2b00      	cmp	r3, #0
 800d986:	dc2b      	bgt.n	800d9e0 <_printf_float+0x2c8>
 800d988:	2301      	movs	r3, #1
 800d98a:	4a26      	ldr	r2, [pc, #152]	; (800da24 <_printf_float+0x30c>)
 800d98c:	4631      	mov	r1, r6
 800d98e:	4628      	mov	r0, r5
 800d990:	47b8      	blx	r7
 800d992:	3001      	adds	r0, #1
 800d994:	f43f af1d 	beq.w	800d7d2 <_printf_float+0xba>
 800d998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d99a:	b923      	cbnz	r3, 800d9a6 <_printf_float+0x28e>
 800d99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d99e:	b913      	cbnz	r3, 800d9a6 <_printf_float+0x28e>
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	07d9      	lsls	r1, r3, #31
 800d9a4:	d5d8      	bpl.n	800d958 <_printf_float+0x240>
 800d9a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9aa:	4631      	mov	r1, r6
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	47b8      	blx	r7
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	f43f af0e 	beq.w	800d7d2 <_printf_float+0xba>
 800d9b6:	f04f 0900 	mov.w	r9, #0
 800d9ba:	f104 0a1a 	add.w	sl, r4, #26
 800d9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c0:	425b      	negs	r3, r3
 800d9c2:	454b      	cmp	r3, r9
 800d9c4:	dc01      	bgt.n	800d9ca <_printf_float+0x2b2>
 800d9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9c8:	e794      	b.n	800d8f4 <_printf_float+0x1dc>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	4652      	mov	r2, sl
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	47b8      	blx	r7
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	f43f aefc 	beq.w	800d7d2 <_printf_float+0xba>
 800d9da:	f109 0901 	add.w	r9, r9, #1
 800d9de:	e7ee      	b.n	800d9be <_printf_float+0x2a6>
 800d9e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	bfa8      	it	ge
 800d9e8:	461a      	movge	r2, r3
 800d9ea:	2a00      	cmp	r2, #0
 800d9ec:	4691      	mov	r9, r2
 800d9ee:	dd07      	ble.n	800da00 <_printf_float+0x2e8>
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4642      	mov	r2, r8
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	47b8      	blx	r7
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	f43f aee9 	beq.w	800d7d2 <_printf_float+0xba>
 800da00:	f104 031a 	add.w	r3, r4, #26
 800da04:	f04f 0b00 	mov.w	fp, #0
 800da08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da0c:	9306      	str	r3, [sp, #24]
 800da0e:	e015      	b.n	800da3c <_printf_float+0x324>
 800da10:	7fefffff 	.word	0x7fefffff
 800da14:	0801010c 	.word	0x0801010c
 800da18:	08010108 	.word	0x08010108
 800da1c:	08010114 	.word	0x08010114
 800da20:	08010110 	.word	0x08010110
 800da24:	08010118 	.word	0x08010118
 800da28:	2301      	movs	r3, #1
 800da2a:	9a06      	ldr	r2, [sp, #24]
 800da2c:	4631      	mov	r1, r6
 800da2e:	4628      	mov	r0, r5
 800da30:	47b8      	blx	r7
 800da32:	3001      	adds	r0, #1
 800da34:	f43f aecd 	beq.w	800d7d2 <_printf_float+0xba>
 800da38:	f10b 0b01 	add.w	fp, fp, #1
 800da3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800da40:	ebaa 0309 	sub.w	r3, sl, r9
 800da44:	455b      	cmp	r3, fp
 800da46:	dcef      	bgt.n	800da28 <_printf_float+0x310>
 800da48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da4c:	429a      	cmp	r2, r3
 800da4e:	44d0      	add	r8, sl
 800da50:	db15      	blt.n	800da7e <_printf_float+0x366>
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	07da      	lsls	r2, r3, #31
 800da56:	d412      	bmi.n	800da7e <_printf_float+0x366>
 800da58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da5c:	eba3 020a 	sub.w	r2, r3, sl
 800da60:	eba3 0a01 	sub.w	sl, r3, r1
 800da64:	4592      	cmp	sl, r2
 800da66:	bfa8      	it	ge
 800da68:	4692      	movge	sl, r2
 800da6a:	f1ba 0f00 	cmp.w	sl, #0
 800da6e:	dc0e      	bgt.n	800da8e <_printf_float+0x376>
 800da70:	f04f 0800 	mov.w	r8, #0
 800da74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da78:	f104 091a 	add.w	r9, r4, #26
 800da7c:	e019      	b.n	800dab2 <_printf_float+0x39a>
 800da7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da82:	4631      	mov	r1, r6
 800da84:	4628      	mov	r0, r5
 800da86:	47b8      	blx	r7
 800da88:	3001      	adds	r0, #1
 800da8a:	d1e5      	bne.n	800da58 <_printf_float+0x340>
 800da8c:	e6a1      	b.n	800d7d2 <_printf_float+0xba>
 800da8e:	4653      	mov	r3, sl
 800da90:	4642      	mov	r2, r8
 800da92:	4631      	mov	r1, r6
 800da94:	4628      	mov	r0, r5
 800da96:	47b8      	blx	r7
 800da98:	3001      	adds	r0, #1
 800da9a:	d1e9      	bne.n	800da70 <_printf_float+0x358>
 800da9c:	e699      	b.n	800d7d2 <_printf_float+0xba>
 800da9e:	2301      	movs	r3, #1
 800daa0:	464a      	mov	r2, r9
 800daa2:	4631      	mov	r1, r6
 800daa4:	4628      	mov	r0, r5
 800daa6:	47b8      	blx	r7
 800daa8:	3001      	adds	r0, #1
 800daaa:	f43f ae92 	beq.w	800d7d2 <_printf_float+0xba>
 800daae:	f108 0801 	add.w	r8, r8, #1
 800dab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dab6:	1a9b      	subs	r3, r3, r2
 800dab8:	eba3 030a 	sub.w	r3, r3, sl
 800dabc:	4543      	cmp	r3, r8
 800dabe:	dcee      	bgt.n	800da9e <_printf_float+0x386>
 800dac0:	e74a      	b.n	800d958 <_printf_float+0x240>
 800dac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dac4:	2a01      	cmp	r2, #1
 800dac6:	dc01      	bgt.n	800dacc <_printf_float+0x3b4>
 800dac8:	07db      	lsls	r3, r3, #31
 800daca:	d53a      	bpl.n	800db42 <_printf_float+0x42a>
 800dacc:	2301      	movs	r3, #1
 800dace:	4642      	mov	r2, r8
 800dad0:	4631      	mov	r1, r6
 800dad2:	4628      	mov	r0, r5
 800dad4:	47b8      	blx	r7
 800dad6:	3001      	adds	r0, #1
 800dad8:	f43f ae7b 	beq.w	800d7d2 <_printf_float+0xba>
 800dadc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dae0:	4631      	mov	r1, r6
 800dae2:	4628      	mov	r0, r5
 800dae4:	47b8      	blx	r7
 800dae6:	3001      	adds	r0, #1
 800dae8:	f108 0801 	add.w	r8, r8, #1
 800daec:	f43f ae71 	beq.w	800d7d2 <_printf_float+0xba>
 800daf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf2:	2200      	movs	r2, #0
 800daf4:	f103 3aff 	add.w	sl, r3, #4294967295
 800daf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dafc:	2300      	movs	r3, #0
 800dafe:	f7f2 ffeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800db02:	b9c8      	cbnz	r0, 800db38 <_printf_float+0x420>
 800db04:	4653      	mov	r3, sl
 800db06:	4642      	mov	r2, r8
 800db08:	4631      	mov	r1, r6
 800db0a:	4628      	mov	r0, r5
 800db0c:	47b8      	blx	r7
 800db0e:	3001      	adds	r0, #1
 800db10:	d10e      	bne.n	800db30 <_printf_float+0x418>
 800db12:	e65e      	b.n	800d7d2 <_printf_float+0xba>
 800db14:	2301      	movs	r3, #1
 800db16:	4652      	mov	r2, sl
 800db18:	4631      	mov	r1, r6
 800db1a:	4628      	mov	r0, r5
 800db1c:	47b8      	blx	r7
 800db1e:	3001      	adds	r0, #1
 800db20:	f43f ae57 	beq.w	800d7d2 <_printf_float+0xba>
 800db24:	f108 0801 	add.w	r8, r8, #1
 800db28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db2a:	3b01      	subs	r3, #1
 800db2c:	4543      	cmp	r3, r8
 800db2e:	dcf1      	bgt.n	800db14 <_printf_float+0x3fc>
 800db30:	464b      	mov	r3, r9
 800db32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db36:	e6de      	b.n	800d8f6 <_printf_float+0x1de>
 800db38:	f04f 0800 	mov.w	r8, #0
 800db3c:	f104 0a1a 	add.w	sl, r4, #26
 800db40:	e7f2      	b.n	800db28 <_printf_float+0x410>
 800db42:	2301      	movs	r3, #1
 800db44:	e7df      	b.n	800db06 <_printf_float+0x3ee>
 800db46:	2301      	movs	r3, #1
 800db48:	464a      	mov	r2, r9
 800db4a:	4631      	mov	r1, r6
 800db4c:	4628      	mov	r0, r5
 800db4e:	47b8      	blx	r7
 800db50:	3001      	adds	r0, #1
 800db52:	f43f ae3e 	beq.w	800d7d2 <_printf_float+0xba>
 800db56:	f108 0801 	add.w	r8, r8, #1
 800db5a:	68e3      	ldr	r3, [r4, #12]
 800db5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db5e:	1a9b      	subs	r3, r3, r2
 800db60:	4543      	cmp	r3, r8
 800db62:	dcf0      	bgt.n	800db46 <_printf_float+0x42e>
 800db64:	e6fc      	b.n	800d960 <_printf_float+0x248>
 800db66:	f04f 0800 	mov.w	r8, #0
 800db6a:	f104 0919 	add.w	r9, r4, #25
 800db6e:	e7f4      	b.n	800db5a <_printf_float+0x442>
 800db70:	2900      	cmp	r1, #0
 800db72:	f43f ae8b 	beq.w	800d88c <_printf_float+0x174>
 800db76:	2300      	movs	r3, #0
 800db78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800db7c:	ab09      	add	r3, sp, #36	; 0x24
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	ec49 8b10 	vmov	d0, r8, r9
 800db84:	6022      	str	r2, [r4, #0]
 800db86:	f8cd a004 	str.w	sl, [sp, #4]
 800db8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800db8e:	4628      	mov	r0, r5
 800db90:	f7ff fd2e 	bl	800d5f0 <__cvt>
 800db94:	4680      	mov	r8, r0
 800db96:	e648      	b.n	800d82a <_printf_float+0x112>

0800db98 <_printf_common>:
 800db98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db9c:	4691      	mov	r9, r2
 800db9e:	461f      	mov	r7, r3
 800dba0:	688a      	ldr	r2, [r1, #8]
 800dba2:	690b      	ldr	r3, [r1, #16]
 800dba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	bfb8      	it	lt
 800dbac:	4613      	movlt	r3, r2
 800dbae:	f8c9 3000 	str.w	r3, [r9]
 800dbb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	460c      	mov	r4, r1
 800dbba:	b112      	cbz	r2, 800dbc2 <_printf_common+0x2a>
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	f8c9 3000 	str.w	r3, [r9]
 800dbc2:	6823      	ldr	r3, [r4, #0]
 800dbc4:	0699      	lsls	r1, r3, #26
 800dbc6:	bf42      	ittt	mi
 800dbc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dbcc:	3302      	addmi	r3, #2
 800dbce:	f8c9 3000 	strmi.w	r3, [r9]
 800dbd2:	6825      	ldr	r5, [r4, #0]
 800dbd4:	f015 0506 	ands.w	r5, r5, #6
 800dbd8:	d107      	bne.n	800dbea <_printf_common+0x52>
 800dbda:	f104 0a19 	add.w	sl, r4, #25
 800dbde:	68e3      	ldr	r3, [r4, #12]
 800dbe0:	f8d9 2000 	ldr.w	r2, [r9]
 800dbe4:	1a9b      	subs	r3, r3, r2
 800dbe6:	42ab      	cmp	r3, r5
 800dbe8:	dc28      	bgt.n	800dc3c <_printf_common+0xa4>
 800dbea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dbee:	6822      	ldr	r2, [r4, #0]
 800dbf0:	3300      	adds	r3, #0
 800dbf2:	bf18      	it	ne
 800dbf4:	2301      	movne	r3, #1
 800dbf6:	0692      	lsls	r2, r2, #26
 800dbf8:	d42d      	bmi.n	800dc56 <_printf_common+0xbe>
 800dbfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dbfe:	4639      	mov	r1, r7
 800dc00:	4630      	mov	r0, r6
 800dc02:	47c0      	blx	r8
 800dc04:	3001      	adds	r0, #1
 800dc06:	d020      	beq.n	800dc4a <_printf_common+0xb2>
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	68e5      	ldr	r5, [r4, #12]
 800dc0c:	f8d9 2000 	ldr.w	r2, [r9]
 800dc10:	f003 0306 	and.w	r3, r3, #6
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	bf08      	it	eq
 800dc18:	1aad      	subeq	r5, r5, r2
 800dc1a:	68a3      	ldr	r3, [r4, #8]
 800dc1c:	6922      	ldr	r2, [r4, #16]
 800dc1e:	bf0c      	ite	eq
 800dc20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc24:	2500      	movne	r5, #0
 800dc26:	4293      	cmp	r3, r2
 800dc28:	bfc4      	itt	gt
 800dc2a:	1a9b      	subgt	r3, r3, r2
 800dc2c:	18ed      	addgt	r5, r5, r3
 800dc2e:	f04f 0900 	mov.w	r9, #0
 800dc32:	341a      	adds	r4, #26
 800dc34:	454d      	cmp	r5, r9
 800dc36:	d11a      	bne.n	800dc6e <_printf_common+0xd6>
 800dc38:	2000      	movs	r0, #0
 800dc3a:	e008      	b.n	800dc4e <_printf_common+0xb6>
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	4652      	mov	r2, sl
 800dc40:	4639      	mov	r1, r7
 800dc42:	4630      	mov	r0, r6
 800dc44:	47c0      	blx	r8
 800dc46:	3001      	adds	r0, #1
 800dc48:	d103      	bne.n	800dc52 <_printf_common+0xba>
 800dc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc52:	3501      	adds	r5, #1
 800dc54:	e7c3      	b.n	800dbde <_printf_common+0x46>
 800dc56:	18e1      	adds	r1, r4, r3
 800dc58:	1c5a      	adds	r2, r3, #1
 800dc5a:	2030      	movs	r0, #48	; 0x30
 800dc5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc60:	4422      	add	r2, r4
 800dc62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc6a:	3302      	adds	r3, #2
 800dc6c:	e7c5      	b.n	800dbfa <_printf_common+0x62>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	4622      	mov	r2, r4
 800dc72:	4639      	mov	r1, r7
 800dc74:	4630      	mov	r0, r6
 800dc76:	47c0      	blx	r8
 800dc78:	3001      	adds	r0, #1
 800dc7a:	d0e6      	beq.n	800dc4a <_printf_common+0xb2>
 800dc7c:	f109 0901 	add.w	r9, r9, #1
 800dc80:	e7d8      	b.n	800dc34 <_printf_common+0x9c>
	...

0800dc84 <_printf_i>:
 800dc84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dc8c:	460c      	mov	r4, r1
 800dc8e:	7e09      	ldrb	r1, [r1, #24]
 800dc90:	b085      	sub	sp, #20
 800dc92:	296e      	cmp	r1, #110	; 0x6e
 800dc94:	4617      	mov	r7, r2
 800dc96:	4606      	mov	r6, r0
 800dc98:	4698      	mov	r8, r3
 800dc9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc9c:	f000 80b3 	beq.w	800de06 <_printf_i+0x182>
 800dca0:	d822      	bhi.n	800dce8 <_printf_i+0x64>
 800dca2:	2963      	cmp	r1, #99	; 0x63
 800dca4:	d036      	beq.n	800dd14 <_printf_i+0x90>
 800dca6:	d80a      	bhi.n	800dcbe <_printf_i+0x3a>
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	f000 80b9 	beq.w	800de20 <_printf_i+0x19c>
 800dcae:	2958      	cmp	r1, #88	; 0x58
 800dcb0:	f000 8083 	beq.w	800ddba <_printf_i+0x136>
 800dcb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dcbc:	e032      	b.n	800dd24 <_printf_i+0xa0>
 800dcbe:	2964      	cmp	r1, #100	; 0x64
 800dcc0:	d001      	beq.n	800dcc6 <_printf_i+0x42>
 800dcc2:	2969      	cmp	r1, #105	; 0x69
 800dcc4:	d1f6      	bne.n	800dcb4 <_printf_i+0x30>
 800dcc6:	6820      	ldr	r0, [r4, #0]
 800dcc8:	6813      	ldr	r3, [r2, #0]
 800dcca:	0605      	lsls	r5, r0, #24
 800dccc:	f103 0104 	add.w	r1, r3, #4
 800dcd0:	d52a      	bpl.n	800dd28 <_printf_i+0xa4>
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6011      	str	r1, [r2, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	da03      	bge.n	800dce2 <_printf_i+0x5e>
 800dcda:	222d      	movs	r2, #45	; 0x2d
 800dcdc:	425b      	negs	r3, r3
 800dcde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dce2:	486f      	ldr	r0, [pc, #444]	; (800dea0 <_printf_i+0x21c>)
 800dce4:	220a      	movs	r2, #10
 800dce6:	e039      	b.n	800dd5c <_printf_i+0xd8>
 800dce8:	2973      	cmp	r1, #115	; 0x73
 800dcea:	f000 809d 	beq.w	800de28 <_printf_i+0x1a4>
 800dcee:	d808      	bhi.n	800dd02 <_printf_i+0x7e>
 800dcf0:	296f      	cmp	r1, #111	; 0x6f
 800dcf2:	d020      	beq.n	800dd36 <_printf_i+0xb2>
 800dcf4:	2970      	cmp	r1, #112	; 0x70
 800dcf6:	d1dd      	bne.n	800dcb4 <_printf_i+0x30>
 800dcf8:	6823      	ldr	r3, [r4, #0]
 800dcfa:	f043 0320 	orr.w	r3, r3, #32
 800dcfe:	6023      	str	r3, [r4, #0]
 800dd00:	e003      	b.n	800dd0a <_printf_i+0x86>
 800dd02:	2975      	cmp	r1, #117	; 0x75
 800dd04:	d017      	beq.n	800dd36 <_printf_i+0xb2>
 800dd06:	2978      	cmp	r1, #120	; 0x78
 800dd08:	d1d4      	bne.n	800dcb4 <_printf_i+0x30>
 800dd0a:	2378      	movs	r3, #120	; 0x78
 800dd0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd10:	4864      	ldr	r0, [pc, #400]	; (800dea4 <_printf_i+0x220>)
 800dd12:	e055      	b.n	800ddc0 <_printf_i+0x13c>
 800dd14:	6813      	ldr	r3, [r2, #0]
 800dd16:	1d19      	adds	r1, r3, #4
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	6011      	str	r1, [r2, #0]
 800dd1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd24:	2301      	movs	r3, #1
 800dd26:	e08c      	b.n	800de42 <_printf_i+0x1be>
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6011      	str	r1, [r2, #0]
 800dd2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd30:	bf18      	it	ne
 800dd32:	b21b      	sxthne	r3, r3
 800dd34:	e7cf      	b.n	800dcd6 <_printf_i+0x52>
 800dd36:	6813      	ldr	r3, [r2, #0]
 800dd38:	6825      	ldr	r5, [r4, #0]
 800dd3a:	1d18      	adds	r0, r3, #4
 800dd3c:	6010      	str	r0, [r2, #0]
 800dd3e:	0628      	lsls	r0, r5, #24
 800dd40:	d501      	bpl.n	800dd46 <_printf_i+0xc2>
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	e002      	b.n	800dd4c <_printf_i+0xc8>
 800dd46:	0668      	lsls	r0, r5, #25
 800dd48:	d5fb      	bpl.n	800dd42 <_printf_i+0xbe>
 800dd4a:	881b      	ldrh	r3, [r3, #0]
 800dd4c:	4854      	ldr	r0, [pc, #336]	; (800dea0 <_printf_i+0x21c>)
 800dd4e:	296f      	cmp	r1, #111	; 0x6f
 800dd50:	bf14      	ite	ne
 800dd52:	220a      	movne	r2, #10
 800dd54:	2208      	moveq	r2, #8
 800dd56:	2100      	movs	r1, #0
 800dd58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd5c:	6865      	ldr	r5, [r4, #4]
 800dd5e:	60a5      	str	r5, [r4, #8]
 800dd60:	2d00      	cmp	r5, #0
 800dd62:	f2c0 8095 	blt.w	800de90 <_printf_i+0x20c>
 800dd66:	6821      	ldr	r1, [r4, #0]
 800dd68:	f021 0104 	bic.w	r1, r1, #4
 800dd6c:	6021      	str	r1, [r4, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d13d      	bne.n	800ddee <_printf_i+0x16a>
 800dd72:	2d00      	cmp	r5, #0
 800dd74:	f040 808e 	bne.w	800de94 <_printf_i+0x210>
 800dd78:	4665      	mov	r5, ip
 800dd7a:	2a08      	cmp	r2, #8
 800dd7c:	d10b      	bne.n	800dd96 <_printf_i+0x112>
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	07db      	lsls	r3, r3, #31
 800dd82:	d508      	bpl.n	800dd96 <_printf_i+0x112>
 800dd84:	6923      	ldr	r3, [r4, #16]
 800dd86:	6862      	ldr	r2, [r4, #4]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	bfde      	ittt	le
 800dd8c:	2330      	movle	r3, #48	; 0x30
 800dd8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd92:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd96:	ebac 0305 	sub.w	r3, ip, r5
 800dd9a:	6123      	str	r3, [r4, #16]
 800dd9c:	f8cd 8000 	str.w	r8, [sp]
 800dda0:	463b      	mov	r3, r7
 800dda2:	aa03      	add	r2, sp, #12
 800dda4:	4621      	mov	r1, r4
 800dda6:	4630      	mov	r0, r6
 800dda8:	f7ff fef6 	bl	800db98 <_printf_common>
 800ddac:	3001      	adds	r0, #1
 800ddae:	d14d      	bne.n	800de4c <_printf_i+0x1c8>
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	b005      	add	sp, #20
 800ddb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddba:	4839      	ldr	r0, [pc, #228]	; (800dea0 <_printf_i+0x21c>)
 800ddbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ddc0:	6813      	ldr	r3, [r2, #0]
 800ddc2:	6821      	ldr	r1, [r4, #0]
 800ddc4:	1d1d      	adds	r5, r3, #4
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	6015      	str	r5, [r2, #0]
 800ddca:	060a      	lsls	r2, r1, #24
 800ddcc:	d50b      	bpl.n	800dde6 <_printf_i+0x162>
 800ddce:	07ca      	lsls	r2, r1, #31
 800ddd0:	bf44      	itt	mi
 800ddd2:	f041 0120 	orrmi.w	r1, r1, #32
 800ddd6:	6021      	strmi	r1, [r4, #0]
 800ddd8:	b91b      	cbnz	r3, 800dde2 <_printf_i+0x15e>
 800ddda:	6822      	ldr	r2, [r4, #0]
 800dddc:	f022 0220 	bic.w	r2, r2, #32
 800dde0:	6022      	str	r2, [r4, #0]
 800dde2:	2210      	movs	r2, #16
 800dde4:	e7b7      	b.n	800dd56 <_printf_i+0xd2>
 800dde6:	064d      	lsls	r5, r1, #25
 800dde8:	bf48      	it	mi
 800ddea:	b29b      	uxthmi	r3, r3
 800ddec:	e7ef      	b.n	800ddce <_printf_i+0x14a>
 800ddee:	4665      	mov	r5, ip
 800ddf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddf4:	fb02 3311 	mls	r3, r2, r1, r3
 800ddf8:	5cc3      	ldrb	r3, [r0, r3]
 800ddfa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ddfe:	460b      	mov	r3, r1
 800de00:	2900      	cmp	r1, #0
 800de02:	d1f5      	bne.n	800ddf0 <_printf_i+0x16c>
 800de04:	e7b9      	b.n	800dd7a <_printf_i+0xf6>
 800de06:	6813      	ldr	r3, [r2, #0]
 800de08:	6825      	ldr	r5, [r4, #0]
 800de0a:	6961      	ldr	r1, [r4, #20]
 800de0c:	1d18      	adds	r0, r3, #4
 800de0e:	6010      	str	r0, [r2, #0]
 800de10:	0628      	lsls	r0, r5, #24
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	d501      	bpl.n	800de1a <_printf_i+0x196>
 800de16:	6019      	str	r1, [r3, #0]
 800de18:	e002      	b.n	800de20 <_printf_i+0x19c>
 800de1a:	066a      	lsls	r2, r5, #25
 800de1c:	d5fb      	bpl.n	800de16 <_printf_i+0x192>
 800de1e:	8019      	strh	r1, [r3, #0]
 800de20:	2300      	movs	r3, #0
 800de22:	6123      	str	r3, [r4, #16]
 800de24:	4665      	mov	r5, ip
 800de26:	e7b9      	b.n	800dd9c <_printf_i+0x118>
 800de28:	6813      	ldr	r3, [r2, #0]
 800de2a:	1d19      	adds	r1, r3, #4
 800de2c:	6011      	str	r1, [r2, #0]
 800de2e:	681d      	ldr	r5, [r3, #0]
 800de30:	6862      	ldr	r2, [r4, #4]
 800de32:	2100      	movs	r1, #0
 800de34:	4628      	mov	r0, r5
 800de36:	f7f2 f9db 	bl	80001f0 <memchr>
 800de3a:	b108      	cbz	r0, 800de40 <_printf_i+0x1bc>
 800de3c:	1b40      	subs	r0, r0, r5
 800de3e:	6060      	str	r0, [r4, #4]
 800de40:	6863      	ldr	r3, [r4, #4]
 800de42:	6123      	str	r3, [r4, #16]
 800de44:	2300      	movs	r3, #0
 800de46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de4a:	e7a7      	b.n	800dd9c <_printf_i+0x118>
 800de4c:	6923      	ldr	r3, [r4, #16]
 800de4e:	462a      	mov	r2, r5
 800de50:	4639      	mov	r1, r7
 800de52:	4630      	mov	r0, r6
 800de54:	47c0      	blx	r8
 800de56:	3001      	adds	r0, #1
 800de58:	d0aa      	beq.n	800ddb0 <_printf_i+0x12c>
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	079b      	lsls	r3, r3, #30
 800de5e:	d413      	bmi.n	800de88 <_printf_i+0x204>
 800de60:	68e0      	ldr	r0, [r4, #12]
 800de62:	9b03      	ldr	r3, [sp, #12]
 800de64:	4298      	cmp	r0, r3
 800de66:	bfb8      	it	lt
 800de68:	4618      	movlt	r0, r3
 800de6a:	e7a3      	b.n	800ddb4 <_printf_i+0x130>
 800de6c:	2301      	movs	r3, #1
 800de6e:	464a      	mov	r2, r9
 800de70:	4639      	mov	r1, r7
 800de72:	4630      	mov	r0, r6
 800de74:	47c0      	blx	r8
 800de76:	3001      	adds	r0, #1
 800de78:	d09a      	beq.n	800ddb0 <_printf_i+0x12c>
 800de7a:	3501      	adds	r5, #1
 800de7c:	68e3      	ldr	r3, [r4, #12]
 800de7e:	9a03      	ldr	r2, [sp, #12]
 800de80:	1a9b      	subs	r3, r3, r2
 800de82:	42ab      	cmp	r3, r5
 800de84:	dcf2      	bgt.n	800de6c <_printf_i+0x1e8>
 800de86:	e7eb      	b.n	800de60 <_printf_i+0x1dc>
 800de88:	2500      	movs	r5, #0
 800de8a:	f104 0919 	add.w	r9, r4, #25
 800de8e:	e7f5      	b.n	800de7c <_printf_i+0x1f8>
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1ac      	bne.n	800ddee <_printf_i+0x16a>
 800de94:	7803      	ldrb	r3, [r0, #0]
 800de96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de9e:	e76c      	b.n	800dd7a <_printf_i+0xf6>
 800dea0:	0801011a 	.word	0x0801011a
 800dea4:	0801012b 	.word	0x0801012b

0800dea8 <cleanup_glue>:
 800dea8:	b538      	push	{r3, r4, r5, lr}
 800deaa:	460c      	mov	r4, r1
 800deac:	6809      	ldr	r1, [r1, #0]
 800deae:	4605      	mov	r5, r0
 800deb0:	b109      	cbz	r1, 800deb6 <cleanup_glue+0xe>
 800deb2:	f7ff fff9 	bl	800dea8 <cleanup_glue>
 800deb6:	4621      	mov	r1, r4
 800deb8:	4628      	mov	r0, r5
 800deba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800debe:	f7ff baef 	b.w	800d4a0 <_free_r>
	...

0800dec4 <_reclaim_reent>:
 800dec4:	4b2c      	ldr	r3, [pc, #176]	; (800df78 <_reclaim_reent+0xb4>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4283      	cmp	r3, r0
 800deca:	b570      	push	{r4, r5, r6, lr}
 800decc:	4604      	mov	r4, r0
 800dece:	d051      	beq.n	800df74 <_reclaim_reent+0xb0>
 800ded0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ded2:	b143      	cbz	r3, 800dee6 <_reclaim_reent+0x22>
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d14a      	bne.n	800df70 <_reclaim_reent+0xac>
 800deda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dedc:	6819      	ldr	r1, [r3, #0]
 800dede:	b111      	cbz	r1, 800dee6 <_reclaim_reent+0x22>
 800dee0:	4620      	mov	r0, r4
 800dee2:	f7ff fadd 	bl	800d4a0 <_free_r>
 800dee6:	6961      	ldr	r1, [r4, #20]
 800dee8:	b111      	cbz	r1, 800def0 <_reclaim_reent+0x2c>
 800deea:	4620      	mov	r0, r4
 800deec:	f7ff fad8 	bl	800d4a0 <_free_r>
 800def0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800def2:	b111      	cbz	r1, 800defa <_reclaim_reent+0x36>
 800def4:	4620      	mov	r0, r4
 800def6:	f7ff fad3 	bl	800d4a0 <_free_r>
 800defa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800defc:	b111      	cbz	r1, 800df04 <_reclaim_reent+0x40>
 800defe:	4620      	mov	r0, r4
 800df00:	f7ff face 	bl	800d4a0 <_free_r>
 800df04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800df06:	b111      	cbz	r1, 800df0e <_reclaim_reent+0x4a>
 800df08:	4620      	mov	r0, r4
 800df0a:	f7ff fac9 	bl	800d4a0 <_free_r>
 800df0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800df10:	b111      	cbz	r1, 800df18 <_reclaim_reent+0x54>
 800df12:	4620      	mov	r0, r4
 800df14:	f7ff fac4 	bl	800d4a0 <_free_r>
 800df18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800df1a:	b111      	cbz	r1, 800df22 <_reclaim_reent+0x5e>
 800df1c:	4620      	mov	r0, r4
 800df1e:	f7ff fabf 	bl	800d4a0 <_free_r>
 800df22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800df24:	b111      	cbz	r1, 800df2c <_reclaim_reent+0x68>
 800df26:	4620      	mov	r0, r4
 800df28:	f7ff faba 	bl	800d4a0 <_free_r>
 800df2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df2e:	b111      	cbz	r1, 800df36 <_reclaim_reent+0x72>
 800df30:	4620      	mov	r0, r4
 800df32:	f7ff fab5 	bl	800d4a0 <_free_r>
 800df36:	69a3      	ldr	r3, [r4, #24]
 800df38:	b1e3      	cbz	r3, 800df74 <_reclaim_reent+0xb0>
 800df3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df3c:	4620      	mov	r0, r4
 800df3e:	4798      	blx	r3
 800df40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800df42:	b1b9      	cbz	r1, 800df74 <_reclaim_reent+0xb0>
 800df44:	4620      	mov	r0, r4
 800df46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df4a:	f7ff bfad 	b.w	800dea8 <cleanup_glue>
 800df4e:	5949      	ldr	r1, [r1, r5]
 800df50:	b941      	cbnz	r1, 800df64 <_reclaim_reent+0xa0>
 800df52:	3504      	adds	r5, #4
 800df54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df56:	2d80      	cmp	r5, #128	; 0x80
 800df58:	68d9      	ldr	r1, [r3, #12]
 800df5a:	d1f8      	bne.n	800df4e <_reclaim_reent+0x8a>
 800df5c:	4620      	mov	r0, r4
 800df5e:	f7ff fa9f 	bl	800d4a0 <_free_r>
 800df62:	e7ba      	b.n	800deda <_reclaim_reent+0x16>
 800df64:	680e      	ldr	r6, [r1, #0]
 800df66:	4620      	mov	r0, r4
 800df68:	f7ff fa9a 	bl	800d4a0 <_free_r>
 800df6c:	4631      	mov	r1, r6
 800df6e:	e7ef      	b.n	800df50 <_reclaim_reent+0x8c>
 800df70:	2500      	movs	r5, #0
 800df72:	e7ef      	b.n	800df54 <_reclaim_reent+0x90>
 800df74:	bd70      	pop	{r4, r5, r6, pc}
 800df76:	bf00      	nop
 800df78:	20000094 	.word	0x20000094

0800df7c <siprintf>:
 800df7c:	b40e      	push	{r1, r2, r3}
 800df7e:	b500      	push	{lr}
 800df80:	b09c      	sub	sp, #112	; 0x70
 800df82:	ab1d      	add	r3, sp, #116	; 0x74
 800df84:	9002      	str	r0, [sp, #8]
 800df86:	9006      	str	r0, [sp, #24]
 800df88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df8c:	4809      	ldr	r0, [pc, #36]	; (800dfb4 <siprintf+0x38>)
 800df8e:	9107      	str	r1, [sp, #28]
 800df90:	9104      	str	r1, [sp, #16]
 800df92:	4909      	ldr	r1, [pc, #36]	; (800dfb8 <siprintf+0x3c>)
 800df94:	f853 2b04 	ldr.w	r2, [r3], #4
 800df98:	9105      	str	r1, [sp, #20]
 800df9a:	6800      	ldr	r0, [r0, #0]
 800df9c:	9301      	str	r3, [sp, #4]
 800df9e:	a902      	add	r1, sp, #8
 800dfa0:	f001 fac6 	bl	800f530 <_svfiprintf_r>
 800dfa4:	9b02      	ldr	r3, [sp, #8]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	701a      	strb	r2, [r3, #0]
 800dfaa:	b01c      	add	sp, #112	; 0x70
 800dfac:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfb0:	b003      	add	sp, #12
 800dfb2:	4770      	bx	lr
 800dfb4:	20000094 	.word	0x20000094
 800dfb8:	ffff0208 	.word	0xffff0208

0800dfbc <strncmp>:
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	b16a      	cbz	r2, 800dfdc <strncmp+0x20>
 800dfc0:	3901      	subs	r1, #1
 800dfc2:	1884      	adds	r4, r0, r2
 800dfc4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dfc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d103      	bne.n	800dfd8 <strncmp+0x1c>
 800dfd0:	42a0      	cmp	r0, r4
 800dfd2:	d001      	beq.n	800dfd8 <strncmp+0x1c>
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1f5      	bne.n	800dfc4 <strncmp+0x8>
 800dfd8:	1a98      	subs	r0, r3, r2
 800dfda:	bd10      	pop	{r4, pc}
 800dfdc:	4610      	mov	r0, r2
 800dfde:	e7fc      	b.n	800dfda <strncmp+0x1e>

0800dfe0 <strncpy>:
 800dfe0:	b570      	push	{r4, r5, r6, lr}
 800dfe2:	3901      	subs	r1, #1
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	b902      	cbnz	r2, 800dfea <strncpy+0xa>
 800dfe8:	bd70      	pop	{r4, r5, r6, pc}
 800dfea:	4623      	mov	r3, r4
 800dfec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800dff0:	f803 5b01 	strb.w	r5, [r3], #1
 800dff4:	1e56      	subs	r6, r2, #1
 800dff6:	b92d      	cbnz	r5, 800e004 <strncpy+0x24>
 800dff8:	4414      	add	r4, r2
 800dffa:	42a3      	cmp	r3, r4
 800dffc:	d0f4      	beq.n	800dfe8 <strncpy+0x8>
 800dffe:	f803 5b01 	strb.w	r5, [r3], #1
 800e002:	e7fa      	b.n	800dffa <strncpy+0x1a>
 800e004:	461c      	mov	r4, r3
 800e006:	4632      	mov	r2, r6
 800e008:	e7ed      	b.n	800dfe6 <strncpy+0x6>
	...

0800e00c <strtok>:
 800e00c:	4b13      	ldr	r3, [pc, #76]	; (800e05c <strtok+0x50>)
 800e00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e012:	681d      	ldr	r5, [r3, #0]
 800e014:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800e016:	4606      	mov	r6, r0
 800e018:	460f      	mov	r7, r1
 800e01a:	b9b4      	cbnz	r4, 800e04a <strtok+0x3e>
 800e01c:	2050      	movs	r0, #80	; 0x50
 800e01e:	f7ff fa1b 	bl	800d458 <malloc>
 800e022:	65a8      	str	r0, [r5, #88]	; 0x58
 800e024:	e9c0 4400 	strd	r4, r4, [r0]
 800e028:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e02c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e030:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e034:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e038:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e03c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e040:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e044:	6184      	str	r4, [r0, #24]
 800e046:	7704      	strb	r4, [r0, #28]
 800e048:	6244      	str	r4, [r0, #36]	; 0x24
 800e04a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800e04c:	4639      	mov	r1, r7
 800e04e:	4630      	mov	r0, r6
 800e050:	2301      	movs	r3, #1
 800e052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e056:	f000 b803 	b.w	800e060 <__strtok_r>
 800e05a:	bf00      	nop
 800e05c:	20000094 	.word	0x20000094

0800e060 <__strtok_r>:
 800e060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e062:	b918      	cbnz	r0, 800e06c <__strtok_r+0xc>
 800e064:	6810      	ldr	r0, [r2, #0]
 800e066:	b908      	cbnz	r0, 800e06c <__strtok_r+0xc>
 800e068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e06a:	4620      	mov	r0, r4
 800e06c:	4604      	mov	r4, r0
 800e06e:	460f      	mov	r7, r1
 800e070:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e074:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e078:	b91e      	cbnz	r6, 800e082 <__strtok_r+0x22>
 800e07a:	b96d      	cbnz	r5, 800e098 <__strtok_r+0x38>
 800e07c:	6015      	str	r5, [r2, #0]
 800e07e:	4628      	mov	r0, r5
 800e080:	e7f2      	b.n	800e068 <__strtok_r+0x8>
 800e082:	42b5      	cmp	r5, r6
 800e084:	d1f6      	bne.n	800e074 <__strtok_r+0x14>
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1ef      	bne.n	800e06a <__strtok_r+0xa>
 800e08a:	6014      	str	r4, [r2, #0]
 800e08c:	7003      	strb	r3, [r0, #0]
 800e08e:	e7eb      	b.n	800e068 <__strtok_r+0x8>
 800e090:	462b      	mov	r3, r5
 800e092:	e00d      	b.n	800e0b0 <__strtok_r+0x50>
 800e094:	b926      	cbnz	r6, 800e0a0 <__strtok_r+0x40>
 800e096:	461c      	mov	r4, r3
 800e098:	4623      	mov	r3, r4
 800e09a:	460f      	mov	r7, r1
 800e09c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800e0a0:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e0a4:	42b5      	cmp	r5, r6
 800e0a6:	d1f5      	bne.n	800e094 <__strtok_r+0x34>
 800e0a8:	2d00      	cmp	r5, #0
 800e0aa:	d0f1      	beq.n	800e090 <__strtok_r+0x30>
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	7021      	strb	r1, [r4, #0]
 800e0b0:	6013      	str	r3, [r2, #0]
 800e0b2:	e7d9      	b.n	800e068 <__strtok_r+0x8>

0800e0b4 <_strtol_l.isra.0>:
 800e0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b8:	4680      	mov	r8, r0
 800e0ba:	4689      	mov	r9, r1
 800e0bc:	4692      	mov	sl, r2
 800e0be:	461e      	mov	r6, r3
 800e0c0:	460f      	mov	r7, r1
 800e0c2:	463d      	mov	r5, r7
 800e0c4:	9808      	ldr	r0, [sp, #32]
 800e0c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0ca:	f000 fec9 	bl	800ee60 <__locale_ctype_ptr_l>
 800e0ce:	4420      	add	r0, r4
 800e0d0:	7843      	ldrb	r3, [r0, #1]
 800e0d2:	f013 0308 	ands.w	r3, r3, #8
 800e0d6:	d132      	bne.n	800e13e <_strtol_l.isra.0+0x8a>
 800e0d8:	2c2d      	cmp	r4, #45	; 0x2d
 800e0da:	d132      	bne.n	800e142 <_strtol_l.isra.0+0x8e>
 800e0dc:	787c      	ldrb	r4, [r7, #1]
 800e0de:	1cbd      	adds	r5, r7, #2
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	2e00      	cmp	r6, #0
 800e0e4:	d05d      	beq.n	800e1a2 <_strtol_l.isra.0+0xee>
 800e0e6:	2e10      	cmp	r6, #16
 800e0e8:	d109      	bne.n	800e0fe <_strtol_l.isra.0+0x4a>
 800e0ea:	2c30      	cmp	r4, #48	; 0x30
 800e0ec:	d107      	bne.n	800e0fe <_strtol_l.isra.0+0x4a>
 800e0ee:	782b      	ldrb	r3, [r5, #0]
 800e0f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e0f4:	2b58      	cmp	r3, #88	; 0x58
 800e0f6:	d14f      	bne.n	800e198 <_strtol_l.isra.0+0xe4>
 800e0f8:	786c      	ldrb	r4, [r5, #1]
 800e0fa:	2610      	movs	r6, #16
 800e0fc:	3502      	adds	r5, #2
 800e0fe:	2a00      	cmp	r2, #0
 800e100:	bf14      	ite	ne
 800e102:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e106:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e10a:	2700      	movs	r7, #0
 800e10c:	fbb1 fcf6 	udiv	ip, r1, r6
 800e110:	4638      	mov	r0, r7
 800e112:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e116:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e11a:	2b09      	cmp	r3, #9
 800e11c:	d817      	bhi.n	800e14e <_strtol_l.isra.0+0x9a>
 800e11e:	461c      	mov	r4, r3
 800e120:	42a6      	cmp	r6, r4
 800e122:	dd23      	ble.n	800e16c <_strtol_l.isra.0+0xb8>
 800e124:	1c7b      	adds	r3, r7, #1
 800e126:	d007      	beq.n	800e138 <_strtol_l.isra.0+0x84>
 800e128:	4584      	cmp	ip, r0
 800e12a:	d31c      	bcc.n	800e166 <_strtol_l.isra.0+0xb2>
 800e12c:	d101      	bne.n	800e132 <_strtol_l.isra.0+0x7e>
 800e12e:	45a6      	cmp	lr, r4
 800e130:	db19      	blt.n	800e166 <_strtol_l.isra.0+0xb2>
 800e132:	fb00 4006 	mla	r0, r0, r6, r4
 800e136:	2701      	movs	r7, #1
 800e138:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e13c:	e7eb      	b.n	800e116 <_strtol_l.isra.0+0x62>
 800e13e:	462f      	mov	r7, r5
 800e140:	e7bf      	b.n	800e0c2 <_strtol_l.isra.0+0xe>
 800e142:	2c2b      	cmp	r4, #43	; 0x2b
 800e144:	bf04      	itt	eq
 800e146:	1cbd      	addeq	r5, r7, #2
 800e148:	787c      	ldrbeq	r4, [r7, #1]
 800e14a:	461a      	mov	r2, r3
 800e14c:	e7c9      	b.n	800e0e2 <_strtol_l.isra.0+0x2e>
 800e14e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e152:	2b19      	cmp	r3, #25
 800e154:	d801      	bhi.n	800e15a <_strtol_l.isra.0+0xa6>
 800e156:	3c37      	subs	r4, #55	; 0x37
 800e158:	e7e2      	b.n	800e120 <_strtol_l.isra.0+0x6c>
 800e15a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e15e:	2b19      	cmp	r3, #25
 800e160:	d804      	bhi.n	800e16c <_strtol_l.isra.0+0xb8>
 800e162:	3c57      	subs	r4, #87	; 0x57
 800e164:	e7dc      	b.n	800e120 <_strtol_l.isra.0+0x6c>
 800e166:	f04f 37ff 	mov.w	r7, #4294967295
 800e16a:	e7e5      	b.n	800e138 <_strtol_l.isra.0+0x84>
 800e16c:	1c7b      	adds	r3, r7, #1
 800e16e:	d108      	bne.n	800e182 <_strtol_l.isra.0+0xce>
 800e170:	2322      	movs	r3, #34	; 0x22
 800e172:	f8c8 3000 	str.w	r3, [r8]
 800e176:	4608      	mov	r0, r1
 800e178:	f1ba 0f00 	cmp.w	sl, #0
 800e17c:	d107      	bne.n	800e18e <_strtol_l.isra.0+0xda>
 800e17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e182:	b102      	cbz	r2, 800e186 <_strtol_l.isra.0+0xd2>
 800e184:	4240      	negs	r0, r0
 800e186:	f1ba 0f00 	cmp.w	sl, #0
 800e18a:	d0f8      	beq.n	800e17e <_strtol_l.isra.0+0xca>
 800e18c:	b10f      	cbz	r7, 800e192 <_strtol_l.isra.0+0xde>
 800e18e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e192:	f8ca 9000 	str.w	r9, [sl]
 800e196:	e7f2      	b.n	800e17e <_strtol_l.isra.0+0xca>
 800e198:	2430      	movs	r4, #48	; 0x30
 800e19a:	2e00      	cmp	r6, #0
 800e19c:	d1af      	bne.n	800e0fe <_strtol_l.isra.0+0x4a>
 800e19e:	2608      	movs	r6, #8
 800e1a0:	e7ad      	b.n	800e0fe <_strtol_l.isra.0+0x4a>
 800e1a2:	2c30      	cmp	r4, #48	; 0x30
 800e1a4:	d0a3      	beq.n	800e0ee <_strtol_l.isra.0+0x3a>
 800e1a6:	260a      	movs	r6, #10
 800e1a8:	e7a9      	b.n	800e0fe <_strtol_l.isra.0+0x4a>
	...

0800e1ac <strtol>:
 800e1ac:	4b08      	ldr	r3, [pc, #32]	; (800e1d0 <strtol+0x24>)
 800e1ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1b0:	681c      	ldr	r4, [r3, #0]
 800e1b2:	4d08      	ldr	r5, [pc, #32]	; (800e1d4 <strtol+0x28>)
 800e1b4:	6a23      	ldr	r3, [r4, #32]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	bf08      	it	eq
 800e1ba:	462b      	moveq	r3, r5
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	460a      	mov	r2, r1
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f7ff ff75 	bl	800e0b4 <_strtol_l.isra.0>
 800e1ca:	b003      	add	sp, #12
 800e1cc:	bd30      	pop	{r4, r5, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20000094 	.word	0x20000094
 800e1d4:	200000f8 	.word	0x200000f8

0800e1d8 <quorem>:
 800e1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	6903      	ldr	r3, [r0, #16]
 800e1de:	690c      	ldr	r4, [r1, #16]
 800e1e0:	42a3      	cmp	r3, r4
 800e1e2:	4680      	mov	r8, r0
 800e1e4:	f2c0 8082 	blt.w	800e2ec <quorem+0x114>
 800e1e8:	3c01      	subs	r4, #1
 800e1ea:	f101 0714 	add.w	r7, r1, #20
 800e1ee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e1f2:	f100 0614 	add.w	r6, r0, #20
 800e1f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e1fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e1fe:	eb06 030c 	add.w	r3, r6, ip
 800e202:	3501      	adds	r5, #1
 800e204:	eb07 090c 	add.w	r9, r7, ip
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	fbb0 f5f5 	udiv	r5, r0, r5
 800e20e:	b395      	cbz	r5, 800e276 <quorem+0x9e>
 800e210:	f04f 0a00 	mov.w	sl, #0
 800e214:	4638      	mov	r0, r7
 800e216:	46b6      	mov	lr, r6
 800e218:	46d3      	mov	fp, sl
 800e21a:	f850 2b04 	ldr.w	r2, [r0], #4
 800e21e:	b293      	uxth	r3, r2
 800e220:	fb05 a303 	mla	r3, r5, r3, sl
 800e224:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e228:	b29b      	uxth	r3, r3
 800e22a:	ebab 0303 	sub.w	r3, fp, r3
 800e22e:	0c12      	lsrs	r2, r2, #16
 800e230:	f8de b000 	ldr.w	fp, [lr]
 800e234:	fb05 a202 	mla	r2, r5, r2, sl
 800e238:	fa13 f38b 	uxtah	r3, r3, fp
 800e23c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e240:	fa1f fb82 	uxth.w	fp, r2
 800e244:	f8de 2000 	ldr.w	r2, [lr]
 800e248:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e24c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e250:	b29b      	uxth	r3, r3
 800e252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e256:	4581      	cmp	r9, r0
 800e258:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e25c:	f84e 3b04 	str.w	r3, [lr], #4
 800e260:	d2db      	bcs.n	800e21a <quorem+0x42>
 800e262:	f856 300c 	ldr.w	r3, [r6, ip]
 800e266:	b933      	cbnz	r3, 800e276 <quorem+0x9e>
 800e268:	9b01      	ldr	r3, [sp, #4]
 800e26a:	3b04      	subs	r3, #4
 800e26c:	429e      	cmp	r6, r3
 800e26e:	461a      	mov	r2, r3
 800e270:	d330      	bcc.n	800e2d4 <quorem+0xfc>
 800e272:	f8c8 4010 	str.w	r4, [r8, #16]
 800e276:	4640      	mov	r0, r8
 800e278:	f001 f82c 	bl	800f2d4 <__mcmp>
 800e27c:	2800      	cmp	r0, #0
 800e27e:	db25      	blt.n	800e2cc <quorem+0xf4>
 800e280:	3501      	adds	r5, #1
 800e282:	4630      	mov	r0, r6
 800e284:	f04f 0c00 	mov.w	ip, #0
 800e288:	f857 2b04 	ldr.w	r2, [r7], #4
 800e28c:	f8d0 e000 	ldr.w	lr, [r0]
 800e290:	b293      	uxth	r3, r2
 800e292:	ebac 0303 	sub.w	r3, ip, r3
 800e296:	0c12      	lsrs	r2, r2, #16
 800e298:	fa13 f38e 	uxtah	r3, r3, lr
 800e29c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e2a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2aa:	45b9      	cmp	r9, r7
 800e2ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e2b0:	f840 3b04 	str.w	r3, [r0], #4
 800e2b4:	d2e8      	bcs.n	800e288 <quorem+0xb0>
 800e2b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e2ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e2be:	b92a      	cbnz	r2, 800e2cc <quorem+0xf4>
 800e2c0:	3b04      	subs	r3, #4
 800e2c2:	429e      	cmp	r6, r3
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	d30b      	bcc.n	800e2e0 <quorem+0x108>
 800e2c8:	f8c8 4010 	str.w	r4, [r8, #16]
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	b003      	add	sp, #12
 800e2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d4:	6812      	ldr	r2, [r2, #0]
 800e2d6:	3b04      	subs	r3, #4
 800e2d8:	2a00      	cmp	r2, #0
 800e2da:	d1ca      	bne.n	800e272 <quorem+0x9a>
 800e2dc:	3c01      	subs	r4, #1
 800e2de:	e7c5      	b.n	800e26c <quorem+0x94>
 800e2e0:	6812      	ldr	r2, [r2, #0]
 800e2e2:	3b04      	subs	r3, #4
 800e2e4:	2a00      	cmp	r2, #0
 800e2e6:	d1ef      	bne.n	800e2c8 <quorem+0xf0>
 800e2e8:	3c01      	subs	r4, #1
 800e2ea:	e7ea      	b.n	800e2c2 <quorem+0xea>
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	e7ee      	b.n	800e2ce <quorem+0xf6>

0800e2f0 <_dtoa_r>:
 800e2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f4:	ec57 6b10 	vmov	r6, r7, d0
 800e2f8:	b097      	sub	sp, #92	; 0x5c
 800e2fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e2fc:	9106      	str	r1, [sp, #24]
 800e2fe:	4604      	mov	r4, r0
 800e300:	920b      	str	r2, [sp, #44]	; 0x2c
 800e302:	9312      	str	r3, [sp, #72]	; 0x48
 800e304:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e308:	e9cd 6700 	strd	r6, r7, [sp]
 800e30c:	b93d      	cbnz	r5, 800e31e <_dtoa_r+0x2e>
 800e30e:	2010      	movs	r0, #16
 800e310:	f7ff f8a2 	bl	800d458 <malloc>
 800e314:	6260      	str	r0, [r4, #36]	; 0x24
 800e316:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e31a:	6005      	str	r5, [r0, #0]
 800e31c:	60c5      	str	r5, [r0, #12]
 800e31e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e320:	6819      	ldr	r1, [r3, #0]
 800e322:	b151      	cbz	r1, 800e33a <_dtoa_r+0x4a>
 800e324:	685a      	ldr	r2, [r3, #4]
 800e326:	604a      	str	r2, [r1, #4]
 800e328:	2301      	movs	r3, #1
 800e32a:	4093      	lsls	r3, r2
 800e32c:	608b      	str	r3, [r1, #8]
 800e32e:	4620      	mov	r0, r4
 800e330:	f000 fdee 	bl	800ef10 <_Bfree>
 800e334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e336:	2200      	movs	r2, #0
 800e338:	601a      	str	r2, [r3, #0]
 800e33a:	1e3b      	subs	r3, r7, #0
 800e33c:	bfbb      	ittet	lt
 800e33e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e342:	9301      	strlt	r3, [sp, #4]
 800e344:	2300      	movge	r3, #0
 800e346:	2201      	movlt	r2, #1
 800e348:	bfac      	ite	ge
 800e34a:	f8c8 3000 	strge.w	r3, [r8]
 800e34e:	f8c8 2000 	strlt.w	r2, [r8]
 800e352:	4baf      	ldr	r3, [pc, #700]	; (800e610 <_dtoa_r+0x320>)
 800e354:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e358:	ea33 0308 	bics.w	r3, r3, r8
 800e35c:	d114      	bne.n	800e388 <_dtoa_r+0x98>
 800e35e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e360:	f242 730f 	movw	r3, #9999	; 0x270f
 800e364:	6013      	str	r3, [r2, #0]
 800e366:	9b00      	ldr	r3, [sp, #0]
 800e368:	b923      	cbnz	r3, 800e374 <_dtoa_r+0x84>
 800e36a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e36e:	2800      	cmp	r0, #0
 800e370:	f000 8542 	beq.w	800edf8 <_dtoa_r+0xb08>
 800e374:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e376:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e624 <_dtoa_r+0x334>
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f000 8544 	beq.w	800ee08 <_dtoa_r+0xb18>
 800e380:	f10b 0303 	add.w	r3, fp, #3
 800e384:	f000 bd3e 	b.w	800ee04 <_dtoa_r+0xb14>
 800e388:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e38c:	2200      	movs	r2, #0
 800e38e:	2300      	movs	r3, #0
 800e390:	4630      	mov	r0, r6
 800e392:	4639      	mov	r1, r7
 800e394:	f7f2 fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 800e398:	4681      	mov	r9, r0
 800e39a:	b168      	cbz	r0, 800e3b8 <_dtoa_r+0xc8>
 800e39c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e39e:	2301      	movs	r3, #1
 800e3a0:	6013      	str	r3, [r2, #0]
 800e3a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f000 8524 	beq.w	800edf2 <_dtoa_r+0xb02>
 800e3aa:	4b9a      	ldr	r3, [pc, #616]	; (800e614 <_dtoa_r+0x324>)
 800e3ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e3ae:	f103 3bff 	add.w	fp, r3, #4294967295
 800e3b2:	6013      	str	r3, [r2, #0]
 800e3b4:	f000 bd28 	b.w	800ee08 <_dtoa_r+0xb18>
 800e3b8:	aa14      	add	r2, sp, #80	; 0x50
 800e3ba:	a915      	add	r1, sp, #84	; 0x54
 800e3bc:	ec47 6b10 	vmov	d0, r6, r7
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f000 fffe 	bl	800f3c2 <__d2b>
 800e3c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e3ca:	9004      	str	r0, [sp, #16]
 800e3cc:	2d00      	cmp	r5, #0
 800e3ce:	d07c      	beq.n	800e4ca <_dtoa_r+0x1da>
 800e3d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e3d8:	46b2      	mov	sl, r6
 800e3da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e3de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	4b8b      	ldr	r3, [pc, #556]	; (800e618 <_dtoa_r+0x328>)
 800e3ea:	4650      	mov	r0, sl
 800e3ec:	4659      	mov	r1, fp
 800e3ee:	f7f1 ff53 	bl	8000298 <__aeabi_dsub>
 800e3f2:	a381      	add	r3, pc, #516	; (adr r3, 800e5f8 <_dtoa_r+0x308>)
 800e3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f8:	f7f2 f906 	bl	8000608 <__aeabi_dmul>
 800e3fc:	a380      	add	r3, pc, #512	; (adr r3, 800e600 <_dtoa_r+0x310>)
 800e3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e402:	f7f1 ff4b 	bl	800029c <__adddf3>
 800e406:	4606      	mov	r6, r0
 800e408:	4628      	mov	r0, r5
 800e40a:	460f      	mov	r7, r1
 800e40c:	f7f2 f892 	bl	8000534 <__aeabi_i2d>
 800e410:	a37d      	add	r3, pc, #500	; (adr r3, 800e608 <_dtoa_r+0x318>)
 800e412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e416:	f7f2 f8f7 	bl	8000608 <__aeabi_dmul>
 800e41a:	4602      	mov	r2, r0
 800e41c:	460b      	mov	r3, r1
 800e41e:	4630      	mov	r0, r6
 800e420:	4639      	mov	r1, r7
 800e422:	f7f1 ff3b 	bl	800029c <__adddf3>
 800e426:	4606      	mov	r6, r0
 800e428:	460f      	mov	r7, r1
 800e42a:	f7f2 fb9d 	bl	8000b68 <__aeabi_d2iz>
 800e42e:	2200      	movs	r2, #0
 800e430:	4682      	mov	sl, r0
 800e432:	2300      	movs	r3, #0
 800e434:	4630      	mov	r0, r6
 800e436:	4639      	mov	r1, r7
 800e438:	f7f2 fb58 	bl	8000aec <__aeabi_dcmplt>
 800e43c:	b148      	cbz	r0, 800e452 <_dtoa_r+0x162>
 800e43e:	4650      	mov	r0, sl
 800e440:	f7f2 f878 	bl	8000534 <__aeabi_i2d>
 800e444:	4632      	mov	r2, r6
 800e446:	463b      	mov	r3, r7
 800e448:	f7f2 fb46 	bl	8000ad8 <__aeabi_dcmpeq>
 800e44c:	b908      	cbnz	r0, 800e452 <_dtoa_r+0x162>
 800e44e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e452:	f1ba 0f16 	cmp.w	sl, #22
 800e456:	d859      	bhi.n	800e50c <_dtoa_r+0x21c>
 800e458:	4970      	ldr	r1, [pc, #448]	; (800e61c <_dtoa_r+0x32c>)
 800e45a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e45e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e462:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e466:	f7f2 fb5f 	bl	8000b28 <__aeabi_dcmpgt>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d050      	beq.n	800e510 <_dtoa_r+0x220>
 800e46e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e472:	2300      	movs	r3, #0
 800e474:	930f      	str	r3, [sp, #60]	; 0x3c
 800e476:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e478:	1b5d      	subs	r5, r3, r5
 800e47a:	f1b5 0801 	subs.w	r8, r5, #1
 800e47e:	bf49      	itett	mi
 800e480:	f1c5 0301 	rsbmi	r3, r5, #1
 800e484:	2300      	movpl	r3, #0
 800e486:	9305      	strmi	r3, [sp, #20]
 800e488:	f04f 0800 	movmi.w	r8, #0
 800e48c:	bf58      	it	pl
 800e48e:	9305      	strpl	r3, [sp, #20]
 800e490:	f1ba 0f00 	cmp.w	sl, #0
 800e494:	db3e      	blt.n	800e514 <_dtoa_r+0x224>
 800e496:	2300      	movs	r3, #0
 800e498:	44d0      	add	r8, sl
 800e49a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e49e:	9307      	str	r3, [sp, #28]
 800e4a0:	9b06      	ldr	r3, [sp, #24]
 800e4a2:	2b09      	cmp	r3, #9
 800e4a4:	f200 8090 	bhi.w	800e5c8 <_dtoa_r+0x2d8>
 800e4a8:	2b05      	cmp	r3, #5
 800e4aa:	bfc4      	itt	gt
 800e4ac:	3b04      	subgt	r3, #4
 800e4ae:	9306      	strgt	r3, [sp, #24]
 800e4b0:	9b06      	ldr	r3, [sp, #24]
 800e4b2:	f1a3 0302 	sub.w	r3, r3, #2
 800e4b6:	bfcc      	ite	gt
 800e4b8:	2500      	movgt	r5, #0
 800e4ba:	2501      	movle	r5, #1
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	f200 808f 	bhi.w	800e5e0 <_dtoa_r+0x2f0>
 800e4c2:	e8df f003 	tbb	[pc, r3]
 800e4c6:	7f7d      	.short	0x7f7d
 800e4c8:	7131      	.short	0x7131
 800e4ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e4ce:	441d      	add	r5, r3
 800e4d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e4d4:	2820      	cmp	r0, #32
 800e4d6:	dd13      	ble.n	800e500 <_dtoa_r+0x210>
 800e4d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e4dc:	9b00      	ldr	r3, [sp, #0]
 800e4de:	fa08 f800 	lsl.w	r8, r8, r0
 800e4e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e4e6:	fa23 f000 	lsr.w	r0, r3, r0
 800e4ea:	ea48 0000 	orr.w	r0, r8, r0
 800e4ee:	f7f2 f811 	bl	8000514 <__aeabi_ui2d>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	4682      	mov	sl, r0
 800e4f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e4fa:	3d01      	subs	r5, #1
 800e4fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800e4fe:	e772      	b.n	800e3e6 <_dtoa_r+0xf6>
 800e500:	9b00      	ldr	r3, [sp, #0]
 800e502:	f1c0 0020 	rsb	r0, r0, #32
 800e506:	fa03 f000 	lsl.w	r0, r3, r0
 800e50a:	e7f0      	b.n	800e4ee <_dtoa_r+0x1fe>
 800e50c:	2301      	movs	r3, #1
 800e50e:	e7b1      	b.n	800e474 <_dtoa_r+0x184>
 800e510:	900f      	str	r0, [sp, #60]	; 0x3c
 800e512:	e7b0      	b.n	800e476 <_dtoa_r+0x186>
 800e514:	9b05      	ldr	r3, [sp, #20]
 800e516:	eba3 030a 	sub.w	r3, r3, sl
 800e51a:	9305      	str	r3, [sp, #20]
 800e51c:	f1ca 0300 	rsb	r3, sl, #0
 800e520:	9307      	str	r3, [sp, #28]
 800e522:	2300      	movs	r3, #0
 800e524:	930e      	str	r3, [sp, #56]	; 0x38
 800e526:	e7bb      	b.n	800e4a0 <_dtoa_r+0x1b0>
 800e528:	2301      	movs	r3, #1
 800e52a:	930a      	str	r3, [sp, #40]	; 0x28
 800e52c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e52e:	2b00      	cmp	r3, #0
 800e530:	dd59      	ble.n	800e5e6 <_dtoa_r+0x2f6>
 800e532:	9302      	str	r3, [sp, #8]
 800e534:	4699      	mov	r9, r3
 800e536:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e538:	2200      	movs	r2, #0
 800e53a:	6072      	str	r2, [r6, #4]
 800e53c:	2204      	movs	r2, #4
 800e53e:	f102 0014 	add.w	r0, r2, #20
 800e542:	4298      	cmp	r0, r3
 800e544:	6871      	ldr	r1, [r6, #4]
 800e546:	d953      	bls.n	800e5f0 <_dtoa_r+0x300>
 800e548:	4620      	mov	r0, r4
 800e54a:	f000 fcad 	bl	800eea8 <_Balloc>
 800e54e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e550:	6030      	str	r0, [r6, #0]
 800e552:	f1b9 0f0e 	cmp.w	r9, #14
 800e556:	f8d3 b000 	ldr.w	fp, [r3]
 800e55a:	f200 80e6 	bhi.w	800e72a <_dtoa_r+0x43a>
 800e55e:	2d00      	cmp	r5, #0
 800e560:	f000 80e3 	beq.w	800e72a <_dtoa_r+0x43a>
 800e564:	ed9d 7b00 	vldr	d7, [sp]
 800e568:	f1ba 0f00 	cmp.w	sl, #0
 800e56c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e570:	dd74      	ble.n	800e65c <_dtoa_r+0x36c>
 800e572:	4a2a      	ldr	r2, [pc, #168]	; (800e61c <_dtoa_r+0x32c>)
 800e574:	f00a 030f 	and.w	r3, sl, #15
 800e578:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e57c:	ed93 7b00 	vldr	d7, [r3]
 800e580:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e584:	06f0      	lsls	r0, r6, #27
 800e586:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e58a:	d565      	bpl.n	800e658 <_dtoa_r+0x368>
 800e58c:	4b24      	ldr	r3, [pc, #144]	; (800e620 <_dtoa_r+0x330>)
 800e58e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e592:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e596:	f7f2 f961 	bl	800085c <__aeabi_ddiv>
 800e59a:	e9cd 0100 	strd	r0, r1, [sp]
 800e59e:	f006 060f 	and.w	r6, r6, #15
 800e5a2:	2503      	movs	r5, #3
 800e5a4:	4f1e      	ldr	r7, [pc, #120]	; (800e620 <_dtoa_r+0x330>)
 800e5a6:	e04c      	b.n	800e642 <_dtoa_r+0x352>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	930a      	str	r3, [sp, #40]	; 0x28
 800e5ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5ae:	4453      	add	r3, sl
 800e5b0:	f103 0901 	add.w	r9, r3, #1
 800e5b4:	9302      	str	r3, [sp, #8]
 800e5b6:	464b      	mov	r3, r9
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	bfb8      	it	lt
 800e5bc:	2301      	movlt	r3, #1
 800e5be:	e7ba      	b.n	800e536 <_dtoa_r+0x246>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	e7b2      	b.n	800e52a <_dtoa_r+0x23a>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	e7f0      	b.n	800e5aa <_dtoa_r+0x2ba>
 800e5c8:	2501      	movs	r5, #1
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	9306      	str	r3, [sp, #24]
 800e5ce:	950a      	str	r5, [sp, #40]	; 0x28
 800e5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d4:	9302      	str	r3, [sp, #8]
 800e5d6:	4699      	mov	r9, r3
 800e5d8:	2200      	movs	r2, #0
 800e5da:	2312      	movs	r3, #18
 800e5dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800e5de:	e7aa      	b.n	800e536 <_dtoa_r+0x246>
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	930a      	str	r3, [sp, #40]	; 0x28
 800e5e4:	e7f4      	b.n	800e5d0 <_dtoa_r+0x2e0>
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	9302      	str	r3, [sp, #8]
 800e5ea:	4699      	mov	r9, r3
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	e7f5      	b.n	800e5dc <_dtoa_r+0x2ec>
 800e5f0:	3101      	adds	r1, #1
 800e5f2:	6071      	str	r1, [r6, #4]
 800e5f4:	0052      	lsls	r2, r2, #1
 800e5f6:	e7a2      	b.n	800e53e <_dtoa_r+0x24e>
 800e5f8:	636f4361 	.word	0x636f4361
 800e5fc:	3fd287a7 	.word	0x3fd287a7
 800e600:	8b60c8b3 	.word	0x8b60c8b3
 800e604:	3fc68a28 	.word	0x3fc68a28
 800e608:	509f79fb 	.word	0x509f79fb
 800e60c:	3fd34413 	.word	0x3fd34413
 800e610:	7ff00000 	.word	0x7ff00000
 800e614:	08010119 	.word	0x08010119
 800e618:	3ff80000 	.word	0x3ff80000
 800e61c:	08010180 	.word	0x08010180
 800e620:	08010158 	.word	0x08010158
 800e624:	08010145 	.word	0x08010145
 800e628:	07f1      	lsls	r1, r6, #31
 800e62a:	d508      	bpl.n	800e63e <_dtoa_r+0x34e>
 800e62c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e634:	f7f1 ffe8 	bl	8000608 <__aeabi_dmul>
 800e638:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e63c:	3501      	adds	r5, #1
 800e63e:	1076      	asrs	r6, r6, #1
 800e640:	3708      	adds	r7, #8
 800e642:	2e00      	cmp	r6, #0
 800e644:	d1f0      	bne.n	800e628 <_dtoa_r+0x338>
 800e646:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e64a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e64e:	f7f2 f905 	bl	800085c <__aeabi_ddiv>
 800e652:	e9cd 0100 	strd	r0, r1, [sp]
 800e656:	e01a      	b.n	800e68e <_dtoa_r+0x39e>
 800e658:	2502      	movs	r5, #2
 800e65a:	e7a3      	b.n	800e5a4 <_dtoa_r+0x2b4>
 800e65c:	f000 80a0 	beq.w	800e7a0 <_dtoa_r+0x4b0>
 800e660:	f1ca 0600 	rsb	r6, sl, #0
 800e664:	4b9f      	ldr	r3, [pc, #636]	; (800e8e4 <_dtoa_r+0x5f4>)
 800e666:	4fa0      	ldr	r7, [pc, #640]	; (800e8e8 <_dtoa_r+0x5f8>)
 800e668:	f006 020f 	and.w	r2, r6, #15
 800e66c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e674:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e678:	f7f1 ffc6 	bl	8000608 <__aeabi_dmul>
 800e67c:	e9cd 0100 	strd	r0, r1, [sp]
 800e680:	1136      	asrs	r6, r6, #4
 800e682:	2300      	movs	r3, #0
 800e684:	2502      	movs	r5, #2
 800e686:	2e00      	cmp	r6, #0
 800e688:	d17f      	bne.n	800e78a <_dtoa_r+0x49a>
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d1e1      	bne.n	800e652 <_dtoa_r+0x362>
 800e68e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e690:	2b00      	cmp	r3, #0
 800e692:	f000 8087 	beq.w	800e7a4 <_dtoa_r+0x4b4>
 800e696:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e69a:	2200      	movs	r2, #0
 800e69c:	4b93      	ldr	r3, [pc, #588]	; (800e8ec <_dtoa_r+0x5fc>)
 800e69e:	4630      	mov	r0, r6
 800e6a0:	4639      	mov	r1, r7
 800e6a2:	f7f2 fa23 	bl	8000aec <__aeabi_dcmplt>
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	d07c      	beq.n	800e7a4 <_dtoa_r+0x4b4>
 800e6aa:	f1b9 0f00 	cmp.w	r9, #0
 800e6ae:	d079      	beq.n	800e7a4 <_dtoa_r+0x4b4>
 800e6b0:	9b02      	ldr	r3, [sp, #8]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	dd35      	ble.n	800e722 <_dtoa_r+0x432>
 800e6b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e6ba:	9308      	str	r3, [sp, #32]
 800e6bc:	4639      	mov	r1, r7
 800e6be:	2200      	movs	r2, #0
 800e6c0:	4b8b      	ldr	r3, [pc, #556]	; (800e8f0 <_dtoa_r+0x600>)
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	f7f1 ffa0 	bl	8000608 <__aeabi_dmul>
 800e6c8:	e9cd 0100 	strd	r0, r1, [sp]
 800e6cc:	9f02      	ldr	r7, [sp, #8]
 800e6ce:	3501      	adds	r5, #1
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f7f1 ff2f 	bl	8000534 <__aeabi_i2d>
 800e6d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6da:	f7f1 ff95 	bl	8000608 <__aeabi_dmul>
 800e6de:	2200      	movs	r2, #0
 800e6e0:	4b84      	ldr	r3, [pc, #528]	; (800e8f4 <_dtoa_r+0x604>)
 800e6e2:	f7f1 fddb 	bl	800029c <__adddf3>
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e6ec:	2f00      	cmp	r7, #0
 800e6ee:	d15d      	bne.n	800e7ac <_dtoa_r+0x4bc>
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	4b81      	ldr	r3, [pc, #516]	; (800e8f8 <_dtoa_r+0x608>)
 800e6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6f8:	f7f1 fdce 	bl	8000298 <__aeabi_dsub>
 800e6fc:	462a      	mov	r2, r5
 800e6fe:	4633      	mov	r3, r6
 800e700:	e9cd 0100 	strd	r0, r1, [sp]
 800e704:	f7f2 fa10 	bl	8000b28 <__aeabi_dcmpgt>
 800e708:	2800      	cmp	r0, #0
 800e70a:	f040 8288 	bne.w	800ec1e <_dtoa_r+0x92e>
 800e70e:	462a      	mov	r2, r5
 800e710:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e714:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e718:	f7f2 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	f040 827c 	bne.w	800ec1a <_dtoa_r+0x92a>
 800e722:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e726:	e9cd 2300 	strd	r2, r3, [sp]
 800e72a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f2c0 8150 	blt.w	800e9d2 <_dtoa_r+0x6e2>
 800e732:	f1ba 0f0e 	cmp.w	sl, #14
 800e736:	f300 814c 	bgt.w	800e9d2 <_dtoa_r+0x6e2>
 800e73a:	4b6a      	ldr	r3, [pc, #424]	; (800e8e4 <_dtoa_r+0x5f4>)
 800e73c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e740:	ed93 7b00 	vldr	d7, [r3]
 800e744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e746:	2b00      	cmp	r3, #0
 800e748:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e74c:	f280 80d8 	bge.w	800e900 <_dtoa_r+0x610>
 800e750:	f1b9 0f00 	cmp.w	r9, #0
 800e754:	f300 80d4 	bgt.w	800e900 <_dtoa_r+0x610>
 800e758:	f040 825e 	bne.w	800ec18 <_dtoa_r+0x928>
 800e75c:	2200      	movs	r2, #0
 800e75e:	4b66      	ldr	r3, [pc, #408]	; (800e8f8 <_dtoa_r+0x608>)
 800e760:	ec51 0b17 	vmov	r0, r1, d7
 800e764:	f7f1 ff50 	bl	8000608 <__aeabi_dmul>
 800e768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e76c:	f7f2 f9d2 	bl	8000b14 <__aeabi_dcmpge>
 800e770:	464f      	mov	r7, r9
 800e772:	464e      	mov	r6, r9
 800e774:	2800      	cmp	r0, #0
 800e776:	f040 8234 	bne.w	800ebe2 <_dtoa_r+0x8f2>
 800e77a:	2331      	movs	r3, #49	; 0x31
 800e77c:	f10b 0501 	add.w	r5, fp, #1
 800e780:	f88b 3000 	strb.w	r3, [fp]
 800e784:	f10a 0a01 	add.w	sl, sl, #1
 800e788:	e22f      	b.n	800ebea <_dtoa_r+0x8fa>
 800e78a:	07f2      	lsls	r2, r6, #31
 800e78c:	d505      	bpl.n	800e79a <_dtoa_r+0x4aa>
 800e78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e792:	f7f1 ff39 	bl	8000608 <__aeabi_dmul>
 800e796:	3501      	adds	r5, #1
 800e798:	2301      	movs	r3, #1
 800e79a:	1076      	asrs	r6, r6, #1
 800e79c:	3708      	adds	r7, #8
 800e79e:	e772      	b.n	800e686 <_dtoa_r+0x396>
 800e7a0:	2502      	movs	r5, #2
 800e7a2:	e774      	b.n	800e68e <_dtoa_r+0x39e>
 800e7a4:	f8cd a020 	str.w	sl, [sp, #32]
 800e7a8:	464f      	mov	r7, r9
 800e7aa:	e791      	b.n	800e6d0 <_dtoa_r+0x3e0>
 800e7ac:	4b4d      	ldr	r3, [pc, #308]	; (800e8e4 <_dtoa_r+0x5f4>)
 800e7ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e7b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d047      	beq.n	800e84c <_dtoa_r+0x55c>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	2000      	movs	r0, #0
 800e7c2:	494e      	ldr	r1, [pc, #312]	; (800e8fc <_dtoa_r+0x60c>)
 800e7c4:	f7f2 f84a 	bl	800085c <__aeabi_ddiv>
 800e7c8:	462a      	mov	r2, r5
 800e7ca:	4633      	mov	r3, r6
 800e7cc:	f7f1 fd64 	bl	8000298 <__aeabi_dsub>
 800e7d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e7d4:	465d      	mov	r5, fp
 800e7d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7da:	f7f2 f9c5 	bl	8000b68 <__aeabi_d2iz>
 800e7de:	4606      	mov	r6, r0
 800e7e0:	f7f1 fea8 	bl	8000534 <__aeabi_i2d>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7ec:	f7f1 fd54 	bl	8000298 <__aeabi_dsub>
 800e7f0:	3630      	adds	r6, #48	; 0x30
 800e7f2:	f805 6b01 	strb.w	r6, [r5], #1
 800e7f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e7fa:	e9cd 0100 	strd	r0, r1, [sp]
 800e7fe:	f7f2 f975 	bl	8000aec <__aeabi_dcmplt>
 800e802:	2800      	cmp	r0, #0
 800e804:	d163      	bne.n	800e8ce <_dtoa_r+0x5de>
 800e806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e80a:	2000      	movs	r0, #0
 800e80c:	4937      	ldr	r1, [pc, #220]	; (800e8ec <_dtoa_r+0x5fc>)
 800e80e:	f7f1 fd43 	bl	8000298 <__aeabi_dsub>
 800e812:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e816:	f7f2 f969 	bl	8000aec <__aeabi_dcmplt>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	f040 80b7 	bne.w	800e98e <_dtoa_r+0x69e>
 800e820:	eba5 030b 	sub.w	r3, r5, fp
 800e824:	429f      	cmp	r7, r3
 800e826:	f77f af7c 	ble.w	800e722 <_dtoa_r+0x432>
 800e82a:	2200      	movs	r2, #0
 800e82c:	4b30      	ldr	r3, [pc, #192]	; (800e8f0 <_dtoa_r+0x600>)
 800e82e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e832:	f7f1 fee9 	bl	8000608 <__aeabi_dmul>
 800e836:	2200      	movs	r2, #0
 800e838:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e83c:	4b2c      	ldr	r3, [pc, #176]	; (800e8f0 <_dtoa_r+0x600>)
 800e83e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e842:	f7f1 fee1 	bl	8000608 <__aeabi_dmul>
 800e846:	e9cd 0100 	strd	r0, r1, [sp]
 800e84a:	e7c4      	b.n	800e7d6 <_dtoa_r+0x4e6>
 800e84c:	462a      	mov	r2, r5
 800e84e:	4633      	mov	r3, r6
 800e850:	f7f1 feda 	bl	8000608 <__aeabi_dmul>
 800e854:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e858:	eb0b 0507 	add.w	r5, fp, r7
 800e85c:	465e      	mov	r6, fp
 800e85e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e862:	f7f2 f981 	bl	8000b68 <__aeabi_d2iz>
 800e866:	4607      	mov	r7, r0
 800e868:	f7f1 fe64 	bl	8000534 <__aeabi_i2d>
 800e86c:	3730      	adds	r7, #48	; 0x30
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e876:	f7f1 fd0f 	bl	8000298 <__aeabi_dsub>
 800e87a:	f806 7b01 	strb.w	r7, [r6], #1
 800e87e:	42ae      	cmp	r6, r5
 800e880:	e9cd 0100 	strd	r0, r1, [sp]
 800e884:	f04f 0200 	mov.w	r2, #0
 800e888:	d126      	bne.n	800e8d8 <_dtoa_r+0x5e8>
 800e88a:	4b1c      	ldr	r3, [pc, #112]	; (800e8fc <_dtoa_r+0x60c>)
 800e88c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e890:	f7f1 fd04 	bl	800029c <__adddf3>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e89c:	f7f2 f944 	bl	8000b28 <__aeabi_dcmpgt>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d174      	bne.n	800e98e <_dtoa_r+0x69e>
 800e8a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	4914      	ldr	r1, [pc, #80]	; (800e8fc <_dtoa_r+0x60c>)
 800e8ac:	f7f1 fcf4 	bl	8000298 <__aeabi_dsub>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8b8:	f7f2 f918 	bl	8000aec <__aeabi_dcmplt>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	f43f af30 	beq.w	800e722 <_dtoa_r+0x432>
 800e8c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8c6:	2b30      	cmp	r3, #48	; 0x30
 800e8c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800e8cc:	d002      	beq.n	800e8d4 <_dtoa_r+0x5e4>
 800e8ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e8d2:	e04a      	b.n	800e96a <_dtoa_r+0x67a>
 800e8d4:	4615      	mov	r5, r2
 800e8d6:	e7f4      	b.n	800e8c2 <_dtoa_r+0x5d2>
 800e8d8:	4b05      	ldr	r3, [pc, #20]	; (800e8f0 <_dtoa_r+0x600>)
 800e8da:	f7f1 fe95 	bl	8000608 <__aeabi_dmul>
 800e8de:	e9cd 0100 	strd	r0, r1, [sp]
 800e8e2:	e7bc      	b.n	800e85e <_dtoa_r+0x56e>
 800e8e4:	08010180 	.word	0x08010180
 800e8e8:	08010158 	.word	0x08010158
 800e8ec:	3ff00000 	.word	0x3ff00000
 800e8f0:	40240000 	.word	0x40240000
 800e8f4:	401c0000 	.word	0x401c0000
 800e8f8:	40140000 	.word	0x40140000
 800e8fc:	3fe00000 	.word	0x3fe00000
 800e900:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e904:	465d      	mov	r5, fp
 800e906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e90a:	4630      	mov	r0, r6
 800e90c:	4639      	mov	r1, r7
 800e90e:	f7f1 ffa5 	bl	800085c <__aeabi_ddiv>
 800e912:	f7f2 f929 	bl	8000b68 <__aeabi_d2iz>
 800e916:	4680      	mov	r8, r0
 800e918:	f7f1 fe0c 	bl	8000534 <__aeabi_i2d>
 800e91c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e920:	f7f1 fe72 	bl	8000608 <__aeabi_dmul>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4630      	mov	r0, r6
 800e92a:	4639      	mov	r1, r7
 800e92c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e930:	f7f1 fcb2 	bl	8000298 <__aeabi_dsub>
 800e934:	f805 6b01 	strb.w	r6, [r5], #1
 800e938:	eba5 060b 	sub.w	r6, r5, fp
 800e93c:	45b1      	cmp	r9, r6
 800e93e:	4602      	mov	r2, r0
 800e940:	460b      	mov	r3, r1
 800e942:	d139      	bne.n	800e9b8 <_dtoa_r+0x6c8>
 800e944:	f7f1 fcaa 	bl	800029c <__adddf3>
 800e948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e94c:	4606      	mov	r6, r0
 800e94e:	460f      	mov	r7, r1
 800e950:	f7f2 f8ea 	bl	8000b28 <__aeabi_dcmpgt>
 800e954:	b9c8      	cbnz	r0, 800e98a <_dtoa_r+0x69a>
 800e956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e95a:	4630      	mov	r0, r6
 800e95c:	4639      	mov	r1, r7
 800e95e:	f7f2 f8bb 	bl	8000ad8 <__aeabi_dcmpeq>
 800e962:	b110      	cbz	r0, 800e96a <_dtoa_r+0x67a>
 800e964:	f018 0f01 	tst.w	r8, #1
 800e968:	d10f      	bne.n	800e98a <_dtoa_r+0x69a>
 800e96a:	9904      	ldr	r1, [sp, #16]
 800e96c:	4620      	mov	r0, r4
 800e96e:	f000 facf 	bl	800ef10 <_Bfree>
 800e972:	2300      	movs	r3, #0
 800e974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e976:	702b      	strb	r3, [r5, #0]
 800e978:	f10a 0301 	add.w	r3, sl, #1
 800e97c:	6013      	str	r3, [r2, #0]
 800e97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e980:	2b00      	cmp	r3, #0
 800e982:	f000 8241 	beq.w	800ee08 <_dtoa_r+0xb18>
 800e986:	601d      	str	r5, [r3, #0]
 800e988:	e23e      	b.n	800ee08 <_dtoa_r+0xb18>
 800e98a:	f8cd a020 	str.w	sl, [sp, #32]
 800e98e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e992:	2a39      	cmp	r2, #57	; 0x39
 800e994:	f105 33ff 	add.w	r3, r5, #4294967295
 800e998:	d108      	bne.n	800e9ac <_dtoa_r+0x6bc>
 800e99a:	459b      	cmp	fp, r3
 800e99c:	d10a      	bne.n	800e9b4 <_dtoa_r+0x6c4>
 800e99e:	9b08      	ldr	r3, [sp, #32]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	9308      	str	r3, [sp, #32]
 800e9a4:	2330      	movs	r3, #48	; 0x30
 800e9a6:	f88b 3000 	strb.w	r3, [fp]
 800e9aa:	465b      	mov	r3, fp
 800e9ac:	781a      	ldrb	r2, [r3, #0]
 800e9ae:	3201      	adds	r2, #1
 800e9b0:	701a      	strb	r2, [r3, #0]
 800e9b2:	e78c      	b.n	800e8ce <_dtoa_r+0x5de>
 800e9b4:	461d      	mov	r5, r3
 800e9b6:	e7ea      	b.n	800e98e <_dtoa_r+0x69e>
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	4b9b      	ldr	r3, [pc, #620]	; (800ec28 <_dtoa_r+0x938>)
 800e9bc:	f7f1 fe24 	bl	8000608 <__aeabi_dmul>
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	4606      	mov	r6, r0
 800e9c6:	460f      	mov	r7, r1
 800e9c8:	f7f2 f886 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	d09a      	beq.n	800e906 <_dtoa_r+0x616>
 800e9d0:	e7cb      	b.n	800e96a <_dtoa_r+0x67a>
 800e9d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9d4:	2a00      	cmp	r2, #0
 800e9d6:	f000 808b 	beq.w	800eaf0 <_dtoa_r+0x800>
 800e9da:	9a06      	ldr	r2, [sp, #24]
 800e9dc:	2a01      	cmp	r2, #1
 800e9de:	dc6e      	bgt.n	800eabe <_dtoa_r+0x7ce>
 800e9e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e9e2:	2a00      	cmp	r2, #0
 800e9e4:	d067      	beq.n	800eab6 <_dtoa_r+0x7c6>
 800e9e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e9ea:	9f07      	ldr	r7, [sp, #28]
 800e9ec:	9d05      	ldr	r5, [sp, #20]
 800e9ee:	9a05      	ldr	r2, [sp, #20]
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	441a      	add	r2, r3
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	9205      	str	r2, [sp, #20]
 800e9f8:	4498      	add	r8, r3
 800e9fa:	f000 fb29 	bl	800f050 <__i2b>
 800e9fe:	4606      	mov	r6, r0
 800ea00:	2d00      	cmp	r5, #0
 800ea02:	dd0c      	ble.n	800ea1e <_dtoa_r+0x72e>
 800ea04:	f1b8 0f00 	cmp.w	r8, #0
 800ea08:	dd09      	ble.n	800ea1e <_dtoa_r+0x72e>
 800ea0a:	4545      	cmp	r5, r8
 800ea0c:	9a05      	ldr	r2, [sp, #20]
 800ea0e:	462b      	mov	r3, r5
 800ea10:	bfa8      	it	ge
 800ea12:	4643      	movge	r3, r8
 800ea14:	1ad2      	subs	r2, r2, r3
 800ea16:	9205      	str	r2, [sp, #20]
 800ea18:	1aed      	subs	r5, r5, r3
 800ea1a:	eba8 0803 	sub.w	r8, r8, r3
 800ea1e:	9b07      	ldr	r3, [sp, #28]
 800ea20:	b1eb      	cbz	r3, 800ea5e <_dtoa_r+0x76e>
 800ea22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d067      	beq.n	800eaf8 <_dtoa_r+0x808>
 800ea28:	b18f      	cbz	r7, 800ea4e <_dtoa_r+0x75e>
 800ea2a:	4631      	mov	r1, r6
 800ea2c:	463a      	mov	r2, r7
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f000 fbae 	bl	800f190 <__pow5mult>
 800ea34:	9a04      	ldr	r2, [sp, #16]
 800ea36:	4601      	mov	r1, r0
 800ea38:	4606      	mov	r6, r0
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f000 fb11 	bl	800f062 <__multiply>
 800ea40:	9904      	ldr	r1, [sp, #16]
 800ea42:	9008      	str	r0, [sp, #32]
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 fa63 	bl	800ef10 <_Bfree>
 800ea4a:	9b08      	ldr	r3, [sp, #32]
 800ea4c:	9304      	str	r3, [sp, #16]
 800ea4e:	9b07      	ldr	r3, [sp, #28]
 800ea50:	1bda      	subs	r2, r3, r7
 800ea52:	d004      	beq.n	800ea5e <_dtoa_r+0x76e>
 800ea54:	9904      	ldr	r1, [sp, #16]
 800ea56:	4620      	mov	r0, r4
 800ea58:	f000 fb9a 	bl	800f190 <__pow5mult>
 800ea5c:	9004      	str	r0, [sp, #16]
 800ea5e:	2101      	movs	r1, #1
 800ea60:	4620      	mov	r0, r4
 800ea62:	f000 faf5 	bl	800f050 <__i2b>
 800ea66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea68:	4607      	mov	r7, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f000 81d0 	beq.w	800ee10 <_dtoa_r+0xb20>
 800ea70:	461a      	mov	r2, r3
 800ea72:	4601      	mov	r1, r0
 800ea74:	4620      	mov	r0, r4
 800ea76:	f000 fb8b 	bl	800f190 <__pow5mult>
 800ea7a:	9b06      	ldr	r3, [sp, #24]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	4607      	mov	r7, r0
 800ea80:	dc40      	bgt.n	800eb04 <_dtoa_r+0x814>
 800ea82:	9b00      	ldr	r3, [sp, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d139      	bne.n	800eafc <_dtoa_r+0x80c>
 800ea88:	9b01      	ldr	r3, [sp, #4]
 800ea8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d136      	bne.n	800eb00 <_dtoa_r+0x810>
 800ea92:	9b01      	ldr	r3, [sp, #4]
 800ea94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea98:	0d1b      	lsrs	r3, r3, #20
 800ea9a:	051b      	lsls	r3, r3, #20
 800ea9c:	b12b      	cbz	r3, 800eaaa <_dtoa_r+0x7ba>
 800ea9e:	9b05      	ldr	r3, [sp, #20]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	9305      	str	r3, [sp, #20]
 800eaa4:	f108 0801 	add.w	r8, r8, #1
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	9307      	str	r3, [sp, #28]
 800eaac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d12a      	bne.n	800eb08 <_dtoa_r+0x818>
 800eab2:	2001      	movs	r0, #1
 800eab4:	e030      	b.n	800eb18 <_dtoa_r+0x828>
 800eab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eab8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eabc:	e795      	b.n	800e9ea <_dtoa_r+0x6fa>
 800eabe:	9b07      	ldr	r3, [sp, #28]
 800eac0:	f109 37ff 	add.w	r7, r9, #4294967295
 800eac4:	42bb      	cmp	r3, r7
 800eac6:	bfbf      	itttt	lt
 800eac8:	9b07      	ldrlt	r3, [sp, #28]
 800eaca:	9707      	strlt	r7, [sp, #28]
 800eacc:	1afa      	sublt	r2, r7, r3
 800eace:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ead0:	bfbb      	ittet	lt
 800ead2:	189b      	addlt	r3, r3, r2
 800ead4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ead6:	1bdf      	subge	r7, r3, r7
 800ead8:	2700      	movlt	r7, #0
 800eada:	f1b9 0f00 	cmp.w	r9, #0
 800eade:	bfb5      	itete	lt
 800eae0:	9b05      	ldrlt	r3, [sp, #20]
 800eae2:	9d05      	ldrge	r5, [sp, #20]
 800eae4:	eba3 0509 	sublt.w	r5, r3, r9
 800eae8:	464b      	movge	r3, r9
 800eaea:	bfb8      	it	lt
 800eaec:	2300      	movlt	r3, #0
 800eaee:	e77e      	b.n	800e9ee <_dtoa_r+0x6fe>
 800eaf0:	9f07      	ldr	r7, [sp, #28]
 800eaf2:	9d05      	ldr	r5, [sp, #20]
 800eaf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800eaf6:	e783      	b.n	800ea00 <_dtoa_r+0x710>
 800eaf8:	9a07      	ldr	r2, [sp, #28]
 800eafa:	e7ab      	b.n	800ea54 <_dtoa_r+0x764>
 800eafc:	2300      	movs	r3, #0
 800eafe:	e7d4      	b.n	800eaaa <_dtoa_r+0x7ba>
 800eb00:	9b00      	ldr	r3, [sp, #0]
 800eb02:	e7d2      	b.n	800eaaa <_dtoa_r+0x7ba>
 800eb04:	2300      	movs	r3, #0
 800eb06:	9307      	str	r3, [sp, #28]
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800eb0e:	6918      	ldr	r0, [r3, #16]
 800eb10:	f000 fa50 	bl	800efb4 <__hi0bits>
 800eb14:	f1c0 0020 	rsb	r0, r0, #32
 800eb18:	4440      	add	r0, r8
 800eb1a:	f010 001f 	ands.w	r0, r0, #31
 800eb1e:	d047      	beq.n	800ebb0 <_dtoa_r+0x8c0>
 800eb20:	f1c0 0320 	rsb	r3, r0, #32
 800eb24:	2b04      	cmp	r3, #4
 800eb26:	dd3b      	ble.n	800eba0 <_dtoa_r+0x8b0>
 800eb28:	9b05      	ldr	r3, [sp, #20]
 800eb2a:	f1c0 001c 	rsb	r0, r0, #28
 800eb2e:	4403      	add	r3, r0
 800eb30:	9305      	str	r3, [sp, #20]
 800eb32:	4405      	add	r5, r0
 800eb34:	4480      	add	r8, r0
 800eb36:	9b05      	ldr	r3, [sp, #20]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	dd05      	ble.n	800eb48 <_dtoa_r+0x858>
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	9904      	ldr	r1, [sp, #16]
 800eb40:	4620      	mov	r0, r4
 800eb42:	f000 fb73 	bl	800f22c <__lshift>
 800eb46:	9004      	str	r0, [sp, #16]
 800eb48:	f1b8 0f00 	cmp.w	r8, #0
 800eb4c:	dd05      	ble.n	800eb5a <_dtoa_r+0x86a>
 800eb4e:	4639      	mov	r1, r7
 800eb50:	4642      	mov	r2, r8
 800eb52:	4620      	mov	r0, r4
 800eb54:	f000 fb6a 	bl	800f22c <__lshift>
 800eb58:	4607      	mov	r7, r0
 800eb5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb5c:	b353      	cbz	r3, 800ebb4 <_dtoa_r+0x8c4>
 800eb5e:	4639      	mov	r1, r7
 800eb60:	9804      	ldr	r0, [sp, #16]
 800eb62:	f000 fbb7 	bl	800f2d4 <__mcmp>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	da24      	bge.n	800ebb4 <_dtoa_r+0x8c4>
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	220a      	movs	r2, #10
 800eb6e:	9904      	ldr	r1, [sp, #16]
 800eb70:	4620      	mov	r0, r4
 800eb72:	f000 f9e4 	bl	800ef3e <__multadd>
 800eb76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb78:	9004      	str	r0, [sp, #16]
 800eb7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	f000 814d 	beq.w	800ee1e <_dtoa_r+0xb2e>
 800eb84:	2300      	movs	r3, #0
 800eb86:	4631      	mov	r1, r6
 800eb88:	220a      	movs	r2, #10
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f000 f9d7 	bl	800ef3e <__multadd>
 800eb90:	9b02      	ldr	r3, [sp, #8]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	4606      	mov	r6, r0
 800eb96:	dc4f      	bgt.n	800ec38 <_dtoa_r+0x948>
 800eb98:	9b06      	ldr	r3, [sp, #24]
 800eb9a:	2b02      	cmp	r3, #2
 800eb9c:	dd4c      	ble.n	800ec38 <_dtoa_r+0x948>
 800eb9e:	e011      	b.n	800ebc4 <_dtoa_r+0x8d4>
 800eba0:	d0c9      	beq.n	800eb36 <_dtoa_r+0x846>
 800eba2:	9a05      	ldr	r2, [sp, #20]
 800eba4:	331c      	adds	r3, #28
 800eba6:	441a      	add	r2, r3
 800eba8:	9205      	str	r2, [sp, #20]
 800ebaa:	441d      	add	r5, r3
 800ebac:	4498      	add	r8, r3
 800ebae:	e7c2      	b.n	800eb36 <_dtoa_r+0x846>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	e7f6      	b.n	800eba2 <_dtoa_r+0x8b2>
 800ebb4:	f1b9 0f00 	cmp.w	r9, #0
 800ebb8:	dc38      	bgt.n	800ec2c <_dtoa_r+0x93c>
 800ebba:	9b06      	ldr	r3, [sp, #24]
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	dd35      	ble.n	800ec2c <_dtoa_r+0x93c>
 800ebc0:	f8cd 9008 	str.w	r9, [sp, #8]
 800ebc4:	9b02      	ldr	r3, [sp, #8]
 800ebc6:	b963      	cbnz	r3, 800ebe2 <_dtoa_r+0x8f2>
 800ebc8:	4639      	mov	r1, r7
 800ebca:	2205      	movs	r2, #5
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f000 f9b6 	bl	800ef3e <__multadd>
 800ebd2:	4601      	mov	r1, r0
 800ebd4:	4607      	mov	r7, r0
 800ebd6:	9804      	ldr	r0, [sp, #16]
 800ebd8:	f000 fb7c 	bl	800f2d4 <__mcmp>
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	f73f adcc 	bgt.w	800e77a <_dtoa_r+0x48a>
 800ebe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebe4:	465d      	mov	r5, fp
 800ebe6:	ea6f 0a03 	mvn.w	sl, r3
 800ebea:	f04f 0900 	mov.w	r9, #0
 800ebee:	4639      	mov	r1, r7
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f000 f98d 	bl	800ef10 <_Bfree>
 800ebf6:	2e00      	cmp	r6, #0
 800ebf8:	f43f aeb7 	beq.w	800e96a <_dtoa_r+0x67a>
 800ebfc:	f1b9 0f00 	cmp.w	r9, #0
 800ec00:	d005      	beq.n	800ec0e <_dtoa_r+0x91e>
 800ec02:	45b1      	cmp	r9, r6
 800ec04:	d003      	beq.n	800ec0e <_dtoa_r+0x91e>
 800ec06:	4649      	mov	r1, r9
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f000 f981 	bl	800ef10 <_Bfree>
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4620      	mov	r0, r4
 800ec12:	f000 f97d 	bl	800ef10 <_Bfree>
 800ec16:	e6a8      	b.n	800e96a <_dtoa_r+0x67a>
 800ec18:	2700      	movs	r7, #0
 800ec1a:	463e      	mov	r6, r7
 800ec1c:	e7e1      	b.n	800ebe2 <_dtoa_r+0x8f2>
 800ec1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ec22:	463e      	mov	r6, r7
 800ec24:	e5a9      	b.n	800e77a <_dtoa_r+0x48a>
 800ec26:	bf00      	nop
 800ec28:	40240000 	.word	0x40240000
 800ec2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f000 80fa 	beq.w	800ee2c <_dtoa_r+0xb3c>
 800ec38:	2d00      	cmp	r5, #0
 800ec3a:	dd05      	ble.n	800ec48 <_dtoa_r+0x958>
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	462a      	mov	r2, r5
 800ec40:	4620      	mov	r0, r4
 800ec42:	f000 faf3 	bl	800f22c <__lshift>
 800ec46:	4606      	mov	r6, r0
 800ec48:	9b07      	ldr	r3, [sp, #28]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d04c      	beq.n	800ece8 <_dtoa_r+0x9f8>
 800ec4e:	6871      	ldr	r1, [r6, #4]
 800ec50:	4620      	mov	r0, r4
 800ec52:	f000 f929 	bl	800eea8 <_Balloc>
 800ec56:	6932      	ldr	r2, [r6, #16]
 800ec58:	3202      	adds	r2, #2
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	0092      	lsls	r2, r2, #2
 800ec5e:	f106 010c 	add.w	r1, r6, #12
 800ec62:	300c      	adds	r0, #12
 800ec64:	f7fe fc08 	bl	800d478 <memcpy>
 800ec68:	2201      	movs	r2, #1
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f000 fadd 	bl	800f22c <__lshift>
 800ec72:	9b00      	ldr	r3, [sp, #0]
 800ec74:	f8cd b014 	str.w	fp, [sp, #20]
 800ec78:	f003 0301 	and.w	r3, r3, #1
 800ec7c:	46b1      	mov	r9, r6
 800ec7e:	9307      	str	r3, [sp, #28]
 800ec80:	4606      	mov	r6, r0
 800ec82:	4639      	mov	r1, r7
 800ec84:	9804      	ldr	r0, [sp, #16]
 800ec86:	f7ff faa7 	bl	800e1d8 <quorem>
 800ec8a:	4649      	mov	r1, r9
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ec92:	9804      	ldr	r0, [sp, #16]
 800ec94:	f000 fb1e 	bl	800f2d4 <__mcmp>
 800ec98:	4632      	mov	r2, r6
 800ec9a:	9000      	str	r0, [sp, #0]
 800ec9c:	4639      	mov	r1, r7
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f000 fb32 	bl	800f308 <__mdiff>
 800eca4:	68c3      	ldr	r3, [r0, #12]
 800eca6:	4602      	mov	r2, r0
 800eca8:	bb03      	cbnz	r3, 800ecec <_dtoa_r+0x9fc>
 800ecaa:	4601      	mov	r1, r0
 800ecac:	9008      	str	r0, [sp, #32]
 800ecae:	9804      	ldr	r0, [sp, #16]
 800ecb0:	f000 fb10 	bl	800f2d4 <__mcmp>
 800ecb4:	9a08      	ldr	r2, [sp, #32]
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	4611      	mov	r1, r2
 800ecba:	4620      	mov	r0, r4
 800ecbc:	9308      	str	r3, [sp, #32]
 800ecbe:	f000 f927 	bl	800ef10 <_Bfree>
 800ecc2:	9b08      	ldr	r3, [sp, #32]
 800ecc4:	b9a3      	cbnz	r3, 800ecf0 <_dtoa_r+0xa00>
 800ecc6:	9a06      	ldr	r2, [sp, #24]
 800ecc8:	b992      	cbnz	r2, 800ecf0 <_dtoa_r+0xa00>
 800ecca:	9a07      	ldr	r2, [sp, #28]
 800eccc:	b982      	cbnz	r2, 800ecf0 <_dtoa_r+0xa00>
 800ecce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ecd2:	d029      	beq.n	800ed28 <_dtoa_r+0xa38>
 800ecd4:	9b00      	ldr	r3, [sp, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	dd01      	ble.n	800ecde <_dtoa_r+0x9ee>
 800ecda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ecde:	9b05      	ldr	r3, [sp, #20]
 800ece0:	1c5d      	adds	r5, r3, #1
 800ece2:	f883 8000 	strb.w	r8, [r3]
 800ece6:	e782      	b.n	800ebee <_dtoa_r+0x8fe>
 800ece8:	4630      	mov	r0, r6
 800ecea:	e7c2      	b.n	800ec72 <_dtoa_r+0x982>
 800ecec:	2301      	movs	r3, #1
 800ecee:	e7e3      	b.n	800ecb8 <_dtoa_r+0x9c8>
 800ecf0:	9a00      	ldr	r2, [sp, #0]
 800ecf2:	2a00      	cmp	r2, #0
 800ecf4:	db04      	blt.n	800ed00 <_dtoa_r+0xa10>
 800ecf6:	d125      	bne.n	800ed44 <_dtoa_r+0xa54>
 800ecf8:	9a06      	ldr	r2, [sp, #24]
 800ecfa:	bb1a      	cbnz	r2, 800ed44 <_dtoa_r+0xa54>
 800ecfc:	9a07      	ldr	r2, [sp, #28]
 800ecfe:	bb0a      	cbnz	r2, 800ed44 <_dtoa_r+0xa54>
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	ddec      	ble.n	800ecde <_dtoa_r+0x9ee>
 800ed04:	2201      	movs	r2, #1
 800ed06:	9904      	ldr	r1, [sp, #16]
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f000 fa8f 	bl	800f22c <__lshift>
 800ed0e:	4639      	mov	r1, r7
 800ed10:	9004      	str	r0, [sp, #16]
 800ed12:	f000 fadf 	bl	800f2d4 <__mcmp>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	dc03      	bgt.n	800ed22 <_dtoa_r+0xa32>
 800ed1a:	d1e0      	bne.n	800ecde <_dtoa_r+0x9ee>
 800ed1c:	f018 0f01 	tst.w	r8, #1
 800ed20:	d0dd      	beq.n	800ecde <_dtoa_r+0x9ee>
 800ed22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed26:	d1d8      	bne.n	800ecda <_dtoa_r+0x9ea>
 800ed28:	9b05      	ldr	r3, [sp, #20]
 800ed2a:	9a05      	ldr	r2, [sp, #20]
 800ed2c:	1c5d      	adds	r5, r3, #1
 800ed2e:	2339      	movs	r3, #57	; 0x39
 800ed30:	7013      	strb	r3, [r2, #0]
 800ed32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed36:	2b39      	cmp	r3, #57	; 0x39
 800ed38:	f105 32ff 	add.w	r2, r5, #4294967295
 800ed3c:	d04f      	beq.n	800edde <_dtoa_r+0xaee>
 800ed3e:	3301      	adds	r3, #1
 800ed40:	7013      	strb	r3, [r2, #0]
 800ed42:	e754      	b.n	800ebee <_dtoa_r+0x8fe>
 800ed44:	9a05      	ldr	r2, [sp, #20]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f102 0501 	add.w	r5, r2, #1
 800ed4c:	dd06      	ble.n	800ed5c <_dtoa_r+0xa6c>
 800ed4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed52:	d0e9      	beq.n	800ed28 <_dtoa_r+0xa38>
 800ed54:	f108 0801 	add.w	r8, r8, #1
 800ed58:	9b05      	ldr	r3, [sp, #20]
 800ed5a:	e7c2      	b.n	800ece2 <_dtoa_r+0x9f2>
 800ed5c:	9a02      	ldr	r2, [sp, #8]
 800ed5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ed62:	eba5 030b 	sub.w	r3, r5, fp
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d021      	beq.n	800edae <_dtoa_r+0xabe>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	220a      	movs	r2, #10
 800ed6e:	9904      	ldr	r1, [sp, #16]
 800ed70:	4620      	mov	r0, r4
 800ed72:	f000 f8e4 	bl	800ef3e <__multadd>
 800ed76:	45b1      	cmp	r9, r6
 800ed78:	9004      	str	r0, [sp, #16]
 800ed7a:	f04f 0300 	mov.w	r3, #0
 800ed7e:	f04f 020a 	mov.w	r2, #10
 800ed82:	4649      	mov	r1, r9
 800ed84:	4620      	mov	r0, r4
 800ed86:	d105      	bne.n	800ed94 <_dtoa_r+0xaa4>
 800ed88:	f000 f8d9 	bl	800ef3e <__multadd>
 800ed8c:	4681      	mov	r9, r0
 800ed8e:	4606      	mov	r6, r0
 800ed90:	9505      	str	r5, [sp, #20]
 800ed92:	e776      	b.n	800ec82 <_dtoa_r+0x992>
 800ed94:	f000 f8d3 	bl	800ef3e <__multadd>
 800ed98:	4631      	mov	r1, r6
 800ed9a:	4681      	mov	r9, r0
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	220a      	movs	r2, #10
 800eda0:	4620      	mov	r0, r4
 800eda2:	f000 f8cc 	bl	800ef3e <__multadd>
 800eda6:	4606      	mov	r6, r0
 800eda8:	e7f2      	b.n	800ed90 <_dtoa_r+0xaa0>
 800edaa:	f04f 0900 	mov.w	r9, #0
 800edae:	2201      	movs	r2, #1
 800edb0:	9904      	ldr	r1, [sp, #16]
 800edb2:	4620      	mov	r0, r4
 800edb4:	f000 fa3a 	bl	800f22c <__lshift>
 800edb8:	4639      	mov	r1, r7
 800edba:	9004      	str	r0, [sp, #16]
 800edbc:	f000 fa8a 	bl	800f2d4 <__mcmp>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	dcb6      	bgt.n	800ed32 <_dtoa_r+0xa42>
 800edc4:	d102      	bne.n	800edcc <_dtoa_r+0xadc>
 800edc6:	f018 0f01 	tst.w	r8, #1
 800edca:	d1b2      	bne.n	800ed32 <_dtoa_r+0xa42>
 800edcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800edd0:	2b30      	cmp	r3, #48	; 0x30
 800edd2:	f105 32ff 	add.w	r2, r5, #4294967295
 800edd6:	f47f af0a 	bne.w	800ebee <_dtoa_r+0x8fe>
 800edda:	4615      	mov	r5, r2
 800eddc:	e7f6      	b.n	800edcc <_dtoa_r+0xadc>
 800edde:	4593      	cmp	fp, r2
 800ede0:	d105      	bne.n	800edee <_dtoa_r+0xafe>
 800ede2:	2331      	movs	r3, #49	; 0x31
 800ede4:	f10a 0a01 	add.w	sl, sl, #1
 800ede8:	f88b 3000 	strb.w	r3, [fp]
 800edec:	e6ff      	b.n	800ebee <_dtoa_r+0x8fe>
 800edee:	4615      	mov	r5, r2
 800edf0:	e79f      	b.n	800ed32 <_dtoa_r+0xa42>
 800edf2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ee58 <_dtoa_r+0xb68>
 800edf6:	e007      	b.n	800ee08 <_dtoa_r+0xb18>
 800edf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edfa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ee5c <_dtoa_r+0xb6c>
 800edfe:	b11b      	cbz	r3, 800ee08 <_dtoa_r+0xb18>
 800ee00:	f10b 0308 	add.w	r3, fp, #8
 800ee04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee06:	6013      	str	r3, [r2, #0]
 800ee08:	4658      	mov	r0, fp
 800ee0a:	b017      	add	sp, #92	; 0x5c
 800ee0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee10:	9b06      	ldr	r3, [sp, #24]
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	f77f ae35 	ble.w	800ea82 <_dtoa_r+0x792>
 800ee18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee1a:	9307      	str	r3, [sp, #28]
 800ee1c:	e649      	b.n	800eab2 <_dtoa_r+0x7c2>
 800ee1e:	9b02      	ldr	r3, [sp, #8]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	dc03      	bgt.n	800ee2c <_dtoa_r+0xb3c>
 800ee24:	9b06      	ldr	r3, [sp, #24]
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	f73f aecc 	bgt.w	800ebc4 <_dtoa_r+0x8d4>
 800ee2c:	465d      	mov	r5, fp
 800ee2e:	4639      	mov	r1, r7
 800ee30:	9804      	ldr	r0, [sp, #16]
 800ee32:	f7ff f9d1 	bl	800e1d8 <quorem>
 800ee36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ee3a:	f805 8b01 	strb.w	r8, [r5], #1
 800ee3e:	9a02      	ldr	r2, [sp, #8]
 800ee40:	eba5 030b 	sub.w	r3, r5, fp
 800ee44:	429a      	cmp	r2, r3
 800ee46:	ddb0      	ble.n	800edaa <_dtoa_r+0xaba>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	220a      	movs	r2, #10
 800ee4c:	9904      	ldr	r1, [sp, #16]
 800ee4e:	4620      	mov	r0, r4
 800ee50:	f000 f875 	bl	800ef3e <__multadd>
 800ee54:	9004      	str	r0, [sp, #16]
 800ee56:	e7ea      	b.n	800ee2e <_dtoa_r+0xb3e>
 800ee58:	08010118 	.word	0x08010118
 800ee5c:	0801013c 	.word	0x0801013c

0800ee60 <__locale_ctype_ptr_l>:
 800ee60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ee64:	4770      	bx	lr
	...

0800ee68 <_localeconv_r>:
 800ee68:	4b04      	ldr	r3, [pc, #16]	; (800ee7c <_localeconv_r+0x14>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	6a18      	ldr	r0, [r3, #32]
 800ee6e:	4b04      	ldr	r3, [pc, #16]	; (800ee80 <_localeconv_r+0x18>)
 800ee70:	2800      	cmp	r0, #0
 800ee72:	bf08      	it	eq
 800ee74:	4618      	moveq	r0, r3
 800ee76:	30f0      	adds	r0, #240	; 0xf0
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	20000094 	.word	0x20000094
 800ee80:	200000f8 	.word	0x200000f8

0800ee84 <__ascii_mbtowc>:
 800ee84:	b082      	sub	sp, #8
 800ee86:	b901      	cbnz	r1, 800ee8a <__ascii_mbtowc+0x6>
 800ee88:	a901      	add	r1, sp, #4
 800ee8a:	b142      	cbz	r2, 800ee9e <__ascii_mbtowc+0x1a>
 800ee8c:	b14b      	cbz	r3, 800eea2 <__ascii_mbtowc+0x1e>
 800ee8e:	7813      	ldrb	r3, [r2, #0]
 800ee90:	600b      	str	r3, [r1, #0]
 800ee92:	7812      	ldrb	r2, [r2, #0]
 800ee94:	1c10      	adds	r0, r2, #0
 800ee96:	bf18      	it	ne
 800ee98:	2001      	movne	r0, #1
 800ee9a:	b002      	add	sp, #8
 800ee9c:	4770      	bx	lr
 800ee9e:	4610      	mov	r0, r2
 800eea0:	e7fb      	b.n	800ee9a <__ascii_mbtowc+0x16>
 800eea2:	f06f 0001 	mvn.w	r0, #1
 800eea6:	e7f8      	b.n	800ee9a <__ascii_mbtowc+0x16>

0800eea8 <_Balloc>:
 800eea8:	b570      	push	{r4, r5, r6, lr}
 800eeaa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eeac:	4604      	mov	r4, r0
 800eeae:	460e      	mov	r6, r1
 800eeb0:	b93d      	cbnz	r5, 800eec2 <_Balloc+0x1a>
 800eeb2:	2010      	movs	r0, #16
 800eeb4:	f7fe fad0 	bl	800d458 <malloc>
 800eeb8:	6260      	str	r0, [r4, #36]	; 0x24
 800eeba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eebe:	6005      	str	r5, [r0, #0]
 800eec0:	60c5      	str	r5, [r0, #12]
 800eec2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800eec4:	68eb      	ldr	r3, [r5, #12]
 800eec6:	b183      	cbz	r3, 800eeea <_Balloc+0x42>
 800eec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eed0:	b9b8      	cbnz	r0, 800ef02 <_Balloc+0x5a>
 800eed2:	2101      	movs	r1, #1
 800eed4:	fa01 f506 	lsl.w	r5, r1, r6
 800eed8:	1d6a      	adds	r2, r5, #5
 800eeda:	0092      	lsls	r2, r2, #2
 800eedc:	4620      	mov	r0, r4
 800eede:	f000 fabf 	bl	800f460 <_calloc_r>
 800eee2:	b160      	cbz	r0, 800eefe <_Balloc+0x56>
 800eee4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800eee8:	e00e      	b.n	800ef08 <_Balloc+0x60>
 800eeea:	2221      	movs	r2, #33	; 0x21
 800eeec:	2104      	movs	r1, #4
 800eeee:	4620      	mov	r0, r4
 800eef0:	f000 fab6 	bl	800f460 <_calloc_r>
 800eef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eef6:	60e8      	str	r0, [r5, #12]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1e4      	bne.n	800eec8 <_Balloc+0x20>
 800eefe:	2000      	movs	r0, #0
 800ef00:	bd70      	pop	{r4, r5, r6, pc}
 800ef02:	6802      	ldr	r2, [r0, #0]
 800ef04:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef0e:	e7f7      	b.n	800ef00 <_Balloc+0x58>

0800ef10 <_Bfree>:
 800ef10:	b570      	push	{r4, r5, r6, lr}
 800ef12:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ef14:	4606      	mov	r6, r0
 800ef16:	460d      	mov	r5, r1
 800ef18:	b93c      	cbnz	r4, 800ef2a <_Bfree+0x1a>
 800ef1a:	2010      	movs	r0, #16
 800ef1c:	f7fe fa9c 	bl	800d458 <malloc>
 800ef20:	6270      	str	r0, [r6, #36]	; 0x24
 800ef22:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef26:	6004      	str	r4, [r0, #0]
 800ef28:	60c4      	str	r4, [r0, #12]
 800ef2a:	b13d      	cbz	r5, 800ef3c <_Bfree+0x2c>
 800ef2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ef2e:	686a      	ldr	r2, [r5, #4]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef36:	6029      	str	r1, [r5, #0]
 800ef38:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ef3c:	bd70      	pop	{r4, r5, r6, pc}

0800ef3e <__multadd>:
 800ef3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef42:	690d      	ldr	r5, [r1, #16]
 800ef44:	461f      	mov	r7, r3
 800ef46:	4606      	mov	r6, r0
 800ef48:	460c      	mov	r4, r1
 800ef4a:	f101 0c14 	add.w	ip, r1, #20
 800ef4e:	2300      	movs	r3, #0
 800ef50:	f8dc 0000 	ldr.w	r0, [ip]
 800ef54:	b281      	uxth	r1, r0
 800ef56:	fb02 7101 	mla	r1, r2, r1, r7
 800ef5a:	0c0f      	lsrs	r7, r1, #16
 800ef5c:	0c00      	lsrs	r0, r0, #16
 800ef5e:	fb02 7000 	mla	r0, r2, r0, r7
 800ef62:	b289      	uxth	r1, r1
 800ef64:	3301      	adds	r3, #1
 800ef66:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ef6a:	429d      	cmp	r5, r3
 800ef6c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ef70:	f84c 1b04 	str.w	r1, [ip], #4
 800ef74:	dcec      	bgt.n	800ef50 <__multadd+0x12>
 800ef76:	b1d7      	cbz	r7, 800efae <__multadd+0x70>
 800ef78:	68a3      	ldr	r3, [r4, #8]
 800ef7a:	42ab      	cmp	r3, r5
 800ef7c:	dc12      	bgt.n	800efa4 <__multadd+0x66>
 800ef7e:	6861      	ldr	r1, [r4, #4]
 800ef80:	4630      	mov	r0, r6
 800ef82:	3101      	adds	r1, #1
 800ef84:	f7ff ff90 	bl	800eea8 <_Balloc>
 800ef88:	6922      	ldr	r2, [r4, #16]
 800ef8a:	3202      	adds	r2, #2
 800ef8c:	f104 010c 	add.w	r1, r4, #12
 800ef90:	4680      	mov	r8, r0
 800ef92:	0092      	lsls	r2, r2, #2
 800ef94:	300c      	adds	r0, #12
 800ef96:	f7fe fa6f 	bl	800d478 <memcpy>
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	f7ff ffb7 	bl	800ef10 <_Bfree>
 800efa2:	4644      	mov	r4, r8
 800efa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800efa8:	3501      	adds	r5, #1
 800efaa:	615f      	str	r7, [r3, #20]
 800efac:	6125      	str	r5, [r4, #16]
 800efae:	4620      	mov	r0, r4
 800efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800efb4 <__hi0bits>:
 800efb4:	0c02      	lsrs	r2, r0, #16
 800efb6:	0412      	lsls	r2, r2, #16
 800efb8:	4603      	mov	r3, r0
 800efba:	b9b2      	cbnz	r2, 800efea <__hi0bits+0x36>
 800efbc:	0403      	lsls	r3, r0, #16
 800efbe:	2010      	movs	r0, #16
 800efc0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800efc4:	bf04      	itt	eq
 800efc6:	021b      	lsleq	r3, r3, #8
 800efc8:	3008      	addeq	r0, #8
 800efca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800efce:	bf04      	itt	eq
 800efd0:	011b      	lsleq	r3, r3, #4
 800efd2:	3004      	addeq	r0, #4
 800efd4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800efd8:	bf04      	itt	eq
 800efda:	009b      	lsleq	r3, r3, #2
 800efdc:	3002      	addeq	r0, #2
 800efde:	2b00      	cmp	r3, #0
 800efe0:	db06      	blt.n	800eff0 <__hi0bits+0x3c>
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	d503      	bpl.n	800efee <__hi0bits+0x3a>
 800efe6:	3001      	adds	r0, #1
 800efe8:	4770      	bx	lr
 800efea:	2000      	movs	r0, #0
 800efec:	e7e8      	b.n	800efc0 <__hi0bits+0xc>
 800efee:	2020      	movs	r0, #32
 800eff0:	4770      	bx	lr

0800eff2 <__lo0bits>:
 800eff2:	6803      	ldr	r3, [r0, #0]
 800eff4:	f013 0207 	ands.w	r2, r3, #7
 800eff8:	4601      	mov	r1, r0
 800effa:	d00b      	beq.n	800f014 <__lo0bits+0x22>
 800effc:	07da      	lsls	r2, r3, #31
 800effe:	d423      	bmi.n	800f048 <__lo0bits+0x56>
 800f000:	0798      	lsls	r0, r3, #30
 800f002:	bf49      	itett	mi
 800f004:	085b      	lsrmi	r3, r3, #1
 800f006:	089b      	lsrpl	r3, r3, #2
 800f008:	2001      	movmi	r0, #1
 800f00a:	600b      	strmi	r3, [r1, #0]
 800f00c:	bf5c      	itt	pl
 800f00e:	600b      	strpl	r3, [r1, #0]
 800f010:	2002      	movpl	r0, #2
 800f012:	4770      	bx	lr
 800f014:	b298      	uxth	r0, r3
 800f016:	b9a8      	cbnz	r0, 800f044 <__lo0bits+0x52>
 800f018:	0c1b      	lsrs	r3, r3, #16
 800f01a:	2010      	movs	r0, #16
 800f01c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f020:	bf04      	itt	eq
 800f022:	0a1b      	lsreq	r3, r3, #8
 800f024:	3008      	addeq	r0, #8
 800f026:	071a      	lsls	r2, r3, #28
 800f028:	bf04      	itt	eq
 800f02a:	091b      	lsreq	r3, r3, #4
 800f02c:	3004      	addeq	r0, #4
 800f02e:	079a      	lsls	r2, r3, #30
 800f030:	bf04      	itt	eq
 800f032:	089b      	lsreq	r3, r3, #2
 800f034:	3002      	addeq	r0, #2
 800f036:	07da      	lsls	r2, r3, #31
 800f038:	d402      	bmi.n	800f040 <__lo0bits+0x4e>
 800f03a:	085b      	lsrs	r3, r3, #1
 800f03c:	d006      	beq.n	800f04c <__lo0bits+0x5a>
 800f03e:	3001      	adds	r0, #1
 800f040:	600b      	str	r3, [r1, #0]
 800f042:	4770      	bx	lr
 800f044:	4610      	mov	r0, r2
 800f046:	e7e9      	b.n	800f01c <__lo0bits+0x2a>
 800f048:	2000      	movs	r0, #0
 800f04a:	4770      	bx	lr
 800f04c:	2020      	movs	r0, #32
 800f04e:	4770      	bx	lr

0800f050 <__i2b>:
 800f050:	b510      	push	{r4, lr}
 800f052:	460c      	mov	r4, r1
 800f054:	2101      	movs	r1, #1
 800f056:	f7ff ff27 	bl	800eea8 <_Balloc>
 800f05a:	2201      	movs	r2, #1
 800f05c:	6144      	str	r4, [r0, #20]
 800f05e:	6102      	str	r2, [r0, #16]
 800f060:	bd10      	pop	{r4, pc}

0800f062 <__multiply>:
 800f062:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f066:	4614      	mov	r4, r2
 800f068:	690a      	ldr	r2, [r1, #16]
 800f06a:	6923      	ldr	r3, [r4, #16]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	bfb8      	it	lt
 800f070:	460b      	movlt	r3, r1
 800f072:	4688      	mov	r8, r1
 800f074:	bfbc      	itt	lt
 800f076:	46a0      	movlt	r8, r4
 800f078:	461c      	movlt	r4, r3
 800f07a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f07e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f086:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f08a:	eb07 0609 	add.w	r6, r7, r9
 800f08e:	42b3      	cmp	r3, r6
 800f090:	bfb8      	it	lt
 800f092:	3101      	addlt	r1, #1
 800f094:	f7ff ff08 	bl	800eea8 <_Balloc>
 800f098:	f100 0514 	add.w	r5, r0, #20
 800f09c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f0a0:	462b      	mov	r3, r5
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	4573      	cmp	r3, lr
 800f0a6:	d316      	bcc.n	800f0d6 <__multiply+0x74>
 800f0a8:	f104 0214 	add.w	r2, r4, #20
 800f0ac:	f108 0114 	add.w	r1, r8, #20
 800f0b0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f0b4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f0b8:	9300      	str	r3, [sp, #0]
 800f0ba:	9b00      	ldr	r3, [sp, #0]
 800f0bc:	9201      	str	r2, [sp, #4]
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d80c      	bhi.n	800f0dc <__multiply+0x7a>
 800f0c2:	2e00      	cmp	r6, #0
 800f0c4:	dd03      	ble.n	800f0ce <__multiply+0x6c>
 800f0c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d05d      	beq.n	800f18a <__multiply+0x128>
 800f0ce:	6106      	str	r6, [r0, #16]
 800f0d0:	b003      	add	sp, #12
 800f0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d6:	f843 2b04 	str.w	r2, [r3], #4
 800f0da:	e7e3      	b.n	800f0a4 <__multiply+0x42>
 800f0dc:	f8b2 b000 	ldrh.w	fp, [r2]
 800f0e0:	f1bb 0f00 	cmp.w	fp, #0
 800f0e4:	d023      	beq.n	800f12e <__multiply+0xcc>
 800f0e6:	4689      	mov	r9, r1
 800f0e8:	46ac      	mov	ip, r5
 800f0ea:	f04f 0800 	mov.w	r8, #0
 800f0ee:	f859 4b04 	ldr.w	r4, [r9], #4
 800f0f2:	f8dc a000 	ldr.w	sl, [ip]
 800f0f6:	b2a3      	uxth	r3, r4
 800f0f8:	fa1f fa8a 	uxth.w	sl, sl
 800f0fc:	fb0b a303 	mla	r3, fp, r3, sl
 800f100:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f104:	f8dc 4000 	ldr.w	r4, [ip]
 800f108:	4443      	add	r3, r8
 800f10a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f10e:	fb0b 840a 	mla	r4, fp, sl, r8
 800f112:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f116:	46e2      	mov	sl, ip
 800f118:	b29b      	uxth	r3, r3
 800f11a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f11e:	454f      	cmp	r7, r9
 800f120:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f124:	f84a 3b04 	str.w	r3, [sl], #4
 800f128:	d82b      	bhi.n	800f182 <__multiply+0x120>
 800f12a:	f8cc 8004 	str.w	r8, [ip, #4]
 800f12e:	9b01      	ldr	r3, [sp, #4]
 800f130:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f134:	3204      	adds	r2, #4
 800f136:	f1ba 0f00 	cmp.w	sl, #0
 800f13a:	d020      	beq.n	800f17e <__multiply+0x11c>
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	4689      	mov	r9, r1
 800f140:	46a8      	mov	r8, r5
 800f142:	f04f 0b00 	mov.w	fp, #0
 800f146:	f8b9 c000 	ldrh.w	ip, [r9]
 800f14a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f14e:	fb0a 440c 	mla	r4, sl, ip, r4
 800f152:	445c      	add	r4, fp
 800f154:	46c4      	mov	ip, r8
 800f156:	b29b      	uxth	r3, r3
 800f158:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f15c:	f84c 3b04 	str.w	r3, [ip], #4
 800f160:	f859 3b04 	ldr.w	r3, [r9], #4
 800f164:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f168:	0c1b      	lsrs	r3, r3, #16
 800f16a:	fb0a b303 	mla	r3, sl, r3, fp
 800f16e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f172:	454f      	cmp	r7, r9
 800f174:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f178:	d805      	bhi.n	800f186 <__multiply+0x124>
 800f17a:	f8c8 3004 	str.w	r3, [r8, #4]
 800f17e:	3504      	adds	r5, #4
 800f180:	e79b      	b.n	800f0ba <__multiply+0x58>
 800f182:	46d4      	mov	ip, sl
 800f184:	e7b3      	b.n	800f0ee <__multiply+0x8c>
 800f186:	46e0      	mov	r8, ip
 800f188:	e7dd      	b.n	800f146 <__multiply+0xe4>
 800f18a:	3e01      	subs	r6, #1
 800f18c:	e799      	b.n	800f0c2 <__multiply+0x60>
	...

0800f190 <__pow5mult>:
 800f190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f194:	4615      	mov	r5, r2
 800f196:	f012 0203 	ands.w	r2, r2, #3
 800f19a:	4606      	mov	r6, r0
 800f19c:	460f      	mov	r7, r1
 800f19e:	d007      	beq.n	800f1b0 <__pow5mult+0x20>
 800f1a0:	3a01      	subs	r2, #1
 800f1a2:	4c21      	ldr	r4, [pc, #132]	; (800f228 <__pow5mult+0x98>)
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1aa:	f7ff fec8 	bl	800ef3e <__multadd>
 800f1ae:	4607      	mov	r7, r0
 800f1b0:	10ad      	asrs	r5, r5, #2
 800f1b2:	d035      	beq.n	800f220 <__pow5mult+0x90>
 800f1b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f1b6:	b93c      	cbnz	r4, 800f1c8 <__pow5mult+0x38>
 800f1b8:	2010      	movs	r0, #16
 800f1ba:	f7fe f94d 	bl	800d458 <malloc>
 800f1be:	6270      	str	r0, [r6, #36]	; 0x24
 800f1c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1c4:	6004      	str	r4, [r0, #0]
 800f1c6:	60c4      	str	r4, [r0, #12]
 800f1c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f1cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1d0:	b94c      	cbnz	r4, 800f1e6 <__pow5mult+0x56>
 800f1d2:	f240 2171 	movw	r1, #625	; 0x271
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	f7ff ff3a 	bl	800f050 <__i2b>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	6003      	str	r3, [r0, #0]
 800f1e6:	f04f 0800 	mov.w	r8, #0
 800f1ea:	07eb      	lsls	r3, r5, #31
 800f1ec:	d50a      	bpl.n	800f204 <__pow5mult+0x74>
 800f1ee:	4639      	mov	r1, r7
 800f1f0:	4622      	mov	r2, r4
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f7ff ff35 	bl	800f062 <__multiply>
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	4681      	mov	r9, r0
 800f1fc:	4630      	mov	r0, r6
 800f1fe:	f7ff fe87 	bl	800ef10 <_Bfree>
 800f202:	464f      	mov	r7, r9
 800f204:	106d      	asrs	r5, r5, #1
 800f206:	d00b      	beq.n	800f220 <__pow5mult+0x90>
 800f208:	6820      	ldr	r0, [r4, #0]
 800f20a:	b938      	cbnz	r0, 800f21c <__pow5mult+0x8c>
 800f20c:	4622      	mov	r2, r4
 800f20e:	4621      	mov	r1, r4
 800f210:	4630      	mov	r0, r6
 800f212:	f7ff ff26 	bl	800f062 <__multiply>
 800f216:	6020      	str	r0, [r4, #0]
 800f218:	f8c0 8000 	str.w	r8, [r0]
 800f21c:	4604      	mov	r4, r0
 800f21e:	e7e4      	b.n	800f1ea <__pow5mult+0x5a>
 800f220:	4638      	mov	r0, r7
 800f222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f226:	bf00      	nop
 800f228:	08010248 	.word	0x08010248

0800f22c <__lshift>:
 800f22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f230:	460c      	mov	r4, r1
 800f232:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f236:	6923      	ldr	r3, [r4, #16]
 800f238:	6849      	ldr	r1, [r1, #4]
 800f23a:	eb0a 0903 	add.w	r9, sl, r3
 800f23e:	68a3      	ldr	r3, [r4, #8]
 800f240:	4607      	mov	r7, r0
 800f242:	4616      	mov	r6, r2
 800f244:	f109 0501 	add.w	r5, r9, #1
 800f248:	42ab      	cmp	r3, r5
 800f24a:	db32      	blt.n	800f2b2 <__lshift+0x86>
 800f24c:	4638      	mov	r0, r7
 800f24e:	f7ff fe2b 	bl	800eea8 <_Balloc>
 800f252:	2300      	movs	r3, #0
 800f254:	4680      	mov	r8, r0
 800f256:	f100 0114 	add.w	r1, r0, #20
 800f25a:	461a      	mov	r2, r3
 800f25c:	4553      	cmp	r3, sl
 800f25e:	db2b      	blt.n	800f2b8 <__lshift+0x8c>
 800f260:	6920      	ldr	r0, [r4, #16]
 800f262:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f266:	f104 0314 	add.w	r3, r4, #20
 800f26a:	f016 021f 	ands.w	r2, r6, #31
 800f26e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f272:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f276:	d025      	beq.n	800f2c4 <__lshift+0x98>
 800f278:	f1c2 0e20 	rsb	lr, r2, #32
 800f27c:	2000      	movs	r0, #0
 800f27e:	681e      	ldr	r6, [r3, #0]
 800f280:	468a      	mov	sl, r1
 800f282:	4096      	lsls	r6, r2
 800f284:	4330      	orrs	r0, r6
 800f286:	f84a 0b04 	str.w	r0, [sl], #4
 800f28a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f28e:	459c      	cmp	ip, r3
 800f290:	fa20 f00e 	lsr.w	r0, r0, lr
 800f294:	d814      	bhi.n	800f2c0 <__lshift+0x94>
 800f296:	6048      	str	r0, [r1, #4]
 800f298:	b108      	cbz	r0, 800f29e <__lshift+0x72>
 800f29a:	f109 0502 	add.w	r5, r9, #2
 800f29e:	3d01      	subs	r5, #1
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	f8c8 5010 	str.w	r5, [r8, #16]
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	f7ff fe32 	bl	800ef10 <_Bfree>
 800f2ac:	4640      	mov	r0, r8
 800f2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b2:	3101      	adds	r1, #1
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	e7c7      	b.n	800f248 <__lshift+0x1c>
 800f2b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	e7cd      	b.n	800f25c <__lshift+0x30>
 800f2c0:	4651      	mov	r1, sl
 800f2c2:	e7dc      	b.n	800f27e <__lshift+0x52>
 800f2c4:	3904      	subs	r1, #4
 800f2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2ce:	459c      	cmp	ip, r3
 800f2d0:	d8f9      	bhi.n	800f2c6 <__lshift+0x9a>
 800f2d2:	e7e4      	b.n	800f29e <__lshift+0x72>

0800f2d4 <__mcmp>:
 800f2d4:	6903      	ldr	r3, [r0, #16]
 800f2d6:	690a      	ldr	r2, [r1, #16]
 800f2d8:	1a9b      	subs	r3, r3, r2
 800f2da:	b530      	push	{r4, r5, lr}
 800f2dc:	d10c      	bne.n	800f2f8 <__mcmp+0x24>
 800f2de:	0092      	lsls	r2, r2, #2
 800f2e0:	3014      	adds	r0, #20
 800f2e2:	3114      	adds	r1, #20
 800f2e4:	1884      	adds	r4, r0, r2
 800f2e6:	4411      	add	r1, r2
 800f2e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f2ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f2f0:	4295      	cmp	r5, r2
 800f2f2:	d003      	beq.n	800f2fc <__mcmp+0x28>
 800f2f4:	d305      	bcc.n	800f302 <__mcmp+0x2e>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	bd30      	pop	{r4, r5, pc}
 800f2fc:	42a0      	cmp	r0, r4
 800f2fe:	d3f3      	bcc.n	800f2e8 <__mcmp+0x14>
 800f300:	e7fa      	b.n	800f2f8 <__mcmp+0x24>
 800f302:	f04f 33ff 	mov.w	r3, #4294967295
 800f306:	e7f7      	b.n	800f2f8 <__mcmp+0x24>

0800f308 <__mdiff>:
 800f308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f30c:	460d      	mov	r5, r1
 800f30e:	4607      	mov	r7, r0
 800f310:	4611      	mov	r1, r2
 800f312:	4628      	mov	r0, r5
 800f314:	4614      	mov	r4, r2
 800f316:	f7ff ffdd 	bl	800f2d4 <__mcmp>
 800f31a:	1e06      	subs	r6, r0, #0
 800f31c:	d108      	bne.n	800f330 <__mdiff+0x28>
 800f31e:	4631      	mov	r1, r6
 800f320:	4638      	mov	r0, r7
 800f322:	f7ff fdc1 	bl	800eea8 <_Balloc>
 800f326:	2301      	movs	r3, #1
 800f328:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f330:	bfa4      	itt	ge
 800f332:	4623      	movge	r3, r4
 800f334:	462c      	movge	r4, r5
 800f336:	4638      	mov	r0, r7
 800f338:	6861      	ldr	r1, [r4, #4]
 800f33a:	bfa6      	itte	ge
 800f33c:	461d      	movge	r5, r3
 800f33e:	2600      	movge	r6, #0
 800f340:	2601      	movlt	r6, #1
 800f342:	f7ff fdb1 	bl	800eea8 <_Balloc>
 800f346:	692b      	ldr	r3, [r5, #16]
 800f348:	60c6      	str	r6, [r0, #12]
 800f34a:	6926      	ldr	r6, [r4, #16]
 800f34c:	f105 0914 	add.w	r9, r5, #20
 800f350:	f104 0214 	add.w	r2, r4, #20
 800f354:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f358:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f35c:	f100 0514 	add.w	r5, r0, #20
 800f360:	f04f 0e00 	mov.w	lr, #0
 800f364:	f852 ab04 	ldr.w	sl, [r2], #4
 800f368:	f859 4b04 	ldr.w	r4, [r9], #4
 800f36c:	fa1e f18a 	uxtah	r1, lr, sl
 800f370:	b2a3      	uxth	r3, r4
 800f372:	1ac9      	subs	r1, r1, r3
 800f374:	0c23      	lsrs	r3, r4, #16
 800f376:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f37a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f37e:	b289      	uxth	r1, r1
 800f380:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f384:	45c8      	cmp	r8, r9
 800f386:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f38a:	4694      	mov	ip, r2
 800f38c:	f845 3b04 	str.w	r3, [r5], #4
 800f390:	d8e8      	bhi.n	800f364 <__mdiff+0x5c>
 800f392:	45bc      	cmp	ip, r7
 800f394:	d304      	bcc.n	800f3a0 <__mdiff+0x98>
 800f396:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f39a:	b183      	cbz	r3, 800f3be <__mdiff+0xb6>
 800f39c:	6106      	str	r6, [r0, #16]
 800f39e:	e7c5      	b.n	800f32c <__mdiff+0x24>
 800f3a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f3a4:	fa1e f381 	uxtah	r3, lr, r1
 800f3a8:	141a      	asrs	r2, r3, #16
 800f3aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f3b8:	f845 3b04 	str.w	r3, [r5], #4
 800f3bc:	e7e9      	b.n	800f392 <__mdiff+0x8a>
 800f3be:	3e01      	subs	r6, #1
 800f3c0:	e7e9      	b.n	800f396 <__mdiff+0x8e>

0800f3c2 <__d2b>:
 800f3c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3c6:	460e      	mov	r6, r1
 800f3c8:	2101      	movs	r1, #1
 800f3ca:	ec59 8b10 	vmov	r8, r9, d0
 800f3ce:	4615      	mov	r5, r2
 800f3d0:	f7ff fd6a 	bl	800eea8 <_Balloc>
 800f3d4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f3d8:	4607      	mov	r7, r0
 800f3da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3de:	bb34      	cbnz	r4, 800f42e <__d2b+0x6c>
 800f3e0:	9301      	str	r3, [sp, #4]
 800f3e2:	f1b8 0300 	subs.w	r3, r8, #0
 800f3e6:	d027      	beq.n	800f438 <__d2b+0x76>
 800f3e8:	a802      	add	r0, sp, #8
 800f3ea:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f3ee:	f7ff fe00 	bl	800eff2 <__lo0bits>
 800f3f2:	9900      	ldr	r1, [sp, #0]
 800f3f4:	b1f0      	cbz	r0, 800f434 <__d2b+0x72>
 800f3f6:	9a01      	ldr	r2, [sp, #4]
 800f3f8:	f1c0 0320 	rsb	r3, r0, #32
 800f3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f400:	430b      	orrs	r3, r1
 800f402:	40c2      	lsrs	r2, r0
 800f404:	617b      	str	r3, [r7, #20]
 800f406:	9201      	str	r2, [sp, #4]
 800f408:	9b01      	ldr	r3, [sp, #4]
 800f40a:	61bb      	str	r3, [r7, #24]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	bf14      	ite	ne
 800f410:	2102      	movne	r1, #2
 800f412:	2101      	moveq	r1, #1
 800f414:	6139      	str	r1, [r7, #16]
 800f416:	b1c4      	cbz	r4, 800f44a <__d2b+0x88>
 800f418:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f41c:	4404      	add	r4, r0
 800f41e:	6034      	str	r4, [r6, #0]
 800f420:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f424:	6028      	str	r0, [r5, #0]
 800f426:	4638      	mov	r0, r7
 800f428:	b003      	add	sp, #12
 800f42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f42e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f432:	e7d5      	b.n	800f3e0 <__d2b+0x1e>
 800f434:	6179      	str	r1, [r7, #20]
 800f436:	e7e7      	b.n	800f408 <__d2b+0x46>
 800f438:	a801      	add	r0, sp, #4
 800f43a:	f7ff fdda 	bl	800eff2 <__lo0bits>
 800f43e:	9b01      	ldr	r3, [sp, #4]
 800f440:	617b      	str	r3, [r7, #20]
 800f442:	2101      	movs	r1, #1
 800f444:	6139      	str	r1, [r7, #16]
 800f446:	3020      	adds	r0, #32
 800f448:	e7e5      	b.n	800f416 <__d2b+0x54>
 800f44a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f44e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f452:	6030      	str	r0, [r6, #0]
 800f454:	6918      	ldr	r0, [r3, #16]
 800f456:	f7ff fdad 	bl	800efb4 <__hi0bits>
 800f45a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f45e:	e7e1      	b.n	800f424 <__d2b+0x62>

0800f460 <_calloc_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	fb02 f401 	mul.w	r4, r2, r1
 800f466:	4621      	mov	r1, r4
 800f468:	f7fe f868 	bl	800d53c <_malloc_r>
 800f46c:	4605      	mov	r5, r0
 800f46e:	b118      	cbz	r0, 800f478 <_calloc_r+0x18>
 800f470:	4622      	mov	r2, r4
 800f472:	2100      	movs	r1, #0
 800f474:	f7fe f80b 	bl	800d48e <memset>
 800f478:	4628      	mov	r0, r5
 800f47a:	bd38      	pop	{r3, r4, r5, pc}

0800f47c <__ssputs_r>:
 800f47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f480:	688e      	ldr	r6, [r1, #8]
 800f482:	429e      	cmp	r6, r3
 800f484:	4682      	mov	sl, r0
 800f486:	460c      	mov	r4, r1
 800f488:	4690      	mov	r8, r2
 800f48a:	4699      	mov	r9, r3
 800f48c:	d837      	bhi.n	800f4fe <__ssputs_r+0x82>
 800f48e:	898a      	ldrh	r2, [r1, #12]
 800f490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f494:	d031      	beq.n	800f4fa <__ssputs_r+0x7e>
 800f496:	6825      	ldr	r5, [r4, #0]
 800f498:	6909      	ldr	r1, [r1, #16]
 800f49a:	1a6f      	subs	r7, r5, r1
 800f49c:	6965      	ldr	r5, [r4, #20]
 800f49e:	2302      	movs	r3, #2
 800f4a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4a4:	fb95 f5f3 	sdiv	r5, r5, r3
 800f4a8:	f109 0301 	add.w	r3, r9, #1
 800f4ac:	443b      	add	r3, r7
 800f4ae:	429d      	cmp	r5, r3
 800f4b0:	bf38      	it	cc
 800f4b2:	461d      	movcc	r5, r3
 800f4b4:	0553      	lsls	r3, r2, #21
 800f4b6:	d530      	bpl.n	800f51a <__ssputs_r+0x9e>
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	f7fe f83f 	bl	800d53c <_malloc_r>
 800f4be:	4606      	mov	r6, r0
 800f4c0:	b950      	cbnz	r0, 800f4d8 <__ssputs_r+0x5c>
 800f4c2:	230c      	movs	r3, #12
 800f4c4:	f8ca 3000 	str.w	r3, [sl]
 800f4c8:	89a3      	ldrh	r3, [r4, #12]
 800f4ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4ce:	81a3      	strh	r3, [r4, #12]
 800f4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d8:	463a      	mov	r2, r7
 800f4da:	6921      	ldr	r1, [r4, #16]
 800f4dc:	f7fd ffcc 	bl	800d478 <memcpy>
 800f4e0:	89a3      	ldrh	r3, [r4, #12]
 800f4e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ea:	81a3      	strh	r3, [r4, #12]
 800f4ec:	6126      	str	r6, [r4, #16]
 800f4ee:	6165      	str	r5, [r4, #20]
 800f4f0:	443e      	add	r6, r7
 800f4f2:	1bed      	subs	r5, r5, r7
 800f4f4:	6026      	str	r6, [r4, #0]
 800f4f6:	60a5      	str	r5, [r4, #8]
 800f4f8:	464e      	mov	r6, r9
 800f4fa:	454e      	cmp	r6, r9
 800f4fc:	d900      	bls.n	800f500 <__ssputs_r+0x84>
 800f4fe:	464e      	mov	r6, r9
 800f500:	4632      	mov	r2, r6
 800f502:	4641      	mov	r1, r8
 800f504:	6820      	ldr	r0, [r4, #0]
 800f506:	f000 f918 	bl	800f73a <memmove>
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	1b9b      	subs	r3, r3, r6
 800f50e:	60a3      	str	r3, [r4, #8]
 800f510:	6823      	ldr	r3, [r4, #0]
 800f512:	441e      	add	r6, r3
 800f514:	6026      	str	r6, [r4, #0]
 800f516:	2000      	movs	r0, #0
 800f518:	e7dc      	b.n	800f4d4 <__ssputs_r+0x58>
 800f51a:	462a      	mov	r2, r5
 800f51c:	f000 f926 	bl	800f76c <_realloc_r>
 800f520:	4606      	mov	r6, r0
 800f522:	2800      	cmp	r0, #0
 800f524:	d1e2      	bne.n	800f4ec <__ssputs_r+0x70>
 800f526:	6921      	ldr	r1, [r4, #16]
 800f528:	4650      	mov	r0, sl
 800f52a:	f7fd ffb9 	bl	800d4a0 <_free_r>
 800f52e:	e7c8      	b.n	800f4c2 <__ssputs_r+0x46>

0800f530 <_svfiprintf_r>:
 800f530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f534:	461d      	mov	r5, r3
 800f536:	898b      	ldrh	r3, [r1, #12]
 800f538:	061f      	lsls	r7, r3, #24
 800f53a:	b09d      	sub	sp, #116	; 0x74
 800f53c:	4680      	mov	r8, r0
 800f53e:	460c      	mov	r4, r1
 800f540:	4616      	mov	r6, r2
 800f542:	d50f      	bpl.n	800f564 <_svfiprintf_r+0x34>
 800f544:	690b      	ldr	r3, [r1, #16]
 800f546:	b96b      	cbnz	r3, 800f564 <_svfiprintf_r+0x34>
 800f548:	2140      	movs	r1, #64	; 0x40
 800f54a:	f7fd fff7 	bl	800d53c <_malloc_r>
 800f54e:	6020      	str	r0, [r4, #0]
 800f550:	6120      	str	r0, [r4, #16]
 800f552:	b928      	cbnz	r0, 800f560 <_svfiprintf_r+0x30>
 800f554:	230c      	movs	r3, #12
 800f556:	f8c8 3000 	str.w	r3, [r8]
 800f55a:	f04f 30ff 	mov.w	r0, #4294967295
 800f55e:	e0c8      	b.n	800f6f2 <_svfiprintf_r+0x1c2>
 800f560:	2340      	movs	r3, #64	; 0x40
 800f562:	6163      	str	r3, [r4, #20]
 800f564:	2300      	movs	r3, #0
 800f566:	9309      	str	r3, [sp, #36]	; 0x24
 800f568:	2320      	movs	r3, #32
 800f56a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f56e:	2330      	movs	r3, #48	; 0x30
 800f570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f574:	9503      	str	r5, [sp, #12]
 800f576:	f04f 0b01 	mov.w	fp, #1
 800f57a:	4637      	mov	r7, r6
 800f57c:	463d      	mov	r5, r7
 800f57e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f582:	b10b      	cbz	r3, 800f588 <_svfiprintf_r+0x58>
 800f584:	2b25      	cmp	r3, #37	; 0x25
 800f586:	d13e      	bne.n	800f606 <_svfiprintf_r+0xd6>
 800f588:	ebb7 0a06 	subs.w	sl, r7, r6
 800f58c:	d00b      	beq.n	800f5a6 <_svfiprintf_r+0x76>
 800f58e:	4653      	mov	r3, sl
 800f590:	4632      	mov	r2, r6
 800f592:	4621      	mov	r1, r4
 800f594:	4640      	mov	r0, r8
 800f596:	f7ff ff71 	bl	800f47c <__ssputs_r>
 800f59a:	3001      	adds	r0, #1
 800f59c:	f000 80a4 	beq.w	800f6e8 <_svfiprintf_r+0x1b8>
 800f5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5a2:	4453      	add	r3, sl
 800f5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a6:	783b      	ldrb	r3, [r7, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 809d 	beq.w	800f6e8 <_svfiprintf_r+0x1b8>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5b8:	9304      	str	r3, [sp, #16]
 800f5ba:	9307      	str	r3, [sp, #28]
 800f5bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5c0:	931a      	str	r3, [sp, #104]	; 0x68
 800f5c2:	462f      	mov	r7, r5
 800f5c4:	2205      	movs	r2, #5
 800f5c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f5ca:	4850      	ldr	r0, [pc, #320]	; (800f70c <_svfiprintf_r+0x1dc>)
 800f5cc:	f7f0 fe10 	bl	80001f0 <memchr>
 800f5d0:	9b04      	ldr	r3, [sp, #16]
 800f5d2:	b9d0      	cbnz	r0, 800f60a <_svfiprintf_r+0xda>
 800f5d4:	06d9      	lsls	r1, r3, #27
 800f5d6:	bf44      	itt	mi
 800f5d8:	2220      	movmi	r2, #32
 800f5da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f5de:	071a      	lsls	r2, r3, #28
 800f5e0:	bf44      	itt	mi
 800f5e2:	222b      	movmi	r2, #43	; 0x2b
 800f5e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f5e8:	782a      	ldrb	r2, [r5, #0]
 800f5ea:	2a2a      	cmp	r2, #42	; 0x2a
 800f5ec:	d015      	beq.n	800f61a <_svfiprintf_r+0xea>
 800f5ee:	9a07      	ldr	r2, [sp, #28]
 800f5f0:	462f      	mov	r7, r5
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	250a      	movs	r5, #10
 800f5f6:	4639      	mov	r1, r7
 800f5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5fc:	3b30      	subs	r3, #48	; 0x30
 800f5fe:	2b09      	cmp	r3, #9
 800f600:	d94d      	bls.n	800f69e <_svfiprintf_r+0x16e>
 800f602:	b1b8      	cbz	r0, 800f634 <_svfiprintf_r+0x104>
 800f604:	e00f      	b.n	800f626 <_svfiprintf_r+0xf6>
 800f606:	462f      	mov	r7, r5
 800f608:	e7b8      	b.n	800f57c <_svfiprintf_r+0x4c>
 800f60a:	4a40      	ldr	r2, [pc, #256]	; (800f70c <_svfiprintf_r+0x1dc>)
 800f60c:	1a80      	subs	r0, r0, r2
 800f60e:	fa0b f000 	lsl.w	r0, fp, r0
 800f612:	4318      	orrs	r0, r3
 800f614:	9004      	str	r0, [sp, #16]
 800f616:	463d      	mov	r5, r7
 800f618:	e7d3      	b.n	800f5c2 <_svfiprintf_r+0x92>
 800f61a:	9a03      	ldr	r2, [sp, #12]
 800f61c:	1d11      	adds	r1, r2, #4
 800f61e:	6812      	ldr	r2, [r2, #0]
 800f620:	9103      	str	r1, [sp, #12]
 800f622:	2a00      	cmp	r2, #0
 800f624:	db01      	blt.n	800f62a <_svfiprintf_r+0xfa>
 800f626:	9207      	str	r2, [sp, #28]
 800f628:	e004      	b.n	800f634 <_svfiprintf_r+0x104>
 800f62a:	4252      	negs	r2, r2
 800f62c:	f043 0302 	orr.w	r3, r3, #2
 800f630:	9207      	str	r2, [sp, #28]
 800f632:	9304      	str	r3, [sp, #16]
 800f634:	783b      	ldrb	r3, [r7, #0]
 800f636:	2b2e      	cmp	r3, #46	; 0x2e
 800f638:	d10c      	bne.n	800f654 <_svfiprintf_r+0x124>
 800f63a:	787b      	ldrb	r3, [r7, #1]
 800f63c:	2b2a      	cmp	r3, #42	; 0x2a
 800f63e:	d133      	bne.n	800f6a8 <_svfiprintf_r+0x178>
 800f640:	9b03      	ldr	r3, [sp, #12]
 800f642:	1d1a      	adds	r2, r3, #4
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	9203      	str	r2, [sp, #12]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	bfb8      	it	lt
 800f64c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f650:	3702      	adds	r7, #2
 800f652:	9305      	str	r3, [sp, #20]
 800f654:	4d2e      	ldr	r5, [pc, #184]	; (800f710 <_svfiprintf_r+0x1e0>)
 800f656:	7839      	ldrb	r1, [r7, #0]
 800f658:	2203      	movs	r2, #3
 800f65a:	4628      	mov	r0, r5
 800f65c:	f7f0 fdc8 	bl	80001f0 <memchr>
 800f660:	b138      	cbz	r0, 800f672 <_svfiprintf_r+0x142>
 800f662:	2340      	movs	r3, #64	; 0x40
 800f664:	1b40      	subs	r0, r0, r5
 800f666:	fa03 f000 	lsl.w	r0, r3, r0
 800f66a:	9b04      	ldr	r3, [sp, #16]
 800f66c:	4303      	orrs	r3, r0
 800f66e:	3701      	adds	r7, #1
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	7839      	ldrb	r1, [r7, #0]
 800f674:	4827      	ldr	r0, [pc, #156]	; (800f714 <_svfiprintf_r+0x1e4>)
 800f676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f67a:	2206      	movs	r2, #6
 800f67c:	1c7e      	adds	r6, r7, #1
 800f67e:	f7f0 fdb7 	bl	80001f0 <memchr>
 800f682:	2800      	cmp	r0, #0
 800f684:	d038      	beq.n	800f6f8 <_svfiprintf_r+0x1c8>
 800f686:	4b24      	ldr	r3, [pc, #144]	; (800f718 <_svfiprintf_r+0x1e8>)
 800f688:	bb13      	cbnz	r3, 800f6d0 <_svfiprintf_r+0x1a0>
 800f68a:	9b03      	ldr	r3, [sp, #12]
 800f68c:	3307      	adds	r3, #7
 800f68e:	f023 0307 	bic.w	r3, r3, #7
 800f692:	3308      	adds	r3, #8
 800f694:	9303      	str	r3, [sp, #12]
 800f696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f698:	444b      	add	r3, r9
 800f69a:	9309      	str	r3, [sp, #36]	; 0x24
 800f69c:	e76d      	b.n	800f57a <_svfiprintf_r+0x4a>
 800f69e:	fb05 3202 	mla	r2, r5, r2, r3
 800f6a2:	2001      	movs	r0, #1
 800f6a4:	460f      	mov	r7, r1
 800f6a6:	e7a6      	b.n	800f5f6 <_svfiprintf_r+0xc6>
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	3701      	adds	r7, #1
 800f6ac:	9305      	str	r3, [sp, #20]
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	250a      	movs	r5, #10
 800f6b2:	4638      	mov	r0, r7
 800f6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6b8:	3a30      	subs	r2, #48	; 0x30
 800f6ba:	2a09      	cmp	r2, #9
 800f6bc:	d903      	bls.n	800f6c6 <_svfiprintf_r+0x196>
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d0c8      	beq.n	800f654 <_svfiprintf_r+0x124>
 800f6c2:	9105      	str	r1, [sp, #20]
 800f6c4:	e7c6      	b.n	800f654 <_svfiprintf_r+0x124>
 800f6c6:	fb05 2101 	mla	r1, r5, r1, r2
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	4607      	mov	r7, r0
 800f6ce:	e7f0      	b.n	800f6b2 <_svfiprintf_r+0x182>
 800f6d0:	ab03      	add	r3, sp, #12
 800f6d2:	9300      	str	r3, [sp, #0]
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	4b11      	ldr	r3, [pc, #68]	; (800f71c <_svfiprintf_r+0x1ec>)
 800f6d8:	a904      	add	r1, sp, #16
 800f6da:	4640      	mov	r0, r8
 800f6dc:	f7fe f81c 	bl	800d718 <_printf_float>
 800f6e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f6e4:	4681      	mov	r9, r0
 800f6e6:	d1d6      	bne.n	800f696 <_svfiprintf_r+0x166>
 800f6e8:	89a3      	ldrh	r3, [r4, #12]
 800f6ea:	065b      	lsls	r3, r3, #25
 800f6ec:	f53f af35 	bmi.w	800f55a <_svfiprintf_r+0x2a>
 800f6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6f2:	b01d      	add	sp, #116	; 0x74
 800f6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f8:	ab03      	add	r3, sp, #12
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	4622      	mov	r2, r4
 800f6fe:	4b07      	ldr	r3, [pc, #28]	; (800f71c <_svfiprintf_r+0x1ec>)
 800f700:	a904      	add	r1, sp, #16
 800f702:	4640      	mov	r0, r8
 800f704:	f7fe fabe 	bl	800dc84 <_printf_i>
 800f708:	e7ea      	b.n	800f6e0 <_svfiprintf_r+0x1b0>
 800f70a:	bf00      	nop
 800f70c:	08010254 	.word	0x08010254
 800f710:	0801025a 	.word	0x0801025a
 800f714:	0801025e 	.word	0x0801025e
 800f718:	0800d719 	.word	0x0800d719
 800f71c:	0800f47d 	.word	0x0800f47d

0800f720 <__ascii_wctomb>:
 800f720:	b149      	cbz	r1, 800f736 <__ascii_wctomb+0x16>
 800f722:	2aff      	cmp	r2, #255	; 0xff
 800f724:	bf85      	ittet	hi
 800f726:	238a      	movhi	r3, #138	; 0x8a
 800f728:	6003      	strhi	r3, [r0, #0]
 800f72a:	700a      	strbls	r2, [r1, #0]
 800f72c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f730:	bf98      	it	ls
 800f732:	2001      	movls	r0, #1
 800f734:	4770      	bx	lr
 800f736:	4608      	mov	r0, r1
 800f738:	4770      	bx	lr

0800f73a <memmove>:
 800f73a:	4288      	cmp	r0, r1
 800f73c:	b510      	push	{r4, lr}
 800f73e:	eb01 0302 	add.w	r3, r1, r2
 800f742:	d807      	bhi.n	800f754 <memmove+0x1a>
 800f744:	1e42      	subs	r2, r0, #1
 800f746:	4299      	cmp	r1, r3
 800f748:	d00a      	beq.n	800f760 <memmove+0x26>
 800f74a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f74e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f752:	e7f8      	b.n	800f746 <memmove+0xc>
 800f754:	4283      	cmp	r3, r0
 800f756:	d9f5      	bls.n	800f744 <memmove+0xa>
 800f758:	1881      	adds	r1, r0, r2
 800f75a:	1ad2      	subs	r2, r2, r3
 800f75c:	42d3      	cmn	r3, r2
 800f75e:	d100      	bne.n	800f762 <memmove+0x28>
 800f760:	bd10      	pop	{r4, pc}
 800f762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f766:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f76a:	e7f7      	b.n	800f75c <memmove+0x22>

0800f76c <_realloc_r>:
 800f76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76e:	4607      	mov	r7, r0
 800f770:	4614      	mov	r4, r2
 800f772:	460e      	mov	r6, r1
 800f774:	b921      	cbnz	r1, 800f780 <_realloc_r+0x14>
 800f776:	4611      	mov	r1, r2
 800f778:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f77c:	f7fd bede 	b.w	800d53c <_malloc_r>
 800f780:	b922      	cbnz	r2, 800f78c <_realloc_r+0x20>
 800f782:	f7fd fe8d 	bl	800d4a0 <_free_r>
 800f786:	4625      	mov	r5, r4
 800f788:	4628      	mov	r0, r5
 800f78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f78c:	f000 f814 	bl	800f7b8 <_malloc_usable_size_r>
 800f790:	42a0      	cmp	r0, r4
 800f792:	d20f      	bcs.n	800f7b4 <_realloc_r+0x48>
 800f794:	4621      	mov	r1, r4
 800f796:	4638      	mov	r0, r7
 800f798:	f7fd fed0 	bl	800d53c <_malloc_r>
 800f79c:	4605      	mov	r5, r0
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d0f2      	beq.n	800f788 <_realloc_r+0x1c>
 800f7a2:	4631      	mov	r1, r6
 800f7a4:	4622      	mov	r2, r4
 800f7a6:	f7fd fe67 	bl	800d478 <memcpy>
 800f7aa:	4631      	mov	r1, r6
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	f7fd fe77 	bl	800d4a0 <_free_r>
 800f7b2:	e7e9      	b.n	800f788 <_realloc_r+0x1c>
 800f7b4:	4635      	mov	r5, r6
 800f7b6:	e7e7      	b.n	800f788 <_realloc_r+0x1c>

0800f7b8 <_malloc_usable_size_r>:
 800f7b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7bc:	1f18      	subs	r0, r3, #4
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	bfbc      	itt	lt
 800f7c2:	580b      	ldrlt	r3, [r1, r0]
 800f7c4:	18c0      	addlt	r0, r0, r3
 800f7c6:	4770      	bx	lr

0800f7c8 <_init>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	bf00      	nop
 800f7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ce:	bc08      	pop	{r3}
 800f7d0:	469e      	mov	lr, r3
 800f7d2:	4770      	bx	lr

0800f7d4 <_fini>:
 800f7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d6:	bf00      	nop
 800f7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7da:	bc08      	pop	{r3}
 800f7dc:	469e      	mov	lr, r3
 800f7de:	4770      	bx	lr
